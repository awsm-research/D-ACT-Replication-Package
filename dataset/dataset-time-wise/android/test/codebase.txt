@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { if ((mIccSlotStatus) != null) { resultSuccess(result, mIccSlotStatus); } else { resultFail(result, null, new java.lang.RuntimeException("IccSlotStatus not set")); } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSanity() { assertEquals(com.android.internal.telephony.uicc.UiccControllerTest.PHONE_COUNT, mUiccControllerUT.getUiccSlots().length); assertNotNull(mUiccControllerUT.getUiccCard(0)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_3GPP)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_3GPP2)); assertNull(mUiccControllerUT.getIccRecords(0, UiccController.APP_FAM_IMS)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_3GPP)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_3GPP2)); assertNull(mUiccControllerUT.getIccFileHandler(0, UiccController.APP_FAM_IMS)); }
@org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(this.getClass().getSimpleName()); doReturn(com.android.internal.telephony.uicc.UiccControllerTest.PHONE_COUNT).when(mTelephonyManager).getPhoneCount(); doReturn(com.android.internal.telephony.uicc.UiccControllerTest.PHONE_COUNT).when(mTelephonyManager).getSimCount(); replaceInstance(com.android.internal.telephony.uicc.UiccController.class, "mInstance", null, null); mIccCardStatus.mApplications = new com.android.internal.telephony.uicc.IccCardApplicationStatus[]{ }; mIccCardStatus.mCdmaSubscriptionAppIndex = mIccCardStatus.mImsSubscriptionAppIndex = mIccCardStatus.mGsmUmtsSubscriptionAppIndex = -1; mSimulatedCommands.setIccCardStatus(mIccCardStatus); mUiccControllerHandlerThread = new com.android.internal.telephony.uicc.UiccControllerTest.UiccControllerHandlerThread(TAG); mUiccControllerHandlerThread.start(); waitUntilReady(); com.android.internal.telephony.TelephonyTestUtils.waitForMs(100); }
@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SLOT_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.getSimSlotsStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getIccSlotStatus", e); } } } }

public void onResume() { super.onResume(); boolean conn = checkNow(this.getApplicationContext()); android.content.Intent returnIntent = new android.content.Intent(); returnIntent.putExtra(com.android.tests.connectivity.uid.ConnectivityTestActivity.RESULT, conn); setResult(com.android.tests.connectivity.uid.RESULT_OK, returnIntent); finish(); }


private void testChangeFontScale(java.lang.String activityName, boolean relaunch) throws java.lang.Exception { launchActivity(activityName); final java.lang.String[] waitForActivitiesVisible = new java.lang.String[]{ activityName }; mAmWmState.computeState(mDevice, waitForActivitiesVisible); setFontScale(1.0F); mAmWmState.computeState(mDevice, waitForActivitiesVisible); final int densityDpi = getGlobalDensityDpi(); for (float fontScale = 0.85F; fontScale <= 1.3F; fontScale += 0.15F) { final java.lang.String logSeparator = clearLogcat(); setFontScale(fontScale); mAmWmState.computeState(mDevice, waitForActivitiesVisible); assertRelaunchOrConfigChanged(activityName, (relaunch ? 1 : 0), (relaunch ? 0 : 1), logSeparator); assertExpectedFontPixelSize(activityName, android.server.cts.ActivityManagerConfigChangeTests.scaledPixelsToPixels(android.server.cts.ActivityManagerConfigChangeTests.EXPECTED_FONT_SIZE_SP, fontScale, densityDpi), logSeparator); } }
private int getGlobalDensityDpi() throws java.lang.Exception { final java.lang.String result = getDevice().executeShellCommand("am get-config"); final java.lang.String[] lines = result.split("\n"); if ((lines.length) < 1) { throw new java.lang.IllegalStateException(("Invalid config returned from device: " + result)); } final java.util.regex.Matcher matcher = android.server.cts.ActivityManagerConfigChangeTests.sDeviceDensityPattern.matcher(lines[0]); if (!(matcher.matches())) { throw new java.lang.IllegalStateException(("Invalid config returned from device: " + (lines[0]))); } switch (matcher.group(1)) { case "l" : return 120; case "m" : return 160; case "tv" : return 213; case "h" : return 240; case "xh" : return 320; case "xxh" : return 480; case "xxxh" : return 640; } return java.lang.Integer.parseInt(matcher.group(1)); }
@android.platform.test.annotations.Presubmit public void testFullscreenAppOrientationRequests() throws java.lang.Exception { launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); assertEquals("Fullscreen app requested portrait orientation", 1, mAmWmState.getWmState().getLastOrientation()); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.LANDSCAPE_ACTIVITY_NAME, true); assertEquals("Fullscreen app requested landscape orientation", 0, mAmWmState.getWmState().getLastOrientation()); launchActivity(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME); mAmWmState.assertVisibility(android.server.cts.ActivityManagerAppConfigurationTests.PORTRAIT_ACTIVITY_NAME, true); assertEquals("Fullscreen app requested portrait orientation", 1, mAmWmState.getWmState().getLastOrientation()); }
public void test_23831() throws java.lang.Exception { byte[] bytes = new byte[]{ ((byte) (245)), ((byte) (169)), ((byte) (234)), ((byte) (33)) }; java.lang.String expected = "\ufffd\ufffd!"; java.nio.charset.CharsetDecoder decoder = java.nio.charset.Charset.forName("UTF-8").newDecoder(); decoder.onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE); assertEquals(expected, decoder.decode(java.nio.ByteBuffer.wrap(bytes)).toString()); assertEquals(expected, new java.lang.String(bytes, "UTF-8")); }
public void testAssistantStackZOrder() throws java.lang.Exception { if ((!(supportsPip())) || (!(supportsSplitScreenMultiWindow()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ENTER_PIP, "true"); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.PINNED_STACK_ID); mAmWmState.assertContainsStack("Must contain pinned stack.", android.server.cts.PINNED_STACK_ID); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack("Must contain fullscreen stack.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack("Must contain docked stack.", android.server.cts.DOCKED_STACK_ID); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); assertAssistantStackExists(); mAmWmState.assertFrontStack("Pinned stack should be on top.", android.server.cts.PINNED_STACK_ID); mAmWmState.assertFocusedStack("Assistant stack should be focused.", android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }

public void testAssistantStackFinishToPreviousApp() throws java.lang.Exception { launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF, "true"); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerState.STATE_RESUMED); mAmWmState.assertFocusedActivity("TestActivity should be resumed", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertFrontStack("Fullscreen stack should be on top.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedStack("Fullscreen stack should be focused.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); }
public void testAssistantStackLaunchNewTaskWithDockedStack() throws java.lang.Exception { if (!(supportsSplitScreenMultiWindow())) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack("Must contain fullscreen stack.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack("Must contain docked stack.", android.server.cts.DOCKED_STACK_ID); enableAssistant(); assertAssistantStackCanLaunchAndReturnFromNewTask(); disableAssistant(); }
public void testSetVrThreadAPISuccess() throws java.lang.Throwable { setIntent(1, 1, 0, 0); android.content.ComponentName requestedComponent = new android.content.ComponentName(mContext, com.android.cts.verifier.vr.MockVrListenerService.class); Settings.Secure.putString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS, requestedComponent.flattenToString()); mActivity = getActivity(); assertTrue(mActivity.waitForFrameDrawn()); if (mActivity.getPackageManager().hasSystemFeature(PackageManager.FEATURE_VR_MODE_HIGH_PERFORMANCE)) { int vr_thread = 0; int policy = 0; mActivity.setVrModeEnabled(true, requestedComponent); vr_thread = java.lang.Process.myTid(); mActivityManager = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); mActivityManager.setVrThread(vr_thread); policy = ((int) (java.lang.Process.getThreadScheduler(vr_thread))); android.util.Log.e(android.vr.cts.VrSetFIFOThreadTest.TAG, ("scheduling policy: " + policy)); assertEquals(((android.vr.cts.VrSetFIFOThreadTest.SCHED_FIFO) | (android.vr.cts.VrSetFIFOThreadTest.SCHED_RESET_ON_FORK)), policy); } }
public void testSetVrThreadAPIFailure() throws java.lang.Throwable { setIntent(1, 1, 0, 0); android.content.ComponentName requestedComponent = new android.content.ComponentName(mContext, com.android.cts.verifier.vr.MockVrListenerService.class); Settings.Secure.putString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS, requestedComponent.flattenToString()); mActivity = getActivity(); assertTrue(mActivity.waitForFrameDrawn()); if (mActivity.getPackageManager().hasSystemFeature(PackageManager.FEATURE_VR_MODE_HIGH_PERFORMANCE)) { int vr_thread = 0; int policy = 0; mActivity.setVrModeEnabled(false, requestedComponent); vr_thread = java.lang.Process.myTid(); mActivityManager = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); mActivityManager.setVrThread(vr_thread); policy = ((int) (java.lang.Process.getThreadScheduler(vr_thread))); android.util.Log.e(android.vr.cts.VrSetFIFOThreadTest.TAG, ("scheduling policy: " + policy)); assertEquals(android.vr.cts.VrSetFIFOThreadTest.SCHED_OTHER, policy); } }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getTargetContext(); mOldVrListener = Settings.Secure.getString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS); }



private boolean verifyWithDomainNamePattern(java.lang.String hostname, java.lang.String pattern) { libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubSSLSession session = new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubSSLSession(); session.peerCertificates = new java.security.cert.Certificate[]{ new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate((("cn=\"" + pattern) + "\"")) }; boolean resultWhenPatternInCn = verifier.verify(hostname, session); session.peerCertificates = new java.security.cert.Certificate[]{ new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate("ou=test").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME, pattern) }; boolean resultWhenPatternInSubjectAltName = verifier.verify(hostname, session); if (resultWhenPatternInCn != resultWhenPatternInSubjectAltName) { fail((((((((("Different results between pattern in CN and SubjectAltName." + " hostname : ") + hostname) + ", pattern: ") + pattern) + ", when pattern in CN: ") + resultWhenPatternInCn) + ", when pattern in SubjectAltName: ") + resultWhenPatternInSubjectAltName)); } return resultWhenPatternInCn; }
@java.lang.Override void test() { if ((status) == (READY)) { com.android.cts.verifier.notifications.MockListener.MockListener.snooze(mContext); status = RETEST; } else { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerStatus(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.StatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressor()) == null) { status = PASS; } else { logFail(); status = RETEST; delay(); } } next(); } }); } delay(); }
@java.lang.Override void test() { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerStatus(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.StatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressor()) == null) { status = PASS; } else { status = FAIL; } } next(); } }); delay(); }
@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressor()) == null) { status = PASS; } else { status = FAIL; } } next(); }
@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressor()) == null) { status = PASS; } else { logFail(); status = RETEST; delay(); } } next(); }
protected boolean getLockedRecordsLoaded() { return ((mRecordsToLoad) == 0) && (mLockedRecordsRequested); }
private void onLockedAllRecordsLoaded() { setSimLanguageFromEF(); mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); }
private void onLocked() { if (DBG) log("only fetch EF_LI, EF_PL and EF_ICCID in locked state"); mLockedRecordsRequested = true; loadEfLiAndEfPl(); mFh.loadEFTransparent(com.android.internal.telephony.uicc.EF_ICCID, obtainMessage(com.android.internal.telephony.uicc.SIMRecords.EVENT_GET_ICCID_DONE)); (mRecordsToLoad)++; }

private void onLocked() { if (DBG) log("only fetch EF_ICCID in locked state"); mLockedRecordsRequested = true; mFh.loadEFTransparent(com.android.internal.telephony.uicc.EF_ICCID, obtainMessage(com.android.internal.telephony.uicc.RuimRecords.EVENT_GET_ICCID_DONE)); (mRecordsToLoad)++; }
private void onLockedAllRecordsLoaded() { if (com.android.internal.telephony.uicc.IsimUiccRecords.DBG) log("SIM locked; record load complete"); mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); }
private void onLockedAllRecordsLoaded() { mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); }

@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, result); if ((mDcResponse) == null) { try { mDcResponse = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, "IP", "rmnet_data7", java.util.Arrays.asList(new android.telephony.data.InterfaceAddress("12.34.56.78", 0)), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("98.76.54.32")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("11.22.33.44")), null, 1440); } catch (java.lang.Exception e) { } } if (mDcSuccess) { resultSuccess(result, mDcResponse); } else { resultFail(result, mDcResponse, new java.lang.RuntimeException("Setup data call failed!")); } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetLinkPropertiesInvalidAddress() throws java.lang.Exception { android.telephony.data.DataCallResponse response = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, "IP", com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_IFNAME, java.util.Arrays.asList(new android.telephony.data.InterfaceAddress("224.224.224.224", 0)), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_DNS)), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_GATEWAY)), java.util.Arrays.asList(com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_PCSCF_ADDRESS), 1440); android.net.LinkProperties linkProperties = new android.net.LinkProperties(); assertEquals(SetupResult.ERR_UnacceptableParameter, setLinkProperties(response, linkProperties)); }



private void onSetUserDataEnabled(boolean enabled) { synchronized(mDataEnabledSettings) { if ((mDataEnabledSettings.isUserDataEnabled()) != enabled) { mDataEnabledSettings.setUserDataEnabled(enabled); if ((android.telephony.TelephonyManager.getDefault().getSimCount()) == 1) { Settings.Global.putInt(mResolver, Settings.Global.MOBILE_DATA, (enabled ? 1 : 0)); } else { int phoneSubId = mPhone.getSubId(); Settings.Global.putInt(mResolver, ((Settings.Global.MOBILE_DATA) + phoneSubId), (enabled ? 1 : 0)); } if ((!(getDataRoamingEnabled())) && (mPhone.getServiceState().getDataRoaming())) { if (enabled) { notifyOffApnsOfAvailability(Phone.REASON_ROAMING_ON); } else { notifyOffApnsOfAvailability(Phone.REASON_DATA_DISABLED); } } if (enabled) { reevaluateDataConnections(); onTrySetupData(Phone.REASON_DATA_ENABLED); } else { onCleanUpAllConnections(Phone.REASON_DATA_SPECIFIC_DISABLED); } } } }



@java.lang.Override public void removeNetwork(int netId) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, com.android.server.NetworkManagementService.TAG); try { mConnector.execute("network", "destroy", netId); } catch (com.android.server.NativeDaemonConnectorException e) { throw e.rethrowAsParcelableException(); } }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { final java.lang.String action = intent.getAction(); final java.lang.String iccState = intent.getStringExtra(IccCardConstants.INTENT_KEY_ICC_STATE); if (TelephonyIntents.ACTION_SIM_STATE_CHANGED.equals(action)) { if (IccCardConstants.INTENT_VALUE_ICC_LOADED.equals(iccState)) { sendEmptyMessage(com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_RESET); java.lang.String mobileData = Settings.Global.MOBILE_DATA; if ((android.telephony.TelephonyManager.getDefault().getSimCount()) != 1) { mobileData = mobileData + (mPhone.getSubId()); } mSettingsObserver.observe(Settings.Global.getUriFor(mobileData), com.android.internal.telephony.CarrierActionAgent.EVENT_MOBILE_DATA_SETTINGS_CHANGED); mSettingsObserver.observe(Settings.Global.getUriFor(Settings.Global.AIRPLANE_MODE_ON), com.android.internal.telephony.CarrierActionAgent.EVENT_APM_SETTINGS_CHANGED); } else if (IccCardConstants.INTENT_VALUE_ICC_ABSENT.equals(iccState)) { sendEmptyMessage(com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_RESET); mSettingsObserver.unobserve(); } } }
@org.junit.Test public void testMacAddrTypes() { android.net.MacAddressTest.AddrTypeTestCase[] testcases = new android.net.MacAddressTest.AddrTypeTestCase[]{ android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 0), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5, 6, 7), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNICAST, 160, 176, 192, 208, 224, 240), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_BROADCAST, 255, 255, 255, 255, 255, 255), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 1, 2, 3, 4, 5, 6), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 11, 22, 33, 44, 55, 66), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 33, 33, 170, 187, 204, 221) }; for (android.net.MacAddressTest.AddrTypeTestCase t : testcases) { int got = android.net.MacAddress.macAddressType(t.addr); java.lang.String msg = java.lang.String.format("expected type of %s to be %s, but got %s", java.util.Arrays.toString(t.addr), t.expectedType, got); assertEquals(msg, t.expectedType, got); if (got != (MacAddress.TYPE_UNKNOWN)) { assertEquals(got, android.net.MacAddress.fromBytes(t.addr).addressType()); } } }
@android.net.MacAddress.MacAddressType public int addressType() { if (equals(android.net.MacAddress.BROADCAST_ADDRESS)) { return android.net.MacAddress.TYPE_BROADCAST; } if (isMulticastAddress()) { return android.net.MacAddress.TYPE_MULTICAST; } return android.net.MacAddress.TYPE_UNICAST; }

void expectAvailableCallbacks(com.android.server.ConnectivityServiceTest.MockNetworkAgent agent, boolean expectSuspended, int timeoutMs) { expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE, agent, timeoutMs); if (expectSuspended) { expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.SUSPENDED, agent, timeoutMs); } expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.NETWORK_CAPABILITIES, agent, timeoutMs); expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.LINK_PROPERTIES, agent, timeoutMs); }

private void registerUiccCardEvents() { if ((mUiccApplication) != null) { mUiccApplication.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); mUiccApplication.registerForNetworkLocked(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_NETWORK_LOCKED, null); } if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); mIccRecords.registerForLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_LOCKED, null); mIccRecords.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } }

private void unregisterUiccCardEvents() { if ((mUiccCard) != null) mUiccCard.unregisterForCarrierPrivilegeRulesLoaded(this); if ((mUiccApplication) != null) mUiccApplication.unregisterForReady(this); if ((mUiccApplication) != null) mUiccApplication.unregisterForLocked(this); if ((mUiccApplication) != null) mUiccApplication.unregisterForNetworkLocked(this); if ((mIccRecords) != null) mIccRecords.unregisterForRecordsLoaded(this); if ((mIccRecords) != null) mIccRecords.unregisterForRecordsEvents(this); }
@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeString(profileFile); if ((profileFd) != null) { out.writeInt(1); profileFd.writeToParcel(out, flags); } else { out.writeInt(0); } out.writeInt(samplingInterval); out.writeInt((autoStopProfiler ? 1 : 0)); out.writeInt((streamingOutput ? 1 : 0)); out.writeString(agent); }
@java.lang.Override void onStart() { if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, "onStart()"); mIppServiceListener = new com.android.bips.discovery.MdnsDiscovery.NsdServiceListener() { @java.lang.Override public void onStartDiscoveryFailed(java.lang.String s, int i) { mIppServiceListener = null; } }; mNsdManager.discoverServices(com.android.bips.discovery.MdnsDiscovery.SERVICE_IPP, NsdManager.PROTOCOL_DNS_SD, mIppServiceListener); mIppsServiceListener = new com.android.bips.discovery.MdnsDiscovery.NsdServiceListener() { @java.lang.Override public void onStartDiscoveryFailed(java.lang.String s, int i) { mIppServiceListener = null; } }; mNsdManager.discoverServices(com.android.bips.discovery.MdnsDiscovery.SERVICE_IPPS, NsdManager.PROTOCOL_DNS_SD, mIppsServiceListener); }
public void start(com.android.bips.discovery.Discovery.Listener listener) { mListeners.add(listener); mPrinters.values().forEach(listener::onPrinterFound); start(); }


@java.lang.Override public void onResolveFailed(final android.net.nsd.NsdServiceInfo info, final int errorCode) { }
android.print.PrinterInfo createPrinterInfo() { if (((mCapabilities) != null) && (!(mCapabilities.isSupported))) { return null; } com.android.bips.discovery.DiscoveredPrinter printer = mPrintService.getDiscovery().getPrinter(mDiscoveredPrinter.getUri()); if (printer == null) return null; java.lang.String description = printer.getDescription(mPrintService); boolean idle = (mFound) && ((mCapabilities) != null); android.print.PrinterInfo.Builder builder = new android.print.PrinterInfo.Builder(mPrinterId, printer.name, (idle ? android.print.PrinterInfo.STATUS_IDLE : android.print.PrinterInfo.STATUS_UNAVAILABLE)).setIconResourceId(R.drawable.ic_printer).setDescription(description); if ((mCapabilities) != null) { android.print.PrinterCapabilitiesInfo.Builder capabilitiesBuilder = new android.print.PrinterCapabilitiesInfo.Builder(mPrinterId); mCapabilities.buildCapabilities(mPrintService, capabilitiesBuilder); builder.setCapabilities(capabilitiesBuilder.build()); } return builder.build(); }



private void finish(boolean success, java.lang.String error) { mPrintService.unlockWifi(); mBackend.closeDocument(); mMainHandler.removeCallbacksAndMessages(null); if (success) { mPrintJob.start(); mPrintJob.complete(); } else if ((mState) == (com.android.bips.LocalPrintJob.STATE_CANCEL)) { mPrintJob.cancel(); } else { mPrintJob.fail(error); } mState = com.android.bips.LocalPrintJob.STATE_DONE; mCompleteConsumer.accept(this); }
void start(java.util.function.Consumer<com.android.bips.LocalPrintJob> callback) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ("start() " + (mPrintJob))); if ((mState) != (com.android.bips.LocalPrintJob.STATE_INIT)) { android.util.Log.w(com.android.bips.LocalPrintJob.TAG, ("Invalid start state " + (mState))); return; } mPrintJob.start(); mPrintService.lockWifi(); mState = com.android.bips.LocalPrintJob.STATE_DISCOVERY; mCompleteConsumer = callback; mPrintService.getDiscovery().start(this); mMainHandler.postDelayed(() -> { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, "Discovery timeout"); if ((mState) == (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) { mPrintService.getDiscovery().stop(this); finish(false, mPrintService.getString(R.string.printer_offline)); } }, com.android.bips.LocalPrintJob.DISCOVERY_TIMEOUT); }



@java.lang.Override void onStop() { if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, "onStop()"); com.android.bips.discovery.NsdResolveQueue.getInstance(getPrintService()).clear(); for (com.android.bips.discovery.MdnsDiscovery.IppsDelay ippsDelay : mIppsDelays.values()) { mMainHandler.removeCallbacks(ippsDelay); } mIppsDelays.clear(); if ((mIppServiceListener) != null) { mNsdManager.stopServiceDiscovery(mIppServiceListener); mIppServiceListener = null; } if ((mIppsServiceListener) != null) { mNsdManager.stopServiceDiscovery(mIppsServiceListener); mIppsServiceListener = null; } mMainHandler.removeCallbacksAndMessages(null); com.android.bips.discovery.NsdResolveQueue.getInstance(getPrintService()).clear(); }
@java.lang.Override void onStart() { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, "onStart"); for (com.android.bips.discovery.DiscoveredPrinter printer : mManualPrinters) { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, ("reporting " + printer)); getPrintService().getCapabilitiesCache().evictOnNetworkChange(printer.getUri()); printerFound(printer); } }











@java.lang.Override public void onCapabilities(com.android.bips.discovery.DiscoveredPrinter printer, com.android.bips.jni.LocalPrinterCapabilities capabilities) { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, ("onCapabilities: " + capabilities)); mUris.remove(printer.getUri()); if (capabilities == null) { if (mUris.isEmpty()) { mFinalCallback.onNotFound(); } return; } getPrintService().getCapabilitiesCache().cancel(this); android.net.Uri uuid = (android.text.TextUtils.isEmpty(capabilities.uuid)) ? null : android.net.Uri.parse(capabilities.uuid); java.lang.String name = (android.text.TextUtils.isEmpty(capabilities.name)) ? printer.getUri().getHost() : capabilities.name; com.android.bips.discovery.DiscoveredPrinter resolvedPrinter = new com.android.bips.discovery.DiscoveredPrinter(uuid, name, printer.getUri(), capabilities.location); if (capabilities.isSupported) { addManualPrinter(resolvedPrinter); } mFinalCallback.onFound(resolvedPrinter, capabilities.isSupported); }






void allPrintersLost() { for (com.android.bips.discovery.DiscoveredPrinter printer : mPrinters.values()) { for (com.android.bips.discovery.Discovery.Listener listener : mListeners) { listener.onPrinterLost(printer); } } mPrinters.clear(); }
public void resolve(android.net.nsd.NsdManager nsdManager, android.net.nsd.NsdServiceInfo serviceInfo, android.net.nsd.NsdManager.ResolveListener listener) { if (com.android.bips.discovery.NsdResolveQueue.DEBUG) { android.util.Log.d(com.android.bips.discovery.NsdResolveQueue.TAG, ((("Adding resolve of " + (serviceInfo.getServiceName())) + " to queue size=") + (mResolveRequests.size()))); } mResolveRequests.addLast(new com.android.bips.discovery.NsdResolveQueue.NsdResolveRequest(nsdManager, serviceInfo, listener)); if ((mResolveRequests.size()) == 1) { resolveNextRequest(); } }
public static boolean isConnected(android.content.Context context) { android.net.ConnectivityManager cm = ((android.net.ConnectivityManager) (context.getSystemService(Context.CONNECTIVITY_SERVICE))); for (android.net.Network network : cm.getAllNetworks()) { android.net.NetworkInfo networkInfo = cm.getNetworkInfo(network); if (((networkInfo != null) && (networkInfo.isConnected())) && ((networkInfo.getType()) == (android.net.ConnectivityManager.TYPE_WIFI))) { return true; } } return false; }

@java.lang.Override public void onServiceFound(final android.net.nsd.NsdServiceInfo info) { if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, ("onServiceFound - " + (info.getServiceName()))); com.android.bips.discovery.NsdResolveQueue.getInstance(getPrintService()).resolve(mNsdManager, info, this); }
@java.lang.Override void onStop() { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, "onStop"); }
@java.lang.Override public void onServiceResolved(final android.net.nsd.NsdServiceInfo info) { final com.android.bips.discovery.DiscoveredPrinter printer = com.android.bips.discovery.MdnsDiscovery.toNetworkPrinter(info); if (com.android.bips.discovery.MdnsDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MdnsDiscovery.TAG, ((("Service " + (info.getServiceName())) + " resolved to ") + printer)); if (printer == null) { return; } android.net.Uri printerUri = printer.getUri(); if (printer.path.getScheme().equals(com.android.bips.discovery.MdnsDiscovery.SCHEME_IPPS)) { com.android.bips.discovery.DiscoveredPrinter oldPrinter = getPrinter(printerUri); com.android.bips.discovery.MdnsDiscovery.IppsDelay ippsDelay = mIppsDelays.get(printerUri); if ((oldPrinter == null) && (ippsDelay == null)) { mIppsDelays.put(printerUri, new com.android.bips.discovery.MdnsDiscovery.IppsDelay(printer)); } return; } else { cancelIppsDelay(printerUri); } mMainHandler.post(() -> printerFound(printer)); }
@java.lang.Override void onStart() { if (com.android.bips.discovery.MultiDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MultiDiscovery.TAG, "onStart()"); mWifiMonitor = mWifiMonitorFactory.create(getPrintService(), ( connected) -> { if (connected) { if (com.android.bips.discovery.MultiDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MultiDiscovery.TAG, "Connected, starting discovery"); for (com.android.bips.discovery.Discovery discovery : mDiscoveries) { discovery.start(mChildListener); } } else { if (com.android.bips.discovery.MultiDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.MultiDiscovery.TAG, "Disconnected, stopping discovery"); for (com.android.bips.discovery.Discovery discovery : mDiscoveries) { discovery.stop(mChildListener); } allPrintersLost(); } }); }

@java.lang.Override public void onStopPrinterDiscovery() { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, "onStopPrinterDiscovery()"); mPrintService.getDiscovery().stop(this); android.print.PrintManager printManager = mPrintService.getSystemService(android.print.PrintManager.class); printManager.removePrintServicesChangeListener(this); printManager.removePrintServiceRecommendationsChangeListener(this); if ((mExpirePrinters) != null) { mPrintService.getMainHandler().removeCallbacks(mExpirePrinters); mExpirePrinters = null; } }
void requestCapabilities() { mPrintService.getCapabilitiesCache().request(mDiscoveredPrinter, mSession.isPriority(mPrinterId), this); }


void handlePrinter(com.android.bips.LocalPrinter localPrinter) { if (((localPrinter.getCapabilities()) == null) && (!(mKnownGood.contains(localPrinter.getPrinterId())))) { return; } android.print.PrinterInfo info = localPrinter.createPrinterInfo(); mKnownGood.remove(localPrinter.getPrinterId()); if (info == null) return; if (((info.getStatus()) == (android.print.PrinterInfo.STATUS_IDLE)) && ((localPrinter.getUuid()) != null)) { mKnownGood.add(0, localPrinter.getPrinterId()); } for (android.print.PrinterInfo knownInfo : getPrinters()) { if ((knownInfo.getId().equals(info.getId())) && ((info.getCapabilities()) == null)) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ("Ignore update with no caps " + localPrinter)); return; } } if (com.android.bips.LocalDiscoverySession.DEBUG) { android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ((((("handlePrinter: reporting " + localPrinter) + " caps=") + ((info.getCapabilities()) != null)) + " status=") + (info.getStatus()))); } if (!(isHandledByOtherService(localPrinter))) { addPrinters(java.util.Collections.singletonList(info)); } }
private void monitorExpiredPrinters() { if (((mExpirePrinters) == null) && (!(mPrinters.isEmpty()))) { mExpirePrinters = new com.android.bips.LocalDiscoverySession.ExpirePrinters(); mPrintService.getMainHandler().postDelayed(mExpirePrinters, com.android.bips.LocalDiscoverySession.PRINTER_EXPIRATION_MILLIS); } }
@java.lang.Override public void onStartPrinterStateTracking(final android.print.PrinterId printerId) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ("onStartPrinterStateTracking() " + printerId)); com.android.bips.LocalPrinter localPrinter = mPrinters.get(printerId); mTrackingIds.add(printerId); if ((localPrinter == null) || (!(localPrinter.isFound()))) return; localPrinter.requestCapabilities(); }
@java.lang.Override public void onPrinterLost(com.android.bips.discovery.DiscoveredPrinter lostPrinter) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ("onPrinterLost() " + lostPrinter)); android.print.PrinterId printerId = lostPrinter.getId(mPrintService); if (printerId.getLocalId().startsWith("ipp")) { mCapabilitiesCache.remove(lostPrinter.getUri()); } com.android.bips.LocalPrinter localPrinter = mPrinters.get(printerId); if (localPrinter == null) return; localPrinter.notFound(); handlePrinter(localPrinter); monitorExpiredPrinters(); }

@java.lang.Override public void onStartPrinterDiscovery(java.util.List<android.print.PrinterId> priorityList) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ("onStartPrinterDiscovery() " + priorityList)); mPriorityIds.clear(); mPriorityIds.addAll(priorityList); mPrinters.values().forEach(LocalPrinter::notFound); monitorExpiredPrinters(); mPrintService.getDiscovery().start(this); mPrintManager.addPrintServicesChangeListener(this, null); onPrintServicesChanged(); mPrintManager.addPrintServiceRecommendationsChangeListener(this, null); onPrintServiceRecommendationsChanged(); }

public void cancel(com.android.bips.ipp.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) { java.util.List<android.net.Uri> toDrop = new java.util.ArrayList<>(); for (java.util.Map.Entry<android.net.Uri, com.android.bips.ipp.CapabilitiesCache.Request> entry : mRequests.entrySet()) { com.android.bips.ipp.CapabilitiesCache.Request request = entry.getValue(); request.mCallbacks.remove(onLocalPrinterCapabilities); if (request.mCallbacks.isEmpty()) { toDrop.add(entry.getKey()); if ((request.mQuery) != null) { request.mQuery.cancel(true); } } } toDrop.forEach(mRequests::remove); }
@java.lang.Override protected com.android.bips.jni.LocalPrinterCapabilities doInBackground(java.lang.Void... dummy) { long start = java.lang.System.currentTimeMillis(); com.android.bips.jni.LocalPrinterCapabilities printerCaps = new com.android.bips.jni.LocalPrinterCapabilities(); try { printerCaps.inetAddress = java.net.InetAddress.getByName(mUri.getHost()); } catch (java.net.UnknownHostException e) { return null; } boolean online = isDeviceOnline(mUri); if (com.android.bips.ipp.GetCapabilitiesTask.DEBUG) { android.util.Log.d(com.android.bips.ipp.GetCapabilitiesTask.TAG, (((((("isDeviceOnline uri=" + (mUri)) + " online=") + online) + " (") + ((java.lang.System.currentTimeMillis()) - start)) + "ms)")); } if ((!online) || (isCancelled())) return null; com.android.bips.ipp.GetCapabilitiesTask.sJniLock.lock(); int status = -1; start = java.lang.System.currentTimeMillis(); try { if (isCancelled()) return null; status = mBackend.nativeGetCapabilities(com.android.bips.ipp.Backend.getIp(mUri.getHost()), mUri.getPort(), mUri.getPath(), mUri.getScheme(), mTimeout, printerCaps); } finally { com.android.bips.ipp.GetCapabilitiesTask.sJniLock.unlock(); } if (com.android.bips.ipp.GetCapabilitiesTask.DEBUG) { android.util.Log.d(com.android.bips.ipp.GetCapabilitiesTask.TAG, (((((("callNativeGetCapabilities uri=" + (mUri)) + " status=") + status) + " (") + ((java.lang.System.currentTimeMillis()) - start)) + "ms)")); } return status == (com.android.bips.jni.BackendConstants.STATUS_OK) ? printerCaps : null; }
public void request(DiscoveredPrinter printer, boolean highPriority, com.android.bips.ipp.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, ((("request() printer=" + printer) + " high=") + highPriority)); Uri printerUri = printer.getUri(); Uri printerPath = printer.path; com.android.bips.jni.LocalPrinterCapabilities capabilities = get(printer.getUri()); if ((capabilities != null) && ((capabilities.nativeData) != null)) { onLocalPrinterCapabilities.onCapabilities(printer, capabilities); return; } com.android.bips.ipp.CapabilitiesCache.Request request = mRequests.get(printerUri); if (request == null) { if (highPriority) { request = new com.android.bips.ipp.CapabilitiesCache.Request(printer, com.android.bips.ipp.CapabilitiesCache.SECOND_PASS_TIMEOUT); } else { request = new com.android.bips.ipp.CapabilitiesCache.Request(printer, com.android.bips.ipp.CapabilitiesCache.FIRST_PASS_TIMEOUT); } mRequests.put(printerUri, request); } else if (!(request.mPrinter.path.equals(printerPath))) { android.util.Log.w(com.android.bips.ipp.CapabilitiesCache.TAG, ((("Capabilities request for printer " + printer) + " overlaps with different path ") + (request.mPrinter.path))); onLocalPrinterCapabilities.onCapabilities(printer, null); return; } request.mCallbacks.add(onLocalPrinterCapabilities); if (highPriority) { request.mHighPriority = true; } startNextRequest(); }
private void handleCapabilities(com.android.bips.discovery.DiscoveredPrinter printer, com.android.bips.jni.LocalPrinterCapabilities capabilities) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ((("Capabilities for " + (mPath)) + " are ") + capabilities)); if ((mState) != (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) return; if (capabilities == null) { finish(false, mPrintService.getString(R.string.printer_offline)); } else { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ("Starting backend print of " + (mPrintJob))); mMainHandler.removeCallbacksAndMessages(null); mState = com.android.bips.LocalPrintJob.STATE_DELIVERING; mBackend.print(mPath, mPrintJob, capabilities, this::handleJobStatus); } }

@java.lang.Override public void close() { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, "close()"); mClosed = true; mWifiMonitor.close(); }
private void cancelIppsDelay(android.net.Uri printerUri) { com.android.bips.discovery.MdnsDiscovery.IppsDelay ippsDelay = mIppsDelays.get(printerUri); mMainHandler.removeCallbacks(ippsDelay); mIppsDelays.remove(printerUri); }


private void startNextRequest() { final com.android.bips.ipp.CapabilitiesCache.Request request = getNextRequest(); if (request == null) return; request.mQuery = mBackend.getCapabilities(request.mPrinter.path, request.mTimeout, ( capabilities) -> { com.android.bips.discovery.DiscoveredPrinter printer = request.mPrinter; if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, ((("Capabilities for " + printer) + " cap=") + capabilities)); if (mClosed) return; mRequests.remove(printer.getUri()); android.net.Uri capUuid = null; if (capabilities != null) { if (!(android.text.TextUtils.isEmpty(capabilities.uuid))) { capUuid = android.net.Uri.parse(capabilities.uuid); } if ((printer.uuid != null) && (!(printer.uuid.equals(capUuid)))) { android.util.Log.w(com.android.bips.ipp.CapabilitiesCache.TAG, (("UUID mismatch for " + printer) + "; rejecting capabilities")); capabilities = null; } } if (capabilities == null) { if (request.mTimeout == (com.android.bips.ipp.CapabilitiesCache.FIRST_PASS_TIMEOUT)) { request.mTimeout = com.android.bips.ipp.CapabilitiesCache.SECOND_PASS_TIMEOUT; request.mQuery = null; mRequests.put(printer.getUri(), request); startNextRequest(); return; } else { remove(printer.getUri()); } } else { android.net.Uri key = printer.getUri(); if (printer.uuid == null) { evictOnNetworkChange(key); if (capUuid != null) { key = capUuid; } } put(key, capabilities); } for (com.android.bips.ipp.OnLocalPrinterCapabilities callback : request.mCallbacks) { callback.onCapabilities(printer, capabilities); } startNextRequest(); }); }



@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter discoveredPrinter) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ("onPrinterFound() " + discoveredPrinter)); if (isDestroyed()) { android.util.Log.w(com.android.bips.LocalDiscoverySession.TAG, "Destroyed; ignoring"); return; } final android.print.PrinterId printerId = discoveredPrinter.getId(mPrintService); com.android.bips.LocalPrinter localPrinter = mPrinters.get(printerId); if (localPrinter == null) { localPrinter = new com.android.bips.LocalPrinter(mPrintService, this, discoveredPrinter); mPrinters.put(printerId, localPrinter); } localPrinter.found(); }

















@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter printer) { if ((mState) != (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) return; if (printer.getId(mPrintService).equals(mPrintJob.getInfo().getPrinterId())) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ((("onPrinterFound() " + (printer.name)) + " state=") + (mState))); mPath = printer.path; mPrintService.getCapabilitiesCache().request(printer, true, this::handleCapabilities); mPrintService.getDiscovery().stop(this); } }






private void applyTransportModeTransform(android.os.ParcelFileDescriptor pfd, android.net.IpSecTransform transform) { try { mService.applyTransportModeTransform(pfd, transform.getResourceId()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
private void checkIpSecConfig(android.net.IpSecConfig config) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); switch (config.getEncapType()) { case android.net.IpSecTransform.ENCAP_NONE : break; case android.net.IpSecTransform.ENCAP_ESPINUDP : case android.net.IpSecTransform.ENCAP_ESPINUDP_NON_IKE : userRecord.mEncapSocketRecords.getResourceOrThrow(config.getEncapSocketResourceId()); int port = config.getEncapRemotePort(); if ((port <= 0) || (port > 65535)) { throw new java.lang.IllegalArgumentException(("Invalid remote UDP port: " + port)); } break; default : throw new java.lang.IllegalArgumentException(("Invalid Encap Type: " + (config.getEncapType()))); } for (int direction : com.android.server.IpSecService.DIRECTIONS) { android.net.IpSecAlgorithm crypt = config.getEncryption(direction); android.net.IpSecAlgorithm auth = config.getAuthentication(direction); android.net.IpSecAlgorithm authenticatedEncryption = config.getAuthenticatedEncryption(direction); if (((authenticatedEncryption == null) && (crypt == null)) && (auth == null)) { throw new java.lang.IllegalArgumentException("No Encryption or Authentication algorithms specified"); } else if ((authenticatedEncryption != null) && ((auth != null) || (crypt != null))) { throw new java.lang.IllegalArgumentException(("Authenticated Encryption is mutually exclusive with other " + " Authentication or Encryption algorithms")); } com.android.server.IpSecService.SpiRecord s = userRecord.mSpiRecords.getResourceOrThrow(config.getSpiResourceId(direction)); if (android.text.TextUtils.isEmpty(config.getRemoteAddress())) { config.setRemoteAddress(s.getRemoteAddress()); } if (!(config.getRemoteAddress().equals(s.getRemoteAddress()))) { throw new java.lang.IllegalArgumentException("Mismatched remote addresseses."); } } java.net.InetAddress remoteAddr = android.net.NetworkUtils.numericToInetAddress(config.getRemoteAddress()); if (android.text.TextUtils.isEmpty(config.getLocalAddress())) { android.net.Network n = config.getNetwork(); if (n == null) { n = getConnectivityManager().getActiveNetwork(); } if (n == null) { throw new java.lang.IllegalArgumentException("No local address, network, or default network found."); } java.util.List<java.lang.String> addrsByFamily = new java.util.ArrayList<java.lang.String>(); try { java.util.List<java.net.InetAddress> addrs = getConnectivityManager().getLinkProperties(n).getAddresses(); for (java.net.InetAddress addr : addrs) { if (android.net.NetworkUtils.addressTypeMatches(remoteAddr, addr)) { addrsByFamily.add(addr.getHostAddress()); } } } catch (java.lang.NullPointerException e) { throw new java.lang.IllegalStateException("Failed to retrieve link properties for the active network."); } if ((addrsByFamily.size()) == 0) { throw new java.lang.IllegalArgumentException("Mismatched local and remote address families."); } config.setLocalAddresses(((java.lang.String[]) (addrsByFamily.toArray()))); } else { if (!(android.net.NetworkUtils.addressTypeMatches(remoteAddr, android.net.NetworkUtils.numericToInetAddress(config.getLocalAddress())))) { throw new java.lang.IllegalArgumentException("Mismatched local and remote address families."); } } switch (config.getMode()) { case android.net.IpSecTransform.MODE_TRANSPORT : for (java.lang.String addr : config.getLocalAddresses()) { com.android.server.IpSecService.checkInetAddress(addr); } com.android.server.IpSecService.checkInetAddress(config.getRemoteAddress()); break; case android.net.IpSecTransform.MODE_TUNNEL : break; default : throw new java.lang.IllegalArgumentException(("Invalid IpSecTransform.mode: " + (config.getMode()))); } }
private static android.net.IpSecTransform buildIpSecTransform(android.content.Context mContext, android.net.IpSecManager.SecurityParameterIndex inSpi, android.net.IpSecManager.SecurityParameterIndex outSpi, android.net.IpSecManager.UdpEncapsulationSocket encapSocket, java.net.InetAddress remoteAddr) throws java.lang.Exception { java.lang.String localAddr = (remoteAddr instanceof java.net.Inet4Address) ? android.net.cts.IpSecManagerTest.IPV4_LOOPBACK : android.net.cts.IpSecManagerTest.IPV6_LOOPBACK; return new android.net.IpSecTransform.Builder(mContext).setSpi(IpSecTransform.DIRECTION_IN, inSpi).setSpi(IpSecTransform.DIRECTION_OUT, outSpi).setEncryption(IpSecTransform.DIRECTION_IN, new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setEncryption(IpSecTransform.DIRECTION_OUT, new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setAuthentication(IpSecTransform.DIRECTION_IN, new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.cts.IpSecManagerTest.AUTH_KEY.length) * 4))).setAuthentication(IpSecTransform.DIRECTION_OUT, new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.cts.IpSecManagerTest.AUTH_KEY.length) * 4))).setIpv4Encapsulation(encapSocket, encapSocket.getPort()).buildTransportModeTransform(java.net.InetAddress.getByName(localAddr)); }
public void testCreateTransform() throws java.lang.Exception { java.net.InetAddress localAddr = java.net.InetAddress.getByName(android.net.cts.IpSecManagerTest.IPV4_LOOPBACK); android.net.IpSecManager.SecurityParameterIndex outSpi = mISM.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, localAddr); android.net.IpSecManager.SecurityParameterIndex inSpi = mISM.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_IN, localAddr, outSpi.getSpi()); android.net.IpSecTransform transform = new android.net.IpSecTransform.Builder(mContext).setSpi(IpSecTransform.DIRECTION_OUT, outSpi).setEncryption(IpSecTransform.DIRECTION_OUT, new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setAuthentication(IpSecTransform.DIRECTION_OUT, new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.cts.IpSecManagerTest.AUTH_KEY.length) * 8))).setSpi(IpSecTransform.DIRECTION_IN, inSpi).setEncryption(IpSecTransform.DIRECTION_IN, new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setAuthentication(IpSecTransform.DIRECTION_IN, new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.cts.IpSecManagerTest.CRYPT_KEY.length) * 8))).buildTransportModeTransform(localAddr); java.net.DatagramSocket localSocket = new java.net.DatagramSocket(0); int localPort = localSocket.getLocalPort(); localSocket.setSoTimeout(500); android.os.ParcelFileDescriptor pin = android.os.ParcelFileDescriptor.fromDatagramSocket(localSocket); java.io.FileDescriptor udpSocket = pin.getFileDescriptor(); mISM.applyTransportModeTransform(udpSocket, transform); byte[] data = new java.lang.String("Best test data ever!").getBytes("UTF-8"); byte[] in = new byte[data.length]; android.system.Os.sendto(udpSocket, data, 0, data.length, 0, localAddr, localPort); android.system.Os.read(udpSocket, in, 0, in.length); assertTrue("Encapsulated data did not match.", java.util.Arrays.equals(data, in)); mISM.removeTransportModeTransform(udpSocket, transform); android.system.Os.close(udpSocket); transform.close(); }
@org.junit.Test public void testCreateTransportModeTransformAead() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); ipSecConfig.setAuthenticatedEncryption(IpSecTransform.DIRECTION_OUT, com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); ipSecConfig.setAuthenticatedEncryption(IpSecTransform.DIRECTION_IN, com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), eq(""), eq(new byte[]{ }), eq(0), eq(""), eq(new byte[]{ }), eq(0), eq(IpSecAlgorithm.AUTH_CRYPT_AES_GCM), eq(com.android.server.IpSecServiceParameterizedTest.AEAD_KEY), anyInt(), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), eq(""), eq(new byte[]{ }), eq(0), eq(""), eq(new byte[]{ }), eq(0), eq(IpSecAlgorithm.AUTH_CRYPT_AES_GCM), eq(com.android.server.IpSecServiceParameterizedTest.AEAD_KEY), anyInt(), anyInt(), anyInt(), anyInt()); }
public void checkTransform(int protocol, java.lang.String localAddress, android.net.IpSecAlgorithm crypt, android.net.IpSecAlgorithm auth, boolean doUdpEncap, int sendCount, boolean useJavaSockets) throws java.lang.Exception { android.net.cts.IpSecManagerTest.StatsChecker.initStatsChecker(); java.net.InetAddress local = java.net.InetAddress.getByName(localAddress); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex outSpi = mISM.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, local);android.net.IpSecManager.SecurityParameterIndex inSpi = mISM.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_IN, local, outSpi.getSpi())) { android.net.IpSecTransform.Builder transformBuilder = new android.net.IpSecTransform.Builder(mContext).setSpi(IpSecTransform.DIRECTION_OUT, outSpi).setEncryption(IpSecTransform.DIRECTION_OUT, crypt).setAuthentication(IpSecTransform.DIRECTION_OUT, auth).setSpi(IpSecTransform.DIRECTION_IN, inSpi).setEncryption(IpSecTransform.DIRECTION_IN, crypt).setAuthentication(IpSecTransform.DIRECTION_IN, auth); if (doUdpEncap) { transformBuilder = transformBuilder.setIpv4Encapsulation(encapSocket, encapSocket.getPort()); } int ipHdrLen = (local instanceof java.net.Inet6Address) ? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int transportHdrLen = 0; int udpEncapLen = (doUdpEncap) ? android.net.cts.IpSecManagerTest.UDP_HDRLEN : 0; try (android.net.IpSecTransform transform = transformBuilder.buildTransportModeTransform(java.net.InetAddress.getByName(localAddress))) { if (protocol == (IPPROTO_TCP)) { transportHdrLen = android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS; checkTcp(transform, local, sendCount, useJavaSockets); } else if (protocol == (IPPROTO_UDP)) { transportHdrLen = android.net.cts.IpSecManagerTest.UDP_HDRLEN; checkUnconnectedUdp(transform, local, sendCount, useJavaSockets); } else { throw new java.lang.IllegalArgumentException("Invalid protocol"); } } checkStatsChecker(protocol, ipHdrLen, transportHdrLen, udpEncapLen, sendCount, auth.getTruncationLengthBits()); } }
public android.net.IpSecTransform.Builder setEncryption(@android.net.IpSecTransform.TransformDirection int direction, android.net.IpSecAlgorithm algo) { mConfig.setEncryption(direction, algo); return this; }
public android.net.IpSecTransform buildTransportModeTransform(java.net.InetAddress localAddress) throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { mConfig.setMode(android.net.IpSecTransform.MODE_TRANSPORT); mConfig.setLocalAddress(localAddress.getHostAddress()); return new android.net.IpSecTransform(mContext, mConfig).activate(); }
public android.net.IpSecTransform.Builder setAuthentication(@android.net.IpSecTransform.TransformDirection int direction, android.net.IpSecAlgorithm algo) { mConfig.setAuthentication(direction, algo); return this; }

@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentState() throws android.os.RemoteException { android.telephony.ims.internal.stub.ImsRegistrationImplBase.Callback mCallback2 = spy(new android.telephony.ims.internal.stub.ImsRegistrationImplBase.Callback()); mRegistration.onRegistered(ImsRegistrationImplBase.REGISTRATION_TECH_LTE); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback2).onRegistered(eq(ImsRegistrationImplBase.REGISTRATION_TECH_LTE)); }

@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentStateDisconnected() throws android.os.RemoteException { android.telephony.ims.internal.stub.ImsRegistrationImplBase.Callback mCallback2 = spy(new android.telephony.ims.internal.stub.ImsRegistrationImplBase.Callback()); com.android.ims.ImsReasonInfo info = new com.android.ims.ImsReasonInfo(com.android.ims.ImsReasonInfo.CODE_LOCAL_NETWORK_NO_LTE_COVERAGE, 0); mRegistration.onDeregistered(info); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback).onDeregistered(eq(info)); verify(mCallback2).onDeregistered(eq(info)); }
@android.telephony.ims.internal.stub.ImsRegistrationImplBase.ImsRegistrationTech private int getConnectionType() { synchronized(mLock) { return mConnectionType; } }
private void updateNewCallbackWithState(android.telephony.ims.internal.aidl.IImsRegistrationCallback c) throws android.os.RemoteException { int state; com.android.ims.ImsReasonInfo disconnectInfo; synchronized(mLock) { state = mRegistrationState; disconnectInfo = mLastDisconnectCause; } switch (state) { case android.telephony.ims.internal.stub.ImsRegistrationImplBase.REGISTRATION_STATE_NOT_REGISTERED : { c.onDeregistered(disconnectInfo); break; } case android.telephony.ims.internal.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERING : { c.onRegistering(getConnectionType()); break; } case android.telephony.ims.internal.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERED : { c.onRegistered(getConnectionType()); break; } } }



private void createImsService() { if (!(mConfigDynamicBind)) { android.telephony.Rlog.i(com.android.ims.ImsManager.TAG, "Creating ImsService using ServiceManager"); mImsServiceProxy = getServiceProxyCompat(); } else { android.telephony.Rlog.i(com.android.ims.ImsManager.TAG, "Creating ImsService using ImsResolver"); mImsServiceProxy = getServiceProxy(); } synchronized(mHasRegisteredLock) { mHasRegisteredForProxy = false; } }
public void removeRegistrationListener(com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { if (listener == null) { throw new java.lang.NullPointerException("listener can't be null"); } synchronized(mRegistrationListeners) { com.android.ims.ImsManager.log(("Local registration listener removed: " + listener)); mRegistrationListeners.remove(listener); } }
@java.lang.Override public void registrationProgressingWithRadioTech(int imsRadioTech) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log(("registrationProgressingWithRadioTech :: imsRadioTech=" + imsRadioTech)); } synchronized(mRegistrationListeners) { mRegistrationListeners.forEach(( l) -> l.onImsProgressing(imsRadioTech)); } }

@java.lang.Override public void imsFeatureCreated(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((!(mIsAvailable)) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(LOG_TAG, ((("Feature enabled on slotId: " + slotId) + " for feature: ") + feature)); mIsAvailable = true; } } }
@java.lang.Override public void imsStatusChanged(int slotId, int feature, int status) throws android.os.RemoteException { synchronized(mLock) { android.util.Log.i(LOG_TAG, ((((("imsStatusChanged: slot: " + slotId) + " feature: ") + feature) + " status: ") + status)); if (((mSlotId) == slotId) && (feature == (mSupportedFeature))) { mFeatureStatusCached = status; if ((mStatusCallback) != null) { mStatusCallback.notifyStatusChanged(); } } } }

@java.lang.Override public void imsFeatureRemoved(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((mIsAvailable) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(LOG_TAG, ((("Feature disabled on slotId: " + slotId) + " for feature: ") + feature)); mIsAvailable = false; } } }
public void addRegistrationListener(int serviceClass, com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { addRegistrationListener(listener); }
public int getFeatureStatus() { synchronized(mLock) { if ((isBinderAlive()) && ((mFeatureStatusCached) != null)) { android.util.Log.i(LOG_TAG, ("getFeatureStatus - returning cached: " + (mFeatureStatusCached))); return mFeatureStatusCached; } } java.lang.Integer status = retrieveFeatureStatus(); synchronized(mLock) { if (status == null) { return android.telephony.ims.feature.ImsFeature.STATE_NOT_AVAILABLE; } mFeatureStatusCached = status; } android.util.Log.i(LOG_TAG, ("getFeatureStatus - returning " + status)); return status; }
public int open(int serviceClass, android.app.PendingIntent incomingCallPendingIntent, com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable(); if (incomingCallPendingIntent == null) { throw new java.lang.NullPointerException("incomingCallPendingIntent can't be null"); } if (listener == null) { throw new java.lang.NullPointerException("listener can't be null"); } int result = 0; try { result = mImsServiceProxy.startSession(incomingCallPendingIntent, new com.android.ims.ImsManager.ImsRegistrationListenerBase()); addRegistrationListener(listener); com.android.ims.ImsManager.log("open: Session started and registration listener added."); } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException("open()", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } if (result <= 0) { throw new com.android.ims.ImsException("open()", (result * (-1))); } return result; }

@java.lang.Override public void registrationConnectedWithRadioTech(int imsRadioTech) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log(("registrationConnectedWithRadioTech :: imsRadioTech=" + imsRadioTech)); } synchronized(mRegistrationListeners) { mRegistrationListeners.forEach(( l) -> l.onImsConnected(imsRadioTech)); } }

@java.lang.Override public void registrationChangeFailed(int targetAccessTech, com.android.ims.ImsReasonInfo imsReasonInfo) { if (com.android.ims.ImsManager.DBG) com.android.ims.ImsManager.log(((("registrationChangeFailed :: targetAccessTech=" + targetAccessTech) + ", imsReasonInfo=") + imsReasonInfo)); synchronized(mRegistrationListeners) { mRegistrationListeners.forEach(( l) -> l.onRegistrationChangeFailed(targetAccessTech, imsReasonInfo)); } }
@java.lang.Override public void registrationDisconnected(com.android.ims.ImsReasonInfo imsReasonInfo) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log(("registrationDisconnected :: imsReasonInfo" + imsReasonInfo)); } addToRecentDisconnectReasons(imsReasonInfo); synchronized(mRegistrationListeners) { mRegistrationListeners.forEach(( l) -> l.onImsDisconnected(imsReasonInfo)); } }
public void addRegistrationListener(com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { if (listener == null) { throw new java.lang.NullPointerException("listener can't be null"); } synchronized(mHasRegisteredLock) { if (!(mHasRegisteredForProxy)) { try { checkAndThrowExceptionIfServiceUnavailable(); mImsServiceProxy.addRegistrationListener(mRegistrationListenerProxy); com.android.ims.ImsManager.log("RegistrationListenerProxy registered."); mHasRegisteredForProxy = true; } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException("addRegistrationListener()", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } } } synchronized(mRegistrationListeners) { com.android.ims.ImsManager.log(("Local registration listener added: " + listener)); mRegistrationListeners.add(listener); } }

private java.lang.String getIccStateIntentString(com.android.internal.telephony.IccCardConstants.State state) { switch (state) { case ABSENT : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_ABSENT; case PIN_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case PUK_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case NETWORK_LOCKED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_READY; case NOT_READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_NOT_READY; case PERM_DISABLED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED; case CARD_IO_ERROR : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR; case CARD_RESTRICTED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_CARD_RESTRICTED; default : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_UNKNOWN; } }
@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, (((" onConnect BluetoothSocket :" + socket) + " \n :device :") + device)); } com.android.bluetooth.BluetoothObexTransport transport = new com.android.bluetooth.BluetoothObexTransport(socket); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.opp.BluetoothOppService.MSG_INCOMING_BTOPP_CONNECTION); msg.obj = transport; msg.sendToTarget(); return true; }
@java.lang.Override public void onClose() { if (com.android.bluetooth.opp.BluetoothOppObexServerSession.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppObexServerSession.TAG, "onClose"); } releaseWakeLocks(); if ((mServerSocket) != null) { if (com.android.bluetooth.opp.BluetoothOppObexServerSession.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppObexServerSession.TAG, "prepareForNewConnect"); } mServerSocket.prepareForNewConnect(); } com.android.bluetooth.opp.BluetoothOppUtility.cancelNotification(mContext); if ((mCallback) != null) { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SESSION_COMPLETE; msg.obj = mInfo; msg.sendToTarget(); } }
public synchronized void startSocketListeners() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, "Map Service startSocketListeners"); } if ((mServerSession) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, "mServerSession exists - shutting it down..."); } mServerSession.close(); mServerSession = null; } if ((mObserver) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, "mObserver exists - shutting it down..."); } mObserver.deinit(); mObserver = null; } closeConnectionSocket(); if ((mServerSockets) != null) { mServerSockets.prepareForNewConnect(); } else { mServerSockets = com.android.bluetooth.ObexServerSockets.create(this); if ((mServerSockets) == null) { android.util.Log.e(mTag, "Failed to start the listeners"); return; } removeSdpRecord(); mSdpHandle = createMasSdpRecord(mServerSockets.getRfcommChannel(), mServerSockets.getL2capPsm()); if (com.android.bluetooth.map.BluetoothMapMasInstance.V) { android.util.Log.d(mTag, ((((("Creating new SDP record for MAS instance: " + (mMasInstanceId)) + " Object reference: ") + (this)) + "SDP handle: ") + (mSdpHandle))); } updateDbIdentifier(); } }
private synchronized boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket conSocket) { if (com.android.bluetooth.ObexServerSockets.D) { android.util.Log.d(mTag, ((("onConnect() socket: " + conSocket) + " mConAccepted = ") + (mConAccepted))); } if ((!(mConAccepted)) && (mConHandler.onConnect(device, conSocket))) { mConAccepted = true; return true; } return false; }
private void createServerSession(javax.obex.ObexTransport transport) { mServerSession = new com.android.bluetooth.opp.BluetoothOppObexServerSession(this, transport, mServerSocket); mServerSession.preStart(); if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ((("Get ServerSession " + (mServerSession.toString())) + " for incoming connection") + (transport.toString()))); } }
@java.lang.Override public synchronized boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { boolean isValid = mMapService.onConnect(device, this); if (isValid) { mRemoteDevice = device; mConnSocket = socket; } return isValid; }

private void onInBandRing(int inBand, byte[] address) { android.util.Log.w(com.android.bluetooth.hfpclient.NativeInterface.TAG, "onInBandRing not supported"); }
public void setDnsConfigurationForNetwork(int netId, java.util.Collection<java.net.InetAddress> servers, java.lang.String domains, boolean isDefaultNetwork) { updateParametersSettings(); updatePrivateDnsSettings(); final java.lang.String[] serverStrs = android.net.NetworkUtils.makeStrings(servers); final java.lang.String[] domainStrs = (domains == null) ? new java.lang.String[0] : domains.split(" "); final int[] params = new int[]{ mSampleValidity, mSuccessThreshold, mMinSamples, mMaxSamples }; final boolean useTls = com.android.server.connectivity.DnsManager.shouldUseTls(mPrivateDnsMode); final java.lang.String tlsHostname = ""; try { mNMS.setDnsConfigurationForNetwork(netId, serverStrs, domainStrs, params, useTls, tlsHostname); } catch (java.lang.Exception e) { android.util.Slog.e(com.android.server.connectivity.DnsManager.TAG, ("Error setting DNS configuration: " + e)); return; } if (isDefaultNetwork) setDefaultDnsSystemProperties(servers); flushVmDnsCache(); }



private java.lang.String getStringSetting(java.lang.String which) { return Settings.Global.getString(mContentResolver, which); }

@java.lang.Override public void enter() { maybeLogEvaluationResult(networkEventType(validationStage(), com.android.server.connectivity.NetworkMonitor.EvaluationResult.VALIDATED)); mConnectivityServiceHandler.sendMessage(obtainMessage(com.android.server.connectivity.NetworkMonitor.EVENT_NETWORK_TESTED, com.android.server.connectivity.NetworkMonitor.NETWORK_TEST_RESULT_VALID, mNetId, null)); (mValidations)++; }
private void updateAccessPointsDelayed() { if ((((getActivity()) != null) && (!(mIsRestricted))) && (mWifiManager.isWifiEnabled())) { setProgressBarVisible(true); getView().postDelayed(mUpdateAccessPointsRunnable, 300); } }
public java.lang.String describeFirstNonRequestableCapability() { if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED)) return "NET_CAPABILITY_VALIDATED"; if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_CAPTIVE_PORTAL)) return "NET_CAPABILITY_CAPTIVE_PORTAL"; if (hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_FOREGROUND)) return "NET_CAPABILITY_FOREGROUND"; if (((mNetworkCapabilities) & (android.net.NetworkCapabilities.NON_REQUESTABLE_CAPABILITIES)) != 0) { return "unknown non-requestable capabilities " + (java.lang.Long.toHexString(mNetworkCapabilities)); } if (((mLinkUpBandwidthKbps) != 0) || ((mLinkDownBandwidthKbps) != 0)) return "link bandwidth"; if (hasSignalStrength()) return "signalStrength"; return null; }

public static void main(java.lang.String[] args) throws java.lang.Exception { java.lang.Class<?> vm_runtime = java.lang.Class.forName("dalvik.system.VMRuntime"); java.lang.reflect.Method get_runtime = vm_runtime.getDeclaredMethod("getRuntime"); Main.runtime = get_runtime.invoke(null); Main.register_native_allocation = vm_runtime.getDeclaredMethod("registerNativeAllocation", java.lang.Integer.TYPE); Main.register_native_free = vm_runtime.getDeclaredMethod("registerNativeFree", java.lang.Integer.TYPE); Main.maxMem = java.lang.Runtime.getRuntime().maxMemory(); int count = 16; int size = ((int) (((Main.maxMem) / 2) / count)); int allocation_count = 256; Main.NativeAllocation[] allocations = new Main.NativeAllocation[count]; for (int i = 0; i < allocation_count; ++i) { allocations[(i % count)] = new Main.NativeAllocation(size, false); } Main.aboutToDeadlockLock = false; synchronized(Main.deadlockLock) { for (int i = 0; (Main.aboutToDeadlockLock) != true; ++i) { allocations[(i % count)] = new Main.NativeAllocation(size, true); } for (int i = 0; i < 10; ++i) { allocations[(i % count)] = new Main.NativeAllocation(size, true); } } java.lang.System.out.println("Test complete"); }
private static void prepareDexDir(java.io.File dexDir, final java.lang.String extractedFilePrefix) { java.io.FileFilter filter = new java.io.FileFilter() { @java.lang.Override public boolean accept(java.io.File pathname) { java.lang.String name = pathname.getName(); return !((name.startsWith(extractedFilePrefix)) || (name.equals(android.support.multidex.MultiDexExtractor.LOCK_FILENAME))); } }; java.io.File[] files = dexDir.listFiles(filter); if (files == null) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, (("Failed to list secondary dex dir content (" + (dexDir.getPath())) + ").")); return; } for (java.io.File oldFile : files) { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((("Trying to delete old file " + (oldFile.getPath())) + " of size ") + (oldFile.length()))); if (!(oldFile.delete())) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, ("Failed to delete old file " + (oldFile.getPath()))); } else { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ("Deleted old file " + (oldFile.getPath()))); } } }
static java.util.List<? extends java.io.File> load(android.content.Context context, java.io.File sourceApk, java.io.File dexDir, java.lang.String prefsKeyPrefix, boolean forceReload) throws java.io.IOException { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, (((((("MultiDexExtractor.load(" + (sourceApk.getPath())) + ", ") + forceReload) + ", ") + prefsKeyPrefix) + ")")); long currentCrc = android.support.multidex.MultiDexExtractor.getZipCrc(sourceApk); java.io.File lockFile = new java.io.File(dexDir, android.support.multidex.MultiDexExtractor.LOCK_FILENAME); java.io.RandomAccessFile lockRaf = new java.io.RandomAccessFile(lockFile, "rw"); java.nio.channels.FileChannel lockChannel = null; java.nio.channels.FileLock cacheLock = null; java.util.List<android.support.multidex.MultiDexExtractor.ExtractedDex> files; java.io.IOException releaseLockException = null; try { lockChannel = lockRaf.getChannel(); android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ("Blocking on lock " + (lockFile.getPath()))); cacheLock = lockChannel.lock(); android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((lockFile.getPath()) + " locked")); if ((!forceReload) && (!(android.support.multidex.MultiDexExtractor.isModified(context, sourceApk, currentCrc, prefsKeyPrefix)))) { try { files = android.support.multidex.MultiDexExtractor.loadExistingExtractions(context, sourceApk, dexDir, prefsKeyPrefix); } catch (java.io.IOException ioe) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, ("Failed to reload existing extracted secondary dex files," + " falling back to fresh extraction"), ioe); files = android.support.multidex.MultiDexExtractor.performExtractions(sourceApk, dexDir); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), currentCrc, files); } } else { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, "Detected that extraction must be performed."); files = android.support.multidex.MultiDexExtractor.performExtractions(sourceApk, dexDir); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), currentCrc, files); } } finally { if (cacheLock != null) { try { cacheLock.release(); } catch (java.io.IOException e) { android.util.Log.e(android.support.multidex.MultiDexExtractor.TAG, ("Failed to release lock on " + (lockFile.getPath()))); releaseLockException = e; } } if (lockChannel != null) { android.support.multidex.MultiDexExtractor.closeQuietly(lockChannel); } android.support.multidex.MultiDexExtractor.closeQuietly(lockRaf); } if (releaseLockException != null) { throw releaseLockException; } android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, (("load found " + (files.size())) + " secondary dex files")); return files; }




@com.googlecode.android_scripting.rpc.Rpc(description = "Begins a thread initiate an L2CAP CoC connection over Bluetooth. ") public void bluetoothSocketConnBeginConnectThreadPsm(@com.googlecode.android_scripting.rpc.RpcParameter(name = "address", description = "The mac address of the device to connect to.") java.lang.String address, @com.googlecode.android_scripting.rpc.RpcParameter(name = "isBle", description = "Is transport BLE?") @com.googlecode.android_scripting.rpc.RpcDefault("0") java.lang.Boolean isBle, @com.googlecode.android_scripting.rpc.RpcParameter(name = "psmValue") @com.googlecode.android_scripting.rpc.RpcDefault(com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.DEFAULT_PSM) java.lang.Integer psmValue) throws java.io.IOException { android.bluetooth.BluetoothDevice mDevice; mDevice = mBluetoothAdapter.getRemoteDevice(address); com.googlecode.android_scripting.Log.d(((((("bluetoothSocketConnBeginConnectThreadPsm: Coc connecting to " + address) + ", isBle=") + isBle) + ", psmValue=") + psmValue)); com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.ConnectThread connectThread = new com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.ConnectThread(mDevice, psmValue, isBle); connectThread.start(); mConnectThread = connectThread; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Begins a thread to accept an Coc connection over Bluetooth. ") public void bluetoothSocketConnBeginAcceptThreadPsm(@com.googlecode.android_scripting.rpc.RpcParameter(name = "psmValue") @com.googlecode.android_scripting.rpc.RpcDefault(com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.DEFAULT_PSM) java.lang.Integer psmValue, @com.googlecode.android_scripting.rpc.RpcParameter(name = "timeout", description = "How long to wait for a new connection, 0 is wait for ever") @com.googlecode.android_scripting.rpc.RpcDefault("0") java.lang.Integer timeout, @com.googlecode.android_scripting.rpc.RpcParameter(name = "isBle", description = "Is transport BLE?") @com.googlecode.android_scripting.rpc.RpcDefault("0") java.lang.Boolean isBle) throws java.io.IOException { com.googlecode.android_scripting.Log.d(("bluetoothSocketConnBeginAcceptThreadPsm: PSM value=" + psmValue)); android.bluetooth.BluetoothServerSocket mServerSocket; com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread acceptThread = new com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread(psmValue.intValue(), timeout.intValue(), isBle); acceptThread.start(); mAcceptThread = acceptThread; }
public java.lang.Runnable registerNativeAllocation(java.lang.Object referent, libcore.util.NativeAllocationRegistry.Allocator allocator) { if (referent == null) { throw new java.lang.IllegalArgumentException("referent is null"); } libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); libcore.util.NativeAllocationRegistry.CleanerThunk thunk = new libcore.util.NativeAllocationRegistry.CleanerThunk(); sun.misc.Cleaner cleaner = sun.misc.Cleaner.create(referent, thunk); long nativePtr = allocator.allocate(); if (nativePtr == 0) { cleaner.clean(); return null; } thunk.setNativePtr(nativePtr); return new libcore.util.NativeAllocationRegistry.CleanerRunner(cleaner); }
public java.lang.Runnable registerNativeAllocation(java.lang.Object referent, long nativePtr) { if (referent == null) { throw new java.lang.IllegalArgumentException("referent is null"); } if (nativePtr == 0) { throw new java.lang.IllegalArgumentException("nativePtr is null"); } try { libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); } catch (java.lang.OutOfMemoryError oome) { libcore.util.NativeAllocationRegistry.applyFreeFunction(freeFunction, nativePtr); throw oome; } sun.misc.Cleaner cleaner = sun.misc.Cleaner.create(referent, new libcore.util.NativeAllocationRegistry.CleanerThunk(nativePtr)); return new libcore.util.NativeAllocationRegistry.CleanerRunner(cleaner); }
public static void main(java.lang.String[] args) { Main.testSimpleUse(); Main.testTwoUses(); Main.testFieldStores(Main.doThrow); Main.testFieldStoreCycle(); Main.testArrayStores(); Main.testOnlyStoreUses(); Main.testNoUse(); Main.testPhiInput(); Main.testVolatileStore(); Main.doThrow = true; try { Main.testInstanceSideEffects(); } catch (java.lang.Error e) { java.lang.System.out.println(e.getMessage()); } try { Main.testStaticSideEffects(); } catch (java.lang.Error e) { java.lang.System.out.println(e.getMessage()); } try { Main.testStoreStore(Main.doThrow); } catch (java.lang.Error e) { java.lang.System.out.println(e.getMessage()); } }
public static void testStoreStore(boolean doThrow) { Main m = new Main(); m.intField = 42; m.intField = 43; if (doThrow) { throw new java.lang.Error(m.$opt$noinline$toString()); } }
void setAudioStatus(boolean mute, int volume) { if ((!(isTvDeviceEnabled())) || (!(tv().isSystemAudioActivated()))) { return; } android.media.AudioManager audioManager = getAudioManager(); boolean muted = audioManager.isStreamMute(AudioManager.STREAM_MUSIC); if (mute) { if (!muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, true); } } else { if (muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, false); } audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, volume, ((android.media.AudioManager.FLAG_SHOW_UI) | (android.media.AudioManager.FLAG_HDMI_SYSTEM_AUDIO_VOLUME))); } }
private void handleSetOsdName(com.android.server.hdmi.HdmiCecMessage cmd) { com.android.internal.util.Preconditions.checkState(((mProcessedDeviceCount) < (mDevices.size()))); com.android.server.hdmi.DeviceDiscoveryAction.DeviceInfo current = mDevices.get(mProcessedDeviceCount); if ((current.mLogicalAddress) != (cmd.getSource())) { android.util.Slog.w(com.android.server.hdmi.DeviceDiscoveryAction.TAG, ((("Unmatched address[expected:" + (current.mLogicalAddress)) + ", actual:") + (cmd.getSource()))); return; } java.lang.String displayName = null; try { displayName = new java.lang.String(cmd.getParams(), "US-ASCII"); } catch (java.io.UnsupportedEncodingException e) { android.util.Slog.w(com.android.server.hdmi.DeviceDiscoveryAction.TAG, ("Failed to decode display name: " + (cmd.toString()))); displayName = com.android.server.hdmi.HdmiUtils.getDefaultDeviceName(current.mLogicalAddress); } current.mDisplayName = displayName; increaseProcessedDeviceCount(); checkAndProceedStage(); }
@com.googlecode.android_scripting.rpc.Rpc(description = "Returns Carrier Name for currention subscription") public java.lang.String telephonyGetSubscriptionCarrierName() { return mTelephonyManager.getSubscriptionCarrierName(); }
public android.net.NetworkStats addValues(android.net.NetworkStats.Entry entry) { if ((size) >= (capacity)) { final int newLength = ((java.lang.Math.max(size, 10)) * 3) / 2; iface = java.util.Arrays.copyOf(iface, newLength); uid = java.util.Arrays.copyOf(uid, newLength); set = java.util.Arrays.copyOf(set, newLength); tag = java.util.Arrays.copyOf(tag, newLength); metered = java.util.Arrays.copyOf(metered, newLength); roaming = java.util.Arrays.copyOf(roaming, newLength); rxBytes = java.util.Arrays.copyOf(rxBytes, newLength); rxPackets = java.util.Arrays.copyOf(rxPackets, newLength); txBytes = java.util.Arrays.copyOf(txBytes, newLength); txPackets = java.util.Arrays.copyOf(txPackets, newLength); operations = java.util.Arrays.copyOf(operations, newLength); capacity = newLength; } iface[size] = entry.iface; uid[size] = entry.uid; set[size] = entry.set; tag[size] = entry.tag; metered[size] = entry.metered; roaming[size] = entry.roaming; rxBytes[size] = entry.rxBytes; rxPackets[size] = entry.rxPackets; txBytes[size] = entry.txBytes; txPackets[size] = entry.txPackets; operations[size] = entry.operations; (size)++; return this; }
@java.lang.Deprecated public android.net.NetworkStats combineValues(java.lang.String iface, int uid, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return combineValues(iface, uid, android.net.NetworkStats.SET_DEFAULT, tag, rxBytes, rxPackets, txBytes, txPackets, operations); }
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addIfaceValues(java.lang.String iface, long rxBytes, long rxPackets, long txBytes, long txPackets) { return addValues(iface, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, rxBytes, rxPackets, txBytes, txPackets, 0L); }
public android.net.NetworkStats groupedByUid() { final android.net.NetworkStats stats = new android.net.NetworkStats(elapsedRealtime, 10); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); entry.iface = android.net.NetworkStats.IFACE_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.metered = android.net.NetworkStats.METERED_ALL; entry.roaming = android.net.NetworkStats.ROAMING_ALL; for (int i = 0; i < (size); i++) { if ((tag[i]) != (android.net.NetworkStats.TAG_NONE)) continue; entry.uid = uid[i]; entry.rxBytes = rxBytes[i]; entry.rxPackets = rxPackets[i]; entry.txBytes = txBytes[i]; entry.txPackets = txPackets[i]; entry.operations = operations[i]; stats.combineValues(entry); } return stats; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(uid, set, tag, metered, roaming, iface); }
public android.net.NetworkStats combineValues(android.net.NetworkStats.Entry entry) { final int i = findIndex(entry.iface, entry.uid, entry.set, entry.tag, entry.metered, entry.roaming); if (i == (-1)) { addValues(entry); } else { rxBytes[i] += entry.rxBytes; rxPackets[i] += entry.rxPackets; txBytes[i] += entry.txBytes; txPackets[i] += entry.txPackets; operations[i] += entry.operations; } return this; }
private void deductTrafficFromVpnApp(int tunUid, java.lang.String underlyingIface, android.net.NetworkStats.Entry moved) { moved.uid = tunUid; moved.set = android.net.NetworkStats.SET_DBG_VPN_OUT; moved.tag = android.net.NetworkStats.TAG_NONE; moved.iface = underlyingIface; moved.metered = android.net.NetworkStats.METERED_ALL; moved.roaming = android.net.NetworkStats.ROAMING_ALL; combineValues(moved); int idxVpnBackground = findIndex(underlyingIface, tunUid, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO); if (idxVpnBackground != (-1)) { android.net.NetworkStats.tunSubtract(idxVpnBackground, this, moved); } int idxVpnForeground = findIndex(underlyingIface, tunUid, android.net.NetworkStats.SET_FOREGROUND, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_NO, android.net.NetworkStats.ROAMING_NO); if (idxVpnForeground != (-1)) { android.net.NetworkStats.tunSubtract(idxVpnForeground, this, moved); } }
@com.android.internal.annotations.VisibleForTesting public int findIndexHinted(java.lang.String iface, int uid, int set, int tag, int metered, int roaming, int hintIndex) { for (int offset = 0; offset < (size); offset++) { final int halfOffset = offset / 2; final int i; if ((offset % 2) == 0) { i = (hintIndex + halfOffset) % (size); } else { i = ((((size) + hintIndex) - halfOffset) - 1) % (size); } if ((((((uid == (this.uid[i])) && (set == (this.set[i]))) && (tag == (this.tag[i]))) && (metered == (this.metered[i]))) && (roaming == (this.roaming[i]))) && (java.util.Objects.equals(iface, this.iface[i]))) { return i; } } return -1; }
public void spliceOperationsFrom(android.net.NetworkStats stats) { for (int i = 0; i < (size); i++) { final int j = stats.findIndex(iface[i], uid[i], set[i], tag[i], metered[i], roaming[i]); if (j == (-1)) { operations[i] = 0; } else { operations[i] = stats.operations[j]; } } }
public android.net.NetworkStats groupedByIface() { final android.net.NetworkStats stats = new android.net.NetworkStats(elapsedRealtime, 10); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); entry.uid = android.net.NetworkStats.UID_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.metered = android.net.NetworkStats.METERED_ALL; entry.roaming = android.net.NetworkStats.ROAMING_ALL; entry.operations = 0L; for (int i = 0; i < (size); i++) { if ((tag[i]) != (android.net.NetworkStats.TAG_NONE)) continue; entry.iface = iface[i]; entry.rxBytes = rxBytes[i]; entry.rxPackets = rxPackets[i]; entry.txBytes = txBytes[i]; entry.txPackets = txPackets[i]; stats.combineValues(entry); } return stats; }
public void dump(java.lang.String prefix, java.io.PrintWriter pw) { pw.print(prefix); pw.print("NetworkStats: elapsedRealtime="); pw.println(elapsedRealtime); for (int i = 0; i < (size); i++) { pw.print(prefix); pw.print(" ["); pw.print(i); pw.print("]"); pw.print(" iface="); pw.print(iface[i]); pw.print(" uid="); pw.print(uid[i]); pw.print(" set="); pw.print(android.net.NetworkStats.setToString(set[i])); pw.print(" tag="); pw.print(android.net.NetworkStats.tagToString(tag[i])); pw.print(" metered="); pw.print(android.net.NetworkStats.meteredToString(metered[i])); pw.print(" roaming="); pw.print(android.net.NetworkStats.roamingToString(roaming[i])); pw.print(" rxBytes="); pw.print(rxBytes[i]); pw.print(" rxPackets="); pw.print(rxPackets[i]); pw.print(" txBytes="); pw.print(txBytes[i]); pw.print(" txPackets="); pw.print(txPackets[i]); pw.print(" operations="); pw.println(operations[i]); } }
private android.net.NetworkStats.Entry getTotal(android.net.NetworkStats.Entry recycle, java.util.HashSet<java.lang.String> limitIface, int limitUid, boolean includeTags) { final android.net.NetworkStats.Entry entry = (recycle != null) ? recycle : new android.net.NetworkStats.Entry(); entry.iface = android.net.NetworkStats.IFACE_ALL; entry.uid = limitUid; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; entry.metered = android.net.NetworkStats.METERED_ALL; entry.roaming = android.net.NetworkStats.ROAMING_ALL; entry.rxBytes = 0; entry.rxPackets = 0; entry.txBytes = 0; entry.txPackets = 0; entry.operations = 0; for (int i = 0; i < (size); i++) { final boolean matchesUid = (limitUid == (android.net.NetworkStats.UID_ALL)) || (limitUid == (uid[i])); final boolean matchesIface = (limitIface == null) || (limitIface.contains(iface[i])); if (matchesUid && matchesIface) { if (((tag[i]) != (android.net.NetworkStats.TAG_NONE)) && (!includeTags)) continue; entry.rxBytes += rxBytes[i]; entry.rxPackets += rxPackets[i]; entry.txBytes += txBytes[i]; entry.txPackets += txPackets[i]; entry.operations += operations[i]; } } return entry; }
@java.lang.Override public java.lang.String toString() { final java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append("iface=").append(iface); builder.append(" uid=").append(uid); builder.append(" set=").append(android.net.NetworkStats.setToString(set)); builder.append(" tag=").append(android.net.NetworkStats.tagToString(tag)); builder.append(" metered=").append(android.net.NetworkStats.meteredToString(metered)); builder.append(" roaming=").append(android.net.NetworkStats.roamingToString(roaming)); builder.append(" rxBytes=").append(rxBytes); builder.append(" rxPackets=").append(rxPackets); builder.append(" txBytes=").append(txBytes); builder.append(" txPackets=").append(txPackets); builder.append(" operations=").append(operations); return builder.toString(); }
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int set, int tag, int metered, int roaming, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, metered, roaming, rxBytes, rxPackets, txBytes, txPackets, operations)); }
public android.net.NetworkStats.Entry getValues(int i, android.net.NetworkStats.Entry recycle) { final android.net.NetworkStats.Entry entry = (recycle != null) ? recycle : new android.net.NetworkStats.Entry(); entry.iface = iface[i]; entry.uid = uid[i]; entry.set = set[i]; entry.tag = tag[i]; entry.metered = metered[i]; entry.roaming = roaming[i]; entry.rxBytes = rxBytes[i]; entry.rxPackets = rxPackets[i]; entry.txBytes = txBytes[i]; entry.txPackets = txPackets[i]; entry.operations = operations[i]; return entry; }
public android.net.NetworkStats combineValues(java.lang.String iface, int uid, int set, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return combineValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, rxBytes, rxPackets, txBytes, txPackets, operations)); }
private void makeDefault(NetworkAgentInfo newNetwork) { if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(("Switching to new default network: " + newNetwork)); setupDataActivityTracking(newNetwork); try { mNetd.setDefaultNetId(newNetwork.network.netId); } catch (java.lang.Exception e) { com.android.server.ConnectivityService.loge(("Exception setting default network :" + e)); } notifyLockdownVpn(newNetwork); handleApplyDefaultProxy(newNetwork.linkProperties.getHttpProxy()); updateTcpBufferSizes(newNetwork); mDnsManager.setDefaultDnsSystemProperties(newNetwork.linkProperties.getDnsServers()); }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof android.net.NetworkStats.Entry) { final android.net.NetworkStats.Entry e = ((android.net.NetworkStats.Entry) (o)); return (((((((((((uid) == (e.uid)) && ((set) == (e.set))) && ((tag) == (e.tag))) && ((metered) == (e.metered))) && ((roaming) == (e.roaming))) && ((rxBytes) == (e.rxBytes))) && ((rxPackets) == (e.rxPackets))) && ((txBytes) == (e.txBytes))) && ((txPackets) == (e.txPackets))) && ((operations) == (e.operations))) && (iface.equals(e.iface)); } return false; }
public int findIndex(java.lang.String iface, int uid, int set, int tag, int metered, int roaming) { for (int i = 0; i < (size); i++) { if ((((((uid == (this.uid[i])) && (set == (this.set[i]))) && (tag == (this.tag[i]))) && (metered == (this.metered[i]))) && (roaming == (this.roaming[i]))) && (java.util.Objects.equals(iface, this.iface[i]))) { return i; } } return -1; }
public static void noteStackedIface(java.lang.String stackedIface, java.lang.String baseIface) { synchronized(com.android.internal.net.NetworkStatsFactory.sStackedIfaces) { if (baseIface != null) { com.android.internal.net.NetworkStatsFactory.sStackedIfaces.put(stackedIface, baseIface); } else { com.android.internal.net.NetworkStatsFactory.sStackedIfaces.remove(stackedIface); } } }
@java.lang.Override public int compareTo(com.android.server.net.NetworkStatsCollection.Key another) { int res = 0; if (((ident) != null) && ((another.ident) != null)) { res = ident.compareTo(another.ident); } if (res == 0) { res = java.lang.Integer.compare(uid, another.uid); } if (res == 0) { res = java.lang.Integer.compare(set, another.set); } if (res == 0) { res = java.lang.Integer.compare(tag, another.tag); } return res; }
private long getTotalBytesForNetworkUid(android.net.NetworkTemplate template, int uid) { try { android.net.NetworkStatsHistory history = mCollection.getHistory(template, null, uid, NetworkStats.SET_ALL, NetworkStats.TAG_NONE, NetworkStatsHistory.FIELD_ALL, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, mAccessLevel, mCallingUid); return history.getTotalBytes(); } catch (java.lang.SecurityException e) { if (com.android.server.net.NetworkStatsObservers.LOGV) { android.util.Slog.w(com.android.server.net.NetworkStatsObservers.TAG, ((("CallerUid " + (mCallingUid)) + " may have lost access to uid ") + uid)); } return 0; } }
@java.lang.Deprecated public void recordData(long start, long end, long rxBytes, long txBytes) { recordData(start, end, new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, rxBytes, 0L, txBytes, 0L, 0L)); }
@java.lang.Deprecated public void generateRandom(long start, long end, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations, java.util.Random r) { ensureBuckets(start, end); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, 0L, 0L, 0L, 0L, 0L); while (((((rxBytes > 1024) || (rxPackets > 128)) || (txBytes > 1024)) || (txPackets > 128)) || (operations > 32)) { final long curStart = android.net.NetworkStatsHistory.randomLong(r, start, end); final long curEnd = curStart + (android.net.NetworkStatsHistory.randomLong(r, 0, ((end - curStart) / 2))); entry.rxBytes = android.net.NetworkStatsHistory.randomLong(r, 0, rxBytes); entry.rxPackets = android.net.NetworkStatsHistory.randomLong(r, 0, rxPackets); entry.txBytes = android.net.NetworkStatsHistory.randomLong(r, 0, txBytes); entry.txPackets = android.net.NetworkStatsHistory.randomLong(r, 0, txPackets); entry.operations = android.net.NetworkStatsHistory.randomLong(r, 0, operations); rxBytes -= entry.rxBytes; rxPackets -= entry.rxPackets; txBytes -= entry.txBytes; txPackets -= entry.txPackets; operations -= entry.operations; recordData(curStart, curEnd, entry); } }
public void recordHistory(android.net.NetworkStatsHistory input, long start, long end) { final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, 0L, 0L, 0L, 0L, 0L); for (int i = 0; i < (input.bucketCount); i++) { final long bucketStart = input.bucketStart[i]; final long bucketEnd = bucketStart + (input.bucketDuration); if ((bucketStart < start) || (bucketEnd > end)) continue; entry.rxBytes = android.net.NetworkStatsHistory.getLong(input.rxBytes, i, 0L); entry.rxPackets = android.net.NetworkStatsHistory.getLong(input.rxPackets, i, 0L); entry.txBytes = android.net.NetworkStatsHistory.getLong(input.txBytes, i, 0L); entry.txPackets = android.net.NetworkStatsHistory.getLong(input.txPackets, i, 0L); entry.operations = android.net.NetworkStatsHistory.getLong(input.operations, i, 0L); recordData(bucketStart, bucketEnd, entry); } }
private android.net.NetworkStats internalGetSummaryForNetwork(android.net.NetworkTemplate template, int flags, long start, long end, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callingUid) { final android.net.NetworkStatsHistory history = internalGetHistoryForNetwork(template, flags, android.net.NetworkStatsHistory.FIELD_ALL, accessLevel, callingUid); final long now = java.lang.System.currentTimeMillis(); final android.net.NetworkStatsHistory.Entry entry = history.getValues(start, end, now, null); final android.net.NetworkStats stats = new android.net.NetworkStats((end - start), 1); stats.addValues(new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_ALL, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.METERED_ALL, android.net.NetworkStats.ROAMING_ALL, entry.rxBytes, entry.rxPackets, entry.txBytes, entry.txPackets, entry.operations)); return stats; }
@java.lang.Override public android.net.NetworkStatsHistory getHistoryForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidComplete().getHistory(template, null, uid, set, tag, fields, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, mAccessLevel, mCallingUid); } else { return getUidTagComplete().getHistory(template, null, uid, set, tag, fields, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, mAccessLevel, mCallingUid); } }
@java.lang.Override public android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields, long start, long end) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidComplete().getHistory(template, null, uid, set, tag, fields, start, end, mAccessLevel, mCallingUid); } else if (uid == (android.os.Binder.getCallingUid())) { return getUidTagComplete().getHistory(template, null, uid, set, tag, fields, start, end, mAccessLevel, mCallingUid); } else { throw new java.lang.SecurityException((("Calling package " + (mCallingPackage)) + " cannot access tag information from a different uid")); } }
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int set, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, rxBytes, rxPackets, txBytes, txPackets, operations)); }
private android.net.NetworkStatsHistory internalGetHistoryForNetwork(android.net.NetworkTemplate template, int flags, int fields, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callingUid) { final android.telephony.SubscriptionPlan augmentPlan = resolveSubscriptionPlan(template, flags); synchronized(mStatsLock) { return mXtStatsCached.getHistory(template, augmentPlan, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_ALL, android.net.NetworkStats.TAG_NONE, fields, java.lang.Long.MIN_VALUE, java.lang.Long.MAX_VALUE, accessLevel, callingUid); } }
public void writeToProto(android.util.proto.ProtoOutputStream proto, long tag) { final long start = proto.start(tag); proto.write(NetworkIdentityProto.TYPE, mType); if ((mSubscriberId) != null) { proto.write(NetworkIdentityProto.SUBSCRIBER_ID, android.net.NetworkIdentity.scrubSubscriberId(mSubscriberId)); } proto.write(NetworkIdentityProto.NETWORK_ID, mNetworkId); proto.write(NetworkIdentityProto.ROAMING, mRoaming); proto.write(NetworkIdentityProto.METERED, mMetered); proto.end(start); }
@java.lang.Override public void incrementOperationCount(int uid, int tag, int operationCount) { if ((android.os.Binder.getCallingUid()) != uid) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.UPDATE_DEVICE_STATS, com.android.server.net.NetworkStatsService.TAG); } if (operationCount < 0) { throw new java.lang.IllegalArgumentException("operation count can only be incremented"); } if (tag == (android.net.NetworkStats.TAG_NONE)) { throw new java.lang.IllegalArgumentException("operation count must have specific tag"); } synchronized(mStatsLock) { final int set = mActiveUidCounterSet.get(uid, android.net.NetworkStats.SET_DEFAULT); mUidOperations.combineValues(mActiveIface, uid, set, tag, 0L, 0L, 0L, 0L, operationCount); mUidOperations.combineValues(mActiveIface, uid, set, android.net.NetworkStats.TAG_NONE, 0L, 0L, 0L, 0L, operationCount); } }
@java.lang.Override public boolean equals(java.lang.Object obj) { if (obj instanceof com.android.server.net.NetworkStatsCollection.Key) { final com.android.server.net.NetworkStatsCollection.Key key = ((com.android.server.net.NetworkStatsCollection.Key) (obj)); return ((((uid) == (key.uid)) && ((set) == (key.set))) && ((tag) == (key.tag))) && (java.util.Objects.equals(ident, key.ident)); } return false; }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(elapsedRealtime); dest.writeInt(size); dest.writeInt(capacity); dest.writeStringArray(iface); dest.writeIntArray(uid); dest.writeIntArray(set); dest.writeIntArray(tag); dest.writeIntArray(metered); dest.writeIntArray(roaming); dest.writeLongArray(rxBytes); dest.writeLongArray(rxPackets); dest.writeLongArray(txBytes); dest.writeLongArray(txPackets); dest.writeLongArray(operations); }
public void dump(com.android.internal.util.IndentingPrintWriter pw) { for (com.android.server.net.NetworkStatsCollection.Key key : getSortedKeys()) { pw.print("ident="); pw.print(key.ident.toString()); pw.print(" uid="); pw.print(key.uid); pw.print(" set="); pw.print(android.net.NetworkStats.setToString(key.set)); pw.print(" tag="); pw.println(android.net.NetworkStats.tagToString(key.tag)); final android.net.NetworkStatsHistory history = mStats.get(key); pw.increaseIndent(); history.dump(pw, true); pw.decreaseIndent(); } }
public void recordData(com.android.server.net.NetworkIdentitySet ident, int uid, int set, int tag, long start, long end, android.net.NetworkStats.Entry entry) { final android.net.NetworkStatsHistory history = findOrCreateHistory(ident, uid, set, tag); history.recordData(start, end, entry); noteRecordedHistory(history.getStart(), history.getEnd(), ((entry.rxBytes) + (entry.txBytes))); }
@java.lang.Deprecated public void readLegacyNetwork(java.io.File file) throws java.io.IOException { final android.util.AtomicFile inputFile = new android.util.AtomicFile(file); java.io.DataInputStream in = null; try { in = new java.io.DataInputStream(new java.io.BufferedInputStream(inputFile.openRead())); final int magic = in.readInt(); if (magic != (com.android.server.net.NetworkStatsCollection.FILE_MAGIC)) { throw new java.net.ProtocolException(("unexpected magic: " + magic)); } final int version = in.readInt(); switch (version) { case com.android.server.net.NetworkStatsCollection.VERSION_NETWORK_INIT : { final int size = in.readInt(); for (int i = 0; i < size; i++) { final com.android.server.net.NetworkIdentitySet ident = new com.android.server.net.NetworkIdentitySet(in); final android.net.NetworkStatsHistory history = new android.net.NetworkStatsHistory(in); final com.android.server.net.NetworkStatsCollection.Key key = new com.android.server.net.NetworkStatsCollection.Key(ident, UID_ALL, SET_ALL, TAG_NONE); recordHistory(key, history); } break; } default : { throw new java.net.ProtocolException(("unexpected version: " + version)); } } } catch (java.io.FileNotFoundException e) { } finally { libcore.io.IoUtils.closeQuietly(in); } }
private android.net.NetworkStatsHistory findOrCreateHistory(com.android.server.net.NetworkIdentitySet ident, int uid, int set, int tag) { final com.android.server.net.NetworkStatsCollection.Key key = new com.android.server.net.NetworkStatsCollection.Key(ident, uid, set, tag); final android.net.NetworkStatsHistory existing = mStats.get(key); android.net.NetworkStatsHistory updated = null; if (existing == null) { updated = new android.net.NetworkStatsHistory(mBucketDuration, 10); } else if ((existing.getBucketDuration()) != (mBucketDuration)) { updated = new android.net.NetworkStatsHistory(existing, mBucketDuration); } if (updated != null) { mStats.put(key, updated); return updated; } else { return existing; } }
private void dumpCheckin(java.io.PrintWriter pw, long start, long end, android.net.NetworkTemplate groupTemplate, java.lang.String groupPrefix) { final android.util.ArrayMap<com.android.server.net.NetworkStatsCollection.Key, android.net.NetworkStatsHistory> grouped = new android.util.ArrayMap(); for (int i = 0; i < (mStats.size()); i++) { final com.android.server.net.NetworkStatsCollection.Key key = mStats.keyAt(i); final android.net.NetworkStatsHistory value = mStats.valueAt(i); if (!(com.android.server.net.NetworkStatsCollection.templateMatches(groupTemplate, key.ident))) continue; if ((key.set) >= (android.net.NetworkStats.SET_DEBUG_START)) continue; final com.android.server.net.NetworkStatsCollection.Key groupKey = new com.android.server.net.NetworkStatsCollection.Key(null, key.uid, key.set, key.tag); android.net.NetworkStatsHistory groupHistory = grouped.get(groupKey); if (groupHistory == null) { groupHistory = new android.net.NetworkStatsHistory(value.getBucketDuration()); grouped.put(groupKey, groupHistory); } groupHistory.recordHistory(value, start, end); } for (int i = 0; i < (grouped.size()); i++) { final com.android.server.net.NetworkStatsCollection.Key key = grouped.keyAt(i); final android.net.NetworkStatsHistory value = grouped.valueAt(i); if ((value.size()) == 0) continue; pw.print("c,"); pw.print(groupPrefix); pw.print(','); pw.print(key.uid); pw.print(','); pw.print(android.net.NetworkStats.setToCheckinString(key.set)); pw.print(','); pw.print(key.tag); pw.println(); value.dumpCheckin(pw); } }
public void write(java.io.DataOutputStream out) throws java.io.IOException { final java.util.HashMap<com.android.server.net.NetworkIdentitySet, java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key>> keysByIdent = com.google.android.collect.Maps.newHashMap(); for (com.android.server.net.NetworkStatsCollection.Key key : mStats.keySet()) { java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(key.ident); if (keys == null) { keys = com.google.android.collect.Lists.newArrayList(); keysByIdent.put(key.ident, keys); } keys.add(key); } out.writeInt(com.android.server.net.NetworkStatsCollection.FILE_MAGIC); out.writeInt(com.android.server.net.NetworkStatsCollection.VERSION_UNIFIED_INIT); out.writeInt(keysByIdent.size()); for (com.android.server.net.NetworkIdentitySet ident : keysByIdent.keySet()) { final java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(ident); ident.writeToStream(out); out.writeInt(keys.size()); for (com.android.server.net.NetworkStatsCollection.Key key : keys) { final android.net.NetworkStatsHistory history = mStats.get(key); out.writeInt(key.uid); out.writeInt(key.set); out.writeInt(key.tag); history.writeToStream(out); } } out.flush(); }
public void removeUids(int[] uids) { final java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> knownKeys = com.google.android.collect.Lists.newArrayList(); knownKeys.addAll(mStats.keySet()); for (com.android.server.net.NetworkStatsCollection.Key key : knownKeys) { if (com.android.internal.util.ArrayUtils.contains(uids, key.uid)) { if ((key.tag) == (TAG_NONE)) { final android.net.NetworkStatsHistory uidHistory = mStats.get(key); final android.net.NetworkStatsHistory removedHistory = findOrCreateHistory(key.ident, com.android.server.net.UID_REMOVED, com.android.server.net.SET_DEFAULT, com.android.server.net.TAG_NONE); removedHistory.recordEntireHistory(uidHistory); } mStats.remove(key); mDirty = true; } } }
public android.net.NetworkStats getSummary(android.net.NetworkTemplate template, long start, long end, @com.android.server.net.NetworkStatsAccess.Level int accessLevel, int callerUid) { final long now = java.lang.System.currentTimeMillis(); final android.net.NetworkStats stats = new android.net.NetworkStats((end - start), 24); if (start == end) return stats; final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); android.net.NetworkStatsHistory.Entry historyEntry = null; for (int i = 0; i < (mStats.size()); i++) { final com.android.server.net.NetworkStatsCollection.Key key = mStats.keyAt(i); if (((com.android.server.net.NetworkStatsCollection.templateMatches(template, key.ident)) && (com.android.server.net.NetworkStatsAccess.isAccessibleToUser(key.uid, callerUid, accessLevel))) && ((key.set) < (android.net.NetworkStats.SET_DEBUG_START))) { final android.net.NetworkStatsHistory value = mStats.valueAt(i); historyEntry = value.getValues(start, end, now, historyEntry); entry.iface = IFACE_ALL; entry.uid = key.uid; entry.set = key.set; entry.tag = key.tag; entry.metered = (key.ident.isAnyMemberMetered()) ? METERED_YES : METERED_NO; entry.roaming = (key.ident.isAnyMemberRoaming()) ? ROAMING_YES : ROAMING_NO; entry.rxBytes = historyEntry.rxBytes; entry.rxPackets = historyEntry.rxPackets; entry.txBytes = historyEntry.txBytes; entry.txPackets = historyEntry.txPackets; entry.operations = historyEntry.operations; if (!(entry.isEmpty())) { stats.combineValues(entry); } } } return stats; }
public void read(java.io.DataInputStream in) throws java.io.IOException { final int magic = in.readInt(); if (magic != (com.android.server.net.NetworkStatsCollection.FILE_MAGIC)) { throw new java.net.ProtocolException(("unexpected magic: " + magic)); } final int version = in.readInt(); switch (version) { case com.android.server.net.NetworkStatsCollection.VERSION_UNIFIED_INIT : { final int identSize = in.readInt(); for (int i = 0; i < identSize; i++) { final com.android.server.net.NetworkIdentitySet ident = new com.android.server.net.NetworkIdentitySet(in); final int size = in.readInt(); for (int j = 0; j < size; j++) { final int uid = in.readInt(); final int set = in.readInt(); final int tag = in.readInt(); final com.android.server.net.NetworkStatsCollection.Key key = new com.android.server.net.NetworkStatsCollection.Key(ident, uid, set, tag); final android.net.NetworkStatsHistory history = new android.net.NetworkStatsHistory(in); recordHistory(key, history); } } break; } default : { throw new java.net.ProtocolException(("unexpected version: " + version)); } } }

public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoSnr, boolean gsm) { initialize(gsmSignalStrength, gsmBitErrorRate, cdmaDbm, cdmaEcio, evdoDbm, evdoEcio, evdoSnr, 99, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, 0, gsm, false); }
public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoSnr, int lteSignalStrength, int lteRsrp, int lteRsrq, int lteRssnr, int lteCqi, int lteRsrpBoost, boolean gsm, boolean useOnlyRsrpForLteLevel) { mGsmSignalStrength = gsmSignalStrength; mGsmBitErrorRate = gsmBitErrorRate; mCdmaDbm = cdmaDbm; mCdmaEcio = cdmaEcio; mEvdoDbm = evdoDbm; mEvdoEcio = evdoEcio; mEvdoSnr = evdoSnr; mLteSignalStrength = lteSignalStrength; mLteRsrp = lteRsrp; mLteRsrq = lteRsrq; mLteRssnr = lteRssnr; mLteCqi = lteCqi; mLteRsrpBoost = lteRsrpBoost; mTdScdmaRscp = android.telephony.SignalStrength.INVALID; isGsm = gsm; mUseOnlyRsrpForLteLevel = useOnlyRsrpForLteLevel; if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log(("initialize: " + (toString()))); }
@org.junit.Test public void testEnableDisableInterleaved() throws java.util.concurrent.TimeoutException { for (java.lang.Class profile : mProfiles) { setProfileState(profile, BluetoothAdapter.STATE_ON); setProfileState(profile, BluetoothAdapter.STATE_OFF); } for (java.lang.Class profile : mProfiles) { verify(mMockAdapterService, timeout(com.android.bluetooth.btservice.ProfileServiceTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(eq(profile.getName()), eq(BluetoothAdapter.STATE_ON)); verify(mMockAdapterService, timeout(com.android.bluetooth.btservice.ProfileServiceTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(eq(profile.getName()), eq(BluetoothAdapter.STATE_OFF)); } }
private void updateButtonState() { java.lang.String hostname = mHostnameView.getText().toString(); java.util.regex.Matcher hostMatch = com.android.bips.ui.AddManualPrinterDialog.HOSTNAME_PATTERN.matcher(hostname); mAddButton.setEnabled(hostMatch.matches()); }
public void addManualPrinter(java.lang.String hostname, com.android.bips.discovery.ManualDiscovery.PrinterAddCallback callback) { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, ("addManualPrinter " + hostname)); new com.android.bips.discovery.ManualDiscovery.CapabilitiesFinder(hostname, callback); }
@java.lang.Override public java.lang.String toString() { java.lang.String iccIdToPrint = android.telephony.SubscriptionInfo.givePrintableIccid(mIccId); return ((((((((((((((((((((((((("{id=" + (mId)) + ", iccId=") + iccIdToPrint) + " simSlotIndex=") + (mSimSlotIndex)) + " displayName=") + (mDisplayName)) + " carrierName=") + (mCarrierName)) + " nameSource=") + (mNameSource)) + " iconTint=") + (mIconTint)) + " dataRoaming=") + (mDataRoaming)) + " iconBitmap=") + (mIconBitmap)) + " mcc ") + (mMcc)) + " mnc ") + (mMnc)) + " isEmbedded ") + (mIsEmbedded)) + " accessRules ") + (java.util.Arrays.toString(mAccessRules))) + "}"; }

public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { com.android.internal.telephony.uicc.IccCardStatus.CardState oldState = mCardState; mCardState = ics.mCardState; mContext = c; mCi = ci; mIccid = ics.iccid; if ((mCardState) != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = new com.android.internal.telephony.uicc.UiccProfile(mContext, mCi, ics, mPhoneId, this); } else { mUiccProfile.update(mContext, mCi, ics); } } else { throw new java.lang.RuntimeException("Card state is absent when updating!"); } } }
@com.android.internal.annotations.VisibleForTesting(visibility = VisibleForTesting.Visibility.PACKAGE) public android.net.Uri insertEmptySubInfoRecord(java.lang.String iccId, int slotIndex) { android.content.ContentResolver resolver = mContext.getContentResolver(); android.content.ContentValues value = new android.content.ContentValues(); value.put(SubscriptionManager.ICC_ID, iccId); int color = getUnusedColor(mContext.getOpPackageName()); value.put(SubscriptionManager.COLOR, color); value.put(SubscriptionManager.SIM_SLOT_INDEX, slotIndex); value.put(SubscriptionManager.CARRIER_NAME, ""); android.net.Uri uri = resolver.insert(SubscriptionManager.CONTENT_URI, value); refreshCachedActiveSubscriptionInfoList(); return uri; }
private void handleSimLocked(int slotId, java.lang.String reason) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM))) { logd((("SIM" + (slotId + 1)) + " hot plug in")); com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = null; } java.lang.String iccId = com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]; if (iccId == null) { com.android.internal.telephony.uicc.IccRecords records = com.android.internal.telephony.SubscriptionInfoUpdater.mPhone[slotId].getIccCard().getIccRecords(); if ((stripIccIdSuffix(records.getFullIccId())) == null) { logd("handleSimLocked: IccID null"); return; } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = stripIccIdSuffix(records.getFullIccId()); } else { logd(((("NOT Querying IccId its already set sIccid[" + slotId) + "]=") + iccId)); } if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED, reason); }
private void handleSimAbsent(int slotId) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (!(com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM)))) { logd((("SIM" + (slotId + 1)) + " hot plug out")); } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM; if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT, null); }


private void handleSimError(int slotId) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (!(com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM)))) { logd((("SIM" + (slotId + 1)) + " Error ")); } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM; if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR); }




@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); initTestFiles(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(TestNotificationService.ACTION_OPERATION_RESULT); context.registerReceiver(mReceiver, filter); context.sendBroadcast(new android.content.Intent(com.android.documentsui.services.TestNotificationService.ACTION_CHANGE_CANCEL_MODE)); mOperationExecuted = false; mErrorReason = "No response from Notification"; mCountDownLatch = new java.util.concurrent.CountDownLatch(1); }

@org.junit.After public void tearDown() throws java.lang.Exception { if ((mListener) != null) { mTelephonyManager.listen(mListener, PhoneStateListener.LISTEN_NONE); } }
@org.junit.Before public void setUp() throws java.lang.Exception { mTelephonyManager = ((android.telephony.TelephonyManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.TELEPHONY_SERVICE))); android.telephony.cts.TelephonyManagerTest.mCm = ((android.net.ConnectivityManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); mPackageManager = android.telephony.cts.TelephonyManagerTest.getContext().getPackageManager(); }

@org.junit.Test public void testDeleteTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); mIpSecService.deleteTransportModeTransform(createTransformResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI)); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }




@org.junit.Before public void setUp() { org.mockito.MockitoAnnotations.initMocks(this); doReturn(mHeadsetService).when(mServiceFactory).getHeadsetService(); doReturn(mA2dpService).when(mServiceFactory).getA2dpService(); mHandlerThread = new android.os.HandlerThread("PhonePolicyTestHandlerThread"); mHandlerThread.start(); mTestLooperManager = android.support.test.InstrumentationRegistry.getInstrumentation().acquireLooperManager(mHandlerThread.getLooper()); doReturn(mHandlerThread.getLooper()).when(mAdapterService).getMainLooper(); doReturn(true).when(mAdapterService).isMock(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("00:01:02:03:04:05"); }
@java.lang.Override public void onDestroy() { debugLog("onDestroy()"); mProfileObserver.stop(); if (!(isMock())) { android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, "Force exit to cleanup internal state in Bluetooth stack"); java.lang.System.exit(0); } }
public void deactivateDataCall(int cid, boolean reasonRadioShutDown, boolean isHandover, android.telephony.data.DataServiceCallback callback) { callback.onDeactivateDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED); }
public void setupDataCall(int accessNetworkType, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, boolean isHandover, android.net.LinkProperties linkProperties, android.telephony.data.DataServiceCallback callback) { callback.onSetupDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED, null); }
@java.lang.Override public int hashCode() { int primeNum = 31; return ((((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaEcio) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrp) * primeNum)) + ((mLteRsrq) * primeNum)) + ((mLteRssnr) * primeNum)) + ((mLteCqi) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mTdScdmaRscp) * primeNum)) + (isGsm ? 1 : 0)) + (mUseOnlyRsrpForLteLevel ? 1 : 0); }
public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mLteRsrpBoost); out.writeInt(mTdScdmaRscp); out.writeInt((isGsm ? 1 : 0)); out.writeInt((mUseOnlyRsrpForLteLevel ? 1 : 0)); }


private void setFromNotifierBundle(android.os.Bundle m) { mGsmSignalStrength = m.getInt("GsmSignalStrength"); mGsmBitErrorRate = m.getInt("GsmBitErrorRate"); mCdmaDbm = m.getInt("CdmaDbm"); mCdmaEcio = m.getInt("CdmaEcio"); mEvdoDbm = m.getInt("EvdoDbm"); mEvdoEcio = m.getInt("EvdoEcio"); mEvdoSnr = m.getInt("EvdoSnr"); mLteSignalStrength = m.getInt("LteSignalStrength"); mLteRsrp = m.getInt("LteRsrp"); mLteRsrq = m.getInt("LteRsrq"); mLteRssnr = m.getInt("LteRssnr"); mLteCqi = m.getInt("LteCqi"); mLteRsrpBoost = m.getInt("lteRsrpBoost"); mTdScdmaRscp = m.getInt("TdScdma"); isGsm = m.getBoolean("isGsm"); mUseOnlyRsrpForLteLevel = m.getBoolean("useOnlyRsrpForLteLevel"); }
public void fillInNotifierBundle(android.os.Bundle m) { m.putInt("GsmSignalStrength", mGsmSignalStrength); m.putInt("GsmBitErrorRate", mGsmBitErrorRate); m.putInt("CdmaDbm", mCdmaDbm); m.putInt("CdmaEcio", mCdmaEcio); m.putInt("EvdoDbm", mEvdoDbm); m.putInt("EvdoEcio", mEvdoEcio); m.putInt("EvdoSnr", mEvdoSnr); m.putInt("LteSignalStrength", mLteSignalStrength); m.putInt("LteRsrp", mLteRsrp); m.putInt("LteRsrq", mLteRsrq); m.putInt("LteRssnr", mLteRssnr); m.putInt("LteCqi", mLteCqi); m.putInt("lteRsrpBoost", mLteRsrpBoost); m.putInt("TdScdma", mTdScdmaRscp); m.putBoolean("isGsm", isGsm); m.putBoolean("useOnlyRsrpForLteLevel", mUseOnlyRsrpForLteLevel); }
protected void copyFrom(android.telephony.SignalStrength s) { mGsmSignalStrength = s.mGsmSignalStrength; mGsmBitErrorRate = s.mGsmBitErrorRate; mCdmaDbm = s.mCdmaDbm; mCdmaEcio = s.mCdmaEcio; mEvdoDbm = s.mEvdoDbm; mEvdoEcio = s.mEvdoEcio; mEvdoSnr = s.mEvdoSnr; mLteSignalStrength = s.mLteSignalStrength; mLteRsrp = s.mLteRsrp; mLteRsrq = s.mLteRsrq; mLteRssnr = s.mLteRssnr; mLteCqi = s.mLteCqi; mLteRsrpBoost = s.mLteRsrpBoost; mTdScdmaRscp = s.mTdScdmaRscp; isGsm = s.isGsm; mUseOnlyRsrpForLteLevel = s.mUseOnlyRsrpForLteLevel; }
@java.lang.Override public boolean equals(java.lang.Object o) { android.telephony.SignalStrength s; try { s = ((android.telephony.SignalStrength) (o)); } catch (java.lang.ClassCastException ex) { return false; } if (o == null) { return false; } return ((((((((((((((((mGsmSignalStrength) == (s.mGsmSignalStrength)) && ((mGsmBitErrorRate) == (s.mGsmBitErrorRate))) && ((mCdmaDbm) == (s.mCdmaDbm))) && ((mCdmaEcio) == (s.mCdmaEcio))) && ((mEvdoDbm) == (s.mEvdoDbm))) && ((mEvdoEcio) == (s.mEvdoEcio))) && ((mEvdoSnr) == (s.mEvdoSnr))) && ((mLteSignalStrength) == (s.mLteSignalStrength))) && ((mLteRsrp) == (s.mLteRsrp))) && ((mLteRsrq) == (s.mLteRsrq))) && ((mLteRssnr) == (s.mLteRssnr))) && ((mLteCqi) == (s.mLteCqi))) && ((mLteRsrpBoost) == (s.mLteRsrpBoost))) && ((mTdScdmaRscp) == (s.mTdScdmaRscp))) && ((isGsm) == (s.isGsm))) && ((mUseOnlyRsrpForLteLevel) == (s.mUseOnlyRsrpForLteLevel)); }

@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((((((((((((("SignalStrength:" + " ") + (mGsmSignalStrength)) + " ") + (mGsmBitErrorRate)) + " ") + (mCdmaDbm)) + " ") + (mCdmaEcio)) + " ") + (mEvdoDbm)) + " ") + (mEvdoEcio)) + " ") + (mEvdoSnr)) + " ") + (mLteSignalStrength)) + " ") + (mLteRsrp)) + " ") + (mLteRsrq)) + " ") + (mLteRssnr)) + " ") + (mLteCqi)) + " ") + (mLteRsrpBoost)) + " ") + (mTdScdmaRscp)) + " ") + (isGsm ? "gsm|lte" : "cdma")) + " ") + (mUseOnlyRsrpForLteLevel ? "use_only_rsrp_for_lte_level" : "use_rsrp_and_rssnr_for_lte_level"); }
public int getAsuLevel() { int asuLevel = 0; if (isGsm) { if ((getLteLevel()) == (android.telephony.SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN)) { if ((getTdScdmaLevel()) == (android.telephony.SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN)) { asuLevel = getGsmAsuLevel(); } else { asuLevel = getTdScdmaAsuLevel(); } } else { asuLevel = getLteAsuLevel(); } } else { int cdmaAsuLevel = getCdmaAsuLevel(); int evdoAsuLevel = getEvdoAsuLevel(); if (evdoAsuLevel == 0) { asuLevel = cdmaAsuLevel; } else if (cdmaAsuLevel == 0) { asuLevel = evdoAsuLevel; } else { asuLevel = (cdmaAsuLevel < evdoAsuLevel) ? cdmaAsuLevel : evdoAsuLevel; } } if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log(("getAsuLevel=" + asuLevel)); return asuLevel; }
public void updateSubscriptionNickname(int subscriptionId, java.lang.String nickname, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().updateSubscriptionNickname(subscriptionId, nickname, callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void switchToSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().switchToSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void deleteSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().deleteSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void continueOperation(android.content.Intent resolutionIntent, android.os.Bundle resolutionExtras) { if (!(isEnabled())) { android.app.PendingIntent callbackIntent = resolutionIntent.getParcelableExtra(android.telephony.euicc.EuiccManager.EXTRA_EMBEDDED_SUBSCRIPTION_RESOLUTION_CALLBACK_INTENT); if (callbackIntent != null) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); } return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().continueOperation(resolutionIntent, resolutionExtras); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void eraseSubscriptions(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().eraseSubscriptions(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void downloadSubscription(android.telephony.euicc.DownloadableSubscription subscription, boolean switchAfterDownload, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().downloadSubscription(subscription, switchAfterDownload, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void getDownloadableSubscriptionMetadata(android.telephony.euicc.DownloadableSubscription subscription, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().getDownloadableSubscriptionMetadata(subscription, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@android.annotation.Nullable public android.telephony.euicc.EuiccInfo getEuiccInfo() { if (!(isEnabled())) { return null; } try { return android.telephony.euicc.EuiccManager.getIEuiccController().getEuiccInfo(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
private static com.android.internal.telephony.euicc.IEuiccController getIEuiccController() { return IEuiccController.Stub.asInterface(android.os.ServiceManager.getService("econtroller")); }
public void getDefaultDownloadableSubscriptionList(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().getDefaultDownloadableSubscriptionList(mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@android.annotation.SystemApi public int getOtaStatus() { if (!(isEnabled())) { return android.telephony.euicc.EuiccManager.EUICC_OTA_STATUS_UNAVAILABLE; } try { return android.telephony.euicc.EuiccManager.getIEuiccController().getOtaStatus(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@android.annotation.Nullable public java.lang.String getEid() { if (!(isEnabled())) { return null; } try { return android.telephony.euicc.EuiccManager.getIEuiccController().getEid(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void retainSubscriptionsForFactoryReset(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().retainSubscriptionsForFactoryReset(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }

@java.lang.Override public void setSystemProperty(java.lang.String property, java.lang.String value) { if (getUnitTestMode()) { return; } if ((isPhoneTypeGsm()) || (isPhoneTypeCdmaLte())) { android.telephony.TelephonyManager.setTelephonyProperty(mPhoneId, property, value); } else { super.setSystemProperty(property, value); } }
@java.lang.Override public boolean updateCurrentCarrierInProvider() { if ((isPhoneTypeGsm()) || (isPhoneTypeCdmaLte())) { long currentDds = android.telephony.SubscriptionManager.getDefaultDataSubscriptionId(); java.lang.String operatorNumeric = getOperatorNumeric(); logd(((((("updateCurrentCarrierInProvider: mSubId = " + (getSubId())) + " currentDds = ") + currentDds) + " operatorNumeric = ") + operatorNumeric)); if ((!(android.text.TextUtils.isEmpty(operatorNumeric))) && ((getSubId()) == currentDds)) { try { android.net.Uri uri = android.net.Uri.withAppendedPath(Telephony.Carriers.CONTENT_URI, "current"); android.content.ContentValues map = new android.content.ContentValues(); map.put(Telephony.Carriers.NUMERIC, operatorNumeric); mContext.getContentResolver().insert(uri, map); return true; } catch (android.database.SQLException e) { android.telephony.Rlog.e(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, "Can't store current operator", e); } } return false; } else { return true; } }
@java.lang.Override public java.lang.String getSystemProperty(java.lang.String property, java.lang.String defValue) { if ((isPhoneTypeGsm()) || (isPhoneTypeCdmaLte())) { if (getUnitTestMode()) { return null; } return android.telephony.TelephonyManager.getTelephonyProperty(mPhoneId, property, defValue); } else { return super.getSystemProperty(property, defValue); } }
public android.net.NetworkStats readNetworkStatsSummaryDev() throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; final boolean active = (reader.nextInt()) != 0; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.rxPackets += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); } stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException("problem parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }

public android.net.NetworkStats readNetworkStatsSummaryXt() throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); if (!(mStatsXtIfaceFmt.exists())) return null; final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceFmt)); reader.finishLine(); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException("problem parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
@java.lang.Override public android.net.NetworkCapabilities createFromParcel(android.os.Parcel in) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCap.mNetworkCapabilities = in.readLong(); netCap.mTransportTypes = in.readLong(); netCap.mLinkUpBandwidthKbps = in.readInt(); netCap.mLinkDownBandwidthKbps = in.readInt(); netCap.mNetworkSpecifier = in.readParcelable(null); netCap.mSignalStrength = in.readInt(); return netCap; }
@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt((allowBypass ? 1 : 0)); out.writeInt((explicitlySelected ? 1 : 0)); out.writeInt((acceptUnvalidated ? 1 : 0)); out.writeString(subscriberId); out.writeInt((provisioningNotificationDisabled ? 1 : 0)); }
@java.lang.Override public int hashCode() { return ((((((((int) ((mNetworkCapabilities) & -1)) + (((int) ((mNetworkCapabilities) >> 32)) * 3)) + (((int) ((mTransportTypes) & -1)) * 5)) + (((int) ((mTransportTypes) >> 32)) * 7)) + ((mLinkUpBandwidthKbps) * 11)) + ((mLinkDownBandwidthKbps) * 13)) + ((java.util.Objects.hashCode(mNetworkSpecifier)) * 17)) + ((mSignalStrength) * 19); }



@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeInt(mSignalStrength); }
private void prepareInternal(java.lang.String newPackage) { long token = android.os.Binder.clearCallingIdentity(); try { if ((mInterface) != null) { mStatusIntent = null; agentDisconnect(); jniReset(mInterface); mInterface = null; mVpnUsers = null; } if ((mConnection) != null) { try { mConnection.mService.transact(IBinder.LAST_CALL_TRANSACTION, android.os.Parcel.obtain(), null, IBinder.FLAG_ONEWAY); } catch (java.lang.Exception e) { } mContext.unbindService(mConnection); mConnection = null; } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } try { mNetd.denyProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, ((("Failed to disallow UID " + (mOwnerUID)) + " to call protect() ") + e)); } android.util.Log.i(com.android.server.connectivity.Vpn.TAG, ((("Switched from " + (mPackage)) + " to ") + newPackage)); mPackage = newPackage; mOwnerUID = getAppUid(newPackage, mUserHandle); try { mNetd.allowProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, ((("Failed to allow UID " + (mOwnerUID)) + " to call protect() ") + e)); } mConfig = null; updateState(DetailedState.IDLE, "prepare"); setVpnForcedLocked(mLockdown); } finally { android.os.Binder.restoreCallingIdentity(token); } }
public void onUserAdded(int userHandle) { android.content.pm.UserInfo user = android.os.UserManager.get(mContext).getUserInfo(userHandle); if ((user.isRestricted()) && ((user.restrictedProfileParentId) == (mUserHandle))) { synchronized(this) { if ((mVpnUsers) != null) { try { addUserToRanges(mVpnUsers, userHandle, mConfig.allowedApplications, mConfig.disallowedApplications); if ((mNetworkAgent) != null) { final java.util.List<android.net.UidRange> ranges = uidRangesForUser(userHandle); mNetworkAgent.addUidRanges(ranges.toArray(new android.net.UidRange[ranges.size()])); } } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, "Failed to add restricted user to owner", e); } } setVpnForcedLocked(mLockdown); } } }
public void onUserRemoved(int userHandle) { android.content.pm.UserInfo user = android.os.UserManager.get(mContext).getUserInfo(userHandle); if ((user.isRestricted()) && ((user.restrictedProfileParentId) == (mUserHandle))) { synchronized(this) { if ((mVpnUsers) != null) { try { removeVpnUserLocked(userHandle); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, "Failed to remove restricted user to owner", e); } } setVpnForcedLocked(mLockdown); } } }
@java.lang.Override public void interfaceRemoved(java.lang.String interfaze) { synchronized(this) { if ((interfaze.equals(mInterface)) && ((jniCheck(interfaze)) == 0)) { mStatusIntent = null; mVpnUsers = null; mConfig = null; mInterface = null; if ((mConnection) != null) { mContext.unbindService(mConnection); mConnection = null; agentDisconnect(); } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } } } }
public synchronized boolean appliesToUid(int uid) { if (!(isRunningLocked())) { return false; } for (android.net.UidRange uidRange : mVpnUsers) { if (uidRange.contains(uid)) { return true; } } return false; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return ((((equalsNetCapabilities(that)) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that)); }
public static com.android.server.connectivity.KeepalivePacketData nattKeepalivePacket(java.net.InetAddress srcAddress, int srcPort, java.net.InetAddress dstAddress, int dstPort) throws com.android.server.connectivity.KeepalivePacketData.InvalidPacketException { if ((!(srcAddress instanceof java.net.Inet4Address)) || (!(dstAddress instanceof java.net.Inet4Address))) { throw new com.android.server.connectivity.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_IP_ADDRESS); } if (dstPort != (NATT_PORT)) { throw new com.android.server.connectivity.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_PORT); } int length = ((com.android.server.connectivity.KeepalivePacketData.IPV4_HEADER_LENGTH) + (com.android.server.connectivity.KeepalivePacketData.UDP_HEADER_LENGTH)) + 1; java.nio.ByteBuffer buf = java.nio.ByteBuffer.allocate(length); buf.order(java.nio.ByteOrder.BIG_ENDIAN); buf.putShort(((short) (17664))); buf.putShort(((short) (length))); buf.putInt(0); buf.put(((byte) (64))); buf.put(((byte) (OsConstants.IPPROTO_UDP))); int ipChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(srcAddress.getAddress()); buf.put(dstAddress.getAddress()); buf.putShort(((short) (srcPort))); buf.putShort(((short) (dstPort))); buf.putShort(((short) (length - 20))); int udpChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(((byte) (255))); buf.putShort(ipChecksumOffset, android.net.util.IpUtils.ipChecksum(buf, 0)); buf.putShort(udpChecksumOffset, android.net.util.IpUtils.udpChecksum(buf, 0, com.android.server.connectivity.KeepalivePacketData.IPV4_HEADER_LENGTH)); return new com.android.server.connectivity.KeepalivePacketData(srcAddress, srcPort, dstAddress, dstPort, buf.array()); }

private boolean satisfiedByNetworkCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { return (((((nc != null) && (satisfiedByNetCapabilities(nc, onlyImmutable))) && (satisfiedByTransportTypes(nc))) && (onlyImmutable || (satisfiedByLinkBandwidths(nc)))) && (satisfiedBySpecifier(nc))) && (onlyImmutable || (satisfiedBySignalStrength(nc))); }
private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkCapabilities.removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } mNetworkInfo.setDetailedState(DetailedState.CONNECTING, null, null); android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); mNetworkCapabilities.setUids(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications, mConfig.disallowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, 0, networkMisc) { @java.lang.Override public void unwanted() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, "agentConnect"); }
private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkCapabilities.removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } mNetworkInfo.setDetailedState(DetailedState.CONNECTING, null, null); android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); mNetworkCapabilities.setUids(createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications, mConfig.disallowedApplications)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, 0, networkMisc) { @java.lang.Override public void unwanted() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, "agentConnect"); }
private void agentConnect() { android.net.LinkProperties lp = makeLinkProperties(); if ((lp.hasIPv4DefaultRoute()) || (lp.hasIPv6DefaultRoute())) { mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } else { mNetworkCapabilities.removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); } mNetworkInfo.setDetailedState(DetailedState.CONNECTING, null, null); android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (mConfig.allowBypass) && (!(mLockdown)); long token = android.os.Binder.clearCallingIdentity(); try { mNetworkAgent = new android.net.NetworkAgent(mLooper, mContext, com.android.server.connectivity.Vpn.NETWORKTYPE, mNetworkInfo, mNetworkCapabilities, lp, 0, networkMisc) { @java.lang.Override public void unwanted() { } }; } finally { android.os.Binder.restoreCallingIdentity(token); } mVpnUsers = createUserAndRestrictedProfilesRanges(mUserHandle, mConfig.allowedApplications, mConfig.disallowedApplications); mNetworkAgent.addUidRanges(mVpnUsers.toArray(new android.net.UidRange[mVpnUsers.size()])); mNetworkInfo.setIsAvailable(true); updateState(DetailedState.CONNECTED, "agentConnect"); }
@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null) ? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); enforceAccessPermission(); } else { networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureRequestableCapabilities(networkCapabilities); if (timeoutMs < 0) { throw new java.lang.IllegalArgumentException("Bad timeout specified"); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(("requestNetwork for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri)); if (timeoutMs > 0) { mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs); } return networkRequest; }
@java.lang.Override public void pendingListenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, "PendingIntent cannot be null."); if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(new android.net.NetworkCapabilities(networkCapabilities), TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("pendingListenForNetwork for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); }
@java.lang.Override public android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int userId) { enforceAccessPermission(); java.util.HashMap<android.net.Network, android.net.NetworkCapabilities> result = new java.util.HashMap<android.net.Network, android.net.NetworkCapabilities>(); com.android.server.connectivity.NetworkAgentInfo nai = getDefaultNetwork(); android.net.NetworkCapabilities nc = getNetworkCapabilitiesInternal(nai); if (nc != null) { result.put(nai.network, nc); } synchronized(mVpns) { if (!(mLockdownEnabled)) { com.android.server.connectivity.Vpn vpn = mVpns.get(userId); if (vpn != null) { android.net.Network[] networks = vpn.getUnderlyingNetworks(); if (networks != null) { for (android.net.Network network : networks) { nai = getNetworkAgentInfoForNetwork(network); nc = getNetworkCapabilitiesInternal(nai); if (nc != null) { result.put(network, nc); } } } } } } android.net.NetworkCapabilities[] out = new android.net.NetworkCapabilities[result.size()]; out = result.values().toArray(out); return out; }


private android.net.NetworkRequest createInternetRequestForTransport(int transportType, android.net.NetworkRequest.Type type) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCap.addCapability(com.android.server.NET_CAPABILITY_INTERNET); netCap.addCapability(com.android.server.NET_CAPABILITY_NOT_RESTRICTED); if (transportType > (-1)) { netCap.addTransportType(transportType); } return new android.net.NetworkRequest(netCap, TYPE_NONE, nextNetworkRequestId(), type); }
@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("listenForNetwork for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }
@java.lang.Override public android.net.NetworkMisc createFromParcel(android.os.Parcel in) { android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (in.readInt()) != 0; networkMisc.explicitlySelected = (in.readInt()) != 0; networkMisc.acceptUnvalidated = (in.readInt()) != 0; networkMisc.subscriberId = in.readString(); networkMisc.provisioningNotificationDisabled = (in.readInt()) != 0; return networkMisc; }
@java.lang.Override public java.lang.String toString() { int[] types = getTransportTypes(); java.lang.String transports = ((types.length) > 0) ? " Transports: " + (android.net.NetworkCapabilities.transportNamesOf(types)) : ""; types = getCapabilities(); java.lang.String capabilities = ((types.length) > 0) ? " Capabilities: " : ""; for (int i = 0; i < (types.length);) { capabilities += android.net.NetworkCapabilities.capabilityNameOf(types[i]); if ((++i) < (types.length)) capabilities += "&"; } java.lang.String upBand = ((mLinkUpBandwidthKbps) > 0) ? (" LinkUpBandwidth>=" + (mLinkUpBandwidthKbps)) + "Kbps" : ""; java.lang.String dnBand = ((mLinkDownBandwidthKbps) > 0) ? (" LinkDnBandwidth>=" + (mLinkDownBandwidthKbps)) + "Kbps" : ""; java.lang.String specifier = ((mNetworkSpecifier) == null) ? "" : (" Specifier: <" + (mNetworkSpecifier)) + ">"; java.lang.String signalStrength = (hasSignalStrength()) ? " SignalStrength: " + (mSignalStrength) : ""; return (((((("[" + transports) + capabilities) + upBand) + dnBand) + specifier) + signalStrength) + "]"; }

public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineTransportTypes(nc); combineLinkBandwidths(nc); combineSpecifiers(nc); combineSignalStrength(nc); }











@org.junit.Test public void testTransportModeTransformBinderDeath() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT)); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN)); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@java.lang.Override public void freeUnderlyingResources() { for (int direction : com.android.server.IpSecService.DIRECTIONS) { int spi = mSpis[direction].getSpi(); try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, direction, mConfig.getLocalAddress(), mConfig.getRemoteAddress(), spi); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ("Failed to delete SA with ID: " + (mResourceId))); } } getResourceTracker().give(); }
@org.junit.Test public void testCreateTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); }
@org.junit.Test public void testDeleteTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); mIpSecService.deleteTransportModeTransform(createTransformResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT)); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN)); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@org.junit.Test public void testSecurityParameterIndexBinderDeath() throws java.lang.Exception { when(mMockNetd.ipSecAllocateSpi(anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), eq(mRemoteAddr), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT))).thenReturn(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT); IpSecSpiResponse spiResp = mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, mRemoteAddr, com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(spiResp.resourceId), anyInt(), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT)); assertEquals(0, userRecord.mSpiQuotaTracker.mCurrent); try { userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
@java.lang.Override public void freeUnderlyingResources() { if (mOwnedByTransform) { android.util.Log.d(com.android.server.IpSecService.TAG, (("Cannot release Spi " + (mSpi)) + ": Currently locked by a Transform")); return; } try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, mDirection, mLocalAddress, mRemoteAddress, mSpi); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ("Failed to delete SPI reservation with ID: " + (mResourceId))); } mSpi = android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX; getResourceTracker().give(); }
@org.junit.Test public void testCreateTransportModeTransformAead() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); ipSecConfig.setAuthenticatedEncryption(IpSecTransform.DIRECTION_OUT, com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); ipSecConfig.setAuthenticatedEncryption(IpSecTransform.DIRECTION_IN, com.android.server.IpSecServiceParameterizedTest.AEAD_ALGO); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), eq(""), eq(new byte[]{ }), eq(0), eq(""), eq(new byte[]{ }), eq(0), eq(IpSecAlgorithm.AUTH_CRYPT_AES_GCM), eq(com.android.server.IpSecServiceParameterizedTest.AEAD_KEY), anyInt(), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), eq(""), eq(new byte[]{ }), eq(0), eq(""), eq(new byte[]{ }), eq(0), eq(IpSecAlgorithm.AUTH_CRYPT_AES_GCM), eq(com.android.server.IpSecServiceParameterizedTest.AEAD_KEY), anyInt(), anyInt(), anyInt(), anyInt()); }
@org.junit.Test public void testReleaseSecurityParameterIndex() throws java.lang.Exception { when(mMockNetd.ipSecAllocateSpi(anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), eq(mRemoteAddr), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT))).thenReturn(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT); android.net.IpSecSpiResponse spiResp = mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, mRemoteAddr, com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT, new android.os.Binder()); mIpSecService.releaseSecurityParameterIndex(spiResp.resourceId); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(spiResp.resourceId), anyInt(), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT)); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); assertEquals(0, userRecord.mSpiQuotaTracker.mCurrent); try { userRecord.mSpiRecords.getRefcountedResourceOrThrow(spiResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }







@java.lang.Override public synchronized void applyTransportModeTransform(android.os.ParcelFileDescriptor socket, int direction, int resourceId) throws android.os.RemoteException { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.TransformRecord info = userRecord.mTransformRecords.getResourceOrThrow(resourceId); if (((info.pid) != (getCallingPid())) || ((info.uid) != (getCallingUid()))) { throw new java.lang.SecurityException("Only the owner of an IpSec Transform may apply it!"); } android.net.IpSecConfig c = info.getConfig(); try { mSrvConfig.getNetdInstance().ipSecApplyTransportModeTransform(socket.getFileDescriptor(), resourceId, direction, c.getSourceAddress(), c.getDestinationAddress(), info.getSpiRecord().getSpi()); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (EINVAL)) { throw new java.lang.IllegalArgumentException(e.toString()); } else { throw e; } } }






synchronized void onDeviceStateChanged(com.android.bluetooth.hfp.HeadsetDeviceState deviceState) { mStateMachine.sendMessage(HeadsetStateMachine.DEVICE_STATE_CHANGED, deviceState); }
boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); int connectionState = mStateMachine.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mStateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_STOP, device); return true; }
private boolean bindResponse(int indId, boolean indStatus) { for (android.bluetooth.BluetoothDevice device : getConnectedDevices()) { int connectionState = mStateMachine.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { continue; } if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d("Bind Response sent for", device.getAddress()); } android.os.Message msg = mStateMachine.obtainMessage(HeadsetStateMachine.BIND_RESPONSE); msg.obj = device; msg.arg1 = indId; msg.arg2 = (indStatus) ? 1 : 0; mStateMachine.sendMessage(msg); return true; } return false; }


boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, ("disconnect: device=" + device)); int connectionState = mStateMachine.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((("disconnect: not connected/connecting, connectionState=" + connectionState) + ", device=") + device)); return false; } mStateMachine.sendMessage(HeadsetStateMachine.DISCONNECT, device); return true; }
@java.lang.Override protected synchronized boolean start() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, "start()"); mStateMachinesThread = new android.os.HandlerThread("HeadsetService.StateMachines"); mStateMachinesThread.start(); mSystemInterface = new com.android.bluetooth.hfp.HeadsetSystemInterface(this); mSystemInterface.init(); mNativeInterface = com.android.bluetooth.hfp.HeadsetNativeInterface.getInstance(); mNativeInterface.init(com.android.bluetooth.hfp.HeadsetService.MAX_HEADSET_CONNECTIONS, android.bluetooth.BluetoothHeadset.isInbandRingingSupported(this)); mStateMachine = com.android.bluetooth.hfp.HeadsetStateMachine.make(mStateMachinesThread.getLooper(), this, mNativeInterface, mSystemInterface); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(Intent.ACTION_BATTERY_CHANGED); filter.addAction(AudioManager.VOLUME_CHANGED_ACTION); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); registerReceiver(mHeadsetReceiver, filter); com.android.bluetooth.hfp.HeadsetService.setHeadsetService(this); mStarted = true; return true; }
boolean disableWBS() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if ((mStateMachine.getConnectionState(mStateMachine.getCurrentDevice())) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "enableWBS: device is not connected"); return false; } if ((mStateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "enableWBS: audio is already connected"); return false; } for (android.bluetooth.BluetoothDevice device : getConnectedDevices()) { mStateMachine.sendMessage(HeadsetStateMachine.DISABLE_WBS, device); } return true; }
private java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); return mStateMachine.getDevicesMatchingConnectionStates(states); }
boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice device) { int connectionState = mStateMachine.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mStateMachine.sendMessage(HeadsetStateMachine.VIRTUAL_CALL_STOP, device); return true; }
boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice device) { mStateMachine.sendMessage(HeadsetStateMachine.VIRTUAL_CALL_START, device); return true; }

int getAudioState(android.bluetooth.BluetoothDevice device) { return mStateMachine.getAudioState(); }
synchronized void messageFromNative(com.android.bluetooth.hfp.HeadsetStackEvent stackEvent) { mStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, stackEvent); }
synchronized int getConnectionState(android.bluetooth.BluetoothDevice device) { if ((mCurrentDevice) == null) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } if (!(mCurrentDevice.equals(device))) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } com.android.internal.util.IState currentState = getCurrentState(); if (currentState == (mConnecting)) { return android.bluetooth.BluetoothProfile.STATE_CONNECTING; } else if (currentState instanceof com.android.bluetooth.hfp.HeadsetStateMachine.ConnectedBase) { return android.bluetooth.BluetoothProfile.STATE_CONNECTED; } else if (currentState == (mDisconnecting)) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTING; } android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ("getConnectionState: bad currentState: " + currentState)); return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; }
synchronized android.bluetooth.BluetoothDevice getCurrentDevice() { return mCurrentDevice; }
java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { java.util.List<android.bluetooth.BluetoothDevice> deviceList = new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); java.util.Set<android.bluetooth.BluetoothDevice> bondedDevices = mAdapter.getBondedDevices(); if (bondedDevices == null) { return deviceList; } synchronized(this) { for (android.bluetooth.BluetoothDevice device : bondedDevices) { android.os.ParcelUuid[] featureUuids = device.getUuids(); if (!(android.bluetooth.BluetoothUuid.containsAnyUuid(featureUuids, com.android.bluetooth.hfp.HeadsetStateMachine.HEADSET_UUIDS))) { continue; } int connectionState = getConnectionState(device); for (int state : states) { if (connectionState == state) { deviceList.add(device); } } } } return deviceList; }
private boolean isScoAcceptable() { if (mForceScoAudio) { return true; } return (mAudioRouteAllowed) && (((mVoiceRecognitionStarted) || (isInCall())) || ((android.bluetooth.BluetoothHeadset.isInbandRingingSupported(mService)) && (isRinging()))); }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); when(mSystemInterface.getHeadsetPhoneState()).thenReturn(mPhoneState); when(mSystemInterface.getAudioManager()).thenReturn(mAudioManager); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("00:01:02:03:04:05"); mNativeInterface = spy(com.android.bluetooth.hfp.HeadsetNativeInterface.getInstance()); doNothing().when(mNativeInterface).init(anyInt(), anyBoolean()); doReturn(true).when(mNativeInterface).connectHfp(mTestDevice); doReturn(true).when(mNativeInterface).disconnectHfp(mTestDevice); doReturn(true).when(mNativeInterface).connectAudio(mTestDevice); doReturn(true).when(mNativeInterface).disconnectAudio(mTestDevice); when(mHeadsetService.bindService(any(android.content.Intent.class), any(android.content.ServiceConnection.class), anyInt())).thenReturn(true); when(mHeadsetService.getResources()).thenReturn(android.support.test.InstrumentationRegistry.getTargetContext().getResources()); when(mHeadsetService.getPackageManager()).thenReturn(android.support.test.InstrumentationRegistry.getContext().getPackageManager()); when(mHeadsetService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_ON); mHandlerThread = new android.os.HandlerThread("HeadsetStateMachineTestHandlerThread"); mHandlerThread.start(); HeadsetStateMachine.sConnectTimeoutMillis = com.android.bluetooth.hfp.HeadsetStateMachineTest.CONNECT_TIMEOUT_TEST_MILLIS; mHeadsetStateMachine = com.android.bluetooth.hfp.HeadsetStateMachine.make(mHandlerThread.getLooper(), mHeadsetService, mNativeInterface, mSystemInterface); mHeadsetStateMachine.setForceScoAudio(true); }

@java.lang.Override protected synchronized boolean stop() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, "stop()"); if (!(mStarted)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "stop() called before start()"); return true; } mStarted = false; unregisterReceiver(mHeadsetReceiver); com.android.bluetooth.hfp.HeadsetStateMachine.destroy(mStateMachine); mStateMachine = null; mNativeInterface.cleanup(); mSystemInterface.stop(); mStateMachinesThread.quitSafely(); mStateMachinesThread = null; com.android.bluetooth.hfp.HeadsetService.setHeadsetService(null); return true; }
void disconnectHeadset() { synchronized(mScoClients) { if ((mBluetoothHeadsetDevice) != null) { setBtScoDeviceConnectionState(mBluetoothHeadsetDevice, BluetoothProfile.STATE_DISCONNECTED); } mBluetoothHeadset = null; } }
void setBtScoDeviceConnectionState(android.bluetooth.BluetoothDevice btDevice, int state) { if (btDevice == null) { return; } java.lang.String address = btDevice.getAddress(); android.bluetooth.BluetoothClass btClass = btDevice.getBluetoothClass(); int outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO; int inDevice = android.media.AudioSystem.DEVICE_IN_BLUETOOTH_SCO_HEADSET; if (btClass != null) { switch (btClass.getDeviceClass()) { case BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET : case BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE : outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_HEADSET; break; case BluetoothClass.Device.AUDIO_VIDEO_CAR_AUDIO : outDevice = android.media.AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_CARKIT; break; } } if (!(android.bluetooth.BluetoothAdapter.checkBluetoothAddress(address))) { address = ""; } boolean connected = state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED); java.lang.String btDeviceName = btDevice.getName(); boolean success = (handleDeviceConnection(connected, outDevice, address, btDeviceName)) && (handleDeviceConnection(connected, inDevice, address, btDeviceName)); if (!success) { return; } if ((((state == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) || (state == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTING))) && ((mBluetoothHeadset) != null)) && ((mBluetoothHeadset.getAudioState(btDevice)) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, "SCO connected through another device, returning"); return; } synchronized(mScoClients) { if (connected) { mBluetoothHeadsetDevice = btDevice; } else { mBluetoothHeadsetDevice = null; resetBluetoothSco(); } } }
boolean startVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); int connectionState = mStateMachine.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mStateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_START, device); return true; }
private void clccResponse(int index, int direction, int status, int mode, boolean mpty, java.lang.String number, int type) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.HeadsetService.MODIFY_PHONE_STATE, null); mStateMachine.sendMessage(HeadsetStateMachine.SEND_CCLC_RESPONSE, new com.android.bluetooth.hfp.HeadsetClccResponse(index, direction, status, mode, mpty, number, type)); }
boolean connectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if ((mStateMachine.getConnectionState(mStateMachine.getCurrentDevice())) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: profile not connected"); return false; } if ((mStateMachine.getAudioState()) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ("connectAudio: audio is not idle, current state " + (mStateMachine.getAudioState()))); return false; } mStateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, mStateMachine.getCurrentDevice()); return true; }
boolean enableWBS() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if ((mStateMachine.getConnectionState(mStateMachine.getCurrentDevice())) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "enableWBS: device is not connected"); return false; } if ((mStateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "enableWBS: audio is already connected"); return false; } for (android.bluetooth.BluetoothDevice device : getConnectedDevices()) { mStateMachine.sendMessage(HeadsetStateMachine.ENABLE_WBS, device); } return true; }
boolean disconnectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if ((mStateMachine.getAudioState()) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "disconnectAudio, audio is not connected"); return false; } mStateMachine.sendMessage(HeadsetStateMachine.DISCONNECT_AUDIO, mStateMachine.getCurrentDevice()); return true; }
public boolean getAudioRouteAllowed() { return mStateMachine.getAudioRouteAllowed(); }
boolean isAudioOn() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); return (mStateMachine.getAudioState()) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED); }

private void phoneStateChanged(int numActive, int numHeld, int callState, java.lang.String number, int type) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.HeadsetService.MODIFY_PHONE_STATE, null); android.os.Message msg = mStateMachine.obtainMessage(HeadsetStateMachine.CALL_STATE_CHANGED); msg.obj = new com.android.bluetooth.hfp.HeadsetCallState(numActive, numHeld, callState, number, type); msg.arg1 = 0; mStateMachine.sendMessage(msg); }
@java.lang.Override public void freeUnderlyingResources() { getResourceTracker().give(); mReserveKeyTracker.release(mKeys); }
@java.lang.Override public synchronized void applyTunnelModeTransform(int direction, int transformResourceId, int tunnelResourceId) throws android.os.RemoteException { com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TransformRecord transformInfo = userRecord.mTransformRecords.getResourceOrThrow(transformResourceId); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); android.net.IpSecConfig c = transformInfo.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (android.net.IpSecTransform.MODE_TUNNEL)), "Transform mode was not Tunnel mode; cannot be applied to a tunnel interface"); int[] keys = tunnelInterfaceInfo.getKeys(); }
private int getDexFlags(android.content.pm.ApplicationInfo info, java.lang.String compilerFilter, com.android.server.pm.dex.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) != 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = (!(info.isForwardLocked())) && (!isProfileGuidedFilter); int profileFlag = (isProfileGuidedFilter) ? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int dexFlags = ((((isPublic ? com.android.server.pm.Installer.DEXOPT_PUBLIC : 0) | (debuggable ? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | profileFlag) | (options.isBootComplete() ? com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE : 0)) | (options.isDexoptIdleBackgroundJob() ? com.android.server.pm.Installer.DEXOPT_IDLE_BACKGROUND_JOB : 0); return adjustDexoptFlags(dexFlags); }
private void broadcastConfigChangedIntent(int phoneId) { android.content.Intent intent = new android.content.Intent(android.telephony.CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND))); android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra(intent, phoneId); android.app.ActivityManager.broadcastStickyIntent(intent, UserHandle.USER_ALL); mHasSentConfigChange[phoneId] = true; }



public void prepareDownload(@android.annotation.Nullable byte[] hashCc, byte[] smdpSigned2, byte[] smdpSignature2, byte[] smdpCertificate, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }

public void getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }
public void authenticateServer(java.lang.String matchingId, byte[] serverSigned1, byte[] serverSignature1, byte[] euiccCiPkIdToBeUsed, byte[] serverCertificate, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }
public void cancelSession(byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }

public void getEuiccInfo2(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }

public void loadBoundProfilePackage(byte[] boundProfilePackage, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }

private boolean areAllRecordsLoaded() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if ((app != null) && (isSupportedApplication(app))) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir == null) || (!(ir.isLoaded()))) { return false; } } } return (mUiccApplications[0]) != null; }
private void updateExternalState() { if ((mUiccCard.getCardState()) == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ERROR)) { setExternalState(IccCardConstants.State.CARD_IO_ERROR); return; } if ((mUiccCard.getCardState()) == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_RESTRICTED)) { setExternalState(IccCardConstants.State.CARD_RESTRICTED); return; } if ((mUiccApplication) == null) { setExternalState(IccCardConstants.State.NOT_READY); return; } switch (mUiccApplication.getState()) { case APPSTATE_UNKNOWN : setExternalState(IccCardConstants.State.NOT_READY); break; case APPSTATE_SUBSCRIPTION_PERSO : if ((mUiccApplication.getPersoSubState()) == (IccCardApplicationStatus.PersoSubState.PERSOSUBSTATE_SIM_NETWORK)) { setExternalState(IccCardConstants.State.NETWORK_LOCKED); } break; case APPSTATE_READY : setExternalState(IccCardConstants.State.READY); break; } }

@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { case com.android.internal.telephony.uicc.UiccProfile.EVENT_OPEN_LOGICAL_CHANNEL_DONE : case com.android.internal.telephony.uicc.UiccProfile.EVENT_CLOSE_LOGICAL_CHANNEL_DONE : case com.android.internal.telephony.uicc.UiccProfile.EVENT_TRANSMIT_APDU_LOGICAL_CHANNEL_DONE : case com.android.internal.telephony.uicc.UiccProfile.EVENT_TRANSMIT_APDU_BASIC_CHANNEL_DONE : case com.android.internal.telephony.uicc.UiccProfile.EVENT_SIM_IO_DONE : android.os.AsyncResult ar = ((android.os.AsyncResult) (msg.obj)); if ((ar.exception) != null) { loglocal(("Exception: " + (ar.exception))); log(("Error in SIM access with exception" + (ar.exception))); } android.os.AsyncResult.forMessage(((android.os.Message) (ar.userObj)), ar.result, ar.exception); ((android.os.Message) (ar.userObj)).sendToTarget(); break; case com.android.internal.telephony.uicc.UiccProfile.EVENT_CARRIER_PRIVILEGES_LOADED : onCarrierPriviligesLoadedMessage(); break; default : loge(("Unknown Event " + (msg.what))); } }
private void setCurrentAppType(boolean isGsm) { synchronized(mLock) { boolean isLteOnCdmaMode = (android.telephony.TelephonyManager.getLteOnCdmaModeStatic()) == (com.android.internal.telephony.PhoneConstants.LTE_ON_CDMA_TRUE); if (isGsm || isLteOnCdmaMode) { mCurrentAppType = UiccController.APP_FAM_3GPP; } else { mCurrentAppType = UiccController.APP_FAM_3GPP2; } initializeCurrentApp(); } }
private void registerUiccCardEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { app.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir != null) { ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } } } if ((mIccRecords) != null) { mIccRecords.registerForLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_LOCKED, null); mIccRecords.registerForNetworkLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_NETWORK_LOCKED, null); } }
public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { com.android.internal.telephony.uicc.IccCardStatus.CardState oldState = mCardState; mCardState = ics.mCardState; mContext = c; mCi = ci; mIccid = ics.iccid; updateCardId(); if ((mCardState) != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = new com.android.internal.telephony.uicc.UiccProfile(mContext, mCi, ics, mPhoneId, this); } else { mUiccProfile.update(mContext, mCi, ics); } } else { throw new java.lang.RuntimeException("Card state is absent when updating!"); } } }
private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app != null) && (isSupportedApplication(app))) && (!(app.isReady()))) { return false; } } return (mUiccApplications[0]) != null; }





























public void removeNotificationFromList(int seqNumber, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) { }
public void resetMemory(@android.telephony.euicc.EuiccCardManager.ResetOption int options, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) { }
public void getSmdsAddress(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { }
public void getEuiccChallenge(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }

public void cancelSession(byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }
public void getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }
public void setDefaultSmdpAddress(java.lang.String defaultSmdpAddress, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.Void> callback, android.os.Handler handler) { }

public void getDefaultSmdpAddress(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { }
public void getEuiccInfo2(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }

public void getEid(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<java.lang.String> callback, android.os.Handler handler) { }

public void close() { android.util.Log.d(android.net.IpSecTransform.TAG, ("Removing Transform with Id " + (mResourceId))); if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { mCloseGuard.close(); return; } try { android.net.IIpSecService svc = getIpSecService(); svc.deleteTransportModeTransform(mResourceId); stopKeepalive(); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } finally { mResourceId = android.net.IpSecManager.INVALID_RESOURCE_ID; mCloseGuard.close(); } }
@java.lang.Override public void onError(int error) { synchronized(mKeepaliveSyncLock) { mKeepaliveStatus = error; mKeepaliveSyncLock.notifyAll(); } }
void stopKeepalive() { return; }
@java.lang.Override public void onStarted() { synchronized(mKeepaliveSyncLock) { mKeepaliveStatus = ConnectivityManager.PacketKeepalive.SUCCESS; mKeepaliveSyncLock.notifyAll(); } }
@java.lang.Override public void onStopped() { synchronized(mKeepaliveSyncLock) { mKeepaliveStatus = ConnectivityManager.PacketKeepalive.NO_KEEPALIVE; mKeepaliveSyncLock.notifyAll(); } }
void startKeepalive(android.content.Context c) { if ((mConfig.getNattKeepaliveInterval()) != 0) { android.util.Log.wtf(android.net.IpSecTransform.TAG, "Keepalive not yet supported."); } }
private android.net.IpSecTransform activate() throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { synchronized(this) { try { android.net.IIpSecService svc = getIpSecService(); android.net.IpSecTransformResponse result = svc.createTransportModeTransform(mConfig, new android.os.Binder()); int status = result.status; checkResultStatus(status); mResourceId = result.resourceId; startKeepalive(mContext); android.util.Log.d(android.net.IpSecTransform.TAG, ("Added Transform with Id " + (mResourceId))); mCloseGuard.open("build"); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } } return this; }





@android.test.suitebuilder.annotation.SmallTest public void testParcel() { android.telephony.ServiceState ss = new android.telephony.ServiceState(); ss.setVoiceRegState(ServiceState.STATE_IN_SERVICE); ss.setDataRegState(ServiceState.STATE_OUT_OF_SERVICE); ss.setVoiceRoamingType(ServiceState.ROAMING_TYPE_INTERNATIONAL); ss.setDataRoamingType(ServiceState.ROAMING_TYPE_UNKNOWN); ss.setOperatorName("long", "short", "numeric"); ss.setIsManualSelection(true); ss.setRilVoiceRadioTechnology(ServiceState.RIL_RADIO_TECHNOLOGY_1xRTT); ss.setRilDataRadioTechnology(ServiceState.RIL_RADIO_TECHNOLOGY_EVDO_0); ss.setCssIndicator(1); ss.setSystemAndNetworkId(2, 3); ss.setCdmaRoamingIndicator(4); ss.setCdmaDefaultRoamingIndicator(5); ss.setCdmaEriIconIndex(6); ss.setCdmaEriIconMode(7); ss.setEmergencyOnly(true); ss.setDataRoamingFromRegistration(true); android.os.Parcel p = android.os.Parcel.obtain(); ss.writeToParcel(p, 0); p.setDataPosition(0); android.telephony.ServiceState newSs = new android.telephony.ServiceState(p); assertEquals(ss, newSs); }




@java.lang.Override public void getAllProfiles(java.lang.String callingPackage, com.android.internal.telephony.euicc.IGetAllProfilesCallback callback) { checkCallingPackage(callingPackage); }




private void runAttachTestCmd(com.android.tradefed.device.ITestDevice device, java.lang.String pkg, java.lang.String agentParams) throws java.lang.Exception { java.lang.String attachCmd = ((("cmd activity start -S -W " + agentParams) + " -n ") + pkg) + "/android.jvmti.JvmtiActivity"; java.lang.String attachReply = device.executeShellCommand(attachCmd); if ((attachReply != null) && (!(attachReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(attachReply); } }


void setProfileApp(android.content.pm.ApplicationInfo app, java.lang.String processName, android.app.ProfilerInfo profilerInfo) { synchronized(this) { boolean isDebuggable = "1".equals(android.os.SystemProperties.get(com.android.server.am.ActivityManagerService.SYSTEM_DEBUGGABLE, "0")); if (!isDebuggable) { if (((app.flags) & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) == 0) { throw new java.lang.SecurityException(("Process not debuggable: " + (app.packageName))); } } mProfileApp = processName; if ((mProfilerInfo) != null) { if ((mProfilerInfo.profileFd) != null) { try { mProfilerInfo.profileFd.close(); } catch (java.io.IOException e) { } } } mProfilerInfo = new android.app.ProfilerInfo(profilerInfo); mProfileType = 0; } }
private void restoreDefaultAPN(int subId) { android.database.sqlite.SQLiteDatabase db = getWritableDatabase(); try { db.delete(com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE, com.android.providers.telephony.TelephonyProvider.IS_NOT_OWNED_BY_DPC, null); } catch (android.database.SQLException e) { com.android.providers.telephony.TelephonyProvider.loge(("got exception when deleting to restore: " + e)); } android.content.SharedPreferences spApnId = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApnId = spApnId.edit(); editorApnId.clear(); editorApnId.apply(); android.content.SharedPreferences spApn = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_FULL_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApn = spApn.edit(); editorApn.clear(); editorApn.apply(); if (com.android.providers.telephony.TelephonyProvider.apnSourceServiceExists(getContext())) { restoreApnsWithService(); } else { initDatabaseWithDatabaseHelper(db); } }
void disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH_ADMIN permission"); synchronized(this) { mPbapStateMachine.sendMessage(PbapStateMachine.DISCONNECT); } }
@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice remoteDevice, android.bluetooth.BluetoothSocket socket) { if ((remoteDevice == null) || (socket == null)) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ((("onConnect(): Unexpected null. remoteDevice=" + remoteDevice) + " socket=") + socket)); return false; } mPbapStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(this, mHandlerThread.getLooper(), remoteDevice, socket, this, mSessionStatusHandler); return true; }
java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, "Need BLUETOOTH permission"); java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); if ((mPbapStateMachine) != null) { for (int state : states) { if (state == (mPbapStateMachine.getConnectionState())) { devices.add(mPbapStateMachine.getRemoteDevice()); break; } } } return devices; }
private void cleanUpServerSocket() { mPbapStateMachine.sendMessage(PbapStateMachine.DISCONNECT); cleanUpSdpRecord(); if ((mServerSockets) != null) { mServerSockets.shutdown(false); mServerSockets = null; } }
java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, "Need BLUETOOTH permission"); java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<>(); if ((mPbapStateMachine) != null) { devices.add(mPbapStateMachine.getRemoteDevice()); } return devices; }
int getConnectionState(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if ((mPbapStateMachine) == null) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } return mPbapStateMachine.getConnectionState(); }

@java.lang.Override public java.lang.String toString() { java.util.StringJoiner j = new java.util.StringJoiner(", ", "{", "}"); j.add(("netId=" + (netId))); for (int t : com.android.internal.util.BitUtils.unpackBits(transports)) { j.add(android.net.NetworkCapabilities.transportNameOf(t)); } j.add(java.lang.String.format("dns avg=%dms max=%dms err=%.1f%% tot=%d", ((int) (dnsLatencies.average())), ((int) (dnsLatencies.max)), (100 * (dnsErrorRate.average())), dnsErrorRate.count)); j.add(java.lang.String.format("connect avg=%dms max=%dms err=%.1f%% tot=%d", ((int) (connectLatencies.average())), ((int) (connectLatencies.max)), (100 * (connectErrorRate.average())), connectErrorRate.count)); return j.toString(); }




@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mTransportType); dest.writeInt(mDomain); dest.writeInt(mRegState); dest.writeInt(mAccessNetworkTechnology); dest.writeInt(mReasonForDenial); dest.writeBoolean(mEmergencyOnly); dest.writeIntArray(mAvailableServices); dest.writeParcelable(mCellIdentity, 0); }

@java.lang.Override public android.os.IBinder onBind(android.content.Intent intent) { if ((intent == null) || (!(android.telephony.data.DataService.DATA_SERVICE_INTERFACE.equals(intent.getAction())))) { loge(("Unexpected intent " + intent)); return null; } int slotId = intent.getIntExtra(android.telephony.data.DataService.DATA_SERVICE_EXTRA_SLOT_ID, SubscriptionManager.INVALID_SIM_SLOT_INDEX); if (!(android.telephony.SubscriptionManager.isValidSlotIndex(slotId))) { loge(("Invalid slot id " + slotId)); return null; } log(("onBind: slot id=" + slotId)); android.telephony.data.DataService.IDataServiceWrapper binder = mBinderMap.get(slotId); if (binder == null) { android.os.Message msg = mHandler.obtainMessage(android.telephony.data.DataService.DATA_SERVICE_INTERNAL_REQUEST_INITIALIZE_SERVICE); msg.arg1 = slotId; msg.sendToTarget(); binder = new android.telephony.data.DataService.IDataServiceWrapper(slotId); mBinderMap.put(slotId, binder); } return binder; }
@java.lang.Override public boolean onUnbind(android.content.Intent intent) { int slotId = intent.getIntExtra(android.telephony.data.DataService.DATA_SERVICE_EXTRA_SLOT_ID, SubscriptionManager.INVALID_SIM_SLOT_INDEX); if ((mBinderMap.get(slotId)) != null) { android.telephony.data.DataService.DataServiceProvider serviceImpl; synchronized(mServiceMap) { serviceImpl = mServiceMap.get(slotId); } if (serviceImpl != null) { serviceImpl.onDestroy(); } mBinderMap.remove(slotId); } if ((mBinderMap.size()) == 0) { mHandlerThread.quit(); } return false; }
@java.lang.Override public void onDestroy() { if (com.android.bluetooth.btservice.ProfileService.DBG) { log("Destroying service."); } com.android.bluetooth.btservice.AdapterService adapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); if (adapterService != null) { adapterService.removeProfile(this); } if (mCleaningUp) { if (com.android.bluetooth.btservice.ProfileService.DBG) { log("Cleanup already started... Skipping cleanup()..."); } } else { if (com.android.bluetooth.btservice.ProfileService.DBG) { log("cleanup()"); } mCleaningUp = true; cleanup(); if ((mBinder) != null) { mBinder.cleanup(); mBinder = null; } } super.onDestroy(); mAdapter = null; }
private void doStart(android.content.Intent intent) { if ((mAdapter) == null) { android.util.Log.e(mName, "Error starting profile. BluetoothAdapter is null"); } else { if (com.android.bluetooth.btservice.ProfileService.DBG) { log("start()"); } mStartError = !(start()); if (!(mStartError)) { notifyProfileServiceStateChanged(BluetoothAdapter.STATE_ON); } else { android.util.Log.e(mName, "Error starting profile. start() returned false."); } } }
protected boolean isAvailable() { return (!(mStartError)) && (!(mCleaningUp)); }
private void doStop(android.content.Intent intent) { if (stop()) { if (com.android.bluetooth.btservice.ProfileService.DBG) { log("stop()"); } notifyProfileServiceStateChanged(BluetoothAdapter.STATE_OFF); stopSelf(); } else { android.util.Log.e(mName, "Unable to stop profile"); } }
@java.lang.Override public void onCreate() { if (com.android.bluetooth.btservice.ProfileService.DBG) { log("onCreate"); } super.onCreate(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mBinder = initBinder(); create(); }
public android.bluetooth.BluetoothCodecStatus getCodecStatus() { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, "getCodecStatus()"); } return mStateMachine.getCodecStatus(); }

boolean disconnect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("disconnect(): " + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); int connectionState = mStateMachine.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mStateMachine.sendMessage(A2dpStateMachine.DISCONNECT, device); return true; }
private void processCodecConfigEvent(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothCodecStatus newCodecStatus) { android.bluetooth.BluetoothCodecConfig prevCodecConfig = null; synchronized(this) { if ((mCodecStatus) != null) { prevCodecConfig = mCodecStatus.getCodecConfig(); } mCodecStatus = newCodecStatus; } if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ((("A2DP Codec Config: " + prevCodecConfig) + "->") + (newCodecStatus.getCodecConfig()))); for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsLocalCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("A2DP Codec Local Capability: " + codecConfig)); } for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsSelectableCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("A2DP Codec Selectable Capability: " + codecConfig)); } } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dp.ACTION_CODEC_CONFIG_CHANGED); intent.putExtra(BluetoothCodecStatus.EXTRA_CODEC_STATUS, mCodecStatus); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); if (((!(newCodecStatus.getCodecConfig().sameAudioFeedingParameters(prevCodecConfig))) && ((mCurrentDevice) != null)) && ((getCurrentState()) == (mConnected))) { intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mCurrentDevice); mAudioManager.handleBluetoothA2dpDeviceConfigChange(mCurrentDevice); } mService.sendBroadcast(intent, A2dpService.BLUETOOTH_PERM); }

boolean okToConnect(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.btservice.AdapterService adapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); int priority = mService.getPriority(device); if ((adapterService == null) || ((adapterService.isQuietModeEnabled()) && ((mTargetDevice) == null))) { return false; } if (((android.bluetooth.BluetoothProfile.PRIORITY_OFF) < priority) || (((android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED) == priority) && ((device.getBondState()) != (android.bluetooth.BluetoothDevice.BOND_NONE)))) { return true; } return false; }
@java.lang.Override public void dump(java.lang.StringBuilder sb) { super.dump(sb); if ((mStateMachine) != null) { mStateMachine.dump(sb); } if ((mAvrcp) != null) { mAvrcp.dump(sb); } }
@org.junit.Test public void testIncomingPriorityReject() { when(mA2dpService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_OFF); com.android.bluetooth.a2dp.A2dpStackEvent connStCh = new com.android.bluetooth.a2dp.A2dpStackEvent(A2dpStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED); connStCh.valueInt = A2dpStateMachine.CONNECTION_STATE_CONNECTED; connStCh.device = mTestDevice; mA2dpStateMachine.sendMessage(A2dpStateMachine.STACK_EVENT, connStCh); verify(mA2dpService, after(com.android.bluetooth.a2dp.A2dpStateMachineTest.TIMEOUT_MS).never()).sendBroadcast(any(android.content.Intent.class), anyString()); org.junit.Assert.assertTrue(((mA2dpStateMachine.getCurrentState()) instanceof com.android.bluetooth.a2dp.A2dpStateMachine.Disconnected)); }
@org.junit.Test public void testDefaultDisconnectedState() { org.junit.Assert.assertEquals(mA2dpStateMachine.getConnectionState(null), BluetoothProfile.STATE_DISCONNECTED); }
@org.junit.Test public void testOutgoingTimeout() { when(mA2dpService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_ON); when(mA2dpNativeInterface.connectA2dp(any(android.bluetooth.BluetoothDevice.class))).thenReturn(true); when(mA2dpNativeInterface.disconnectA2dp(any(android.bluetooth.BluetoothDevice.class))).thenReturn(true); mA2dpStateMachine.sendMessage(A2dpStateMachine.CONNECT, mTestDevice); org.mockito.ArgumentCaptor<android.content.Intent> intentArgument1 = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mA2dpService, timeout(com.android.bluetooth.a2dp.A2dpStateMachineTest.TIMEOUT_MS).times(1)).sendBroadcast(intentArgument1.capture(), anyString()); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, intentArgument1.getValue().getIntExtra(BluetoothProfile.EXTRA_STATE, (-1))); org.junit.Assert.assertTrue(((mA2dpStateMachine.getCurrentState()) instanceof com.android.bluetooth.a2dp.A2dpStateMachine.Pending)); org.mockito.ArgumentCaptor<android.content.Intent> intentArgument2 = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mA2dpService, timeout(((A2dpStateMachine.sConnectTimeoutMs) * 2)).times(2)).sendBroadcast(intentArgument2.capture(), anyString()); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, intentArgument2.getValue().getIntExtra(BluetoothProfile.EXTRA_STATE, (-1))); org.junit.Assert.assertTrue(((mA2dpStateMachine.getCurrentState()) instanceof com.android.bluetooth.a2dp.A2dpStateMachine.Disconnected)); }
public void setCodecConfigPreference(android.bluetooth.BluetoothCodecConfig codecConfig) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("setCodecConfigPreference(): " + (java.util.Objects.toString(codecConfig)))); } mStateMachine.setCodecConfigPreference(codecConfig); }
public void disableOptionalCodecs() { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, "disableOptionalCodecs()"); } mStateMachine.disableOptionalCodecs(); }
public void dump(java.lang.StringBuilder sb) { com.android.bluetooth.btservice.ProfileService.println(sb, ("mCurrentDevice: " + (mCurrentDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mTargetDevice: " + (mTargetDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mIncomingDevice: " + (mIncomingDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, ("mPlayingA2dpDevice: " + (mPlayingA2dpDevice))); com.android.bluetooth.btservice.ProfileService.println(sb, ("StateMachine: " + (this.toString()))); }
public void enableOptionalCodecs() { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, "enableOptionalCodecs()"); } mStateMachine.enableOptionalCodecs(); }
@java.lang.Override protected boolean cleanup() { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, "cleanup()"); } if ((mConnectionStateChangedReceiver) != null) { unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; } if ((mStateMachine) != null) { mStateMachine.cleanup(); mStateMachine = null; } if ((mAvrcp) != null) { mAvrcp.cleanup(); mAvrcp = null; } com.android.bluetooth.a2dp.A2dpService.clearA2dpService(); return true; }
void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { mStateMachine.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); }


public boolean connect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("connect(): " + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { return false; } android.os.ParcelUuid[] featureUuids = device.getUuids(); if ((android.bluetooth.BluetoothUuid.containsAnyUuid(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_UUID)) && (!(android.bluetooth.BluetoothUuid.containsAllUuids(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_SINK_UUIDS)))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, "Remote does not have A2dp Sink UUID"); return false; } int connectionState = mStateMachine.getConnectionState(device); if ((connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) || (connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mStateMachine.sendMessage(A2dpStateMachine.CONNECT, device); return true; }
@java.lang.Override public void getDataCallList(int slotId, android.telephony.data.IDataServiceCallback callback) { mHandler.obtainMessage(android.telephony.data.DataService.DATA_SERVICE_REQUEST_GET_DATA_CALL_LIST, slotId, 0, callback).sendToTarget(); }
public static void doTest() { art.Test983.Transform abc = new art.Test983.Transform(); art.Redefinition.enableCommonRetransformation(true); art.Redefinition.doCommonClassRetransformation(art.Test983.Transform.class); art.Redefinition.doCommonClassRetransformation(java.lang.Object.class); art.Redefinition.enableCommonRetransformation(false); }
public static void run() { art.Test983.doTest(); }
com.android.server.connectivity.NetworkAgentInfo makeNai(int netId, int score, boolean ipv4, boolean ipv6, long transports) { com.android.server.connectivity.NetworkAgentInfo nai = mock(com.android.server.connectivity.NetworkAgentInfo.class); when(nai.network()).thenReturn(new android.net.Network(netId)); when(nai.getCurrentScore()).thenReturn(score); nai.linkProperties = new android.net.LinkProperties(); nai.networkCapabilities = new android.net.NetworkCapabilities(); for (int t : com.android.internal.util.BitUtils.unpackBits(transports)) { nai.networkCapabilities.addTransportType(t); } if (ipv4) { nai.linkProperties.addLinkAddress(new android.net.LinkAddress("192.0.2.12/24")); nai.linkProperties.addRoute(new android.net.RouteInfo(new android.net.IpPrefix("0.0.0.0/0"))); } if (ipv6) { nai.linkProperties.addLinkAddress(new android.net.LinkAddress("2001:db8:dead:beef:f00::a0/64")); nai.linkProperties.addRoute(new android.net.RouteInfo(new android.net.IpPrefix("::/0"))); } return nai; }





private int checkSourceAddress() { for (java.net.InetAddress address : mNai.linkProperties.getAddresses()) { if (address.equals(mPacket.srcAddress)) { return SUCCESS; } } return ERROR_INVALID_IP_ADDRESS; }

private int isValid() { synchronized(mNai) { int error = checkInterval(); if (error == (SUCCESS)) error = checkNetworkConnected(); if (error == (SUCCESS)) error = checkSourceAddress(); return error; } }
int startWifiIPPacketOffload(int slot, android.net.KeepalivePacketData packetData, int intervalSeconds) { int ret = mWifiNative.startSendingOffloadedPacket(slot, packetData, (intervalSeconds * 1000)); if (ret != 0) { loge(((((("startWifiIPPacketOffload(" + slot) + ", ") + intervalSeconds) + "): hardware error ") + ret)); return ConnectivityManager.PacketKeepalive.ERROR_HARDWARE_ERROR; } else { return ConnectivityManager.PacketKeepalive.SUCCESS; } }
public java.lang.String toString() { return new java.lang.StringBuffer("KeepaliveInfo [").append(" network=").append(mNai.network).append(" isStarted=").append(isStarted).append(" ").append(android.net.util.IpUtils.addressAndPortToString(mPacket.srcAddress, mPacket.srcPort)).append("->").append(android.net.util.IpUtils.addressAndPortToString(mPacket.dstAddress, mPacket.dstPort)).append((" interval=" + (mInterval))).append((" data=" + (com.android.internal.util.HexDump.toHexString(mPacket.data)))).append(" uid=").append(mUid).append(" pid=").append(mPid).append(" ]").toString(); }
public void startNattKeepalive(com.android.server.connectivity.NetworkAgentInfo nai, int intervalSeconds, android.os.Messenger messenger, android.os.IBinder binder, java.lang.String srcAddrString, int srcPort, java.lang.String dstAddrString, int dstPort) { if (nai == null) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_NETWORK); return; } java.net.InetAddress srcAddress; java.net.InetAddress dstAddress; try { srcAddress = android.net.NetworkUtils.numericToInetAddress(srcAddrString); dstAddress = android.net.NetworkUtils.numericToInetAddress(dstAddrString); } catch (java.lang.IllegalArgumentException e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_IP_ADDRESS); return; } android.net.KeepalivePacketData packet; try { packet = android.net.KeepalivePacketData.nattKeepalivePacket(srcAddress, srcPort, dstAddress, com.android.server.connectivity.NATT_PORT); } catch (android.net.KeepalivePacketData e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, e.error); return; } com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo ki = new com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo(messenger, binder, nai, packet, intervalSeconds); android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, ("Created keepalive: " + (ki.toString()))); mConnectivityServiceHandler.obtainMessage(NetworkAgent.CMD_START_PACKET_KEEPALIVE, ki).sendToTarget(); }
private int checkNetworkConnected() { if (!(mNai.networkInfo.isConnectedOrConnecting())) { return ERROR_INVALID_NETWORK; } return SUCCESS; }
public void startKeepaliveResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, android.hardware.radio.V1_1.KeepaliveStatus keepaliveStatus) { throw new java.lang.UnsupportedOperationException("startKeepaliveResponse not implemented"); }
public static android.net.KeepalivePacketData nattKeepalivePacket(java.net.InetAddress srcAddress, int srcPort, java.net.InetAddress dstAddress, int dstPort) throws android.net.KeepalivePacketData.InvalidPacketException { if ((!(srcAddress instanceof java.net.Inet4Address)) || (!(dstAddress instanceof java.net.Inet4Address))) { throw new android.net.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_IP_ADDRESS); } if (dstPort != (NATT_PORT)) { throw new android.net.KeepalivePacketData.InvalidPacketException(ERROR_INVALID_PORT); } int length = ((android.net.KeepalivePacketData.IPV4_HEADER_LENGTH) + (android.net.KeepalivePacketData.UDP_HEADER_LENGTH)) + 1; java.nio.ByteBuffer buf = java.nio.ByteBuffer.allocate(length); buf.order(java.nio.ByteOrder.BIG_ENDIAN); buf.putShort(((short) (17664))); buf.putShort(((short) (length))); buf.putInt(0); buf.put(((byte) (64))); buf.put(((byte) (OsConstants.IPPROTO_UDP))); int ipChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(srcAddress.getAddress()); buf.put(dstAddress.getAddress()); buf.putShort(((short) (srcPort))); buf.putShort(((short) (dstPort))); buf.putShort(((short) (length - 20))); int udpChecksumOffset = buf.position(); buf.putShort(((short) (0))); buf.put(((byte) (255))); buf.putShort(ipChecksumOffset, android.net.util.IpUtils.ipChecksum(buf, 0)); buf.putShort(udpChecksumOffset, android.net.util.IpUtils.udpChecksum(buf, 0, android.net.KeepalivePacketData.IPV4_HEADER_LENGTH)); return new android.net.KeepalivePacketData(srcAddress, srcPort, dstAddress, dstPort, buf.array()); }
public void update(com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccSlotStatus iss) { log("slotStatus update"); synchronized(mLock) { mCi = ci; if ((iss.slotState) == (IccSlotStatus.SlotState.SLOTSTATE_INACTIVE)) { if (mActive) { mActive = false; onRadioStateUnavailable(); } parseAtr(iss.atr); mCardState = iss.cardState; mIccId = iss.iccid; } else if ((!(mActive)) && ((iss.slotState) == (IccSlotStatus.SlotState.SLOTSTATE_ACTIVE))) { mActive = true; } } }
public void onRadioStateUnavailable() { if ((mUiccCard) != null) { mUiccCard.dispose(); } mUiccCard = null; mCardState = com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT; mLastRadioState = com.android.internal.telephony.CommandsInterface.RadioState.RADIO_UNAVAILABLE; }










public void open(java.lang.String closer) { if (closer == null) { throw new java.lang.NullPointerException("closer == null"); } if (((this) == (dalvik.system.CloseGuard.NOOP)) || (!(dalvik.system.CloseGuard.ENABLED))) { return; } java.lang.String message = ("Explicit termination method '" + closer) + "' not called"; allocationSite = new java.lang.Throwable(message); dalvik.system.CloseGuard.currentTracker.open(allocationSite); }
public static void setReporter(dalvik.system.CloseGuard.Reporter reporter) { if (reporter == null) { throw new java.lang.NullPointerException("reporter == null"); } dalvik.system.CloseGuard.REPORTER = reporter; }
public void close() { dalvik.system.CloseGuard.currentTracker.close(allocationSite); allocationSite = null; }
public void warnIfOpen() { if (((allocationSite) == null) || (!(dalvik.system.CloseGuard.ENABLED))) { return; } java.lang.String message = "A resource was acquired at attached stack trace but never released. " + "See java.io.Closeable for information on avoiding resource leaks."; dalvik.system.CloseGuard.REPORTER.report(message, allocationSite); }
public static boolean isEnabled() { return dalvik.system.CloseGuard.ENABLED; }
public static void setEnabled(boolean enabled) { dalvik.system.CloseGuard.ENABLED = enabled; }

void messageFromNative(com.android.bluetooth.hfp.HeadsetStackEvent stackEvent) { if ((stackEvent.device) == null) { android.util.Log.wtfStack(com.android.bluetooth.hfp.HeadsetService.TAG, ("messageFromNative, device is null, event: " + stackEvent)); return; } synchronized(mStateMachines) { com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(stackEvent.device); if ((stackEvent.type) == (HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED)) { switch (stackEvent.valueInt) { case HeadsetHalConstants.CONNECTION_STATE_CONNECTED : case HeadsetHalConstants.CONNECTION_STATE_CONNECTING : { if (stateMachine == null) { stateMachine = com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().makeStateMachine(stackEvent.device, mStateMachinesThread.getLooper(), this, mNativeInterface, mSystemInterface); mStateMachines.put(stackEvent.device, stateMachine); } break; } } } else if (stateMachine == null) { android.util.Log.wtfStack(com.android.bluetooth.hfp.HeadsetService.TAG, ("State machine not found for stack event: " + stackEvent)); return; } stateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, stackEvent); } }


@java.lang.Override public void tearDown() throws java.lang.Exception { mJobScheduler.cancel(android.jobscheduler.cts.ConnectivityConstraintTest.CONNECTIVITY_JOB_ID); if ((mWifiManager.isWifiEnabled()) == (mInitialWiFiState)) { return; } android.net.NetworkInfo.State expectedState = (mInitialWiFiState) ? NetworkInfo.State.CONNECTED : NetworkInfo.State.DISCONNECTED; android.jobscheduler.cts.ConnectivityConstraintTest.ConnectivityActionReceiver receiver = new android.jobscheduler.cts.ConnectivityConstraintTest.ConnectivityActionReceiver(android.net.ConnectivityManager.TYPE_WIFI, expectedState); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION); mContext.registerReceiver(receiver, filter); assertTrue(mWifiManager.setWifiEnabled(mInitialWiFiState)); receiver.waitForStateChange(); assertTrue("Failure to restore previous WiFi state", ((mWifiManager.isWifiEnabled()) == (mInitialWiFiState))); mContext.unregisterReceiver(receiver); }
@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, result); if ((mDcResponse) == null) { try { mDcResponse = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, "IP", "rmnet_data7", java.util.Arrays.asList(new android.net.LinkAddress("12.34.56.78/32")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("98.76.54.32")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("11.22.33.44")), null, 1440); } catch (java.lang.Exception e) { } } if (mDcSuccess) { resultSuccess(result, mDcResponse); } else { resultFail(result, mDcResponse, new java.lang.RuntimeException("Setup data call failed!")); } }
public void writeRilDeactivateDataCall(int phoneId, int rilSerial, int cid, int reason) { com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall deactivateDataCall = new com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall(); deactivateDataCall.cid = cid; deactivateDataCall.reason = reason + 1; addTelephonyEvent(new com.android.internal.telephony.metrics.TelephonyEventBuilder(phoneId).setDeactivateDataCall(deactivateDataCall).build()); }
void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result);


















public static void init(android.preference.PreferenceScreen prefScreen, com.android.phone.SubscriptionInfoHelper subInfoHelper) { android.preference.Preference callForwardingPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_FORWARDING_KEY); callForwardingPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallForwardOptions.class)); android.preference.Preference additionalGsmSettingsPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.ADDITIONAL_GSM_SETTINGS_KEY); additionalGsmSettingsPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsAdditionalCallOptions.class)); }










@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println("Skipping dump in APP SERVICES, see bluetooth_manager section."); writer.println("Use --print argument for dumpsys direct from AdapterService."); return; } verboseLog(("dumpsys arguments, check for protobuf output: " + (android.text.TextUtils.join(" ", args)))); if (args[0].startsWith("--proto")) { if (args[0].equals("--proto-java-bin")) { dumpJava(fd); } else { dumpNative(fd, args); } return; } writer.println("Bonded devices:"); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println((((((" " + (device.getAddress())) + " [") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + "] ") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }
private void dumpJava(java.io.FileDescriptor fd) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog log = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); log.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dumpProto(log); } try { java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd); java.lang.String protoOutString = android.util.Base64.encodeToString(log.toByteArray(), Base64.DEFAULT); protoOut.write(protoOutString.getBytes(java.nio.charset.StandardCharsets.UTF_8)); protoOut.close(); } catch (java.io.IOException e) { errorLog("Unable to write Java protobuf to file descriptor."); } }
public static long getMobileRxPackets() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { total += android.net.TrafficStats.getRxPackets(iface); } return total; }
public static long getMobileRxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { total += android.net.TrafficStats.getRxBytes(iface); } return total; }
public static long getMobileTxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { total += android.net.TrafficStats.getTxBytes(iface); } return total; }
public static long getMobileTxPackets() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { total += android.net.TrafficStats.getTxPackets(iface); } return total; }


private void sendNfcEeAccessProtectedBroadcast(android.content.Intent intent) { intent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES); mNfcDispatcher.resumeAppSwitches(); java.util.ArrayList<java.lang.String> matchingPackages = new java.util.ArrayList<java.lang.String>(); java.util.ArrayList<java.lang.String> preferredPackages = new java.util.ArrayList<java.lang.String>(); synchronized(this) { for (android.content.pm.PackageInfo pkg : mInstalledPackages) { if ((pkg != null) && ((pkg.applicationInfo) != null)) { if (mNfceeAccessControl.check(pkg.applicationInfo)) { matchingPackages.add(pkg.packageName); if (((mCardEmulationManager) != null) && (mCardEmulationManager.packageHasPreferredService(pkg.packageName))) { preferredPackages.add(pkg.packageName); } } } } if ((preferredPackages.size()) > 0) { for (java.lang.String packageName : preferredPackages) { intent.setPackage(packageName); mContext.sendBroadcast(intent); } } else { for (java.lang.String packageName : matchingPackages) { intent.setPackage(packageName); mContext.sendBroadcast(intent); } } } }
void updatePackageCache() { android.content.pm.PackageManager pm = mContext.getPackageManager(); java.util.List<android.content.pm.PackageInfo> packages = pm.getInstalledPackagesAsUser(0, UserHandle.USER_SYSTEM); synchronized(this) { mInstalledPackages = packages; } }
private void initNetworkCapabilities() { mNetworkCapabilities = new android.net.NetworkCapabilities(); mNetworkCapabilities.addTransportType(NetworkCapabilities.TRANSPORT_ETHERNET); mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET); mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); mNetworkCapabilities.setLinkUpstreamBandwidthKbps((100 * 1000)); mNetworkCapabilities.setLinkDownstreamBandwidthKbps((100 * 1000)); }
void onIpLayerStarted(android.net.LinkProperties linkProperties) { if ((mNetworkAgent) != null) { android.util.Log.e(com.android.server.ethernet.EthernetNetworkFactory.TAG, "Already have a NetworkAgent - aborting new request"); stopIpManager(); return; } mLinkProperties = linkProperties; mNetworkInfo.setDetailedState(DetailedState.CONNECTED, null, mHwAddr); mNetworkAgent = new android.net.NetworkAgent(mHandler.getLooper(), mContext, com.android.server.ethernet.EthernetNetworkFactory.NETWORK_TYPE, mNetworkInfo, mNetworkCapabilities, mLinkProperties, com.android.server.ethernet.EthernetNetworkFactory.NETWORK_SCORE) { public void unwanted() { if ((this) == (mNetworkAgent)) { stopIpManager(); } else if ((mNetworkAgent) != null) { android.util.Log.d(com.android.server.ethernet.EthernetNetworkFactory.TAG, ("Ignoring unwanted as we have a more modern " + "instance")); } } }; }
public void updateAgent() { if ((mNetworkAgent) == null) return; if (com.android.server.ethernet.EthernetNetworkFactory.DBG) { android.util.Log.i(com.android.server.ethernet.EthernetNetworkFactory.TAG, ((((("Updating mNetworkAgent with: " + (mNetworkCapabilities)) + ", ") + (mNetworkInfo)) + ", ") + (mLinkProperties))); } mNetworkAgent.sendNetworkCapabilities(mNetworkCapabilities); mNetworkAgent.sendNetworkInfo(mNetworkInfo); mNetworkAgent.sendLinkProperties(mLinkProperties); mNetworkAgent.sendNetworkScore((mLinkUp ? com.android.server.ethernet.EthernetNetworkFactory.NETWORK_SCORE : 0)); }
private void postAndWaitForRunnable(java.lang.Runnable r) throws java.lang.InterruptedException { java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1); mHandler.post(() -> { try { r.run(); } finally { latch.countDown(); } }); latch.await(); }



public void startIpManager() { if (com.android.server.ethernet.EthernetNetworkFactory.DBG) { android.util.Log.d(com.android.server.ethernet.EthernetNetworkFactory.TAG, java.lang.String.format("starting IpManager(%s): mNetworkInfo=%s", mIface, mNetworkInfo)); } android.net.IpConfiguration config = mEthernetManager.getConfiguration(); mNetworkInfo.setDetailedState(DetailedState.OBTAINING_IPADDR, null, mHwAddr); android.net.ip.IpManager.Callback ipmCallback = new android.net.ip.IpManager.Callback() { @java.lang.Override public void onProvisioningSuccess(android.net.LinkProperties newLp) { mHandler.post(() -> onIpLayerStarted(newLp)); } @java.lang.Override public void onProvisioningFailure(android.net.LinkProperties newLp) { mHandler.post(() -> onIpLayerStopped(newLp)); } @java.lang.Override public void onLinkPropertiesChange(android.net.LinkProperties newLp) { mHandler.post(() -> updateLinkProperties(newLp)); } }; stopIpManager(); mIpManager = new android.net.ip.IpManager(mContext, mIface, ipmCallback); if (((config.getProxySettings()) == (android.net.IpConfiguration.ProxySettings.STATIC)) || ((config.getProxySettings()) == (android.net.IpConfiguration.ProxySettings.PAC))) { mIpManager.setHttpProxy(config.getHttpProxy()); } final java.lang.String tcpBufferSizes = mContext.getResources().getString(com.android.internal.R.string.config_ethernet_tcp_buffers); if (!(android.text.TextUtils.isEmpty(tcpBufferSizes))) { mIpManager.setTcpBufferSizes(tcpBufferSizes); } final android.net.ip.IpManager.ProvisioningConfiguration provisioningConfiguration; if ((config.getIpAssignment()) == (android.net.IpConfiguration.IpAssignment.STATIC)) { provisioningConfiguration = android.net.ip.IpManager.buildProvisioningConfiguration().withStaticConfiguration(config.getStaticIpConfiguration()).build(); } else { provisioningConfiguration = mIpManager.buildProvisioningConfiguration().withProvisioningTimeoutMs(0).build(); } mIpManager.startProvisioning(provisioningConfiguration); }
public void stop() { stopIpManager(); setInterfaceInfo("", null); mFactory.unregister(); }
@java.lang.Override public void interfaceRemoved(java.lang.String iface) { mHandler.post(() -> { if (stopTrackingInterface(iface)) { trackFirstAvailableInterface(); } }); }

public void writeIpAndProxyConfigurations(android.net.IpConfiguration config) { android.util.SparseArray<android.net.IpConfiguration> networks = new android.util.SparseArray<android.net.IpConfiguration>(); networks.put(0, config); writeIpAndProxyConfigurations(com.android.server.ethernet.EthernetConfigStore.ipConfigFile, networks); }
public void load() { mIpConfiguration = mEthernetManager.getConfiguration(); }
void dump(java.io.FileDescriptor fd, com.android.internal.util.IndentingPrintWriter pw, java.lang.String[] args) { try { postAndWaitForRunnable(() -> { pw.println(("Network Requested: " + (mNetworkRequested))); if (isTrackingInterface()) { pw.println(("Tracking interface: " + (mIface))); pw.increaseIndent(); pw.println(("MAC address: " + (mHwAddr))); pw.println(("Link state: " + (mLinkUp ? "up" : "down"))); pw.decreaseIndent(); } else { pw.println("Not tracking any interface"); } pw.println(); pw.println(("NetworkInfo: " + (mNetworkInfo))); pw.println(("LinkProperties: " + (mLinkProperties))); pw.println(("NetworkAgent: " + (mNetworkAgent))); if ((mIpManager) != null) { pw.println("IpManager:"); pw.increaseIndent(); mIpManager.dump(fd, pw, args); pw.decreaseIndent(); } }); } catch (java.lang.InterruptedException e) { throw new java.lang.IllegalStateException("dump() interrupted"); } }
public void writeIpAndProxyConfigurations(java.lang.String filePath, final android.util.SparseArray<android.net.IpConfiguration> networks) { mWriter.write(filePath, new com.android.server.net.DelayedDiskWrite.Writer() { public void onWriteCalled(java.io.DataOutputStream out) throws java.io.IOException { out.writeInt(com.android.server.net.IpConfigStore.IPCONFIG_FILE_VERSION); for (int i = 0; i < (networks.size()); i++) { com.android.server.net.IpConfigStore.writeConfig(out, networks.keyAt(i), networks.valueAt(i)); } } }); }
public android.net.IpConfiguration readIpAndProxyConfigurations() { android.util.SparseArray<android.net.IpConfiguration> networks = readIpAndProxyConfigurations(com.android.server.ethernet.EthernetConfigStore.ipConfigFile); if ((networks.size()) == 0) { android.util.Log.w(com.android.server.ethernet.EthernetConfigStore.TAG, "No Ethernet configuration found. Using default."); return new android.net.IpConfiguration(android.net.IpConfiguration.IpAssignment.DHCP, android.net.IpConfiguration.ProxySettings.NONE, null, null); } if ((networks.size()) > 1) { android.util.Log.w(com.android.server.ethernet.EthernetConfigStore.TAG, "Multiple Ethernet configurations detected. Only reading first one."); } return networks.valueAt(0); }








private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app != null) && (isSupportedApplication(app))) && (!(app.isReady()))) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log("areAllApplicationsReady: return false"); return false; } } if (com.android.internal.telephony.uicc.UiccProfile.VDBG) { log(("areAllApplicationsReady: outside loop, return " + ((mUiccApplications[0]) != null))); } return (mUiccApplications[0]) != null; }
private boolean areAllRecordsLoaded() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if ((app != null) && (isSupportedApplication(app))) { com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if ((ir == null) || (!(ir.isLoaded()))) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log("areAllRecordsLoaded: return false"); return false; } } } if (com.android.internal.telephony.uicc.UiccProfile.VDBG) { log(("areAllRecordsLoaded: outside loop, return " + ((mUiccApplications[0]) != null))); } return (mUiccApplications[0]) != null; }



private void broadcastConnectionState(android.bluetooth.BluetoothDevice device, int newState) { java.lang.Integer prevStateInteger = mInputDevices.get(device); int prevState = (prevStateInteger == null) ? android.bluetooth.BluetoothHidHost.STATE_DISCONNECTED : prevStateInteger; if (prevState == newState) { android.util.Log.w(com.android.bluetooth.hid.HidHostService.TAG, ("no state change: " + newState)); return; } mInputDevices.put(device, newState); log(((((("Connection state " + device) + ": ") + prevState) + "->") + newState)); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHidHost.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); sendBroadcastAsUser(intent, UserHandle.ALL, com.android.bluetooth.hid.BLUETOOTH_PERM); }
private boolean supportsConditionProviders() { android.app.ActivityManager am = ((android.app.ActivityManager) (mContext.getSystemService(Context.ACTIVITY_SERVICE))); return !(am.isLowRamDevice()); }

public final void onSmsStatusReportReceived(int messageRef, java.lang.String format, byte[] pdu) { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.IllegalStateException("Feature not ready."); } try { mListener.onSmsStatusReportReceived(messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.internal.SmsImplBase.LOG_TAG, ("Can not process sms status report: " + (e.getMessage()))); acknowledgeSmsReport(messageRef, android.telephony.ims.internal.SmsImplBase.STATUS_REPORT_STATUS_ERROR); } } }
public void acknowledgeSms(int messageRef, @android.telephony.ims.internal.SmsImplBase.DeliverStatusResult int result) { }
public final void onSmsReceived(java.lang.String format, byte[] pdu) throws java.lang.IllegalStateException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.IllegalStateException("Feature not ready."); } try { mListener.onSmsReceived(format, pdu); acknowledgeSms((-1), android.telephony.ims.internal.SmsImplBase.DELIVER_STATUS_OK); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.internal.SmsImplBase.LOG_TAG, ("Can not deliver sms: " + (e.getMessage()))); acknowledgeSms((-1), android.telephony.ims.internal.SmsImplBase.DELIVER_STATUS_ERROR); } } }

private void acknowledgeSms(int messageRef, @android.telephony.ims.internal.SmsImplBase.DeliverStatusResult int result) { getSmsImplementation().acknowledgeSms(messageRef, result); }

@java.lang.Override public void onCreate() { android.util.Log.i(com.android.phone.testapps.imstestapp.TestImsService.LOG_TAG, "TestImsService: onCreate"); mImsRegistration = com.android.phone.testapps.imstestapp.TestImsRegistrationImpl.getInstance(); mTestMmTelFeature = com.android.phone.testapps.imstestapp.TestMmTelFeatureImpl.getInstance(); mTestRcsFeature = new com.android.phone.testapps.imstestapp.TestRcsFeatureImpl(); com.android.phone.testapps.imstestapp.TestImsService.mInstance = this; }

private void acknowledgeSmsReport(int messageRef, @android.telephony.ims.internal.SmsImplBase.StatusReportResult int result) { getSmsImplementation().acknowledgeSmsReport(messageRef, result); }
@java.lang.Override public com.android.ims.internal.IImsRcsFeature createRcsFeature(int slotId, com.android.ims.internal.IImsFeatureStatusCallback c) { return createRcsFeatureInternal(slotId, c); }
@java.lang.Override public int setProvisionedValue(int item, int value) throws android.os.RemoteException { return ImsConfig.OperationStatusConstants.SUCCESS; }
@java.lang.Override public int setProvisionedStringValue(int item, java.lang.String value) throws android.os.RemoteException { return ImsConfig.OperationStatusConstants.SUCCESS; }
@java.lang.Override public void getFeatureValue(int feature, int network, com.android.ims.ImsConfigListener listener) throws android.os.RemoteException { listener.onGetFeatureResponse(feature, network, ImsConfig.FeatureValueConstants.ON, ImsConfig.OperationStatusConstants.SUCCESS); }


public void sendSms(int messageRef, java.lang.String format, java.lang.String smsc, boolean isRetry, byte[] pdu) { try { onSendSmsResult(messageRef, android.telephony.ims.internal.SmsImplBase.SEND_STATUS_ERROR, SmsManager.RESULT_ERROR_GENERIC_FAILURE); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.internal.SmsImplBase.LOG_TAG, ("Can not send sms: " + (e.getMessage()))); } }
public void acknowledgeSmsReport(int messageRef, @android.telephony.ims.internal.SmsImplBase.StatusReportResult int result) { }
public final void onSendSmsResult(int messageRef, @android.telephony.ims.internal.SmsImplBase.SendStatusResult int status, int reason) throws android.os.RemoteException, java.lang.IllegalStateException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.IllegalStateException("Feature not ready."); } mListener.onSendSmsResult(messageRef, status, reason); } }
public void startMonitoringImsService() { if ((getPhoneType()) == (PhoneConstants.PHONE_TYPE_SIP)) { return; } synchronized(com.android.internal.telephony.Phone.lockForRadioTechnologyChange) { android.content.IntentFilter filter = new android.content.IntentFilter(); com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, getPhoneId()); if ((imsManager != null) && (!(imsManager.isDynamicBinding()))) { filter.addAction(ImsManager.ACTION_IMS_SERVICE_UP); filter.addAction(ImsManager.ACTION_IMS_SERVICE_DOWN); } filter.addAction(ImsConfig.ACTION_IMS_CONFIG_CHANGED); mContext.registerReceiver(mImsIntentReceiver, filter); if (imsManager != null) { if ((imsManager.isDynamicBinding()) || (imsManager.isServiceAvailable())) { mImsServiceReady = true; updateImsPhone(); } } } }


@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testDontBindWhenNullCarrierPackage() throws android.os.RemoteException { setupResolver(1); java.util.List<android.content.pm.ResolveInfo> info = new java.util.ArrayList<>(); java.util.Set<java.lang.String> features = new java.util.HashSet<>(); features.add(ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); info.add(getResolveInfo(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, true)); when(mMockPM.queryIntentServicesAsUser(any(), anyInt(), anyInt())).thenReturn(info); com.android.internal.telephony.ims.ImsServiceController controller = mock(com.android.internal.telephony.ims.ImsServiceController.class); mTestImsResolver.setImsServiceControllerFactory(( context, componentName) -> { when(controller.getComponentName()).thenReturn(componentName); return controller; }); setConfigCarrierString(0, null); mTestImsResolver.populateCacheAndStartBind(); waitForHandlerAction(mTestImsResolver.getHandler(), com.android.internal.telephony.ims.ImsResolverTest.TEST_TIMEOUT); verify(controller, never()).bind(any()); verify(controller, never()).unbind(); }


private void stopListeningForCalls() { try { resetImsCapabilities(); if (((mImsManager) != null) && ((mServiceId) > 0)) { mImsManager.close(mServiceId); mServiceId = -1; } } catch (com.android.ims.ImsException e) { } }
private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController1, com.android.internal.telephony.ims.ImsServiceController carrierController2) { mTestImsResolver.setImsServiceControllerFactory(( context, componentName) -> { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(deviceController.getComponentName()).thenReturn(componentName); return deviceController; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController1.getComponentName()).thenReturn(componentName); return carrierController1; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_2_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController2.getComponentName()).thenReturn(componentName); return carrierController2; } return null; }); }
private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController) { mTestImsResolver.setImsServiceControllerFactory(( context, componentName) -> { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(deviceController.getComponentName()).thenReturn(componentName); return deviceController; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController.getComponentName()).thenReturn(componentName); return carrierController; } return null; }); }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) return true; if ((o == null) || ((getClass()) != (o.getClass()))) return false; com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo that = ((com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo) (o)); if ((name) != null ? !(name.equals(that.name)) : (that.name) != null) return false; return (supportedFeatures) != null ? supportedFeatures.equals(that.supportedFeatures) : (that.supportedFeatures) == null; }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.telephony.Rlog.d(com.android.internal.telephony.Phone.LOG_TAG, ("mImsIntentReceiver: action " + (intent.getAction()))); if (intent.hasExtra(ImsManager.EXTRA_PHONE_ID)) { int extraPhoneId = intent.getIntExtra(ImsManager.EXTRA_PHONE_ID, SubscriptionManager.INVALID_PHONE_INDEX); android.telephony.Rlog.d(com.android.internal.telephony.Phone.LOG_TAG, ("mImsIntentReceiver: extraPhoneId = " + extraPhoneId)); if ((extraPhoneId == (android.telephony.SubscriptionManager.INVALID_PHONE_INDEX)) || (extraPhoneId != (getPhoneId()))) { return; } } synchronized(com.android.internal.telephony.Phone.lockForRadioTechnologyChange) { if (intent.getAction().equals(ImsManager.ACTION_IMS_SERVICE_UP)) { mImsServiceReady = true; updateImsPhone(); com.android.ims.ImsManager.getInstance(mContext, mPhoneId).updateImsServiceConfig(false); } else if (intent.getAction().equals(ImsManager.ACTION_IMS_SERVICE_DOWN)) { mImsServiceReady = false; updateImsPhone(); } else if (intent.getAction().equals(ImsConfig.ACTION_IMS_CONFIG_CHANGED)) { int item = intent.getIntExtra(ImsConfig.EXTRA_CHANGED_ITEM, (-1)); java.lang.String value = intent.getStringExtra(ImsConfig.EXTRA_NEW_VALUE); com.android.ims.ImsManager.onProvisionedValueChanged(context, item, value); } } }
private void startListeningForCalls() throws com.android.ims.ImsException { mImsServiceRetryCount = 0; mServiceId = mImsManager.open(ImsServiceClass.MMTEL, createIncomingCallPendingIntent(), mImsConnectionStateListener); mImsManager.setImsConfigListener(mImsConfigListener); getEcbmInterface().setEcbmStateListener(mPhone.getImsEcbmStateListener()); if (mPhone.isInEcm()) { mPhone.exitEmergencyCallbackMode(); } int mPreferredTtyMode = Settings.Secure.getInt(mPhone.getContext().getContentResolver(), Settings.Secure.PREFERRED_TTY_MODE, Phone.TTY_MODE_OFF); mImsManager.setUiTTYMode(mPhone.getContext(), mPreferredTtyMode, null); com.android.ims.ImsMultiEndpoint multiEndpoint = getMultiEndpointInterface(); if (multiEndpoint != null) { multiEndpoint.setExternalCallStateListener(mPhone.getExternalCallTracker().getExternalCallStateListener()); } mUtInterface = getUtInterface(); if ((mUtInterface) != null) { mUtInterface.registerForSuppServiceIndication(this, com.android.internal.telephony.imsphone.ImsPhoneCallTracker.EVENT_SUPP_SERVICE_INDICATION, null); } if (mCarrierConfigLoaded) { mImsManager.updateImsServiceConfig(true); } }
@java.lang.Override public android.telephony.ims.feature.MMTelFeature onCreateEmergencyMMTelImsFeature(int slotId) { return null; }






@java.lang.Override public boolean getVolteProvisioned() throws android.os.RemoteException { return false; }

@java.lang.Override public android.telephony.ims.feature.MMTelFeature onCreateMMTelImsFeature(int slotId) { return mSpyMMTelFeature; }
@android.support.test.filters.FlakyTest @org.junit.Test public void testBindService() { java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> testFeatures = new java.util.HashSet<>(); testFeatures.add(new android.util.Pair(1, 1)); testFeatures.add(new android.util.Pair(1, 2)); org.mockito.ArgumentCaptor<android.content.Intent> intentCaptor = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); junit.framework.Assert.assertTrue(mTestImsServiceController.bind(testFeatures)); int expectedFlags = ((android.content.Context.BIND_AUTO_CREATE) | (android.content.Context.BIND_FOREGROUND_SERVICE)) | (android.content.Context.BIND_IMPORTANT); verify(mMockContext).bindService(intentCaptor.capture(), any(), eq(expectedFlags)); android.content.Intent testIntent = intentCaptor.getValue(); junit.framework.Assert.assertEquals(ImsResolver.SERVICE_INTERFACE, testIntent.getAction()); junit.framework.Assert.assertEquals(mTestComponentName, testIntent.getComponent()); }

private void launchInputActivity(int slotId) { android.content.Intent newIntent = new android.content.Intent(android.content.Intent.ACTION_VIEW); java.lang.String targetActivity = com.android.stk.StkAppService.STK_INPUT_ACTIVITY_NAME; java.lang.String uriString = (com.android.stk.StkAppService.STK_INPUT_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("launchInputActivity, slotId: " + slotId)); newIntent.setFlags(((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId)))); newIntent.setClassName(com.android.stk.StkAppService.PACKAGE_NAME, targetActivity); newIntent.putExtra("INPUT", mStkContext[slotId].mCurrentCmd.geInput()); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); newIntent.setData(uriData); mContext.startActivity(newIntent); }

private void launchTextDialog(int slotId) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("launchTextDialog, slotId: " + slotId)); android.content.Intent newIntent = new android.content.Intent(); java.lang.String targetActivity = com.android.stk.StkAppService.STK_DIALOG_ACTIVITY_NAME; int action = getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId); java.lang.String uriString = (com.android.stk.StkAppService.STK_DIALOG_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); if (newIntent != null) { newIntent.setClassName(com.android.stk.StkAppService.PACKAGE_NAME, targetActivity); newIntent.setFlags((((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId)))); newIntent.setData(uriData); newIntent.putExtra("TEXT", mStkContext[slotId].mCurrentCmd.geTextMessage()); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); startActivity(newIntent); if (!(mStkContext[slotId].mCurrentCmd.geTextMessage().responseNeeded)) { sendResponse(com.android.stk.StkAppService.RES_ID_CONFIRM, slotId, true); } } }
public int getCarrierPrivilegeStatus(android.content.pm.PackageManager packageManager, java.lang.String packageName) { try { if (!(hasCarrierPrivilegeRules())) { int state = mState.get(); if (state == (com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.STATE_LOADING)) { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED; } else if (state == (com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.STATE_ERROR)) { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_ERROR_LOADING_RULES; } return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_NO_ACCESS; } android.content.pm.PackageInfo pInfo = packageManager.getPackageInfo(packageName, ((android.content.pm.PackageManager.GET_SIGNATURES) | (android.content.pm.PackageManager.MATCH_DISABLED_UNTIL_USED_COMPONENTS))); return getCarrierPrivilegeStatus(pInfo); } catch (android.content.pm.PackageManager ex) { android.telephony.Rlog.e(com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.LOG_TAG, "NameNotFoundException", ex); } return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_NO_ACCESS; }
@org.junit.After public void tearDown() throws java.lang.Exception { stopService(); mTargetContext.unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedQueue.clear(); }
@org.junit.After public void tearDown() throws java.lang.Exception { mService = null; mAdapter = null; }
@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(eq(com.android.bluetooth.hfp.HeadsetService.class.getName()), eq(BluetoothAdapter.STATE_OFF)); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService); mStateMachines.clear(); mCurrentDevice = null; }
public void testRegisterAppConfiguration() { com.android.bluetooth.hdp.HealthService testService = new com.android.bluetooth.hdp.HealthService(); testService.attach(getInstrumentation().getContext(), null, null, null, null, null); assertEquals(false, testService.registerAppConfiguration(null, null)); }

@org.junit.After public void tearDown() { com.android.bluetooth.hfp.HeadsetObjectsFactory.getInstance().destroyStateMachine(mHeadsetStateMachine); mHandlerThread.quit(); reset(com.android.bluetooth.hfp.HeadsetStateMachineTest.sAdapterService); }

@org.junit.Test public void testInitialize() { if (skipTest()) return; android.util.Log.i(com.android.bluetooth.mapclient.MapClientTest.TAG, "testInitialize, test passed"); }
@org.junit.After public void tearDown() { mA2dpStateMachine.doQuit(); mHandlerThread.quit(); }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); java.lang.reflect.Method method = com.android.bluetooth.btservice.AdapterService.class.getDeclaredMethod("setAdapterService", com.android.bluetooth.btservice.AdapterService.class); method.setAccessible(true); method.invoke(mAdapterService, mAdapterService); mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("00:01:02:03:04:05"); mHandlerThread = new android.os.HandlerThread("A2dpStateMachineTestHandlerThread"); mHandlerThread.start(); mA2dpStateMachine = new com.android.bluetooth.a2dp.A2dpStateMachine(mTestDevice, mA2dpService, mTargetContext, mA2dpNativeInterface, mHandlerThread.getLooper()); mA2dpStateMachine.sConnectTimeoutMs = 1000; mA2dpStateMachine.start(); }
@org.junit.After public void tearDown() { mHidDeviceService.stop(); mHidDeviceService.cleanup(); mHidDeviceService = null; mTargetContext.unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedQueue.clear(); mCallbackQueue.clear(); }
@org.junit.After public void tearDown() { mHandlerThread.quitSafely(); }
@org.junit.Before public void setUp() throws java.lang.Exception { mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("00:01:02:03:04:05"); mHandlerThread = new android.os.HandlerThread("PbapTestHandlerThread"); mHandlerThread.start(); mHandler = new android.os.Handler(mHandlerThread.getLooper()); mBluetoothPbapService = mock(com.android.bluetooth.pbap.BluetoothPbapService.class); doNothing().when(mBluetoothPbapService).checkOrGetPhonebookPermission(any()); mPbapStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(mBluetoothPbapService, mHandlerThread.getLooper(), mTestDevice, mSocket, mBluetoothPbapService, mHandler, com.android.bluetooth.pbap.PbapTest.TEST_NOTIFICATION_ID); }
@org.junit.After public void tearDown() throws java.lang.Exception { mService = null; mAdapter = null; }
@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); verify(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(eq(com.android.bluetooth.hfp.HeadsetService.class.getName()), eq(BluetoothAdapter.STATE_OFF)); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sAdapterService); mCurrentDevice = null; }








private void update() { boolean tracingOn = com.android.traceur.AtraceUtils.isTracingOn(); getQsTile().setIcon(android.graphics.drawable.Icon.createWithResource(this, R.drawable.stat_sys_adb)); getQsTile().setState((tracingOn ? android.service.quicksettings.Tile.STATE_ACTIVE : android.service.quicksettings.Tile.STATE_INACTIVE)); getQsTile().setLabel((tracingOn ? "Tracing" : "Start Tracing")); getQsTile().updateTile(); }
public void pollState(boolean modemTriggered) { mPollingContext = new int[1]; mPollingContext[0] = 0; log(("pollState: modemTriggered=" + modemTriggered)); switch (mCi.getRadioState()) { case RADIO_UNAVAILABLE : mNewSS.setStateOutOfService(); mNewCellLoc.setStateInvalid(); setSignalStrengthDefaultValues(); mNitzState.handleNetworkUnavailable(); pollStateDone(); break; case RADIO_OFF : mNewSS.setStateOff(); mNewCellLoc.setStateInvalid(); setSignalStrengthDefaultValues(); mNitzState.handleNetworkUnavailable(); if ((mDeviceShuttingDown) || ((!modemTriggered) && ((android.telephony.ServiceState.RIL_RADIO_TECHNOLOGY_IWLAN) != (mSS.getRilDataRadioTechnology())))) { pollStateDone(); break; } default : (mPollingContext[0])++; mCi.getOperator(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_OPERATOR, mPollingContext)); (mPollingContext[0])++; mCi.getDataRegistrationState(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_GPRS, mPollingContext)); (mPollingContext[0])++; mCi.getVoiceRegistrationState(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_REGISTRATION, mPollingContext)); if (mPhone.isPhoneTypeGsm()) { (mPollingContext[0])++; mCi.getNetworkSelectionMode(obtainMessage(com.android.internal.telephony.ServiceStateTracker.EVENT_POLL_STATE_NETWORK_SELECTION_MODE, mPollingContext)); } break; } }
private int getLteEarfcn(android.hardware.radio.V1_0.DataRegStateResult dataRegStateResult) { int lteEarfcn = com.android.internal.telephony.ServiceStateTracker.INVALID_LTE_EARFCN; switch (dataRegStateResult.cellIdentity.cellInfoType) { case android.hardware.radio.V1_0.CellInfoType.LTE : { if ((dataRegStateResult.cellIdentity.cellIdentityLte.size()) == 1) { android.hardware.radio.V1_0.CellIdentityLte cellIdentityLte = dataRegStateResult.cellIdentity.cellIdentityLte.get(0); lteEarfcn = cellIdentityLte.earfcn; } break; } default : { break; } } return lteEarfcn; }
private void notifySentMessageStatus(java.lang.String handle, com.android.bluetooth.mapclient.EventReport.Type status) { if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, ((("got a status for " + handle) + " Status = ") + status)); } android.app.PendingIntent intentToSend = null; if (status == (EventReport.Type.SENDING_SUCCESS)) { intentToSend = mSentReceiptRequested.remove(mSentMessageLog.get(handle)); } else if (status == (EventReport.Type.DELIVERY_SUCCESS)) { intentToSend = mDeliveryReceiptRequested.remove(mSentMessageLog.get(handle)); } if (intentToSend != null) { try { if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, ("*******Sending " + intentToSend)); } intentToSend.send(); } catch (android.app.PendingIntent e) { android.util.Log.w(com.android.bluetooth.mapclient.MceStateMachine.TAG, ("Notification Request Canceled" + e)); } } }

@android.annotation.NonNull public static android.net.MacAddress createRandomUnicastAddress() { return android.net.MacAddress.createRandomUnicastAddress(android.net.MacAddress.BASE_GOOGLE_MAC, new java.util.Random()); }





private boolean parseAtrString(java.lang.String atr) { if (((atr.length()) % 2) != 0) { com.android.internal.telephony.AnswerToReset.loge((("The length of input ATR string " + (atr.length())) + " is not even.")); return false; } if ((atr.length()) < 4) { com.android.internal.telephony.AnswerToReset.loge("Valid ATR string must at least contains TS and T0."); return false; } byte[] atrBytes = com.android.internal.telephony.uicc.IccUtils.hexStringToBytes(atr); if (atrBytes == null) { return false; } int index = parseConventionByte(atrBytes, 0); if (index == (-1)) { return false; } index = parseFormatByte(atrBytes, index); if (index == (-1)) { return false; } index = parseInterfaceBytes(atrBytes, index); if (index == (-1)) { return false; } index = parseHistoricalBytes(atrBytes, index); if (index == (-1)) { return false; } index = parseCheckBytes(atrBytes, index); if (index == (-1)) { return false; } if (index != (atrBytes.length)) { com.android.internal.telephony.AnswerToReset.loge("Unexpected bytes after the check byte."); return false; } com.android.internal.telephony.AnswerToReset.log(((("Successfully parsed the ATR string " + atr) + " into ") + (toString()))); checkIsEuiccSupported(); return true; }













public byte[] getSelectResponse() { return mSelectResponse; }
public void selectDefaultApplication() { try { select(null); } catch (java.util.NoSuchElementException e) { if ((getAccessControlEnforcer()) != null) { try { select(mAccessControlEnforcer.getDefaultAccessControlAid()); } catch (java.lang.Exception ignore) { } } } catch (android.os.RemoteException ignore) { } synchronized(mLock) { mDefaultApplicationSelectedOnBasicChannel = true; } }
private void testTransitionSelection(boolean testOpen, boolean testNewTask, boolean bottomWallpaper, boolean topWallpaper, boolean topTranslucent, boolean testSlowStop, java.lang.String expectedTransit) throws java.lang.Exception { java.lang.String bottomStartCmd = getAmStartCmd(android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME); if (bottomWallpaper) { bottomStartCmd += " --ez USE_WALLPAPER true"; } if (testSlowStop) { bottomStartCmd += " --ei STOP_DELAY 3000"; } executeShellCommand(bottomStartCmd); final java.lang.String topActivityName = (topTranslucent) ? android.server.cts.ActivityManagerTransitionSelectionTests.TRANSLUCENT_TOP_ACTIVITY_NAME : android.server.cts.ActivityManagerTransitionSelectionTests.TOP_ACTIVITY_NAME; final java.lang.String[] bottomActivityArray = new java.lang.String[]{ android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME }; final java.lang.String[] topActivityArray = new java.lang.String[]{ topActivityName }; mAmWmState.computeState(mDevice, bottomActivityArray); java.lang.String topStartCmd = getAmStartCmd(topActivityName); if (testNewTask) { topStartCmd += " -f 0x18000000"; } if (topWallpaper) { topStartCmd += " --ez USE_WALLPAPER true"; } if (!testOpen) { topStartCmd += " --ei FINISH_DELAY 1000"; } executeShellCommand(topStartCmd); java.lang.Thread.sleep(5000); if (testOpen) { mAmWmState.computeState(mDevice, topActivityArray); } else { mAmWmState.computeState(mDevice, bottomActivityArray); } assertEquals("Picked wrong transition", expectedTransit, mAmWmState.getWmState().getLastTransition()); }

public void testApplication() throws java.lang.Throwable { final android.app.Instrumentation instrumentation = getInstrumentation(); final android.content.Context targetContext = instrumentation.getTargetContext(); final android.content.Intent intent = new android.content.Intent(targetContext, android.app.stubs.MockApplicationActivity.class); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); final android.app.Activity activity = instrumentation.startActivitySync(intent); final android.app.stubs.MockApplication mockApp = ((android.app.stubs.MockApplication) (activity.getApplication())); assertTrue(mockApp.isConstructorCalled); assertTrue(mockApp.isOnCreateCalled); final android.content.pm.PackageManager pm = targetContext.getPackageManager(); if (!((pm.hasSystemFeature(PackageManager.FEATURE_SCREEN_LANDSCAPE)) && (pm.hasSystemFeature(PackageManager.FEATURE_SCREEN_PORTRAIT)))) { return; } runTestOnUiThread(new java.lang.Runnable() { public void run() { android.app.stubs.OrientationTestUtils.toggleOrientation(activity); } }); instrumentation.waitForIdleSync(); final boolean isInMultiwindowMode = activity.isInMultiWindowMode(); if (activity.isInMultiWindowMode()) { assertFalse(("Orientation change should not trigger global configuration change when " + " in multi-window mode."), mockApp.isOnConfigurationChangedCalled); } else { assertTrue(mockApp.isOnConfigurationChangedCalled); } }





public void waitForGc() { allowCollection(); do { try { java.lang.Thread.sleep(10); } catch (java.lang.Exception e) { } java.lang.System.gc(); java.lang.System.runFinalization(); java.lang.System.gc(); } while (isLive() ); reset(); }
public boolean isUp() throws java.net.SocketException { return ((getFlags()) & (IFF_UP)) != 0; }
protected void setOperatorIdd(java.lang.String operatorNumeric) { java.lang.String idd = mHbpcdUtils.getIddByMcc(java.lang.Integer.parseInt(operatorNumeric.substring(0, 3))); if ((idd != null) && (!(idd.isEmpty()))) { mPhone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_IDP_STRING, idd); } else { mPhone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_IDP_STRING, "+"); } }
static com.android.bluetooth.a2dp.A2dpStateMachine make(android.bluetooth.BluetoothDevice device, com.android.bluetooth.a2dp.A2dpService svc, android.content.Context context, com.android.bluetooth.a2dp.A2dpNativeInterface a2dpNativeInterface, android.os.Looper looper) { if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("make for device " + device)); } com.android.bluetooth.a2dp.A2dpStateMachine a2dpSm = new com.android.bluetooth.a2dp.A2dpStateMachine(device, svc, context, a2dpNativeInterface, looper); a2dpSm.start(); return a2dpSm; }
public void testNetworkBlocked() throws java.lang.Exception { assertEquals(com.android.cts.deviceandprofileowner.VPN_PACKAGE, mDevicePolicyManager.getAlwaysOnVpnPackage(com.android.cts.deviceandprofileowner.ADMIN_RECEIVER_COMPONENT)); assertFalse(com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.isNetworkVpn(mContext)); try { com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.tryPosixConnect(com.android.cts.deviceandprofileowner.TEST_ADDRESS); fail("sendIcmpMessage doesn't throw Exception during network lockdown"); } catch (android.system.ErrnoException e) { assertTrue((((e.errno) == (android.system.OsConstants.ENETUNREACH)) || ((e.errno) == (android.system.OsConstants.EACCES)))); } }
public void waitForGc() { java.lang.Runtime.getRuntime().gc(); allowCollection(); java.lang.Runtime.getRuntime().gc(); do { java.lang.System.runFinalization(); java.lang.Runtime.getRuntime().gc(); try { java.lang.Thread.sleep(10); } catch (java.lang.Exception e) { } } while (isLive() ); try { mQueue.remove(); } catch (java.lang.Exception e) { } markerRef = null; reset(); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.os.UserHandle userHandle = intent.getParcelableExtra(com.android.cts.deviceowner.EXTRA_USER_HANDLE); android.util.Log.d(com.android.cts.deviceowner.CreateAndManageUserTest.TAG, ((("broadcast receiver received " + intent) + " with userHandle ") + userHandle)); mQueue.offer(userHandle); }
public void deleteProfile(java.lang.String cardId, java.lang.String iccid, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().deleteProfile(mContext.getOpPackageName(), cardId, iccid, new com.android.internal.telephony.euicc.IDeleteProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { callback.onComplete(resultCode, null); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling deleteProfile", e); throw e.rethrowFromSystemServer(); } }
public void disableProfile(java.lang.String cardId, java.lang.String iccid, boolean refresh, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().disableProfile(mContext.getOpPackageName(), cardId, iccid, refresh, new com.android.internal.telephony.euicc.IDisableProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { callback.onComplete(resultCode, null); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling disableProfile", e); throw e.rethrowFromSystemServer(); } }
public void getRulesAuthTable(java.lang.String cardId, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccRulesAuthTable> callback) { try { getIEuiccCardController().getRulesAuthTable(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetRulesAuthTableCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccRulesAuthTable rat) { callback.onComplete(resultCode, rat); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getRulesAuthTable", e); throw e.rethrowFromSystemServer(); } }
public void getEuiccInfo2(java.lang.String cardId, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccInfo2(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccInfo2Callback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] info) { callback.onComplete(resultCode, info); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getEuiccInfo2", e); throw e.rethrowFromSystemServer(); } }
public void cancelSession(java.lang.String cardId, byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().cancelSession(mContext.getOpPackageName(), cardId, transactionId, reason, new com.android.internal.telephony.euicc.ICancelSessionCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { callback.onComplete(resultCode, response); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling cancelSession", e); throw e.rethrowFromSystemServer(); } }
public void getSmdsAddress(java.lang.String cardId, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.String> callback) { try { getIEuiccCardController().getSmdsAddress(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetSmdsAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, java.lang.String address) { callback.onComplete(resultCode, address); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getSmdsAddress", e); throw e.rethrowFromSystemServer(); } }
public void authenticateServer(java.lang.String cardId, java.lang.String matchingId, byte[] serverSigned1, byte[] serverSignature1, byte[] euiccCiPkIdToBeUsed, byte[] serverCertificate, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().authenticateServer(mContext.getOpPackageName(), cardId, matchingId, serverSigned1, serverSignature1, euiccCiPkIdToBeUsed, serverCertificate, new com.android.internal.telephony.euicc.IAuthenticateServerCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { callback.onComplete(resultCode, response); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling authenticateServer", e); throw e.rethrowFromSystemServer(); } }
public void getEuiccChallenge(java.lang.String cardId, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccChallenge(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccChallengeCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] challenge) { callback.onComplete(resultCode, challenge); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getEuiccChallenge", e); throw e.rethrowFromSystemServer(); } }
public void removeNotificationFromList(java.lang.String cardId, int seqNumber, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().removeNotificationFromList(mContext.getOpPackageName(), cardId, seqNumber, new com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { callback.onComplete(resultCode, null); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling removeNotificationFromList", e); throw e.rethrowFromSystemServer(); } }
public void resetMemory(java.lang.String cardId, @android.telephony.euicc.EuiccCardManager.ResetOption int options, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().resetMemory(mContext.getOpPackageName(), cardId, options, new com.android.internal.telephony.euicc.IResetMemoryCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { callback.onComplete(resultCode, null); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling resetMemory", e); throw e.rethrowFromSystemServer(); } }
public void setNickname(java.lang.String cardId, java.lang.String iccid, java.lang.String nickname, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().setNickname(mContext.getOpPackageName(), cardId, iccid, nickname, new com.android.internal.telephony.euicc.ISetNicknameCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { callback.onComplete(resultCode, null); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling setNickname", e); throw e.rethrowFromSystemServer(); } }
public void getProfile(java.lang.String cardId, java.lang.String iccid, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo> callback) { try { getIEuiccCardController().getProfile(mContext.getOpPackageName(), cardId, iccid, new com.android.internal.telephony.euicc.IGetProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo profile) { callback.onComplete(resultCode, profile); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getProfile", e); throw e.rethrowFromSystemServer(); } }
public void prepareDownload(java.lang.String cardId, @android.annotation.Nullable byte[] hashCc, byte[] smdpSigned2, byte[] smdpSignature2, byte[] smdpCertificate, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().prepareDownload(mContext.getOpPackageName(), cardId, hashCc, smdpSigned2, smdpSignature2, smdpCertificate, new com.android.internal.telephony.euicc.IPrepareDownloadCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { callback.onComplete(resultCode, response); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling prepareDownload", e); throw e.rethrowFromSystemServer(); } }
public void retrieveNotificationList(java.lang.String cardId, @android.telephony.euicc.EuiccNotification.Event int events, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification[]> callback) { try { getIEuiccCardController().retrieveNotificationList(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.euicc.IRetrieveNotificationListCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification[] notifications) { callback.onComplete(resultCode, notifications); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling retrieveNotificationList", e); throw e.rethrowFromSystemServer(); } }
public void listNotifications(java.lang.String cardId, @android.telephony.euicc.EuiccNotification.Event int events, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification[]> callback) { try { getIEuiccCardController().listNotifications(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.euicc.IListNotificationsCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification[] notifications) { callback.onComplete(resultCode, notifications); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling listNotifications", e); throw e.rethrowFromSystemServer(); } }
public void retrieveNotification(java.lang.String cardId, int seqNumber, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification> callback) { try { getIEuiccCardController().retrieveNotification(mContext.getOpPackageName(), cardId, seqNumber, new com.android.internal.telephony.euicc.IRetrieveNotificationCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification notification) { callback.onComplete(resultCode, notification); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling retrieveNotification", e); throw e.rethrowFromSystemServer(); } }
public void getDefaultSmdpAddress(java.lang.String cardId, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.String> callback) { try { getIEuiccCardController().getDefaultSmdpAddress(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, java.lang.String address) { callback.onComplete(resultCode, address); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getDefaultSmdpAddress", e); throw e.rethrowFromSystemServer(); } }
public void loadBoundProfilePackage(java.lang.String cardId, byte[] boundProfilePackage, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().loadBoundProfilePackage(mContext.getOpPackageName(), cardId, boundProfilePackage, new com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { callback.onComplete(resultCode, response); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling loadBoundProfilePackage", e); throw e.rethrowFromSystemServer(); } }
public void getEuiccInfo1(java.lang.String cardId, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccInfo1(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccInfo1Callback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] info) { callback.onComplete(resultCode, info); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getEuiccInfo1", e); throw e.rethrowFromSystemServer(); } }
public void getAllProfiles(java.lang.String cardId, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo[]> callback) { try { getIEuiccCardController().getAllProfiles(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetAllProfilesCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo[] profiles) { callback.onComplete(resultCode, profiles); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getAllProfiles", e); throw e.rethrowFromSystemServer(); } }
public void setDefaultSmdpAddress(java.lang.String cardId, java.lang.String defaultSmdpAddress, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().setDefaultSmdpAddress(mContext.getOpPackageName(), cardId, defaultSmdpAddress, new com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { callback.onComplete(resultCode, null); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling setDefaultSmdpAddress", e); throw e.rethrowFromSystemServer(); } }
public void switchToProfile(java.lang.String cardId, java.lang.String iccid, boolean refresh, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo> callback) { try { getIEuiccCardController().switchToProfile(mContext.getOpPackageName(), cardId, iccid, refresh, new com.android.internal.telephony.euicc.ISwitchToProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo profile) { callback.onComplete(resultCode, profile); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling switchToProfile", e); throw e.rethrowFromSystemServer(); } }
public final long getConnectElapsedTime() { return mConnectElapsedTimeMillis; }


void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { synchronized(mStateMachines) { android.bluetooth.BluetoothDevice device = stackEvent.device; com.android.bluetooth.a2dp.A2dpStateMachine sm = getOrCreateStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ("Cannot process stack event: no state machine: " + stackEvent)); return; } sm.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); } }
private void processConnectionEvent(int state) { switch (state) { case A2dpStackEvent.CONNECTION_STATE_DISCONNECTED : android.util.Log.i(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("Disconnected from " + (mDevice))); transitionTo(mDisconnected); break; default : android.util.Log.e(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ((("Connection State Device: " + (mDevice)) + " bad state: ") + state)); break; } }

public boolean connect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("connect(): " + device)); } if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { return false; } if (!(android.bluetooth.BluetoothUuid.isUuidPresent(mAdapterService.getRemoteUuids(device), BluetoothUuid.AudioSink))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("Cannot connect to " + device) + " : Remote does not have A2DP Sink UUID")); return false; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getOrCreateStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("Cannot connect to " + device) + " : no state machine")); return false; } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; } }




public void setUp() throws java.lang.Exception { super.setUp(); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStack assistantStack = mAmWmState.getAmState().getStackById(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId = assistantStack.mDisplayId; removeStacks(android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }
public void testAssistantStackZOrder() throws java.lang.Exception { if (((!(supportsPip())) || (!(supportsSplitScreenMultiWindow()))) || (!(assistantRunsOnPrimaryDisplay()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ENTER_PIP, "true"); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.PINNED_STACK_ID); mAmWmState.assertContainsStack("Must contain pinned stack.", android.server.cts.PINNED_STACK_ID); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack("Must contain fullscreen stack.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack("Must contain docked stack.", android.server.cts.DOCKED_STACK_ID); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); assertAssistantStackExists(); mAmWmState.assertFrontStack("Pinned stack should be on top.", android.server.cts.PINNED_STACK_ID); mAmWmState.assertFocusedStack("Assistant stack should be focused.", android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }
public void testAssistantStackFinishToPreviousApp() throws java.lang.Exception { launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF, "true"); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerState.STATE_RESUMED); mAmWmState.assertFocusedActivity("TestActivity should be resumed", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertFrontStack("Fullscreen stack should be on top.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedStack("Fullscreen stack should be focused.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); }

public void testAssistantStackLaunchNewTaskWithDockedStack() throws java.lang.Exception { if ((!(supportsSplitScreenMultiWindow())) || (!(assistantRunsOnPrimaryDisplay()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack("Must contain fullscreen stack.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack("Must contain docked stack.", android.server.cts.DOCKED_STACK_ID); enableAssistant(); assertAssistantStackCanLaunchAndReturnFromNewTask(); disableAssistant(); }
private void assertAssistantStackCanLaunchAndReturnFromNewTask() throws java.lang.Exception { enableAssistant(); launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_LAUNCH_NEW_TASK, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ASSISTANT_DISPLAY_ID, java.lang.Integer.toString(android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId)); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedActivity("TestActivity should be resumed", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertFrontStack("Fullscreen stack should be on top.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedStack("Fullscreen stack should be focused.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); executeShellCommand(("am broadcast -a " + (android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY_ACTION_FINISH_SELF))); mAmWmState.waitForFocusedStack(mDevice, android.server.cts.ASSISTANT_STACK_ID); mAmWmState.assertFrontStack("Assistant stack should be on top.", android.server.cts.ASSISTANT_STACK_ID); mAmWmState.assertFocusedStack("Assistant stack should be focused.", android.server.cts.ASSISTANT_STACK_ID); }



@java.lang.Override public android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int userId) { enforceAccessPermission(); java.util.HashMap<android.net.Network, android.net.NetworkCapabilities> result = new java.util.HashMap<android.net.Network, android.net.NetworkCapabilities>(); com.android.server.connectivity.NetworkAgentInfo nai = getDefaultNetwork(); android.net.NetworkCapabilities nc = getNetworkCapabilitiesInternal(nai); if (nc != null) { result.put(nai.network, nc); } synchronized(mVpns) { if (!(mLockdownEnabled)) { com.android.server.connectivity.Vpn vpn = mVpns.get(userId); if (vpn != null) { android.net.Network[] networks = vpn.getUnderlyingNetworks(); if (networks != null) { for (android.net.Network network : networks) { nai = getNetworkAgentInfoForNetwork(network); nc = getNetworkCapabilitiesInternal(nai); if (nc != null) { nc.setSingleUid(userId); result.put(network, nc); } } } } } } android.net.NetworkCapabilities[] out = new android.net.NetworkCapabilities[result.size()]; out = result.values().toArray(out); return out; }

private static void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType != (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkAgent.networkCapabilities); nc.setSingleUid(nri.mUid); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log(((("sending notification " + notification) + " for ") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge(("RemoteException caught trying to send a callback msg for " + (nri.request))); } }
private static void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType != (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkCapabilities(networkAgent.networkCapabilities)); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkInfo(networkAgent.networkInfo)); break; } case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkAgent.networkCapabilities); nc.setUids(null); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log(((("sending notification " + notification) + " for ") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge(("RemoteException caught trying to send a callback msg for " + (nri.request))); } }


private void testExplicitPositionMatchParent() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; params.x = 100; params.y = 100; }); }
protected void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); }
private void testExplicitPositionMatchParentNoLimits() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; params.gravity = (android.view.Gravity.LEFT) | (android.view.Gravity.TOP); params.flags |= WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS; params.x = 100; params.y = 100; }); }
@java.lang.Override protected void cleanup() { com.android.bluetooth.pan.PanService.setPanService(null); if (mNativeAvailable) { cleanupNative(); mNativeAvailable = false; } if ((mPanDevices) != null) { java.util.List<android.bluetooth.BluetoothDevice> devList = getConnectedDevices(); for (android.bluetooth.BluetoothDevice dev : devList) { handlePanDeviceStateChange(dev, mPanIfName, BluetoothProfile.STATE_DISCONNECTED, BluetoothPan.LOCAL_PANU_ROLE, BluetoothPan.REMOTE_NAP_ROLE); } mPanDevices.clear(); } }
private static java.text.NumberFormat getInstance(java.util.Locale desiredLocale, int choice) { java.lang.String[] numberPatterns = ((java.lang.String[]) (java.text.NumberFormat.cachedLocaleData.get(desiredLocale))); if (numberPatterns == null) { libcore.icu.LocaleData data = libcore.icu.LocaleData.get(desiredLocale); numberPatterns = new java.lang.String[4]; numberPatterns[java.text.NumberFormat.NUMBERSTYLE] = data.numberPattern; numberPatterns[java.text.NumberFormat.CURRENCYSTYLE] = data.currencyPattern; numberPatterns[java.text.NumberFormat.PERCENTSTYLE] = data.percentPattern; numberPatterns[java.text.NumberFormat.INTEGERSTYLE] = data.integerPattern; java.text.NumberFormat.cachedLocaleData.put(desiredLocale, numberPatterns); } java.text.DecimalFormatSymbols symbols = java.text.DecimalFormatSymbols.getInstance(desiredLocale); int entry = (choice == (java.text.NumberFormat.INTEGERSTYLE)) ? java.text.NumberFormat.NUMBERSTYLE : choice; java.text.DecimalFormat format = new java.text.DecimalFormat(numberPatterns[entry], symbols); if (choice == (java.text.NumberFormat.INTEGERSTYLE)) { format.setMaximumFractionDigits(0); format.setDecimalSeparatorAlwaysShown(false); format.setParseIntegerOnly(true); } else if (choice == (java.text.NumberFormat.CURRENCYSTYLE)) { format.adjustForCurrencyDefaultFractionDigits(); } return format; }
@java.lang.Override public boolean setPriority(android.bluetooth.BluetoothDevice device, int priority) { com.android.bluetooth.map.BluetoothMapService service = getService(); if (service == null) { return false; } return service.setPriority(device, priority); }
@java.lang.Override protected boolean start() { if (com.android.bluetooth.map.BluetoothMapService.DEBUG) { android.util.Log.d(com.android.bluetooth.map.BluetoothMapService.TAG, "start()"); } if (isMapStarted()) { android.util.Log.w(com.android.bluetooth.map.BluetoothMapService.TAG, "start received for already started, ignoring"); return false; } android.os.HandlerThread thread = new android.os.HandlerThread("BluetoothMapHandler"); thread.start(); android.os.Looper looper = thread.getLooper(); mSessionStatusHandler = new com.android.bluetooth.map.BluetoothMapService.MapServiceMessageHandler(looper); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED); filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED); filter.addAction(BluetoothDevice.ACTION_SDP_RECORD); filter.addAction(com.android.bluetooth.map.BluetoothMapService.ACTION_SHOW_MAPS_SETTINGS); filter.addAction(com.android.bluetooth.map.BluetoothMapService.USER_CONFIRM_TIMEOUT_ACTION); android.content.IntentFilter filterMessageSent = new android.content.IntentFilter(); filterMessageSent.addAction(BluetoothMapContentObserver.ACTION_MESSAGE_SENT); try { filterMessageSent.addDataType("message/*"); } catch (android.content.IntentFilter.MalformedMimeTypeException e) { android.util.Log.e(com.android.bluetooth.map.BluetoothMapService.TAG, "Wrong mime type!!!", e); } if (!(mRegisteredMapReceiver)) { try { registerReceiver(mMapReceiver, filter); registerReceiver(mMapReceiver, filterMessageSent); mRegisteredMapReceiver = true; } catch (java.lang.Exception e) { android.util.Log.e(com.android.bluetooth.map.BluetoothMapService.TAG, "Unable to register map receiver", e); } } mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mAppObserver = new com.android.bluetooth.map.BluetoothMapAppObserver(this, this); mEnabledAccounts = mAppObserver.getEnabledAccountItems(); mSmsCapable = getResources().getBoolean(com.android.internal.R.bool.config_sms_capable); createMasInstances(); sendStartListenerMessage((-1)); mServiceStarted = true; return mServiceStarted; }
private synchronized void closeService() { if (com.android.bluetooth.map.BluetoothMapService.DEBUG) { android.util.Log.d(com.android.bluetooth.map.BluetoothMapService.TAG, "MAP Service closeService in"); } mServiceStarted = false; if ((mBluetoothMnsObexClient) != null) { mBluetoothMnsObexClient.shutdown(); mBluetoothMnsObexClient = null; } if ((mMasInstances.size()) > 0) { for (int i = 0, c = mMasInstances.size(); i < c; i++) { mMasInstances.valueAt(i).shutdown(); } mMasInstances.clear(); } mIsWaitingAuthorization = false; mPermission = android.bluetooth.BluetoothDevice.ACCESS_UNKNOWN; setState(BluetoothMap.STATE_DISCONNECTED); if ((mWakeLock) != null) { mWakeLock.release(); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, "CloseService(): Release Wake Lock"); } mWakeLock = null; } if ((mSessionStatusHandler) != null) { mSessionStatusHandler.removeCallbacksAndMessages(null); android.os.Looper looper = mSessionStatusHandler.getLooper(); if (looper != null) { looper.quit(); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.i(com.android.bluetooth.map.BluetoothMapService.TAG, "Quit looper"); } } mSessionStatusHandler = null; if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.i(com.android.bluetooth.map.BluetoothMapService.TAG, "Remove Handler"); } } com.android.bluetooth.map.BluetoothMapService.sRemoteDevice = null; if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, "MAP Service closeService out"); } }
public boolean setPriority(android.bluetooth.BluetoothDevice device, int priority) { Settings.Global.putInt(getContentResolver(), Settings.Global.getBluetoothMapPriorityKey(device.getAddress()), priority); if (com.android.bluetooth.map.BluetoothMapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.map.BluetoothMapService.TAG, ((("Saved priority " + device) + " = ") + priority)); } return true; }
@java.lang.Override public void onClick() { boolean tracingOn = com.android.traceur.AtraceUtils.isTracingOn(); android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(this); prefs.edit().putBoolean(getString(R.string.pref_key_tracing_on), (!tracingOn)).apply(); if (tracingOn) { android.widget.Toast.makeText(getApplicationContext(), getString(R.string.stopping_trace), Toast.LENGTH_SHORT).show(); com.android.traceur.AtraceUtils.atraceDumpAndSendInBackground(this, com.android.traceur.Receiver.getActiveTags(this, prefs, true)); } else { android.widget.Toast.makeText(getApplicationContext(), getString(R.string.starting_trace), Toast.LENGTH_SHORT).show(); } com.android.traceur.Receiver.updateTracing(this, true); com.android.traceur.QsService.requestListeningState(this); update(); }
@java.lang.Override public boolean onPreferenceClick(android.support.v7.preference.Preference preference) { com.android.traceur.AtraceUtils.atraceDumpAndSendInBackground(getContext(), com.android.traceur.Receiver.getActiveTags(getContext(), mPrefs, true)); return true; }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context, false); com.android.traceur.QsService.requestListeningState(context); } else if (com.android.traceur.Receiver.FORCE_UPDATE_ACTION.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context, true); } else if (com.android.traceur.Receiver.DUMP_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); if (com.android.traceur.AtraceUtils.isTracingOn()) { com.android.traceur.AtraceUtils.atraceDumpAndSendInBackground(context, com.android.traceur.Receiver.getActiveTags(context, prefs, true)); } else { context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } } else if (com.android.traceur.Receiver.OPEN_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }
public static void atraceDumpAndSendInBackground(final android.content.Context context, final java.lang.String tags) { new android.os.AsyncTask<java.lang.Void, java.lang.Void, java.lang.Void>() { @java.lang.Override protected java.lang.Void doInBackground(java.lang.Void... params) { com.android.traceur.AtraceUtils.atraceDumpAndSend(context, tags, Receiver.BUFFER_SIZE_KB); return null; } }.execute(); }
@java.lang.Override protected boolean stop() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "stop()"); } mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.SHUTDOWN).sendToTarget(); mHandlerThread.quitSafely(); if ((mContactChangeObserver) == null) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Avoid unregister when receiver it is not registered"); return true; } try { unregisterReceiver(mPbapReceiver); getContentResolver().unregisterContentObserver(mContactChangeObserver); mContactChangeObserver = null; } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Unable to unregister pbap receiver", e); } return true; }
@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public void checkOrGetPhonebookPermission(com.android.bluetooth.pbap.PbapStateMachine stateMachine) { android.bluetooth.BluetoothDevice device = stateMachine.getRemoteDevice(); int permission = device.getPhonebookAccessPermission(); if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("getPhonebookAccessPermission() = " + permission)); } if (permission == (android.bluetooth.BluetoothDevice.ACCESS_ALLOWED)) { stateMachine.sendMessage(PbapStateMachine.AUTHORIZED); } else if (permission == (android.bluetooth.BluetoothDevice.ACCESS_REJECTED)) { stateMachine.sendMessage(PbapStateMachine.REJECTED); } else { android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_CONNECTION_ACCESS_REQUEST); intent.setClassName(com.android.bluetooth.pbap.BluetoothPbapService.ACCESS_AUTHORITY_PACKAGE, com.android.bluetooth.pbap.BluetoothPbapService.ACCESS_AUTHORITY_CLASS); intent.putExtra(BluetoothDevice.EXTRA_ACCESS_REQUEST_TYPE, BluetoothDevice.REQUEST_TYPE_PHONEBOOK_ACCESS); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.putExtra(BluetoothDevice.EXTRA_PACKAGE_NAME, this.getPackageName()); this.sendOrderedBroadcast(intent, com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM); if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("waiting for authorization for connection from: " + device)); } android.os.Message msg = mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.USER_TIMEOUT, stateMachine); mSessionStatusHandler.sendMessageDelayed(msg, com.android.bluetooth.pbap.BluetoothPbapService.USER_CONFIRM_TIMEOUT_VALUE); } }

public boolean isWifiCallingAvailable() { try { return getITelephony().isWifiCallingAvailable(); } catch (android.os.RemoteException ex) { return false; } catch (java.lang.NullPointerException ex) { return false; } }

public boolean isVolteAvailable() { try { return getITelephony().isVolteAvailable(); } catch (android.os.RemoteException ex) { return false; } catch (java.lang.NullPointerException ex) { return false; } }
public boolean isImsRegistered() { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony == null) return false; return telephony.isImsRegistered(); } catch (android.os.RemoteException ex) { return false; } catch (java.lang.NullPointerException ex) { return false; } }

public boolean isVideoTelephonyAvailable() { try { return getITelephony().isVideoTelephonyAvailable(); } catch (android.os.RemoteException ex) { return false; } catch (java.lang.NullPointerException ex) { return false; } }

@java.lang.Override public void onCallStateChanged(int state, java.lang.String incomingNumber) { if (com.android.phone.MobileNetworkSettings.MobileNetworkFragment.DBG) com.android.phone.MobileNetworkSettings.MobileNetworkFragment.log(("PhoneStateListener.onCallStateChanged: state=" + state)); boolean enabled = (state == (android.telephony.TelephonyManager.CALL_STATE_IDLE)) && (com.android.ims.ImsManager.isNonTtyOrTtyOnVolteEnabled(getActivity().getApplicationContext())); android.preference.Preference pref = getPreferenceScreen().findPreference(com.android.phone.MobileNetworkSettings.MobileNetworkFragment.BUTTON_4G_LTE_KEY); if (pref != null) pref.setEnabled((enabled && (hasActiveSubscriptions()))); }
private void stopService() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.a2dp.A2dpService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); verify(mAdapterService, timeout(com.android.bluetooth.a2dp.A2dpServiceTest.TIMEOUT_MS)).onProfileServiceStateChanged(eq(com.android.bluetooth.a2dp.A2dpService.class.getName()), eq(BluetoothAdapter.STATE_OFF)); mA2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); org.junit.Assert.assertNull(mA2dpService); }
private void startService() throws java.util.concurrent.TimeoutException { android.content.Intent startIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.a2dp.A2dpService.class); startIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); startIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_ON); mServiceRule.startService(startIntent); verify(mAdapterService, timeout(com.android.bluetooth.a2dp.A2dpServiceTest.TIMEOUT_MS)).onProfileServiceStateChanged(eq(com.android.bluetooth.a2dp.A2dpService.class.getName()), eq(BluetoothAdapter.STATE_ON)); mA2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); org.junit.Assert.assertNotNull(mA2dpService); }
@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); verify(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(eq(com.android.bluetooth.hfp.HeadsetService.class.getName()), eq(BluetoothAdapter.STATE_OFF)); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.sAdapterService); mCurrentDevice = null; }
@org.junit.Test public void testRepeatedEnableDisableSingly() throws java.util.concurrent.TimeoutException { for (java.lang.Class profile : mProfiles) { android.util.Log.d("Singly", ("profile = " + (profile.getSimpleName()))); for (int i = 0; i < 5; i++) { setProfileState(profile, BluetoothAdapter.STATE_ON); verify(mMockAdapterService, timeout(com.android.bluetooth.btservice.ProfileServiceTest.PROFILE_START_MILLIS).times((i + 1))).onProfileServiceStateChanged(eq(profile.getName()), eq(BluetoothAdapter.STATE_ON)); android.util.Log.d("Singly", ((("profile = " + (profile.getSimpleName())) + ": enabled ") + i)); setProfileState(profile, BluetoothAdapter.STATE_OFF); verify(mMockAdapterService, timeout(com.android.bluetooth.btservice.ProfileServiceTest.PROFILE_START_MILLIS).times((i + 1))).onProfileServiceStateChanged(eq(profile.getName()), eq(BluetoothAdapter.STATE_OFF)); android.util.Log.d("Singly", (((" " + (profile.getSimpleName())) + ": disabled ") + i)); } } }
@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(eq(com.android.bluetooth.hfp.HeadsetService.class.getName()), eq(BluetoothAdapter.STATE_OFF)); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService); mStateMachines.clear(); mCurrentDevice = null; }
public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { synchronized(mProfiles) { mProfiles.remove(profile); } }
public void addProfile(com.android.bluetooth.btservice.ProfileService profile) { synchronized(mProfiles) { if (!(mProfiles.contains(profile))) { mProfiles.add(profile); } } }
boolean stopProfileServices() { java.lang.Class[] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles(); if ((mProfilesStarted) && ((supportedProfileServices.length) > 0)) { setProfileServiceState(supportedProfileServices, BluetoothAdapter.STATE_OFF); return true; } debugLog("stopProfileServices() - No profiles services to stop or already stopped."); return false; }
public void onProfileServiceStateChanged(java.lang.String serviceName, int state) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_STATE_CHANGED); m.obj = serviceName; m.arg1 = state; mHandler.sendMessage(m); }
@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println("Skipping dump in APP SERVICES, see bluetooth_manager section."); writer.println("Use --print argument for dumpsys direct from AdapterService."); return; } verboseLog(("dumpsys arguments, check for protobuf output: " + (android.text.TextUtils.join(" ", args)))); if (args[0].startsWith("--proto")) { if (args[0].equals("--proto-bin")) { dumpMetrics(fd); } else if (args[0].equals("--proto-java-bin")) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ("proto-java-bin dump, empty metrics size is " + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog("Unable to write Java protobuf to file descriptor."); } } return; } writer.println("Bonded devices:"); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println((((((" " + (device.getAddress())) + " [") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + "] ") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }
void registerServerSocket(java.lang.String socketName) { if ((mServerSocket) == null) { int fileDesc; final java.lang.String fullSocketName = (com.android.internal.os.ZygoteServer.ANDROID_SOCKET_PREFIX) + socketName; try { java.lang.String env = java.lang.System.getenv(fullSocketName); fileDesc = java.lang.Integer.parseInt(env); } catch (java.lang.RuntimeException ex) { throw new java.lang.RuntimeException((fullSocketName + " unset or invalid"), ex); } try { java.io.FileDescriptor fd = new java.io.FileDescriptor(); fd.setInt$(fileDesc); mServerSocket = new android.net.LocalServerSocket(fd); } catch (java.io.IOException ex) { throw new java.lang.RuntimeException((("Error binding to local socket '" + fileDesc) + "'"), ex); } } }



@java.lang.Override public vogar.commands.VmCommandBuilder newVmCommandBuilder(vogar.Action action, java.io.File workingDirectory) { java.util.List<java.lang.String> vmCommand = new java.util.ArrayList<java.lang.String>(); com.google.common.collect.Iterables.addAll(vmCommand, run.invokeWith()); vmCommand.add(run.vmCommand); vogar.commands.VmCommandBuilder vmCommandBuilder = new vogar.commands.VmCommandBuilder(run.log).env("ANDROID_DATA", run.getAndroidDataPath()).workingDirectory(workingDirectory).vmCommand(vmCommand).vmArgs(("-Duser.home=" + (run.deviceUserHome))).maxLength(4096); if ((run.debugPort) != null) { vmCommandBuilder.vmArgs("-Xcompiler-option", "--debuggable"); } if ((modeId) == (vogar.ModeId.APP_PROCESS)) { return vmCommandBuilder.vmArgs(action.getUserDir().getPath()).classpathViaProperty(true); } vmCommandBuilder.vmArgs(("-Duser.name=" + (deviceUserNameSupplier.get()))).vmArgs("-Duser.language=en").vmArgs("-Duser.region=US"); if ((!(run.benchmark)) && (run.checkJni)) { vmCommandBuilder.vmArgs("-Xcheck:jni"); } vmCommandBuilder.vmArgs("-Xjnigreflimit:2000"); return vmCommandBuilder; }
public void runInstrument() throws java.lang.Exception { com.android.commands.am.Instrument instrument = new com.android.commands.am.Instrument(mAm, mPm); java.lang.String opt; while ((opt = nextOption()) != null) { if (opt.equals("-p")) { instrument.profileFile = nextArgRequired(); } else if (opt.equals("-w")) { instrument.wait = true; } else if (opt.equals("-r")) { instrument.rawMode = true; } else if (opt.equals("-m")) { instrument.proto = true; } else if (opt.equals("-e")) { final java.lang.String argKey = nextArgRequired(); final java.lang.String argValue = nextArgRequired(); instrument.args.putString(argKey, argValue); } else if ((opt.equals("--no_window_animation")) || (opt.equals("--no-window-animation"))) { instrument.noWindowAnimation = true; } else if (opt.equals("--user")) { instrument.userId = parseUserArg(nextArgRequired()); } else if (opt.equals("--abi")) { instrument.abi = nextArgRequired(); } else { java.lang.System.err.println(("Error: Unknown option: " + opt)); return; } } if ((instrument.userId) == (android.os.UserHandle.USER_ALL)) { java.lang.System.err.println("Error: Can't start instrumentation with user 'all'"); return; } instrument.componentNameArg = nextArgRequired(); instrument.run(); }

private final void startProcessLocked(com.android.server.am.ProcessRecord app, java.lang.String hostingType, java.lang.String hostingNameStr) { startProcessLocked(app, hostingType, hostingNameStr, null, null, null); }
@java.lang.Override public void handleSetListening(boolean listening) { if (listening) { mController.addCallback(mSignalCallback); } else { mController.removeCallback(mSignalCallback); } }
private void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, ("[GsmCdmaPhone] " + s)); }

public void onMMIDone(com.android.internal.telephony.imsphone.ImsPhoneMmiCode mmi) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ("onMMIDone: mmi=" + mmi)); if ((mPendingMMIs.remove(mmi)) || (mmi.isUssdRequest())) { android.os.ResultReceiver receiverCallback = mmi.getUssdCallbackReceiver(); if (receiverCallback != null) { int returnCode = ((mmi.getState()) == (MmiCode.State.COMPLETE)) ? android.telephony.TelephonyManager.USSD_RETURN_SUCCESS : android.telephony.TelephonyManager.USSD_RETURN_FAILURE; sendUssdResponse(mmi.getDialString(), mmi.getMessage(), returnCode, receiverCallback); } else { android.telephony.Rlog.v(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, "onMMIDone: notifyRegistrants"); mMmiCompleteRegistrants.notifyRegistrants(new android.os.AsyncResult(null, mmi, null)); } } }

private com.android.internal.telephony.CommandException getCommandException(int code, java.lang.String errorString) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ((("getCommandException code= " + code) + ", errorString= ") + errorString)); com.android.internal.telephony.CommandException.Error error = CommandException.Error.GENERIC_FAILURE; switch (code) { case com.android.ims.ImsReasonInfo.CODE_UT_NOT_SUPPORTED : error = CommandException.Error.REQUEST_NOT_SUPPORTED; break; case com.android.ims.ImsReasonInfo.CODE_UT_CB_PASSWORD_MISMATCH : error = CommandException.Error.PASSWORD_INCORRECT; break; case com.android.ims.ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE : error = CommandException.Error.RADIO_NOT_AVAILABLE; break; case com.android.ims.ImsReasonInfo.CODE_FDN_BLOCKED : error = CommandException.Error.FDN_CHECK_FAILURE; default : break; } return new com.android.internal.telephony.CommandException(error, errorString); }
public void getCallBarring(java.lang.String facility, android.os.Message onComplete) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ("getCallBarring facility=" + facility)); android.os.Message resp; resp = obtainMessage(com.android.internal.telephony.imsphone.ImsPhone.EVENT_GET_CALL_BARRING_DONE, onComplete); try { com.android.ims.ImsUtInterface ut = mCT.getUtInterface(); ut.queryCallBarring(getCBTypeFromFacility(facility), resp); } catch (com.android.ims.ImsException e) { sendErrorResponse(onComplete, e); } }

public void setCallBarring(java.lang.String facility, boolean lockState, java.lang.String password, android.os.Message onComplete) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ((("setCallBarring facility=" + facility) + ", lockState=") + lockState)); android.os.Message resp; resp = obtainMessage(com.android.internal.telephony.imsphone.ImsPhone.EVENT_SET_CALL_BARRING_DONE, onComplete); int action; if (lockState) { action = com.android.internal.telephony.CommandsInterface.CF_ACTION_ENABLE; } else { action = com.android.internal.telephony.CommandsInterface.CF_ACTION_DISABLE; } try { com.android.ims.ImsUtInterface ut = mCT.getUtInterface(); ut.updateCallBarring(getCBTypeFromFacility(facility), action, resp, null); } catch (com.android.ims.ImsException e) { sendErrorResponse(onComplete, e); } }
@java.lang.Override public boolean handleUssdRequest(java.lang.String ussdRequest, android.os.ResultReceiver wrappedCallback) throws com.android.internal.telephony.CallStateException { if ((mPendingMMIs.size()) > 0) { android.telephony.Rlog.i(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ("handleUssdRequest: queue full: " + (android.telephony.Rlog.pii(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ussdRequest)))); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); return true; } try { dialInternal(ussdRequest, VideoProfile.STATE_AUDIO_ONLY, null, wrappedCallback); } catch (com.android.internal.telephony.CallStateException cse) { if (com.android.internal.telephony.imsphone.CS_FALLBACK.equals(cse.getMessage())) { throw cse; } else { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ("Could not execute USSD " + cse)); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); } } catch (java.lang.Exception e) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ("Could not execute USSD " + e)); sendUssdResponse(ussdRequest, null, TelephonyManager.USSD_RETURN_FAILURE, wrappedCallback); return false; } return true; }

protected void loge(java.lang.String msg) { android.telephony.Rlog.e(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ("[ImsPhoneCallTracker] " + msg)); }
@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ("[ImsPhoneCallTracker] " + msg)); }
private void logd(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, ("[GsmCdmaPhone] " + s)); }
private void logi(java.lang.String s) { android.telephony.Rlog.i(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, ("[GsmCdmaPhone] " + s)); }
protected void log(java.lang.String s) { android.telephony.Rlog.d(com.android.internal.telephony.ServiceStateTracker.LOG_TAG, s); }
protected void loge(java.lang.String s) { android.telephony.Rlog.e(com.android.internal.telephony.ServiceStateTracker.LOG_TAG, s); }
private void updateRoamingState(boolean newRoaming) { if ((mCT.getState()) == (PhoneConstants.State.IDLE)) { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ("updateRoamingState now: " + newRoaming)); mRoaming = newRoaming; com.android.ims.ImsManager.setWfcMode(mContext, com.android.ims.ImsManager.getWfcMode(mContext, newRoaming), newRoaming); } else { if (com.android.internal.telephony.imsphone.ImsPhone.DBG) android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG, ("updateRoamingState postponed: " + newRoaming)); mCT.registerForVoiceCallEnded(this, com.android.internal.telephony.imsphone.ImsPhone.EVENT_VOICE_CALL_ENDED, null); } }
@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.GsmCdmaCallTracker.LOG_TAG, ("[GsmCdmaCallTracker] " + msg)); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context, false); com.android.traceur.QsService.requestListeningState(context); } else if (com.android.traceur.Receiver.FORCE_UPDATE_ACTION.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context, true); } else if (com.android.traceur.Receiver.DUMP_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); if (com.android.traceur.AtraceUtils.isTracingOn()) { com.android.traceur.AtraceUtils.atraceDumpAndSend(context); } else { context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } } else if (com.android.traceur.Receiver.OPEN_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }
public static java.lang.String getActiveUnavailableTags(android.content.Context context, android.content.SharedPreferences prefs) { java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.pref_key_tags), com.android.traceur.Receiver.getDefaultTagList()); java.lang.StringBuilder sb = new java.lang.StringBuilder((10 * (tags.size()))); java.util.TreeMap<java.lang.String, java.lang.String> available = com.android.traceur.AtraceUtils.atraceListCategories(); for (java.lang.String s : tags) { if (available.containsKey(s)) continue; if ((sb.length()) > 0) { sb.append(' '); } sb.append(s); } java.lang.String s = sb.toString(); android.util.Log.v(com.android.traceur.Receiver.TAG, (("getActiveUnavailableTags() = \"" + s) + "\"")); return s; }
public static java.lang.String getActiveTags(android.content.Context context, android.content.SharedPreferences prefs, boolean onlyAvailable) { java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.pref_key_tags), com.android.traceur.Receiver.getDefaultTagList()); java.lang.StringBuilder sb = new java.lang.StringBuilder((10 * (tags.size()))); java.util.TreeMap<java.lang.String, java.lang.String> available = (onlyAvailable) ? com.android.traceur.AtraceUtils.atraceListCategories() : null; for (java.lang.String s : tags) { if (onlyAvailable && (!(available.containsKey(s)))) continue; if ((sb.length()) > 0) { sb.append(' '); } sb.append(s); } java.lang.String s = sb.toString(); android.util.Log.v(com.android.traceur.Receiver.TAG, (((("getActiveTags(onlyAvailable=" + onlyAvailable) + ") = \"") + s) + "\"")); return s; }
public static android.os.ZygoteProcess getProcess() { synchronized(android.webkit.WebViewZygote.sLock) { if ((android.webkit.WebViewZygote.sZygote) != null) return android.webkit.WebViewZygote.sZygote; android.webkit.WebViewZygote.waitForServiceStartAndConnect(); return android.webkit.WebViewZygote.sZygote; } }
public static void onWebViewProviderChanged(android.content.pm.PackageInfo packageInfo, java.lang.String cacheKey) { synchronized(android.webkit.WebViewZygote.sLock) { android.webkit.WebViewZygote.sPackage = packageInfo; android.webkit.WebViewZygote.sPackageCacheKey = cacheKey; if (!(android.webkit.WebViewZygote.sMultiprocessEnabled)) { return; } final java.lang.String serviceName = android.webkit.WebViewZygote.getServiceNameLocked(); android.webkit.WebViewZygote.sZygote = null; if (android.os.SystemService.isStopped(serviceName)) { android.os.SystemService.start(serviceName); } else { android.os.SystemService.restart(serviceName); } android.webkit.WebViewZygote.sStartedService = true; } }
@com.android.internal.annotations.GuardedBy("sLock") private static java.lang.String getServiceNameLocked() { if ((android.webkit.WebViewZygote.sPackage) == null) return null; if (java.util.Arrays.asList(Build.SUPPORTED_64_BIT_ABIS).contains(android.webkit.WebViewZygote.sPackage.applicationInfo.primaryCpuAbi)) { return android.webkit.WebViewZygote.WEBVIEW_ZYGOTE_SERVICE_64; } return android.webkit.WebViewZygote.WEBVIEW_ZYGOTE_SERVICE_32; }


@android.annotation.Nullable public static android.telephony.MbmsDownloadSession create(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull final android.telephony.mbms.MbmsDownloadSessionCallback callback, int subscriptionId, @android.annotation.NonNull android.os.Handler handler) { if (!(android.telephony.MbmsDownloadSession.sIsInitialized.compareAndSet(false, true))) { throw new java.lang.IllegalStateException("Cannot have two active instances"); } android.telephony.MbmsDownloadSession session = new android.telephony.MbmsDownloadSession(context, callback, subscriptionId, handler); final int result = session.bindAndInitialize(); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.MbmsDownloadSession.sIsInitialized.set(false); handler.post(new java.lang.Runnable() { @java.lang.Override public void run() { callback.onError(result, null); } }); return null; } return session; }
@android.annotation.Nullable public static android.telephony.MbmsStreamingSession create(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull final android.telephony.mbms.MbmsStreamingSessionCallback callback, int subscriptionId, @android.annotation.NonNull android.os.Handler handler) { if (!(android.telephony.MbmsStreamingSession.sIsInitialized.compareAndSet(false, true))) { throw new java.lang.IllegalStateException("Cannot create two instances of MbmsStreamingSession"); } android.telephony.MbmsStreamingSession session = new android.telephony.MbmsStreamingSession(context, callback, subscriptionId, handler); final int result = session.bindAndInitialize(); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.MbmsStreamingSession.sIsInitialized.set(false); handler.post(new java.lang.Runnable() { @java.lang.Override public void run() { callback.onError(result, null); } }); return null; } return session; }
public static android.telephony.MbmsDownloadSession create(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull android.telephony.mbms.MbmsDownloadSessionCallback callback, @android.annotation.NonNull android.os.Handler handler) { return android.telephony.MbmsDownloadSession.create(context, callback, android.telephony.SubscriptionManager.getDefaultSubscriptionId(), handler); }

public static android.telephony.MbmsStreamingSession create(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull android.telephony.mbms.MbmsStreamingSessionCallback callback, @android.annotation.NonNull android.os.Handler handler) { return android.telephony.MbmsStreamingSession.create(context, callback, android.telephony.SubscriptionManager.getDefaultSubscriptionId(), handler); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (intent.getAction().equals(CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED)) { updateLteEarfcnLists(); return; } if (!(mPhone.isPhoneTypeGsm())) { loge((("Ignoring intent " + intent) + " received on CDMA phone")); return; } if (intent.getAction().equals(Intent.ACTION_LOCALE_CHANGED)) { updateSpnDisplay(); } else if (intent.getAction().equals(com.android.internal.telephony.ServiceStateTracker.ACTION_RADIO_OFF)) { mAlarmSwitch = false; com.android.internal.telephony.dataconnection.DcTracker dcTracker = mPhone.mDcTracker; powerOffRadioSafely(dcTracker); } }
public void addProfile(com.android.bluetooth.btservice.ProfileService profile) { synchronized(mProfiles) { if (!(mProfiles.contains(profile))) { mProfiles.add(profile); } } }
public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { synchronized(mProfiles) { mProfiles.remove(profile); } }
public com.android.documentsui.base.RootInfo getRootOneshot(java.lang.String authority, java.lang.String rootId, boolean forceRefresh) { synchronized(mLock) { com.android.documentsui.base.RootInfo root = (forceRefresh) ? null : getRootLocked(authority, rootId); if (root == null) { mRoots.putAll(authority, loadRootsForAuthority(mContext.getContentResolver(), authority, forceRefresh)); root = getRootLocked(authority, rootId); } return root; } }
public boolean isAllowedToUseHiddenApi() { return isSystemApp(); }
public static java.lang.invoke.MethodHandle varHandleExactInvoker(java.lang.invoke.VarHandle.AccessMode accessMode, java.lang.invoke.MethodType type) { java.lang.invoke.MethodHandles.unsupported("MethodHandles.varHandleExactInvoker()"); return null; }
public static java.lang.invoke.MethodHandle varHandleInvoker(java.lang.invoke.VarHandle.AccessMode accessMode, java.lang.invoke.MethodType type) { java.lang.invoke.MethodHandles.unsupported("MethodHandles.varHandleInvoker()"); return null; }
void toggleMute() { mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.TOGGLE_MUTE); }
boolean onMediaButton(int type) { if (hasAnyCalls()) { com.android.server.telecom.Call ringingCall = getFirstCallWithState(CallState.RINGING); if ((HeadsetMediaButton.SHORT_PRESS) == type) { if (ringingCall == null) { com.android.server.telecom.Call callToHangup = getFirstCallWithState(CallState.RINGING, CallState.DIALING, CallState.PULLING, CallState.ACTIVE, CallState.ON_HOLD); android.telecom.Log.addEvent(callToHangup, LogUtils.Events.INFO, "media btn short press - end call."); if (callToHangup != null) { disconnectCall(callToHangup); return true; } } else { ringingCall.answer(VideoProfile.STATE_AUDIO_ONLY); return true; } } else if ((HeadsetMediaButton.LONG_PRESS) == type) { if (ringingCall != null) { android.telecom.Log.addEvent(getForegroundCall(), LogUtils.Events.INFO, "media btn long press - reject"); ringingCall.reject(false, null); } else { android.telecom.Log.addEvent(getForegroundCall(), LogUtils.Events.INFO, "media btn long press - mute"); mCallAudioManager.toggleMute(); } return true; } } return false; }



public com.android.apksig.ApkSigner.SignerConfig build() { return new com.android.apksig.ApkSigner.SignerConfig(mName, mPrivateKey, mCertificates); }


public com.android.apksig.ApkSigner build() { return new com.android.apksig.ApkSigner(mSignerConfigs, mMinSdkVersion, mV1SigningEnabled, mV2SigningEnabled, mDebuggableApkPermitted, mOtherSignersSignaturesPreserved, mCreatedBy, mSignerEngine, mInputApkFile, mInputApkDataSource, mOutputApkFile, mOutputApkDataSink, mOutputApkDataSource); }



private void checkV2SigningDoneIfEnabled() { if (!(mV2SignaturePending)) { return; } if ((mAddV2SignatureRequest) == null) { throw new java.lang.IllegalStateException(("v2 signature (APK Signature Scheme v2 signature) not yet generated." + " Skipped outputZipSections()?")); } if (!(mAddV2SignatureRequest.isDone())) { throw new java.lang.IllegalStateException(("v2 signature (APK Signature Scheme v2 signature) addition requested by" + " outputZipSections() hasn't been fulfilled yet")); } mAddV2SignatureRequest = null; mV2SignaturePending = false; }
public com.android.apksig.DefaultApkSignerEngine.SignerConfig build() { return new com.android.apksig.DefaultApkSignerEngine.SignerConfig(mName, mPrivateKey, mCertificates); }
private java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> createV2SignerConfigs(boolean apkSigningBlockPaddingSupported) throws java.security.InvalidKeyException { java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> v2SignerConfigs = new java.util.ArrayList<>(mSignerConfigs.size()); for (int i = 0; i < (mSignerConfigs.size()); i++) { com.android.apksig.DefaultApkSignerEngine.SignerConfig signerConfig = mSignerConfigs.get(i); java.util.List<java.security.cert.X509Certificate> certificates = signerConfig.getCertificates(); java.security.PublicKey publicKey = certificates.get(0).getPublicKey(); com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig v2SignerConfig = new com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig(); v2SignerConfig.privateKey = signerConfig.getPrivateKey(); v2SignerConfig.certificates = certificates; v2SignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v2.V2SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); v2SignerConfigs.add(v2SignerConfig); } return v2SignerConfigs; }

private synchronized void msgGetPlayStatusNative() { android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, "msgGetPlayStatusNative"); if ((mA2dpDevice) == null) { android.util.Log.e(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, "Already disconnected ignoring."); return; } mAvrcpCtrlSrvc.getPlaybackState(mA2dpDevice, false); }
@java.lang.Override public synchronized void onLoadChildren(final java.lang.String parentMediaId, final com.android.bluetooth.a2dpsink.mbs.Result<java.util.List<android.media.browse.MediaBrowser.MediaItem>> result) { if ((mAvrcpCtrlSrvc) == null) { android.util.Log.e(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, "AVRCP not yet connected."); result.sendResult(java.util.Collections.emptyList()); return; } android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ("onLoadChildren parentMediaId=" + parentMediaId)); if (!(mAvrcpCtrlSrvc.getChildren(mA2dpDevice, parentMediaId, 0, 255))) { result.sendResult(java.util.Collections.emptyList()); return; } synchronized(this) { mParentIdToRequestMap.put(parentMediaId, result); } result.detach(); }
private synchronized void msgPassThru(int cmd) { android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ("msgPassThru " + cmd)); if ((mA2dpDevice) == null) { android.util.Log.e(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, "Already disconnected ignoring."); return; } mAvrcpCtrlSrvc.sendPassThroughCmd(mA2dpDevice, cmd, AvrcpControllerService.KEY_STATE_PRESSED); mAvrcpCtrlSrvc.sendPassThroughCmd(mA2dpDevice, cmd, AvrcpControllerService.KEY_STATE_RELEASED); }
private void clearImsUceService() { synchronized(mSyncObj) { mImsUceManager = null; mStackService = null; mStackPresService = null; } }


@java.lang.Override public void run() { mCallbackHandler = new android.os.Handler(mLooper, this); while (true) { try { listenToSocket(); } catch (java.lang.Exception e) { loge(("Error in NativeDaemonConnector: " + e)); java.lang.String shutdownAct = android.os.SystemProperties.get(ShutdownThread.SHUTDOWN_ACTION_PROPERTY, ""); if ((shutdownAct != null) && ((shutdownAct.length()) > 0)) { break; } android.os.SystemClock.sleep(5000); } } }
private void getImsService() throws com.android.ims.ImsException { android.telephony.Rlog.d(com.android.internal.telephony.TAG, "getImsService"); getImsManager().addNotifyStatusChangedCallbackIfAvailable(mNotifyStatusChangedCallback); mNotifyStatusChangedCallback.notifyStateChanged(); }



@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { case EVENT_GET_IMS_SERVICE : try { getImsService(); } catch (com.android.ims.ImsException e) { android.telephony.Rlog.e(com.android.internal.telephony.TAG, ("setListeners: " + e)); retryGetImsService(); } break; default : super.handleMessage(msg); } }
@org.junit.Test public void dialogAsksForPairCodeOnUserEntryVariant() { when(controller.getDialogType()).thenReturn(BluetoothPairingController.USER_ENTRY_DIALOG); when(controller.getDeviceVariantMessageId()).thenReturn(BluetoothPairingController.INVALID_DIALOG_TYPE); when(controller.getDeviceVariantMessageHintId()).thenReturn(BluetoothPairingController.INVALID_DIALOG_TYPE); android.content.Context context = spy(org.robolectric.shadows.ShadowApplication.getInstance().getApplicationContext()); android.view.inputmethod.InputMethodManager imm = mock(android.view.inputmethod.InputMethodManager.class); doReturn(imm).when(context).getSystemService(Context.INPUT_METHOD_SERVICE); com.android.settings.bluetooth.BluetoothPairingDialogFragment frag = spy(new com.android.settings.bluetooth.BluetoothPairingDialogFragment()); when(frag.getContext()).thenReturn(context); setupFragment(frag); android.app.AlertDialog alertDialog = frag.getmDialog(); android.view.View view = alertDialog.findViewById(R.id.text); assertThat(view.getVisibility()).isEqualTo(View.VISIBLE); assertThat(view.isFocused()).isTrue(); assertThat(imm.isActive()); verify(imm).showSoftInput(view, InputMethodManager.SHOW_IMPLICIT); }
@org.junit.Test public void testShowBothEstimates_summariesAreBothModified() { doReturn(new android.widget.TextView(mRealContext)).when(mBatteryLayoutPref).findViewById(R.id.summary2); doReturn(new android.widget.TextView(mRealContext)).when(mBatteryLayoutPref).findViewById(R.id.summary1); mFragment.onLongClick(new android.view.View(mRealContext)); android.widget.TextView summary1 = mFragment.mBatteryLayoutPref.findViewById(R.id.summary1); android.widget.TextView summary2 = mFragment.mBatteryLayoutPref.findViewById(R.id.summary2); org.robolectric.Robolectric.flushBackgroundThreadScheduler(); assertThat(summary2.getText().toString().contains(com.android.settings.fuelgauge.PowerUsageSummaryTest.NEW_ML_EST_SUFFIX)); assertThat(summary1.getText().toString().contains(com.android.settings.fuelgauge.PowerUsageSummaryTest.OLD_EST_SUFFIX)); }
@org.junit.Test public void testCollectPipApps() { android.content.pm.PackageInfo primaryP1 = createPackage("Calculator", true); android.content.pm.PackageInfo primaryP2 = createPackage("Clock", false); android.content.pm.PackageInfo profileP1 = createPackage("Calculator", false); android.content.pm.PackageInfo profileP2 = createPackage("Clock", true); mPrimaryUserPackages.add(primaryP1); mPrimaryUserPackages.add(primaryP2); mProfileUserPackages.add(profileP1); mProfileUserPackages.add(profileP2); java.util.ArrayList<android.util.Pair<android.content.pm.ApplicationInfo, java.lang.Integer>> apps = mFragment.collectPipApps(com.android.settings.applications.PictureInPictureSettingsTest.PRIMARY_USER_ID); assertThat(containsPackages(apps, primaryP1, profileP2)).isTrue(); assertThat(containsPackages(apps, primaryP2, profileP1)).isFalse(); }

@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSendImsCdmaTest() throws java.lang.Exception { switchImsSmsFormat(PhoneConstants.PHONE_TYPE_CDMA); mImsSmsDispatcher.sendText("111", "222", com.android.internal.telephony.TAG, null, null, null, null, false); verify(mSimulatedCommandsVerifier).sendImsCdmaSms(((byte[]) (any())), eq(0), eq(0), any(android.os.Message.class)); }
@java.lang.Override protected com.android.internal.telephony.gsm.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int encoding, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean lastPart, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, java.lang.String fullMessageText) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddress, destinationAddress, message, (deliveryIntent != null), com.android.internal.telephony.SmsHeader.toByteArray(smsHeader), encoding, smsHeader.languageTable, smsHeader.languageShiftTable); if (pdu != null) { java.util.HashMap map = getSmsTrackerMap(destinationAddress, scAddress, message, pdu); return getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), unsentPartCount, anyPartFailed, messageUri, smsHeader, (!lastPart), fullMessageText, true, false); } else { android.telephony.Rlog.e(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "GsmSMSDispatcher.sendNewSubmitPdu(): getSubmitPdu() returned null"); return null; } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSendImsGmsTestWithOutDesAddr() throws java.lang.Exception { switchImsSmsFormat(PhoneConstants.PHONE_TYPE_GSM); mImsSmsDispatcher.sendText(null, "222", com.android.internal.telephony.TAG, null, null, null, null, false); verify(mSimulatedCommandsVerifier, times(0)).sendImsGsmSms(anyString(), anyString(), anyInt(), anyInt(), any(android.os.Message.class)); }
@com.android.internal.annotations.VisibleForTesting @java.lang.Override public void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String callingPkg, boolean persistMessage) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddr, destAddr, text, (deliveryIntent != null)); if (pdu != null) { java.util.HashMap map = getSmsTrackerMap(destAddr, scAddr, text, pdu); com.android.internal.telephony.gsm.SmsTracker tracker = getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), messageUri, false, text, true, persistMessage); java.lang.String carrierPackage = getCarrierAppPackageName(); if (carrierPackage != null) { android.telephony.Rlog.d(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "Found carrier package."); com.android.internal.telephony.gsm.TextSmsSender smsSender = new com.android.internal.telephony.gsm.TextSmsSender(tracker); smsSender.sendSmsByCarrierApp(carrierPackage, new com.android.internal.telephony.gsm.SmsSenderCallback(smsSender)); } else { android.telephony.Rlog.v(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "No carrier package."); sendRawPdu(tracker); } } else { android.telephony.Rlog.e(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, "GsmSMSDispatcher.sendText(): getSubmitPdu() returned null"); } }
@java.lang.Override protected com.android.internal.telephony.cdma.SmsTracker getNewSubmitPduTracker(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String message, com.android.internal.telephony.SmsHeader smsHeader, int encoding, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean lastPart, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, java.lang.String fullMessageText) { com.android.internal.telephony.cdma.sms.UserData uData = new com.android.internal.telephony.cdma.sms.UserData(); uData.payloadStr = message; uData.userDataHeader = smsHeader; if (encoding == (com.android.internal.telephony.SmsConstants.ENCODING_7BIT)) { uData.msgEncoding = com.android.internal.telephony.cdma.sms.UserData.ENCODING_GSM_7BIT_ALPHABET; } else { uData.msgEncoding = com.android.internal.telephony.cdma.sms.UserData.ENCODING_UNICODE_16; } uData.msgEncodingSet = true; com.android.internal.telephony.cdma.SmsMessage.SubmitPdu submitPdu = com.android.internal.telephony.cdma.SmsMessage.getSubmitPdu(destinationAddress, uData, ((deliveryIntent != null) && lastPart)); java.util.HashMap map = getSmsTrackerMap(destinationAddress, scAddress, message, submitPdu); return getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), unsentPartCount, anyPartFailed, messageUri, smsHeader, false, fullMessageText, true, true); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest @android.test.FlakyTest @org.junit.Ignore public void testSendImsGmsTest() throws java.lang.Exception { switchImsSmsFormat(PhoneConstants.PHONE_TYPE_GSM); mImsSmsDispatcher.sendText("111", "222", com.android.internal.telephony.TAG, null, null, null, null, false); verify(mSimulatedCommandsVerifier).sendImsGsmSms(eq("038122f2"), eq("0100038111f1000014c9f67cda9c12d37378983e4697e5d4f29c0e"), eq(0), eq(0), any(android.os.Message.class)); }
public void sendStoredText(java.lang.String callingPkg, android.net.Uri messageUri, java.lang.String scAddress, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent) { mPhone.getContext().enforceCallingPermission(Manifest.permission.SEND_SMS, "Sending SMS message"); if (android.telephony.Rlog.isLoggable("SMS", Log.VERBOSE)) { log(((((((("sendStoredText: scAddr=" + scAddress) + " messageUri=") + messageUri) + " sentIntent=") + sentIntent) + " deliveryIntent=") + deliveryIntent)); } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMS, android.os.Binder.getCallingUid(), callingPkg)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return; } final android.content.ContentResolver resolver = mPhone.getContext().getContentResolver(); if (!(isFailedOrDraft(resolver, messageUri))) { android.util.Log.e(com.android.internal.telephony.IccSmsInterfaceManager.LOG_TAG, "[IccSmsInterfaceManager]sendStoredText: not FAILED or DRAFT message"); returnUnspecifiedFailure(sentIntent); return; } final java.lang.String[] textAndAddress = loadTextAndAddress(resolver, messageUri); if (textAndAddress == null) { android.util.Log.e(com.android.internal.telephony.IccSmsInterfaceManager.LOG_TAG, "[IccSmsInterfaceManager]sendStoredText: can not load text"); returnUnspecifiedFailure(sentIntent); return; } textAndAddress[1] = filterDestAddress(textAndAddress[1]); mDispatcher.sendText(textAndAddress[1], scAddress, textAndAddress[0], sentIntent, deliveryIntent, messageUri, callingPkg, true); }
public void sendMultipartText(java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.util.List<java.lang.String> parts, java.util.List<android.app.PendingIntent> sentIntents, java.util.List<android.app.PendingIntent> deliveryIntents, boolean persistMessageForNonDefaultSmsApp) { mPhone.getContext().enforceCallingPermission(Manifest.permission.SEND_SMS, "Sending SMS message"); if (!persistMessageForNonDefaultSmsApp) { enforcePrivilegedAppPermissions(); } if (android.telephony.Rlog.isLoggable("SMS", Log.VERBOSE)) { int i = 0; for (java.lang.String part : parts) { log(((((((("sendMultipartText: destAddr=" + destAddr) + ", srAddr=") + scAddr) + ", part[") + (i++)) + "]=") + part)); } } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMS, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return; } destAddr = filterDestAddress(destAddr); if ((((parts.size()) > 1) && ((parts.size()) < 10)) && (!(android.telephony.SmsMessage.hasEmsSupport()))) { for (int i = 0; i < (parts.size()); i++) { java.lang.String singlePart = parts.get(i); if (android.telephony.SmsMessage.shouldAppendPageNumberAsPrefix()) { singlePart = ((((java.lang.String.valueOf((i + 1))) + '/') + (parts.size())) + ' ') + singlePart; } else { singlePart = singlePart.concat((((' ' + (java.lang.String.valueOf((i + 1)))) + '/') + (parts.size()))); } android.app.PendingIntent singleSentIntent = null; if ((sentIntents != null) && ((sentIntents.size()) > i)) { singleSentIntent = sentIntents.get(i); } android.app.PendingIntent singleDeliveryIntent = null; if ((deliveryIntents != null) && ((deliveryIntents.size()) > i)) { singleDeliveryIntent = deliveryIntents.get(i); } mDispatcher.sendText(destAddr, scAddr, singlePart, singleSentIntent, singleDeliveryIntent, null, callingPackage, persistMessageForNonDefaultSmsApp); } return; } mDispatcher.sendMultipartText(destAddr, scAddr, ((java.util.ArrayList<java.lang.String>) (parts)), ((java.util.ArrayList<android.app.PendingIntent>) (sentIntents)), ((java.util.ArrayList<android.app.PendingIntent>) (deliveryIntents)), null, callingPackage, persistMessageForNonDefaultSmsApp); }
private void sendTextInternal(java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean persistMessageForNonDefaultSmsApp) { if (android.telephony.Rlog.isLoggable("SMS", Log.VERBOSE)) { log(((((((((("sendText: destAddr=" + destAddr) + " scAddr=") + scAddr) + " text='") + text) + "' sentIntent=") + sentIntent) + " deliveryIntent=") + deliveryIntent)); } if ((mAppOps.noteOp(AppOpsManager.OP_SEND_SMS, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return; } if (!persistMessageForNonDefaultSmsApp) { enforcePrivilegedAppPermissions(); } destAddr = filterDestAddress(destAddr); mDispatcher.sendText(destAddr, scAddr, text, sentIntent, deliveryIntent, null, callingPackage, persistMessageForNonDefaultSmsApp); }
protected abstract void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String callingPkg, boolean persistMessage);
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) { com.android.traceur.Receiver.updateTracing(context); } else if (com.android.traceur.Receiver.STOP_ACTION.equals(intent.getAction())) { prefs.edit().putBoolean(context.getString(R.string.pref_key_tracing_on), false).apply(); com.android.traceur.Receiver.updateTracing(context); } else if (com.android.traceur.Receiver.OPEN_ACTION.equals(intent.getAction())) { context.sendBroadcast(new android.content.Intent(android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS)); context.startActivity(new android.content.Intent(context, com.android.traceur.MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)); } }
@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((((((((((((((((("DataProfile=" + (mProfileId)) + "/") + (mApn)) + "/") + (mProtocol)) + "/") + (mAuthType)) + "/") + (mUserName)) + "/") + (mPassword)) + "/") + (mType)) + "/") + (mMaxConnsTime)) + "/") + (mMaxConns)) + "/") + (mWaitTime)) + "/") + (mEnabled)) + "/") + (mSupportedApnTypesBitmap)) + "/") + (mRoamingProtocol)) + "/") + (mBearerBitmap)) + "/") + (mMtu)) + "/") + (mMvnoType)) + "/") + (mMvnoMatchData)) + "/") + (mModemCognitive); }
public final void onSmsStatusReportReceived(int token, int messageRef, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException("Feature not ready."); } try { mListener.onSmsStatusReportReceived(token, messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, ("Can not process sms status report: " + (e.getMessage()))); acknowledgeSmsReport(token, messageRef, android.telephony.ims.stub.ImsSmsImplBase.STATUS_REPORT_STATUS_ERROR); } } }
public final void onSmsReceived(int token, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException("Feature not ready."); } try { mListener.onSmsReceived(token, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, ("Can not deliver sms: " + (e.getMessage()))); acknowledgeSms(token, 0, android.telephony.ims.stub.ImsSmsImplBase.DELIVER_STATUS_ERROR); } } }

@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println("Skipping dump in APP SERVICES, see bluetooth_manager section."); writer.println("Use --print argument for dumpsys direct from AdapterService."); return; } verboseLog(("dumpsys arguments, check for protobuf output: " + (android.text.TextUtils.join(" ", args)))); if (args[0].equals("--proto-bin")) { dumpMetrics(fd); return; } writer.println("Bonded devices:"); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println((((((" " + (device.getAddress())) + " [") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + "] ") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dump(sb); } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }
@java.lang.Override public void run() { logWriter.println(("Redirector started: " + (name))); try { java.lang.String line = ""; while (!(doExit)) { try { line = br.readLine(); if (line == null) break; logWriter.println((((name) + "> ") + line)); } catch (java.lang.IllegalStateException e) { } } logWriter.println(("Redirector completed: " + (name))); } catch (java.io.IOException e) { logWriter.printError(e); } }
private static java.util.List<java.lang.String> parseZoneIds(org.xmlpull.v1.XmlPullParser parser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { java.util.List<java.lang.String> timeZones = new java.util.ArrayList<>(); while (libcore.util.TimeZoneFinder.findOptionalStartTag(parser, libcore.util.TimeZoneFinder.ID_ELEMENT)) { java.lang.String zoneIdString = libcore.util.TimeZoneFinder.consumeText(parser); libcore.util.TimeZoneFinder.checkOnEndTag(parser, libcore.util.TimeZoneFinder.ID_ELEMENT); timeZones.add(zoneIdString); } return java.util.Collections.unmodifiableList(timeZones); }

private int parseIdFromInsertedUri(android.net.Uri uri) { int id = 0; if (uri != null) { try { id = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { } } assertTrue("Can't parse ID for inserted APN", (id != 0)); return id; }


public com.android.apksig.SigningCertificateLineage build() { return new com.android.apksig.SigningCertificateLineage(); }






private static byte[] generateAdditionalAttributes(com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig signerConfig) { if ((signerConfig.mSigningCertificateLineage) == null) { return new byte[0]; } throw new java.lang.UnsupportedOperationException(); }



@java.lang.Override public android.net.NetworkCapabilities createFromParcel(android.os.Parcel in) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities(); netCap.mNetworkCapabilities = in.readLong(); netCap.mTransportTypes = in.readLong(); netCap.mLinkUpBandwidthKbps = in.readInt(); netCap.mLinkDownBandwidthKbps = in.readInt(); netCap.mNetworkSpecifier = in.readParcelable(null); netCap.mSignalStrength = in.readInt(); netCap.mUids = ((android.util.ArraySet<android.net.UidRange>) (in.readArraySet(null))); return netCap; }
public android.net.NetworkCapabilities addCapability(@android.net.NetworkCapabilities.NetCapability int capability) { if ((capability < (android.net.NetworkCapabilities.MIN_NET_CAPABILITY)) || (capability > (android.net.NetworkCapabilities.MAX_NET_CAPABILITY))) { throw new java.lang.IllegalArgumentException("NetworkCapability out of range"); } mNetworkCapabilities |= 1 << capability; return this; }
private boolean satisfiedByNetCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { long networkCapabilities = this.mNetworkCapabilities; if (onlyImmutable) { networkCapabilities = networkCapabilities & (~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES)); } return ((nc.mNetworkCapabilities) & networkCapabilities) == networkCapabilities; }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeInt(mSignalStrength); dest.writeArraySet(mUids); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return (((((equalsNetCapabilities(that)) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that))) && (equalsUids(that)); }
public void clearAll() { mNetworkCapabilities = mTransportTypes = 0; mLinkUpBandwidthKbps = mLinkDownBandwidthKbps = android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED; mNetworkSpecifier = null; mSignalStrength = android.net.NetworkCapabilities.SIGNAL_STRENGTH_UNSPECIFIED; mUids = null; mEstablishingVpnAppUid = android.net.NetworkCapabilities.INVALID_UID; }
@java.lang.Override public int hashCode() { return (((((((((int) ((mNetworkCapabilities) & -1)) + (((int) ((mNetworkCapabilities) >> 32)) * 3)) + (((int) ((mTransportTypes) & -1)) * 5)) + (((int) ((mTransportTypes) >> 32)) * 7)) + ((mLinkUpBandwidthKbps) * 11)) + ((mLinkDownBandwidthKbps) * 13)) + ((java.util.Objects.hashCode(mNetworkSpecifier)) * 17)) + ((mSignalStrength) * 19)) + ((java.util.Objects.hashCode(mUids)) * 23); }

@org.junit.Test public final void testTapLink_changeOrientationThenTapBack() throws java.lang.Exception { sUiBot.setScreenOrientation(UiBot.PORTRAIT); try { saveUiRestoredAfterTappingLinkTest(android.autofillservice.cts.CustomDescriptionWithLinkTestCase.PostSaveLinkTappedAction.ROTATE_THEN_TAP_BACK_BUTTON); } finally { sUiBot.setScreenOrientation(UiBot.PORTRAIT); } }
@java.lang.Override protected synchronized boolean start() { if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "start()"); } com.android.bluetooth.hfpclient.NativeInterface.initializeNative(); mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); mSmFactory = new com.android.bluetooth.hfpclient.HeadsetClientStateMachineFactory(); mStateMachineMap.clear(); android.content.IntentFilter filter = new android.content.IntentFilter(android.media.AudioManager.VOLUME_CHANGED_ACTION); try { registerReceiver(mBroadcastReceiver, filter); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "Unable to register broadcat receiver", e); } com.android.bluetooth.hfpclient.HeadsetClientService.setHeadsetClientService(this); mNativeInterface = new com.android.bluetooth.hfpclient.NativeInterface(); android.content.Intent startIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); startService(startIntent); mSmThread = new android.os.HandlerThread("HeadsetClient.SM"); mSmThread.start(); return true; }
public void currentPhysicalChannelConfigs(int indicationType, java.util.ArrayList<android.hardware.radio.V1_2.PhysicalChannelConfig> configs) { }


@java.lang.Override public java.lang.String toString() { int[] types = getTransportTypes(); java.lang.String transports = ((types.length) > 0) ? " Transports: " + (android.net.NetworkCapabilities.transportNamesOf(types)) : ""; types = getCapabilities(); java.lang.String capabilities = ((types.length) > 0) ? " Capabilities: " : ""; for (int i = 0; i < (types.length);) { capabilities += android.net.NetworkCapabilities.capabilityNameOf(types[i]); if ((++i) < (types.length)) capabilities += "&"; } java.lang.String upBand = ((mLinkUpBandwidthKbps) > 0) ? (" LinkUpBandwidth>=" + (mLinkUpBandwidthKbps)) + "Kbps" : ""; java.lang.String dnBand = ((mLinkDownBandwidthKbps) > 0) ? (" LinkDnBandwidth>=" + (mLinkDownBandwidthKbps)) + "Kbps" : ""; java.lang.String specifier = ((mNetworkSpecifier) == null) ? "" : (" Specifier: <" + (mNetworkSpecifier)) + ">"; java.lang.String signalStrength = (hasSignalStrength()) ? " SignalStrength: " + (mSignalStrength) : ""; java.lang.String uids = (null != (mUids)) ? (" Uids: <" + (mUids)) + ">" : ""; java.lang.String establishingAppUid = " EstablishingAppUid: " + (mEstablishingVpnAppUid); return (((((((("[" + transports) + capabilities) + upBand) + dnBand) + specifier) + signalStrength) + uids) + establishingAppUid) + "]"; }

public static java.lang.String formatDateRange(android.icu.util.ULocale icuLocale, android.icu.util.TimeZone icuTimeZone, long startMs, long endMs, int flags) { android.icu.util.Calendar startCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, startMs); android.icu.util.Calendar endCalendar; if (startMs == endMs) { endCalendar = startCalendar; } else { endCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, endMs); } boolean endsAtMidnight = libcore.icu.DateIntervalFormat.isMidnight(endCalendar); if (((startMs != endMs) && endsAtMidnight) && (((flags & (DateUtilsBridge.FORMAT_SHOW_TIME)) == 0) || ((libcore.icu.DateUtilsBridge.dayDistance(startCalendar, endCalendar)) <= 1))) { endCalendar.add(Calendar.DAY_OF_MONTH, (-1)); } java.lang.String skeleton = libcore.icu.DateUtilsBridge.toSkeleton(startCalendar, endCalendar, flags); synchronized(libcore.icu.DateIntervalFormat.CACHED_FORMATTERS) { android.icu.text.DateIntervalFormat formatter = libcore.icu.DateIntervalFormat.getFormatter(skeleton, icuLocale, icuTimeZone); return formatter.format(startCalendar, endCalendar, new java.lang.StringBuffer(), new java.text.FieldPosition(0)).toString(); } }

private void writeBluetoothMaxConnectedAudioDevices(java.lang.Object newValue) { android.os.SystemProperties.set(com.android.settings.development.DevelopmentSettings.BLUETOOTH_MAX_CONNECTED_AUDIO_DEVICES_PROPERTY, newValue.toString()); int index = mBluetoothSelectMaxConnectedAudioDevices.findIndexOfValue(newValue.toString()); if (index >= 0) { java.lang.String[] titles = getResources().getStringArray(R.array.bluetooth_max_connected_audio_devices); mBluetoothSelectMaxConnectedAudioDevices.setSummary(titles[index]); } }
private void resetDangerousOptions() { mDontPokeProperties = true; for (int i = 0; i < (mResetSwitchPrefs.size()); i++) { android.support.v14.preference.SwitchPreference cb = mResetSwitchPrefs.get(i); if (cb.isChecked()) { cb.setChecked(false); onPreferenceTreeClick(cb); } } mBugReportInPowerController.resetPreference(); mEnableAdbController.resetPreference(); com.android.settings.development.DevelopmentSettings.resetDebuggerOptions(); writeLogpersistOption(null, true); writeLogdSizeOption(null); writeAnimationScaleOption(0, mWindowAnimationScale, null); writeAnimationScaleOption(1, mTransitionAnimationScale, null); writeAnimationScaleOption(2, mAnimatorDurationScale, null); if (usingDevelopmentColorSpace()) { writeSimulateColorSpace((-1)); } writeOverlayDisplayDevicesOptions(null); writeAppProcessLimitOptions(null); mHaveDebugSettings = false; updateAllOptions(); mDontPokeProperties = false; pokeSystemProperties(); }
private static boolean isLocationModeEnabled(@android.annotation.NonNull android.content.Context context, @android.annotation.UserIdInt int userId) { int locationMode = Settings.Secure.getIntForUser(context.getContentResolver(), Settings.Secure.LOCATION_MODE, Settings.Secure.LOCATION_MODE_OFF, userId); return (locationMode != (Settings.Secure.LOCATION_MODE_OFF)) && (locationMode != (Settings.Secure.LOCATION_MODE_SENSORS_ONLY)); }
public static boolean canAccessCellLocation(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.lang.String pkgName, int uid, int pid) throws java.lang.SecurityException { android.os.Trace.beginSection("TelephonyLocationCheck"); try { if (uid == (PHONE_UID)) { return true; } if ((context.checkPermission(Manifest.permission.ACCESS_COARSE_LOCATION, pid, uid)) == (android.content.pm.PackageManager.PERMISSION_DENIED)) { return false; } final int opCode = android.app.AppOpsManager.permissionToOpCode(Manifest.permission.ACCESS_COARSE_LOCATION); if ((opCode != (android.app.AppOpsManager.OP_NONE)) && ((context.getSystemService(android.app.AppOpsManager.class).noteOp(opCode, uid, pkgName)) != (android.app.AppOpsManager.MODE_ALLOWED))) { return false; } if ((!(android.telephony.LocationAccessPolicy.isLocationModeEnabled(context, android.os.UserHandle.getUserId(uid)))) && (!(android.telephony.LocationAccessPolicy.isLegacyForeground(context, pkgName, uid)))) { return false; } return (android.telephony.LocationAccessPolicy.isCurrentProfile(context, uid)) || (android.telephony.LocationAccessPolicy.checkInteractAcrossUsersFull(context)); } finally { android.os.Trace.endSection(); } }





@java.lang.Override public void pendingListenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, "PendingIntent cannot be null."); if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } ensureValidNetworkSpecifier(networkCapabilities); final android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); nc.setSingleUid(android.os.Binder.getCallingUid()); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("pendingListenForNetwork for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); }
@java.lang.Override public android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities networkCapabilities, android.app.PendingIntent operation) { checkNotNull(operation, "PendingIntent cannot be null."); networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); ensureRequestableCapabilities(networkCapabilities); ensureValidNetworkSpecifier(networkCapabilities); networkCapabilities.setSingleUid(android.os.Binder.getCallingUid()); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.REQUEST); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(networkRequest, operation); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(("pendingRequest for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST_WITH_INTENT, nri)); return networkRequest; }
private void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType != (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkCapabilities(networkAgent.networkCapabilities)); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = networkCapabilitiesWithoutUids(networkAgent.networkCapabilities); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log(((("sending notification " + notification) + " for ") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge(("RemoteException caught trying to send a callback msg for " + (nri.request))); } }
@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null) ? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); networkCapabilities.removeCapability(com.android.server.NET_CAPABILITY_NOT_VPN); enforceAccessPermission(); } else { networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureRequestableCapabilities(networkCapabilities); networkCapabilities.setSingleUid(android.os.Binder.getCallingUid()); if (timeoutMs < 0) { throw new java.lang.IllegalArgumentException("Bad timeout specified"); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(("requestNetwork for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri)); if (timeoutMs > 0) { mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs); } return networkRequest; }
private android.net.NetworkCapabilities networkCapabilitiesWithoutUids(android.net.NetworkCapabilities nc) { return new android.net.NetworkCapabilities(nc).setUids(null); }
private android.net.NetworkCapabilities getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo nai) { if (nai != null) { synchronized(nai) { if ((nai.networkCapabilities) != null) { return networkCapabilitiesWithoutUids(nai.networkCapabilities); } } } return null; }
@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); nc.setSingleUid(android.os.Binder.getCallingUid()); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("listenForNetwork for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }

public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineTransportTypes(nc); combineLinkBandwidths(nc); combineSpecifiers(nc); combineSignalStrength(nc); combineUids(nc); }


@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return (((((equalsNetCapabilities(that)) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that))) && (equalsUids(that)); }

private boolean satisfiedByNetCapabilities(android.net.NetworkCapabilities nc, boolean onlyImmutable) { long networkCapabilities = this.mNetworkCapabilities; if (onlyImmutable) { networkCapabilities = networkCapabilities & (~(android.net.NetworkCapabilities.MUTABLE_CAPABILITIES)); } return ((nc.mNetworkCapabilities) & networkCapabilities) == networkCapabilities; }

public android.net.NetworkCapabilities removeCapability(@android.net.NetworkCapabilities.NetCapability int capability) { if ((capability < (android.net.NetworkCapabilities.MIN_NET_CAPABILITY)) || (capability > (android.net.NetworkCapabilities.MAX_NET_CAPABILITY))) { throw new java.lang.IllegalArgumentException("NetworkCapability out of range"); } mNetworkCapabilities &= ~(1 << capability); return this; }
public android.net.NetworkCapabilities addCapability(@android.net.NetworkCapabilities.NetCapability int capability) { if ((capability < (android.net.NetworkCapabilities.MIN_NET_CAPABILITY)) || (capability > (android.net.NetworkCapabilities.MAX_NET_CAPABILITY))) { throw new java.lang.IllegalArgumentException("NetworkCapability out of range"); } mNetworkCapabilities |= 1 << capability; return this; }



public void setCapabilities(@android.net.NetworkCapabilities.NetCapability int[] capabilities) { mNetworkCapabilities = com.android.internal.util.BitUtils.packBits(capabilities); }

private static void writeToParcelForCdma(android.os.Parcel p, int ni, int si, int bsi, int lon, int lat, java.lang.String al, java.lang.String as, int dbm, int ecio, int eDbm, int eEcio, int eSnr) { p.writeInt(CellIdentity.TYPE_CDMA); p.writeString(null); p.writeString(null); p.writeInt(ni); p.writeInt(si); p.writeInt(bsi); p.writeInt(lon); p.writeInt(lat); p.writeString(al); p.writeString(as); p.writeInt(dbm); p.writeInt(ecio); p.writeInt(eDbm); p.writeInt(eEcio); p.writeInt(eSnr); }

@java.lang.Override public void onDestroy() { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, "onDestroy()"); unregisterProcessObserver(); com.android.stk.StkAppService.sInstance = null; waitForLooper(); mServiceLooper.quit(); }
private void unregisterEvent(int event, int slotId) { switch (event) { case IDLE_SCREEN_AVAILABLE_EVENT : unregisterProcessObserver(AppInterface.CommandType.SET_UP_EVENT_LIST, slotId); break; case LANGUAGE_SELECTION_EVENT : default : break; } }

private void registerEvents(int slotId) { if ((mStkContext[slotId].mSetupEventListSettings) == null) { return; } for (int event : mStkContext[slotId].mSetupEventListSettings.eventList) { switch (event) { case IDLE_SCREEN_AVAILABLE_EVENT : registerProcessObserver(); break; case LANGUAGE_SELECTION_EVENT : default : break; } } }
public static void main(java.lang.String[] params) throws java.lang.Exception { if ((((params.length) == 0) || ("--help".equals(params[0]))) || ("-h".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if ("--version".equals(params[0])) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } java.lang.String cmd = params[0]; try { if ("sign".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("verify".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("help".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if ("version".equals(cmd)) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } else { throw new com.android.apksigner.ApkSignerTool.ParameterException((("Unsupported command: " + cmd) + ". See --help for supported commands")); } } catch (com.android.apksigner.ApkSignerTool.ParameterException | com.android.apksigner.OptionsParser e) { java.lang.System.err.println(e.getMessage()); java.lang.System.exit(1); return; } }

private com.android.internal.telephony.CarrierIdentifier.CarrierMatchingRule makeCarrierMatchingRule(android.database.Cursor cursor) { return new com.android.internal.telephony.CarrierIdentifier.CarrierMatchingRule(cursor.getString(cursor.getColumnIndexOrThrow(CarrierIdentification.All.MCCMNC)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierIdentification.All.IMSI_PREFIX_XPATTERN)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierIdentification.All.ICCID_PREFIX)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierIdentification.All.GID1)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierIdentification.All.GID2)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierIdentification.All.PLMN)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierIdentification.All.SPN)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierIdentification.All.APN)), cursor.getInt(cursor.getColumnIndexOrThrow(CarrierIdentification.CID)), cursor.getString(cursor.getColumnIndexOrThrow(CarrierIdentification.NAME))); }
private int updateDatabaseFromPb(android.database.sqlite.SQLiteDatabase db) { android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, "update database from pb file"); int rows = 0; com.android.internal.telephony.nano.CarrierIdProto.CarrierList carrierList = getUpdateCarrierList(); if (carrierList == null) return rows; android.content.ContentValues cv; java.util.List<android.content.ContentValues> cvs; try { db.beginTransaction(); db.delete(com.android.providers.telephony.CarrierIdProvider.CARRIER_ID_TABLE, null, null); for (com.android.internal.telephony.nano.CarrierIdProto.CarrierId id : carrierList.carrierId) { for (com.android.internal.telephony.nano.CarrierIdProto.CarrierAttribute attr : id.carrierAttribute) { cv = new android.content.ContentValues(); cv.put(CarrierIdentification.CID, id.canonicalId); cv.put(CarrierIdentification.NAME, id.carrierName); cvs = new java.util.ArrayList(); convertCarrierAttrToContentValues(cv, cvs, attr, 0); for (android.content.ContentValues contentVal : cvs) { if ((db.insertWithOnConflict(com.android.providers.telephony.CarrierIdProvider.CARRIER_ID_TABLE, null, contentVal, SQLiteDatabase.CONFLICT_IGNORE)) > 0) { rows++; } else { android.util.Log.e(com.android.providers.telephony.CarrierIdProvider.TAG, ((("updateDatabaseFromPB insertion failure, row: " + rows) + "carrier id: ") + (id.canonicalId))); } } } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ("update database from pb. inserted rows = " + rows)); if (rows > 0) { getContext().getContentResolver().notifyChange(CarrierIdentification.All.CONTENT_URI, null); } setAppliedVersion(carrierList.version); db.setTransactionSuccessful(); } finally { db.endTransaction(); } return rows; }
@com.android.internal.annotations.VisibleForTesting public static java.lang.String getStringForCarrierIdTableCreation(java.lang.String tableName) { return (((((((((((((((((((((((("CREATE TABLE " + tableName) + "(_id INTEGER PRIMARY KEY,") + (CarrierIdentification.All.MCCMNC)) + " TEXT NOT NULL,") + (CarrierIdentification.All.GID1)) + " TEXT,") + (CarrierIdentification.All.GID2)) + " TEXT,") + (CarrierIdentification.All.PLMN)) + " TEXT,") + (CarrierIdentification.All.IMSI_PREFIX_XPATTERN)) + " TEXT,") + (CarrierIdentification.All.SPN)) + " TEXT,") + (CarrierIdentification.All.APN)) + " TEXT,") + (CarrierIdentification.All.ICCID_PREFIX)) + " TEXT,") + (android.provider.Telephony.CarrierIdentification.NAME)) + " TEXT,") + (android.provider.Telephony.CarrierIdentification.CID)) + " INTEGER DEFAULT -1,") + "UNIQUE (") + (android.text.TextUtils.join(", ", com.android.providers.telephony.CarrierIdProvider.CARRIERS_ID_UNIQUE_FIELDS))) + "));"; }
private int updateCarrierIdForCurrentSubscription(android.net.Uri uri, android.content.ContentValues cv) { int subId; try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException(("invalid subid in provided uri " + uri)); } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ("updateCarrierIdForSubId: " + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(com.android.internal.telephony.SubscriptionController.getInstance().isActiveSubId(subId))) { final java.util.List activeSubscriptions = java.util.Arrays.asList(com.android.internal.telephony.SubscriptionController.getInstance().getActiveSubIdList()); int count = 0; for (int subscription : mCurrentSubscriptionMap.keySet()) { if (!(activeSubscriptions.contains(subscription))) { count++; android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ("updateCarrierIdForSubId: " + subscription)); mCurrentSubscriptionMap.remove(subscription); getContext().getContentResolver().notifyChange(CarrierIdentification.CONTENT_URI, null); } } return count; } else { mCurrentSubscriptionMap.put(subId, new android.util.Pair(cv.getAsInteger(CarrierIdentification.CID), cv.getAsString(CarrierIdentification.NAME))); getContext().getContentResolver().notifyChange(CarrierIdentification.CONTENT_URI, null); return 1; } }
private static android.content.ContentValues createCarrierInfoInternal() { android.content.ContentValues contentValues = new android.content.ContentValues(); contentValues.put(CarrierIdentification.All.MCCMNC, com.android.providers.telephony.CarrierIdProviderTest.dummy_mccmnc); contentValues.put(CarrierIdentification.All.GID1, com.android.providers.telephony.CarrierIdProviderTest.dummy_gid1); contentValues.put(CarrierIdentification.All.GID2, com.android.providers.telephony.CarrierIdProviderTest.dummy_gid2); contentValues.put(CarrierIdentification.All.PLMN, com.android.providers.telephony.CarrierIdProviderTest.dummy_plmn); contentValues.put(CarrierIdentification.All.IMSI_PREFIX_XPATTERN, com.android.providers.telephony.CarrierIdProviderTest.dummy_imsi_prefix); contentValues.put(CarrierIdentification.All.SPN, com.android.providers.telephony.CarrierIdProviderTest.dummy_spn); contentValues.put(CarrierIdentification.All.APN, com.android.providers.telephony.CarrierIdProviderTest.dummy_apn); contentValues.put(CarrierIdentification.All.ICCID_PREFIX, com.android.providers.telephony.CarrierIdProviderTest.dummy_iccid_prefix); contentValues.put(CarrierIdentification.NAME, com.android.providers.telephony.CarrierIdProviderTest.dummy_name); contentValues.put(CarrierIdentification.CID, com.android.providers.telephony.CarrierIdProviderTest.dummy_cid); return contentValues; }
@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testUpdateCurrentSubscription_WrongURI() { try { android.content.ContentValues cv = new android.content.ContentValues(); cv.put(CarrierIdentification.CID, com.android.providers.telephony.CarrierIdProviderTest.dummy_cid); cv.put(CarrierIdentification.NAME, com.android.providers.telephony.CarrierIdProviderTest.dummy_name); doReturn(1).when(mSubController).getDefaultSubId(); doReturn(true).when(mSubController).isActiveSubId(eq(1)); mContext.getContentResolver().update(CarrierIdentification.CONTENT_URI, cv, null, null); org.junit.Assert.fail("should throw an exception for wrong uri"); } catch (java.lang.IllegalArgumentException ex) { assertFalse(mContentObserver.changed); } }
private android.database.Cursor queryCarrierIdForCurrentSubscription(android.net.Uri uri, java.lang.String[] projectionIn) { int subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); if (!(android.text.TextUtils.isEmpty(uri.getLastPathSegment()))) { try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException(("invalid subid in provided uri" + uri)); } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ("queryCarrierIdForSubId: " + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(mCurrentSubscriptionMap.containsKey(subId))) { return new android.database.MatrixCursor(projectionIn, 0); } final android.database.MatrixCursor c = new android.database.MatrixCursor(projectionIn, 1); final android.database.MatrixCursor.RowBuilder row = c.newRow(); for (int i = 0; i < (c.getColumnCount()); i++) { final java.lang.String columnName = c.getColumnName(i); if (CarrierIdentification.CID.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).first); } else if (CarrierIdentification.NAME.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).second); } else { throw new java.lang.IllegalArgumentException(("Invalid column " + (projectionIn[i]))); } } return c; }
@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testQueryWithWrongURI() { try { mContext.getContentResolver().query(android.net.Uri.withAppendedPath(CarrierIdentification.CONTENT_URI, "invalid"), new java.lang.String[]{ android.provider.Telephony.CarrierIdentification.CID, android.provider.Telephony.CarrierIdentification.NAME }, null, null); org.junit.Assert.fail("should throw an exception for wrong uri"); } catch (java.lang.IllegalArgumentException ex) { } }
@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testQueryCurrrentSubscription_wrongProjection() { mContext.getContentResolver().query(CarrierIdentification.CONTENT_URI, new java.lang.String[]{ android.provider.Telephony.CarrierIdentification.CID, android.provider.Telephony.CarrierIdentification.NAME, CarrierIdentification.All.MCCMNC }, null, null); }
private void updateCarrierIdAndName(int cid, java.lang.String name) { boolean update = false; if (!(com.android.internal.telephony.CarrierIdentifier.equals(name, mCarrierName, true))) { com.android.internal.telephony.CarrierIdentifier.logd(((("[updateCarrierName] from:" + (mCarrierName)) + " to:") + name)); mCarrierName = name; update = true; } if (cid != (mCarrierId)) { com.android.internal.telephony.CarrierIdentifier.logd(((("[updateCarrierId] from:" + (mCarrierId)) + " to:") + cid)); mCarrierId = cid; update = true; } if (update) { mCarrierIdLocalLog.log(((("[updateCarrierIdAndName] cid:" + (mCarrierId)) + " name:") + (mCarrierName))); final android.content.Intent intent = new android.content.Intent(android.telephony.TelephonyManager.ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED); intent.putExtra(TelephonyManager.EXTRA_CARRIER_ID, mCarrierId); intent.putExtra(TelephonyManager.EXTRA_CARRIER_NAME, mCarrierName); intent.putExtra(TelephonyManager.EXTRA_SUBSCRIPTION_ID, mPhone.getSubId()); mContext.sendBroadcast(intent); android.content.ContentValues cv = new android.content.ContentValues(); cv.put(CarrierIdentification.CID, mCarrierId); cv.put(CarrierIdentification.NAME, mCarrierName); mContext.getContentResolver().update(android.net.Uri.withAppendedPath(CarrierIdentification.CONTENT_URI, java.lang.Integer.toString(mPhone.getSubId())), cv, null, null); } }
private boolean checkListenerPermission(int events, java.lang.String callingPackage, java.lang.String message) { if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_LOCATION)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); } if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_INFO)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK)) != 0) { if (!(com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState(mContext, callingPackage, message))) { return false; } } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_STATE_PERMISSION_MASK)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRECISE_PHONE_STATE, null); } return true; }

public android.graphics.Bitmap takeScreenshot(android.graphics.Point testOffset) { android.graphics.Bitmap source = getInstrumentation().getUiAutomation().takeScreenshot(); return android.graphics.Bitmap.createBitmap(source, testOffset.x, testOffset.y, android.uirendering.cts.testinfrastructure.ActivityTestBase.TEST_WIDTH, android.uirendering.cts.testinfrastructure.ActivityTestBase.TEST_HEIGHT); }
@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((((((((((((("SignalStrength:" + " ") + (mGsmSignalStrength)) + " ") + (mGsmBitErrorRate)) + " ") + (mCdmaDbm)) + " ") + (mCdmaEcio)) + " ") + (mEvdoDbm)) + " ") + (mEvdoEcio)) + " ") + (mEvdoSnr)) + " ") + (mLteSignalStrength)) + " ") + (mLteRsrp)) + " ") + (mLteRsrq)) + " ") + (mLteRssnr)) + " ") + (mLteCqi)) + " ") + (mLteRsrpBoost)) + " ") + (mTdScdmaRscp)) + " ") + (isGsm ? "gsm|lte" : "cdma")) + " ") + (mUseOnlyRsrpForLteLevel ? "use_only_rsrp_for_lte_level" : "use_rsrp_and_rssnr_for_lte_level"); }

public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoSnr, boolean gsm) { initialize(gsmSignalStrength, gsmBitErrorRate, cdmaDbm, cdmaEcio, evdoDbm, evdoEcio, evdoSnr, 99, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, android.telephony.SignalStrength.INVALID, 0, gsm, false); }
public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mLteRsrpBoost); out.writeInt(mTdScdmaRscp); out.writeInt((isGsm ? 1 : 0)); out.writeInt((mUseOnlyRsrpForLteLevel ? 1 : 0)); }
public static android.telephony.SignalStrength makeSignalStrengthFromRilParcel(android.os.Parcel in) { if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log(("Size of signalstrength parcel:" + (in.dataSize()))); android.telephony.SignalStrength ss = new android.telephony.SignalStrength(); ss.mGsmSignalStrength = in.readInt(); ss.mGsmBitErrorRate = in.readInt(); ss.mCdmaDbm = in.readInt(); ss.mCdmaEcio = in.readInt(); ss.mEvdoDbm = in.readInt(); ss.mEvdoEcio = in.readInt(); ss.mEvdoSnr = in.readInt(); ss.mLteSignalStrength = in.readInt(); ss.mLteRsrp = in.readInt(); ss.mLteRsrq = in.readInt(); ss.mLteRssnr = in.readInt(); ss.mLteCqi = in.readInt(); ss.mTdScdmaRscp = in.readInt(); return ss; }
public void initialize(int gsmSignalStrength, int gsmBitErrorRate, int cdmaDbm, int cdmaEcio, int evdoDbm, int evdoEcio, int evdoSnr, int lteSignalStrength, int lteRsrp, int lteRsrq, int lteRssnr, int lteCqi, int lteRsrpBoost, boolean gsm, boolean useOnlyRsrpForLteLevel) { mGsmSignalStrength = gsmSignalStrength; mGsmBitErrorRate = gsmBitErrorRate; mCdmaDbm = cdmaDbm; mCdmaEcio = cdmaEcio; mEvdoDbm = evdoDbm; mEvdoEcio = evdoEcio; mEvdoSnr = evdoSnr; mLteSignalStrength = lteSignalStrength; mLteRsrp = lteRsrp; mLteRsrq = lteRsrq; mLteRssnr = lteRssnr; mLteCqi = lteCqi; mLteRsrpBoost = lteRsrpBoost; mTdScdmaRscp = android.telephony.SignalStrength.INVALID; isGsm = gsm; mUseOnlyRsrpForLteLevel = useOnlyRsrpForLteLevel; if (android.telephony.SignalStrength.DBG) android.telephony.SignalStrength.log(("initialize: " + (toString()))); }



protected void copyFrom(android.telephony.SignalStrength s) { mGsmSignalStrength = s.mGsmSignalStrength; mGsmBitErrorRate = s.mGsmBitErrorRate; mCdmaDbm = s.mCdmaDbm; mCdmaEcio = s.mCdmaEcio; mEvdoDbm = s.mEvdoDbm; mEvdoEcio = s.mEvdoEcio; mEvdoSnr = s.mEvdoSnr; mLteSignalStrength = s.mLteSignalStrength; mLteRsrp = s.mLteRsrp; mLteRsrq = s.mLteRsrq; mLteRssnr = s.mLteRssnr; mLteCqi = s.mLteCqi; mLteRsrpBoost = s.mLteRsrpBoost; mTdScdmaRscp = s.mTdScdmaRscp; isGsm = s.isGsm; mUseOnlyRsrpForLteLevel = s.mUseOnlyRsrpForLteLevel; }


@java.lang.Override public int hashCode() { int primeNum = 31; return ((((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaEcio) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrp) * primeNum)) + ((mLteRsrq) * primeNum)) + ((mLteRssnr) * primeNum)) + ((mLteCqi) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mTdScdmaRscp) * primeNum)) + (isGsm ? 1 : 0)) + (mUseOnlyRsrpForLteLevel ? 1 : 0); }




private void dumpMetrics(java.io.FileDescriptor fd) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); metrics.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dumpProto(metrics); } byte[] nativeMetricsBytes = dumpMetricsNative(); debugLog(("dumpMetrics: native metrics size is " + (nativeMetricsBytes.length))); if ((nativeMetricsBytes.length) > 0) { try { metrics.mergeFrom(nativeMetricsBytes); } catch (com.google.protobuf.micro.InvalidProtocolBufferMicroException ex) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ("dumpMetrics: problem parsing metrics protobuf, " + (ex.getMessage()))); return; } } byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); debugLog(("dumpMetrics: combined metrics size is " + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog(("dumpMetrics: error writing combined protobuf to fd, " + (e.getMessage()))); } }
synchronized void recordScanStart(android.bluetooth.le.ScanSettings settings, boolean filtered, int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan existingScan = getScanFromScannerId(scannerId); if (existingScan != null) { return; } (this.mScansStarted)++; startTime = android.os.SystemClock.elapsedRealtime(); com.android.bluetooth.gatt.AppScanStats.LastScan scan = new com.android.bluetooth.gatt.AppScanStats.LastScan(startTime, 0, false, false, filtered, scannerId); if (settings != null) { scan.opportunistic = (settings.getScanMode()) == (android.bluetooth.le.ScanSettings.SCAN_MODE_OPPORTUNISTIC); scan.background = ((settings.getCallbackType()) & (android.bluetooth.le.ScanSettings.CALLBACK_TYPE_FIRST_MATCH)) != 0; } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_START); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); mGattService.addScanEvent(scanEvent); if (!(isScanning())) { mScanStartTime = startTime; } try { boolean isUnoptimized = !(((scan.filtered) || (scan.background)) || (scan.opportunistic)); mBatteryStats.noteBleScanStarted(workSource, isUnoptimized); } catch (android.os.RemoteException e) { } mOngoingScans.put(scannerId, scan); }
synchronized void recordScanStop(int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan scan = getScanFromScannerId(scannerId); if (scan == null) { return; } (this.mScansStopped)++; stopTime = android.os.SystemClock.elapsedRealtime(); long scanDuration = (stopTime) - (scan.timestamp); scan.duration = scanDuration; if (scan.isSuspended) { long suspendDuration = (stopTime) - (scan.suspendStartTime); scan.suspendDuration += suspendDuration; mTotalSuspendTime += suspendDuration; } mOngoingScans.remove(scannerId); if ((mLastScans.size()) >= (com.android.bluetooth.gatt.AppScanStats.NUM_SCAN_DURATIONS_KEPT)) { mLastScans.remove(0); } mLastScans.add(scan); com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_STOP); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); mGattService.addScanEvent(scanEvent); if (!(isScanning())) { long totalDuration = (stopTime) - (mScanStartTime); mTotalScanTime += totalDuration; mMinScanTime = java.lang.Math.min(totalDuration, mMinScanTime); mMaxScanTime = java.lang.Math.max(totalDuration, mMaxScanTime); } try { boolean isUnoptimized = !(((scan.filtered) || (scan.background)) || (scan.opportunistic)); mBatteryStats.noteBleScanResults(workSource, ((scan.results) % 100)); mBatteryStats.noteBleScanStopped(workSource, isUnoptimized); } catch (android.os.RemoteException e) { } }
private void calculateMatch() { if ((mIsPeripheralAttached) && ((mSelectedProfile) != null)) { com.android.cts.verifier.audio.peripheralprofile.ProfileButtonAttributes mButtonAttributes = mSelectedProfile.getButtonAttributes(); boolean match = mButtonAttributes != null; if (match && ((mButtonAttributes.mHasBtnA) != (mHasBtnA))) { match = false; } if (match && ((mButtonAttributes.mHasBtnB) != (mHasBtnB))) { match = false; } if (match && ((mButtonAttributes.mHasBtnC) != (mHasBtnC))) { match = false; } android.util.Log.i(com.android.cts.verifier.audio.USBAudioPeripheralButtonsActivity.TAG, ("match:" + match)); getPassButton().setEnabled(match); } else { getPassButton().setEnabled(false); } }
public void testAlwaysOnVpnDisabled() throws java.lang.Exception { assertNull(mDevicePolicyManager.getAlwaysOnVpnPackage(com.android.cts.deviceandprofileowner.ADMIN_RECEIVER_COMPONENT)); assertFalse(com.android.cts.deviceandprofileowner.vpn.VpnTestHelper.isNetworkVpn(mContext)); }
private synchronized boolean[] internal_isNfcEventAllowed(byte[] aid, java.lang.String[] packageNames, boolean checkRefreshTag) { if (checkRefreshTag) { updateAccessRuleIfNeed(); } int i = 0; boolean[] nfcEventFlags = new boolean[packageNames.length]; for (java.lang.String packageName : packageNames) { try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { nfcEventFlags[i] = false; } else { com.android.se.security.ChannelAccess channelAccess = getAccessRule(aid, appCerts); nfcEventFlags[i] = (channelAccess.getNFCEventAccess()) == (com.android.se.security.ChannelAccess.ACCESS.ALLOWED); } } catch (java.lang.Exception e) { android.util.Log.w(mTag, (" Access Rules for NFC: " + (e.getLocalizedMessage()))); nfcEventFlags[i] = false; } i++; } return nfcEventFlags; }
private void updateAccessRuleIfNeed() { if ((mUseAra) && ((mAraController) != null)) { try { mAraController.initialize(); mUseArf = false; mFullAccess = false; } catch (java.lang.Exception e) { throw new java.security.AccessControlException(("No ARA applet found in " + (mTerminal.getName()))); } } else if ((mUseArf) && ((mArfController) != null)) { try { mArfController.initialize(); } catch (java.lang.Exception e) { android.util.Log.e(mTag, e.getMessage()); } } }
private synchronized com.android.se.security.ChannelAccess internal_setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag) { if ((packageName == null) || (packageName.isEmpty())) { throw new java.security.AccessControlException("package names must be specified"); } try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw new java.security.AccessControlException("Application certificates are invalid or do not exist."); } if (checkRefreshTag) { updateAccessRuleIfNeed(); } return getAccessRule(aid, appCerts); } catch (java.lang.Throwable exp) { throw new java.security.AccessControlException(exp.getMessage()); } }
public com.android.se.Channel openLogicalChannelWithoutChannelAccess(byte[] aid) throws android.os.RemoteException { return openLogicalChannel(null, aid, ((byte) (0)), null, null, 0); }
public com.android.se.security.ChannelAccess setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag, int pid) { if ((mAccessControlEnforcer) == null) { android.util.Log.e(mTag, "Access Control Enforcer not properly set up"); initializeAccessControl(); } mAccessControlEnforcer.setPackageManager(mContext.getPackageManager()); synchronized(mLock) { try { com.android.se.security.ChannelAccess channelAccess = mAccessControlEnforcer.setUpChannelAccess(aid, packageName, checkRefreshTag); channelAccess.setCallingPid(pid); return channelAccess; } catch (java.lang.Exception e) { throw new java.lang.SecurityException(("Exception in setUpChannelAccess()" + e)); } } }
public byte[] exchangeAPDU(com.android.se.security.arf.pkcs15.EF ef, byte[] cmd) throws com.android.se.security.arf.SecureElementException { try { return mArfChannel.transmit(cmd); } catch (java.lang.Exception e) { throw new com.android.se.security.arf.SecureElementException(("Secure Element access error " + (e.getLocalizedMessage()))); } }
private com.android.se.security.ResponseApdu send(com.android.se.security.CommandApdu cmdApdu) { try { byte[] response = mChannel.transmit(cmdApdu.toBytes()); return new com.android.se.security.ResponseApdu(response); } catch (android.os.RemoteException e) { return null; } }
public com.android.se.Channel openLogicalArfChannel(byte[] aid) throws java.io.IOException { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { return null; } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { android.util.Log.e(mTag, ("no channels left to access ARF: " + (e.getMessage()))); throw ((java.util.MissingResourceException) (e)); } else { android.util.Log.e(mTag, ("Error opening logical channel " + (e.getLocalizedMessage()))); } mArfChannel = null; return null; } }
private synchronized boolean[] internal_isNfcEventAllowed(byte[] aid, java.lang.String[] packageNames, boolean checkRefreshTag) { if (checkRefreshTag) { try { updateAccessRuleIfNeed(false); } catch (java.io.IOException ignore) { } } int i = 0; boolean[] nfcEventFlags = new boolean[packageNames.length]; for (java.lang.String packageName : packageNames) { try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { nfcEventFlags[i] = false; } else { com.android.se.security.ChannelAccess channelAccess = getAccessRule(aid, appCerts); nfcEventFlags[i] = (channelAccess.getNFCEventAccess()) == (com.android.se.security.ChannelAccess.ACCESS.ALLOWED); } } catch (java.lang.Exception e) { android.util.Log.w(mTag, (" Access Rules for NFC: " + (e.getLocalizedMessage()))); nfcEventFlags[i] = false; } i++; } return nfcEventFlags; }
private synchronized com.android.se.security.ChannelAccess internal_setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag) throws java.io.IOException { if ((packageName == null) || (packageName.isEmpty())) { throw new java.security.AccessControlException("package names must be specified"); } try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw new java.security.AccessControlException("Application certificates are invalid or do not exist."); } if (checkRefreshTag) { updateAccessRuleIfNeed(true); } return getAccessRule(aid, appCerts); } catch (java.io.IOException e) { throw e; } catch (java.lang.Throwable exp) { throw new java.security.AccessControlException(exp.getMessage()); } }
private void updateAccessRuleIfNeed(boolean distinguishTemporaryError) throws java.io.IOException { if ((mUseAra) && ((mAraController) != null)) { try { mAraController.initialize(); mUseArf = false; mFullAccess = false; } catch (java.lang.Exception e) { if (distinguishTemporaryError) { if (e instanceof java.io.IOException) { throw e; } } throw new java.security.AccessControlException(("No ARA applet found in " + (mTerminal.getName()))); } } else if ((mUseArf) && ((mArfController) != null)) { try { mArfController.initialize(); } catch (java.lang.Exception e) { if (distinguishTemporaryError) { if (e instanceof java.io.IOException) { throw e; } } android.util.Log.e(mTag, e.getMessage()); } } }
private byte[] transmitInternal(byte[] cmd) throws android.os.RemoteException { java.util.ArrayList<java.lang.Byte> response = mSEHal.transmit(byteArrayToArrayList(cmd)); if (response.isEmpty()) { throw new android.os.ServiceSpecificException(android.se.omapi.SEService.IO_ERROR, "Error in transmit()"); } byte[] rsp = arrayListToByteArray(response); if (mDebug) { android.util.Log.i(mTag, ("Sent : " + (com.android.se.internal.ByteArrayConverter.byteArrayToHexString(cmd)))); android.util.Log.i(mTag, ("Received : " + (com.android.se.internal.ByteArrayConverter.byteArrayToHexString(rsp)))); } return rsp; }
public void setBleTurningOff(boolean isBleTurningOff) { mIsBleTurningOff = isBleTurningOff; }
void startCoreServices() { debugLog("startCoreServices()"); java.lang.Class[] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles(); setAllProfileServiceStates(supportedProfileServices, BluetoothAdapter.STATE_ON); }
boolean stopGattProfileService() { mAdapterProperties.onBleDisable(); if ((mRunningProfiles.size()) == 0) { debugLog("stopGattProfileService() - No profiles services to stop."); mAdapterStateMachine.sendMessage(AdapterState.BLE_STOPPED); } setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); return true; }
boolean stopGattProfileService() { setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); return true; }

public void onBrEdrDown() { mAdapterStateMachine.sendMessage(AdapterState.USER_TURN_OFF); }

@java.lang.Override public boolean processMessage(android.os.Message msg) { com.android.bluetooth.btservice.AdapterService adapterService = mAdapterService; com.android.bluetooth.btservice.AdapterProperties adapterProperties = mAdapterProperties; if ((adapterService == null) || (adapterProperties == null)) { errorLog(("Received message in BleOnState after cleanup: " + (msg.what))); return false; } debugLog(("Current state: BLE ON, message: " + (msg.what))); switch (msg.what) { case com.android.bluetooth.btservice.AdapterState.USER_TURN_ON : notifyAdapterStateChange(BluetoothAdapter.STATE_TURNING_ON); mPendingCommandState.setTurningOn(true); transitionTo(mPendingCommandState); sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT, com.android.bluetooth.btservice.AdapterState.BREDR_START_TIMEOUT_DELAY); adapterService.startCoreServices(); break; case com.android.bluetooth.btservice.AdapterState.USER_TURN_OFF : notifyAdapterStateChange(BluetoothAdapter.STATE_BLE_TURNING_OFF); mPendingCommandState.setBleTurningOff(true); adapterProperties.onBleDisable(); transitionTo(mPendingCommandState); sendMessageDelayed(com.android.bluetooth.btservice.AdapterState.DISABLE_TIMEOUT, com.android.bluetooth.btservice.AdapterState.DISABLE_TIMEOUT_DELAY); boolean ret = adapterService.disableNative(); if (!ret) { removeMessages(com.android.bluetooth.btservice.AdapterState.DISABLE_TIMEOUT); errorLog("Error while calling disableNative"); mPendingCommandState.setBleTurningOff(false); notifyAdapterStateChange(BluetoothAdapter.STATE_BLE_ON); } break; default : return false; } return true; }
private void notifyAdapterStateChange(int newState) { com.android.bluetooth.btservice.AdapterService adapterService = mAdapterService; com.android.bluetooth.btservice.AdapterProperties adapterProperties = mAdapterProperties; if ((adapterService == null) || (adapterProperties == null)) { errorLog(("notifyAdapterStateChange after cleanup:" + newState)); return; } int oldState = adapterProperties.getState(); adapterProperties.setState(newState); infoLog(((("Bluetooth adapter state changed: " + (android.bluetooth.BluetoothAdapter.nameForState(oldState))) + "-> ") + (android.bluetooth.BluetoothAdapter.nameForState(newState)))); adapterService.updateAdapterState(oldState, newState); }

private void infoLog(java.lang.String msg) { if (com.android.bluetooth.btservice.AdapterState.DBG) { android.util.Log.i(com.android.bluetooth.btservice.AdapterState.TAG, msg); } }


@java.lang.Override public void enter() { infoLog("Entering PendingCommandState"); }
private void logTransientStates() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append("PendingCommand - transient state(s):"); if (isTurningOn()) { sb.append(" isTurningOn"); } if (isTurningOff()) { sb.append(" isTurningOff"); } if (isBleTurningOn()) { sb.append(" isBleTurningOn"); } if (isBleTurningOff()) { sb.append(" isBleTurningOff"); } verboseLog(sb.toString()); }

@java.lang.Override public void enter() { infoLog("Entering BleOnState"); }













private synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { }
@java.lang.Override protected boolean start() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, "start()"); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) != null) { throw new java.lang.IllegalStateException("start() called twice"); } mAdapter = java.util.Objects.requireNonNull(android.bluetooth.BluetoothAdapter.getDefaultAdapter(), "BluetoothAdapter cannot be null when HearingAidService starts"); mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapterService(), "AdapterService cannot be null when HearingAidService starts"); mStateMachinesThread = new android.os.HandlerThread("HearingAidService.StateMachines"); mStateMachinesThread.start(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.BondStateChangedReceiver(); registerReceiver(mBondStateChangedReceiver, filter); filter = new android.content.IntentFilter(); filter.addAction(BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); mConnectionStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(this); setActiveDevice(null); return true; }
java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_PERM, "Need BLUETOOTH permission"); return new java.util.ArrayList<>(); }
boolean okToConnect(android.bluetooth.BluetoothDevice device) { throw new java.lang.IllegalStateException("Implement me"); }
@java.lang.Override protected boolean stop() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, "stop()"); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidService.TAG, "stop() called before start()"); return true; } setActiveDevice(null); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(null); unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; if ((mStateMachinesThread) != null) { mStateMachinesThread.quitSafely(); mStateMachinesThread = null; } mAdapterService = null; mAdapter = null; return true; }
public synchronized boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); return false; }
@java.lang.Override public void setVolume(int volume) { }
boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("disconnect(): " + device)); } return false; }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (!(BluetoothDevice.ACTION_BOND_STATE_CHANGED.equals(intent.getAction()))) { return; } int state = intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.ERROR); android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((("Bond state changed for device: " + device) + " state: ") + state)); } if (state != (android.bluetooth.BluetoothDevice.BOND_NONE)) { return; } }
@java.lang.Override protected void cleanup() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, "cleanup()"); } }
@java.lang.Override protected void create() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, "create()"); } }
static android.telephony.SignalStrength convertHalSignalStrength(android.hardware.radio.V1_0.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gw.signalStrength, signalStrength.gw.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, signalStrength.tdScdma.rscp); }
static android.telephony.SignalStrength convertHalSignalStrength_1_2(android.hardware.radio.V1_2.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gsm.signalStrength, signalStrength.gsm.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, signalStrength.tdScdma.rscp); }


public static void arraycopy(float[] src, int srcPos, float[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + " dst.length=") + (dst.length)) + " dstPos=") + dstPos) + " length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_FLOAT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyFloatUnchecked(src, srcPos, dst, dstPos, length); } }
public static void arraycopy(long[] src, int srcPos, long[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + " dst.length=") + (dst.length)) + " dstPos=") + dstPos) + " length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_LONG_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyLongUnchecked(src, srcPos, dst, dstPos, length); } }
public static void arraycopy(char[] src, int srcPos, char[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + " dst.length=") + (dst.length)) + " dstPos=") + dstPos) + " length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_CHAR_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyCharUnchecked(src, srcPos, dst, dstPos, length); } }
public static void arraycopy(byte[] src, int srcPos, byte[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + " dst.length=") + (dst.length)) + " dstPos=") + dstPos) + " length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_BYTE_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyByteUnchecked(src, srcPos, dst, dstPos, length); } }
public static void arraycopy(double[] src, int srcPos, double[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + " dst.length=") + (dst.length)) + " dstPos=") + dstPos) + " length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_DOUBLE_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyDoubleUnchecked(src, srcPos, dst, dstPos, length); } }
public static void arraycopy(boolean[] src, int srcPos, boolean[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + " dst.length=") + (dst.length)) + " dstPos=") + dstPos) + " length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_BOOLEAN_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyBooleanUnchecked(src, srcPos, dst, dstPos, length); } }
public static void arraycopy(short[] src, int srcPos, short[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + " dst.length=") + (dst.length)) + " dstPos=") + dstPos) + " length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_SHORT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyShortUnchecked(src, srcPos, dst, dstPos, length); } }
public static void arraycopy(int[] src, int srcPos, int[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException("src == null"); } if (dst == null) { throw new java.lang.NullPointerException("dst == null"); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException(((((((((("src.length=" + (src.length)) + " srcPos=") + srcPos) + " dst.length=") + (dst.length)) + " dstPos=") + dstPos) + " length=") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_INT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyIntUnchecked(src, srcPos, dst, dstPos, length); } }
private int getDexFlags(android.content.pm.ApplicationInfo info, java.lang.String compilerFilter, com.android.server.pm.dex.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) != 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = (!(info.isForwardLocked())) && ((!isProfileGuidedFilter) || (options.isDexoptInstallWithDexMetadata())); int profileFlag = (isProfileGuidedFilter) ? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int hiddenApiFlag = (info.isAllowedToUseHiddenApi()) ? 0 : com.android.server.pm.Installer.DEXOPT_ENABLE_HIDDEN_API_CHECKS; int dexFlags = (((((isPublic ? com.android.server.pm.Installer.DEXOPT_PUBLIC : 0) | (debuggable ? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | profileFlag) | (options.isBootComplete() ? com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE : 0)) | (options.isDexoptIdleBackgroundJob() ? com.android.server.pm.Installer.DEXOPT_IDLE_BACKGROUND_JOB : 0)) | hiddenApiFlag; return adjustDexoptFlags(dexFlags); }

public int ratchetRat(int oldRat, int newRat) { synchronized(mRatFamilyMap) { final android.util.SparseIntArray oldFamily = mRatFamilyMap.get(oldRat); if (oldFamily == null) return newRat; final android.util.SparseIntArray newFamily = mRatFamilyMap.get(newRat); if (newFamily != oldFamily) return newRat; final int oldRatRank = newFamily.get(oldRat, (-1)); final int newRatRank = newFamily.get(newRat, (-1)); return oldRatRank > newRatRank ? oldRat : newRat; } }

@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "ab5f9585-433b-4261-bd15-5c7136f6127b") public void testPhotoCapture() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); java.lang.String originalPhotoList = listPhotos(instrumentation); if ((testFramework.getApi()) >= 24) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launchPath(instrumentation, new java.lang.String[]{ "Camera" }); new com.android.devtools.systemimage.uitest.watchers.CameraAccessPermissionsWatcher(device).checkForCondition(); android.support.test.uiautomator.UiObject shutterButton = device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.CAMERA_SHUTTER_BUTTON_RES)); if (shutterButton.waitForExists(3L)) { shutterButton.clickAndWaitForNewWindow(); } java.lang.String newPhotoList = listPhotos(instrumentation); org.junit.Assert.assertFalse("Photo gallery has not been updated", originalPhotoList.equals(newPhotoList)); android.support.test.uiautomator.UiObject photoThumbnail = device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.CAMERA_PHOTO_THUMBNAIL_RES)); if (photoThumbnail.waitForExists(3L)) { photoThumbnail.clickAndWaitForNewWindow(); } android.support.test.uiautomator.UiObject trashCan = device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.CAMERA_PHOTO_DELETE_RES)); if (trashCan.waitForExists(3L)) { trashCan.click(); } device.pressBack(); device.pressHome(); java.lang.String lastPhotoList = listPhotos(instrumentation); org.junit.Assert.assertTrue("New photo was not deleted", originalPhotoList.equals(lastPhotoList)); } }
private void launchInputActivity(int slotId) { android.content.Intent newIntent = new android.content.Intent(android.content.Intent.ACTION_VIEW); java.lang.String targetActivity = com.android.stk.StkAppService.STK_INPUT_ACTIVITY_NAME; java.lang.String uriString = (com.android.stk.StkAppService.STK_INPUT_URI) + (java.lang.System.currentTimeMillis()); android.net.Uri uriData = android.net.Uri.parse(uriString); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("launchInputActivity, slotId: " + slotId)); newIntent.setFlags(((android.content.Intent.FLAG_ACTIVITY_NEW_TASK) | (getFlagActivityNoUserAction(com.android.stk.StkAppService.InitiatedByUserAction.unknown, slotId)))); newIntent.setClassName(com.android.stk.StkAppService.PACKAGE_NAME, targetActivity); newIntent.putExtra("INPUT", mStkContext[slotId].mCurrentCmd.geInput()); newIntent.putExtra(com.android.stk.StkAppService.SLOT_ID, slotId); newIntent.setData(uriData); mContext.startActivity(newIntent); }
@java.lang.Override protected void onRestoreInstanceState(android.os.Bundle savedInstanceState) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ("onRestoreInstanceState: " + (mSlotId))); mState = savedInstanceState.getInt("STATE"); mStkMenu = savedInstanceState.getParcelable("MENU"); mAcceptUsersInput = savedInstanceState.getBoolean("ACCEPT_USERS_INPUT"); }
@java.lang.Override public void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "onCreate"); android.app.ActionBar actionBar = getActionBar(); actionBar.setCustomView(R.layout.stk_title); actionBar.setDisplayShowCustomEnabled(true); setContentView(R.layout.stk_menu_list); mInstance = this; mTitleTextView = ((android.widget.TextView) (findViewById(R.id.title_text))); mTitleIconView = ((android.widget.ImageView) (findViewById(R.id.title_icon))); mProgressView = ((android.widget.ProgressBar) (findViewById(R.id.progress_bar))); mContext = getBaseContext(); mAcceptUsersInput = true; getListView().setOnCreateContextMenuListener(this); if ((appService) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "onCreate - appService is null"); finish(); return; } initFromIntent(getIntent()); }
@java.lang.Override public void onDestroy() { getListView().setOnCreateContextMenuListener(null); super.onDestroy(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, (("onDestroy" + ",") + (mState))); if ((appService) == null) { return; } if ((((mState) == (com.android.stk.StkMenuActivity.STATE_SECONDARY)) && (!(mIsResponseSent))) && (!(appService.isMenuPending(mSlotId)))) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "handleDestroy - Send End Session"); sendResponse(StkAppService.RES_ID_END_SESSION); } if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { if ((appService) != null) { appService.getStkContext(mSlotId).setMainActivityInstance(null); } else { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "onDestroy: null appService."); } } }
private void updateBoundCarrierServices(int subId) { int slotId = mSubscriptionManagerProxy.getSlotIndex(subId); java.lang.String newPackageName = mCarrierConfigManager.getConfigForSubId(subId).getString(CarrierConfigManager.KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING, null); if ((slotId != (android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX)) && (slotId < (mNumSlots))) { java.lang.String oldPackageName = mCarrierServices[slotId]; mCarrierServices[slotId] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "Carrier Config updated, binding new ImsService"); unbindImsService(getImsServiceInfoFromCache(oldPackageName)); bindNewImsService(getImsServiceInfoFromCache(newPackageName)); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } } }


public static void gc() { boolean shouldRunGC; synchronized(java.lang.System.LOCK) { shouldRunGC = java.lang.System.justRanFinalization; if (shouldRunGC) { java.lang.System.justRanFinalization = false; } else { java.lang.System.runGC = true; } } if (shouldRunGC) { java.lang.Runtime.getRuntime().gc(); } }
public void test_classLoader_exceptionDuringLoading() throws java.lang.Exception { final java.io.File jar = libcore.dalvik.system.PathClassLoaderTest.extractResourceJar("loading-test"); final dalvik.system.PathClassLoader pcl = new dalvik.system.PathClassLoader(jar.getAbsolutePath(), java.lang.Object.class.getClassLoader()); dalvik.system.BlockGuard.Policy policy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { throw new java.lang.RuntimeException("onWriteToDisk"); } @java.lang.Override public void onReadFromDisk() { throw new java.lang.RuntimeException("onReadFromDisk"); } @java.lang.Override public void onNetwork() { throw new java.lang.RuntimeException("onNetwork"); } @java.lang.Override public void onUnbufferedIO() { throw new java.lang.RuntimeException("onUnbufferedIO"); } @java.lang.Override public int getPolicyMask() { return 0; } }); try { try { pcl.getResource("test/Resource1.txt"); fail(); } catch (java.lang.RuntimeException expected) { } } finally { dalvik.system.BlockGuard.setThreadPolicy(policy); } assertNotNull(pcl.getResource("test/Resource1.txt")); }

public void testHashCodeAndEqualsDoesNotPerformNetworkIo() throws java.lang.Exception { final dalvik.system.BlockGuard.Policy oldPolicy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { fail("Blockguard.Policy.onWriteToDisk"); } @java.lang.Override public void onReadFromDisk() { fail("Blockguard.Policy.onReadFromDisk"); } @java.lang.Override public void onNetwork() { fail("Blockguard.Policy.onNetwork"); } @java.lang.Override public void onUnbufferedIO() { fail("Blockguard.Policy.onUnbufferedIO"); } @java.lang.Override public int getPolicyMask() { return 0; } }); try { java.net.URL url = new java.net.URL("http://www.google.com/"); java.net.URL url2 = new java.net.URL("http://www.nest.com/"); url.equals(url2); url2.hashCode(); } finally { dalvik.system.BlockGuard.setThreadPolicy(oldPolicy); } }



private void updatePreferredNetworkUIFromDb() { final int phoneSubId = mPhone.getSubId(); int settingsNetworkMode = android.provider.Settings.Global.getInt(mPhone.getContext().getContentResolver(), ((android.provider.Settings.Global.PREFERRED_NETWORK_MODE) + phoneSubId), com.android.phone.MobileNetworkSettings.MobileNetworkFragment.preferredNetworkMode); if (com.android.phone.MobileNetworkSettings.MobileNetworkFragment.DBG) { com.android.phone.MobileNetworkSettings.MobileNetworkFragment.log(("updatePreferredNetworkUIFromDb: settingsNetworkMode = " + settingsNetworkMode)); } UpdatePreferredNetworkModeSummary(settingsNetworkMode); UpdateEnabledNetworksValueAndSummary(settingsNetworkMode); mButtonPreferredNetworkMode.setValue(java.lang.Integer.toString(settingsNetworkMode)); }
@java.lang.Override public boolean setPreferredNetworkType(int subId, int networkType) { enforceModifyPermissionOrCarrierPrivilege(subId); if (com.android.phone.PhoneInterfaceManager.DBG) com.android.phone.PhoneInterfaceManager.log(((("setPreferredNetworkType: subId " + subId) + " type ") + networkType)); java.lang.Boolean success = ((java.lang.Boolean) (sendRequest(com.android.phone.PhoneInterfaceManager.CMD_SET_PREFERRED_NETWORK_TYPE, networkType, subId))); if (com.android.phone.PhoneInterfaceManager.DBG) com.android.phone.PhoneInterfaceManager.log(("setPreferredNetworkType: " + (success ? "ok" : "fail"))); if (success) { Settings.Global.putInt(mPhone.getContext().getContentResolver(), ((Settings.Global.PREFERRED_NETWORK_MODE) + subId), networkType); } return success; }
@java.lang.Override public void factoryReset(int subId) { enforceConnectivityInternalPermission(); if (mUserManager.hasUserRestriction(UserManager.DISALLOW_NETWORK_RESET)) { return; } final long identity = android.os.Binder.clearCallingIdentity(); try { if ((android.telephony.SubscriptionManager.isUsableSubIdValue(subId)) && (!(mUserManager.hasUserRestriction(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS)))) { setDataEnabled(subId, true); setNetworkSelectionModeAutomatic(subId); setPreferredNetworkType(subId, Phone.PREFERRED_NT_MODE); mPhone.setDataRoamingEnabled(false); } } finally { android.os.Binder.restoreCallingIdentity(identity); } }
public static int calculatePreferredNetworkType(android.content.Context context, int phoneSubId) { int networkType = android.provider.Settings.Global.getInt(context.getContentResolver(), ((android.provider.Settings.Global.PREFERRED_NETWORK_MODE) + phoneSubId), RILConstants.PREFERRED_NETWORK_MODE); android.telephony.Rlog.d(com.android.internal.telephony.PhoneFactory.LOG_TAG, ((("calculatePreferredNetworkType: phoneSubId = " + phoneSubId) + " networkType = ") + networkType)); return networkType; }
private void recoverBluetoothServiceFromError(boolean clearBle) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "recoverBluetoothServiceFromError"); try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { mBluetooth.unregisterCallback(mBluetoothCallback); } } catch (android.os.RemoteException re) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Unable to unregister", re); } finally { mBluetoothLock.readLock().unlock(); } android.os.SystemClock.sleep(500); addActiveLog(com.android.server.BluetoothManagerService.REASON_START_CRASH, false); handleDisable(); waitForOnOff(false, true); sendBluetoothServiceDownCallback(); try { mBluetoothLock.writeLock().lock(); if ((mBluetooth) != null) { mBluetooth = null; mContext.unbindService(mConnection); } mBluetoothGatt = null; } finally { mBluetoothLock.writeLock().unlock(); } mHandler.removeMessages(com.android.server.BluetoothManagerService.MESSAGE_BLUETOOTH_STATE_CHANGE); mState = android.bluetooth.BluetoothAdapter.STATE_OFF; if (clearBle) { clearBleApps(); } mEnable = false; if (((mErrorRecoveryRetryCounter)++) < (com.android.server.BluetoothManagerService.MAX_ERROR_RESTART_RETRIES)) { android.os.Message restartMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_RESTART_BLUETOOTH_SERVICE); mHandler.sendMessageDelayed(restartMsg, com.android.server.BluetoothManagerService.ERROR_RESTART_TIME_MS); } else { } }
public boolean enable(java.lang.String packageName) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "enable(): not enabling - bluetooth disallowed"); } return false; } if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, "enable(): not allowed for non-active and non system user"); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (((!(isEnabled())) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_ENABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ((((((("enable(" + packageName) + "): mBluetooth =") + (mBluetooth)) + " mBinding = ") + (mBinding)) + " mState = ") + (android.bluetooth.BluetoothAdapter.nameForState(mState)))); } synchronized(mReceiver) { mQuietEnableExternal = false; mEnableExternal = true; sendEnableMsg(false, packageName); } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "enable returning"); } return true; }
@java.lang.Override public void onChange(boolean unused) { synchronized(this) { if (isBluetoothPersistedStateOn()) { if (isAirplaneModeOn()) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_AIRPLANE); } else { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_BLUETOOTH); } } int st = android.bluetooth.BluetoothAdapter.STATE_OFF; try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { st = mBluetooth.getState(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Unable to call getState", e); return; } finally { mBluetoothLock.readLock().unlock(); } android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ("Airplane Mode change - current state: " + (android.bluetooth.BluetoothAdapter.nameForState(st)))); if (isAirplaneModeOn()) { clearBleApps(); if (st == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON)) { try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { mBluetooth.onBrEdrDown(); mEnable = false; mEnableExternal = false; } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Unable to call onBrEdrDown", e); } finally { mBluetoothLock.readLock().unlock(); } } else if (st == (android.bluetooth.BluetoothAdapter.STATE_ON)) { sendDisableMsg(com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE); } } else if (mEnableExternal) { sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE); } } }
public boolean enableNoAutoConnect(java.lang.String packageName) { if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "enableNoAutoConnect(): not enabling - bluetooth disallowed"); } return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ((("enableNoAutoConnect(): mBluetooth =" + (mBluetooth)) + " mBinding = ") + (mBinding))); } int callingAppId = android.os.UserHandle.getAppId(android.os.Binder.getCallingUid()); if (callingAppId != (NFC_UID)) { throw new java.lang.SecurityException("no permission to enable Bluetooth quietly"); } synchronized(mReceiver) { mQuietEnableExternal = true; mEnableExternal = true; sendEnableMsg(true, packageName); } return true; }
public boolean disable(java.lang.String packageName, boolean persist) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, "disable(): not allowed for non-active and non system user"); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (((isEnabled()) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_DISABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ((("disable(): mBluetooth = " + (mBluetooth)) + " mBinding = ") + (mBinding))); } synchronized(mReceiver) { if (persist) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_OFF); } mEnableExternal = false; sendDisableMsg(packageName); } return true; }
@java.lang.Override public void onUserRestrictionsChanged(int userId, android.os.Bundle newRestrictions, android.os.Bundle prevRestrictions) { if (com.android.server.pm.UserRestrictionsUtils.restrictionsChanged(prevRestrictions, newRestrictions, UserManager.DISALLOW_BLUETOOTH_SHARING)) { updateOppLauncherComponentState(userId, newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH_SHARING)); } if ((userId == (android.os.UserHandle.USER_SYSTEM)) && (com.android.server.pm.UserRestrictionsUtils.restrictionsChanged(prevRestrictions, newRestrictions, UserManager.DISALLOW_BLUETOOTH))) { if ((userId == (android.os.UserHandle.USER_SYSTEM)) && (newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH))) { updateOppLauncherComponentState(userId, true); sendDisableMsg(com.android.server.BluetoothManagerService.REASON_DISALLOWED); } else { updateOppLauncherComponentState(userId, newRestrictions.getBoolean(UserManager.DISALLOW_BLUETOOTH_SHARING)); } } }

public void handleOnBootPhase() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "Bluetooth boot completed"); } android.os.UserManagerInternal userManagerInternal = com.android.server.LocalServices.getService(android.os.UserManagerInternal.class); userManagerInternal.addUserRestrictionsListener(mUserRestrictionsListener); final boolean isBluetoothDisallowed = isBluetoothDisallowed(); if (isBluetoothDisallowed) { return; } if ((mEnableExternal) && (isBluetoothPersistedStateOnBluetooth())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "Auto-enabling Bluetooth."); } sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_SYSTEM_BOOT); } else if (!(isNameAndAddressSet())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "Getting adapter name and address"); } android.os.Message getMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_GET_NAME_AND_ADDRESS); mHandler.sendMessage(getMsg); } }
public java.lang.String toString() { return (((timeToLog(mTimestamp)) + (mEnable ? " Enabled " : " Disabled ")) + " by ") + (mPackageName); }

@org.junit.Test public void testNoBrowsingMediaUpdates() { android.os.TestLooperManager looperManager = new android.os.TestLooperManager(mThread.getLooper()); com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = com.android.bluetooth.avrcp.MediaPlayerWrapper.wrap(mMockController, mThread.getLooper(), false); wrapper.registerCallback(mTestCbs); verify(mMockController).registerCallback(mControllerCbs.capture(), any()); com.android.bluetooth.avrcp.MediaController.Callback controllerCallbacks = mControllerCbs.getValue(); mTestMetadata.putString(MediaMetadata.METADATA_KEY_TITLE, "New Title"); doReturn(mTestMetadata.build()).when(mMockController).getMetadata(); controllerCallbacks.onMetadataChanged(mTestMetadata.build()); verify(mTestCbs, times(1)).mediaUpdatedCallback(mMediaUpdateData.capture()); com.android.bluetooth.avrcp.MediaPlayerWrapper.MediaData data = mMediaUpdateData.getValue(); org.junit.Assert.assertEquals("Returned Metadata isn't equal to given Metadata", data.metadata.getDescription(), mTestMetadata.build().getDescription()); org.junit.Assert.assertEquals("Returned PlaybackState isn't equal to original PlaybackState", data.state.toString(), mTestState.build().toString()); org.junit.Assert.assertNull("Returned Queue isn't null", data.queue); mTestState.setActiveQueueItemId(103); doReturn(mTestState.build()).when(mMockController).getPlaybackState(); controllerCallbacks.onPlaybackStateChanged(mTestState.build()); verify(mTestCbs, times(2)).mediaUpdatedCallback(mMediaUpdateData.capture()); data = mMediaUpdateData.getValue(); org.junit.Assert.assertEquals("Returned PlaybackState isn't equal to given PlaybackState", data.state.toString(), mTestState.build().toString()); org.junit.Assert.assertEquals("Returned Metadata isn't equal to given Metadata", data.metadata.getDescription(), mTestMetadata.build().getDescription()); org.junit.Assert.assertNull("Returned Queue isn't null", data.queue); org.junit.Assert.assertFalse(wrapper.getTimeoutHandler().hasMessages(com.android.bluetooth.avrcp.MediaPlayerWrapperTest.MSG_TIMEOUT)); verify(mFailHandler, never()).onTerribleFailure(any(), any(), anyBoolean()); }

boolean isBrowsable() { return mIsBrowsable; }
public android.net.NetworkInfo.DetailedState getDetailedState() { synchronized(this) { return mDetailedState; } }
public boolean isConnected() { synchronized(this) { return (mState) == (android.net.NetworkInfo.State.CONNECTED); } }









@java.lang.Override public void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkInputActivity.LOG_TAG, (("onCreate - mIsResponseSent[" + (mIsResponseSent)) + "]")); if ((appService) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkInputActivity.LOG_TAG, "onCreate - appService is null"); finish(); return; } android.app.ActionBar actionBar = null; if (getResources().getBoolean(R.bool.show_menu_title_only_on_menu)) { actionBar = getActionBar(); if (actionBar != null) { actionBar.hide(); } } setContentView(R.layout.stk_input); if (actionBar != null) { mMoreOptions = findViewById(R.id.more); mMoreOptions.setVisibility(View.VISIBLE); mMoreOptions.setOnClickListener(this); } mTextIn = ((android.widget.EditText) (this.findViewById(R.id.in_text))); mPromptView = ((android.widget.TextView) (this.findViewById(R.id.prompt))); mInstance = this; android.widget.Button okButton = ((android.widget.Button) (findViewById(R.id.button_ok))); android.widget.Button yesButton = ((android.widget.Button) (findViewById(R.id.button_yes))); android.widget.Button noButton = ((android.widget.Button) (findViewById(R.id.button_no))); okButton.setOnClickListener(this); yesButton.setOnClickListener(this); noButton.setOnClickListener(this); mYesNoLayout = findViewById(R.id.yes_no_layout); mNormalLayout = findViewById(R.id.normal_layout); initFromIntent(getIntent()); mContext = getBaseContext(); mAcceptUsersInput = true; }
@android.telephony.ServiceState.DuplexMode public int getDuplexMode() { return android.telephony.ServiceState.DUPLEX_MODE_UNKNOWN; }


public void testAppDetails() throws java.lang.Exception { for (int i = 0; i < (mNetworkInterfacesToTest.length); ++i) { if (!(shouldTestThisNetworkType(i, ((android.app.usage.cts.NetworkUsageStatsTest.MINUTE) * 120)))) { continue; } setAppOpsMode(AppOpsManager.OPSTR_GET_USAGE_STATS, "allow"); android.app.usage.NetworkStats result = null; try { result = mNsm.queryDetails(mNetworkInterfacesToTest[i].getNetworkType(), getSubscriberId(i), mStartTime, mEndTime); assertTrue((result != null)); android.app.usage.NetworkStats.Bucket bucket = new android.app.usage.NetworkStats.Bucket(); long totalTxPackets = 0; long totalRxPackets = 0; long totalTxBytes = 0; long totalRxBytes = 0; while (result.hasNextBucket()) { assertTrue(result.getNextBucket(bucket)); assertTimestamps(bucket); assertEquals(bucket.getState(), NetworkStats.Bucket.STATE_ALL); assertEquals(bucket.getMetered(), NetworkStats.Bucket.METERED_ALL); assertEquals(bucket.getDefaultNetwork(), NetworkStats.Bucket.DEFAULT_NETWORK_ALL); if ((bucket.getUid()) == (java.lang.Process.myUid())) { totalTxPackets += bucket.getTxPackets(); totalRxPackets += bucket.getRxPackets(); totalTxBytes += bucket.getTxBytes(); totalRxBytes += bucket.getRxBytes(); } } assertFalse(result.getNextBucket(bucket)); assertTrue(("No Rx bytes usage for uid " + (java.lang.Process.myUid())), (totalRxBytes > 0)); assertTrue(("No Rx packets usage for uid " + (java.lang.Process.myUid())), (totalRxPackets > 0)); assertTrue(("No Tx bytes usage for uid " + (java.lang.Process.myUid())), (totalTxBytes > 0)); assertTrue(("No Tx packets usage for uid " + (java.lang.Process.myUid())), (totalTxPackets > 0)); } catch (android.os.RemoteException | java.lang.SecurityException e) { fail(("testAppDetails fails with exception: " + (e.toString()))); } finally { if (result != null) { result.close(); } } setAppOpsMode(AppOpsManager.OPSTR_GET_USAGE_STATS, "deny"); try { result = mNsm.queryDetails(mNetworkInterfacesToTest[i].getNetworkType(), getSubscriberId(i), mStartTime, mEndTime); fail("negative testAppDetails fails: no exception thrown."); } catch (android.os.RemoteException e) { fail(("testAppDetails fails with exception: " + (e.toString()))); } catch (java.lang.SecurityException e) { } } }

private void maybeAddedImsService(java.lang.String packageName) { android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, ("maybeAddedImsService, packageName: " + packageName)); java.util.List<com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo> infos = getImsServiceInfo(packageName); java.util.List<com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo> newlyAddedInfos = new java.util.ArrayList<>(); for (com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info : infos) { java.util.Optional<com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo> match = getInfoByComponentName(mInstalledServicesCache, info.name); if (match.isPresent()) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("Updating features in cached ImsService: " + (info.name))); android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, ((("Updating features - Old features: " + (match.get().supportedFeatures)) + " new features: ") + (info.supportedFeatures))); match.get().supportedFeatures = info.supportedFeatures; updateImsServiceFeatures(info); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("Adding newly added ImsService to cache: " + (info.name))); mInstalledServicesCache.add(info); newlyAddedInfos.add(info); } } for (com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info : newlyAddedInfos) { if (isActiveCarrierService(info)) { bindNewImsService(info); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } else if (isDeviceService(info)) { bindNewImsService(info); } } }
private void bindNewImsService(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info) { if (info == null) { return; } com.android.internal.telephony.ims.ImsServiceController controller = info.controllerFactory.create(mContext, info.name, this); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features = calculateFeaturesToCreate(info); if ((features.size()) > 0) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ((("Binding ImsService: " + (controller.getComponentName())) + " with features: ") + features)); controller.bind(features); mActiveControllers.add(controller); } }


@java.lang.Override public int hashCode() { int result = ((name) != null) ? name.hashCode() : 0; result = (31 * result) + ((supportedFeatures) != null ? supportedFeatures.hashCode() : 0); result = (31 * result) + ((controllerFactory) != null ? controllerFactory.hashCode() : 0); return result; }

private void updateBoundCarrierServices(int subId) { int slotId = mSubscriptionManagerProxy.getSlotIndex(subId); java.lang.String newPackageName = mCarrierConfigManager.getConfigForSubId(subId).getString(CarrierConfigManager.KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING, null); if ((slotId != (android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX)) && (slotId < (mNumSlots))) { java.lang.String oldPackageName = mCarrierServices[slotId]; mCarrierServices[slotId] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "Carrier Config updated, binding new ImsService"); unbindImsService(getImsServiceInfoFromCache(oldPackageName)); bindNewImsService(getImsServiceInfoFromCache(newPackageName)); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } } }


private java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> calculateFeaturesToCreate(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info) { java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> imsFeaturesBySlot = new java.util.HashSet<>(); int slotId = getSlotForActiveCarrierService(info); if (slotId != (android.telephony.SubscriptionManager.INVALID_SUBSCRIPTION_ID)) { imsFeaturesBySlot.addAll(info.supportedFeatures.stream().map(( feature) -> new android.util.Pair(slotId, feature)).collect(java.util.stream.Collectors.toList())); } else if (isDeviceService(info)) { for (int i = 0; i < (mNumSlots); i++) { final int currSlotId = i; com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo carrierImsInfo = getImsServiceInfoFromCache(mCarrierServices[i]); if (carrierImsInfo == null) { imsFeaturesBySlot.addAll(info.supportedFeatures.stream().map(( feature) -> new android.util.Pair(currSlotId, feature)).collect(java.util.stream.Collectors.toList())); } else { java.util.Set<java.lang.Integer> deviceFeatures = new java.util.HashSet<>(info.supportedFeatures); deviceFeatures.removeAll(carrierImsInfo.supportedFeatures); imsFeaturesBySlot.addAll(deviceFeatures.stream().map(( feature) -> new android.util.Pair(currSlotId, feature)).collect(java.util.stream.Collectors.toList())); } } } return imsFeaturesBySlot; }


private boolean isImsServiceInfoEqual(android.content.ComponentName name, java.util.Set<java.lang.String> features, com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo sInfo) { if (!(java.util.Objects.equals(sInfo.name, name))) { return false; } for (java.lang.String f : features) { switch (f) { case ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE : if (!(sInfo.supportedFeatures.contains(ImsFeature.FEATURE_EMERGENCY_MMTEL))) { return false; } break; case ImsResolver.METADATA_MMTEL_FEATURE : if (!(sInfo.supportedFeatures.contains(ImsFeature.FEATURE_MMTEL))) { return false; } break; case ImsResolver.METADATA_RCS_FEATURE : if (!(sInfo.supportedFeatures.contains(ImsFeature.FEATURE_RCS))) { return false; } break; } } return true; }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testAddPackageToCache() { setupResolver(1); java.util.List<android.content.pm.ResolveInfo> info = new java.util.ArrayList<>(); java.util.Set<java.lang.String> features = new java.util.HashSet<>(); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); info.add(getResolveInfo(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME, features, true)); when(mMockPM.queryIntentServicesAsUser(any(), anyInt(), anyInt())).thenReturn(info); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); mTestImsResolver.populateCacheAndStartBind(); waitForHandlerAction(mTestImsResolver.getHandler(), com.android.internal.telephony.ims.ImsResolverTest.TEST_TIMEOUT); com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo testCachedService = mTestImsResolver.getImsServiceInfoFromCache(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName()); junit.framework.Assert.assertNotNull(testCachedService); junit.framework.Assert.assertTrue(isImsServiceInfoEqual(com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME, features, testCachedService)); }


private void cancelAllNotifications() { if (com.android.internal.telephony.ServiceStateTracker.DBG) log("setNotification: cancelAllNotifications"); android.app.NotificationManager notificationManager = ((android.app.NotificationManager) (mPhone.getContext().getSystemService(Context.NOTIFICATION_SERVICE))); notificationManager.cancel(com.android.internal.telephony.ServiceStateTracker.PS_NOTIFICATION); notificationManager.cancel(com.android.internal.telephony.ServiceStateTracker.CS_NOTIFICATION); notificationManager.cancel(com.android.internal.telephony.ServiceStateTracker.CS_REJECT_CAUSE_NOTIFICATION); }
private void processCodecConfigEvent(android.bluetooth.BluetoothCodecStatus newCodecStatus) { android.bluetooth.BluetoothCodecConfig prevCodecConfig = null; synchronized(this) { if ((mCodecStatus) != null) { prevCodecConfig = mCodecStatus.getCodecConfig(); } mCodecStatus = newCodecStatus; } if (com.android.bluetooth.a2dp.A2dpStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ((("A2DP Codec Config: " + prevCodecConfig) + "->") + (newCodecStatus.getCodecConfig()))); for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsLocalCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("A2DP Codec Local Capability: " + codecConfig)); } for (android.bluetooth.BluetoothCodecConfig codecConfig : newCodecStatus.getCodecsSelectableCapabilities()) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ("A2DP Codec Selectable Capability: " + codecConfig)); } } boolean sameAudioFeedingParameters = newCodecStatus.getCodecConfig().sameAudioFeedingParameters(prevCodecConfig); mA2dpService.codecConfigUpdated(mDevice, mCodecStatus, sameAudioFeedingParameters); }
private void removeImsServiceFeature(android.util.Pair<java.lang.Integer, java.lang.Integer> featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, "removeImsServiceFeature called with null values."); return; } com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback callbackToRemove = mFeatureStatusCallbacks.stream().filter(( c) -> ((c.mSlotId) == (featurePair.first)) && ((c.mFeatureType) == (featurePair.second))).findFirst().orElse(null); if (callbackToRemove != null) { mFeatureStatusCallbacks.remove(callbackToRemove); } removeImsFeature(featurePair.first, featurePair.second, (callbackToRemove != null ? callbackToRemove.getCallback() : null)); removeImsFeatureBinder(featurePair.first, featurePair.second); mCallbacks.imsServiceFeatureRemoved(featurePair.first, featurePair.second, this); sendImsFeatureRemovedCallback(featurePair.first, featurePair.second); }
public void addImsServiceFeatureListener(com.android.ims.internal.IImsServiceFeatureCallback callback) { synchronized(mLock) { mImsStatusCallbacks.add(callback); } }
private void notifyAllFeaturesRemoved() { if ((mCallbacks) == null) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, "notifyAllFeaturesRemoved called with invalid callbacks."); return; } synchronized(mLock) { for (android.util.Pair<java.lang.Integer, java.lang.Integer> feature : mImsFeatures) { mCallbacks.imsServiceFeatureRemoved(feature.first, feature.second, this); sendImsFeatureRemovedCallback(feature.first, feature.second); } } }
private boolean isImsServiceInfoEqual(android.content.ComponentName name, java.util.Set<java.lang.String> features, com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo sInfo) { if (!(java.util.Objects.equals(sInfo.name, name))) { return false; } for (java.lang.String f : features) { switch (f) { case ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE : if (!(sInfo.supportsEmergencyMmTel)) { return false; } break; case ImsResolver.METADATA_MMTEL_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)))) { return false; } break; case ImsResolver.METADATA_RCS_FEATURE : if (!(sInfo.getSupportedFeatures().contains(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_RCS)))) { return false; } break; } } return true; }
private void addImsServiceFeature(android.util.Pair<java.lang.Integer, java.lang.Integer> featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, "addImsServiceFeature called with null values."); return; } com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback c = new com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback(featurePair.first, featurePair.second); mFeatureStatusCallbacks.add(c); android.os.IInterface f = createImsFeature(featurePair.first, featurePair.second, c.getCallback()); addImsFeatureBinder(featurePair.first, featurePair.second, f); mCallbacks.imsServiceFeatureCreated(featurePair.first, featurePair.second, this); sendImsFeatureCreatedCallback(featurePair.first, featurePair.second); }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCarrierPackageChangeEmergencyCalling() throws android.os.RemoteException { setupResolver(1); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features = new java.util.HashSet<>(); features.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)); setupPackageQuery(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, new java.util.HashSet(), true); com.android.internal.telephony.ims.ImsServiceController controller = setupController(); startBind(); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, 1); verify(controller).bind(features); verify(controller, never()).unbind(); junit.framework.Assert.assertEquals(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, controller.getComponentName()); verify(controller, never()).setCanPlaceEmergencyCalls(eq(true)); packageChanged(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> newFeatures = new java.util.HashSet<>(); newFeatures.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)); newFeatures.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, newFeatures, 2); verify(controller, atLeastOnce()).changeImsServiceFeatures(newFeatures); verify(controller).setCanPlaceEmergencyCalls(eq(true)); }
private void updateImsServiceFeatures(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo newInfo) { if (newInfo == null) { return; } com.android.internal.telephony.ims.ImsServiceController controller = getControllerByServiceInfo(mActiveControllers, newInfo); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features = calculateFeaturesToCreate(newInfo); if ((features.size()) > 0) { try { if (controller != null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("Updating features for ImsService: " + (controller.getComponentName()))); android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, ("Updating canPlaceEmergencyCalls: " + (newInfo.supportsEmergencyMmTel))); controller.setCanPlaceEmergencyCalls(newInfo.supportsEmergencyMmTel); android.util.Log.d(com.android.internal.telephony.ims.ImsResolver.TAG, ("Updating Features - New Features: " + features)); controller.changeImsServiceFeatures(features); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "updateImsServiceFeatures: unbound with active features, rebinding"); bindImsServiceWithFeatures(newInfo, features); } if ((isActiveCarrierService(newInfo)) && (!(android.text.TextUtils.equals(newInfo.name.getPackageName(), mDeviceService)))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "Updating device default"); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } } catch (android.os.RemoteException e) { android.util.Log.e(com.android.internal.telephony.ims.ImsResolver.TAG, ("updateImsServiceFeatures: Remote Exception: " + (e.getMessage()))); } } else if (controller != null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ("Unbinding: features = 0 for ImsService: " + (controller.getComponentName()))); unbindImsService(newInfo); } }
public boolean isEmergencyMmTelAvailable(int slotId) { com.android.internal.telephony.ims.ImsServiceController controller = getImsServiceController(slotId, ImsFeature.FEATURE_MMTEL); if (controller != null) { return controller.canPlaceEmergencyCalls(); } android.util.Log.w(com.android.internal.telephony.ims.ImsResolver.TAG, ("isEmergencyMmTelAvailable: No controller found for slot " + slotId)); return false; }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCarrierPackageBindWithEmergencyCalling() throws android.os.RemoteException { setupResolver(1); setConfigCarrierString(0, com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName()); java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features = new java.util.HashSet<>(); features.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)); features.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL)); features.add(new android.util.Pair(0, android.telephony.ims.feature.ImsFeature.FEATURE_RCS)); setupPackageQuery(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, new java.util.HashSet(), true); com.android.internal.telephony.ims.ImsServiceController controller = setupController(); startBind(); setupDynamicQueryFeatures(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, 1); verify(controller).bind(features); verify(controller, never()).unbind(); junit.framework.Assert.assertEquals(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, controller.getComponentName()); verify(controller).setCanPlaceEmergencyCalls(eq(true)); }
private void bindImsServiceWithFeatures(com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo info, java.util.HashSet<android.util.Pair<java.lang.Integer, java.lang.Integer>> features) { if ((features.size()) > 0) { com.android.internal.telephony.ims.ImsServiceController controller = getControllerByServiceInfo(mActiveControllers, info); if (controller != null) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ((("ImsService connection exists, updating features " + features) + ", updating supports emergency calling: ") + (info.supportsEmergencyMmTel))); try { controller.changeImsServiceFeatures(features); } catch (android.os.RemoteException e) { android.util.Log.w(com.android.internal.telephony.ims.ImsResolver.TAG, ("bindImsService: error=" + (e.getMessage()))); } } else { controller = info.controllerFactory.create(mContext, info.name, this); android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ((((("Binding ImsService: " + (controller.getComponentName())) + " with features: ") + features) + ", supports emergency calling: ") + (info.supportsEmergencyMmTel))); controller.bind(features); } controller.setCanPlaceEmergencyCalls(info.supportsEmergencyMmTel); mActiveControllers.put(info.name, controller); } }
void replaceFeatures(java.util.Set<android.util.Pair<java.lang.Integer, java.lang.Integer>> mNewFeatures) { java.util.List<android.util.Pair<java.lang.Integer, java.lang.Integer>> emergencyFeatures = mNewFeatures.stream().filter(( f) -> f.second == ImsFeature.FEATURE_EMERGENCY_MMTEL).collect(java.util.stream.Collectors.toList()); if (!(emergencyFeatures.isEmpty())) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "replaceFeatures: emergency calls enabled."); supportsEmergencyMmTel = true; mNewFeatures.removeAll(emergencyFeatures); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, "replaceFeatures: emergency calls disabled."); supportsEmergencyMmTel = false; } mSupportedFeatures.clear(); mSupportedFeatures.addAll(mNewFeatures); }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder res = new java.lang.StringBuilder(); res.append("[ImsServiceInfo] name="); res.append(name); res.append(", supportedFeatures=[ "); for (android.util.Pair<java.lang.Integer, java.lang.Integer> feature : mSupportedFeatures) { res.append("("); res.append(feature.first); res.append(","); res.append(feature.second); res.append(") "); } res.append("], supportsEmergency="); res.append(supportsEmergencyMmTel); return res.toString(); }
private boolean selectACRulesContainer(byte[] aid) throws com.android.se.security.arf.SecureElementException, com.android.se.security.arf.pkcs15.PKCS15Exception { if (aid == null) { mArfChannel = mSEHandle.openLogicalArfChannel(new byte[]{ }); if ((mArfChannel) != null) { android.util.Log.i(mTag, "Logical channels are used to access to PKC15"); } else { return false; } if ((mPkcs15Path) == null) { mACMainPath = null; com.android.se.security.arf.pkcs15.EFDIR DIRObject = new com.android.se.security.arf.pkcs15.EFDIR(mSEHandle); mPkcs15Path = DIRObject.lookupAID(com.android.se.security.arf.pkcs15.PKCS15Handler.PKCS15_AID); if ((mPkcs15Path) == null) { android.util.Log.i(mTag, "Cannot use ARF: cannot select PKCS#15 directory via EF Dir"); throw new com.android.se.security.arf.pkcs15.PKCS15Exception("Cannot select PKCS#15 directory via EF Dir"); } } } else { mArfChannel = mSEHandle.openLogicalArfChannel(aid); if ((mArfChannel) == null) { android.util.Log.w(mTag, "GPAC/PKCS#15 ADF not found!!"); return false; } if ((mPkcs15Path) != null) { mACMainPath = null; } mPkcs15Path = null; } return true; }
public com.android.se.Channel openLogicalChannelWithoutChannelAccess(byte[] aid) throws android.os.RemoteException { return openLogicalChannel(null, aid, ((byte) (0)), null, null, 0); }
public synchronized void initialize() throws java.lang.Exception { com.android.se.Channel channel = mTerminal.openLogicalChannelWithoutChannelAccess(com.android.se.security.ara.AraController.getAraMAid()); if (channel == null) { throw new java.security.AccessControlException("could not open channel"); } com.android.se.security.ChannelAccess araChannelAccess = new com.android.se.security.ChannelAccess(); araChannelAccess.setAccess(ChannelAccess.ACCESS.ALLOWED, mTag); araChannelAccess.setApduAccess(ChannelAccess.ACCESS.ALLOWED); channel.setChannelAccess(araChannelAccess); try { mApplet = new com.android.se.security.ara.AccessRuleApplet(channel); byte[] tag = mApplet.readRefreshTag(); if (mAccessRuleCache.isRefreshTagEqual(tag)) { android.util.Log.i(mTag, "Refresh tag unchanged. Using access rules from cache."); return; } android.util.Log.i(mTag, "Refresh tag has changed."); mAccessRuleCache.setRefreshTag(tag); mAccessRuleCache.clearCache(); android.util.Log.i(mTag, "Read ARs from ARA"); readAllAccessRules(); } catch (java.lang.Exception e) { android.util.Log.i(mTag, ("ARA error: " + (e.getLocalizedMessage()))); throw new java.security.AccessControlException(e.getLocalizedMessage()); } finally { if (channel != null) { channel.close(); } } }
private boolean updateACRules() throws com.android.se.security.arf.SecureElementException, com.android.se.security.arf.pkcs15.PKCS15Exception, java.lang.Exception { byte[] ACRulesPath = null; if (!(mACMFfound)) { mSEHandle.resetAccessRules(); mACMainPath = null; if ((mArfChannel) != null) mSEHandle.closeArfChannel(); this.initACEntryPoint(); } try { ACRulesPath = mACMainObject.analyseFile(); mACMFfound = true; } catch (java.lang.Exception e) { android.util.Log.i(mTag, "ACMF Not found !"); mACMainObject = null; mSEHandle.resetAccessRules(); mACMFfound = false; throw e; } if (ACRulesPath != null) { android.util.Log.i(mTag, "Access Rules needs to be updated..."); if ((mACRulesObject) == null) { mACRulesObject = new com.android.se.security.arf.pkcs15.EFACRules(mSEHandle); } mSEHandle.clearAccessRuleCache(); mACMainPath = null; if ((mArfChannel) != null) mSEHandle.closeArfChannel(); this.initACEntryPoint(); try { mACRulesObject.analyseFile(ACRulesPath); } catch (java.lang.Exception e) { android.util.Log.i(mTag, "Exception: clear access rule cache and refresh tag"); mSEHandle.resetAccessRules(); throw e; } return true; } else { android.util.Log.i(mTag, "Refresh Tag has not been changed..."); return false; } }
public synchronized boolean loadAccessControlRules(java.lang.String secureElement) { mSELabel = secureElement; android.util.Log.i(mTag, (("- Loading " + (mSELabel)) + " rules...")); try { initACEntryPoint(); return updateACRules(); } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { throw ((java.util.MissingResourceException) (e)); } android.util.Log.e(mTag, (((mSELabel) + " rules not correctly initialized! ") + (e.getLocalizedMessage()))); throw new java.security.AccessControlException(e.getLocalizedMessage()); } finally { if ((mArfChannel) != null) mSEHandle.closeArfChannel(); } }
public com.android.se.Channel openLogicalArfChannel(byte[] aid) { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { return null; } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { android.util.Log.e(mTag, ("no channels left to access ARF: " + (e.getMessage()))); throw ((java.util.MissingResourceException) (e)); } else { android.util.Log.e(mTag, ("Error opening logical channel " + (e.getLocalizedMessage()))); } mArfChannel = null; return null; } }
public android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int subId) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd(("[getActiveSubscriptionInfo]+ subId=" + subId)); if (!(android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { if (android.telephony.SubscriptionManager.DBG) { android.telephony.SubscriptionManager.logd("[getActiveSubscriptionInfo]- invalid subId"); } return null; } android.telephony.SubscriptionInfo subInfo = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService("isub")); if (iSub != null) { subInfo = iSub.getActiveSubscriptionInfo(subId, mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return subInfo; }
public android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int slotIndex) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd(("[getActiveSubscriptionInfoForSimSlotIndex]+ slotIndex=" + slotIndex)); if (!(android.telephony.SubscriptionManager.isValidSlotIndex(slotIndex))) { android.telephony.SubscriptionManager.logd("[getActiveSubscriptionInfoForSimSlotIndex]- invalid slotIndex"); return null; } android.telephony.SubscriptionInfo result = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService("isub")); if (iSub != null) { result = iSub.getActiveSubscriptionInfoForSimSlotIndex(slotIndex, mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }
public void addOnSubscriptionsChangedListener(android.telephony.SubscriptionManager.OnSubscriptionsChangedListener listener) { java.lang.String pkgName = ((mContext) != null) ? mContext.getOpPackageName() : "<unknown>"; if (android.telephony.SubscriptionManager.DBG) { android.telephony.SubscriptionManager.logd(((("register OnSubscriptionsChangedListener pkgName=" + pkgName) + " listener=") + listener)); } try { com.android.internal.telephony.ITelephonyRegistry tr = ITelephonyRegistry.Stub.asInterface(android.os.ServiceManager.getService("telephony.registry")); if (tr != null) { tr.addOnSubscriptionsChangedListener(pkgName, listener.callback); } } catch (android.os.RemoteException ex) { } }
public java.util.List<android.telephony.SubscriptionInfo> getActiveSubscriptionInfoList() { java.util.List<android.telephony.SubscriptionInfo> result = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService("isub")); if (iSub != null) { result = iSub.getActiveSubscriptionInfoList(mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }
public int getActiveSubscriptionInfoCount() { int result = 0; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService("isub")); if (iSub != null) { result = iSub.getActiveSubInfoCount(mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return result; }
private void doStop() { if (!(mProfileStarted)) { android.util.Log.w(mName, "doStop() called, but the profile is not running."); } mProfileStarted = false; if ((mAdapterService) != null) { mAdapterService.onProfileServiceStateChanged(this, BluetoothAdapter.STATE_OFF); } if (!(stop())) { android.util.Log.e(mName, "Unable to stop profile"); } if ((mUserSwitchedReceiver) != null) { getApplicationContext().unregisterReceiver(mUserSwitchedReceiver); mUserSwitchedReceiver = null; } stopSelf(); }



public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.session.MediaSession.QueueItem item) { if (item == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(item.getDescription()); if (bundle.containsKey(com.android.bluetooth.avrcp.Util.GPM_KEY)) { if (com.android.bluetooth.avrcp.Util.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Util.TAG, "Queue item contains GPM data"); bundle.putAll(com.android.bluetooth.avrcp.Util.mediaMetadataToBundle(((android.media.MediaMetadata) (bundle.get(com.android.bluetooth.avrcp.Util.GPM_KEY))))); } if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.e(com.android.bluetooth.avrcp.Util.TAG, ("toMetadata: MediaDescription: ContainsKey: " + key)); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bundleToMetadata(bundle); ret.mediaId = "NowPlayingId" + (item.getQueueId()); return ret; }









public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.MediaMetadata data) { if (data == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.media.MediaDescription desc = data.getDescription(); android.os.Bundle dataBundle = com.android.bluetooth.avrcp.Util.mediaMetadataToBundle(data); android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(data.getDescription()); bundle.putAll(dataBundle); com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bundleToMetadata(bundle); ret.mediaId = "currsong"; return ret; }



void setSystemAudioMode(boolean on, boolean updateSetting) { com.android.server.hdmi.HdmiLogger.debug("System Audio Mode change[old:%b new:%b]", mSystemAudioActivated, on); if (updateSetting) { mService.writeBooleanSetting(Global.HDMI_SYSTEM_AUDIO_ENABLED, on); } updateAudioManagerForSystemAudio(on); synchronized(mLock) { if ((mSystemAudioActivated) != on) { mSystemAudioActivated = on; mService.announceSystemAudioModeChange(on); } } }






public libcore.Repository currentUpstream(java.nio.file.Path relPath) { boolean isJsr166 = relPath.toString().startsWith("java/util/concurrent"); java.lang.String ju = "java/util/"; java.lang.String suffix = ".java"; if ((!isJsr166) && (relPath.startsWith(ju))) { java.lang.String name = relPath.toString().substring(ju.length()); if (name.endsWith(suffix)) { name = name.substring(0, ((name.length()) - (suffix.length()))); isJsr166 = libcore.StandardRepositories.juFilesFromJsr166.contains(name); } } return isJsr166 ? jsr166Upstream : defaultUpstream; }



public void testRunNormalInput() { mProcessHelper = com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockProcessHelper(CommandStatus.SUCCESS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice()); mTest.setRunUtil(createMockRunUtil("which")); try { mTest.run(mMockInvocationListener); } catch (java.lang.IllegalArgumentException e) { fail(); e.printStackTrace(); } catch (com.android.tradefed.device.DeviceNotAvailableException e) { fail(); e.printStackTrace(); } }







private static com.android.tradefed.util.ProcessHelper createMockProcessHelper(com.android.tradefed.util.CommandStatus... status) { java.lang.Process process; try { process = new java.lang.ProcessBuilder("true").start(); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } java.util.LinkedList<com.android.tradefed.util.CommandStatus> nextStatus = new java.util.LinkedList<com.android.tradefed.util.CommandStatus>(java.util.Arrays.asList(status)); return new com.android.tradefed.util.ProcessHelper(process) { @java.lang.Override public com.android.tradefed.util.CommandStatus waitForProcess(long timeoutMsecs) throws com.android.tradefed.util.RunInterruptedException { com.android.tradefed.util.CommandStatus currentStatus = nextStatus.removeFirst(); if (currentStatus == null) { throw new com.android.tradefed.util.RunInterruptedException(); } return currentStatus; } @java.lang.Override public boolean isRunning() { return !(nextStatus.isEmpty()); } }; }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mMockInvocationListener = org.easymock.EasyMock.createMock(com.android.tradefed.result.ITestInvocationListener.class); mProcessHelper = null; mPython = "python"; mTest = new com.android.tradefed.testtype.VtsMultiDeviceTest() { @java.lang.Override protected com.android.tradefed.util.ProcessHelper createProcessHelper(java.lang.String[] cmd) { assertCommand(cmd); try { createResult(cmd[3]); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } return mProcessHelper; } }; mTest.setBuild(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockBuildInfo()); mTest.setTestCasePath(com.android.tradefed.testtype.VtsMultiDeviceTestTest.TEST_CASE_PATH); mTest.setTestConfigPath(VtsMultiDeviceTest.DEFAULT_TESTCASE_CONFIG_PATH); }
@java.lang.Override public boolean isRunning() { return !(nextStatus.isEmpty()); }



@java.lang.Override public void setVolume(int volume) { }
java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_PERM, "Need BLUETOOTH permission"); return new java.util.ArrayList<>(); }
synchronized boolean isHearingAidPlaying(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (("isHearingAidPlaying(" + device) + ")")); } throw new java.lang.IllegalStateException("Implement me"); }
public android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser() { if (!(getLeAccess())) { return null; } synchronized(mLock) { if ((android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser) == null) { android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser = new android.bluetooth.le.BluetoothLeAdvertiser(mManagerService); } } return android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser; }



@java.lang.Override protected boolean start() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, "start()"); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) != null) { throw new java.lang.IllegalStateException("start() called twice"); } mAdapter = java.util.Objects.requireNonNull(android.bluetooth.BluetoothAdapter.getDefaultAdapter(), "BluetoothAdapter cannot be null when HearingAidService starts"); mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapterService(), "AdapterService cannot be null when HearingAidService starts"); mStateMachines.clear(); mStateMachinesThread = new android.os.HandlerThread("HearingAidService.StateMachines"); mStateMachinesThread.start(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.BondStateChangedReceiver(); registerReceiver(mBondStateChangedReceiver, filter); filter = new android.content.IntentFilter(); filter.addAction(BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); mConnectionStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(this); setActiveDevice(null); return true; }
private void onCodecConfigChanged(byte[] address, android.bluetooth.BluetoothCodecConfig newCodecConfig, android.bluetooth.BluetoothCodecConfig[] codecsLocalCapabilities, android.bluetooth.BluetoothCodecConfig[] codecsSelectableCapabilities) { com.android.bluetooth.a2dp.A2dpStackEvent event = new com.android.bluetooth.a2dp.A2dpStackEvent(A2dpStackEvent.EVENT_TYPE_CODEC_CONFIG_CHANGED); event.device = getDevice(address); event.codecStatus = new android.bluetooth.BluetoothCodecStatus(newCodecConfig, codecsLocalCapabilities, codecsSelectableCapabilities); if (com.android.bluetooth.a2dp.A2dpNativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpNativeInterface.TAG, ("onCodecConfigChanged: " + event)); } sendMessageToService(event); }

@java.lang.Override protected boolean stop() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, "stop()"); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidService.TAG, "stop() called before start()"); return true; } setActiveDevice(null); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(null); unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; synchronized(mStateMachines) { for (com.android.bluetooth.hearingaid.HearingAidStateMachine sm : mStateMachines.values()) { sm.doQuit(); sm.cleanup(); } mStateMachines.clear(); } if ((mStateMachinesThread) != null) { mStateMachinesThread.quitSafely(); mStateMachinesThread = null; } mAdapterService = null; mAdapter = null; return true; }
private synchronized boolean isActiveDevice(android.bluetooth.BluetoothDevice device) { synchronized(mStateMachines) { return (device != null) && (java.util.Objects.equals(device, mActiveDevice)); } }



public synchronized boolean setActiveDevice(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); return false; }


boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("disconnect(): " + device)); } int customerId = mDeviceMap.get(device); for (android.bluetooth.BluetoothDevice storedDevice : mDeviceMap.keySet()) { if ((mDeviceMap.get(storedDevice)) != customerId) { continue; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (("Ignored disconnect request for " + device) + " : no state machine")); continue; } sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } return true; }












@java.lang.Override public void onMetadataChanged(android.media.MediaMetadata metadata) { if (!(isReady())) { android.util.Log.v(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ((mPackageName) + " tried to update with incomplete metadata")); return; } android.util.Log.v(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ((("onMetadataChanged(): " + (mPackageName)) + " : ") + (metadata.getDescription()))); if (!(metadata.equals(getMetadata()))) { com.android.bluetooth.avrcp.MediaPlayerWrapper.e("The callback metadata doesn't match controller metadata"); } if (metadata.equals(mCurrentData.metadata)) { android.util.Log.w(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (("onMetadataChanged(): " + (mPackageName)) + " tried to update with no new data")); return; } trySendMediaUpdate(); }
protected android.media.MediaMetadata getMetadata() { return mMediaController.getMetadata(); }
boolean isMetadataSynced() { if ((getQueue()) != null) { android.media.session.MediaSession.QueueItem currItem = null; for (android.media.session.MediaSession.QueueItem item : getQueue()) { if ((item.getQueueId()) == (getActiveQueueID())) { currItem = item; break; } } if ((currItem == null) || (!(currItem.getDescription().equals(getMetadata().getDescription())))) { if (com.android.bluetooth.avrcp.MediaPlayerWrapper.DEBUG) { android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("Metadata currently out of sync for " + (mPackageName))); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (" └ Current queueItem: " + currItem)); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (" └ Current metadata : " + (getMetadata().getDescription()))); } return false; } } return true; }




public void testProcFiles() throws android.system.ErrnoException, java.io.IOException, java.lang.NumberFormatException { for (java.lang.String sysctl : android.net.cts.MultinetworkSysctlTest.GLOBAL_SYSCTLS) { checkSysctlPermissions(sysctl); int value = java.lang.Integer.parseInt(readFile(sysctl).trim()); assertEquals((("value of " + sysctl) + ":"), 1, value); } java.io.File[] interfaceDirs = new java.io.File(android.net.cts.MultinetworkSysctlTest.IPV6_SYSCTL_DIR).listFiles(); for (java.io.File interfaceDir : interfaceDirs) { if ((interfaceDir.getName().equals("all")) || (interfaceDir.getName().equals("lo"))) { continue; } java.lang.String sysctl = new java.io.File(interfaceDir, android.net.cts.MultinetworkSysctlTest.AUTOCONF_SYSCTL).getAbsolutePath(); checkSysctlPermissions(sysctl); int value = java.lang.Integer.parseInt(readFile(sysctl).trim()); assertLess((("value of " + sysctl) + ":"), value, 0); } }

public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion, int maxSdkVersion) throws ApkSigningBlockUtils.SignatureNotFoundException, com.android.apksig.apk.ApkFormatException, java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result(); com.android.apksig.internal.apk.SignatureInfo signatureInfo = com.android.apksig.internal.apk.ApkSigningBlockUtils.findSignature(apk, zipSections, com.android.apksig.internal.apk.v2.V2SchemeVerifier.APK_SIGNATURE_SCHEME_V2_BLOCK_ID, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.internal.apk.v2.V2SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, minSdkVersion, maxSdkVersion, result); return result; }


private void removeImsServiceFeatureListener() { synchronized(mLock) { mImsStatusCallbacks.clear(); } }
public void addImsServiceFeatureListener(com.android.ims.internal.IImsServiceFeatureCallback callback) { synchronized(mLock) { mImsStatusCallbacks.add(callback); } }
private android.app.PendingIntent createIncomingCallPendingIntent() { android.content.Intent intent = new android.content.Intent(com.android.ims.ImsManager.ACTION_IMS_INCOMING_CALL); intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND); return android.app.PendingIntent.getBroadcast(mContext, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT); }
@android.test.suitebuilder.annotation.SmallTest public void testMisc() { android.telephony.ServiceState ss = new android.telephony.ServiceState(); ss.setCssIndicator(100); assertEquals(1, ss.getCssIndicator()); ss.setIsManualSelection(true); assertTrue(ss.getIsManualSelection()); ss.setSystemAndNetworkId(123, 456); assertEquals(123, ss.getSystemId()); assertEquals(456, ss.getNetworkId()); ss.setEmergencyOnly(true); assertTrue(ss.isEmergencyOnly()); }

@java.lang.SuppressWarnings("unused") private static void callChangeCallbacks() { synchronized(android.os.SystemProperties.sChangeCallbacks) { if ((android.os.SystemProperties.sChangeCallbacks.size()) == 0) { return; } java.util.ArrayList<java.lang.Runnable> callbacks = new java.util.ArrayList<java.lang.Runnable>(android.os.SystemProperties.sChangeCallbacks); for (int i = 0; i < (callbacks.size()); i++) { callbacks.get(i).run(); } } }
public boolean[] isNfcEventAllowed(android.content.pm.PackageManager packageManager, byte[] aid, java.lang.String[] packageNames, boolean checkRefreshTag) { if ((mAccessControlEnforcer) == null) { android.util.Log.e(mTag, "Access Control Enforcer not properly set up"); initializeAccessControl(); } mAccessControlEnforcer.setPackageManager(packageManager); synchronized(mLock) { try { return mAccessControlEnforcer.isNfcEventAllowed(aid, packageNames, checkRefreshTag); } catch (java.lang.Exception e) { android.util.Log.i(mTag, ("isNfcEventAllowed Exception: " + (e.getMessage()))); return null; } } }
private com.android.se.security.ChannelAccess setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag, int pid) throws java.io.IOException { if ((mAccessControlEnforcer) == null) { android.util.Log.e(mTag, "Access Control Enforcer not properly set up"); initializeAccessControl(); } mAccessControlEnforcer.setPackageManager(mContext.getPackageManager()); synchronized(mLock) { try { com.android.se.security.ChannelAccess channelAccess = mAccessControlEnforcer.setUpChannelAccess(aid, packageName, checkRefreshTag); channelAccess.setCallingPid(pid); return channelAccess; } catch (java.io.IOException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } catch (java.lang.Exception e) { throw new java.lang.SecurityException(("Exception in setUpChannelAccess()" + e)); } } }
private synchronized void initializeAccessControl() { synchronized(mLock) { if ((mAccessControlEnforcer) == null) { mAccessControlEnforcer = new com.android.se.security.AccessControlEnforcer(this); } mAccessControlEnforcer.initialize(true); } }
@java.lang.Override public synchronized void addAddressToTunnelInterface(int tunnelResourceId, java.lang.String localAddr) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); }




@java.lang.Override public synchronized void removeAddressFromTunnelInterface(int tunnelResourceId, java.lang.String localAddr) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); }

public void addAddress(android.net.LinkAddress address) throws java.io.IOException { }



public void removeAddress(android.net.LinkAddress address) throws java.io.IOException { }
@java.lang.Override public void onResume() { super.onResume(); paused = false; handler.post(new java.lang.Runnable() { @java.lang.Override public void run() { if (paused) { return; } startService(new android.content.Intent(android.perfetto.producer.ProducerActivity.this, android.perfetto.producer.ProducerService.class)); startService(new android.content.Intent(android.perfetto.producer.ProducerActivity.this, android.perfetto.producer.ProducerIsolatedService.class)); java.lang.System.loadLibrary("perfettocts_jni"); new java.lang.Thread(new java.lang.Runnable() { public void run() { try { android.perfetto.producer.ProducerActivity.setupProducer(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } }).start(); } }); }
@java.lang.Override public void onCreate() { java.lang.System.loadLibrary("perfettocts_jni"); new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { try { android.perfetto.producer.ProducerService.setupProducer(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } }).start(); }
@java.lang.Override public void onCreate() { java.lang.System.loadLibrary("perfettocts_jni"); new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { try { android.perfetto.producer.ProducerIsolatedService.setupProducer(); } catch (java.lang.Exception ex) { ex.printStackTrace(); } } }).start(); }











public void binderDied() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ("Binder is dead - unregister " + (mPackageName))); } if (isBleAppPresent()) { return; } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "Disabling LE only mode after application crash"); } try { mBluetoothLock.readLock().lock(); if (((mBluetooth) != null) && ((mBluetooth.getState()) == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON))) { mEnable = false; mBluetooth.onBrEdrDown(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Unable to call onBrEdrDown", e); } finally { mBluetoothLock.readLock().unlock(); } }
private boolean connectSocket() { try { if ((mPseRec) == null) { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ("connectSocket: UUID: " + (BluetoothUuid.PBAP_PSE.getUuid()))); mSocket = mDevice.createRfcommSocketToServiceRecord(BluetoothUuid.PBAP_PSE.getUuid()); } else if ((mPseRec.getL2capPsm()) != (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.L2CAP_INVALID_PSM)) { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ("connectSocket: PSM: " + (mPseRec.getL2capPsm()))); mSocket = mDevice.createL2capSocket(mPseRec.getL2capPsm()); } else { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ("connectSocket: channel: " + (mPseRec.getRfcommChannelNumber()))); mSocket = mDevice.createRfcommSocket(mPseRec.getRfcommChannelNumber()); } if ((mSocket) != null) { mSocket.connect(); return true; } else { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, "Could not create socket"); } } catch (java.io.IOException e) { android.util.Log.e(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, "Error while connecting socket", e); } return false; }
private void removeUncleanAccounts() { android.accounts.AccountManager accountManager = android.accounts.AccountManager.get(this); android.accounts.Account[] accounts = accountManager.getAccountsByType(getString(R.string.pbap_account_type)); android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientService.TAG, (("Found " + (accounts.length)) + " unclean accounts")); for (android.accounts.Account acc : accounts) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientService.TAG, ("Deleting " + acc)); accountManager.removeAccountExplicitly(acc); } try { getContentResolver().delete(CallLog.Calls.CONTENT_URI, null, null); } catch (java.lang.IllegalArgumentException e) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientService.TAG, "Call Logs could not be deleted, they may not exist yet."); } }


@java.lang.Override protected boolean start() { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "Starting the AVRCP Target Service"); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = this; mCurrentData = new com.android.bluetooth.avrcp.MediaData(null, null, null); mNativeInterface = com.android.bluetooth.avrcp.AvrcpNativeInterface.getInterface(); mReceiver = new com.android.bluetooth.avrcp.AvrcpTargetService.AvrcpBroadcastReceiver(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothA2dp.ACTION_ACTIVE_DEVICE_CHANGED); registerReceiver(mReceiver, filter); return true; }
private void addActiveLog(int reason, java.lang.String packageName, boolean enable) { synchronized(mActiveLogs) { if ((mActiveLogs.size()) > (com.android.server.BluetoothManagerService.ACTIVE_LOG_MAX_SIZE)) { mActiveLogs.remove(); } mActiveLogs.add(new com.android.server.BluetoothManagerService.ActiveLog(reason, packageName, enable, java.lang.System.currentTimeMillis())); } }
public java.io.FileDescriptor getSocket() { if ((mPfd) == null) { return null; } return mPfd.getFileDescriptor(); }
public void addAddress(android.net.LinkAddress address) throws java.io.IOException { }
public void removeAddress(android.net.LinkAddress address) throws java.io.IOException { }
void setActiveDevice(android.bluetooth.BluetoothDevice device) { if (device == null) { for (android.bluetooth.BluetoothDevice smDevice : mStateMachines.keySet()) { mStateMachines.get(smDevice).sendMessage(HearingAidStateMachine.DISCONNECT); } } }
private void broadcastActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (("broadcastActiveDevice(" + device) + ")")); } }
boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("disconnect(): " + device)); } long hiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (("Ignored disconnect request for " + device) + " : no state machine")); } else { sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } if (hiSyncId == (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID)) { return true; } for (android.bluetooth.BluetoothDevice storedDevice : mDeviceHiSyncIdMap.keySet()) { if (((mDeviceHiSyncIdMap.get(storedDevice)) != hiSyncId) || (storedDevice.equals(device))) { continue; } synchronized(mStateMachines) { com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(storedDevice); if (sm == null) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (("Ignored disconnect request for " + device) + " : no state machine")); continue; } sm.sendMessage(HearingAidStateMachine.DISCONNECT); } } return true; }
private synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((((("connectionStateChanged: unexpected invocation. device=" + device) + " fromState=") + fromState) + " toState=") + toState)); return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { mActiveDeviceSet.add(device); } else if (mActiveDeviceSet.contains(device)) { mActiveDeviceSet.remove(device); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (device + " is unbond. Remove state machine")); } removeStateMachine(device); } } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (mActiveDeviceSet.isEmpty())) { mAudioManager.setHearingAidDeviceConnectionState(device, BluetoothProfile.STATE_DISCONNECTED); broadcastActiveDevice(null); } if ((toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && ((mActiveDeviceSet.size()) == 1)) { mAudioManager.setHearingAidDeviceConnectionState(device, BluetoothProfile.STATE_CONNECTED); broadcastActiveDevice(device); } }
long getHiSyncId(android.bluetooth.BluetoothDevice device) { if (!(mDeviceHiSyncIdMap.containsKey(device))) { return android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID; } return mDeviceHiSyncIdMap.get(device); }
synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if ((mUserUid) != 0) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "registerApp(): failed because another app is registered"); return false; } mUserUid = android.os.Binder.getCallingUid(); if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("registerApp(): calling uid=" + (mUserUid))); } mCallback = callback; return mHidDeviceNativeInterface.registerApp(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null ? null : inQos.toArray()), (outQos == null ? null : outQos.toArray())); }
public boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.BluetoothHidDeviceCallback callback) { android.util.Log.v(android.bluetooth.BluetoothHidDevice.TAG, ((((((("registerApp(): sdp=" + sdp) + " inQos=") + inQos) + " outQos=") + outQos) + " callback=") + callback)); boolean result = false; if ((sdp == null) || (callback == null)) { return false; } final android.bluetooth.IBluetoothHidDevice service = mService; if (service != null) { try { android.bluetooth.BluetoothHidDevice.BluetoothHidDeviceCallbackWrapper cbw = new android.bluetooth.BluetoothHidDevice.BluetoothHidDeviceCallbackWrapper(callback); result = service.registerApp(sdp, inQos, outQos, cbw); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHidDevice.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothHidDevice.TAG, "Proxy not attached to service"); } return result; }
public void testServiceForegroundDuration() throws java.lang.Exception { batteryOnScreenOff(); installPackage(com.android.server.cts.BatteryStatsValidationTest.DEVICE_SIDE_TEST_APK, true); getDevice().executeShellCommand("am start -n com.android.server.cts.device.batterystats/.SimpleActivity"); assertValueRange("st", "", 5, 0, 0); runDeviceTests(com.android.server.cts.BatteryStatsValidationTest.DEVICE_SIDE_TEST_PACKAGE, ".BatteryStatsProcessStateTests", "testForegroundService"); assertValueRange("st", "", 5, ((long) (2000 * 0.8)), 4000); batteryOffScreenOn(); }





@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); restrictRequestUidsForCaller(nc); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("listenForNetwork for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }



public static void updateTracing(android.content.Context context, boolean force) { android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context); if (((prefs.getBoolean(context.getString(R.string.pref_key_tracing_on), false)) != (com.android.traceur.AtraceUtils.isTracingOn())) || force) { if (prefs.getBoolean(context.getString(R.string.pref_key_tracing_on), false)) { java.lang.String activeAvailableTags = com.android.traceur.Receiver.getActiveTags(context, prefs, true); if (!(android.text.TextUtils.equals(activeAvailableTags, com.android.traceur.Receiver.getActiveTags(context, prefs, false)))) { com.android.traceur.Receiver.postRootNotification(context, prefs); } else { com.android.traceur.Receiver.cancelRootNotification(context); } com.android.traceur.AtraceUtils.atraceStart(activeAvailableTags, com.android.traceur.Receiver.BUFFER_SIZE_KB); } else { com.android.traceur.AtraceUtils.atraceStop(); com.android.traceur.Receiver.cancelRootNotification(context); } } }
public static void atraceStart(java.lang.String tags, int bufferSizeKb) { java.lang.String cmd = (("atrace --async_start -c -b " + bufferSizeKb) + " ") + tags; android.util.Log.v(com.android.traceur.AtraceUtils.TAG, ("Starting async atrace: " + cmd)); try { java.lang.Process atrace = com.android.traceur.AtraceUtils.exec(cmd); if ((atrace.waitFor()) != 0) { android.util.Log.e(com.android.traceur.AtraceUtils.TAG, ("atraceStart failed with: " + (atrace.exitValue()))); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }


@org.junit.Test @android.support.test.filters.MediumTest public void testElementsOnMainScreen() throws java.lang.Exception { assertNotNull("Record trace switch not found.", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text("Record trace")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull("Save and share trace element not found.", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text("Save and share trace")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull("Categories element not found.", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text("Categories")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull("Restore default categories element not found.", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text("Restore default categories")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); assertNotNull("Show Quick Settings tile switch not found.", mDevice.wait(android.support.test.uiautomator.Until.findObject(android.support.test.uiautomator.By.text("Show Quick Settings tile")), com.android.traceur.uitest.TraceurAppTests.TIMEOUT)); }
@java.lang.Override public void setDnsConfigurationForNetwork(int netId, java.lang.String[] servers, java.lang.String[] domains, int[] params, boolean useTls, java.lang.String tlsHostname) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL, com.android.server.NetworkManagementService.TAG); final java.lang.String[] tlsFingerprints = new java.lang.String[0]; try { mNetdService.setResolverConfiguration(netId, servers, domains, params, useTls, tlsHostname, tlsFingerprints); } catch (android.os.RemoteException e) { throw new java.lang.RuntimeException(e); } }
public void setDnsConfigurationForNetwork(int netId, android.net.LinkProperties lp, boolean isDefaultNetwork) { final com.android.server.connectivity.DnsManager.PrivateDnsConfig privateDnsCfg = mPrivateDnsMap.get(netId); final boolean useTls = (privateDnsCfg != null) && (privateDnsCfg.useTls); final boolean strictMode = (privateDnsCfg != null) && (privateDnsCfg.inStrictMode()); final java.lang.String tlsHostname = (strictMode) ? privateDnsCfg.hostname : ""; final java.lang.String[] serverStrs = android.net.NetworkUtils.makeStrings((strictMode ? java.util.Arrays.stream(privateDnsCfg.ips).filter(( ip) -> lp.isReachable(ip)).collect(java.util.stream.Collectors.toList()) : lp.getDnsServers())); final java.lang.String[] domainStrs = com.android.server.connectivity.DnsManager.getDomainStrings(lp.getDomains()); updateParametersSettings(); final int[] params = new int[]{ mSampleValidity, mSuccessThreshold, mMinSamples, mMaxSamples }; android.util.Slog.d(com.android.server.connectivity.DnsManager.TAG, java.lang.String.format("setDnsConfigurationForNetwork(%d, %s, %s, %s, %s, %s)", netId, java.util.Arrays.toString(serverStrs), java.util.Arrays.toString(domainStrs), java.util.Arrays.toString(params), useTls, tlsHostname)); try { mNMS.setDnsConfigurationForNetwork(netId, serverStrs, domainStrs, params, useTls, tlsHostname); } catch (java.lang.Exception e) { android.util.Slog.e(com.android.server.connectivity.DnsManager.TAG, ("Error setting DNS configuration: " + e)); return; } if (isDefaultNetwork) setDefaultDnsSystemProperties(lp.getDnsServers()); flushVmDnsCache(); }
public void dispose() { synchronized(mLock) { if (com.android.internal.telephony.uicc.UiccProfile.DBG) com.android.internal.telephony.uicc.UiccProfile.log("Disposing profile"); unregisterAllAppEvents(); unregisterCurrAppEvents(); if ((mUiccCard) instanceof com.android.internal.telephony.uicc.euicc.EuiccCard) { ((com.android.internal.telephony.uicc.euicc.EuiccCard) (mUiccCard)).unregisterForEidReady(this); } mCi.unregisterForOffOrNotAvailable(this); if ((mCatService) != null) mCatService.dispose(); for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { app.dispose(); } } mCatService = null; mUiccApplications = null; mCarrierPrivilegeRules = null; mDisposed = true; } }
@java.lang.Override public void releaseConnectionService(com.android.server.telecom.ConnectionServiceFocusManager.ConnectionServiceFocus connectionService) { mCalls.stream().filter(( c) -> c.getConnectionServiceWrapper().equals(connectionService)).forEach(( c) -> c.disconnect()); }
public int registerStateCallback(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull java.util.concurrent.Executor executor, @android.annotation.NonNull android.telephony.mbms.DownloadStateCallback callback) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException("Middleware not yet bound"); } android.telephony.mbms.InternalDownloadStateCallback internalCallback = new android.telephony.mbms.InternalDownloadStateCallback(callback, executor); try { int result = downloadService.registerStateCallback(request, internalCallback, callback.getCallbackFilterFlags()); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException("Unknown download request."); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST; } mInternalDownloadCallbacks.put(callback, internalCallback); return android.telephony.mbms.MbmsErrors.SUCCESS; }

public int unregisterStateCallback(@android.annotation.NonNull android.telephony.mbms.DownloadRequest request, @android.annotation.NonNull android.telephony.mbms.DownloadStateCallback callback) { try { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { throw new java.lang.IllegalStateException("Middleware not yet bound"); } android.telephony.mbms.InternalDownloadStateCallback internalCallback = mInternalDownloadCallbacks.get(callback); if (internalCallback == null) { throw new java.lang.IllegalArgumentException("Provided callback was never registered"); } try { int result = downloadService.unregisterStateCallback(request, internalCallback); if (result != (android.telephony.mbms.MbmsErrors.SUCCESS)) { if (result == (MbmsErrors.DownloadErrors.ERROR_UNKNOWN_DOWNLOAD_REQUEST)) { throw new java.lang.IllegalArgumentException("Unknown download request."); } return result; } } catch (android.os.RemoteException e) { mService.set(null); android.telephony.MbmsDownloadSession.sIsInitialized.set(false); return android.telephony.mbms.MbmsErrors.ERROR_MIDDLEWARE_LOST; } } finally { android.telephony.mbms.InternalDownloadStateCallback internalCallback = mInternalDownloadCallbacks.remove(callback); if (internalCallback != null) { internalCallback.stop(); } } return android.telephony.mbms.MbmsErrors.SUCCESS; }



public int unregisterStateCallback(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStateCallback callback) throws android.os.RemoteException { return 0; }

@java.lang.Override public final int unregisterStateCallback(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStateCallback callback) throws android.os.RemoteException { if (downloadRequest == null) { throw new java.lang.NullPointerException("Download request must not be null"); } if (callback == null) { throw new java.lang.NullPointerException("Callback must not be null"); } android.telephony.mbms.vendor.DeathRecipient deathRecipient = mDownloadCallbackDeathRecipients.remove(callback.asBinder()); if (deathRecipient == null) { throw new java.lang.IllegalArgumentException("Unknown callback"); } callback.asBinder().unlinkToDeath(deathRecipient, 0); android.telephony.mbms.DownloadStateCallback exposedCallback = mDownloadCallbackBinderMap.remove(callback.asBinder()); if (exposedCallback == null) { throw new java.lang.IllegalArgumentException("Unknown callback"); } return unregisterStateCallback(downloadRequest, exposedCallback); }

public int registerStateCallback(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStateCallback callback) throws android.os.RemoteException { return 0; }
@java.lang.Override public final int registerStateCallback(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStateCallback callback, int flags) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); if (downloadRequest == null) { throw new java.lang.NullPointerException("Download request must not be null"); } if (callback == null) { throw new java.lang.NullPointerException("Callback must not be null"); } android.telephony.mbms.DownloadStateCallback exposedCallback = new android.telephony.mbms.vendor.MbmsDownloadServiceBase.FilteredDownloadStateCallback(callback, flags) { @java.lang.Override protected void onRemoteException(android.os.RemoteException e) { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); } }; int result = registerStateCallback(downloadRequest, exposedCallback); if (result == (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.mbms.vendor.DeathRecipient deathRecipient = new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); mDownloadCallbackBinderMap.remove(callback.asBinder()); mDownloadCallbackDeathRecipients.remove(callback.asBinder()); } }; mDownloadCallbackDeathRecipients.put(callback.asBinder(), deathRecipient); callback.asBinder().linkToDeath(deathRecipient, 0); mDownloadCallbackBinderMap.put(callback.asBinder(), exposedCallback); } return result; }
public void testFullCallback() throws java.lang.Exception { int sampleInt = 10; android.telephony.embms.cts.MbmsDownloadStateCallbackTest.TestDSCallback callback = new android.telephony.embms.cts.MbmsDownloadStateCallbackTest.TestDSCallback(android.telephony.mbms.DownloadStateCallback.ALL_UPDATES); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.registerStateCallback(request, mCallbackExecutor, callback); mMiddlewareControl.fireOnProgressUpdated(request, CtsDownloadService.FILE_INFO, sampleInt, sampleInt, sampleInt, sampleInt); com.android.internal.os.SomeArgs progressArgs = callback.waitOnProgressUpdated(android.telephony.embms.cts.ASYNC_TIMEOUT); assertEquals(request, progressArgs.arg1); assertEquals(CtsDownloadService.FILE_INFO, progressArgs.arg2); assertEquals(sampleInt, progressArgs.arg3); assertEquals(sampleInt, progressArgs.arg4); assertEquals(sampleInt, progressArgs.arg5); assertEquals(sampleInt, progressArgs.arg6); mMiddlewareControl.fireOnStateUpdated(request, CtsDownloadService.FILE_INFO, sampleInt); com.android.internal.os.SomeArgs stateArgs = callback.waitOnStateUpdated(android.telephony.embms.cts.ASYNC_TIMEOUT); assertEquals(request, stateArgs.arg1); assertEquals(CtsDownloadService.FILE_INFO, stateArgs.arg2); assertEquals(sampleInt, stateArgs.arg3); }
public void testDeregistration() throws java.lang.Exception { android.telephony.embms.cts.MbmsDownloadStateCallbackTest.TestDSCallback callback = new android.telephony.embms.cts.MbmsDownloadStateCallbackTest.TestDSCallback(android.telephony.mbms.DownloadStateCallback.ALL_UPDATES); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.registerStateCallback(request, mCallbackExecutor, callback); mDownloadSession.unregisterStateCallback(request, callback); mMiddlewareControl.fireOnStateUpdated(null, null, 0); assertNull(callback.waitOnStateUpdated(android.telephony.embms.cts.MbmsDownloadStateCallbackTest.SHORT_TIMEOUT)); mMiddlewareControl.fireOnProgressUpdated(null, null, 0, 0, 0, 0); assertNull(callback.waitOnProgressUpdated(android.telephony.embms.cts.MbmsDownloadStateCallbackTest.SHORT_TIMEOUT)); }
@java.lang.Override public int registerStateCallback(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStateCallback listener) throws android.os.RemoteException { mDownloadStateCallback = listener; return android.telephony.mbms.MbmsErrors.SUCCESS; }
@java.lang.Override public int unregisterStateCallback(android.telephony.mbms.DownloadRequest downloadRequest, android.telephony.mbms.DownloadStateCallback callback) { mDownloadStateCallback = null; return android.telephony.mbms.MbmsErrors.SUCCESS; }













private boolean sendBroadcastToReceiver(android.content.Intent intent) { intent.putExtra(CallIntentProcessor.KEY_IS_INCOMING_CALL, false); intent.setFlags(Intent.FLAG_RECEIVER_FOREGROUND); intent.setClass(mContext, com.android.server.telecom.components.PrimaryCallReceiver.class); android.telecom.Log.d(this, "Sending broadcast as user to CallReceiver"); mContext.sendBroadcastAsUser(intent, UserHandle.SYSTEM); return true; }
void updateAdapterState(int prevState, int newState) { mAdapterProperties.setState(newState); if ((mCallbacks) != null) { int n = mCallbacks.beginBroadcast(); debugLog((((("updateAdapterState() - Broadcasting state " + (android.bluetooth.BluetoothAdapter.nameForState(newState))) + " to ") + n) + " receivers.")); for (int i = 0; i < n; i++) { try { mCallbacks.getBroadcastItem(i).onBluetoothStateChange(prevState, newState); } catch (android.os.RemoteException e) { debugLog((((("updateAdapterState() - Callback #" + i) + " failed (") + e) + ")")); } } mCallbacks.finishBroadcast(); } }
@com.android.internal.annotations.GuardedBy("mLock") private android.os.ZygoteProcess.ZygoteState openZygoteSocketIfNeeded(java.lang.String abi) throws android.os.ZygoteStartFailedEx { com.android.internal.util.Preconditions.checkState(java.lang.Thread.holdsLock(mLock), "ZygoteProcess lock not held"); if (((primaryZygoteState) == null) || (primaryZygoteState.isClosed())) { try { primaryZygoteState = android.os.ZygoteProcess.ZygoteState.connect(mSocket); } catch (java.io.IOException ioe) { throw new android.os.ZygoteStartFailedEx("Error connecting to primary zygote", ioe); } } if (primaryZygoteState.matches(abi)) { return primaryZygoteState; } if (((secondaryZygoteState) == null) || (secondaryZygoteState.isClosed())) { try { secondaryZygoteState = android.os.ZygoteProcess.ZygoteState.connect(mSecondarySocket); } catch (java.io.IOException ioe) { throw new android.os.ZygoteStartFailedEx("Error connecting to secondary zygote", ioe); } } if (secondaryZygoteState.matches(abi)) { return secondaryZygoteState; } throw new android.os.ZygoteStartFailedEx(("Unsupported zygote ABI: " + abi)); }


private void update() { mBlacklistDisabled = "*".equals(Settings.Global.getString(mContext.getContentResolver(), Settings.Global.HIDDEN_API_BLACKLIST_EXEMPTIONS)); }


private void updateDeviceState(int eventType, boolean state) { switch (eventType) { case com.android.internal.telephony.DeviceStateMonitor.EVENT_SCREEN_STATE_CHANGED : if ((mIsScreenOn) == state) return; mIsScreenOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_CHARGING_STATE_CHANGED : if ((mIsCharging) == state) return; mIsCharging = state; sendDeviceState(com.android.internal.telephony.CHARGING_STATE, mIsCharging); break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_TETHERING_STATE_CHANGED : if ((mIsTetheringOn) == state) return; mIsTetheringOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_POWER_SAVE_MODE_CHANGED : if ((mIsPowerSaveOn) == state) return; mIsPowerSaveOn = state; sendDeviceState(com.android.internal.telephony.POWER_SAVE_MODE, mIsPowerSaveOn); break; default : return; } if ((mIsLowDataExpected) != (isLowDataExpected())) { mIsLowDataExpected = !(mIsLowDataExpected); sendDeviceState(com.android.internal.telephony.LOW_DATA_EXPECTED, mIsLowDataExpected); } int newFilter = 0; if (!(shouldTurnOffSignalStrength())) { newFilter |= android.hardware.radio.V1_0.IndicationFilter.SIGNAL_STRENGTH; } if (!(shouldTurnOffFullNetworkUpdate())) { newFilter |= android.hardware.radio.V1_0.IndicationFilter.FULL_NETWORK_STATE; } if (!(shouldTurnOffDormancyUpdate())) { newFilter |= android.hardware.radio.V1_0.IndicationFilter.DATA_CALL_DORMANCY_CHANGED; } setUnsolResponseFilter(newFilter, false); }


@java.lang.Override public void setUnsolResponseFilter(int filter, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_UNSOLICITED_RESPONSE_FILTER, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " ") + filter)); } try { radioProxy.setIndicationFilter(rr.mSerial, filter); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setIndicationFilter", e); } } }


private boolean checkStatusOfPolicy(android.app.Instrumentation instrumentation, java.lang.String adminPolicyName) throws java.lang.Exception { android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); android.support.test.uiautomator.UiSelector listViewSelector = new android.support.test.uiautomator.UiSelector().resourceId(Res.ANDROID_LIST_RES); assertTrue(device.findObject(listViewSelector).exists()); int size = device.findObject(listViewSelector).getChildCount(); for (int i = 0; i < size; i++) { android.support.test.uiautomator.UiSelector sampleDeviceSelection = listViewSelector.childSelector(new android.support.test.uiautomator.UiSelector().index(i)); if (device.findObject(sampleDeviceSelection).getChild(new android.support.test.uiautomator.UiSelector().textContains(adminPolicyName)).exists()) { return device.findObject(sampleDeviceSelection).getChild(new android.support.test.uiautomator.UiSelector().className("android.widget.CheckBox")).isChecked(); } } return false; }
private void recreateSimInfoDB(android.database.Cursor c, android.database.sqlite.SQLiteDatabase db, java.lang.String[] proj) { if (com.android.providers.telephony.TelephonyProvider.VDBG) { c = db.query(com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE, proj, null, null, null, null, null); com.android.providers.telephony.TelephonyProvider.log(((("dbh.onUpgrade:+ before upgrading " + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE)) + " total number of rows: ") + (c.getCount()))); c.close(); } c = db.query(com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE, null, null, null, null, null, null); db.execSQL(("DROP TABLE IF EXISTS " + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TMP))); createSimInfoTable(db, com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TMP); copySimInfoDataToTmpTable(db, c); c.close(); db.execSQL(("DROP TABLE IF EXISTS " + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE))); db.execSQL((((("ALTER TABLE " + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE_TMP)) + " rename to ") + (com.android.providers.telephony.TelephonyProvider.SIMINFO_TABLE)) + ";")); }
protected int engineDoFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) throws javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException { if (input != null) { bOut.write(input, inputOffset, inputLen); } if ((cipher) instanceof org.bouncycastle.crypto.engines.RSABlindedEngine) { if ((bOut.size()) > ((cipher.getInputBlockSize()) + 1)) { throw new java.lang.ArrayIndexOutOfBoundsException("too much data for RSA block"); } } else { if ((bOut.size()) > (cipher.getInputBlockSize())) { throw new java.lang.ArrayIndexOutOfBoundsException("too much data for RSA block"); } } byte[] out = getOutput(); for (int i = 0; i != (out.length); i++) { output[(outputOffset + i)] = out[i]; } return out.length; }
private void handleInjectSms(android.os.AsyncResult ar) { int result; com.android.internal.telephony.SmsDispatchersController.SmsInjectionCallback callback = null; try { callback = ((com.android.internal.telephony.SmsDispatchersController.SmsInjectionCallback) (ar.userObj)); android.telephony.SmsMessage sms = ((android.telephony.SmsMessage) (ar.result)); if (sms == null) { result = android.provider.Telephony.Sms.Intents.RESULT_SMS_GENERIC_ERROR; } else { result = dispatchMessage(sms.mWrappedSmsMessage); } } catch (java.lang.RuntimeException ex) { loge("Exception dispatching message", ex); result = android.provider.Telephony.Sms.Intents.RESULT_SMS_GENERIC_ERROR; } if (callback != null) { callback.onSmsInjectedResult(result); } }

@java.lang.Override public void onTabChanged(java.lang.String tabId) { final int slotId = java.lang.Integer.parseInt(tabId); mSir = mSelectableSubInfos.get(slotId); updatePhoneInfos(); mTelephonyManager.listen(mPhoneStateListener, (((android.telephony.PhoneStateListener.LISTEN_DATA_CONNECTION_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS)) | (android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE))); updateDataState(); updateNetworkType(); updatePreference(); }

static void loadAllContacts(android.content.Context context, android.os.Handler handler) { if (com.android.bluetooth.pbap.BluetoothPbapUtils.V) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG, "Loading Contacts ..."); } java.lang.String[] projection = new java.lang.String[]{ android.provider.ContactsContract.Data.CONTACT_ID, android.provider.ContactsContract.Data.DATA1, android.provider.ContactsContract.Data.MIMETYPE }; com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = com.android.bluetooth.pbap.BluetoothPbapUtils.fetchAndSetContacts(context, handler, projection, null, null, true); if ((com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts) < 0) { com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = 0; return; } com.android.bluetooth.pbap.BluetoothPbapUtils.sContactsLoaded = true; }

public static void main(java.lang.String[] args) throws java.lang.Exception { java.lang.System.loadLibrary(args[0]); art.Locals.EnableLocalVariableAccess(); Main.runGet(); Main.runSet(); }
public static int getSignableImageSize(byte[] data) throws java.lang.Exception { if (!(java.util.Arrays.equals(java.util.Arrays.copyOfRange(data, 0, 8), "ANDROID!".getBytes("US-ASCII")))) { throw new java.lang.IllegalArgumentException("Invalid image header: missing magic"); } java.nio.ByteBuffer image = java.nio.ByteBuffer.wrap(data); image.order(java.nio.ByteOrder.LITTLE_ENDIAN); image.getLong(); int kernelSize = image.getInt(); image.getInt(); int ramdskSize = image.getInt(); image.getInt(); int secondSize = image.getInt(); image.getLong(); int pageSize = image.getInt(); int length = ((pageSize + ((((kernelSize + pageSize) - 1) / pageSize) * pageSize)) + ((((ramdskSize + pageSize) - 1) / pageSize) * pageSize)) + ((((secondSize + pageSize) - 1) / pageSize) * pageSize); length = (((length + pageSize) - 1) / pageSize) * pageSize; if (length <= 0) { throw new java.lang.IllegalArgumentException("Invalid image header: invalid length"); } return length; }
@com.android.internal.annotations.VisibleForTesting public static android.net.NetworkStats javaReadNetworkStatsDetail(java.io.File detailPath, int limitUid, java.lang.String[] limitIfaces, int limitTag) throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 24); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); int idx = 1; int lastIdx = 1; com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(detailPath)); reader.finishLine(); while (reader.hasMoreData()) { idx = reader.nextInt(); if (idx != (lastIdx + 1)) { throw new java.net.ProtocolException(((("inconsistent idx=" + idx) + " after lastIdx=") + lastIdx)); } lastIdx = idx; entry.iface = reader.nextString(); entry.tag = kernelToTag(reader.nextString()); entry.uid = reader.nextInt(); entry.set = reader.nextInt(); entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if ((((limitIfaces == null) || (com.android.internal.util.ArrayUtils.contains(limitIfaces, entry.iface))) && ((limitUid == (UID_ALL)) || (limitUid == (entry.uid)))) && ((limitTag == (TAG_ALL)) || (limitTag == (entry.tag)))) { stats.addValues(entry); } reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(("problem parsing idx " + idx), e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats readNetworkStatsIfaceDev() throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); java.io.BufferedReader reader = null; try { reader = new java.io.BufferedReader(new java.io.FileReader(mStatsIfaceDev)); reader.readLine(); reader.readLine(); java.lang.String line; while ((line = reader.readLine()) != null) { java.lang.String[] values = line.trim().split("\\:?\\s+"); entry.iface = values[0]; entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; entry.rxBytes = java.lang.Long.parseLong(values[1]); entry.rxPackets = java.lang.Long.parseLong(values[2]); entry.txBytes = java.lang.Long.parseLong(values[9]); entry.txPackets = java.lang.Long.parseLong(values[10]); stats.addValues(entry); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException("problem parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
public android.net.NetworkStats readNetworkStatsDetail() throws java.io.IOException { return readNetworkStatsDetail(com.android.internal.net.UID_ALL, null, com.android.internal.net.TAG_ALL, null); }
public android.net.NetworkStats readNetworkStatsDetail(int limitUid, java.lang.String[] limitIfaces, int limitTag, android.net.NetworkStats lastStats) throws java.io.IOException { final android.net.NetworkStats stats = readNetworkStatsDetailInternal(limitUid, limitIfaces, limitTag, lastStats); final android.util.ArrayMap<java.lang.String, java.lang.String> stackedIfaces; synchronized(com.android.internal.net.NetworkStatsFactory.sStackedIfaces) { stackedIfaces = new android.util.ArrayMap(com.android.internal.net.NetworkStatsFactory.sStackedIfaces); } final android.net.NetworkStats adjustments = new android.net.NetworkStats(0, stackedIfaces.size()); android.net.NetworkStats.Entry entry = null; for (int i = 0; i < (stats.size()); i++) { entry = stats.getValues(i, entry); if (((entry.iface) == null) || (!(entry.iface.startsWith(com.android.internal.net.NetworkStatsFactory.CLATD_INTERFACE_PREFIX)))) { continue; } final java.lang.String baseIface = stackedIfaces.get(entry.iface); if (baseIface == null) { continue; } android.net.NetworkStats.Entry adjust = new android.net.NetworkStats.Entry(baseIface, 0, 0, 0, 0, 0, 0, 0L, 0L, 0L, 0L, 0L); adjust.rxBytes -= (entry.rxBytes) + ((entry.rxPackets) * (com.android.internal.net.NetworkStatsFactory.IPV4V6_HEADER_DELTA)); adjust.txBytes -= (entry.txBytes) + ((entry.txPackets) * (com.android.internal.net.NetworkStatsFactory.IPV4V6_HEADER_DELTA)); adjust.rxPackets -= entry.rxPackets; adjust.txPackets -= entry.txPackets; adjustments.combineValues(adjust); entry.rxBytes = (entry.rxPackets) * (com.android.internal.net.NetworkStatsFactory.IPV4V6_HEADER_DELTA); entry.txBytes = (entry.txPackets) * (com.android.internal.net.NetworkStatsFactory.IPV4V6_HEADER_DELTA); entry.rxPackets = 0; entry.txPackets = 0; stats.combineValues(entry); } stats.combineAllValues(adjustments); return stats; }
@org.junit.Test public void testDoubleClatAccounting100MBDownload() throws java.lang.Exception { long appRxBytesBefore = 328684029L; long appRxBytesAfter = 439237478L; assertEquals("App traffic should be ~100MB", 110553449, (appRxBytesAfter - appRxBytesBefore)); long rootRxBytesBefore = 1394011L; long rootRxBytesAfter = 1398634L; assertEquals("UID 0 traffic should be ~0", 4623, (rootRxBytesAfter - rootRxBytesBefore)); com.android.internal.net.NetworkStatsFactory.noteStackedIface("v4-wlan0", "wlan0"); android.net.NetworkStats stats; stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_before); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "v4-wlan0", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesBefore, 5199872L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "wlan0", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesBefore, 647888L); stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_after); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "v4-wlan0", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesAfter, 7867488L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, "wlan0", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesAfter, 647587L); com.android.internal.net.NetworkStatsFactory.noteStackedIface("v4-wlan0", null); }
private android.net.NetworkStats getNetworkStatsUidDetail() throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = mNetworkManager.getNetworkStatsUidDetail(android.net.NetworkStats.UID_ALL); final android.net.NetworkStats tetherSnapshot = getNetworkStatsTethering(android.net.NetworkStats.STATS_PER_UID); uidSnapshot.combineAllValues(tetherSnapshot); final android.telephony.TelephonyManager telephonyManager = ((android.telephony.TelephonyManager) (mContext.getSystemService(Context.TELEPHONY_SERVICE))); final android.net.NetworkStats vtStats = telephonyManager.getVtDataUsage(android.net.NetworkStats.STATS_PER_UID); if (vtStats != null) { uidSnapshot.combineAllValues(vtStats); } uidSnapshot.combineAllValues(mUidOperations); return uidSnapshot; }
private void recordSnapshotLocked(long currentTime) throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = getNetworkStatsUidDetail(); final android.net.NetworkStats xtSnapshot = getNetworkStatsXt(); final android.net.NetworkStats devSnapshot = mNetworkManager.getNetworkStatsSummaryDev(); final android.net.NetworkStats tetherSnapshot = getNetworkStatsTethering(android.net.NetworkStats.STATS_PER_IFACE); xtSnapshot.combineAllValues(tetherSnapshot); devSnapshot.combineAllValues(tetherSnapshot); mDevRecorder.recordSnapshotLocked(devSnapshot, mActiveIfaces, null, currentTime); mXtRecorder.recordSnapshotLocked(xtSnapshot, mActiveIfaces, null, currentTime); com.android.internal.net.VpnInfo[] vpnArray = mConnManager.getAllVpnInfo(); mUidRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mUidTagRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mStatsObservers.updateStats(xtSnapshot, uidSnapshot, new android.util.ArrayMap(mActiveIfaces), new android.util.ArrayMap(mActiveUidIfaces), vpnArray, currentTime); }

public android.net.NetworkStats readNetworkStatsSummaryDev() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; final boolean active = (reader.nextInt()) != 0; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.rxPackets += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); } stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException("problem parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
public android.net.NetworkStats readNetworkStatsSummaryXt() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); if (!(mStatsXtIfaceFmt.exists())) return null; final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceFmt)); reader.finishLine(); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException("problem parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; } int i = 0; while ((Main.isInterpreted()) && (i < 10000)) { Main.ensureJitCompiled(Main.IntRunner.class, "run"); i++; } java.lang.System.out.println(("isInOsrCode? " + ((Main.hasJit()) && (Main.isInOsrCode("run"))))); Main.reportValue(TARGET); }
@org.junit.Test public void testOnSetUpAdapterFailed() throws java.lang.Exception { java.lang.String output = "android.hardware.foo@1.1::IFoo/default"; doReturn(output).when(mDevice).executeShellCommand(java.lang.String.format(LIST_HAL_CMD, TEST_HAL_PACKAGE)); mCmdUtil.mCmdSuccess = false; try { mPreparer.setUp(mDevice, mBuildInfo); } catch (java.lang.RuntimeException e) { assertEquals("Hal adapter failed.", e.getMessage()); return; } fail(); }


private void sendIPv6TetherUpdates(android.net.NetworkState upstreamState) { verify(mIPv6TetheringCoordinator, times(1)).addActiveDownstream(argThat(( sm) -> sm.linkProperties().getInterfaceName().equals(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME)), eq(IControlsTethering.STATE_TETHERED)); for (com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism : mTetheringDependencies.getIPv6CoordinatorNotifyList()) { android.net.NetworkState ipv6OnlyState = com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(false, true); tism.sendMessage(TetherInterfaceStateMachine.CMD_IPV6_TETHER_UPDATE, 0, 0, (upstreamState.linkProperties.isIPv6Provisioned() ? ipv6OnlyState.linkProperties : null)); } mLooper.dispatchAll(); }
private static android.net.NetworkState buildMobileIpv4UpstreamState() { return com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(true, false); }

private void handleUpstreamNetworkMonitorCallback(int arg1, java.lang.Object o) { if (arg1 == (com.android.server.connectivity.tethering.UpstreamNetworkMonitor.NOTIFY_LOCAL_PREFIXES)) { mOffload.sendOffloadExemptPrefixes(((java.util.Set<android.net.IpPrefix>) (o))); return; } final android.net.NetworkState ns = ((android.net.NetworkState) (o)); if ((ns == null) || (!(pertainsToCurrentUpstream(ns)))) { if ((mCurrentUpstreamIface) == null) { chooseUpstreamType(false); } return; } switch (arg1) { case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_AVAILABLE : break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_CAPABILITIES : handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LINKPROPERTIES : setDnsForwarders(ns.network, ns.linkProperties); handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LOST : handleNewUpstreamNetworkState(null); break; default : mLog.e(("Unknown arg1 value: " + arg1)); break; } }


@org.junit.Test public void testDefaultTruncLen() throws java.lang.Exception { android.net.IpSecAlgorithm explicit = new android.net.IpSecAlgorithm(IpSecAlgorithm.AUTH_HMAC_SHA256, java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, (256 / 8)), 256); android.net.IpSecAlgorithm implicit = new android.net.IpSecAlgorithm(IpSecAlgorithm.AUTH_HMAC_SHA256, java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, (256 / 8))); assertTrue(((("Default Truncation Length Incorrect, Explicit: " + explicit) + "implicit: ") + implicit), android.net.IpSecAlgorithm.equals(explicit, implicit)); }
@org.junit.Test public void testUnwantedCapabilities() { android.net.NetworkCapabilities network = new android.net.NetworkCapabilities(); android.net.NetworkCapabilities request = new android.net.NetworkCapabilities(); assertTrue(((("Request: " + request) + ", Network:") + network), request.satisfiedByNetworkCapabilities(network)); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED); assertTrue(request.satisfiedByNetworkCapabilities(network)); assertArrayEquals(new int[]{ android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED }, request.getUnwantedCapabilities()); assertTrue(network.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); request.addUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.satisfiedByNetworkCapabilities(network)); network.removeCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.satisfiedByNetworkCapabilities(network)); request.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); assertFalse(request.satisfiedByNetworkCapabilities(network)); network.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); assertTrue(request.satisfiedByNetworkCapabilities(network)); }
@org.junit.Test public void testOemPaid() { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); nc.maybeMarkCapabilitiesRestricted(); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); }
public void testAesCbcHmacSha256Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }

public void testInterfaceCountersUdp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1000, false); }

private static android.net.IpSecTransform buildIpSecTransform(android.content.Context mContext, android.net.IpSecManager.SecurityParameterIndex spi, android.net.IpSecManager.UdpEncapsulationSocket encapSocket, java.net.InetAddress remoteAddr) throws java.lang.Exception { java.lang.String localAddr = (remoteAddr instanceof java.net.Inet4Address) ? android.net.cts.IpSecManagerTest.IPV4_LOOPBACK : android.net.cts.IpSecManagerTest.IPV6_LOOPBACK; return new android.net.IpSecTransform.Builder(mContext).setEncryption(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY)).setAuthentication(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.AUTH_KEY, ((android.net.cts.IpSecManagerTest.AUTH_KEY.length) * 4))).setIpv4Encapsulation(encapSocket, encapSocket.getPort()).buildTransportModeTransform(java.net.InetAddress.getByName(localAddr), spi); }

public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int truncLenBits) throws java.lang.Exception { int innerPacketSize = ((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateAesCbcEspPacketSizeWithAuth(((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen), truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = calculateAesCbcEspPacketSizeWithAuth(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, truncLenBits); sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (udpEncapLen != 0) { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } }

public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }

public void testAesCbcHmacSha512Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha512Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }

public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacMd5Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testAesCbcHmacSha256Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacMd5Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testAesCbcHmacSha384Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testAesCbcHmacSha1Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }

public void testAesCbcHmacMd5Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha1Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testAesCbcHmacSha256Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testInterfaceCountersUdp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1000, false); }


public void testAesCbcHmacMd5Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }


public void testAesCbcHmacSha256Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha1Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }



public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testInterfaceCountersUdp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1000, false); }
public void testAesCbcHmacSha512Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }

public void testAesCbcHmacSha256Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }


public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha512Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha1Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }

public void testAesCbcHmacSha384Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha256Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }





public void testInterfaceCountersUdp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1000, false); }

public void testAesCbcHmacSha384Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha1Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacMd5Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }


public void testAesCbcHmacSha256Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }

public void testAesCbcHmacMd5Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }















public void testAesCbcHmacSha256Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testAesCbcHmacSha512Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha512Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
private android.net.IpSecTransform getTransform(java.net.InetAddress localAddr) throws java.lang.Exception { android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr); android.net.IpSecTransform transform = new android.net.IpSecTransform.Builder(mContext).setEncryption(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, KEY_256)).setAuthentication(new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, KEY_256, ((KEY_256.length) * 8))).buildTransportModeTransform(localAddr, spi); return transform; }
public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }

public void testAesCbcHmacSha256Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha512Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testInterfaceCountersUdp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1000, false); }
public void testUdpEncapsulation() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecManagerTest.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(local);android.net.IpSecTransform transform = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, spi, encapSocket, local)) { java.io.FileDescriptor udpSocket = null; try { udpSocket = android.net.cts.IpSecManagerTest.getBoundUdpSocket(local); int port = android.net.cts.IpSecManagerTest.getPort(udpSocket); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_OUT, transform); byte[] data = new java.lang.String("IPSec UDP-encap-ESP test data").getBytes("UTF-8"); android.system.Os.sendto(udpSocket, data, 0, data.length, 0, local, port); byte[] in = new byte[data.length]; android.system.Os.read(udpSocket, in, 0, in.length); assertTrue("Encapsulated data did not match.", java.util.Arrays.equals(data, in)); final byte[] header = new byte[]{ 0, 0, 0, 0 }; final java.lang.String message = "Sample IKE Packet"; data = ((new java.lang.String(header)) + message).getBytes("UTF-8"); android.system.Os.sendto(encapSocket.getSocket(), data, 0, data.length, 0, local, encapSocket.getPort()); in = new byte[data.length]; android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertTrue("Encap socket was unable to send/receive IKE data", java.util.Arrays.equals(data, in)); mISM.removeTransportModeTransforms(udpSocket); } finally { if (udpSocket != null) { android.system.Os.close(udpSocket); } } } }
public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int truncLenBits) throws java.lang.Exception { int innerPacketSize = ((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateAesCbcEspPacketSizeWithAuth(((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen), truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = calculateAesCbcEspPacketSizeWithAuth(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, truncLenBits); sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (udpEncapLen != 0) { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } }
public void testAesCbcHmacSha1Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }

public void testIkeOverUdpEncapSocket() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecManagerTest.IPV4_LOOPBACK); android.net.cts.IpSecManagerTest.StatsChecker.initStatsChecker(); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket()) { int localPort = android.net.cts.IpSecManagerTest.getPort(encapSocket.getSocket()); byte[] dataWithEspHeader = new byte[(android.net.cts.IpSecManagerTest.TEST_DATA.length) + 8]; java.lang.System.arraycopy(android.net.cts.IpSecManagerTest.TEST_DATA, 0, dataWithEspHeader, 8, android.net.cts.IpSecManagerTest.TEST_DATA.length); byte[] in = new byte[dataWithEspHeader.length]; android.system.Os.sendto(encapSocket.getSocket(), dataWithEspHeader, 0, dataWithEspHeader.length, 0, local, localPort); android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertArrayEquals("Encapsulated data did not match.", dataWithEspHeader, in); int ipHdrLen = (local instanceof java.net.Inet6Address) ? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int expectedPacketSize = ((dataWithEspHeader.length) + (android.net.cts.IpSecManagerTest.UDP_HDRLEN)) + ipHdrLen; android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); } }
public void testAesCbcHmacSha384Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha256Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha1Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testIke() throws java.lang.Exception { java.net.InetAddress localAddr = java.net.InetAddress.getByName(android.net.cts.IpSecManagerTest.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr);android.net.IpSecTransform transform = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, spi, encapSocket, localAddr)) { java.io.FileDescriptor sock = null; try { sock = android.net.cts.IpSecManagerTest.getBoundUdpSocket(localAddr); int port = android.net.cts.IpSecManagerTest.getPort(sock); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_OUT, transform); byte[] header = new byte[]{ 1, 1, 1, 1 }; java.lang.String message = "Sample ESP Packet"; byte[] data = ((new java.lang.String(header)) + message).getBytes("UTF-8"); android.system.Os.sendto(sock, data, 0, data.length, 0, localAddr, encapSocket.getPort()); header = new byte[]{ 0, 0, 0, 0 }; message = "Sample IKE Packet"; data = ((new java.lang.String(header)) + message).getBytes("UTF-8"); android.system.Os.sendto(encapSocket.getSocket(), data, 0, data.length, 0, localAddr, encapSocket.getPort()); byte[] in = new byte[4]; in[0] = 1; android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertTrue("Encap socket received UDP-encap-ESP data despite invalid SPIs", java.util.Arrays.equals(header, in)); mISM.removeTransportModeTransforms(sock); } finally { if (sock != null) { android.system.Os.close(sock); } } } }
public void testAesCbcHmacMd5Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha512Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void testInterfaceCountersUdp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1000, false); }
public void testAesCbcHmacSha1Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testAesCbcHmacMd5Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }
public void testUdpEncapsulation() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(local);android.net.IpSecTransform transform = buildIpSecTransform(mContext, spi, encapSocket, local)) { java.io.FileDescriptor udpSocket = null; try { udpSocket = android.net.cts.IpSecManagerTest.getBoundUdpSocket(local); int port = getPort(udpSocket); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(udpSocket, IpSecManager.DIRECTION_OUT, transform); byte[] data = new java.lang.String("IPSec UDP-encap-ESP test data").getBytes("UTF-8"); android.system.Os.sendto(udpSocket, data, 0, data.length, 0, local, port); byte[] in = new byte[data.length]; android.system.Os.read(udpSocket, in, 0, in.length); assertTrue("Encapsulated data did not match.", java.util.Arrays.equals(data, in)); final byte[] header = new byte[]{ 0, 0, 0, 0 }; final java.lang.String message = "Sample IKE Packet"; data = ((new java.lang.String(header)) + message).getBytes("UTF-8"); android.system.Os.sendto(encapSocket.getSocket(), data, 0, data.length, 0, local, encapSocket.getPort()); in = new byte[data.length]; android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertTrue("Encap socket was unable to send/receive IKE data", java.util.Arrays.equals(data, in)); mISM.removeTransportModeTransforms(udpSocket); } finally { if (udpSocket != null) { android.system.Os.close(udpSocket); } } } }
@java.lang.Override public byte[] receive() throws java.lang.Exception { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN]; int bytesRead = android.system.Os.read(mFd, in, 0, android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN); return java.util.Arrays.copyOfRange(in, 0, bytesRead); }
public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; } int i = 0; while ((Main.isInterpreted()) && (i < 10000)) { Main.ensureJitCompiled(Main.IntRunner.class, "run"); i++; } java.lang.System.out.println(("isInOsrCode? " + ((Main.hasJit()) && (Main.isInOsrCode("run"))))); Main.reportValue(TARGET); }

public static android.net.apf.ApfFilter maybeCreate(android.net.apf.ApfFilter.ApfConfiguration config, android.net.util.InterfaceParams ifParams, android.net.ip.IpClient.Callback ipClientCallback) { if ((config == null) || (ifParams == null)) return null; android.net.apf.ApfCapabilities apfCapabilities = config.apfCapabilities; if (apfCapabilities == null) return null; if ((apfCapabilities.apfVersionSupported) == 0) return null; if ((apfCapabilities.maximumApfProgramSize) < 512) { android.util.Log.e(android.net.apf.ApfFilter.TAG, ("Unacceptably small APF limit: " + (apfCapabilities.maximumApfProgramSize))); return null; } if ((apfCapabilities.apfPacketFormat) != (ARPHRD_ETHER)) return null; if (!(new android.net.apf.ApfGenerator().setApfVersion(apfCapabilities.apfVersionSupported))) { android.util.Log.e(android.net.apf.ApfFilter.TAG, ("Unsupported APF version: " + (apfCapabilities.apfVersionSupported))); return null; } return new android.net.apf.ApfFilter(config, ifParams, ipClientCallback, new android.net.metrics.IpConnectivityLog()); }







public static void main(java.lang.String[] args) { Main.expectEquals(10, Main.abs1((-10))); Main.expectEquals(20, Main.abs1(20)); Main.expectEquals(10, Main.abs2((-10))); Main.expectEquals(20, Main.abs2(20)); Main.expectEquals(10, Main.abs3((-10))); Main.expectEquals(20, Main.abs3(20)); Main.expectEquals(10, Main.abs4((-10))); Main.expectEquals(20, Main.abs4(20)); Main.expectEquals(10, Main.abs4(((short) (-10)))); Main.expectEquals(20, Main.abs4(((short) (20)))); Main.expectEquals(10, Main.abs6(((byte) (-10)))); Main.expectEquals(20, Main.abs6(((byte) (20)))); Main.expectEquals(10L, Main.abs7((-10L))); Main.expectEquals(20L, Main.abs7(20L)); java.lang.System.out.println("passed"); }
public void setCarrierInfoForImsiEncryption(int subId, java.lang.String callingPackage, android.telephony.ImsiEncryptionInfo imsiEncryptionInfo) { com.android.internal.telephony.Phone phone = getPhone(subId); if (phone != null) { if (!(com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState(mContext, callingPackage, "setCarrierInfoForImsiEncryption"))) { return; } phone.setCarrierInfoForImsiEncryption(imsiEncryptionInfo); } else { loge(("setCarrierInfoForImsiEncryption phone is null for Subscription:" + subId)); return; } }


public android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int keyType) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) { throw new java.lang.RuntimeException("IMSI error: Subscriber Info is null"); } int subId = getSubId(android.telephony.SubscriptionManager.getDefaultDataSubscriptionId()); if ((keyType != (android.telephony.TelephonyManager.KEY_TYPE_EPDG)) && (keyType != (android.telephony.TelephonyManager.KEY_TYPE_WLAN))) { throw new java.lang.IllegalArgumentException("IMSI error: Invalid key type"); } android.telephony.ImsiEncryptionInfo imsiEncryptionInfo = info.getCarrierInfoForImsiEncryption(subId, keyType, mContext.getOpPackageName()); if ((imsiEncryptionInfo == null) && (isImsiEncryptionRequired(subId, keyType))) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, "IMSI error: key is required but not found"); throw new java.lang.RuntimeException("IMSI error: key is required but not found"); } return imsiEncryptionInfo; } catch (android.os.RemoteException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ("getCarrierInfoForImsiEncryption RemoteException" + ex)); throw new java.lang.RuntimeException("IMSI error: Remote Exception"); } catch (java.lang.NullPointerException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ("getCarrierInfoForImsiEncryption NullPointerException" + ex)); throw new java.lang.RuntimeException("IMSI error: Null Pointer exception"); } }
@java.lang.Override protected void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); android.view.View view = getLayoutInflater().inflate(R.layout.voicemail_hide_ringtone_settings, null); setContentView(view); setInfoResources(R.string.ringtone_settings_check_test, R.string.ringtone_settings_check_instructions, (-1)); setPassFailButtonClickListeners(); getPassButton().setEnabled(false); findViewById(R.id.open_voicemail_settings).setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { startActivity(new android.content.Intent(android.telephony.TelephonyManager.ACTION_CONFIGURE_VOICEMAIL).putExtra(TelephonyManager.EXTRA_HIDE_PUBLIC_SETTINGS, true)); } }); findViewById(R.id.settings_hidden).setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { getPassButton().setEnabled(true); setTestResultAndFinish(true); } }); findViewById(R.id.settings_not_hidden).setOnClickListener(new android.view.View.OnClickListener() { @java.lang.Override public void onClick(android.view.View v) { setTestResultAndFinish(false); } }); }


private static com.android.apksig.SigningCertificateLineage read(java.nio.ByteBuffer inputByteBuffer, int version) throws java.io.IOException { switch (version) { case com.android.apksig.SigningCertificateLineage.FIRST_VERSION : try { java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> nodes = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.readSigningCertificateLineage(getLengthPrefixedSlice(inputByteBuffer)); int minSdkVersion = com.android.apksig.SigningCertificateLineage.calculateMinSdkVersion(nodes); return new com.android.apksig.SigningCertificateLineage(minSdkVersion, nodes); } catch (com.android.apksig.apk.ApkFormatException e) { throw new java.io.IOException(("Unable to read list of signing certificate nodes in " + "SigningCertificateLineage"), e); } default : throw new java.lang.IllegalArgumentException("Improper SigningCertificateLineage format: unrecognized version."); } }
public java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> sortSignerConfigs(java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> signerConfigs) { if (signerConfigs == null) { throw new java.lang.NullPointerException("signerConfigs == null"); } java.util.List<com.android.apksig.DefaultApkSignerEngine.SignerConfig> sortedSignerConfigs = new java.util.ArrayList(signerConfigs.size()); for (int i = 0; i < (mSigningLineage.size()); i++) { for (int j = 0; j < (signerConfigs.size()); j++) { com.android.apksig.DefaultApkSignerEngine.SignerConfig config = signerConfigs.get(j); if (mSigningLineage.get(i).signingCert.equals(config.getCertificates().get(0))) { sortedSignerConfigs.add(config); break; } } } if ((sortedSignerConfigs.size()) != (signerConfigs.size())) { throw new java.lang.IllegalArgumentException(("SignerConfigs supplied which are not present in the" + " SigningCertificateLineage")); } return sortedSignerConfigs; }

public void setActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ("setActiveDevice:" + device)); } if (device == null) { if ((mActiveDeviceHiSyncId) != (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID)) { reportActiveDevice(null); mActiveDeviceHiSyncId = android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID; } return; } java.lang.Long deviceHiSyncId = mDeviceHiSyncIdMap.getOrDefault(device, BluetoothHearingAid.HI_SYNC_ID_INVALID); if (deviceHiSyncId != (mActiveDeviceHiSyncId)) { reportActiveDevice(device); mActiveDeviceHiSyncId = deviceHiSyncId; } }



@org.junit.Test public void testCountryWithPriority() throws java.lang.Exception { java.lang.String countryText = " isoCode:\"de\"\n" + (((((((((" defaultTimeZoneId:\"Europe/Berlin\"\n" + " timeZoneMappings:<\n") + " utcOffset:\"1:00\"\n") + " id:\"Europe/Berlin\"\n") + " priority: 10\n") + " >\n") + " timeZoneMappings:<\n") + " utcOffset:\"1:00\"\n") + " id:\"Europe/Busingen\"\n") + " >\n"); com.android.libcore.timezone.tzlookup.zonetree.Country country = com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTreeTest.parseCountry(countryText); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree zoneTree = com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.create(country, com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTreeTest.START_INSTANT, com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTreeTest.END_INSTANT); assertTrue(zoneTree.validateNoPriorityClashes().isEmpty()); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneUsage countryZoneUsage = zoneTree.calculateCountryZoneUsage(); assertNull(countryZoneUsage.getNotUsedAfterInstant("Europe/Berlin")); java.time.Instant expectedNotUsedAfterInstant = java.time.Instant.ofEpochSecond(354675600); assertEquals(expectedNotUsedAfterInstant, countryZoneUsage.getNotUsedAfterInstant("Europe/Busingen")); }

@java.lang.Override public java.net.InetAddress[] getAllByName(java.lang.String host) throws java.net.UnknownHostException { java.util.List<java.net.InetAddress> addrs = java.util.Arrays.asList(super.getAllByName(host)); java.util.LinkedHashMap<java.lang.Class, java.net.InetAddress> addressByFamily = new java.util.LinkedHashMap<>(); addressByFamily.put(addrs.get(0).getClass(), addrs.get(0)); java.util.Collections.shuffle(addrs); for (java.net.InetAddress addr : addrs) { addressByFamily.put(addr.getClass(), addr); } return addressByFamily.values().toArray(new java.net.InetAddress[addressByFamily.size()]); }
public static com.android.server.connectivity.DnsManager.PrivateDnsConfig tryBlockingResolveOf(android.net.Network network, java.lang.String name) { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_family = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; try { final java.net.InetAddress[] ips = Libcore.os.android_getaddrinfo(name, hints, network.netId); if ((ips != null) && ((ips.length) > 0)) { return new com.android.server.connectivity.DnsManager.PrivateDnsConfig(name, ips); } } catch (android.system.GaiException ignored) { } return null; }


@java.lang.Override public void exit() { android.net.TrafficStats.clearThreadStatsUid(); }
public void enableSampleDeviceAdmin() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "Settings"); findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains("Security")).click(); if ((testFramework.getApi()) >= 24) { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains("Device admin").resourceId(Res.ANDROID_TITLE_RES)).click(); } else { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().text("Device administrators")).click(); } device.findObject(new android.support.test.uiautomator.UiSelector().text("Sample Device Admin")).click(); try { if ((testFramework.getApi()) >= 24) { findObjectInScrollable(new android.support.test.uiautomator.UiSelector().textContains("Activate")).click(); } else { device.findObject(new android.support.test.uiautomator.UiSelector().textMatches("(?i)activate(?-i)")).click(); } } catch (android.support.test.uiautomator.UiObjectNotFoundException e) { assertTrue("Could not find device administration buttons.", new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws java.lang.Exception { return device.findObject(new android.support.test.uiautomator.UiSelector().text("Cancel")).exists(); } })); device.findObject(new android.support.test.uiautomator.UiSelector().text("Cancel")).click(); } device.pressHome(); }

@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "T144630613") public void activateDeactivatePolicy() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); if (checkStatusOfPolicy(instrumentation, "Sample Device Admin")) { com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, "Sample Device Admin"); } assertFalse(checkStatusOfPolicy(instrumentation, "Sample Device Admin")); com.android.devtools.systemimage.uitest.utils.SettingsUtil.activate(instrumentation, "Sample Device Admin"); assertTrue(checkStatusOfPolicy(instrumentation, "Sample Device Admin")); com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, "Sample Device Admin"); assertFalse(checkStatusOfPolicy(instrumentation, "Sample Device Admin")); }
public static libcore.Repository openJdk9(java.nio.file.Path upstreamRoot, java.lang.String upstreamName) { java.util.List<java.lang.String> sourceDirs = java.util.Arrays.asList("jdk/src/java.base/share/classes", "jdk/src/java.logging/share/classes", "jdk/src/java.prefs/share/classes", "jdk/src/java.sql/share/classes", "jdk/src/java.desktop/share/classes", "jdk/src/java.base/solaris/classes", "jdk/src/java.base/unix/classes", "jdk/src/java.prefs/unix/classes", "jdk/src/jdk.unsupported/share/classes", "jdk/src/jdk.net/share/classes", "jdk/src/java.base/linux/classes", "build/linux-x86_64-normal-server-release/support/gensrc/java.base"); return new libcore.Repository.OpenJdkRepository(upstreamRoot, upstreamName, sourceDirs); }
public void run() throws java.io.IOException { java.util.List<java.nio.file.Path> relPaths = standardRepositories.ojluni().loadRelPathsFromMakefile(); run(java.lang.System.out, relPaths); }
@java.lang.Override public java.nio.file.Path pathFromRepository(java.nio.file.Path relPath) { return java.nio.file.Paths.get("ojluni/src/main/java").resolve(relPath); }



public libcore.Repository currentUpstream(java.nio.file.Path relPath) { boolean isJsr166 = relPath.startsWith("java/util/concurrent/"); java.lang.String ju = "java/util/"; java.lang.String suffix = ".java"; if ((!isJsr166) && (relPath.startsWith(ju))) { java.lang.String name = relPath.toString().substring(ju.length()); if (name.endsWith(suffix)) { name = name.substring(0, ((name.length()) - (suffix.length()))); isJsr166 = libcore.StandardRepositories.juFilesFromJsr166.contains(name); } } if (isJsr166) { return jsr166Upstream; } else if ((relPath.startsWith("java/sql/")) || (relPath.startsWith("javax/sql/"))) { return javaSqlUpstream; } else { return defaultUpstream; } }
public static libcore.Repository openJdkLegacy(java.nio.file.Path upstreamRoot, java.lang.String upstreamName) { java.util.List<java.lang.String> sourceDirs = java.util.Arrays.asList("jdk/src/share/classes", "jdk/src/solaris/classes", "build/linux-x86_64-normal-server-release/jdk/gensrc"); return new libcore.Repository.OpenJdkRepository(upstreamRoot, upstreamName, sourceDirs); }
@java.lang.Override public java.nio.file.Path pathFromRepository(java.nio.file.Path relPath) { for (java.lang.String sourceDir : sourceDirs) { java.nio.file.Path repositoryRelativePath = java.nio.file.Paths.get(sourceDir).resolve(relPath); java.nio.file.Path file = rootPath.resolve(repositoryRelativePath); if (file.toFile().exists()) { return repositoryRelativePath; } } return null; }
public void run() throws java.io.IOException { java.util.List<java.nio.file.Path> relPaths = standardRepositories.ojluni().loadRelPathsFromMakefile(); if (outputDir.toFile().exists()) { throw new java.io.IOException(((outputDir) + " already exists")); } else { boolean success = outputDir.toFile().mkdir(); if (!success) { throw new java.io.IOException(("Failed to create directory " + (outputDir))); } } for (java.nio.file.Path relPath : relPaths) { libcore.Repository expectedUpstream = standardRepositories.currentUpstream(relPath); for (libcore.Repository upstream : standardRepositories.upstreams()) { java.nio.file.Path upstreamFile = upstream.absolutePath(relPath); if (upstreamFile != null) { java.nio.file.Path outputFile = outputDir.resolve(upstream.name()).resolve(relPath); copyFile(upstreamFile, outputFile); if (upstream.equals(expectedUpstream)) { copyFile(upstreamFile, outputDir.resolve("expected").resolve(relPath)); } } } } }
synchronized boolean unregisterApp() { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "unregisterApp()"); } int callingUid = android.os.Binder.getCallingUid(); if ((callingUid == (mUserUid)) || (callingUid < (FIRST_APPLICATION_UID))) { mUserUid = 0; return mHidDeviceNativeInterface.unregisterApp(); } android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "unregisterApp(): caller UID doesn't match user UID"); return false; }

synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if ((mUserUid) != 0) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "registerApp(): failed because another app is registered"); return false; } mUserUid = android.os.Binder.getCallingUid(); if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("registerApp(): calling uid=" + (mUserUid))); } mCallback = callback; return mHidDeviceNativeInterface.registerApp(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null ? null : inQos.toArray()), (outQos == null ? null : outQos.toArray())); }
@java.lang.Override public void enter() { android.net.apf.ApfFilter.ApfConfiguration apfConfig = new android.net.apf.ApfFilter.ApfConfiguration(); apfConfig.apfCapabilities = mConfiguration.mApfCapabilities; apfConfig.multicastFilter = mMulticastFiltering; apfConfig.ieee802_3Filter = mContext.getResources().getBoolean(R.bool.config_apfDrop802_3Frames); apfConfig.ethTypeBlackList = mContext.getResources().getIntArray(R.array.config_apfEthTypeBlackList); mApfFilter = android.net.apf.ApfFilter.maybeCreate(apfConfig, mInterfaceParams, mCallback); if ((mApfFilter) == null) { mCallback.setFallbackMulticastFilter(mMulticastFiltering); } mPacketTracker = createPacketTracker(); if ((mPacketTracker) != null) mPacketTracker.start(mConfiguration.mDisplayName); if ((mConfiguration.mEnableIPv6) && (!(startIPv6()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPV6); transitionTo(mStoppingState); return; } if ((mConfiguration.mEnableIPv4) && (!(startIPv4()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPV4); transitionTo(mStoppingState); return; } final android.net.ip.IpClient.InitialConfiguration config = mConfiguration.mInitialConfig; if ((config != null) && (!(applyInitialConfig(config)))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_INVALID_PROVISIONING); transitionTo(mStoppingState); return; } if ((mConfiguration.mUsingIpReachabilityMonitor) && (!(startIpReachabilityMonitor()))) { doImmediateProvisioningFailure(IpManagerEvent.ERROR_STARTING_IPREACHABILITYMONITOR); transitionTo(mStoppingState); return; } }
@org.junit.Test public void testRaProcessing() throws java.lang.Exception { final int maxRandomPacketSize = 512; final java.util.Random r = new java.util.Random(); android.net.apf.ApfTest.MockIpManagerCallback cb = new android.net.apf.ApfTest.MockIpManagerCallback(); android.net.apf.ApfFilter.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multicastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieee802_3Filter = android.net.apf.ApfTest.DROP_802_3_FRAMES; android.net.apf.ApfTest.TestApfFilter apfFilter = new android.net.apf.ApfTest.TestApfFilter(config, cb, mLog); for (int i = 0; i < 1000; i++) { byte[] packet = new byte[r.nextInt((maxRandomPacketSize + 1))]; r.nextBytes(packet); try { apfFilter.processRa(packet, packet.length); } catch (java.lang.Exception e) { throw new java.lang.Exception(("bad packet: " + (com.android.internal.util.HexDump.toHexString(packet))), e); } } }
@org.junit.Test public void testApfFilterArp() throws java.lang.Exception { android.net.apf.ApfTest.MockIpManagerCallback ipManagerCallback = new android.net.apf.ApfTest.MockIpManagerCallback(); android.net.apf.ApfFilter.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multicastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieee802_3Filter = android.net.apf.ApfTest.DROP_802_3_FRAMES; android.net.apf.ApfTest.TestApfFilter apfFilter = new android.net.apf.ApfTest.TestApfFilter(config, ipManagerCallback, mLog); verifyArpFilter(ipManagerCallback.getApfProgram(), android.net.apf.ApfTest.PASS); android.net.LinkAddress linkAddress = new android.net.LinkAddress(java.net.InetAddress.getByAddress(android.net.apf.ApfTest.MOCK_IPV4_ADDR), 24); android.net.LinkProperties lp = new android.net.LinkProperties(); assertTrue(lp.addLinkAddress(linkAddress)); verifyArpFilter(getProgram(ipManagerCallback, apfFilter, lp), android.net.apf.ApfTest.DROP); verifyArpFilter(getProgram(ipManagerCallback, apfFilter, new android.net.LinkProperties()), android.net.apf.ApfTest.PASS); apfFilter.shutdown(); }



@org.junit.Test public void testRaParsing() throws java.lang.Exception { final int maxRandomPacketSize = 512; final java.util.Random r = new java.util.Random(); android.net.apf.ApfTest.MockIpManagerCallback cb = new android.net.apf.ApfTest.MockIpManagerCallback(); android.net.apf.ApfFilter.ApfConfiguration config = android.net.apf.ApfTest.getDefaultConfig(); config.multicastFilter = android.net.apf.ApfTest.DROP_MULTICAST; config.ieee802_3Filter = android.net.apf.ApfTest.DROP_802_3_FRAMES; android.net.apf.ApfTest.TestApfFilter apfFilter = new android.net.apf.ApfTest.TestApfFilter(config, cb, mLog); for (int i = 0; i < 1000; i++) { byte[] packet = new byte[r.nextInt((maxRandomPacketSize + 1))]; r.nextBytes(packet); try { apfFilter.new android.net.apf.Ra(packet, packet.length); } catch (android.net.apf.ApfFilter e) { } catch (java.lang.Exception e) { throw new java.lang.Exception(("bad packet: " + (com.android.internal.util.HexDump.toHexString(packet))), e); } } }
@java.lang.Override public void onSubscriptionsChanged() { listenForPhoneState(false); listenForPhoneState(true); }

private void startListenForPhoneState() { if (!(mListening)) { int subId = android.telephony.SubscriptionManager.getDefaultSubscriptionId(); if (android.telephony.SubscriptionManager.isValidSubscriptionId(subId)) { mPhoneStateListener = new com.android.bluetooth.hfp.HeadsetPhoneState.HeadsetPhoneStateListener(subId, mHeadsetService.getStateMachinesThreadLooper()); mTelephonyManager.listen(mPhoneStateListener, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); mListening = true; } else { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ("startListenForPhoneState, invalid subscription ID " + subId)); } } }
private void stopListenForPhoneState() { if (mListening) { mTelephonyManager.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE); mListening = false; } }
public void cleanup() { listenForPhoneState(false); mSubscriptionManager.removeOnSubscriptionsChangedListener(mOnSubscriptionsChangedListener); }
@android.support.annotation.VisibleForTesting public void listenForPhoneState(boolean start) { synchronized(mTelephonyManager) { if (start) { startListenForPhoneState(); } else { stopListenForPhoneState(); } } }








@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.testList.entrySet()) { java.io.File apk = new java.io.File(mApkDir, entry.getValue()); getDevice().installPackage(apk, true); runDeviceTests(com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.CLASS, entry.getKey()); } }
@org.junit.Test public void testSniper3d() throws java.io.IOException, java.lang.InterruptedException { startApp(com.google.android.gfx.benchmark.test.GraphicsBenchmarkTest.App.SNIPER_3D); }

private void resolvePrivateDnsConfig(com.android.server.connectivity.DnsManager.PrivateDnsConfig cfg) { if (cfg == null) { mPrivateDnsCfg = null; return; } if (!(cfg.inStrictMode())) { mPrivateDnsCfg = cfg; return; } if (((((mPrivateDnsCfg) != null) && (mPrivateDnsCfg.inStrictMode())) && ((mPrivateDnsCfg.ips.length) > 0)) && (mPrivateDnsCfg.hostname.equals(cfg.hostname))) { return; } mPrivateDnsCfg = cfg; final com.android.server.connectivity.DnsManager.PrivateDnsConfig resolvedCfg = com.android.server.connectivity.DnsManager.tryBlockingResolveOf(mNetwork, mPrivateDnsCfg.hostname); if (resolvedCfg != null) mPrivateDnsCfg = resolvedCfg; }
private void handleRegisterNetworkAgent(NetworkAgentInfo na) { if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log("Got NetworkAgent Messenger"); mNetworkAgentInfos.put(na.messenger, na); synchronized(mNetworkForNetId) { mNetworkForNetId.put(na.network.netId, na); } na.asyncChannel.connect(mContext, mTrackerHandler, na.messenger); android.net.NetworkInfo networkInfo = na.networkInfo; na.networkInfo = null; updateNetworkInfo(na, networkInfo); updateUids(na, null, na.networkCapabilities); }
private void handlePrivateDnsSettingsChanged() { final PrivateDnsConfig cfg = mDnsManager.getPrivateDnsConfig(); for (NetworkAgentInfo nai : mNetworkAgentInfos.values()) { if (!(com.android.server.connectivity.NetworkMonitor.isValidationRequired(mDefaultRequest.networkCapabilities, nai.networkCapabilities))) { continue; } nai.networkMonitor.notifyPrivateDnsSettingsChanged(cfg); if (!(cfg.inStrictMode())) { updatePrivateDns(nai, cfg); } } }


private void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo networkAgent, android.net.LinkProperties oldLp) { android.net.LinkProperties newLp = networkAgent.linkProperties; int netId = networkAgent.network.netId; if ((networkAgent.clatd) != null) { networkAgent.clatd.fixupLinkProperties(oldLp); } updateInterfaces(newLp, oldLp, netId, networkAgent.networkCapabilities); updateMtu(newLp, oldLp); updateTcpBufferSizes(networkAgent); updateRoutes(newLp, oldLp, netId); updateDnses(newLp, oldLp, netId); networkAgent.updateClat(mNetd); if (isDefaultNetwork(networkAgent)) { handleApplyDefaultProxy(newLp.getHttpProxy()); } else { updateProxy(newLp, oldLp, networkAgent); } if (!(java.util.Objects.equals(newLp, oldLp))) { notifyIfacesChangedForNetworkStats(); notifyNetworkCallbacks(networkAgent, ConnectivityManager.CALLBACK_IP_CHANGED); } mKeepaliveTracker.handleCheckKeepalivesStillValid(networkAgent); }
private boolean updatePrivateDns(com.android.server.connectivity.NetworkAgentInfo nai, com.android.server.connectivity.DnsManager.PrivateDnsConfig newCfg) { final boolean reevaluationRequired = true; final boolean dontReevaluate = false; final com.android.server.connectivity.DnsManager.PrivateDnsConfig oldCfg = mDnsManager.updatePrivateDns(nai.network, newCfg); updateDnses(nai.linkProperties, null, nai.network.netId); if (newCfg == null) { if (oldCfg == null) return dontReevaluate; return oldCfg.useTls ? reevaluationRequired : dontReevaluate; } if (oldCfg == null) { return newCfg.useTls ? reevaluationRequired : dontReevaluate; } if ((oldCfg.useTls) != (newCfg.useTls)) { return reevaluationRequired; } if ((newCfg.inStrictMode()) && (!(java.util.Objects.equals(oldCfg.hostname, newCfg.hostname)))) { return reevaluationRequired; } return dontReevaluate; }




@com.android.internal.annotations.VisibleForTesting protected boolean isTetherProvisioningRequired() { java.lang.String[] provisionApp = mContext.getResources().getStringArray(com.android.internal.R.array.config_mobile_hotspot_provision_app); if ((mSystemProperties.getBoolean(com.android.server.connectivity.Tethering.DISABLE_PROVISIONING_SYSPROP_KEY, false)) || (provisionApp == null)) { return false; } if (carrierConfigAffirmsEntitlementCheckNotRequired()) { return false; } return (provisionApp.length) == 2; }

@java.lang.Override public void close(java.io.FileDescriptor fd) throws android.system.ErrnoException { try { if (fd.isSocket$()) { if (libcore.io.BlockGuardOs.isLingerSocket(fd)) { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); } } } catch (android.system.ErrnoException ignored) { } os.close(fd); }
public synchronized void closeChannels() { java.util.Collection<com.android.se.Channel> col = mChannels.values(); com.android.se.Channel[] channelList = col.toArray(new com.android.se.Channel[col.size()]); for (com.android.se.Channel channel : channelList) { closeChannel(channel); } }

@java.lang.Override public void onStateChange(boolean state) { synchronized(mLock) { android.util.Log.i(mTag, ("OnStateChange:" + state)); mIsConnected = state; if (!state) { if ((mAccessControlEnforcer) != null) { mAccessControlEnforcer.reset(); } } else { try { initializeAccessControl(); } catch (java.lang.Exception e) { } synchronized(mLock) { mDefaultApplicationSelectedOnBasicChannel = true; } } } }


@org.junit.Before public void setUp() throws java.lang.Exception { java.net.URL resultsDir = getClass().getResource(RESULTS_DIR); mBuildHelper = new com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper(null) { @java.lang.Override public java.io.File getResultsDir() { return new java.io.File(resultsDir.getPath()); } }; mHelper = new com.android.compatibility.common.tradefed.util.VtsRetryFilterHelper(mBuildHelper, 0, "SUB_PLAN", new java.util.HashSet<java.lang.String>(), new java.util.HashSet<java.lang.String>(), "ABI_NAME", "MODULE_NAME", "TEST_NAME", com.android.compatibility.common.tradefed.util.RetryType.FAILED); }
@java.lang.Override protected synchronized boolean start() { if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "start()"); } com.android.bluetooth.hfpclient.NativeInterface.initializeNative(); mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); mSmFactory = new com.android.bluetooth.hfpclient.HeadsetClientStateMachineFactory(); mStateMachineMap.clear(); android.content.IntentFilter filter = new android.content.IntentFilter(android.media.AudioManager.VOLUME_CHANGED_ACTION); try { registerReceiver(mBroadcastReceiver, filter); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "Unable to register broadcat receiver", e); } com.android.bluetooth.hfpclient.HeadsetClientService.setHeadsetClientService(this); mNativeInterface = new com.android.bluetooth.hfpclient.NativeInterface(); android.content.Intent startIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); startService(startIntent); mSmThread = new android.os.HandlerThread("HeadsetClient.SM"); mSmThread.start(); return true; }
@java.lang.Override protected synchronized boolean stop() { try { unregisterReceiver(mBroadcastReceiver); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "Unable to unregister broadcast receiver", e); } for (java.util.Iterator<java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.hfpclient.HeadsetClientStateMachine>> it = mStateMachineMap.entrySet().iterator(); it.hasNext();) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = mStateMachineMap.get(((android.bluetooth.BluetoothDevice) (it.next().getKey()))); sm.doQuit(); it.remove(); } android.content.Intent stopIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); stopIntent.putExtra(com.android.bluetooth.hfpclient.HeadsetClientService.HFP_CLIENT_STOP_TAG, true); startService(stopIntent); mNativeInterface = null; mSmThread.quit(); mSmThread = null; com.android.bluetooth.hfpclient.NativeInterface.cleanupNative(); return true; }
@java.lang.Override protected void setUserUnlocked(int userId) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "User unlocked, initializing the service"); if (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.avrcp.AvrcpTargetService.AVRCP_ENABLE_PROPERTY, false))) { android.util.Log.w(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "Skipping initialization of the new AVRCP Target Service"); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = null; return; } init(); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = this; }
@java.lang.Override protected boolean start() { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "Starting the AVRCP Target Service"); mCurrentData = new com.android.bluetooth.avrcp.MediaData(null, null, null); mReceiver = new com.android.bluetooth.avrcp.AvrcpTargetService.AvrcpBroadcastReceiver(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothA2dp.ACTION_ACTIVE_DEVICE_CHANGED); registerReceiver(mReceiver, filter); return true; }
private void init() { if ((mMediaPlayerList) != null) { android.util.Log.wtfStack(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, "init: The service has already been initialized"); return; } mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); com.android.bluetooth.avrcp.AvrcpTargetService.sDeviceMaxVolume = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC); mMediaPlayerList = new com.android.bluetooth.avrcp.MediaPlayerList(); mMediaPlayerList.init(android.os.Looper.myLooper(), this, new com.android.bluetooth.avrcp.AvrcpTargetService.ListCallback()); mNativeInterface = com.android.bluetooth.avrcp.AvrcpNativeInterface.getInterface(); mNativeInterface.init(this); }
private void createServerSession(javax.obex.ObexTransport transport) { mServerSession = new com.android.bluetooth.opp.BluetoothOppObexServerSession(this, transport, this); mServerSession.preStart(); if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ((("Get ServerSession " + (mServerSession.toString())) + " for incoming connection") + (transport.toString()))); } }
@android.support.annotation.VisibleForTesting synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((((("connectionStateChanged: unexpected invocation. device=" + device) + " fromState=") + fromState) + " toState=") + toState)); return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { setActiveDevice(device); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (getConnectedDevices().isEmpty())) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (device + " is unbond. Remove state machine")); } removeStateMachine(device); } } }
private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dpSink.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); mContext.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); log(((((("Connection state " + device) + ": ") + prevState) + "->") + state)); }
private void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { return; } synchronized(mStateMachines) { if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { updateOptionalCodecsSupport(device); } if ((toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && ((mMaxConnectedAudioDevices) == 1)) { setActiveDevice(device); } if ((isActiveDevice(device)) && (fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { removeStateMachine(device); } } } }
private synchronized void setState(int state, int result) { if (state != (mState)) { if (com.android.bluetooth.sap.SapService.DEBUG) { android.util.Log.d(com.android.bluetooth.sap.SapService.TAG, ((((("Sap state " + (mState)) + " -> ") + state) + ", result = ") + result)); } int prevState = mState; mState = state; android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothSap.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, mState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mRemoteDevice); sendBroadcast(intent, com.android.bluetooth.sap.BLUETOOTH_PERM); } }
private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { if (device == null) { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG, "onConnectionStateChanged with invalid device"); return; } android.util.Log.d(com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG, ((((("Connection state " + device) + ": ") + prevState) + "->") + state)); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothPbapClient.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }
@java.lang.Override public void enter() { try { startObexServerSession(); } catch (java.io.IOException ex) { android.util.Log.e(com.android.bluetooth.pbap.PbapStateMachine.TAG, ("Caught exception starting OBEX server session" + (ex.toString()))); } broadcastStateTransitions(); }
@java.lang.Override public void enter() { if (com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, ("Enter Connected: " + (getCurrentMessage().what))); } mAudioWbs = false; mCommandedSpeakerVolume = -1; if ((mPrevState) == (mConnecting)) { broadcastConnectionState(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_CONNECTING); } else if ((mPrevState) != (mAudioOn)) { java.lang.String prevStateName = ((mPrevState) == null) ? "null" : mPrevState.getName(); android.util.Log.e(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, ((("Connected: Illegal state transition from " + prevStateName) + " to Connecting, mCurrentDevice=") + (mCurrentDevice))); } }
@java.lang.Override public boolean processMessage(android.os.Message msg) { if (com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.DBG) android.util.Log.d(com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.TAG, (" HandleMessage: " + (com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.dumpMessageString(msg.what)))); switch (msg.what) { case com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.MESSAGE_PROCESS_CONNECTION_CHANGE : if ((msg.arg1) == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { mBrowseTree.init(); transitionTo(mConnected); android.bluetooth.BluetoothDevice rtDevice = ((android.bluetooth.BluetoothDevice) (msg.obj)); synchronized(mLock) { mRemoteDevice = new com.android.bluetooth.avrcpcontroller.RemoteDevice(rtDevice); mAddressedPlayer = new com.android.bluetooth.avrcpcontroller.AvrcpPlayer(); mIsConnected = true; } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAvrcpController.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, BluetoothProfile.STATE_DISCONNECTED); intent.putExtra(BluetoothProfile.EXTRA_STATE, BluetoothProfile.STATE_CONNECTED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, rtDevice); mContext.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); } break; default : android.util.Log.w(com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.TAG, ("Currently Disconnected not handling " + (com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.dumpMessageString(msg.what)))); return false; } return true; }
private void onConnectionStateChanged(int prevState, int state) { if ((mDevice) == null) { return; } if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, ((((("Connection state " + (mDevice)) + ": ") + prevState) + "->") + state)); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothMapClient.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }
private void setAndBroadcastConnectionState(android.bluetooth.BluetoothDevice device, int newState) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ((((("setAndBroadcastConnectionState(): device=" + (device.getAddress())) + " oldState=") + (mHidDeviceState)) + " newState=") + newState)); } if (((mHidDevice) != null) && (!(mHidDevice.equals(device)))) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "Connection state changed for unknown device, ignoring"); return; } int prevState = mHidDeviceState; mHidDeviceState = newState; if (prevState == newState) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "Connection state is unchanged, ignoring"); return; } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHidDevice.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); sendBroadcast(intent, com.android.bluetooth.hid.BLUETOOTH_PERM); }
private void updateAndSendIntent(android.bluetooth.BluetoothDevice device, int newDeviceState, int prevDeviceState) { if (newDeviceState == (android.bluetooth.BluetoothHealth.STATE_DISCONNECTED)) { mHealthDevices.remove(device); } else { mHealthDevices.put(device, newDeviceState); } }
void deviceConnected(java.lang.String bdaddr, boolean absoluteVolume) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ((("deviceConnected: bdaddr=" + bdaddr) + " absoluteVolume=") + absoluteVolume)); mAudioManager.avrcpSupportsAbsoluteVolume(bdaddr, absoluteVolume); }
@com.android.internal.annotations.VisibleForTesting public void onConnectionStateChangedFromStateMachine(android.bluetooth.BluetoothDevice device, int fromState, int toState) { synchronized(mStateMachines) { java.util.List<android.bluetooth.BluetoothDevice> audioConnectableDevices = getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.CONNECTING_CONNECTED_STATES); if ((fromState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((audioConnectableDevices.size()) > 1) { mInbandRingingRuntimeDisable = true; doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.SEND_BSIR, 0)); } if ((mActiveDevice) == null) { setActiveDevice(device); } } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (toState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((audioConnectableDevices.size()) <= 1) { mInbandRingingRuntimeDisable = false; doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.SEND_BSIR, 1)); } if (device.equals(mActiveDevice)) { setActiveDevice(null); } } } }


java.lang.String serialString() { java.lang.StringBuilder sb = new java.lang.StringBuilder(8); java.lang.String sn; long adjustedSerial = (((long) (mSerial)) - (java.lang.Integer.MIN_VALUE)) % 10000; sn = java.lang.Long.toString(adjustedSerial); sb.append('['); for (int i = 0, s = sn.length(); i < (4 - s); i++) { sb.append('0'); } sb.append(sn); sb.append(']'); return sb.toString(); }
private boolean isRequired() { return (((com.android.compatibility.common.util.PropertyUtil.getFirstApiLevel()) >= (android.security.cts.EncryptionTest.MIN_API_LEVEL)) && (!(hasLowRAM()))) && (!(isTelevision())); }
@java.lang.Override public void tearDown(com.android.tradefed.invoker.IInvocationContext context, java.lang.Throwable e) throws com.android.tradefed.device.DeviceNotAvailableException { if (((mVenvDir) != null) && (mIsDirCreator)) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.recursiveDelete(mVenvDir.toPath()); com.android.tradefed.log.LogUtil.CLog.i("Deleted the virtual env's temp working dir, %s.", mVenvDir); } catch (java.io.IOException exception) { com.android.tradefed.log.LogUtil.CLog.e("Failed to delete %s: %s", mVenvDir, exception); } mVenvDir = null; } }
@java.lang.Override public void setUp(com.android.tradefed.invoker.IInvocationContext context) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.TargetSetupError { mBuildInfo = context.getBuildInfos().get(0); startVirtualenv(mBuildInfo); setLocalPypiPath(); installDeps(mBuildInfo); }




public void dump(java.lang.StringBuilder sb) { if ((mMediaPlayerList) != null) { mMediaPlayerList.dump(sb); } else { sb.append("\nMedia Player List is empty\n"); } }
private void resetProxyAndRequestList() { mRadioProxy = null; mRadioProxyCookie.incrementAndGet(); setRadioState(RadioState.RADIO_UNAVAILABLE); com.android.internal.telephony.RILRequest.resetSerial(); clearRequestList(com.android.internal.telephony.RADIO_NOT_AVAILABLE, false); }
private void checkListenerPermission(int events) { if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_LOCATION)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); } if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_INFO)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK)) != 0) { try { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, null); } catch (java.lang.SecurityException e) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_STATE, null); } } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_STATE_PERMISSION_MASK)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRECISE_PHONE_STATE, null); } }




@android.test.suitebuilder.annotation.MediumTest public void testWindowDockAndUndock_dividerWindowAppearsAndDisappears() throws java.lang.Exception { if (getInstrumentation().getContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_LEANBACK)) { return; } try { if (!(getInstrumentation().getContext().getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier("config_supportsSplitScreenMultiWindow", "bool", "android")))) { return; } } catch (android.content.res.Resources e) { } if (!(getInstrumentation().getContext().getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier("config_supportsMultiWindow", "bool", "android")))) { return; } setAccessInteractiveWindowsFlag(); final android.app.UiAutomation uiAutomation = getInstrumentation().getUiAutomation(); assertFalse(isDividerWindowPresent(uiAutomation)); java.lang.Runnable toggleSplitScreenRunnable = new java.lang.Runnable() { @java.lang.Override public void run() { assertTrue(uiAutomation.performGlobalAction(AccessibilityService.GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN)); } }; android.app.UiAutomation.AccessibilityEventFilter windowsChangedFilter = new android.app.UiAutomation.AccessibilityEventFilter() { @java.lang.Override public boolean accept(android.view.accessibility.AccessibilityEvent event) { return (event.getEventType()) == (android.view.accessibility.AccessibilityEvent.TYPE_WINDOWS_CHANGED); } }; uiAutomation.executeAndWaitForEvent(toggleSplitScreenRunnable, windowsChangedFilter, android.accessibilityservice.cts.TIMEOUT_ASYNC_PROCESSING); waitForIdle(); assertTrue(isDividerWindowPresent(uiAutomation)); uiAutomation.executeAndWaitForEvent(toggleSplitScreenRunnable, windowsChangedFilter, android.accessibilityservice.cts.TIMEOUT_ASYNC_PROCESSING); waitForIdle(); assertFalse(isDividerWindowPresent(uiAutomation)); }


@java.lang.Override public void doGetHandler(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException { if ((keyFileInputStream) == null) { request.setAttribute("error_title", "GCS Key file Error"); request.setAttribute("error_message", "The GCS Key file is not existed!"); javax.servlet.RequestDispatcher dispatcher = request.getRequestDispatcher(com.android.vts.servlet.ERROR_MESSAGE_JSP); try { dispatcher.forward(request, response); } catch (javax.servlet.ServletException e) { logger.log(java.util.logging.Level.SEVERE, "Servlet Excpetion caught : ", e); } } else { java.lang.String action = ((request.getParameter("action")) == null) ? "read" : request.getParameter("action"); java.lang.String path = ((request.getParameter("path")) == null) ? "/" : request.getParameter("path"); java.lang.String entry = ((request.getParameter("entry")) == null) ? "" : request.getParameter("entry"); java.nio.file.Path pathInfo = java.nio.file.Paths.get(path); com.google.cloud.storage.Bucket vtsReportBucket = storage.get(com.android.vts.servlet.ShowGcsLogServlet.GCS_BUCKET_NAME); java.util.List<java.lang.String> dirList = new java.util.ArrayList<>(); java.util.List<java.lang.String> fileList = new java.util.ArrayList<>(); java.util.List<java.lang.String> entryList = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.Object> resultMap = new java.util.HashMap<>(); java.lang.String entryContent = ""; if (pathInfo.toString().endsWith(".zip")) { com.google.cloud.storage.Blob blobFile = ((com.google.cloud.storage.Blob) (this.syncCache.get(path.toString()))); if (blobFile == null) { blobFile = vtsReportBucket.get(path); this.syncCache.put(path.toString(), blobFile); } if (action.equalsIgnoreCase("read")) { java.io.InputStream blobInputStream = new java.io.ByteArrayInputStream(blobFile.getContent()); java.util.zip.ZipInputStream zipInputStream = new java.util.zip.ZipInputStream(blobInputStream); java.util.zip.ZipEntry zipEntry; while ((zipEntry = zipInputStream.getNextEntry()) != null) { if (zipEntry.isDirectory()) { } else { if ((entry.length()) > 0) { logger.log(java.util.logging.Level.INFO, ("param entry => " + entry)); if (zipEntry.getName().equals(entry)) { logger.log(java.util.logging.Level.INFO, ("matched !!!! " + (zipEntry.getName()))); entryContent = org.apache.commons.io.IOUtils.toString(zipInputStream, java.nio.charset.StandardCharsets.UTF_8.name()); } } else { entryList.add(zipEntry.getName()); } } } resultMap.put("entryList", entryList); resultMap.put("entryContent", entryContent); java.lang.String json = new com.google.gson.Gson().toJson(resultMap); response.setContentType("application/json"); response.setCharacterEncoding("UTF-8"); response.getWriter().write(json); } else { response.setContentType("application/octet-stream"); response.setContentLength(blobFile.getSize().intValue()); response.setHeader("Content-Disposition", (("attachment; filename=\"" + (pathInfo.getFileName())) + "\"")); response.getOutputStream().write(blobFile.getContent()); } } else { logger.log(java.util.logging.Level.INFO, ("path info => " + pathInfo)); logger.log(java.util.logging.Level.INFO, ("path name count => " + (pathInfo.getNameCount()))); com.google.cloud.storage.Storage.BlobListOption[] listOptions; if ((pathInfo.getNameCount()) == 0) { listOptions = new com.google.cloud.storage.Storage.BlobListOption[]{ com.google.cloud.storage.Storage.BlobListOption.currentDirectory() }; } else { if ((pathInfo.getNameCount()) <= 1) { dirList.add("/"); } else { dirList.add(pathInfo.getParent().toString()); } listOptions = new com.google.cloud.storage.Storage.BlobListOption[]{ com.google.cloud.storage.Storage.BlobListOption.currentDirectory(), com.google.cloud.storage.Storage.BlobListOption.prefix(((pathInfo.toString()) + "/")) }; } java.lang.Iterable<com.google.cloud.storage.Blob> blobIterable = vtsReportBucket.list(listOptions).iterateAll(); java.util.Iterator<com.google.cloud.storage.Blob> blobIterator = blobIterable.iterator(); while (blobIterator.hasNext()) { com.google.cloud.storage.Blob blob = blobIterator.next(); logger.log(java.util.logging.Level.INFO, ("blob name => " + blob)); if (blob.isDirectory()) { logger.log(java.util.logging.Level.INFO, ("directory name => " + (blob.getName()))); dirList.add(blob.getName()); } else { logger.log(java.util.logging.Level.INFO, ("file name => " + (blob.getName()))); fileList.add(java.nio.file.Paths.get(blob.getName()).getFileName().toString()); } } response.setStatus(HttpServletResponse.SC_OK); request.setAttribute("entryList", entryList); request.setAttribute("dirList", dirList); request.setAttribute("fileList", fileList); request.setAttribute("path", path); javax.servlet.RequestDispatcher dispatcher = request.getRequestDispatcher(com.android.vts.servlet.ShowGcsLogServlet.GCS_LOG_JSP); try { dispatcher.forward(request, response); } catch (javax.servlet.ServletException e) { logger.log(java.util.logging.Level.SEVERE, "Servlet Excpetion caught : ", e); } } } }
@java.lang.Override public void call(org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams response) { if (((response.output) != null) && ((response.output.which()) == (RunOutput.Tag.QueryVersionResult))) { mVersion = response.output.getQueryVersionResult().version; } try { callback.call(mVersion); } catch (java.lang.RuntimeException e) { android.util.Log.wtf("org.chromium.mojo.bindings.Interface", "Uncaught runtime exception", e); } }
@java.lang.Override public void queryVersion(final org.chromium.mojo.bindings.Callbacks.Callback1<java.lang.Integer> callback) { RunMessageParams message = new RunMessageParams(); message.input = new org.chromium.mojo.bindings.interfacecontrol.RunInput(); message.input.setQueryVersion(new QueryVersion()); org.chromium.mojo.bindings.InterfaceControlMessagesHelper.sendRunMessage(getCore(), mMessageReceiver, message, new org.chromium.mojo.bindings.Callbacks.Callback1<org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams>() { @java.lang.Override public void call(org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams response) { if (((response.output) != null) && ((response.output.which()) == (RunOutput.Tag.QueryVersionResult))) { mVersion = response.output.getQueryVersionResult().version; } try { callback.call(mVersion); } catch (java.lang.RuntimeException e) { android.util.Log.wtf("org.chromium.mojo.bindings.Interface", "Uncaught runtime exception", e); } } }); }
@java.lang.Override public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver responder) { org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage(); assert messageWithHeader.getHeader().hasFlag(MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG); synchronized(mResponders) { long requestId = (mNextRequestId)++; if (requestId == 0) { requestId = (mNextRequestId)++; } if (mResponders.containsKey(requestId)) { throw new java.lang.IllegalStateException("Unable to find a new request identifier."); } messageWithHeader.setRequestId(requestId); if (!(mConnector.accept(messageWithHeader))) { return false; } mResponders.put(requestId, responder); } return true; }
private boolean handleIncomingMessage(org.chromium.mojo.bindings.Message message) { org.chromium.mojo.bindings.MessageHeader header = message.asServiceMessage().getHeader(); if (header.hasFlag(MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) { if ((mIncomingMessageReceiver) != null) { return mIncomingMessageReceiver.acceptWithResponder(message, new org.chromium.mojo.bindings.RouterImpl.ResponderThunk()); } close(); return false; } else if (header.hasFlag(MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) { long requestId = header.getRequestId(); org.chromium.mojo.bindings.MessageReceiver responder; synchronized(mResponders) { responder = mResponders.get(requestId); if (responder == null) { return false; } mResponders.remove(requestId); } return responder.accept(message); } else { if ((mIncomingMessageReceiver) != null) { return mIncomingMessageReceiver.accept(message); } } return false; }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.name())) + "]")); } }
private com.android.tradefed.util.IRunUtil createMockRunUtil(com.android.tradefed.util.CommandResult result) { com.android.tradefed.util.IRunUtil runUtil = org.easymock.EasyMock.createMock(com.android.tradefed.util.IRunUtil.class); org.easymock.EasyMock.expect(runUtil.runTimedCmd(org.easymock.EasyMock.anyLong(), org.easymock.EasyMock.eq("which"), org.easymock.EasyMock.eq("python"))).andReturn(result).anyTimes(); org.easymock.EasyMock.expect(runUtil.runTimedCmd(org.easymock.EasyMock.anyLong(), org.easymock.EasyMock.eq("where"), org.easymock.EasyMock.eq("python.exe"))).andReturn(result).anyTimes(); org.easymock.EasyMock.replay(runUtil); return runUtil; }
@org.junit.Before public void setUp() throws java.lang.Exception { com.android.tradefed.build.IFolderBuildInfo buildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IFolderBuildInfo.class); org.easymock.EasyMock.replay(buildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(buildInfo) { @java.lang.Override protected com.android.tradefed.util.ProcessHelper createProcessHelper(java.lang.String[] cmd) { return mProcessHelper; } }; }
protected com.android.tradefed.util.ProcessHelper createProcessHelper(java.lang.String[] cmd) throws java.io.IOException { return new com.android.tradefed.util.ProcessHelper(mRunUtil.runCmdInBackground(cmd)); }
public java.lang.String getPythonBinary() { boolean isWindows = com.android.tradefed.util.VtsPythonRunnerHelper.isOnWindows(); java.lang.String python = (isWindows) ? "python.exe" : "python" + (mPythonVersion); if ((mBuildInfo) != null) { java.io.File venvDir = mBuildInfo.getFile(com.android.tradefed.util.VtsPythonRunnerHelper.VIRTUAL_ENV_PATH); if (venvDir != null) { java.lang.String binDir = (isWindows) ? "Scripts" : "bin"; java.io.File pythonBinaryFile = new java.io.File(venvDir.getAbsolutePath(), ((binDir + (java.io.File.separator)) + python)); java.lang.String pythonBinPath = pythonBinaryFile.getAbsolutePath(); if (pythonBinaryFile.exists()) { com.android.tradefed.log.LogUtil.CLog.i((("Python path " + pythonBinPath) + ".\n")); return pythonBinPath; } com.android.tradefed.log.LogUtil.CLog.e(((((python + " doesn't exist under the ") + "created virtualenv dir (") + pythonBinPath) + ").\n")); } else { com.android.tradefed.log.LogUtil.CLog.e((((com.android.tradefed.util.VtsPythonRunnerHelper.VIRTUAL_ENV_PATH) + " not available in BuildInfo. ") + "Please use VtsPythonVirtualenvPreparer tartget preparer.\n")); } } com.android.tradefed.util.CommandResult c = mRunUtil.runTimedCmd(1000, (isWindows ? "where" : "which"), python); java.lang.String pythonBin = c.getStdout().trim(); if ((pythonBin.length()) == 0) { throw new java.lang.RuntimeException(("Could not find python binary on host " + "machine")); } return pythonBin; }
public java.lang.String runPythonRunner(java.lang.String[] cmd, com.android.tradefed.util.CommandResult commandResult, long timeout) { com.android.tradefed.util.ProcessHelper process; try { process = createProcessHelper(cmd); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); commandResult.setStatus(CommandStatus.EXCEPTION); commandResult.setStdout(""); commandResult.setStderr(""); return null; } java.lang.String interruptMessage; try { com.android.tradefed.util.CommandStatus commandStatus; try { commandStatus = process.waitForProcess(timeout); interruptMessage = null; } catch (com.android.tradefed.util.RunInterruptedException e) { com.android.tradefed.log.LogUtil.CLog.e("Python process is interrupted."); commandStatus = com.android.tradefed.util.CommandStatus.TIMED_OUT; interruptMessage = ((e.getMessage()) != null) ? e.getMessage() : ""; } if (process.isRunning()) { com.android.tradefed.log.LogUtil.CLog.e("Cancel Python process and wait %d seconds.", ((com.android.tradefed.util.VtsPythonRunnerHelper.TEST_ABORT_TIMEOUT_MSECS) / 1000)); try { process.closeStdin(); process.waitForProcess(com.android.tradefed.util.VtsPythonRunnerHelper.TEST_ABORT_TIMEOUT_MSECS); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e("Fail to cancel Python process."); } } commandResult.setStatus(commandStatus); } finally { process.cleanUp(); } commandResult.setStdout(process.getStdout()); commandResult.setStderr(process.getStderr()); return interruptMessage; }

@java.lang.Override protected com.android.tradefed.util.ProcessHelper createProcessHelper(java.lang.String[] cmd) { return mProcessHelper; }
public void setPythonVersion(java.lang.String pythonVersion) { mPythonVersion = pythonVersion; }
@org.junit.Test public void testGetPythonPath() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); java.lang.String separator = java.io.File.pathSeparator; if ((java.lang.System.getenv(com.android.tradefed.util.VtsPythonRunnerHelperTest.PYTHONPATH)) != null) { sb.append(separator); sb.append(java.lang.System.getenv(com.android.tradefed.util.VtsPythonRunnerHelperTest.PYTHONPATH)); } java.io.File testVts = new java.io.File("TEST_VTS"); java.io.File testPythonPath = new java.io.File("TEST_PYTHON_PATH"); java.lang.String altTestsDir = java.lang.System.getenv().get(com.android.tradefed.util.VtsPythonRunnerHelperTest.ALT_HOST_TESTCASE_DIR); if (altTestsDir != null) { java.io.File testsDir = new java.io.File(altTestsDir); sb.append(separator); sb.append(testsDir.getAbsolutePath()); } else { sb.append(separator); sb.append(testVts.getAbsolutePath()).append("/.."); } sb.append(separator); sb.append(testPythonPath.getAbsolutePath()); if ((java.lang.System.getenv("ANDROID_BUILD_TOP")) != null) { sb.append(separator); sb.append(java.lang.System.getenv("ANDROID_BUILD_TOP")).append("/test"); } com.android.tradefed.build.IBuildInfo mockBuildInfo = org.easymock.EasyMock.createNiceMock(com.android.tradefed.build.IBuildInfo.class); org.easymock.EasyMock.expect(mockBuildInfo.getFile(org.easymock.EasyMock.eq(com.android.tradefed.util.VtsPythonRunnerHelperTest.VTS))).andReturn(testVts).anyTimes(); org.easymock.EasyMock.expect(mockBuildInfo.getFile(org.easymock.EasyMock.eq(com.android.tradefed.util.VtsPythonRunnerHelperTest.PYTHONPATH))).andReturn(testPythonPath).times(2); org.easymock.EasyMock.replay(mockBuildInfo); mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper(mockBuildInfo); assertEquals(sb.substring(1), mVtsPythonRunnerHelper.getPythonPath()); org.easymock.EasyMock.verify(mockBuildInfo); }
private boolean dirExistsAndHaveReadAccess(java.lang.String path) { java.io.File pathDir = new java.io.File(path); if ((!(pathDir.exists())) || (!(pathDir.isDirectory()))) { com.android.tradefed.log.LogUtil.CLog.i("Directory %s does not exist.", pathDir); return false; } if (!(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.isOnWindows())) { com.android.tradefed.util.CommandResult c = getRunUtil().runTimedCmd(((com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.BASE_TIMEOUT) * 5), "ls", path); if ((c.getStatus()) != (com.android.tradefed.util.CommandStatus.SUCCESS)) { com.android.tradefed.log.LogUtil.CLog.i(java.lang.String.format("Failed to read dir: %s. Result %s. stdout: %s, stderr: %s", path, c.getStatus(), c.getStdout(), c.getStderr())); return false; } return true; } else { try { java.lang.String[] pathDirList = pathDir.list(); if (pathDirList == null) { com.android.tradefed.log.LogUtil.CLog.i("Failed to read dir: %s. Please check access permission.", pathDir); return false; } } catch (java.lang.SecurityException e) { com.android.tradefed.log.LogUtil.CLog.i(java.lang.String.format("Failed to read dir %s with SecurityException %s", pathDir, e)); return false; } return true; } }
protected com.android.tradefed.util.VtsPythonRunnerHelper createVtsPythonRunnerHelper() { return new com.android.tradefed.util.VtsPythonRunnerHelper(mBuildInfo); }
protected void addPathToBuild(com.android.tradefed.build.IBuildInfo buildInfo) { if ((buildInfo.getFile(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PYTHONPATH)) == null) { buildInfo.setFile(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PYTHONPATH, new java.io.File(mVenvDir, "local/lib/python2.7/site-packages"), buildInfo.getBuildId()); } if ((buildInfo.getFile(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.VIRTUAL_ENV_PATH)) == null) { buildInfo.setFile(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.VIRTUAL_ENV_PATH, new java.io.File(mVenvDir.getAbsolutePath()), buildInfo.getBuildId()); } }

@java.lang.Override public java.util.Collection<com.android.tradefed.testtype.IRemoteTest> split(int shardCountHint) { java.util.List<com.android.tradefed.testtype.IRemoteTest> shards = new java.util.ArrayList<>(); for (int i = 0; i < shardCountHint; i++) { if (i >= (mApks.size())) { break; } java.util.List<com.android.graphics.benchmark.ApkInfo> apkInfo = new java.util.ArrayList<>(); for (int j = i; j < (mApks.size()); j += shardCountHint) { apkInfo.add(mApks.get(j)); } com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController shard = new com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController(); shard.mApks = apkInfo; shard.mApkDir = mApkDir; shards.add(shard); } return shards; }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.name())) + "]")); } }


protected void setUp() throws java.lang.Exception { super.setUp(); mCM = ((android.net.ConnectivityManager) (getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); }
private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int ivLen, int blkSize, int truncLenBits) throws java.lang.Exception { int innerPacketSize = ((TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateEspPacketSize(((TEST_DATA.length) + transportHdrLen), ivLen, blkSize, truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = calculateEspPacketSize(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, ivLen, blkSize, truncLenBits); expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (udpEncapLen != 0) { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } }
private void initApkList() { if ((mApks) != null) { return; } if ((mApkInfoFileName) != null) { mApkInfoFile = new java.io.File(mApkInfoFileName); } else { try { java.lang.String resource = "/com/android/graphics/benchmark/apk-info.xml"; java.io.InputStream inputStream = com.android.graphics.benchmark.ApkInfo.class.getResourceAsStream(resource); if (inputStream == null) { throw new java.io.FileNotFoundException(("Unable to find resource: " + resource)); } mApkInfoFile = java.io.File.createTempFile("apk-info", ".xml"); try (java.io.OutputStream ostream = new java.io.FileOutputStream(mApkInfoFile)) { com.google.common.io.ByteStreams.copy(inputStream, ostream); } mApkInfoFile.deleteOnExit(); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } } com.android.graphics.benchmark.ApkListXmlParser parser = new com.android.graphics.benchmark.ApkListXmlParser(mApkInfoFile); try { mApks = parser.parse(); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }

@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("okToConnect: cannot connect to " + device) + " : quiet mode enabled")); return false; } if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("okToConnect: cannot connect to " + device) + " : too many connected devices")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((((("okToConnect: cannot connect to " + device) + " : priority=") + priority) + " bondState=") + bondState)); return false; } if (priority <= (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((("okToConnect: cannot connect to " + device) + " : priority=") + priority)); return false; } return true; }
public boolean okToAcceptConnection(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "okToAcceptConnection: return false as quiet mode enabled"); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((("okToAcceptConnection: return false, priority=" + priority) + ", bondState=") + bondState)); return false; } else if (priority <= (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ("okToAcceptConnection: return false, priority=" + priority)); return false; } java.util.List<android.bluetooth.BluetoothDevice> connectingConnectedDevices = getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.CONNECTING_CONNECTED_STATES); if ((connectingConnectedDevices.size()) >= (mMaxHeadsetConnections)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((("Maximum number of connections " + (mMaxHeadsetConnections)) + " was reached, rejecting connection from ") + device)); return false; } return true; }
@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (("okToConnect: cannot connect to " + device) + " : quiet mode enabled")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE))) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((((("okToConnect: cannot connect to " + device) + " : priority=") + priority) + " bondState=") + bondState)); return false; } if (priority <= (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((("okToConnect: cannot connect to " + device) + " : priority=") + priority)); return false; } return true; }
public void run() { try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } if ((isFinishing()) || (isDestroyed())) return; java.net.HttpURLConnection urlConnection = null; int httpResponseCode = 500; int oldTag = android.net.TrafficStats.getAndSetThreadStatsTag(TrafficStats.TAG_SYSTEM_PROBE); try { urlConnection = ((java.net.HttpURLConnection) (mNetwork.openConnection(new java.net.URL(mCm.getCaptivePortalServerUrl())))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setConnectTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setUseCaches(false); urlConnection.getInputStream(); httpResponseCode = urlConnection.getResponseCode(); } catch (java.io.IOException e) { com.android.carrierdefaultapp.CaptivePortalLoginActivity.loge(e.getMessage()); } finally { if (urlConnection != null) urlConnection.disconnect(); android.net.TrafficStats.setThreadStatsTag(oldTag); } if (httpResponseCode == 204) { done(true); } }
@java.lang.Override public void onAvailable(android.net.Network network) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd(("Network available: " + network)); mCm.bindProcessToNetwork(network); mNetwork = network; runOnUiThreadIfNotFinishing(() -> { if (mReload) { mWebView.reload(); } else { mWebView.loadData("", "text/html", null); } }); }
private void testForCaptivePortal() { mTestingThread = new java.lang.Thread(new java.lang.Runnable() { public void run() { try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } if ((isFinishing()) || (isDestroyed())) return; java.net.HttpURLConnection urlConnection = null; int httpResponseCode = 500; int oldTag = android.net.TrafficStats.getAndSetThreadStatsTag(TrafficStats.TAG_SYSTEM_PROBE); try { urlConnection = ((java.net.HttpURLConnection) (mNetwork.openConnection(new java.net.URL(mCm.getCaptivePortalServerUrl())))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setConnectTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.carrierdefaultapp.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setUseCaches(false); urlConnection.getInputStream(); httpResponseCode = urlConnection.getResponseCode(); } catch (java.io.IOException e) { com.android.carrierdefaultapp.CaptivePortalLoginActivity.loge(e.getMessage()); } finally { if (urlConnection != null) urlConnection.disconnect(); android.net.TrafficStats.setThreadStatsTag(oldTag); } if (httpResponseCode == 204) { done(true); } } }); mTestingThread.start(); }
private void requestNetworkForCaptivePortal() { android.net.NetworkRequest request = new android.net.NetworkRequest.Builder().addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR).addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET).removeCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED).build(); mNetworkCallback = new android.net.ConnectivityManager.NetworkCallback() { @java.lang.Override public void onAvailable(android.net.Network network) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd(("Network available: " + network)); mCm.bindProcessToNetwork(network); mNetwork = network; runOnUiThreadIfNotFinishing(() -> { if (mReload) { mWebView.reload(); } else { mWebView.loadData("", "text/html", null); } }); } @java.lang.Override public void onUnavailable() { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd("Network unavailable"); runOnUiThreadIfNotFinishing(() -> { mWebView.loadUrl(mUrl.toString()); }); } @java.lang.Override public void onLost(android.net.Network lostNetwork) { if (com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd("Network lost"); mReload = true; } }; com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd("request Network for captive portal"); mCm.requestNetwork(request, mNetworkCallback, com.android.carrierdefaultapp.CaptivePortalLoginActivity.NETWORK_REQUEST_TIMEOUT_MS); }

@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED.equals(intent.getAction())) { try { mConnectionStateChangedQueue.put(intent); } catch (java.lang.InterruptedException e) { org.junit.Assert.fail(("Cannot add Intent to the Connection State queue: " + (e.getMessage()))); } } }
private android.content.Intent waitForNoIntent(int timeoutMs, java.util.concurrent.BlockingQueue<android.content.Intent> queue) { try { android.content.Intent intent = queue.poll(timeoutMs, java.util.concurrent.TimeUnit.MILLISECONDS); org.junit.Assert.assertNull(intent); return intent; } catch (java.lang.InterruptedException e) { org.junit.Assert.fail(("Cannot obtain an Intent from the queue: " + (e.getMessage()))); } return null; }
private android.content.Intent waitForIntent(int timeoutMs, java.util.concurrent.BlockingQueue<android.content.Intent> queue) { try { android.content.Intent intent = queue.poll(timeoutMs, java.util.concurrent.TimeUnit.MILLISECONDS); org.junit.Assert.assertNotNull(intent); return intent; } catch (java.lang.InterruptedException e) { org.junit.Assert.fail(("Cannot obtain an Intent from the queue: " + (e.getMessage()))); } return null; }








public static void runGet() throws java.lang.Exception { java.lang.reflect.Method target = Main.IntRunner.class.getDeclaredMethod("run"); Main.IntRunner int_runner = new Main.IntRunner(true); java.lang.Thread target_get = new java.lang.Thread(int_runner, "GetLocalInt - Target"); target_get.start(); int_runner.waitForBusyLoopStart(); try { art.Suspension.suspend(target_get); } catch (java.lang.Exception e) { java.lang.System.out.println(("FAIL: got " + e)); e.printStackTrace(); int_runner.finish(); target_get.join(); return; } try { art.StackTrace.StackFrameData frame = Main.FindStackFrame(target_get, target); int depth = frame.depth; if (depth != 0) { throw new java.lang.Error(("Expected depth 0 but got " + depth)); } int slot = Main.FindSlot(frame); int value = art.Locals.GetLocalVariableInt(target_get, depth, slot); java.lang.System.out.println(("From GetLocalInt(), value is " + value)); } finally { art.Suspension.resume(target_get); int_runner.finish(); target_get.join(); } }
public void run() { int TARGET = 42; while (continueBusyLoop) { inBusyLoop = true; } java.time.Instant osrDeadline = java.time.Instant.now().plusSeconds((expectOsr ? 600 : 3)); do { inBusyLoop = true; } while (((Main.hasJit()) && (!(Main.isInOsrCode("run")))) && ((osrDeadline.compareTo(java.time.Instant.now())) > 0) ); if (Main.hasJit()) { boolean inOsr = Main.isInOsrCode("run"); if ((expectOsr) && (!inOsr)) { throw new java.lang.Error(("Expected to be in OSR but was not. interpreter: " + (Main.isInterpreted()))); } else if ((!(expectOsr)) && inOsr) { throw new java.lang.Error(("Expected not to be in OSR but was. interpreter: " + (Main.isInterpreted()))); } } Main.reportValue(TARGET); }
public static void runSet() throws java.lang.Exception { java.lang.reflect.Method target = Main.IntRunner.class.getDeclaredMethod("run"); Main.IntRunner int_runner = new Main.IntRunner(false); java.lang.Thread target_set = new java.lang.Thread(int_runner, "SetLocalInt - Target"); target_set.start(); int_runner.waitForBusyLoopStart(); try { art.Suspension.suspend(target_set); } catch (java.lang.Exception e) { java.lang.System.out.println(("FAIL: got " + e)); e.printStackTrace(); int_runner.finish(); target_set.join(); return; } try { art.StackTrace.StackFrameData frame = Main.FindStackFrame(target_set, target); int depth = frame.depth; if (depth != 0) { throw new java.lang.Error(("Expected depth 0 but got " + depth)); } int slot = Main.FindSlot(frame); java.lang.System.out.println(("Setting TARGET to " + (Main.SET_VALUE))); art.Locals.SetLocalVariableInt(target_set, depth, slot, Main.SET_VALUE); } finally { art.Suspension.resume(target_set); int_runner.finish(); target_set.join(); } }





@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.name())) + "]")); } }

private static org.json.JSONObject buildLinkProperties(android.net.LinkProperties data) throws org.json.JSONException { org.json.JSONObject info = new org.json.JSONObject(); info.put("InterfaceName", data.getInterfaceName()); info.put("LinkAddresses", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getLinkAddresses())); info.put("DnsServers", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getDnsServers())); info.put("Domains", data.getDomains()); info.put("Mtu", data.getMtu()); info.put("Routes", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getRoutes())); return info; }
private boolean connectAudio(java.lang.String address) { com.android.server.telecom.BluetoothHeadsetProxy bluetoothHeadset = mDeviceManager.getHeadsetService(); if (bluetoothHeadset == null) { android.telecom.Log.w(this, "Trying to connect audio but no headset service exists."); return false; } return bluetoothHeadset.connectAudio(address); }

@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.Map<java.lang.String, java.lang.String> runMetrics = new java.util.HashMap<>(); initApkList(); getDevice().pushFile(mApkInfoFile, ApkInfo.APK_LIST_LOCATION); for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.setAppLayerName(apk); listener.testRunStarted("graphicsbenchmark", mApks.size()); com.android.ddmlib.testrunner.TestIdentifier identifier = new com.android.ddmlib.testrunner.TestIdentifier(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.getName())) + "]")); java.util.Map<java.lang.String, java.lang.String> testMetrics = new java.util.HashMap<>(); listener.testStarted(identifier); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.getName())) + "]")); listener.testEnded(identifier, testMetrics); listener.testRunEnded(0, runMetrics); } }
private com.android.graphics.benchmark.ApkInfo createApkInfo(org.w3c.dom.Element element) { java.util.List<com.android.graphics.benchmark.ApkInfo.Argument> args = new java.util.ArrayList<>(); org.w3c.dom.NodeList argsNodeList = element.getElementsByTagName("args"); if ((argsNodeList.getLength()) > 0) { org.w3c.dom.NodeList children = argsNodeList.item(0).getChildNodes(); for (int j = 0; j < (children.getLength()); j++) { org.w3c.dom.Node argNode = children.item(j); if ((argNode.getNodeType()) != (org.w3c.dom.Node.ELEMENT_NODE)) { continue; } org.w3c.dom.Element argElement = ((org.w3c.dom.Element) (argNode)); args.add(new com.android.graphics.benchmark.ApkInfo.Argument(argElement.getTagName(), argElement.getTextContent())); } } return new com.android.graphics.benchmark.ApkInfo(getElement(element, "name"), getElement(element, "fileName"), getElement(element, "packageName"), getElement(element, "layerName"), args); }
private void startApp(com.android.graphics.benchmark.ApkInfo apk) throws IntentFilter.MalformedMimeTypeException, java.io.IOException { android.os.Looper.prepare(); mHandler = new android.os.Handler(); registerReceiver(); mReport.begin(apk.getName()); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, ("Launching " + (apk.getPackageName()))); android.content.Intent intent = android.support.test.InstrumentationRegistry.getContext().getPackageManager().getLaunchIntentForPackage(apk.getPackageName()); for (com.android.graphics.benchmark.ApkInfo.Argument argument : mApk.getArgs()) { intent.putExtra(argument.getKey(), argument.getValue()); } android.support.test.InstrumentationRegistry.getContext().startActivity(intent); mHandler.postDelayed(() -> mHandler.getLooper().quit(), 10000); android.os.Looper.loop(); mReport.end(); }

@org.junit.Test public void testConnectAudio_deviceDisconnected() { mCurrentDevice = getTestDevice(0); org.junit.Assert.assertTrue(mHeadsetService.connect(mCurrentDevice)); verify(mObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.CONNECT, mCurrentDevice); when(mStateMachines.get(mCurrentDevice).getDevice()).thenReturn(mCurrentDevice); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.EMPTY_LIST, mHeadsetService.getConnectedDevices()); mHeadsetService.onConnectionStateChangedFromStateMachine(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertFalse(mHeadsetService.connectAudio(mCurrentDevice)); verify(mStateMachines.get(mCurrentDevice), never()).sendMessage(eq(HeadsetStateMachine.CONNECT_AUDIO), any()); }

private void phoneStateChanged(int numActive, int numHeld, int callState, java.lang.String number, int type) { enforceCallingOrSelfPermission(android.Manifest.permission.MODIFY_PHONE_STATE, null); doForEachConnectedStateMachine(( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.CALL_STATE_CHANGED, new com.android.bluetooth.hfp.HeadsetCallState(numActive, numHeld, callState, number, type))); }

private void disconnectBluetoothSco(int exceptPid) { synchronized(mScoClients) { checkScoAudioState(); if (((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_ACTIVE_EXTERNAL)) || ((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_DEACTIVATE_EXT_REQ))) { if ((mBluetoothHeadsetDevice) != null) { if ((mBluetoothHeadset) != null) { if (!(mBluetoothHeadset.stopVoiceRecognition(mBluetoothHeadsetDevice))) { com.android.server.audio.AudioService.sendMsg(mAudioHandler, com.android.server.audio.AudioService.MSG_BT_HEADSET_CNCT_FAILED, com.android.server.audio.AudioService.SENDMSG_REPLACE, 0, 0, null, 0); } } else if (((mScoAudioState) == (com.android.server.audio.AudioService.SCO_STATE_ACTIVE_EXTERNAL)) && (getBluetoothHeadset())) { mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_DEACTIVATE_EXT_REQ; } } } else { clearAllScoClients(exceptPid, true); } } }
void setBtScoActiveDevice(android.bluetooth.BluetoothDevice btDevice) { if (com.android.server.audio.AudioService.DEBUG_DEVICES) { android.util.Log.d(com.android.server.audio.AudioService.TAG, (("setBtScoActiveDevice(" + btDevice) + ")")); } synchronized(mScoClients) { final android.bluetooth.BluetoothDevice previousActiveDevice = mBluetoothHeadsetDevice; if (!(java.util.Objects.equals(btDevice, previousActiveDevice))) { if (!(handleBtScoActiveDeviceChange(previousActiveDevice, false))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, ("setBtScoActiveDevice() failed to remove previous device " + previousActiveDevice)); } if (!(handleBtScoActiveDeviceChange(btDevice, true))) { android.util.Log.e(com.android.server.audio.AudioService.TAG, ("setBtScoActiveDevice() failed to add new device " + btDevice)); btDevice = null; } mBluetoothHeadsetDevice = btDevice; if ((mBluetoothHeadsetDevice) == null) { resetBluetoothSco(); } } } }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { long timestamp = intent.getLongExtra("timestamp", 0); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, ("Received intent at " + timestamp)); mReport.startLoop(timestamp); if (!(mGotIntent)) { mHandler.postDelayed(() -> mHandler.getLooper().quit(), 10000); mGotIntent = true; } }
private void registerReceiver() throws IntentFilter.MalformedMimeTypeException { android.content.BroadcastReceiver br = new android.content.BroadcastReceiver() { @java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { long timestamp = intent.getLongExtra("timestamp", 0); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, ("Received intent at " + timestamp)); mReport.startLoop(timestamp); if (!(mGotIntent)) { mHandler.postDelayed(() -> mHandler.getLooper().quit(), 10000); mGotIntent = true; } } }; android.content.IntentFilter intentFilter = new android.content.IntentFilter(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.INTENT_ACTION, "text/plain"); android.support.test.InstrumentationRegistry.getContext().registerReceiver(br, intentFilter); }

@java.lang.Override public void contextInitialized(javax.servlet.ServletContextEvent servletContextEvent) { com.googlecode.objectify.ObjectifyFactory objectifyFactory = com.googlecode.objectify.ObjectifyService.factory(); objectifyFactory.register(com.android.vts.entity.TestSuiteFileEntity.class); objectifyFactory.register(com.android.vts.entity.TestSuiteResultEntity.class); objectifyFactory.begin(); com.android.vts.config.ObjectifyListener.logger.log(java.util.logging.Level.INFO, "Value Initialized from context."); }


private void collect(com.android.tradefed.device.metric.DeviceMetricData runData) throws java.lang.InterruptedException { try { com.android.tradefed.log.LogUtil.CLog.e("Running benchmarking stats..."); java.lang.String cmd; java.lang.String[] layerList; if ((com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTestApk) == null) { com.android.tradefed.log.LogUtil.CLog.e("No test apk provided!"); return; } com.android.tradefed.log.LogUtil.CLog.e(("Target Layer: " + (com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTestApk.getLayerName()))); boolean firstLoop = true; cmd = ("dumpsys SurfaceFlinger --latency \"" + (com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTestApk.getLayerName())) + "\""; java.lang.String[] raw = mDevice.executeShellCommand(cmd).split("\n"); if (firstLoop) { mVSyncPeriod = java.lang.Long.parseLong(raw[0]); firstLoop = false; } boolean overlap = false; for (int i = 1; i < (raw.length); i++) { java.lang.String[] parts = raw[i].split("\t"); if ((parts.length) == 3) { if (sample(java.lang.Long.parseLong(parts[2]))) { overlap = true; } } } if (!overlap) com.android.tradefed.log.LogUtil.CLog.e("No overlap with previous poll, we missed some frames!"); } catch (com.android.tradefed.device.DeviceNotAvailableException | java.lang.NullPointerException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo public void testCrashWatcher() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "DisplayingBitmaps"); device.findObject(new android.support.test.uiautomator.UiSelector().className("android.widget.ImageView")).click(); }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578823") public void installAppAndLaunch() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); if ((api) == 18) { return; } com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "RsHelloCompute"); assertTrue(testFramework.getDevice().findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.APP_IMAGE_VIEW_ID)).exists()); }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "14578822") public void testVpn() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); if ((testFramework.getApi()) == 19) { return; } if (!(verifyVpnStatus(device))) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "TestVPN"); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.START_VPN_BUTTON_RES)).clickAndWaitForNewWindow(); new com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher(device).checkForCondition(); org.junit.Assert.assertTrue("Failed to find the VPN lock icon after starting VPN!", verifyVpnStatus(device)); } }


private void applyUpdate(final com.example.android.systemupdatersample.UpdateConfig config) { if ((config.getInstallType()) == (com.example.android.systemupdatersample.UpdateConfig.AB_INSTALL_TYPE_NON_STREAMING)) { com.example.android.systemupdatersample.PayloadSpec payload; try { payload = com.example.android.systemupdatersample.util.PayloadSpecs.forNonStreaming(config.getUpdatePackageFile()); } catch (java.io.IOException e) { android.util.Log.e(com.example.android.systemupdatersample.ui.MainActivity.TAG, "Error creating payload spec", e); android.widget.Toast.makeText(this, "Error creating payload spec", Toast.LENGTH_LONG).show(); return; } updateEngineApplyPayload(payload); } else { android.util.Log.d(com.example.android.systemupdatersample.ui.MainActivity.TAG, "Starting PrepareStreamingService"); com.example.android.systemupdatersample.services.PrepareStreamingService.startService(this, config, ( code, payloadSpec) -> { if (code == PrepareStreamingService.RESULT_CODE_SUCCESS) { updateEngineApplyPayload(payloadSpec); } else { android.util.Log.e(com.example.android.systemupdatersample.ui.MainActivity.TAG, ("PrepareStreamingService failed, result code is " + code)); android.widget.Toast.makeText(this, ("PrepareStreamingService failed, result code is " + code), Toast.LENGTH_LONG).show(); } }); } }
@java.lang.Override public void run(com.android.tradefed.result.ITestInvocationListener listener) throws com.android.tradefed.device.DeviceNotAvailableException { for (com.android.graphics.benchmark.ApkInfo apk : mApks) { getDevice().installPackage(new java.io.File(mApkDir, apk.getFileName()), true); runDeviceTests(com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.PACKAGE, com.android.graphics.benchmark.testtype.GraphicsBenchmarkHostsideController.CLASS, (("run[" + (apk.name())) + "]")); } }
private void onEnd(com.android.tradefed.device.metric.DeviceMetricData runData) { if ((com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mDeviceResultData) != null) { com.android.tradefed.log.LogUtil.CLog.e(("Intent timestamp: " + (com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mDeviceResultData.getEvents(0).getTimestamp()))); } try (java.io.BufferedWriter outputFile = new java.io.BufferedWriter(new java.io.FileWriter("/tmp/0/graphics-benchmark/out.txt", (!(mFirstRun))))) { outputFile.write((("VSync Period: " + (mVSyncPeriod)) + "\n\n")); long loadTime = 0L; if ((com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mDeviceResultData.getEventsCount()) > 0) { loadTime = (com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mDeviceResultData.getEvents(0).getTimestamp()) * 1000000; } else { com.android.tradefed.log.LogUtil.CLog.e("No start benchmark intent given"); } processTimestampsSlice(loadTime, mElapsedTimes.get(((mElapsedTimes.size()) - 1)), outputFile, runData); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } mFirstRun = false; }
private void processTimestampsSlice(long startTimestamp, long endTimestamp, java.io.BufferedWriter outputFile, com.android.tradefed.device.metric.DeviceMetricData runData) throws java.io.IOException { double minFPS = java.lang.Double.MAX_VALUE; double maxFPS = 0.0; long totalTimeNs = 0; outputFile.write((("Started at: " + startTimestamp) + " ms \n")); outputFile.write("Frame Time\t\tFrames Per Second\n"); long prevTime = 0L; int numOfTimestamps = 0; for (long time : mElapsedTimes) { if (time < startTimestamp) { continue; } if (time > endTimestamp) { break; } if (prevTime == 0) { prevTime = time; continue; } long timeDiff = time - prevTime; prevTime = time; double currentFPS = 1.0E9 / timeDiff; minFPS = (currentFPS < minFPS) ? currentFPS : minFPS; maxFPS = (currentFPS > maxFPS) ? currentFPS : maxFPS; totalTimeNs += timeDiff; numOfTimestamps++; outputFile.write((((timeDiff + " ms\t\t") + currentFPS) + " fps\n")); } outputFile.write("\nSTATS\n"); double avgFPS = (numOfTimestamps * 1.0E9) / totalTimeNs; outputFile.write((("min FPS = " + minFPS) + "\n")); outputFile.write((("max FPS = " + maxFPS) + "\n")); outputFile.write((("avg FPS = " + avgFPS) + "\n")); runData.addStringMetric("min_fps", java.lang.Double.toString(minFPS)); runData.addStringMetric("max_fps", java.lang.Double.toString(maxFPS)); runData.addStringMetric("fps", java.lang.Double.toString(avgFPS)); outputFile.write("\n"); }
private com.android.graphics.benchmark.ApkInfo createApkInfo(org.w3c.dom.Element element) { java.util.List<com.android.graphics.benchmark.ApkInfo.Argument> args = new java.util.ArrayList<>(); org.w3c.dom.NodeList argsNodeList = element.getElementsByTagName("args"); if ((argsNodeList.getLength()) > 0) { org.w3c.dom.NodeList children = argsNodeList.item(0).getChildNodes(); for (int j = 0; j < (children.getLength()); j++) { org.w3c.dom.Node argNode = children.item(j); if ((argNode.getNodeType()) != (org.w3c.dom.Node.ELEMENT_NODE)) { continue; } org.w3c.dom.Element argElement = ((org.w3c.dom.Element) (argNode)); args.add(new com.android.graphics.benchmark.ApkInfo.Argument(argElement.getTagName(), argElement.getTextContent())); } } return new com.android.graphics.benchmark.ApkInfo(getElement(element, "name", null), getElement(element, "fileName", null), getElement(element, "packageName", null), getElement(element, "layerName", null), args, java.lang.Integer.parseInt(getElement(element, "runTime", "10000"))); }


private static void repeatConstMethodType0(java.lang.invoke.MethodType expected) { java.lang.System.out.print("repeatConstMethodType0("); java.lang.System.out.print(expected); java.lang.System.out.println(")"); for (int i = 0; i < 12000; ++i) { java.lang.invoke.MethodType actual = Main.methodType0(); if (!(actual.equals(expected))) { java.lang.System.out.print("Expected: "); java.lang.System.out.println(expected); java.lang.System.out.print("Actual: "); java.lang.System.out.println(actual); Main.unreachable(); } } }
private static void repeatConstMethodType1(java.lang.invoke.MethodType expected) { java.lang.System.out.print("repeatConstMethodType1("); java.lang.System.out.print(expected); java.lang.System.out.println(")"); for (int i = 0; i < 12000; ++i) { java.lang.invoke.MethodType actual = Main.methodType1(); if (!(actual.equals(expected))) { java.lang.System.out.print("Expected: "); java.lang.System.out.println(expected); java.lang.System.out.print("Actual: "); java.lang.System.out.println(actual); Main.unreachable(); } } }

@android.annotation.NonNull com.android.bluetooth.avrcp.Metadata getCurrentSongInfo() { final com.android.bluetooth.avrcp.MediaPlayerWrapper player = getActivePlayer(); if (player == null) return com.android.bluetooth.avrcp.Util.empty_data(); return player.getCurrentMetadata(); }
public static void main(java.lang.String[] params) throws java.lang.Exception { if ((((params.length) == 0) || ("--help".equals(params[0]))) || ("-h".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if ("--version".equals(params[0])) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } java.lang.String cmd = params[0]; try { if ("sign".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("verify".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("rotate".equals(cmd)) { com.android.apksigner.ApkSignerTool.rotate(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if ("help".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if ("version".equals(cmd)) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } else { throw new com.android.apksigner.ApkSignerTool.ParameterException((("Unsupported command: " + cmd) + ". See --help for supported commands")); } } catch (com.android.apksigner.ApkSignerTool.ParameterException | com.android.apksigner.OptionsParser e) { java.lang.System.err.println(e.getMessage()); java.lang.System.exit(1); return; } }
@java.lang.Override public void run() { synchronized(mStateMachines) { mDialingOutTimeoutEvent = null; doForStateMachine(mDialingOutDevice, ( stateMachine) -> stateMachine.sendMessage(HeadsetStateMachine.DIALING_OUT_RESULT, 0, 0, mDialingOutDevice)); } }
boolean dialOutgoingCall(android.bluetooth.BluetoothDevice fromDevice, java.lang.String dialNumber) { synchronized(mStateMachines) { if ((mDialingOutTimeoutEvent) != null) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, ("dialOutgoingCall, already dialing by " + (mDialingOutTimeoutEvent))); return false; } if (isVirtualCallStarted()) { if (!(stopScoUsingVirtualVoiceCall())) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, "dialOutgoingCall failed to stop current virtual call"); return false; } } if (!(setActiveDevice(fromDevice))) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetService.TAG, ("dialOutgoingCall failed to set active device to " + fromDevice)); return false; } android.content.Intent intent = new android.content.Intent(android.content.Intent.ACTION_CALL_PRIVILEGED, android.net.Uri.fromParts(PhoneAccount.SCHEME_TEL, dialNumber, null)); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); startActivity(intent); mDialingOutTimeoutEvent = new com.android.bluetooth.hfp.HeadsetService.DialingOutTimeoutEvent(fromDevice); mStateMachinesThread.getThreadHandler().postDelayed(mDialingOutTimeoutEvent, com.android.bluetooth.hfp.HeadsetService.DIALING_OUT_TIMEOUT_MS); return true; } }
@com.android.internal.annotations.VisibleForTesting public void onAudioStateChangedFromStateMachine(android.bluetooth.BluetoothDevice device, int fromState, int toState) { synchronized(mStateMachines) { if ((fromState != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) && (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED))) { } if ((fromState != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) && (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED))) { if ((((mActiveDevice) != null) && (!(mActiveDevice.equals(device)))) && (shouldPersistAudio())) { if (!(connectAudio(mActiveDevice))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((((("onAudioStateChangedFromStateMachine, failed to connect to new " + "active device ") + (mActiveDevice)) + ", after ") + device) + " is disconnected from SCO")); } } } } }
private boolean startScoUsingVirtualVoiceCall() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH_ADMIN permission"); android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ("startScoUsingVirtualVoiceCall: " + (com.android.bluetooth.Utils.getUidPidString()))); synchronized(mStateMachines) { if (isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "startScoUsingVirtualVoiceCall: audio is not idle"); return false; } if ((mActiveDevice) == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "startScoUsingVirtualVoiceCall: no active device"); return false; } boolean inTelecomCall = (!(mVirtualCallStarted)) && ((mSystemInterface.isInCall()) || (mSystemInterface.isRinging())); if (inTelecomCall) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "startScoUsingVirtualVoiceCall: Telecom call in progress"); return false; } if (mVirtualCallStarted) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "startScoUsingVirtualVoiceCall: has already started"); return false; } mVirtualCallStarted = true; phoneStateChanged(0, 0, HeadsetHalConstants.CALL_STATE_DIALING, "", 0, true); phoneStateChanged(0, 0, HeadsetHalConstants.CALL_STATE_ALERTING, "", 0, true); phoneStateChanged(1, 0, HeadsetHalConstants.CALL_STATE_IDLE, "", 0, true); return true; } }
@java.lang.Override public void handleMessage(android.os.Message msg) { if ((msg.what) != (com.android.bluetooth.avrcp.MediaPlayerWrapper.TimeoutHandler.MSG_TIMEOUT)) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("Unknown message on timeout handler: " + (msg.what))); return; } android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("Timeout while waiting for metadata to sync for " + (mPackageName))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (" └ Current Metadata: " + (getMetadata().getDescription()))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (" └ Current Playstate: " + (getPlaybackState()))); for (int i = 0; ((getQueue()) != null) && (i < (getQueue().size())); i++) { android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (((" └ QueueItem(" + i) + "): ") + (getQueue().get(i)))); } if (com.android.bluetooth.avrcp.MediaPlayerWrapper.sTesting) android.util.Log.wtfStack(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, "Crashing the stack"); }
private int build() { mSphereVertices = java.nio.ByteBuffer.allocateDirect((((((mNumSegments) * ((mNumSegments) + 1)) * (com.android.graphics.benchmark.example.Sphere.COORDS_PER_VERTEX)) * (com.android.graphics.benchmark.example.Sphere.VERTEX_STRIDE)) * 2)).order(java.nio.ByteOrder.nativeOrder()).asFloatBuffer(); mIndices = java.nio.ByteBuffer.allocateDirect(((((mNumSegments) * ((mNumSegments) + 2)) * 2) * 4)).order(java.nio.ByteOrder.nativeOrder()).asIntBuffer(); double dTheta = (2 * (java.lang.Math.PI)) / (mNumSegments); double dPhi = (java.lang.Math.PI) / (mNumSegments); int points = 0; boolean firstLoop = true; double epsilon = 1.0E-10; for (double phi = -(java.lang.Math.PI); phi <= (0 + epsilon); phi += dPhi) { if (!firstLoop) { mIndices.put(((points - (2 * (mNumSegments))) + 1)); mIndices.put((points - (mNumSegments))); mNumIndices += 2; } for (double theta = 0.0; theta < (((java.lang.Math.PI) * 2) - epsilon); theta += dTheta) { mSphereVertices.put(((float) (((mRadius) * (java.lang.Math.sin(phi))) * (java.lang.Math.cos(theta))))); mSphereVertices.put(((float) (((mRadius) * (java.lang.Math.sin(phi))) * (java.lang.Math.sin(theta))))); mSphereVertices.put(((float) ((mRadius) * (java.lang.Math.cos(phi))))); if (!firstLoop) { mIndices.put((points - (mNumSegments))); mIndices.put(points); mNumIndices += 2; } points++; } if (!firstLoop) { mIndices.put(((points - (mNumSegments)) - 1)); mIndices.put(((points - (2 * (mNumSegments))) + 1)); mNumIndices += 2; } firstLoop = false; } mIndices.position(0); mSphereVertices.position(0); return points; }





public void testPlaySmallBuffer() throws java.lang.Exception { final java.lang.String TEST_NAME = "testPlaySmallBuffer"; android.media.cts.AudioTrackLatencyTest.TestSetup setup = new android.media.cts.AudioTrackLatencyTest.TestSetup(); android.media.AudioTrack track = setup.createTrack(); int framesWrittenTotal = setup.primeAudioTrack(TEST_NAME); int position1 = track.getPlaybackHeadPosition(); assertEquals((TEST_NAME + ": initial position"), 0, position1); track.play(); final long MAX_TIME_TO_START_MSEC = 500; long giveUpAt = (java.lang.System.currentTimeMillis()) + MAX_TIME_TO_START_MSEC; int position2 = track.getPlaybackHeadPosition(); while ((position1 == position2) && ((java.lang.System.currentTimeMillis()) < giveUpAt)) { java.lang.Thread.sleep(20); position2 = track.getPlaybackHeadPosition(); } assertTrue(((TEST_NAME + ": did it start?, position after start = ") + position2), (position2 > position1)); final int several = 3; java.lang.Thread.sleep((((several * framesWrittenTotal) * (android.media.cts.AudioTrackLatencyTest.MILLIS_PER_SECOND)) / (setup.sampleRate))); position2 = track.getPlaybackHeadPosition(); assertEquals((TEST_NAME + ": did it play all the data?"), framesWrittenTotal, position2); track.release(); }
@android.test.suitebuilder.annotation.MediumTest public void testOpportunisticScan() { if (!(isBleSupported())) { return; } android.bluetooth.le.ScanSettings opportunisticScanSettings = new android.bluetooth.le.ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_OPPORTUNISTIC).build(); android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback emptyScanCallback = new android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback(); mScanner.startScan(java.util.Collections.<android.bluetooth.le.ScanFilter>emptyList(), opportunisticScanSettings, emptyScanCallback); sleep(android.bluetooth.cts.BluetoothLeScanTest.SCAN_DURATION_MILLIS); assertTrue(emptyScanCallback.getScanResults().isEmpty()); android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback regularScanCallback = new android.bluetooth.cts.BluetoothLeScanTest.BleScanCallback(); android.bluetooth.le.ScanSettings regularScanSettings = new android.bluetooth.le.ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY).build(); java.util.List<android.bluetooth.le.ScanFilter> filters = new java.util.ArrayList<>(); android.bluetooth.le.ScanFilter filter = createScanFilter(); if (filter != null) { filters.add(filter); } else { android.util.Log.d(android.bluetooth.cts.BluetoothLeScanTest.TAG, "no appropriate filter can be set"); } mScanner.startScan(filters, regularScanSettings, regularScanCallback); sleep(android.bluetooth.cts.BluetoothLeScanTest.SCAN_DURATION_MILLIS); assertTrue("opportunistic scan results shouldn't be empty", (!(emptyScanCallback.getScanResults().isEmpty()))); mScanner.stopScan(regularScanCallback); sleep(1000); emptyScanCallback.clear(); sleep(android.bluetooth.cts.BluetoothLeScanTest.SCAN_DURATION_MILLIS); assertTrue("opportunistic scan shouldn't have scan results", emptyScanCallback.getScanResults().isEmpty()); }
private java.util.List<android.content.pm.PermissionInfo> loadExpectedPermissions() throws java.lang.Exception { java.util.List<android.content.pm.PermissionInfo> permissions = new java.util.ArrayList<>(); try (java.io.InputStream in = getContext().getResources().openRawResource(android.permission2.cts.R.raw.android_manifest)) { org.xmlpull.v1.XmlPullParser parser = android.util.Xml.newPullParser(); parser.setInput(in, null); final int outerDepth = parser.getDepth(); int type; while (((type = parser.next()) != (org.xmlpull.v1.XmlPullParser.END_DOCUMENT)) && ((type != (org.xmlpull.v1.XmlPullParser.END_TAG)) || ((parser.getDepth()) > outerDepth))) { if ((type == (org.xmlpull.v1.XmlPullParser.END_TAG)) || (type == (org.xmlpull.v1.XmlPullParser.TEXT))) { continue; } if (android.permission2.cts.PermissionPolicyTest.TAG_PERMISSION.equals(parser.getName())) { android.content.pm.PermissionInfo permissionInfo = new android.content.pm.PermissionInfo(); permissionInfo.name = parser.getAttributeValue(null, android.permission2.cts.PermissionPolicyTest.ATTR_NAME); permissionInfo.group = parser.getAttributeValue(null, android.permission2.cts.PermissionPolicyTest.ATTR_PERMISSION_GROUP); permissionInfo.protectionLevel = android.permission2.cts.PermissionPolicyTest.parseProtectionLevel(parser.getAttributeValue(null, android.permission2.cts.PermissionPolicyTest.ATTR_PROTECTION_LEVEL)); permissions.add(permissionInfo); } else { android.util.Log.e(android.permission2.cts.PermissionPolicyTest.LOG_TAG, ("Unknown tag " + (parser.getName()))); } } } return permissions; }
@org.junit.Test public void testUnbondDevice_disconnectBeforeUnbond() { mCurrentDevice = getTestDevice(0); org.junit.Assert.assertTrue(mHeadsetService.connect(mCurrentDevice)); verify(mObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectHfp(mCurrentDevice); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectedEvent); try { java.lang.Thread.sleep(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException exception) { org.junit.Assert.fail("Interrupted while waiting for callback to disconnected state"); } doReturn(BluetoothDevice.BOND_NONE).when(mAdapterService).getBondState(eq(mCurrentDevice)); android.content.Intent unbondIntent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_BOND_STATE_CHANGED); unbondIntent.putExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.BOND_NONE); unbondIntent.putExtra(BluetoothDevice.EXTRA_DEVICE, mCurrentDevice); android.support.test.InstrumentationRegistry.getTargetContext().sendBroadcast(unbondIntent); verify(mObjectsFactory, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).destroyStateMachine(mStateMachineArgument.capture()); org.junit.Assert.assertEquals(mCurrentDevice, mStateMachineArgument.getValue().getDevice()); }








@org.junit.Test public void testConnectFromApi() { mCurrentDevice = getTestDevice(0); org.junit.Assert.assertTrue(mHeadsetService.connect(mCurrentDevice)); verify(mObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectHfp(mCurrentDevice); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(mCurrentDevice), mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTING })); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_SLC_CONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectedEvent); try { java.lang.Thread.sleep(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException exception) { org.junit.Assert.fail("Interrupted while waiting for callback"); } org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(mCurrentDevice), mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTED })); org.junit.Assert.assertEquals(mCurrentDevice, mHeadsetService.getActiveDevice()); }

@org.junit.Test public void testGetHeadsetService() { org.junit.Assert.assertEquals(mHeadsetService, com.android.bluetooth.hfp.HeadsetService.getHeadsetService()); mCurrentDevice = getTestDevice(0); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(BluetoothHeadset.STATE_AUDIO_DISCONNECTED, mHeadsetService.getAudioState(mCurrentDevice)); }


private java.lang.String buildIntegerPatternString() { java.lang.String radixDigits = digits.substring(0, radix); java.lang.String nonZeroRadixDigits = ((("((?i)[" + (digits.substring(1, radix))) + "]|(") + (non0Digit)) + "))"; java.lang.String digit = ("((?i)[" + radixDigits) + "]|\\p{javaDigit})"; java.lang.String groupedNumeral = ((((((((("(" + nonZeroRadixDigits) + digit) + "?") + digit) + "?(") + (groupSeparator)) + digit) + digit) + digit) + ")+)"; java.lang.String numeral = ((("((" + digit) + "++)|") + groupedNumeral) + ")"; java.lang.String javaStyleInteger = ("([-+]?(" + numeral) + "))"; java.lang.String negativeInteger = ((negativePrefix) + numeral) + (negativeSuffix); java.lang.String positiveInteger = ((positivePrefix) + numeral) + (positiveSuffix); return ((((("(" + javaStyleInteger) + ")|(") + positiveInteger) + ")|(") + negativeInteger) + ")"; }

@java.lang.Override public void onResume() { if ((mAirplaneModeObserver) == null) { mAirplaneModeObserver = new com.android.settings.network.TetherPreferenceController.SettingObserver(); } if ((mTetherReceiver) == null) { mTetherReceiver = new com.android.settings.network.TetherPreferenceController.TetherBroadcastReceiver(); } mContext.registerReceiver(mTetherReceiver, new android.content.IntentFilter(android.net.ConnectivityManager.ACTION_TETHER_STATE_CHANGED)); mContext.getContentResolver().registerContentObserver(mAirplaneModeObserver.uri, false, mAirplaneModeObserver); }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); android.net.ConnectivityManager mCM = getContext().getSystemService(android.net.ConnectivityManager.class); mNetwork = mCM.getActiveNetwork(); }


