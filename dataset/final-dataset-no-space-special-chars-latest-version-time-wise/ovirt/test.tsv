@java.lang.Override public org.ovirt.engine.api.model.GraphicsConsoles list() { org.ovirt.engine.api.model.GraphicsConsoles consoles = new org.ovirt.engine.api.model.GraphicsConsoles(); org.ovirt.engine.core.common.businessentities.VmTemplate entity = loadEntity(); org.ovirt.engine.api.restapi.resource.utils.GraphicsConsoleResourceHelper.list(this, guid).entrySet().forEach(( graphicsInfo) -> consoles.getGraphicsConsoles().add(addLinks(populate(org.ovirt.engine.api.restapi.types.VmMapper.map(graphicsInfo, null), entity)))); return consoles; }	@java.lang.Override public org.ovirt.engine.api.model.GraphicsConsoles list() { org.ovirt.engine.api.model.GraphicsConsoles consoles = new org.ovirt.engine.api.model.GraphicsConsoles(); org.ovirt.engine.core.common.businessentities.VmTemplate entity = loadEntity(); org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.list(this, guid).entrySet().forEach(( graphicsInfo) -> consoles.getGraphicsConsoles().add(addLinks(populate(org.ovirt.engine.api.restapi.types.VmMapper.map(graphicsInfo, null), entity)))); return consoles; }
@java.lang.Override protected void reassignBadMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics) { final java.util.function.Predicate<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnicWithBadMacPredicate = new org.ovirt.engine.core.bll.network.predicate.VnicWithBadMacPredicate(macPool); vnics.stream().filter(vnicWithBadMacPredicate).forEach(( vnic) -> vnic.setMacAddress(macPool.allocateNewMac())); }	@java.lang.Override protected void reassignBadMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics) { final org.ovirt.engine.core.bll.network.macpool.MacPool macPool = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getMacPool(); final java.util.function.Predicate<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnicWithBadMacPredicate = new org.ovirt.engine.core.bll.network.predicate.VnicWithBadMacPredicate(macPool); vnics.stream().filter(vnicWithBadMacPredicate).forEach(( vnic) -> vnic.setMacAddress(macPool.allocateNewMac())); }
@java.lang.Override protected void init() { macPool = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getMacPool(); org.ovirt.engine.core.common.businessentities.VM vmFromConfiguration = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm(); if (vmFromConfiguration != null) { vmFromConfiguration.getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterId()); if (!(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget())) { setDisksToBeAttached(vmFromConfiguration); } org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setContainerId(vmFromConfiguration.getId()); } else { initUnregisteredVM(); } if ((Guid.Empty.equals(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVmId())) && ((org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm()) != null)) { org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm().getId()); } setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterId()); org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getCluster().getStoragePoolId()); super.init(); }	@java.lang.Override protected void init() { org.ovirt.engine.core.common.businessentities.VM vmFromConfiguration = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm(); if (vmFromConfiguration != null) { vmFromConfiguration.getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterId()); if (!(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget())) { setDisksToBeAttached(vmFromConfiguration); } org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setContainerId(vmFromConfiguration.getId()); } else { initUnregisteredVM(); } if ((Guid.Empty.equals(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVmId())) && ((org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm()) != null)) { org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm().getId()); } setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterId()); org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getCluster().getStoragePoolId()); super.init(); }
private boolean foundBadMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics, java.util.function.Predicate<java.lang.String> badMacPredicate) { return vnics.stream().map(VmNetworkInterface::getMacAddress).filter(java.util.Objects::nonNull).anyMatch(badMacPredicate); }	private org.ovirt.engine.core.bll.ValidationResult validateForMacsInUse(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics, org.ovirt.engine.core.bll.network.macpool.MacPool macPool) { if (macPool.isDuplicateMacAddressesAllowed()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } final java.util.List<java.lang.String> macsInUse = vnics.stream().map(VmNetworkInterface::getMacAddress).filter(java.util.Objects::nonNull).filter(macPool::isMacInUse).collect(java.util.stream.Collectors.toList()); final org.ovirt.engine.core.common.errors.EngineMessage msg = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE_DETAILED; return org.ovirt.engine.core.bll.ValidationResult.failWith(msg, org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(msg, macsInUse)).unless(macsInUse.isEmpty()); }
private boolean validateMacs(org.ovirt.engine.core.common.businessentities.VM vm) { if (!(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().isReassignBadMacs())) { return true; } final java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = vm.getInterfaces(); return reportDuplicateMacs(vnics); }	private boolean validateMacs(org.ovirt.engine.core.common.businessentities.VM vm) { if (org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().isReassignBadMacs()) { return true; } final java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = vm.getInterfaces(); return reportDuplicateMacs(vnics); }
private boolean reportDuplicateMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics) { if ((!(macPool.isDuplicateMacAddressesAllowed())) && (foundBadMacs(vnics, macPool::isMacInUse))) { return failValidation(EngineMessage.NETWORK_MAC_ADDRESS_IN_USE); } return true; }	private boolean reportDuplicateMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics) { final org.ovirt.engine.core.bll.network.macpool.MacPool macPool = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getMacPool(); return (macPool.isDuplicateMacAddressesAllowed()) || (validate(validateForMacsInUse(vnics, macPool))); }
@java.lang.Override public void removeAllForVms(java.util.Collection<org.ovirt.engine.core.compat.Guid> vmIds) { getCallsHandler().executeModification("DeleteVmGuestAgentInterfacesByVmIds", getCustomMapSqlParameterSource().addValue("vm_id", createArrayOfUUIDs(vmIds))); }	@java.lang.Override public void removeAllForVms(java.util.Collection<org.ovirt.engine.core.compat.Guid> vmIds) { getCallsHandler().executeModification("DeleteVmGuestAgentInterfacesByVmIds", getCustomMapSqlParameterSource().addValue("vm_ids", createArrayOfUUIDs(vmIds))); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsList = org.ovirt.engine.core.bll.GetAllVmsQuery.getDbFacade().getVmDao().getAll(org.ovirt.engine.core.bll.GetAllVmsQuery.getUserID(), org.ovirt.engine.core.bll.GetAllVmsQuery.getParameters().isFiltered()); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsList) { org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(vm); org.ovirt.engine.core.bll.VmHandler.updateVmStatistics(vm); } org.ovirt.engine.core.bll.GetAllVmsQuery.getQueryReturnValue().setReturnValue(vmsList); }	@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVMs() { return vmDao.getAll(org.ovirt.engine.core.bll.GetAllVmsQuery.getUserID(), org.ovirt.engine.core.bll.GetAllVmsQuery.getParameters().isFiltered()); }
boolean isCpuHotplugSupported(int os_id);	boolean isCpuHotplugSupported(int osId);
boolean isCpuHotunplugSupported(int os_id);	boolean isCpuHotunplugSupported(int osId);
public org.ovirt.engine.core.common.action.VdcReturnValueBase endAction(org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task) { org.ovirt.engine.core.common.businessentities.AsyncTask dbAsyncTask = task.getParameters().getDbAsyncTask(); org.ovirt.engine.core.common.action.VdcActionType actionType = getEndActionType(dbAsyncTask); org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = dbAsyncTask.getActionParameters(); org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.tasks.CommandHelper.buildCommand(actionType, parameters, coco.retrieveCommandContext(dbAsyncTask.getCommandId()).getExecutionContext(), coco.getCommandStatus(dbAsyncTask.getCommandId())); return new org.ovirt.engine.core.bll.tasks.DecoratedCommand(command).endAction(); }	public org.ovirt.engine.core.common.action.VdcReturnValueBase endAction(org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task) { org.ovirt.engine.core.common.businessentities.AsyncTask dbAsyncTask = task.getParameters().getDbAsyncTask(); org.ovirt.engine.core.common.action.VdcActionType actionType = getEndActionType(dbAsyncTask); org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = dbAsyncTask.getActionParameters(); org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.tasks.CommandHelper.buildCommand(actionType, parameters, coco.retrieveCommandContext(dbAsyncTask.getRootCommandId()).getExecutionContext(), coco.getCommandStatus(dbAsyncTask.getCommandId())); return new org.ovirt.engine.core.bll.tasks.DecoratedCommand(command).endAction(); }
private static org.ovirt.engine.core.common.businessentities.UsbPolicy getUsbPolicyAccordingToUsbType(org.ovirt.engine.api.model.UsbType usbType) { switch (usbType) { case NATIVE : return org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE; default : return null; } }	private static org.ovirt.engine.core.common.businessentities.UsbPolicy getUsbPolicyAccordingToUsbType(org.ovirt.engine.api.model.UsbType usbType) { switch (usbType) { case LEGACY : case NATIVE : return org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE; default : return null; } }
private void initUsbPolicy() { java.lang.Integer osType = getOSType().getSelectedItem(); org.ovirt.engine.core.common.businessentities.DisplayType displayType = getDisplayType().getSelectedItem(); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.GraphicsTypes graphicsTypes = getGraphicsType().getSelectedItem(); if (((osType == null) || (displayType == null)) || (graphicsTypes == null)) { return; } getUsbPolicy().setIsChangeable(true); org.ovirt.engine.core.common.businessentities.UsbPolicy prevSelectedUsbPolicy = getUsbPolicy().getSelectedItem(); if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isLinuxOsType(osType)) { getUsbPolicy().setItems(java.util.Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE)); } else { getUsbPolicy().setItems(java.util.Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE)); } if (!(graphicsTypes.getBackingGraphicsTypes().contains(GraphicsType.SPICE))) { getUsbPolicy().setIsChangeable(false); } if (getBehavior().basedOnCustomInstanceType()) { java.util.Collection<org.ovirt.engine.core.common.businessentities.UsbPolicy> policies = getUsbPolicy().getItems(); if (policies.contains(prevSelectedUsbPolicy)) { getUsbPolicy().setSelectedItem(prevSelectedUsbPolicy); } else if ((policies.size()) > 0) { getUsbPolicy().setSelectedItem(policies.iterator().next()); } } }	private void initUsbPolicy() { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.GraphicsTypes graphicsTypes = getGraphicsType().getSelectedItem(); if (graphicsTypes == null) { return; } getUsbPolicy().setIsChangeable(true); org.ovirt.engine.core.common.businessentities.UsbPolicy prevSelectedUsbPolicy = getUsbPolicy().getSelectedItem(); getUsbPolicy().setItems(java.util.Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE)); if (!(graphicsTypes.getBackingGraphicsTypes().contains(GraphicsType.SPICE))) { getUsbPolicy().setIsChangeable(false); } if (getBehavior().basedOnCustomInstanceType()) { java.util.Collection<org.ovirt.engine.core.common.businessentities.UsbPolicy> policies = getUsbPolicy().getItems(); if (policies.contains(prevSelectedUsbPolicy)) { getUsbPolicy().setSelectedItem(prevSelectedUsbPolicy); } else if ((policies.size()) > 0) { getUsbPolicy().setSelectedItem(policies.iterator().next()); } } }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel fenceAgentModel) { if ((((this.model) != null) && (fenceAgentModel != null)) && (!(fenceAgentModel.equals(this.model)))) { driver.cleanup(); } driver.edit(fenceAgentModel); this.model = fenceAgentModel; determineLabelValue(fenceAgentModel); fenceAgentModel.getManagementIp().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { determineLabelValue(model); } }); fenceAgentModel.getConcurrentSelectList().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsAvailable".equals(args.propertyName)) { determineLabelValue(model); } } }); }	@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel fenceAgentModel) { if ((((this.model) != null) && (fenceAgentModel != null)) && (!(fenceAgentModel.equals(this.model)))) { driver.cleanup(); } if (fenceAgentModel != null) { driver.edit(fenceAgentModel); this.model = fenceAgentModel; determineLabelValue(fenceAgentModel); fenceAgentModel.getManagementIp().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { determineLabelValue(model); } }); fenceAgentModel.getConcurrentSelectList().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsAvailable".equals(args.propertyName)) { determineLabelValue(model); } } }); } }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel fenceAgentModel) { if ((((this.model) != null) && (fenceAgentModel != null)) && (!(fenceAgentModel.equals(this.model)))) { driver.cleanup(); } driver.edit(fenceAgentModel); this.model = fenceAgentModel; determineLabelValue(fenceAgentModel); fenceAgentModel.getManagementIp().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { determineLabelValue(model); } }); }	@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel fenceAgentModel) { if ((((this.model) != null) && (fenceAgentModel != null)) && (!(fenceAgentModel.equals(this.model)))) { driver.cleanup(); } if (fenceAgentModel != null) { driver.edit(fenceAgentModel); this.model = fenceAgentModel; determineLabelValue(fenceAgentModel); fenceAgentModel.getManagementIp().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { determineLabelValue(model); } }); } }
public void validate(java.util.List<java.lang.String> errors) { int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); assert (errors != null) && ((errors.size()) == rowCount) : "errors must be the same size as the contents of the table!"; for (int i = 0; i < rowCount; ++i) { com.google.gwt.dom.client.Element element = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowElement(i); assert element != null : "element shouldn't be null if errors is the same size as the contents of the table!"; java.lang.String error = errors.get(i); boolean valid = org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(error); if (!valid) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(element, com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(error)); element.addClassName(style.invalidRow()); } else { element.removeClassName(style.invalidRow()); } } }	public void validate(java.util.List<java.lang.String> errors) { int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); assert (errors != null) && ((errors.size()) == rowCount) : "errors must be the same size as the contents of the table!"; for (int i = 0; i < rowCount; ++i) { com.google.gwt.dom.client.Element element = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowElement(i); assert element != null : "element shouldn't be null if errors is the same size as the contents of the table!"; java.lang.String error = errors.get(i); boolean valid = org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(error); if (!valid) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(element, com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(error)); element.addClassName(style.invalidRow()); } else { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.destroyTooltip(element); element.removeClassName(style.invalidRow()); } } }
@java.lang.Override public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.Boolean value, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.Boolean> valueUpdater) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(parent, getTooltip()); super.onBrowserEvent(context, parent, value, event, valueUpdater); }	@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.Boolean value, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.Boolean> valueUpdater) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.handleCellEvent(event, parent, getTooltip(value)); super.onBrowserEvent(context, parent, value, event, valueUpdater); }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip() { return tooltip; }	public com.google.gwt.safehtml.shared.SafeHtml getTooltip(java.lang.Boolean value) { return tooltipFallback; }
public static void setTooltipOnElement(com.google.gwt.dom.client.Element e, com.google.gwt.safehtml.shared.SafeHtml tooltip, org.gwtbootstrap3.client.ui.constants.Placement placement) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(e, tooltip, placement, org.ovirt.engine.ui.common.utils.ElementTooltipUtils.getTooltipTemplate(null)); }	public static void setTooltipOnElement(com.google.gwt.dom.client.Element e, com.google.gwt.safehtml.shared.SafeHtml tooltip, org.gwtbootstrap3.client.ui.constants.Placement placement) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(e, tooltip, new org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig().setPlacement(placement)); }
@java.lang.Override public java.util.Set<java.lang.String> getConsumedEvents() { java.util.Set<java.lang.String> set = new java.util.HashSet<>(); set.add(BrowserEvents.CHANGE); set.add(BrowserEvents.KEYDOWN); set.add(BrowserEvents.MOUSEMOVE); return set; }	@java.lang.Override public java.util.Set<java.lang.String> getConsumedEvents() { java.util.Set<java.lang.String> set = new java.util.HashSet(super.getConsumedEvents()); set.add(BrowserEvents.MOUSEMOVE); return set; }
private void updateKeyTitle(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) { java.lang.String selectedKey = object.getKeys().getSelectedItem(); if (selectedKey != null) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(keyField.getElement(), com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(selectedKey)); } }	private void updateKeyTitle(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) { java.lang.String selectedKey = object.getKeys().getSelectedItem(); if (selectedKey != null) { keyField.setWidgetTooltip(selectedKey); } }
@java.lang.Override public void setTooltip(com.google.gwt.safehtml.shared.SafeHtml tooltip, org.gwtbootstrap3.client.ui.constants.Placement placement) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(getElement(), tooltip, placement); }	@java.lang.Override public void setTooltip(com.google.gwt.safehtml.shared.SafeHtml tooltip, org.gwtbootstrap3.client.ui.constants.Placement placement) { buttonTooltip.setHtml(tooltip); buttonTooltip.setPlacement(placement); }
@java.lang.Override public void setTooltip(com.google.gwt.safehtml.shared.SafeHtml tooltip) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(getElement(), tooltip); }	@java.lang.Override public void setTooltip(com.google.gwt.safehtml.shared.SafeHtml tooltip) { buttonTooltip.setHtml(tooltip); }
public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element elem, final T object, com.google.gwt.dom.client.NativeEvent event) { final int index = context.getIndex(); com.google.gwt.cell.client.ValueUpdater<C> valueUpdater = ((org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getFieldUpdater()) == null) ? null : new com.google.gwt.cell.client.ValueUpdater<C>() { @java.lang.Override public void update(C value) { getFieldUpdater().update(index, object, value); } }; getCell().onBrowserEvent(context, elem, org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getValue(object), event, valueUpdater); }	@java.lang.Override public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element elem, T object, com.google.gwt.dom.client.NativeEvent event) { getCell().setTooltipFallback(getTooltip(object)); super.onBrowserEvent(context, elem, object, event); }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip(C value, com.google.gwt.dom.client.Element parent) { return null; }	public com.google.gwt.safehtml.shared.SafeHtml getTooltip(C value, com.google.gwt.dom.client.Element parent) { return getTooltip(value); }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { com.google.gwt.safehtml.shared.SafeHtml tooltip = getTooltip(value); if (tooltip == null) { tooltip = getTooltip(value, parent); } org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(parent, tooltip); super.onBrowserEvent(context, parent, value, event, valueUpdater); }	@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { com.google.gwt.safehtml.shared.SafeHtml tooltip = getTooltip(value); if (tooltip == null) { tooltip = getTooltip(value, parent); } org.ovirt.engine.ui.common.utils.ElementTooltipUtils.handleCellEvent(event, parent, tooltip); super.onBrowserEvent(context, parent, value, event, valueUpdater); }
public void setText(com.google.gwt.safehtml.shared.SafeHtml text) { setTooltipText(text.asString()); }	public void setText(com.google.gwt.safehtml.shared.SafeHtml text) { tooltip.setHtml((useItalic ? wrapItalic(text) : text)); }
@java.lang.Override public void execute() { applyTooltip(); }	@java.lang.Override public void onAttachOrDetach(com.google.gwt.event.logical.shared.AttachEvent event) { this.widgetAttached = event.isAttached(); scheduleTooltipUpdate(); }
private void applyTooltip() { if (((getWidget()) != null) && ((tooltip) != null)) { java.lang.String template = org.ovirt.engine.ui.common.utils.ElementTooltipUtils.getTooltipTemplate(extraTooltipClassNames.trim()); org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(getWidget().getElement(), tooltip, placement, template); } }	@java.lang.Override public void cleanup() { destroy(); }
private static native void destroyTooltip(com.google.gwt.dom.client.Element e);	public static void destroyTooltip(com.google.gwt.dom.client.Element e) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.destroyTooltipImpl(e, true); org.ovirt.engine.ui.common.utils.ElementTooltipUtils.removeElementFromReaperLists(e); }
@java.lang.Override public java.util.Set<java.lang.String> getConsumedEvents() { return new java.util.HashSet(super.getConsumedEvents()); }	@java.lang.Override public java.util.Set<java.lang.String> getConsumedEvents() { java.util.HashSet<java.lang.String> set = new java.util.HashSet(super.getConsumedEvents()); set.addAll(ElementTooltipUtils.HANDLED_CELL_EVENTS); return set; }
public void setPlacement(org.gwtbootstrap3.client.ui.constants.Placement placement) { this.placement = placement; }	public void setPlacement(org.gwtbootstrap3.client.ui.constants.Placement placement) { tooltipConfig.setPlacement(placement); }
void attachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().add(alertPanel); com.google.gwt.dom.client.Element messageDivElement = alertPanel.getMessageAt(0).getElement(); if (org.ovirt.engine.ui.common.utils.ElementUtils.detectHorizontalOverflow(messageDivElement)) { com.google.gwt.safehtml.shared.SafeHtml tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(messageDivElement.getInnerText()); org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(alertPanel.getElement(), tooltipContent, Placement.BOTTOM); } }	void attachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().add(alertPanel); com.google.gwt.dom.client.Element messageDivElement = alertPanel.getMessageAt(0).getElement(); if (org.ovirt.engine.ui.common.utils.ElementUtils.detectHorizontalOverflow(messageDivElement)) { alertPanel.getAlertTooltip().setText(messageDivElement.getInnerText()); alertPanel.getAlertTooltip().setPlacement(Placement.BOTTOM); } }
private void updateBadge() { badge.setVisible(((count) != 1)); badgeText.setText(java.lang.String.valueOf(count)); if (badge.isVisible()) { com.google.gwt.safehtml.shared.SafeHtmlBuilder builder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); for (com.google.gwt.safehtml.shared.SafeHtml message : messagesList) { builder.append(message); } org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(getElement(), builder.toSafeHtml()); } }	private void updateBadge() { badge.setVisible(((count) != 1)); badgeText.setText(java.lang.String.valueOf(count)); if (badge.isVisible()) { com.google.gwt.safehtml.shared.SafeHtmlBuilder builder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); for (com.google.gwt.safehtml.shared.SafeHtml message : messagesList) { builder.append(message); } alertTooltip.setHtml(builder.toSafeHtml()); } }
public void setHtml(com.google.gwt.safehtml.shared.SafeHtml html) { assert html != null : "Tooltip HTML content cannot be null"; if (((tooltip) == null) || (!(tooltip.asString().equals(html.asString())))) { tooltip = html; applyTooltip(); } }	public void setHtml(com.google.gwt.safehtml.shared.SafeHtml html) { assert html != null : "Tooltip HTML content cannot be null"; if (((tooltip) == null) || (!(tooltip.asString().equals(html.asString())))) { tooltip = html; scheduleTooltipUpdate(); } }
public void setMaxWidth(org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.Width width) { extraTooltipClassNames += " " + (width.getClassName()); }	public void setMaxWidth(org.ovirt.engine.ui.common.widget.tooltip.TooltipWidth width) { tooltipConfig.addTooltipClassName(width.getClassName()); }
private static native void createTooltip(com.google.gwt.dom.client.Element e, java.lang.String placement, java.lang.String template);	private static native void createTooltipImpl(com.google.gwt.dom.client.Element e, java.lang.String html, java.lang.String placement, java.lang.String template, boolean forceShow);
@java.lang.Override public void setWidget(com.google.gwt.user.client.ui.Widget w) { super.setWidget(w); if ((w != null) && (w == (getWidget()))) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { applyTooltip(); } }); } }	@java.lang.Override protected void decorateWidget(com.google.gwt.user.client.ui.Widget w) { w.addAttachHandler(new com.google.gwt.event.logical.shared.AttachEvent.Handler() { @java.lang.Override public void onAttachOrDetach(com.google.gwt.event.logical.shared.AttachEvent event) { org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip.this.widgetAttached = event.isAttached(); scheduleTooltipUpdate(); } }); }
public static void setTooltipOnElement(com.google.gwt.dom.client.Element e, com.google.gwt.safehtml.shared.SafeHtml tooltip) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(e, tooltip, TooltipConfig.PLACEMENT); }	public static void setTooltipOnElement(com.google.gwt.dom.client.Element e, com.google.gwt.safehtml.shared.SafeHtml tooltip) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(e, tooltip, new org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig()); }
public static java.lang.String getTooltipTemplate(java.lang.String extraTooltipClassNames) { java.lang.String outerClassNames = org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.TEMPLATE_CLASS_OUTER; if (org.ovirt.engine.ui.uicompat.external.StringUtils.isNotEmpty(extraTooltipClassNames)) { outerClassNames += " " + extraTooltipClassNames; } java.lang.String template = org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.TEMPLATE; template = template.replace("{0}", outerClassNames); template = template.replace("{1}", TooltipConfig.TEMPLATE_CLASS_ARROW); template = template.replace("{2}", TooltipConfig.TEMPLATE_CLASS_INNER); return template; }	public static void setTooltipOnElement(com.google.gwt.dom.client.Element e, com.google.gwt.safehtml.shared.SafeHtml tooltip, org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig config) { if (org.ovirt.engine.ui.common.utils.ElementTooltipUtils.sameTooltipOnElement(e, tooltip)) { return; } org.ovirt.engine.ui.common.utils.ElementTooltipUtils.destroyTooltip(e); java.lang.String tooltipHtmlString = org.ovirt.engine.ui.common.utils.ElementTooltipUtils.getTooltipHtmlString(tooltip); if (!(tooltipHtmlString.isEmpty())) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.createTooltipImpl(e, tooltipHtmlString, config.getPlacement().getCssName(), config.getTooltipTemplate(), config.isForceShow()); if (config.isForCellWidgetElement()) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.cellWidgetElementReapList.add(e); } else if (org.ovirt.engine.ui.common.utils.ElementTooltipUtils.isPopupContentElement(e)) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.popupContentElementReapList.add(e); } } }
@java.lang.Override protected void writeGeneralData() { super.writeGeneralData(); _writer.writeStartElement(OvfProperties.CUSTOM_EMULATED_MACHINE); _writer.writeRaw(emulatedMachine); _writer.writeEndElement(); _writer.writeStartElement(OvfProperties.CUSTOM_CPU_NAME); _writer.writeRaw(cpuId); _writer.writeEndElement(); }	@java.lang.Override protected void writeCustomCpuName() { _writer.writeElement(OvfProperties.CUSTOM_CPU_NAME, cpuId); }
@org.junit.Test public void cpuNameIsNull() { cpuId = null; assertThatThrownBy(() -> new org.ovirt.engine.core.utils.ovf.HostedEngineOvfWriter(vm, images, version, emulatedMachine, cpuId)).isInstanceOf(java.lang.NullPointerException.class).hasMessageContaining("cpuId"); }	@org.junit.Test public void cpuIdIsNull() { cpuId = null; assertThatThrownBy(() -> new org.ovirt.engine.core.utils.ovf.HostedEngineOvfWriter(vm, images, version, emulatedMachine, cpuId)).isInstanceOf(java.lang.NullPointerException.class).hasMessageContaining("cpuId"); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.FencingPolicy.class, to = org.ovirt.engine.api.model.FencingPolicy.class) public static org.ovirt.engine.api.model.FencingPolicy map(org.ovirt.engine.api.model.FencingPolicy model, org.ovirt.engine.core.common.businessentities.FencingPolicy template) { org.ovirt.engine.core.common.businessentities.FencingPolicy entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.FencingPolicy(); entity.setFencingEnabled(model.isEnabled()); if (model.isSetSkipIfSdActive()) { entity.setSkipFencingIfSDActive(model.getSkipIfSdActive().isEnabled()); } if (model.isSetSkipIfConnectivityBroken()) { entity.setSkipFencingIfConnectivityBroken(model.getSkipIfConnectivityBroken().isEnabled()); if ((model.getSkipIfConnectivityBroken().getThreshold()) != null) { entity.setHostsWithBrokenConnectivityThreshold(model.getSkipIfConnectivityBroken().getThreshold()); } else { entity.setHostsWithBrokenConnectivityThreshold(50); } } if (model.isSetSkipIfGlusterBricksUp()) { entity.setSkipFencingIfGlusterQuorumNotMet(model.getSkipIfGlusterBricksUp().isEnabled()); } if (model.isSetSkipIfGlusterQuorumNotMet()) { entity.setSkipFencingIfGlusterQuorumNotMet(model.getSkipIfGlusterQuorumNotMet().isEnabled()); } return entity; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.FencingPolicy.class, to = org.ovirt.engine.api.model.FencingPolicy.class) public static org.ovirt.engine.api.model.FencingPolicy map(org.ovirt.engine.api.model.FencingPolicy model, org.ovirt.engine.core.common.businessentities.FencingPolicy template) { org.ovirt.engine.core.common.businessentities.FencingPolicy entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.FencingPolicy(); entity.setFencingEnabled(model.isEnabled()); if (model.isSetSkipIfSdActive()) { entity.setSkipFencingIfSDActive(model.getSkipIfSdActive().isEnabled()); } if (model.isSetSkipIfConnectivityBroken()) { entity.setSkipFencingIfConnectivityBroken(model.getSkipIfConnectivityBroken().isEnabled()); if ((model.getSkipIfConnectivityBroken().getThreshold()) != null) { entity.setHostsWithBrokenConnectivityThreshold(model.getSkipIfConnectivityBroken().getThreshold()); } else { entity.setHostsWithBrokenConnectivityThreshold(50); } } if (model.isSetSkipIfGlusterBricksUp()) { entity.setSkipFencingIfGlusterBricksUp(model.isSkipIfGlusterBricksUp()); } if (model.isSetSkipIfGlusterQuorumNotMet()) { entity.setSkipFencingIfGlusterQuorumNotMet(model.isSkipIfGlusterQuorumNotMet()); } return entity; }
@java.lang.Override protected boolean validate() { setStoragePoolId(getVm().getStoragePoolId()); if ((((!(isValidParametersList())) || (!(checkImagesStatus()))) || (!(validateSpaceRequirements()))) || (!(performVmRelatedChecks()))) { return false; } for (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getParametersList()) { org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getReturnValue().setValid((((((isDiskNotShareable(parameters.getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(parameters.getImageId()))) && (isTemplateInDestStorageDomain(parameters.getImageId(), parameters.getTargetStorageDomainId()))) && (performStorageDomainsChecks(parameters))) && (isSameSourceAndDest(parameters)))); if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getReturnValue().isValid())) { return false; } } if (!(setAndValidateDiskProfiles())) { return false; } return validateCreateAllSnapshotsFromVmCommand(); }	@java.lang.Override protected boolean validate() { setStoragePoolId(getVm().getStoragePoolId()); if ((!(isValidParametersList())) || (!(validateDestDomainsSpaceRequirements()))) { return false; } for (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getParametersList()) { org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getReturnValue().setValid((((((isDiskNotShareable(parameters.getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(parameters.getImageId()))) && (isTemplateInDestStorageDomain(parameters.getImageId(), parameters.getTargetStorageDomainId()))) && (validateDestStorage(getStorageDomainById(parameters.getTargetStorageDomainId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getStoragePoolId())))) && (isSameSourceAndDest(parameters)))); if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getReturnValue().isValid())) { return false; } } if (!(setAndValidateDiskProfiles())) { return false; } return validateCreateAllSnapshotsFromVmCommand(); }
private void initSpyCommand() { doReturn(true).when(command).validateSpaceRequirements(); doReturn(true).when(command).checkImagesStatus(); doReturn(true).when(command).setAndValidateDiskProfiles(); doReturn(true).when(command).validateCreateAllSnapshotsFromVmCommand(); }	private void initSpyCommand() { doReturn(true).when(command).validateDestDomainsSpaceRequirements(); doReturn(true).when(command).setAndValidateDiskProfiles(); doReturn(true).when(command).validateCreateAllSnapshotsFromVmCommand(); }
@java.lang.Override protected void executeCommand() { runVdsCommand(VDSCommandType.SparsifyImage, new org.ovirt.engine.core.common.vdscommands.SparsifyImageVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getImageId(), org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getId())); }	@java.lang.Override protected void executeCommand() { lockImageInDb(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithFailover(VDSCommandType.SparsifyImage, new org.ovirt.engine.core.common.vdscommands.SparsifyImageVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getParameters().getStorageJobId(), getDiskImage().getStorageIds().get(0), getDiskImage().getId(), getDiskImage().getImageId()), getDiskImage().getStoragePoolId(), this); if (!(vdsReturnValue.getSucceeded())) { setCommandStatus(CommandStatus.FAILED); unlockImageInDb(); } setSucceeded(vdsReturnValue.getSucceeded()); }
@java.lang.Override protected void executeVdsBrokerCommand() { java.util.Map<java.lang.String, java.lang.Object> volumeAddress = new java.util.HashMap<>(); volumeAddress.put("sd_id", org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getParameters().getStorageId()); volumeAddress.put("img_id", org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getParameters().getImageId()); volumeAddress.put("vol_id", org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getParameters().getVolumeId()); result = org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getBroker().sparsifyInplace(jobId, volumeAddress); org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.proceedProxyReturnValue(); }	@java.lang.Override protected void executeVdsBrokerCommand() { java.util.Map<java.lang.String, java.lang.Object> volumeAddress = new java.util.HashMap<>(); volumeAddress.put("sd_id", org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getParameters().getStorageDomainId().toString()); volumeAddress.put("img_id", org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getParameters().getImageId().toString()); volumeAddress.put("vol_id", org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getParameters().getVolumeId().toString()); result = org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getBroker().sparsifyVolume(org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getParameters().getJobId().toString(), volumeAddress); org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.proceedProxyReturnValue(); }
private boolean selectProxyHost() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> activeHosts = org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getVdsDao().getAllForStoragePoolAndStatus(org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getStoragePoolId(), VDSStatus.Up); if (activeHosts.isEmpty()) { return false; } org.ovirt.engine.core.common.businessentities.VDS activeHost = activeHosts.get(0); setVds(activeHost); return true; }	@java.lang.Override protected void endSuccessfully() { super.endSuccessfully(); unlockImageInDb(); }
protected org.ovirt.engine.core.common.businessentities.storage.Disk getDisk() { if ((disk) == null) { disk = org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskDao().get(org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getParameters().getImageId()); } return disk; }	private void initVmTemplateId() { java.util.Map<java.lang.Boolean, org.ovirt.engine.core.common.businessentities.VmTemplate> templateMap = vmTemplateDao.getAllForImage(getDiskImage().getImageId()); if (!(templateMap.isEmpty())) { setVmTemplateId(templateMap.values().iterator().next().getId()); } }
@java.lang.Override protected void init() { setImageId(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getImageId()); }	@java.lang.Override protected void init() { super.init(); if (getDiskImage().getVmEntityType().isTemplateType()) { initVmTemplateId(); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.Disk disk = getDisk(); if (disk != null) { permsList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(disk.getId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.SPARSIFY_DISK)); } return permsList; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getDiskImage(); if (diskImage == null) { return java.util.Collections.emptyList(); } return java.util.Collections.singletonList(new org.ovirt.engine.core.bll.utils.PermissionSubject(diskImage.getId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getActionType().getActionGroup())); }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyInplace(org.ovirt.engine.core.compat.Guid jobId, java.util.Map<java.lang.String, java.lang.Object> volumeAddress);	org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyVolume(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> volumeAddress);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyInplace(org.ovirt.engine.core.compat.Guid jobId, java.util.Map<java.lang.String, java.lang.Object> volumeAddress) { throw new java.lang.UnsupportedOperationException(); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyVolume(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> volumeAddress) { throw new java.lang.UnsupportedOperationException(); }
@java.lang.Override protected boolean validate() { if (((org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getVds()) == null) && (!(selectProxyHost()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_NO_VDS_IN_POOL); } return true; }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = new org.ovirt.engine.core.bll.validator.storage.DiskValidator(getDiskImage()); if ((!(validate(diskValidator.isDiskExists()))) || (!(validate(diskValidator.isDiskPluggedToVmsThatAreNotDown(false, vmsForDisk))))) { return false; } if ((diskImageDao.getAllSnapshotsForImageGroup(getDiskImage().getId()).size()) > 1) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_HAS_SNAPSHOTS); } org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(java.util.Collections.singletonList(getDiskImage())); return ((validate(diskImagesValidator.diskImagesNotIllegal())) && (validate(diskImagesValidator.diskImagesNotLocked()))) && (validate(diskImagesValidator.diskImagesHaveNoDerivedDisks(null))); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyInplace(org.ovirt.engine.core.compat.Guid jobId, java.util.Map<java.lang.String, java.lang.Object> volumeAddress) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.sparsify_inplace").withParameter("job_id", jobId).withParameter("vol_addr", volumeAddress).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyVolume(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> volumeAddress) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.sparsify_volume").withParameter("job_id", jobId).withParameter("vol_info", volumeAddress).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@java.lang.Override protected void executeCommand() { log.info("Creating ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); log.info("Creating {} image", getImageType()); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())) { createImage(); } else { handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { log.info("Creating ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())) { log.info("Creating {} image", getImageType()); createImage(); } else { handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true); }
public boolean isDownloading() { return isDownloading; }	public org.ovirt.engine.core.common.businessentities.storage.TransferType getTransferType() { return transferType; }
public void setIsDownloading(boolean isDownloading) { this.isDownloading = isDownloading; }	public void setTransferType(org.ovirt.engine.core.common.businessentities.storage.TransferType transferType) { this.transferType = transferType; }
@org.junit.Test public void testUploadIsDefaultTransferType() { assertEquals(transferImageCommand.getTransferType(), transferImageCommand.UPLOAD); }	@org.junit.Test public void testUploadIsDefaultTransferType() { assertEquals(transferImageCommand.getParameters().getTransferType(), TransferType.Upload); }
protected java.lang.String getTransferDescription() { return java.lang.String.format("%s %s '%s' (id '%s')", getTransferType(), getImageType(), getImageAlias(), getImageIdNullSafe()); }	protected java.lang.String getTransferDescription() { return java.lang.String.format("%s %s '%s' (id '%s')", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType().name(), getImageType(), getImageAlias(), getImageIdNullSafe()); }
@org.junit.Test public void testFailOnDownloadWithoutImage() { transferImageCommand.getParameters().setIsDownloading(true); junit.framework.Assert.assertFalse(transferImageCommand.validate()); assertThat(transferImageCommand.getReturnValue().getValidationMessages(), contains(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD.name())); }	@org.junit.Test public void testFailOnDownloadWithoutImage() { transferImageCommand.getParameters().setTransferType(TransferType.Download); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(transferImageCommand, EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(imageId))) { return validateImageTransfer(imageId); } else { if (!(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().isDownloading())) { return validateCreateImage(); } else { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); } } }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(imageId))) { return validateImageTransfer(imageId); } else if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); } return validateCreateImage(); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.ImageTransfer imageTransfer) { org.ovirt.engine.core.common.action.TransferDiskImageParameters params = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(); if (((imageTransfer.getDirection()) != null) && (imageTransfer.getDirection().equals(ImageTransferDirection.DOWNLOAD))) { params.setIsDownloading(true); } params.setImageId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(imageTransfer.getImage().getId())); params.setKeepaliveInterval(ConfigurationValues.UploadImageUiInactivityTimeoutInSeconds.getValue()); return performCreate(VdcActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }	@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.ImageTransfer imageTransfer) { org.ovirt.engine.core.common.action.TransferDiskImageParameters params = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(); if ((imageTransfer.isSetDirection()) && ((imageTransfer.getDirection()) == (org.ovirt.engine.api.model.ImageTransferDirection.DOWNLOAD))) { params.setTransferType(TransferType.Download); } params.setImageId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(imageTransfer.getImage().getId())); params.setKeepaliveInterval(ConfigurationValues.UploadImageUiInactivityTimeoutInSeconds.getValue()); return performCreate(VdcActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@org.junit.Test public void testFailsDownloadExecutionWithoutImage() { transferImageCommand.getParameters().setIsDownloading(true); transferImageCommand.executeCommand(); junit.framework.Assert.assertFalse(transferImageCommand.getReturnValue().getSucceeded()); assertThat(transferImageCommand.getReturnValue().getValidationMessages(), contains(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD.name())); }	@org.junit.Test public void testFailsDownloadExecutionWithoutImage() { transferImageCommand.getParameters().setTransferType(TransferType.Download); transferImageCommand.executeCommand(); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(transferImageCommand, EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); }
@java.lang.Override protected void executeCommand() { log.info("Creating ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())) { if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().isDownloading()) { failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(false); return; } log.info("Creating {} image", getImageType()); createImage(); } else { handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { log.info("Creating ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())) { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(false); return; } log.info("Creating {} image", getImageType()); createImage(); } else { handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> getOvfEntityList(org.ovirt.engine.core.common.businessentities.VmEntityType vmEntityType) { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = unregisteredOVFDataDao.getAllForStorageDomainByEntityType(org.ovirt.engine.core.bll.storage.domain.GetUnregisteredEntitiesQuery.getParameters().getId(), vmEntityType); return entityList; }	protected java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> getOvfEntityList(org.ovirt.engine.core.common.businessentities.VmEntityType vmEntityType) { return unregisteredOVFDataDao.getAllForStorageDomainByEntityType(org.ovirt.engine.core.bll.storage.domain.GetUnregisteredEntitiesQuery.getParameters().getId(), vmEntityType); }
private static org.ovirt.vdsm.jsonrpc.client.JsonRpcClient createClient(java.lang.String hostname, int port, org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy connectionPolicy, org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy clientPolicy, boolean isSecure, org.ovirt.vdsm.jsonrpc.client.reactors.ReactorType type, java.lang.String protocol, int parallelism) { org.ovirt.vdsm.jsonrpc.client.reactors.ManagerProvider provider = null; if (isSecure) { provider = new org.ovirt.engine.core.vdsbroker.jsonrpc.EngineManagerProvider(protocol); } try { final org.ovirt.vdsm.jsonrpc.client.reactors.Reactor reactor = org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.getReactor(provider, type); return org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.getJsonClient(reactor, hostname, port, connectionPolicy, clientPolicy, parallelism); } catch (org.ovirt.vdsm.jsonrpc.client.ClientConnectionException e) { org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.log.error("Exception occured during building ssl context or obtaining selector"); org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.log.debug("Exception", e); throw new java.lang.IllegalStateException(e); } }	private static org.ovirt.vdsm.jsonrpc.client.JsonRpcClient createClient(java.lang.String hostname, int port, org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy connectionPolicy, org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy clientPolicy, boolean isSecure, org.ovirt.vdsm.jsonrpc.client.reactors.ReactorType type, java.lang.String protocol, int parallelism) { org.ovirt.vdsm.jsonrpc.client.reactors.ManagerProvider provider = null; if (isSecure) { provider = new org.ovirt.engine.core.vdsbroker.jsonrpc.EngineManagerProvider(protocol); } try { final org.ovirt.vdsm.jsonrpc.client.reactors.Reactor reactor = org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.getReactor(provider, type); return org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.getJsonClient(reactor, hostname, port, connectionPolicy, clientPolicy, parallelism); } catch (org.ovirt.vdsm.jsonrpc.client.ClientConnectionException e) { org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.log.error("Exception occurred during building ssl context or obtaining selector for '{}': {}", hostname, e.getMessage()); org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.log.debug("Exception", e); throw new java.lang.IllegalStateException(e); } }
private boolean executeSshReboot(java.lang.String version) { try (final org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient();final java.io.ByteArrayOutputStream cmdOut = new java.io.ByteArrayOutputStream();final java.io.ByteArrayOutputStream cmdErr = new java.io.ByteArrayOutputStream()) { try { log.info("Opening SSH reboot session on host {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName()); sshClient.setVds(org.ovirt.engine.core.bll.SshHostRebootCommand.getVds()); sshClient.useDefaultKeyPair(); sshClient.connect(); sshClient.authenticate(); log.info("Executing SSH reboot command on host {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName()); sshClient.executeCommand(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SshHostRebootCommand, version), null, cmdOut, cmdErr); return true; } catch (java.lang.Exception ex) { log.error("SSH reboot command failed on host \'{}\': {}\nStdout: {}\nStderr: {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName(), ex.getMessage(), cmdOut, cmdErr); log.debug("Exception", ex); } } catch (java.io.IOException e) { log.error("IOException"); log.debug("Exception", e); } return false; }	private boolean executeSshReboot(java.lang.String version) { try (final org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient();final java.io.ByteArrayOutputStream cmdOut = new java.io.ByteArrayOutputStream();final java.io.ByteArrayOutputStream cmdErr = new java.io.ByteArrayOutputStream()) { try { log.info("Opening SSH reboot session on host {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName()); sshClient.setVds(org.ovirt.engine.core.bll.SshHostRebootCommand.getVds()); sshClient.useDefaultKeyPair(); sshClient.connect(); sshClient.authenticate(); log.info("Executing SSH reboot command on host {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName()); sshClient.executeCommand(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SshHostRebootCommand, version), null, cmdOut, cmdErr); return true; } catch (java.lang.Exception ex) { log.error("SSH reboot command failed on host \'{}\': {}\nStdout: {}\nStderr: {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName(), ex.getMessage(), cmdOut, cmdErr); log.debug("Exception", ex); } } catch (java.io.IOException e) { log.error("Error opening SSH connection to '{}': {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName(), e.getMessage()); log.debug("Exception", e); } return false; }
private boolean executeSshPowerDown(java.lang.String version) { boolean ret = false; try (final org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient();final java.io.ByteArrayOutputStream cmdOut = new java.io.ByteArrayOutputStream();final java.io.ByteArrayOutputStream cmdErr = new java.io.ByteArrayOutputStream()) { try { log.info("Opening SSH power down session on host {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName()); sshClient.setVds(org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds()); sshClient.useDefaultKeyPair(); sshClient.connect(); sshClient.authenticate(); log.info("Executing SSH power down command on host {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName()); sshClient.executeCommand(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SshVdsPowerdownCommand, version), null, cmdOut, cmdErr); ret = true; } catch (java.lang.Exception ex) { log.error("SSH power down command failed on host \'{}\': {}\nStdout: {}\nStderr: {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName(), ex.getMessage(), cmdOut, cmdErr); log.debug("Exception", ex); } } catch (java.io.IOException e) { log.error("IOException"); log.debug("Exception", e); } return ret; }	private boolean executeSshPowerDown(java.lang.String version) { boolean ret = false; try (final org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient();final java.io.ByteArrayOutputStream cmdOut = new java.io.ByteArrayOutputStream();final java.io.ByteArrayOutputStream cmdErr = new java.io.ByteArrayOutputStream()) { try { log.info("Opening SSH power down session on host {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName()); sshClient.setVds(org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds()); sshClient.useDefaultKeyPair(); sshClient.connect(); sshClient.authenticate(); log.info("Executing SSH power down command on host {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName()); sshClient.executeCommand(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SshVdsPowerdownCommand, version), null, cmdOut, cmdErr); ret = true; } catch (java.lang.Exception ex) { log.error("SSH power down command failed on host \'{}\': {}\nStdout: {}\nStderr: {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName(), ex.getMessage(), cmdOut, cmdErr); log.debug("Exception", ex); } } catch (java.io.IOException e) { log.error("Error opening SSH connection to '{}': {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName(), e.getMessage()); log.debug("Exception", e); } return ret; }
private void cloneStructureNotCollapsed() { org.ovirt.engine.core.common.action.CloneImageGroupVolumesStructureCommandParameters p = new org.ovirt.engine.core.common.action.CloneImageGroupVolumesStructureCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getSrcDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getDestDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getDestinationFormat(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getActionType(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters()); p.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters()); p.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getActionType()); p.setEndProcedure(EndProcedure.COMMAND_MANAGED); p.setJobWeight(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getOperationsWeight().get(CopyStage.DEST_CREATION)); runInternalAction(VdcActionType.CloneImageGroupVolumesStructure, p); }	private void cloneStructureNotCollapsed() { org.ovirt.engine.core.common.action.CloneImageGroupVolumesStructureCommandParameters p = new org.ovirt.engine.core.common.action.CloneImageGroupVolumesStructureCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getSrcDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getDestDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getDestinationFormat(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getActionType(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters()); p.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters()); p.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getActionType()); p.setEndProcedure(EndProcedure.COMMAND_MANAGED); p.setJobWeight(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getOperationsJobWeight().get(CopyStage.DEST_CREATION.name())); runInternalAction(VdcActionType.CloneImageGroupVolumesStructure, p); }
private void prepareParameters() { java.util.Map<java.lang.Object, java.lang.Integer> weights = new java.util.HashMap(); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().setOperationsWeight(weights); int createWeight = (org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getJobWeight()) / 10; weights.put(CopyStage.DEST_CREATION, createWeight); weights.put(CopyStage.DATA_COPY, ((org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getJobWeight()) - createWeight)); }	private void prepareParameters() { if ((org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getJobWeight()) != null) { java.util.Map<java.lang.String, java.lang.Integer> weights = new java.util.HashMap<>(); int createWeight = java.lang.Long.valueOf(java.lang.Math.round(((org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getJobWeight()) / 10.0))).intValue(); weights.put(CopyStage.DEST_CREATION.name(), createWeight); weights.put(CopyStage.DATA_COPY.name(), ((org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getJobWeight()) - createWeight)); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().setOperationsJobWeight(weights); } }
public org.ovirt.engine.core.common.job.Step addStep(org.ovirt.engine.core.bll.job.ExecutionContext context, org.ovirt.engine.core.common.job.StepEnum stepName, java.lang.String description, boolean isExternal) { if (context == null) { return null; } org.ovirt.engine.core.common.job.Step step = null; if (context.isMonitored()) { if (description == null) { description = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.getInstance().getStepMessage(stepName); } try { org.ovirt.engine.core.common.job.Job job = context.getJob(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsJob)) && (job != null)) { step = job.addStep(stepName, description); try { step.setExternal(isExternal); jobRepository.saveStep(step); } catch (java.lang.Exception e) { log.error("Failed to save new step '{}' for job '{}', '{}': {}", stepName.name(), job.getId(), job.getActionType().name(), e.getMessage()); log.debug("Exception", e); job.getSteps().remove(step); step = null; } } else { org.ovirt.engine.core.common.job.Step contextStep = context.getStep(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsStep)) && (contextStep != null)) { step = addSubStep(contextStep, stepName, description, java.util.Collections.emptyList(), false); step.setExternal(isExternal); } } } catch (java.lang.Exception e) { log.error("Exception", e); } } return step; }	public org.ovirt.engine.core.common.job.Step addStep(org.ovirt.engine.core.bll.job.ExecutionContext context, org.ovirt.engine.core.common.job.StepEnum stepName, java.lang.String description, boolean isExternal) { if (context == null) { return null; } org.ovirt.engine.core.common.job.Step step = null; if (context.isMonitored()) { if (description == null) { description = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.getInstance().getStepMessage(stepName); } try { org.ovirt.engine.core.common.job.Job job = context.getJob(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsJob)) && (job != null)) { step = job.addStep(stepName, description); try { step.setExternal(isExternal); jobRepository.saveStep(step); } catch (java.lang.Exception e) { log.error("Failed to save new step '{}' for job '{}', '{}': {}", stepName.name(), job.getId(), job.getActionType().name(), e.getMessage()); log.debug("Exception", e); job.getSteps().remove(step); step = null; } } else { org.ovirt.engine.core.common.job.Step contextStep = context.getStep(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsStep)) && (contextStep != null)) { step = addSubStep(contextStep, stepName, description, java.util.Collections.emptyList()); step.setExternal(isExternal); } } } catch (java.lang.Exception e) { log.error("Exception", e); } } return step; }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = diskImageDao.getAllSnapshotsForImageGroup(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID()); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.sortImageList(images); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().setImageIds(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDiskImageIds(images)); double totalSize = images.stream().mapToDouble(( di) -> di.getActualSize()).sum(); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().setOperationsWeight(images.stream().collect(java.util.stream.Collectors.toMap(DiskImage::getImageId, ( x) -> calculateImageWeight(totalSize, x)))); persistCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getParentCommand(), ((getCallback()) != null)); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = diskImageDao.getAllSnapshotsForImageGroup(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID()); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.sortImageList(images); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().setImageIds(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDiskImageIds(images)); prepareWeights(images); persistCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getParentCommand(), ((getCallback()) != null)); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.setSucceeded(true); }
private void copyVolumeData(org.ovirt.engine.core.compat.Guid image) { org.ovirt.engine.core.common.action.CopyDataCommandParameters parameters = new org.ovirt.engine.core.common.action.CopyDataCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getStoragePoolId(), buildImageLocationInfo(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getSrcDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID(), image), buildImageLocationInfo(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getDestDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID(), image), false); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters()); parameters.setJobWeight(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getOperationsWeight().get(image)); runInternalActionWithTasksContext(VdcActionType.CopyData, parameters); }	private void copyVolumeData(org.ovirt.engine.core.compat.Guid image) { org.ovirt.engine.core.common.action.CopyDataCommandParameters parameters = new org.ovirt.engine.core.common.action.CopyDataCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getStoragePoolId(), buildImageLocationInfo(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getSrcDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID(), image), buildImageLocationInfo(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getDestDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID(), image), false); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters()); parameters.setJobWeight(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getOperationsJobWeight().get(image.toString())); runInternalActionWithTasksContext(VdcActionType.CopyData, parameters); }
public org.ovirt.engine.core.common.job.Step addTaskStep(org.ovirt.engine.core.bll.job.ExecutionContext context, org.ovirt.engine.core.common.job.StepEnum stepName, java.lang.String description, java.util.Collection<org.ovirt.engine.core.common.job.StepSubjectEntity> stepSubjectEntities) { if (context == null) { return null; } org.ovirt.engine.core.common.job.Step step = null; if (context.isTasksMonitored()) { org.ovirt.engine.core.common.job.Step parentTaskStep = context.getParentTasksStep(); if (parentTaskStep != null) { step = addSubStep(parentTaskStep, stepName, description, stepSubjectEntities, true); } } return step; }	public org.ovirt.engine.core.common.job.Step addTaskStep(org.ovirt.engine.core.bll.job.ExecutionContext context, org.ovirt.engine.core.common.job.StepEnum stepName, java.lang.String description, java.util.Collection<org.ovirt.engine.core.common.job.StepSubjectEntity> stepSubjectEntities) { if (context == null) { return null; } org.ovirt.engine.core.common.job.Step step = null; if (context.isTasksMonitored()) { org.ovirt.engine.core.common.job.Step parentTaskStep = context.getParentTasksStep(); if (parentTaskStep != null) { step = addSubStep(parentTaskStep, stepName, description, stepSubjectEntities); } } return step; }
private org.ovirt.engine.core.common.job.Step addSubStep(org.ovirt.engine.core.common.job.Step parentStep, org.ovirt.engine.core.common.job.StepEnum stepName, java.lang.String description, java.util.Collection<org.ovirt.engine.core.common.job.StepSubjectEntity> stepSubjectEntities, boolean hasProgress) { org.ovirt.engine.core.common.job.Step step = null; if (parentStep != null) { if (description == null) { description = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.getInstance().getStepMessage(stepName); } step = parentStep.addStep(stepName, description); if (hasProgress) { step.setProgress(0); } try { jobRepository.saveStep(step, stepSubjectEntities); } catch (java.lang.Exception e) { log.error("Failed to save new step '{}' for step '{}', '{}': {}", stepName.name(), parentStep.getId(), parentStep.getStepType().name(), e.getMessage()); log.debug("Exception", e); parentStep.getSteps().remove(step); step = null; } } return step; }	private org.ovirt.engine.core.common.job.Step addSubStep(org.ovirt.engine.core.common.job.Step parentStep, org.ovirt.engine.core.common.job.StepEnum stepName, java.lang.String description, java.util.Collection<org.ovirt.engine.core.common.job.StepSubjectEntity> stepSubjectEntities) { org.ovirt.engine.core.common.job.Step step = null; if (parentStep != null) { if (description == null) { description = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.getInstance().getStepMessage(stepName); } step = parentStep.addStep(stepName, description); try { jobRepository.saveStep(step, stepSubjectEntities); } catch (java.lang.Exception e) { log.error("Failed to save new step '{}' for step '{}', '{}': {}", stepName.name(), parentStep.getId(), parentStep.getStepType().name(), e.getMessage()); log.debug("Exception", e); parentStep.getSteps().remove(step); step = null; } } return step; }
private int calculateImageWeight(double totalSize, org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { double weight = (totalSize == 0) ? 1 / (org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageIds().size()) : (image.getActualSize()) / totalSize; return java.lang.Long.valueOf(java.lang.Math.round((weight * (org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getJobWeight())))).intValue(); }	private double calculateImageWeight(double totalSize, org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { return totalSize == 0 ? 1.0 / (org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageIds().size()) : (image.getActualSize()) / totalSize; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> getCommandStepSubjectEntities() { if ((org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo()) instanceof org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) { return java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(org.ovirt.engine.core.common.VdcObjectType.Disk, ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo())).getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getJobWeight())); } return null; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> getCommandStepSubjectEntities() { if (((org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getJobWeight()) != null) && ((org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo()) instanceof org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo)) { return java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(org.ovirt.engine.core.common.VdcObjectType.Disk, ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo())).getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getJobWeight())); } return super.getCommandStepSubjectEntities(); }
public org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand, java.lang.String description, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType> entitiesMap) { org.ovirt.engine.core.common.job.Step taskStep = org.ovirt.engine.core.bll.job.ExecutionHandler.getInstance().addTaskStep(command.getExecutionContext(), org.ovirt.engine.core.common.job.StepEnum.getStepNameByTaskType(asyncTaskCreationInfo.getTaskType()), description, command.getCommandStepSubjectEntities()); command.getExecutionContext().setStep(taskStep); if (taskStep != null) { asyncTaskCreationInfo.setStepId(taskStep.getId()); } org.ovirt.engine.core.bll.tasks.SPMAsyncTask task = concreteCreateTask(taskId, command, asyncTaskCreationInfo, parentCommand); task.setEntitiesMap(entitiesMap); org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.addOrUpdateTaskInDB(task); getAsyncTaskManager().lockAndAddTaskToManager(task); org.ovirt.engine.core.compat.Guid vdsmTaskId = task.getVdsmTaskId(); org.ovirt.engine.core.bll.job.ExecutionHandler.getInstance().updateStepExternalId(taskStep, vdsmTaskId, ExternalSystemType.VDSM); return vdsmTaskId; }	public org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand, java.lang.String description, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType> entitiesMap) { org.ovirt.engine.core.common.job.Step taskStep = org.ovirt.engine.core.bll.job.ExecutionHandler.getInstance().addTaskStep(command.getExecutionContext(), org.ovirt.engine.core.common.job.StepEnum.getStepNameByTaskType(asyncTaskCreationInfo.getTaskType()), description, java.util.Collections.emptyList()); if (taskStep != null) { asyncTaskCreationInfo.setStepId(taskStep.getId()); } org.ovirt.engine.core.bll.tasks.SPMAsyncTask task = concreteCreateTask(taskId, command, asyncTaskCreationInfo, parentCommand); task.setEntitiesMap(entitiesMap); org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.addOrUpdateTaskInDB(task); getAsyncTaskManager().lockAndAddTaskToManager(task); org.ovirt.engine.core.compat.Guid vdsmTaskId = task.getVdsmTaskId(); org.ovirt.engine.core.bll.job.ExecutionHandler.getInstance().updateStepExternalId(taskStep, vdsmTaskId, ExternalSystemType.VDSM); return vdsmTaskId; }
private void handleCommandStepAndEntities() { if ((getCommandStep()) != null) { org.ovirt.engine.core.common.job.Step taskStep = executionHandler.addTaskStep(getExecutionContext(), getCommandStep(), null, getCommandStepSubjectEntities()); if (taskStep != null) { getExecutionContext().setStep(taskStep); persistCommandIfNeeded(); } } }	private void handleCommandStepAndEntities() { if ((getCommandStep()) != null) { org.ovirt.engine.core.common.job.Step taskStep = executionHandler.addTaskStep(getExecutionContext(), getCommandStep(), null, getCommandStepSubjectEntities()); if (taskStep != null) { if (shouldUpdateStepProgress()) { stepDao.updateStepProgress(taskStep.getId(), 0); } getExecutionContext().setStep(taskStep); persistCommandIfNeeded(); } } }
public java.util.Map<?, java.lang.Integer> getOperationsWeight() { return operationsWeight; }	public java.util.Map<java.lang.String, java.lang.Integer> getOperationsJobWeight() { return operationsJobWeight; }
public void setOperationsWeight(java.util.Map<java.lang.Object, java.lang.Integer> operationsWeight) { this.operationsWeight = operationsWeight; }	public void setOperationsJobWeight(java.util.Map<java.lang.String, java.lang.Integer> operationsJobWeight) { this.operationsJobWeight = operationsJobWeight; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> getCommandStepSubjectEntities() { if ((org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getJobWeight()) != null) { return java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getJobWeight().intValue())); } return null; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> getCommandStepSubjectEntities() { if ((org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getJobWeight()) != null) { return java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getJobWeight())); } return super.getCommandStepSubjectEntities(); }
private org.ovirt.engine.core.common.businessentities.aaa.DbUser buildUser(T params, java.lang.String authzName) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = dbUserDao.getByExternalId(authzName, params.getPrincipalId()); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = new org.ovirt.engine.core.common.businessentities.aaa.DbUser(dbUser); user.setId((dbUser == null ? org.ovirt.engine.core.compat.Guid.newGuid() : dbUser.getId())); user.setExternalId(params.getPrincipalId()); user.setDomain(authzName); user.setEmail(params.getEmail()); user.setFirstName(params.getFirstName()); user.setLastName(params.getLastName()); user.setNamespace(params.getNamespace()); user.setLoginName(params.getPrincipalName()); java.util.List<org.ovirt.engine.core.compat.Guid> groupIds = new java.util.ArrayList<>(); java.util.List<java.lang.String> groupRecordIds = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.aaa.CreateUserSessionCommand.flatGroups(((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (params.getGroupIds())), groupRecordIds); for (java.lang.String groupId : groupRecordIds) { org.ovirt.engine.core.common.businessentities.aaa.DbGroup dbGroup = dbGroupDao.getByExternalId(authzName, groupId); if (dbGroup != null) { groupIds.add(dbGroup.getId()); } } user.setGroupIds(groupIds); if (dbUser == null) { dbUserDao.save(user); } else if (!(dbUser.equals(user))) { dbUserDao.update(user); } return user; }	private org.ovirt.engine.core.common.businessentities.aaa.DbUser buildUser(T params, java.lang.String authzName) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = dbUserDao.getByExternalId(authzName, params.getPrincipalId()); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = new org.ovirt.engine.core.common.businessentities.aaa.DbUser(dbUser); user.setId((dbUser == null ? org.ovirt.engine.core.compat.Guid.newGuid() : dbUser.getId())); user.setExternalId(params.getPrincipalId()); user.setDomain(authzName); user.setEmail(params.getEmail()); user.setFirstName(params.getFirstName()); user.setLastName(params.getLastName()); user.setNamespace(params.getNamespace()); user.setLoginName(params.getPrincipalName()); java.util.List<org.ovirt.engine.core.compat.Guid> groupIds = new java.util.ArrayList<>(); java.util.List<java.lang.String> groupRecordIds = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.aaa.CreateUserSessionCommand.flatGroups(((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (params.getGroupIds())), groupRecordIds); for (java.lang.String groupId : groupRecordIds) { org.ovirt.engine.core.common.businessentities.aaa.DbGroup dbGroup = dbGroupDao.getByExternalId(authzName, groupId); if (dbGroup != null) { groupIds.add(dbGroup.getId()); } } user.setGroupIds(groupIds); user.setAdmin((!(roleDao.getAnyAdminRoleForUserAndGroups(user.getId(), org.apache.commons.lang.StringUtils.join(user.getGroupIds(), ",")).isEmpty()))); if (dbUser == null) { dbUserDao.save(user); } else if (!(dbUser.equals(user))) { dbUserDao.update(user); } return user; }
java.lang.String areYouSureYouWantToCheckForUpgradeTheFollowingHostMsg();	java.lang.String areYouSureYouWantToCheckTheFollowingHostForUpgradesMsg();
@java.lang.Override public org.ovirt.engine.core.common.utils.HostUpgradeManagerResult isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = backendInternal.runInternalQuery(VdcQueryType.GetoVirtISOs, new org.ovirt.engine.core.common.queries.IdQueryParameters(host.getId())); java.util.List<org.ovirt.engine.core.compat.RpmVersion> isos = returnValue.getReturnValue(); boolean updateAvailable = org.ovirt.engine.core.common.utils.RpmVersionUtils.isUpdateAvailable(isos, host.getHostOs()); org.ovirt.engine.core.common.utils.HostUpgradeManagerResult hostUpgradeManagerResult = new org.ovirt.engine.core.common.utils.HostUpgradeManagerResult(); hostUpgradeManagerResult.setUpdatesAvailable(updateAvailable); if (updateAvailable) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLog = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLog.setVds(host); auditLogDirector.log(auditLog, AuditLogType.OVIRT_NODE_UPDATES_ARE_AVAILABLE); } return hostUpgradeManagerResult; }	@java.lang.Override public org.ovirt.engine.core.common.HostUpgradeManagerResult checkForUpdates(org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = backendInternal.runInternalQuery(VdcQueryType.GetoVirtISOs, new org.ovirt.engine.core.common.queries.IdQueryParameters(host.getId())); java.util.List<org.ovirt.engine.core.compat.RpmVersion> isos = returnValue.getReturnValue(); boolean updateAvailable = org.ovirt.engine.core.common.utils.RpmVersionUtils.isUpdateAvailable(isos, host.getHostOs()); org.ovirt.engine.core.common.HostUpgradeManagerResult hostUpgradeManagerResult = new org.ovirt.engine.core.common.HostUpgradeManagerResult(); hostUpgradeManagerResult.setUpdatesAvailable(updateAvailable); if (updateAvailable) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLog = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase()); auditLog.setVds(host); auditLogDirector.log(auditLog, AuditLogType.OVIRT_NODE_UPDATES_ARE_AVAILABLE); } return hostUpgradeManagerResult; }
org.ovirt.engine.core.common.utils.HostUpgradeManagerResult isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host);	org.ovirt.engine.core.common.HostUpgradeManagerResult checkForUpdates(org.ovirt.engine.core.common.businessentities.VDS host);
private void onUpgrade() { if ((getProgress()) != null) { return; } org.ovirt.engine.core.common.action.hostdeploy.HostUpgradeCheckParameters params = new org.ovirt.engine.core.common.action.hostdeploy.HostUpgradeCheckParameters(host.getId()); invokeCheckForHostUpgrade(params); }	private void onUpgrade() { if ((getProgress()) != null) { return; } invokeCheckForHostUpgrade(new org.ovirt.engine.core.common.action.VdsActionParameters(host.getId())); }
public org.ovirt.engine.core.common.utils.HostUpgradeManagerResult isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { return create(host.getVdsType()).isUpdateAvailable(host); }	public org.ovirt.engine.core.common.HostUpgradeManagerResult checkForUpdates(org.ovirt.engine.core.common.businessentities.VDS host) { if (upgradeCheckInProgressMap.getOrDefault(host.getId(), false)) { java.lang.String error = java.lang.String.format("Failed to refresh host '%s' packages availability, another refresh process already running.", host.getName()); org.ovirt.engine.core.bll.host.AvailableUpdatesFinder.log.error(error); throw new java.lang.RuntimeException(error); } try { upgradeCheckInProgressMap.put(host.getId(), true); return create(host.getVdsType()).checkForUpdates(host); } finally { upgradeCheckInProgressMap.remove(host.getId()); } }
private org.ovirt.engine.core.compat.Guid findChildCommandByActionType(org.ovirt.engine.core.common.action.VdcActionType commandType, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { for (org.ovirt.engine.core.compat.Guid cmdId : childCmdIds) { org.ovirt.engine.core.common.businessentities.CommandEntity commandEntity = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(cmdId); if ((commandEntity.getCommandType()) == commandType) { return cmdId; } } return null; }	private org.ovirt.engine.core.compat.Guid findChildCommandByActionType(org.ovirt.engine.core.common.action.VdcActionType commandType, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { return childCmdIds.stream().filter(( cmdId) -> (org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(cmdId).getCommandType()) == commandType).findFirst().orElse(null); }
@java.lang.Override public void initialize() { setTitle(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.constants.upgradeHostTitle()); setHelpTag(HelpTag.upgrade_host); setHashName(HelpTag.upgrade_host.name); setMessage(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.constants.areYouSureYouWantToCheckForUpgradeTheFollowingHostMsg()); org.ovirt.engine.ui.uicommonweb.UICommand upgradeCommand = new org.ovirt.engine.ui.uicommonweb.UICommand(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.ON_CHECK_UPGRADE, this); upgradeCommand.setTitle(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.constants.ok()); upgradeCommand.setIsDefault(true); getCommands().add(upgradeCommand); }	@java.lang.Override public void initialize() { setTitle(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.constants.upgradeHostTitle()); setHelpTag(HelpTag.upgrade_host); setHashName(HelpTag.upgrade_host.name); setMessage(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.constants.areYouSureYouWantToCheckTheFollowingHostForUpgradesMsg()); org.ovirt.engine.ui.uicommonweb.UICommand upgradeCommand = new org.ovirt.engine.ui.uicommonweb.UICommand(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.ON_CHECK_UPGRADE, this); upgradeCommand.setTitle(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.constants.ok()); upgradeCommand.setIsDefault(true); getCommands().add(upgradeCommand); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.VDS vds = vdsDao.get(org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.getVdsId()); org.ovirt.engine.core.common.utils.HostUpgradeManagerResult hostUpgradeManagerResult; try { hostUpgradeManagerResult = availableUpdatesFinder.isUpdateAvailable(vds); if (hostUpgradeManagerResult.isUpdatesAvailable()) { java.lang.String message = ((hostUpgradeManagerResult.getAvailablePackages()) == null) ? "found updates." : java.lang.String.format(" found updates for packages %s", org.apache.commons.lang.StringUtils.join(hostUpgradeManagerResult.getAvailablePackages(), ", ")); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.addCustomValue("Message", message); vds.getDynamicData().setUpdateAvailable(hostUpgradeManagerResult.isUpdatesAvailable()); vdsDynamicDao.updateUpdateAvailable(vds.getId(), hostUpgradeManagerResult.isUpdatesAvailable()); } else { org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.addCustomValue("Message", " no updates found."); } org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.getReturnValue().setActionReturnValue(hostUpgradeManagerResult); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.setSucceeded(true); setCommandStatus(CommandStatus.SUCCEEDED); } catch (java.lang.Exception e) { log.error("Failed to check if updates are available for host '{}'", vds.getName()); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.setSucceeded(false); setCommandStatus(CommandStatus.FAILED); } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.HostUpgradeManagerResult hostUpgradeManagerResult = resourceManager.getVdsManager(org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.getVdsId()).checkForUpdates(vdsDao.get(org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.getVdsId())); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.getReturnValue().setActionReturnValue(hostUpgradeManagerResult); setSucceeded((hostUpgradeManagerResult != null)); setCommandStatus((hostUpgradeManagerResult != null ? org.ovirt.engine.core.compat.CommandStatus.SUCCEEDED : org.ovirt.engine.core.compat.CommandStatus.FAILED)); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.HOST_AVAILABLE_UPDATES_FINISHED : org.ovirt.engine.core.common.AuditLogType.HOST_AVAILABLE_UPDATES_FAILED; }	@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.common.AuditLogType.UNASSIGNED; }
@java.lang.Override public boolean isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { return availableUpdatesFinder.isUpdateAvailable(host).isUpdatesAvailable(); }	@java.lang.Override public org.ovirt.engine.core.common.HostUpgradeManagerResult checkForUpdates(org.ovirt.engine.core.common.businessentities.VDS host) { return availableUpdatesFinder.checkForUpdates(host); }
@java.lang.Override protected void executeCommand() { java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> upgradeCheckCmd = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.HostUpgradeCheckInternal, createUpgradeCheckParameters(), org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.cloneContext()); if (!(org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.getParameters().isRunAsync())) { org.ovirt.engine.core.common.action.VdcReturnValueBase result; try { result = upgradeCheckCmd.get(); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.getReturnValue().setActionReturnValue(result.getActionReturnValue()); if (!(result.getSucceeded())) { propagateFailure(result); return; } } catch (java.lang.InterruptedException | java.util.concurrent.ExecutionException e) { log.error("Exception", e); return; } } org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.HostUpgradeCheckInternal, org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.withRootCommandInfo(new org.ovirt.engine.core.common.action.VdsActionParameters(org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.getVdsId())), org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.cloneContext()); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.setSucceeded(true); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", getLUNId()).append("physicalVolumeId", getPhysicalVolumeId()).append("volumeGroupId", getVolumeGroupId()).append("serial", getSerial()).append("lunMapping", getLunMapping()).append("vendorId", getVendorId()).append("productId", getProductId()).append("lunConnections", getLunConnections()).append("deviceSize", getDeviceSize()).append("pvSize", getPvSize()).append("vendorName", getVendorName()).append("pathsDictionary", getPathsDictionary()).append("pathsCapacity", getPathsCapacity()).append("lunType", getLunType()).append("status", getStatus()).append("diskId", getDiskId()).append("diskAlias", getDiskAlias()).append("storageDomainId", getStorageDomainId()).append("storageDomainName", getStorageDomainName()).append("discardMaxBytes", getDiscardMaxBytes()).append("discardZeroesData", isDiscardZeroesData()).build(); }	@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", getLUNId()).append("physicalVolumeId", getPhysicalVolumeId()).append("volumeGroupId", getVolumeGroupId()).append("serial", getSerial()).append("lunMapping", getLunMapping()).append("vendorId", getVendorId()).append("productId", getProductId()).append("lunConnections", getLunConnections()).append("deviceSize", getDeviceSize()).append("pvSize", getPvSize()).append("vendorName", getVendorName()).append("pathsDictionary", getPathsDictionary()).append("pathsCapacity", getPathsCapacity()).append("lunType", getLunType()).append("status", getStatus()).append("diskId", getDiskId()).append("diskAlias", getDiskAlias()).append("storageDomainId", getStorageDomainId()).append("storageDomainName", getStorageDomainName()).append("discardMaxSize", getDiscardMaxSize()).append("discardZeroesData", getDiscardZeroesData()).build(); }
public java.lang.Boolean isDiscardZeroesData() { return staticData.isDiscardZeroesData(); }	public java.lang.Boolean getSupportsDiscardZeroesData() { return supportsDiscardZeroesData; }
public void setSupportsDiscard(java.lang.Boolean supportsDiscard) { this.supportsDiscard = supportsDiscard; }	public void setFirstMetadataDevice(java.lang.String firstMetadataDevice) { this.firstMetadataDevice = firstMetadataDevice; }
public java.lang.Boolean isSupportsDiscard() { return supportsDiscard; }	public java.lang.String getFirstMetadataDevice() { return firstMetadataDevice; }
public java.lang.Long getDiscardMaxBytes() { return discardMaxBytes; }	public java.lang.Long getDiscardMaxSize() { return discardMaxSize; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.storage.LUNs)) { return false; } org.ovirt.engine.core.common.businessentities.storage.LUNs other = ((org.ovirt.engine.core.common.businessentities.storage.LUNs) (obj)); return ((((((((((((((((((((java.util.Objects.equals(id, other.id)) && (java.util.Objects.equals(_lunConnections, other._lunConnections))) && (java.util.Objects.equals(lunMapping, other.lunMapping))) && (java.util.Objects.equals(physicalVolumeId, other.physicalVolumeId))) && ((deviceSize) == (other.deviceSize))) && ((pvSize) == (other.pvSize))) && (java.util.Objects.equals(discardMaxBytes, other.discardMaxBytes))) && (java.util.Objects.equals(discardZeroesData, other.discardZeroesData))) && ((lunType) == (other.lunType))) && (java.util.Objects.equals(pathsDictionary, other.pathsDictionary))) && (java.util.Objects.equals(pathsCapacity, other.pathsCapacity))) && (java.util.Objects.equals(vendorName, other.vendorName))) && (java.util.Objects.equals(productId, other.productId))) && (java.util.Objects.equals(serial, other.serial))) && (java.util.Objects.equals(vendorId, other.vendorId))) && (java.util.Objects.equals(volumeGroupId, other.volumeGroupId))) && (java.util.Objects.equals(status, other.status))) && (java.util.Objects.equals(diskId, other.diskId))) && (java.util.Objects.equals(diskAlias, other.diskAlias))) && (java.util.Objects.equals(storageDomainId, other.storageDomainId))) && (java.util.Objects.equals(storageDomainName, other.storageDomainName)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.storage.LUNs)) { return false; } org.ovirt.engine.core.common.businessentities.storage.LUNs other = ((org.ovirt.engine.core.common.businessentities.storage.LUNs) (obj)); return ((((((((((((((((((((java.util.Objects.equals(id, other.id)) && (java.util.Objects.equals(_lunConnections, other._lunConnections))) && (java.util.Objects.equals(lunMapping, other.lunMapping))) && (java.util.Objects.equals(physicalVolumeId, other.physicalVolumeId))) && ((deviceSize) == (other.deviceSize))) && ((pvSize) == (other.pvSize))) && (java.util.Objects.equals(discardMaxSize, other.discardMaxSize))) && (java.util.Objects.equals(discardZeroesData, other.discardZeroesData))) && ((lunType) == (other.lunType))) && (java.util.Objects.equals(pathsDictionary, other.pathsDictionary))) && (java.util.Objects.equals(pathsCapacity, other.pathsCapacity))) && (java.util.Objects.equals(vendorName, other.vendorName))) && (java.util.Objects.equals(productId, other.productId))) && (java.util.Objects.equals(serial, other.serial))) && (java.util.Objects.equals(vendorId, other.vendorId))) && (java.util.Objects.equals(volumeGroupId, other.volumeGroupId))) && (java.util.Objects.equals(status, other.status))) && (java.util.Objects.equals(diskId, other.diskId))) && (java.util.Objects.equals(diskAlias, other.diskAlias))) && (java.util.Objects.equals(storageDomainId, other.storageDomainId))) && (java.util.Objects.equals(storageDomainName, other.storageDomainName)); }
public void setDiscardZeroesData(java.lang.Boolean discardZeroesData) { staticData.setDiscardZeroesData(discardZeroesData); }	public void setSupportsDiscardZeroesData(java.lang.Boolean supportsDiscardZeroesData) { this.supportsDiscardZeroesData = supportsDiscardZeroesData; }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("lun_id", lun.getLUNId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getLunMapping()).addValue("vendor_id", lun.getVendorId()).addValue("product_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize()).addValue("discard_max_bytes", lun.getDiscardMaxBytes()).addValue("discard_zeroes_data", lun.isDiscardZeroesData()); getCallsHandler().executeModification("InsertLUNs", parameterSource); }	@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("lun_id", lun.getLUNId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getLunMapping()).addValue("vendor_id", lun.getVendorId()).addValue("product_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize()).addValue("discard_max_size", lun.getDiscardMaxSize()).addValue("discard_zeroes_data", lun.getDiscardZeroesData()); getCallsHandler().executeModification("InsertLUNs", parameterSource); }
public java.lang.Boolean isSupportsDiscard() { return staticData.isSupportsDiscard(); }	public java.lang.Boolean getSupportsDiscard() { return supportsDiscard; }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { return createIdParameterMapper(lun.getId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getLunMapping()).addValue("vendor_id", lun.getVendorId()).addValue("product_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize()).addValue("discard_max_bytes", lun.getDiscardMaxBytes()).addValue("discard_zeroes_data", lun.isDiscardZeroesData()); }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { return createIdParameterMapper(lun.getId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getLunMapping()).addValue("vendor_id", lun.getVendorId()).addValue("product_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize()).addValue("discard_max_size", lun.getDiscardMaxSize()).addValue("discard_zeroes_data", lun.getDiscardZeroesData()); }
protected java.util.Map<java.util.function.Consumer<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDbMap = lunsFromDb.stream().collect(java.util.stream.Collectors.toMap(LUNs::getLUNId, java.util.function.Function.identity())); return lunsFromVgInfo.stream().collect(java.util.stream.Collectors.groupingBy(( lunFromVgInfo) -> { org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDb = lunsFromDbMap.get(lunFromVgInfo.getLUNId()); if (lunFromDb == null) { return saveNewLuns; } boolean lunFromDbHasSamePvId = java.util.Objects.equals(lunFromDb.getPhysicalVolumeId(), lunFromVgInfo.getPhysicalVolumeId()); if (lunFromDbHasSamePvId) { if ((((lunFromDb.getDeviceSize()) != (lunFromVgInfo.getDeviceSize())) || (!(java.util.Objects.equals(lunFromDb.getDiscardMaxBytes(), lunFromVgInfo.getDiscardMaxBytes())))) || (!(java.util.Objects.equals(lunFromDb.isDiscardZeroesData(), lunFromVgInfo.isDiscardZeroesData())))) { return updateExistingLuns; } return noOp; } return updateExistingLuns; })); }	protected java.util.Map<java.util.function.Consumer<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDbMap = lunsFromDb.stream().collect(java.util.stream.Collectors.toMap(LUNs::getLUNId, java.util.function.Function.identity())); return lunsFromVgInfo.stream().collect(java.util.stream.Collectors.groupingBy(( lunFromVgInfo) -> { org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDb = lunsFromDbMap.get(lunFromVgInfo.getLUNId()); if (lunFromDb == null) { return saveNewLuns; } boolean lunFromDbHasSamePvId = java.util.Objects.equals(lunFromDb.getPhysicalVolumeId(), lunFromVgInfo.getPhysicalVolumeId()); if (lunFromDbHasSamePvId) { if ((((lunFromDb.getDeviceSize()) != (lunFromVgInfo.getDeviceSize())) || (!(java.util.Objects.equals(lunFromDb.getDiscardMaxSize(), lunFromVgInfo.getDiscardMaxSize())))) || (!(java.util.Objects.equals(lunFromDb.getDiscardZeroesData(), lunFromVgInfo.getDiscardZeroesData())))) { return updateExistingLuns; } return noOp; } return updateExistingLuns; })); }
@org.junit.Test public void testGetLunsToUpdateInDbDiffDiscardMaxBytes() { lunFromVg.setDiscardMaxBytes(2048L); lunFromDb.setDiscardMaxBytes(1024L); assertLunShouldBeUpdatedDueToFieldChange(); }	@org.junit.Test public void testGetLunsToUpdateInDbDiffDiscardMaxSize() { lunFromVg.setDiscardMaxSize(2048L); lunFromDb.setDiscardMaxSize(1024L); assertLunShouldBeUpdatedDueToFieldChange(); }
public void setSupportsDiscard(java.lang.Boolean supportsDiscard) { staticData.setSupportsDiscard(supportsDiscard); }	public void setSupportsDiscard(java.lang.Boolean supportsDiscard) { this.supportsDiscard = supportsDiscard; }
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("lun_id", lun.getLUNId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getLunMapping()).addValue("vendor_id", lun.getVendorId()).addValue("product_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize()).addValue("discard_max_bytes", lun.getDiscardMaxBytes()).addValue("discard_zeroes_data", lun.isDiscardZeroesData()); getCallsHandler().executeModification("UpdateLUNs", parameterSource); }	@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("lun_id", lun.getLUNId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getLunMapping()).addValue("vendor_id", lun.getVendorId()).addValue("product_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize()).addValue("discard_max_size", lun.getDiscardMaxSize()).addValue("discard_zeroes_data", lun.getDiscardZeroesData()); getCallsHandler().executeModification("UpdateLUNs", parameterSource); }
public void setDiscardMaxBytes(java.lang.Long discardMaxBytes) { this.discardMaxBytes = discardMaxBytes; }	public void setDiscardMaxSize(java.lang.Long discardMaxSize) { this.discardMaxSize = discardMaxSize; }
public static boolean needsAlert(org.ovirt.engine.core.common.businessentities.VM vm) { boolean needsAlert = false; if ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { needsAlert = (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasDifferentTimezone(vm)) || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasDifferentOSType(vm)); } return (needsAlert || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.isUpdateNeeded(vm))) || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasPauseError(vm)); }	public static boolean needsAlert(org.ovirt.engine.core.common.businessentities.VM vm) { boolean alertRequired = false; if ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { alertRequired = ((!(org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasGuestAgent(vm))) || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasDifferentTimezone(vm))) || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasDifferentOSType(vm)); } return (alertRequired || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.isUpdateNeeded(vm))) || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasPauseError(vm)); }
public void setVdsNumaNodeList(java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning> vdsNumaNodeList) { this.vdsNumaNodeList = vdsNumaNodeList; }	public void setVdsNumaNodeList(java.util.List<java.lang.Integer> vdsNumaNodeList) { this.vdsNumaNodeList = vdsNumaNodeList; }
public java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning> getVdsNumaNodeList() { return vdsNumaNodeList; }	public java.util.List<java.lang.Integer> getVdsNumaNodeList() { return vdsNumaNodeList; }
private static org.ovirt.engine.core.bll.ValidationResult checkNumaPreferredTuneMode(org.ovirt.engine.core.common.businessentities.NumaTuneMode numaTuneMode, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) { if (numaTuneMode != (org.ovirt.engine.core.common.businessentities.NumaTuneMode.PREFERRED)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((vmNumaNodes.size()) == 1) { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning> vdsNumaNodeList = vmNumaNodes.get(0).getVdsNumaNodeList(); boolean pinnedToSingleNode = ((vdsNumaNodeList != null) && ((vdsNumaNodeList.size()) == 1)) && (vdsNumaNodeList.get(0).isPinned()); if (pinnedToSingleNode) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_PREFERRED_NOT_PINNED_TO_SINGLE_NODE); }	private org.ovirt.engine.core.bll.ValidationResult checkNumaPreferredTuneMode(org.ovirt.engine.core.common.businessentities.NumaTuneMode numaTuneMode, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) { if (numaTuneMode != (org.ovirt.engine.core.common.businessentities.NumaTuneMode.PREFERRED)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((vmNumaNodes.size()) == 1) { java.util.List<java.lang.Integer> vdsNumaNodeList = vmNumaNodes.get(0).getVdsNumaNodeList(); boolean pinnedToSingleNode = (vdsNumaNodeList != null) && ((vdsNumaNodeList.size()) == 1); if (pinnedToSingleNode) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_PREFERRED_NOT_PINNED_TO_SINGLE_NODE); }
private java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning>> getAllVmNumaNodePinInfo() { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning>> numaNodesAssign = getCallsHandler().executeReadList("GetAllAssignedNumaNodeInfomation", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeAssignmentRowMapper, null); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning>> vmNumaNodesPinMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning> pair : numaNodesAssign) { if (!(vmNumaNodesPinMap.containsKey(pair.getFirst()))) { vmNumaNodesPinMap.put(pair.getFirst(), new java.util.ArrayList()); } vmNumaNodesPinMap.get(pair.getFirst()).add(pair.getSecond()); } return vmNumaNodesPinMap; }	private java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.Integer>> getAllVmNumaNodePinInfo() { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> numaNodesAssign = getCallsHandler().executeReadList("GetAllAssignedNumaNodeInfomation", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeAssignmentRowMapper, null); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.Integer>> vmNumaNodesPinMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer> pair : numaNodesAssign) { if (!(vmNumaNodesPinMap.containsKey(pair.getFirst()))) { vmNumaNodesPinMap.put(pair.getFirst(), new java.util.ArrayList()); } vmNumaNodesPinMap.get(pair.getFirst()).add(pair.getSecond()); } return vmNumaNodesPinMap; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode>> getVmNumaNodeInfoByClusterId(org.ovirt.engine.core.compat.Guid cluster) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cluster_id", cluster); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode>> vmNumaNodes = getCallsHandler().executeReadList("GetVmNumaNodeByCluster", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeInfoWithClusterRowMapper, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.Integer>> numaNodesCpusMap = getAllNumaNodeCpuMap(); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning>> vmNumaNodesPinMap = getAllVmNumaNodePinInfo(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode> pair : vmNumaNodes) { if (numaNodesCpusMap.containsKey(pair.getSecond().getId())) { pair.getSecond().setCpuIds(numaNodesCpusMap.get(pair.getSecond().getId())); } if (vmNumaNodesPinMap.containsKey(pair.getSecond().getId())) { pair.getSecond().setVdsNumaNodeList(vmNumaNodesPinMap.get(pair.getSecond().getId())); } } return vmNumaNodes; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode>> getVmNumaNodeInfoByClusterId(org.ovirt.engine.core.compat.Guid cluster) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cluster_id", cluster); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode>> vmNumaNodes = getCallsHandler().executeReadList("GetVmNumaNodeByCluster", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeInfoWithClusterRowMapper, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.Integer>> numaNodesCpusMap = getAllNumaNodeCpuMap(); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.Integer>> vmNumaNodesPinMap = getAllVmNumaNodePinInfo(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode> pair : vmNumaNodes) { if (numaNodesCpusMap.containsKey(pair.getSecond().getId())) { pair.getSecond().setCpuIds(numaNodesCpusMap.get(pair.getSecond().getId())); } if (vmNumaNodesPinMap.containsKey(pair.getSecond().getId())) { pair.getSecond().setVdsNumaNodeList(vmNumaNodesPinMap.get(pair.getSecond().getId())); } } return vmNumaNodes; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> getAllVmNumaNodeByVmId(org.ovirt.engine.core.compat.Guid vmId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_id", vmId); java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = getCallsHandler().executeReadList("GetNumaNodeByVmId", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeCpuRowMapper, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning>> vmNumaNodesPinMap = getAllVmNumaNodePinInfo(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { if (vmNumaNodesPinMap.containsKey(node.getId())) { node.setVdsNumaNodeList(vmNumaNodesPinMap.get(node.getId())); } } return vmNumaNodes; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> getAllVmNumaNodeByVmId(org.ovirt.engine.core.compat.Guid vmId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_id", vmId); java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = getCallsHandler().executeReadList("GetNumaNodeByVmId", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeCpuRowMapper, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.Integer>> vmNumaNodesPinMap = getAllVmNumaNodePinInfo(); vmNumaNodes.stream().filter(( node) -> vmNumaNodesPinMap.containsKey(node.getId())).forEach(( node) -> node.setVdsNumaNodeList(vmNumaNodesPinMap.get(node.getId()))); return vmNumaNodes; }
public static org.ovirt.engine.core.common.businessentities.VmNumaNode createVmNumaNode(int index, java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> vdsNumaNodes) { org.ovirt.engine.core.common.businessentities.VmNumaNode numaNode = org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode(index); final java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning> numaPinning = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VdsNumaNode vdsNumaNode : vdsNumaNodes) { numaPinning.add(new org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning(vdsNumaNode.getId(), true, vdsNumaNode.getIndex())); } numaNode.setVdsNumaNodeList(numaPinning); return numaNode; }	public static org.ovirt.engine.core.common.businessentities.VmNumaNode createVmNumaNode(int index, java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> vdsNumaNodes) { org.ovirt.engine.core.common.businessentities.VmNumaNode numaNode = org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode(index); final java.util.List<java.lang.Integer> numaPinning = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VdsNumaNode vdsNumaNode : vdsNumaNodes) { numaPinning.add(vdsNumaNode.getIndex()); } numaNode.setVdsNumaNodeList(numaPinning); return numaNode; }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createVnodeToPnodeParametersMapper(org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning pinning, org.ovirt.engine.core.compat.Guid vNodeId) { return org.ovirt.engine.core.dao.NumaNodeDaoImpl.getCustomMapSqlParameterSource().addValue("id", org.ovirt.engine.core.compat.Guid.newGuid()).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_id", pinning.getVdsNodeId()).addValue("vds_numa_node_index", pinning.getVdsNodeIndex()).addValue("is_pinned", pinning.isPinned()); }	protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createVnodeToPnodeParametersMapper(java.lang.Integer pinnedIndex, org.ovirt.engine.core.compat.Guid vNodeId) { return org.ovirt.engine.core.dao.NumaNodeDaoImpl.getCustomMapSqlParameterSource().addValue("id", org.ovirt.engine.core.compat.Guid.newGuid()).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_index", pinnedIndex); }
private static java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> createTestVmNumaNodes() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> newVmNodes = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VmNumaNode newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.generateCpuList(0, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(0); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(new org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning(org.ovirt.engine.core.compat.Guid.newGuid(), true, 0)); newVmNodes.add(newVmNumaNode); newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.generateCpuList(4, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(1); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(new org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning(org.ovirt.engine.core.compat.Guid.newGuid(), true, 1)); newVmNodes.add(newVmNumaNode); return newVmNodes; }	private static java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> createTestVmNumaNodes() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> newVmNodes = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VmNumaNode newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.generateCpuList(0, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(0); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(0); newVmNodes.add(newVmNumaNode); newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.generateCpuList(4, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(1); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(1); newVmNodes.add(newVmNumaNode); return newVmNodes; }
private boolean isVmNumaPinned(java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes) { if ((nodes == null) || (nodes.isEmpty())) { return false; } for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : nodes) { for (org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning pinning : vmNumaNode.getVdsNumaNodeList()) { if (pinning.isPinned()) { return true; } } } return false; }	private boolean isVmNumaPinned(java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes) { if ((nodes == null) || (nodes.isEmpty())) { return false; } for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : nodes) { if (!(vmNumaNode.getVdsNumaNodeList().isEmpty())) { return true; } } return false; }
@org.junit.Test public void shouldDetectMissingPinningEntry() { vm.getvNumaNodeList().get(0).getVdsNumaNodeList().get(0).setVdsNodeIndex(null); assertValidationFailure(org.ovirt.engine.core.bll.numa.vm.NumaValidator.checkVmNumaNodesIntegrity(vm, vm.getvNumaNodeList()), EngineMessage.VM_NUMA_NODE_PINNED_INDEX_ERROR); }	@org.junit.Test public void shouldDetectMissingPinningEntry() { vm.getvNumaNodeList().get(0).getVdsNumaNodeList().set(0, null); assertValidationFailure(underTest.checkVmNumaNodesIntegrity(vm, vm.getvNumaNodeList()), EngineMessage.VM_NUMA_NODE_PINNED_INDEX_ERROR); }
public org.ovirt.engine.core.common.businessentities.VmNumaNode toVmNumaNode() { final org.ovirt.engine.core.common.businessentities.VmNumaNode newNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newNode.setIndex(vmNumaNode.getIndex()); newNode.setId(vmNumaNode.getId()); newNode.setMemTotal(vmNumaNode.getMemTotal()); if (isPinned()) { newNode.setVdsNumaNodeList(java.util.Arrays.asList(new org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning(null, pinned, hostNodeIndex))); } return newNode; }	public org.ovirt.engine.core.common.businessentities.VmNumaNode toVmNumaNode() { final org.ovirt.engine.core.common.businessentities.VmNumaNode newNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newNode.setIndex(vmNumaNode.getIndex()); newNode.setId(vmNumaNode.getId()); newNode.setMemTotal(vmNumaNode.getMemTotal()); newNode.setCpuIds(vmNumaNode.getCpuIds()); if (isPinned()) { newNode.setVdsNumaNodeList(java.util.Arrays.asList(hostNodeIndex)); } return newNode; }
private boolean canVmNumaPinnedToVds(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes, org.ovirt.engine.core.common.businessentities.VDS vds) { java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> pNodes = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsNumaNodeDao().getAllVdsNumaNodeByVdsId(vds.getId()); if ((pNodes == null) || (pNodes.isEmpty())) { return false; } java.util.Map<java.lang.Integer, org.ovirt.engine.core.common.businessentities.VdsNumaNode> indexMap = toMap(pNodes); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vNode : nodes) { for (org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning pinning : vNode.getVdsNumaNodeList()) { if (pinning.isPinned()) { if ((vNode.getMemTotal()) > (indexMap.get(pinning.getVdsNodeIndex()).getNumaNodeStatistics().getMemFree())) { return false; } } } } return true; }	private boolean canVmNumaPinnedToVds(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes, org.ovirt.engine.core.common.businessentities.VDS vds) { java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> pNodes = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsNumaNodeDao().getAllVdsNumaNodeByVdsId(vds.getId()); if ((pNodes == null) || (pNodes.isEmpty())) { return false; } java.util.Map<java.lang.Integer, org.ovirt.engine.core.common.businessentities.VdsNumaNode> indexMap = toMap(pNodes); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vNode : nodes) { for (java.lang.Integer pinnedIndex : vNode.getVdsNumaNodeList()) { if ((vNode.getMemTotal()) > (indexMap.get(pinnedIndex).getNumaNodeStatistics().getMemFree())) { return false; } } } return true; }
@org.junit.Test public void testGetAllVmNumaNodeByVmId() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> result = vmNumaNodeDao.getAllVmNumaNodeByVmId(existingVm.getId()); assertNotNull(result); assertEquals(2, result.size()); org.ovirt.engine.core.compat.Guid vmNumaNode1 = new org.ovirt.engine.core.compat.Guid("3c2b81e6-5080-4ad1-86a1-cf513b15b517"); org.ovirt.engine.core.compat.Guid vmNumaNode2 = new org.ovirt.engine.core.compat.Guid("3c2b81e6-5080-4ad1-86a1-cf513b15b518"); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes = new java.util.HashMap<>(2); nodes.put(result.get(0).getId(), result.get(0)); nodes.put(result.get(1).getId(), result.get(1)); assertTrue(nodes.containsKey(vmNumaNode1)); assertTrue(nodes.containsKey(vmNumaNode2)); assertEquals(2, nodes.get(vmNumaNode1).getVdsNumaNodeList().size()); assertEquals(true, nodes.get(vmNumaNode1).getVdsNumaNodeList().get(0).isPinned()); assertEquals(true, nodes.get(vmNumaNode1).getVdsNumaNodeList().get(1).isPinned()); assertEquals(1, nodes.get(vmNumaNode2).getVdsNumaNodeList().size()); assertEquals(false, nodes.get(vmNumaNode2).getVdsNumaNodeList().get(0).isPinned()); assertEquals(0, nodes.get(vmNumaNode2).getVdsNumaNodeList().get(0).getVdsNodeIndex().intValue()); }	@org.junit.Test public void testGetAllVmNumaNodeByVmId() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> result = vmNumaNodeDao.getAllVmNumaNodeByVmId(org.ovirt.engine.core.dao.VmNumaNodeDaoTest.EXISTING_VM_ID); assertNotNull(result); assertEquals(2, result.size()); org.ovirt.engine.core.compat.Guid vmNumaNode1 = new org.ovirt.engine.core.compat.Guid("3c2b81e6-5080-4ad1-86a1-cf513b15b517"); org.ovirt.engine.core.compat.Guid vmNumaNode2 = new org.ovirt.engine.core.compat.Guid("3c2b81e6-5080-4ad1-86a1-cf513b15b518"); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes = new java.util.HashMap<>(2); nodes.put(result.get(0).getId(), result.get(0)); nodes.put(result.get(1).getId(), result.get(1)); assertTrue(nodes.containsKey(vmNumaNode1)); assertTrue(nodes.containsKey(vmNumaNode2)); assertEquals(2, nodes.get(vmNumaNode1).getVdsNumaNodeList().size()); assertTrue(nodes.get(vmNumaNode1).getVdsNumaNodeList().contains(0)); assertTrue(nodes.get(vmNumaNode1).getVdsNumaNodeList().contains(1)); assertEquals(0, nodes.get(vmNumaNode2).getVdsNumaNodeList().size()); }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.getParameters().getVmNumaNodeList(); java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> vdsNumaNodes = org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.getVdsNumaNodes(); java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : vmNumaNodes) { for (org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning pinning : vmNumaNode.getVdsNumaNodeList()) { if (pinning.isPinned()) { int index = pinning.getVdsNodeIndex(); for (org.ovirt.engine.core.common.businessentities.VdsNumaNode vdsNumaNode : vdsNumaNodes) { if ((vdsNumaNode.getIndex()) == index) { pinning.setVdsNodeId(vdsNumaNode.getId()); break; } } } } nodes.add(vmNumaNode); } org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.getVmNumaNodeDao().massUpdateNumaNode(nodes); org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.getParameters().getVmNumaNodeList(); vmNumaNodeDao.massUpdateNumaNode(vmNumaNodes); org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.setSucceeded(true); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> filterVmsInClusterNeedUpdate() { final boolean rngUpdateRequired = VmRngDevice.Source.urandomRandomUpdateRequired(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()); return vmStaticDao.getAllByCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()).stream().filter(( vm) -> ((vm.getOrigin()) != OriginType.EXTERNAL) && (!(vm.isHostedEngine()))).filter(( vm) -> ((vm.getCustomCompatibilityVersion()) == null) || rngUpdateRequired).sorted().collect(java.util.stream.Collectors.toList()); }	protected java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> filterVmsInClusterNeedUpdate() { return vmStaticDao.getAllByCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()).stream().filter(( vm) -> ((vm.getOrigin()) != OriginType.EXTERNAL) && (!(vm.isHostedEngine()))).filter(( vm) -> (vm.getCustomCompatibilityVersion()) == null).sorted().collect(java.util.stream.Collectors.toList()); }
private boolean updateTemplates() { for (org.ovirt.engine.core.common.businessentities.VmTemplate template : templatesLockedForUpdate) { final org.ovirt.engine.core.common.action.UpdateVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.UpdateVmTemplateParameters(template); parameters.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); parameters.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); final org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVmTemplate, parameters); if (!(result.getSucceeded())) { org.ovirt.engine.core.bll.UpdateClusterCommand.getReturnValue().setFault(result.getFault()); return false; } } return true; }	private boolean updateTemplates() { for (org.ovirt.engine.core.common.businessentities.VmTemplate template : templatesLockedForUpdate) { template.setClusterCompatibilityVersion(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()); final org.ovirt.engine.core.common.action.UpdateVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.UpdateVmTemplateParameters(template); parameters.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); parameters.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); final org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVmTemplate, parameters, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { propagateFailure(result); return false; } } return true; }
@java.lang.Override protected void updateRngDevice(org.ovirt.engine.core.compat.Guid templateId) { if (!(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().isUpdateRngDevice())) { rngDeviceUtils.handleUrandomRandomChange(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().getClusterLevelChangeFromVersion(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getCluster().getCompatibilityVersion(), templateId, org.ovirt.engine.core.bll.UpdateVmTemplateCommand.cloneContextAndDetachFromParent(), false); return; } super.updateRngDevice(templateId); }	@java.lang.Override protected void updateRngDevice(org.ovirt.engine.core.compat.Guid templateId) { if (!(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().isUpdateRngDevice())) { final org.ovirt.engine.core.compat.Version newClusterVersion = ((getEffectiveCompatibilityVersion()) != null) ? getEffectiveCompatibilityVersion() : org.ovirt.engine.core.compat.Version.getLast(); rngDeviceUtils.handleUrandomRandomChange(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().getClusterLevelChangeFromVersion(), newClusterVersion, templateId, org.ovirt.engine.core.bll.UpdateVmTemplateCommand.cloneContextAndDetachFromParent(), false); return; } super.updateRngDevice(templateId); }
@java.lang.Override protected void init() { org.ovirt.engine.core.bll.UpdateClusterCommand.updateMigrateOnError(); oldCluster = clusterDao.get(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()); if (((oldCluster) != null) && (!(java.util.Objects.equals(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion())))) { vmsLockedForUpdate = filterVmsInClusterNeedUpdate(); } templatesLockedForUpdate = filterTemplatesInClusterNeedUpdate(); }	@java.lang.Override protected void init() { org.ovirt.engine.core.bll.UpdateClusterCommand.updateMigrateOnError(); oldCluster = clusterDao.get(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()); if (((oldCluster) != null) && (!(java.util.Objects.equals(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion())))) { vmsLockedForUpdate = filterVmsInClusterNeedUpdate(); templatesLockedForUpdate = filterTemplatesInClusterNeedUpdate(); } }
public void handleUrandomRandomChange(org.ovirt.engine.core.compat.Version oldClusterVersion, org.ovirt.engine.core.compat.Version newClusterVersion, org.ovirt.engine.core.compat.Guid vmBaseId, org.ovirt.engine.core.bll.context.CommandContext commandContext, boolean isVm) { if (oldClusterVersion == null) { return; } final boolean updatePotentiallyRequired = VmRngDevice.Source.urandomRandomUpdateRequired(oldClusterVersion, newClusterVersion); if (!updatePotentiallyRequired) { return; } final java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> rngDevices = backend.runInternalQuery(VdcQueryType.GetRngDevice, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBaseId), commandContext.getEngineContext()).getReturnValue(); if (rngDevices.isEmpty()) { return; } final org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = rngDevices.get(0); if (!(java.util.Arrays.asList(VmRngDevice.Source.RANDOM, VmRngDevice.Source.URANDOM).contains(rngDevice.getSource()))) { return; } rngDevice.setSource(VmRngDevice.Source.getUrandomOrRandomFor(newClusterVersion)); final org.ovirt.engine.core.common.action.RngDeviceParameters params = new org.ovirt.engine.core.common.action.RngDeviceParameters(rngDevice, isVm); backend.runInternalAction(VdcActionType.UpdateRngDevice, params, commandContext); }	public void handleUrandomRandomChange(org.ovirt.engine.core.compat.Version oldClusterVersion, org.ovirt.engine.core.compat.Version newClusterVersion, org.ovirt.engine.core.compat.Guid vmBaseId, org.ovirt.engine.core.bll.context.CommandContext commandContext, boolean isVm) { if (oldClusterVersion == null) { return; } final boolean updatePotentiallyRequired = VmRngDevice.Source.urandomRandomUpdateRequired(oldClusterVersion, newClusterVersion); if (!updatePotentiallyRequired) { return; } final java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> rngDevices = backend.runInternalQuery(VdcQueryType.GetRngDevice, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBaseId), commandContext.getEngineContext()).getReturnValue(); if (rngDevices.isEmpty()) { return; } final org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = rngDevices.get(0); final org.ovirt.engine.core.common.businessentities.VmRngDevice.Source oldSource = rngDevice.getSource(); rngDevice.updateSourceByVersion(newClusterVersion); if (rngDevice.getSource().equals(oldSource)) { return; } final org.ovirt.engine.core.common.action.RngDeviceParameters params = new org.ovirt.engine.core.common.action.RngDeviceParameters(rngDevice, isVm); backend.runInternalAction(VdcActionType.UpdateRngDevice, params, commandContext); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> filterTemplatesInClusterNeedUpdate() { if (!(VmRngDevice.Source.urandomRandomUpdateRequired(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()))) { return java.util.Collections.emptyList(); } return vmTemplateDao.getAllForCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()); }	protected java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> filterTemplatesInClusterNeedUpdate() { if (!(VmRngDevice.Source.urandomRandomUpdateRequired(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()))) { return java.util.Collections.emptyList(); } return vmTemplateDao.getAllForCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()).stream().filter(( template) -> (template.getCustomCompatibilityVersion()) == null).sorted().collect(java.util.stream.Collectors.toList()); }
public void onSparsify(final org.ovirt.engine.ui.uicommonweb.ICommandTarget target) { java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameterList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disksToSparsify) { org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = new org.ovirt.engine.core.common.action.ImagesActionsParametersBase(disk.getId()); parameterList.add(parameters); } startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.SparsifyImage, parameterList, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { stopProgress(); target.executeCommand(cancelCommand); } }, this); }	public void onSparsify(final org.ovirt.engine.ui.uicommonweb.ICommandTarget target) { java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameterList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disksToSparsify) { org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = new org.ovirt.engine.core.common.action.StorageJobCommandParameters(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)).getImageId()); parameterList.add(parameters); } startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.SparsifyImage, parameterList, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { stopProgress(); target.executeCommand(cancelCommand); } }, this); }
private boolean isSparsifyCommandAvailable() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.Disk>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { if ((isDiskLocked(disk)) || ((!(isVmDown())) && (disk.getPlugged()))) { return false; } } return true; }	private boolean isSparsifyCommandAvailable() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.Disk>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { if ((isDiskLocked(disk)) || ((!(isVmDown())) && (disk.getPlugged()))) { return false; } } return true; }
public void initialize(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disksToSparsify, org.ovirt.engine.ui.uicommonweb.ICommandTarget target) { this.vm = vm; this.disksToSparsify = disksToSparsify; org.ovirt.engine.ui.uicompat.UIConstants uiConstants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants(); setTitle(uiConstants.sparsifyDisksTitle()); setMessage(uiConstants.sparsifyConfirmationPopupMessage()); setHelpTag(HelpTag.sparsify_disk); setHashName("sparsify_disk"); getLatch().setEntity(false); java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> items = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disksToSparsify) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = new org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel(); diskModel.setDisk(disk); diskModel.setVm(vm); items.add(diskModel); if ((disk.getNumberOfVms()) > 1) { getLatch().setIsChangeable(false); } } setItems(items); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand(org.ovirt.engine.ui.uicommonweb.models.vms.SparsifyDiskModel.ON_SPARSIFY, target); getCommands().add(okCommand); cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand(org.ovirt.engine.ui.uicommonweb.models.vms.SparsifyDiskModel.CANCEL_SPARSIFY, target); getCommands().add(cancelCommand); }	public void initialize(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disksToSparsify, org.ovirt.engine.ui.uicommonweb.ICommandTarget target) { this.disksToSparsify = disksToSparsify; org.ovirt.engine.ui.uicompat.UIConstants uiConstants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants(); setTitle(uiConstants.sparsifyDisksTitle()); setMessage(uiConstants.sparsifyConfirmationPopupMessage()); setHelpTag(HelpTag.sparsify_disk); setHashName("sparsify_disk"); java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> items = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disksToSparsify) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = new org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel(); diskModel.setDisk(disk); diskModel.setVm(vm); items.add(diskModel); } setItems(items); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand(org.ovirt.engine.ui.uicommonweb.models.vms.SparsifyDiskModel.ON_SPARSIFY, target); getCommands().add(okCommand); cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand(org.ovirt.engine.ui.uicommonweb.models.vms.SparsifyDiskModel.CANCEL_SPARSIFY, target); getCommands().add(cancelCommand); }
@org.junit.Test public void testSave() { org.ovirt.engine.core.common.businessentities.storage.DiskImage newImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); newImage.setImageId(org.ovirt.engine.core.compat.Guid.newGuid()); newImage.setVolumeFormat(VolumeFormat.COW); newImage.setQcowComapt(QcowCompat.QCOW2_V3); newImage.setVolumeType(VolumeType.Sparse); newImage.setActive(true); newImage.setImageTemplateId(org.ovirt.engine.core.dao.DiskImageDynamicDaoTest.EXISTING_IMAGE_DISK_TEMPLATE); newImage.setId(org.ovirt.engine.core.compat.Guid.newGuid()); imageDao.save(newImage.getImage()); diskDao.save(newImage); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic dynamic = createDiskImageDynamic(newImage.getImageId()); dao.save(createDiskImageDynamic(newImage.getImageId())); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic result = dao.get(dynamic.getId()); assertNotNull(result); assertEquals(dynamic, result); }	@org.junit.Test public void testSave() { org.ovirt.engine.core.common.businessentities.storage.DiskImage newImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); newImage.setImageId(org.ovirt.engine.core.compat.Guid.newGuid()); newImage.setVolumeFormat(VolumeFormat.COW); newImage.setVolumeType(VolumeType.Sparse); newImage.setActive(true); newImage.setImageTemplateId(org.ovirt.engine.core.dao.DiskImageDynamicDaoTest.EXISTING_IMAGE_DISK_TEMPLATE); newImage.setId(org.ovirt.engine.core.compat.Guid.newGuid()); imageDao.save(newImage.getImage()); diskDao.save(newImage); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic dynamic = createDiskImageDynamic(newImage.getImageId()); dao.save(createDiskImageDynamic(newImage.getImageId())); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic result = dao.get(dynamic.getId()); assertNotNull(result); assertEquals(dynamic, result); }
public void setQcowComapt(org.ovirt.engine.core.common.businessentities.storage.QcowCompat qcowComapt) { getImage().setQcowCompat(qcowComapt); }	public void setQcowCompat(org.ovirt.engine.core.common.businessentities.storage.QcowCompat qcowCompat) { getImage().setQcowCompat(qcowCompat); }
@java.lang.Override public void saveUnregisteredDisk(org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk disk) { getCallsHandler().executeModification("InsertUnregisteredDisk", getCustomMapSqlParameterSource().addValue("disk_id", disk.getDiskImage().getId()).addValue("image_id", disk.getDiskImage().getImageId()).addValue("disk_alias", disk.getDiskImage().getDiskAlias()).addValue("disk_description", disk.getDiskImage().getDiskDescription()).addValue("creation_date", disk.getDiskImage().getCreationDate()).addValue("last_modified", disk.getDiskImage().getLastModified()).addValue("volume_type", disk.getDiskImage().getVolumeType()).addValue("volume_format", disk.getDiskImage().getVolumeFormat()).addValue("qcow_compat", disk.getDiskImage().getQcowCompat()).addValue("actual_size", disk.getDiskImage().getActualSize()).addValue("size", disk.getDiskImage().getSize()).addValue("storage_domain_id", disk.getDiskImage().getStorageIds().get(0))); for (org.ovirt.engine.core.common.businessentities.VmBase vmBase : disk.getVms()) { getCallsHandler().executeModification("InsertUnregisteredDisksToVms", getCustomMapSqlParameterSource().addValue("disk_id", disk.getDiskImage().getId()).addValue("entity_id", vmBase.getId()).addValue("entity_name", vmBase.getName()).addValue("storage_domain_id", disk.getDiskImage().getStorageIds().get(0))); } }	@java.lang.Override public void saveUnregisteredDisk(org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk disk) { getCallsHandler().executeModification("InsertUnregisteredDisk", getCustomMapSqlParameterSource().addValue("disk_id", disk.getDiskImage().getId()).addValue("image_id", disk.getDiskImage().getImageId()).addValue("disk_alias", disk.getDiskImage().getDiskAlias()).addValue("disk_description", disk.getDiskImage().getDiskDescription()).addValue("creation_date", disk.getDiskImage().getCreationDate()).addValue("last_modified", disk.getDiskImage().getLastModified()).addValue("volume_type", disk.getDiskImage().getVolumeType()).addValue("volume_format", disk.getDiskImage().getVolumeFormat()).addValue("actual_size", disk.getDiskImage().getActualSize()).addValue("size", disk.getDiskImage().getSize()).addValue("storage_domain_id", disk.getDiskImage().getStorageIds().get(0))); for (org.ovirt.engine.core.common.businessentities.VmBase vmBase : disk.getVms()) { getCallsHandler().executeModification("InsertUnregisteredDisksToVms", getCustomMapSqlParameterSource().addValue("disk_id", disk.getDiskImage().getId()).addValue("entity_id", vmBase.getId()).addValue("entity_name", vmBase.getName()).addValue("storage_domain_id", disk.getDiskImage().getStorageIds().get(0))); } }
@javax.ws.rs.Path("{action: (activate|approve|commitnetconfig|deactivate|enrollcertificate|fence|forceselectspm|install|iscsidiscover|iscsilogin|refresh|setupnetworks|unregisteredstoragedomainsdiscover|upgrade|upgradecheck)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }	@javax.ws.rs.Path("{action: (activate|approve|commitnetconfig|deactivate|enrollcertificate|fence|forceselectspm|install|iscsidiscover|iscsilogin|refresh|setupnetworks|unregisteredstoragedomainsdiscover|upgrade)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
public java.lang.String exportVm(org.ovirt.engine.core.common.businessentities.VM vm, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, org.ovirt.engine.core.compat.Version version) { org.ovirt.engine.core.utils.ovf.OvfVmWriter vmWriter; if (vm.isHostedEngine()) { vmWriter = new org.ovirt.engine.core.utils.ovf.HostedEngineOvfWriter(vm, images, version, clusterDao.get(vm.getClusterId())); } else { vmWriter = new org.ovirt.engine.core.utils.ovf.OvfVmWriter(vm, images, version); } return vmWriter.build().getStringRepresentation(); }	public java.lang.String exportVm(org.ovirt.engine.core.common.businessentities.VM vm, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, org.ovirt.engine.core.compat.Version version) { final org.ovirt.engine.core.utils.ovf.OvfVmWriter vmWriter; if (vm.isHostedEngine()) { org.ovirt.engine.core.common.businessentities.Cluster cluster = clusterDao.get(vm.getClusterId()); java.lang.String cpuId = cpuFlagsManagerHandler.getCpuId(cluster.getCpuName(), cluster.getCompatibilityVersion()); vmWriter = new org.ovirt.engine.core.utils.ovf.HostedEngineOvfWriter(vm, images, version, cluster.getEmulatedMachine(), cpuId); } else { vmWriter = new org.ovirt.engine.core.utils.ovf.OvfVmWriter(vm, images, version); } return vmWriter.build().getStringRepresentation(); }
@java.lang.Override protected void writeGeneralData() { super.writeGeneralData(); _writer.writeStartElement(OvfProperties.CLUSTER_EMULATED_MACHINE); _writer.writeRaw(cluster.getEmulatedMachine()); _writer.writeEndElement(); _writer.writeStartElement(OvfProperties.CLUSTER_CPU_NAME); _writer.writeRaw(cluster.getCpuName()); _writer.writeEndElement(); }	@java.lang.Override protected void writeCustomCpuName() { _writer.writeElement(OvfProperties.CUSTOM_CPU_NAME, cpuId); }
protected static org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, boolean shouldPrepareAndTeardown) { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldPrepareAndTeardown) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } try { qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.debug("Unable to get qemu image info from storage", e); } finally { if (shouldPrepareAndTeardown) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } } return qemuImageInfo; }	protected static org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, boolean shouldPrepareAndTeardown) { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldPrepareAndTeardown) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } try { qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.error("Unable to get qemu image info from storage", e); } finally { if (shouldPrepareAndTeardown) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } } return qemuImageInfo; }
public static java.util.Map<java.lang.String, java.lang.Object> buildVmNumatuneSetting(org.ovirt.engine.core.common.businessentities.NumaTuneMode numaTuneMode, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes, java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> vdsNumaNodes) { java.util.Map<java.lang.String, java.lang.Object> createNumaTune = new java.util.HashMap<>(); java.util.List<java.util.Map<java.lang.String, java.lang.String>> memNodeList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { if (node.getVdsNumaNodeList().isEmpty()) { continue; } java.util.Map<java.lang.String, java.lang.String> memNode = new java.util.HashMap<>(); memNode.put(VdsProperties.NUMA_TUNE_VM_NODE_INDEX, java.lang.String.valueOf(node.getIndex())); memNode.put(VdsProperties.NUMA_TUNE_NODESET, org.ovirt.engine.core.utils.NumaUtils.buildStringFromListForNuma(node.getVdsNumaNodeList())); memNodeList.add(memNode); } if (memNodeList.isEmpty()) { return java.util.Collections.emptyMap(); } createNumaTune.put(VdsProperties.NUMA_TUNE_MEMNODES, memNodeList); createNumaTune.put(VdsProperties.NUMA_TUNE_MODE, numaTuneMode.getValue()); createNumaTune.put(VdsProperties.NUMA_TUNE_NODESET, org.ovirt.engine.core.utils.NumaUtils.buildStringFromListForNuma(vdsNumaNodes.stream().map(VdsNumaNode::getIndex).collect(java.util.stream.Collectors.toList()))); return createNumaTune; }	public static java.util.Map<java.lang.String, java.lang.Object> buildVmNumatuneSetting(org.ovirt.engine.core.common.businessentities.NumaTuneMode numaTuneMode, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes, java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> vdsNumaNodes) { java.util.List<java.util.Map<java.lang.String, java.lang.String>> memNodeList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { if (node.getVdsNumaNodeList().isEmpty()) { continue; } java.util.Map<java.lang.String, java.lang.String> memNode = new java.util.HashMap<>(); memNode.put(VdsProperties.NUMA_TUNE_VM_NODE_INDEX, java.lang.String.valueOf(node.getIndex())); memNode.put(VdsProperties.NUMA_TUNE_NODESET, org.ovirt.engine.core.utils.NumaUtils.buildStringFromListForNuma(node.getVdsNumaNodeList())); memNodeList.add(memNode); } if (memNodeList.isEmpty()) { return java.util.Collections.emptyMap(); } java.util.Map<java.lang.String, java.lang.Object> createNumaTune = new java.util.HashMap<>(); createNumaTune.put(VdsProperties.NUMA_TUNE_MEMNODES, memNodeList); createNumaTune.put(VdsProperties.NUMA_TUNE_MODE, numaTuneMode.getValue()); createNumaTune.put(VdsProperties.NUMA_TUNE_NODESET, org.ovirt.engine.core.utils.NumaUtils.buildStringFromListForNuma(vdsNumaNodes.stream().map(VdsNumaNode::getIndex).collect(java.util.stream.Collectors.toList()))); return createNumaTune; }
@org.junit.Test public void testBuildVmNumatuneSetting() throws java.lang.Exception { java.util.Map<java.lang.String, java.lang.Object> numaTune = org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactory.buildVmNumatuneSetting(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.numaTuneMode, org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes, org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vdsNumaNodes); assertEquals(2, numaTune.size()); assertTrue(numaTune.containsKey(VdsProperties.NUMA_TUNE_MODE)); assertEquals(NumaTuneMode.INTERLEAVE.getValue(), numaTune.get(VdsProperties.NUMA_TUNE_MODE)); assertTrue(numaTune.containsKey(VdsProperties.NUMA_TUNE_NODESET)); assertEquals("0,1", numaTune.get(VdsProperties.NUMA_TUNE_NODESET)); assertTrue(numaTune.containsKey(VdsProperties.NUMA_TUNE_MEMNODES)); java.util.List<java.util.Map<java.lang.String, java.lang.String>> memNodes = ((java.util.List<java.util.Map<java.lang.String, java.lang.String>>) (numaTune.get(VdsProperties.NUMA_TUNE_MEMNODES))); assertEquals("0", memNodes.get(0).get(VdsProperties.NUMA_TUNE_VM_NODE_INDEX)); assertEquals("0", memNodes.get(0).get(VdsProperties.NUMA_TUNE_NODESET)); assertEquals("1", memNodes.get(1).get(VdsProperties.NUMA_TUNE_VM_NODE_INDEX)); assertEquals("1", memNodes.get(1).get(VdsProperties.NUMA_TUNE_NODESET)); }	@org.junit.Test public void testBuildVmNumatuneSetting() throws java.lang.Exception { java.util.Map<java.lang.String, java.lang.Object> numaTune = org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactory.buildVmNumatuneSetting(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.numaTuneMode, org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes, org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vdsNumaNodes); assertEquals(3, numaTune.size()); assertTrue(numaTune.containsKey(VdsProperties.NUMA_TUNE_MODE)); assertEquals(NumaTuneMode.INTERLEAVE.getValue(), numaTune.get(VdsProperties.NUMA_TUNE_MODE)); assertTrue(numaTune.containsKey(VdsProperties.NUMA_TUNE_NODESET)); assertEquals("0,1", numaTune.get(VdsProperties.NUMA_TUNE_NODESET)); assertTrue(numaTune.containsKey(VdsProperties.NUMA_TUNE_MEMNODES)); java.util.List<java.util.Map<java.lang.String, java.lang.String>> memNodes = ((java.util.List<java.util.Map<java.lang.String, java.lang.String>>) (numaTune.get(VdsProperties.NUMA_TUNE_MEMNODES))); assertEquals("0", memNodes.get(0).get(VdsProperties.NUMA_TUNE_VM_NODE_INDEX)); assertEquals("0", memNodes.get(0).get(VdsProperties.NUMA_TUNE_NODESET)); assertEquals("1", memNodes.get(1).get(VdsProperties.NUMA_TUNE_VM_NODE_INDEX)); assertEquals("1", memNodes.get(1).get(VdsProperties.NUMA_TUNE_NODESET)); }
@org.junit.Test public void canSetNumaPinning() { newNumaNodes = java.util.Collections.singletonList(createVmNumaNode(1, vdsNumaNodes)); final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }	@org.junit.Test public void canSetNumaPinning() { paramNumaNodes.clear(); paramNumaNodes.add(createVmNumaNode(1, vdsNumaNodes)); mockCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(paramNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromParams() { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }	@org.junit.Test public void canSetNumaConfigurationWithVmFromParams() { mockCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(paramNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createVnodeToPnodeParametersMapper(java.lang.Integer pinnedIndex, org.ovirt.engine.core.compat.Guid vNodeId) { return getCustomMapSqlParameterSource().addValue("id", org.ovirt.engine.core.compat.Guid.newGuid()).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_index", pinnedIndex); }	private org.springframework.jdbc.core.namedparam.MapSqlParameterSource createVnodeToPnodeParametersMapper(java.lang.Integer pinnedIndex, org.ovirt.engine.core.compat.Guid vNodeId) { return getCustomMapSqlParameterSource().addValue("id", org.ovirt.engine.core.compat.Guid.newGuid()).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_index", pinnedIndex); }
@org.junit.Test public void canSetNumaPinning() { newNumaNodes = java.util.Collections.singletonList(createVmNumaNode(1, vdsNumaNodes)); final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }	@org.junit.Test public void canSetNumaPinning() { paramNumaNodes.clear(); paramNumaNodes.add(createVmNumaNode(1, vdsNumaNodes)); mockCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(paramNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromDb() { final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromDb(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }	@org.junit.Test public void canSetNumaConfigurationWithVmFromDb() { mockCommandWithVmFromDb(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(paramNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
@java.lang.Override protected void executeCommand() { if (!(oldNumaNodeIds.isEmpty())) { org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVmNumaNodeDao().massRemoveNumaNodeByNumaNodeId(oldNumaNodeIds); } java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getParameters().getVmNumaNodeList(); vmNumaNodes.stream().forEach(( node) -> node.setId(org.ovirt.engine.core.compat.Guid.newGuid())); org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVmNumaNodeDao().massSaveNumaNode(vmNumaNodes, org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVm().getId()); org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { if (!(oldNumaNodeIds.isEmpty())) { vmNumaNodeDao.massRemoveNumaNodeByNumaNodeId(oldNumaNodeIds); } java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getParameters().getVmNumaNodeList(); vmNumaNodes.stream().forEach(( node) -> node.setId(org.ovirt.engine.core.compat.Guid.newGuid())); vmNumaNodeDao.massSaveNumaNode(vmNumaNodes, org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVm().getId()); org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getParameters().getVmNumaNodeList(); vmNumaNodes.stream().forEach(( node) -> node.setId(org.ovirt.engine.core.compat.Guid.newGuid())); org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getVmNumaNodeDao().massSaveNumaNode(vmNumaNodes, org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getVm().getId()); setActionReturnValue(vmNumaNodes.get(0).getId()); org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getParameters().getVmNumaNodeList(); vmNumaNodes.stream().forEach(( node) -> node.setId(org.ovirt.engine.core.compat.Guid.newGuid())); vmNumaNodeDao.massSaveNumaNode(vmNumaNodes, org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getVm().getId()); setActionReturnValue(vmNumaNodes.get(0).getId()); org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.setSucceeded(true); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromParams() { final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }	@org.junit.Test public void canSetNumaConfigurationWithVmFromParams() { mockCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(paramNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
private void populateVMNUMAInfo(final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode>> numaNodes = getVmNumaNodeDao().getVmNumaNodeInfoByClusterId(org.ovirt.engine.core.bll.ClusterOperationCommandBase.getClusterId()); for (final org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (numaNodes.containsKey(vm.getId())) { vm.setvNumaNodeList(numaNodes.get(vm.getId())); } } }	private void populateVMNUMAInfo(final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode>> numaNodes = vmNumaNodeDao.getVmNumaNodeInfoByClusterId(org.ovirt.engine.core.bll.ClusterOperationCommandBase.getClusterId()); for (final org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (numaNodes.containsKey(vm.getId())) { vm.setvNumaNodeList(numaNodes.get(vm.getId())); } } }
@org.junit.Test public void canSetNumaConfigurationWithVmFromDb() { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromDb(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }	@org.junit.Test public void canSetNumaConfigurationWithVmFromDb() { mockCommandWithVmFromDb(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(paramNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
protected void updateRngDevice(org.ovirt.engine.core.compat.Guid templateId) { if (!(getModel().getIsRngEnabled().getIsChangable())) { return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetRngDevice, new org.ovirt.engine.core.common.queries.IdQueryParameters(templateId), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { final org.ovirt.engine.core.compat.Version clusterVersion = getModel().getSelectedCluster().getCompatibilityVersion(); java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> devs = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(devs.isEmpty()))); final org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = (devs.isEmpty()) ? new org.ovirt.engine.core.common.businessentities.VmRngDevice() : devs.get(0); rngDevice.setSource(VmRngDevice.Source.getValidForVersion(rngDevice.getSource(), clusterVersion)); getModel().setRngDevice(rngDevice); } })); }	protected void updateRngDevice(org.ovirt.engine.core.compat.Guid templateId) { if (!(getModel().getIsRngEnabled().getIsChangable())) { return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetRngDevice, new org.ovirt.engine.core.common.queries.IdQueryParameters(templateId), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> devs = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(devs.isEmpty()))); final org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = (devs.isEmpty()) ? new org.ovirt.engine.core.common.businessentities.VmRngDevice() : devs.get(0); rngDevice.updateSourceByVersion(getModel().getCompatibilityVersion()); getModel().setRngDevice(rngDevice); } })); }
@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { final org.ovirt.engine.core.compat.Version clusterVersion = getModel().getSelectedCluster().getCompatibilityVersion(); java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> devs = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(devs.isEmpty()))); final org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = (devs.isEmpty()) ? new org.ovirt.engine.core.common.businessentities.VmRngDevice() : devs.get(0); rngDevice.setSource(VmRngDevice.Source.getValidForVersion(rngDevice.getSource(), clusterVersion)); getModel().setRngDevice(rngDevice); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> devs = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(devs.isEmpty()))); final org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = (devs.isEmpty()) ? new org.ovirt.engine.core.common.businessentities.VmRngDevice() : devs.get(0); rngDevice.updateSourceByVersion(getModel().getCompatibilityVersion()); getModel().setRngDevice(rngDevice); }
@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { deactivate(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { final org.ovirt.engine.core.compat.Version clusterVersion = getModel().getSelectedCluster().getCompatibilityVersion(); org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); rngDevice.setSource(VmRngDevice.Source.getValidForVersion(rngDevice.getSource(), clusterVersion)); getModel().setRngDevice(rngDevice); } activate(); updateVirtioScsi(vmBase); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { deactivate(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); rngDevice.updateSourceByVersion(getModel().getCompatibilityVersion()); getModel().setRngDevice(rngDevice); } activate(); updateVirtioScsi(vmBase); }
private boolean isPassDiscardSupported() { return validate(getDiskValidator(disk).isPassDiscardSupported(getDiskVmElement(), HotPlugDiskToVmCommand.getStorageDomain())); }	private boolean isPassDiscardSupported() { org.ovirt.engine.core.compat.Guid storageDomainId = ((getDisk().getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) ? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getStorageIds().get(0) : null; return validate(getDiskVmElementValidator(getDisk(), getDiskVmElement()).isPassDiscardSupported(storageDomainId)); }
@org.junit.Test public void testPassDirectLunSupport() { testPassDiscardSupport(new org.ovirt.engine.core.common.businessentities.storage.LunDisk(), null); }	@org.junit.Test public void testDiskAttachedToVMFailWithCorrectReplacements() { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(); vm.setName("MyVm"); disk.setDiskAlias("MyDisk"); when(vmDao.getVmsListForDisk(any(org.ovirt.engine.core.compat.Guid.class), anyBoolean())).thenReturn(java.util.Collections.emptyList()); java.lang.String[] expectedReplacements = new java.lang.String[]{ org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(DiskValidator.DISK_NAME_VARIABLE, disk.getDiskAlias()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(DiskValidator.VM_NAME_VARIABLE, vm.getName()) }; assertThat(validator.isDiskAttachedToVm(vm), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_ATTACHED_TO_VM, expectedReplacements)); }
private void applyUserChanges(org.ovirt.engine.core.common.businessentities.storage.Disk diskToUpdate, org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dveToUpdate) { updateSnapshotIdOnShareableChange(diskToUpdate, getNewDisk()); diskToUpdate.setPropagateErrors(getNewDisk().getPropagateErrors()); diskToUpdate.setWipeAfterDelete(getNewDisk().isWipeAfterDelete()); diskToUpdate.setDiskAlias(getNewDisk().getDiskAlias()); diskToUpdate.setDiskDescription(getNewDisk().getDiskDescription()); diskToUpdate.setShareable(getNewDisk().isShareable()); diskToUpdate.setReadOnly(getNewDisk().getReadOnly()); diskToUpdate.setSgio(getNewDisk().getSgio()); dveToUpdate.setBoot(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isBoot()); dveToUpdate.setDiskInterface(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().getDiskInterface()); dveToUpdate.setPassDiscard(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isPassDiscard()); }	private void applyUserChanges(org.ovirt.engine.core.common.businessentities.storage.Disk diskToUpdate, org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dveToUpdate) { updateSnapshotIdOnShareableChange(diskToUpdate, getNewDisk()); diskToUpdate.setPropagateErrors(getNewDisk().getPropagateErrors()); diskToUpdate.setWipeAfterDelete(getNewDisk().isWipeAfterDelete()); diskToUpdate.setDiskAlias(getNewDisk().getDiskAlias()); diskToUpdate.setDiskDescription(getNewDisk().getDiskDescription()); diskToUpdate.setShareable(getNewDisk().isShareable()); diskToUpdate.setReadOnly(getNewDisk().getReadOnly()); diskToUpdate.setSgio(getNewDisk().getSgio()); dveToUpdate.setBoot(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isBoot()); dveToUpdate.setDiskInterface(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().getDiskInterface()); dveToUpdate.setPassDiscard(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isPassDiscard()); dveToUpdate.setUsingScsiReservation(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isUsingScsiReservation()); }
@org.junit.Test public void testValidateFailsForPassDiscard() { initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid()); mockVm(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)).when(diskValidator).isPassDiscardSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); doReturn(diskValidator).when(command).getDiskValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }	@org.junit.Test public void testValidateFailsForPassDiscard() { initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid()); mockVm(); org.ovirt.engine.core.common.businessentities.StoragePool storagePool = new org.ovirt.engine.core.common.businessentities.StoragePool(); storagePool.setCompatibilityVersion(Version.v4_1); command.setStoragePool(storagePool); command.getParameters().getDiskVmElement().setPassDiscard(true); doReturn(diskVmElementValidator).when(command).getDiskVmElementValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class)); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED_BY_DISK_INTERFACE)).when(diskVmElementValidator).isPassDiscardSupported(any(org.ovirt.engine.core.compat.Guid.class)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED_BY_DISK_INTERFACE); }
java.lang.String ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED();	java.lang.String ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED_BY_DC_VERSION();
@org.junit.Test public void validateDiscardSucceeded() { org.ovirt.engine.core.common.action.VmDiskOperationParameterBase parameters = createParameters(); initializeCommand(parameters); when(diskDao.get(diskImageGuid)).thenReturn(parameters.getDiskInfo()); when(diskValidator.isPassDiscardSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(ValidationResult.VALID); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(command); }	@org.junit.Test public void testNonExistingQuota() { org.ovirt.engine.core.dao.QuotaDao quotaDao = mock(org.ovirt.engine.core.dao.QuotaDao.class); when(quotaDao.getById(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); when(diskDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(createDiskImage()); ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (command.getParameters().getDiskInfo())).setQuotaId(org.ovirt.engine.core.compat.Guid.newGuid()); initializeCommand(); doCallRealMethod().when(command).validateQuota(); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); }
@org.junit.Test public void validateFailedDiscardNotSupported() { mockVmStatusUp(); mockInterfaceList(); createVirtIODisk(); initStorageDomain(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)).when(diskValidator).isPassDiscardSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }	@org.junit.Test public void validateFailedDiscardNotSupported() { mockVmStatusUp(); mockInterfaceList(); createVirtIODisk(); initStorageDomain(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED_BY_DISK_INTERFACE)).when(diskVmElementValidator).isPassDiscardSupported(any(org.ovirt.engine.core.compat.Guid.class)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED_BY_DISK_INTERFACE); }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass()) != (o.getClass()))) { return false; } org.ovirt.engine.core.common.businessentities.storage.DiskVmElement that = ((org.ovirt.engine.core.common.businessentities.storage.DiskVmElement) (o)); return ((((boot) == (that.boot)) && ((passDiscard) == (that.passDiscard))) && ((diskInterface) == (that.diskInterface))) && ((id) != null) ? id.equals(that.id) : (that.id) == null; }	@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass()) != (o.getClass()))) { return false; } org.ovirt.engine.core.common.businessentities.storage.DiskVmElement that = ((org.ovirt.engine.core.common.businessentities.storage.DiskVmElement) (o)); return (((((boot) == (that.boot)) && ((passDiscard) == (that.passDiscard))) && ((diskInterface) == (that.diskInterface))) && ((usingScsiReservation) == (that.usingScsiReservation))) && ((id) != null) ? id.equals(that.id) : (that.id) == null; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, boot, passDiscard, diskInterface); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, boot, passDiscard, diskInterface, usingScsiReservation); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement entity) { return createIdParameterMapper(entity.getId()).addValue("is_boot", entity.isBoot()).addValue("pass_discard", entity.isPassDiscard()).addValue("disk_interface", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getDiskInterface())); }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement entity) { return createIdParameterMapper(entity.getId()).addValue("is_boot", entity.isBoot()).addValue("pass_discard", entity.isPassDiscard()).addValue("disk_interface", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getDiskInterface())).addValue("is_using_scsi_reservation", entity.isUsingScsiReservation()); }
@org.junit.Test public void validateDiscardFailed() { org.ovirt.engine.core.common.action.VmDiskOperationParameterBase parameters = createParameters(); initializeCommand(parameters); when(diskDao.get(diskImageGuid)).thenReturn(parameters.getDiskInfo()); when(diskValidator.isPassDiscardSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }	@org.junit.Test public void testExistingQuota() { org.ovirt.engine.core.common.businessentities.Quota quota = new org.ovirt.engine.core.common.businessentities.Quota(); quota.setId(org.ovirt.engine.core.compat.Guid.newGuid()); when(quotaDao.getById(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); when(quotaDao.getById(quota.getId())).thenReturn(quota); when(diskDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(createDiskImage()); ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (command.getParameters().getDiskInfo())).setQuotaId(quota.getId()); initializeCommand(); org.ovirt.engine.core.common.businessentities.StoragePool pool = mockStoragePool(); command.setStoragePoolId(pool.getId()); quota.setStoragePoolId(pool.getId()); doCallRealMethod().when(command).validateQuota(); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(command); }
@org.junit.Test public void testPassDiscardDiskImageSupport() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain(); storageDomain.setStorageType(StorageType.NFS); testPassDiscardSupport(diskImage, storageDomain); storageDomain.setStorageType(StorageType.ISCSI); testPassDiscardSupport(diskImage, storageDomain); }	@org.junit.Test public void testDiskAttachedToAnyVMFails() { org.ovirt.engine.core.common.businessentities.VM vm1 = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(); org.ovirt.engine.core.common.businessentities.VM vm2 = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(); vm1.setName("Vm1"); vm2.setName("Vm2"); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = java.util.Arrays.asList(vm1, vm2); when(vmDao.getVmsListForDisk(any(org.ovirt.engine.core.compat.Guid.class), anyBoolean())).thenReturn(vmList); java.lang.String[] expectedReplacements = new java.lang.String[]{ org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(DiskValidator.DISK_NAME_VARIABLE, disk.getDiskAlias()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(DiskValidator.VM_LIST, "Vm1,Vm2") }; assertThat(validator.isDiskAttachedToAnyVm(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_ATTACHED_TO_VMS, expectedReplacements)); }
@org.junit.Test public void testValidateFailsWhenDiscardIsNotSupported() { when(diskValidator.isPassDiscardSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }	@org.junit.Test public void testValidateFailsWhenDiscardIsNotSupported() { when(diskVmElementValidator.isPassDiscardSupported(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED_BY_DISK_INTERFACE)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED_BY_DISK_INTERFACE); }
private void mockDiskValidator() { doReturn(diskValidator).when(command).getDiskValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class)); when(diskValidator.isReadOnlyPropertyCompatibleWithInterface(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class))).thenReturn(ValidationResult.VALID); when(diskValidator.isVirtIoScsiValid(any(org.ovirt.engine.core.common.businessentities.VM.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class))).thenReturn(ValidationResult.VALID); when(diskValidator.isDiskInterfaceSupported(any(org.ovirt.engine.core.common.businessentities.VM.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class))).thenReturn(ValidationResult.VALID); when(diskValidator.isPassDiscardSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(ValidationResult.VALID); }	private void mockDiskValidator() { doReturn(diskValidator).when(command).getDiskValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class)); doReturn(diskVmElementValidator).when(command).getDiskVmElementValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class)); when(diskVmElementValidator.isReadOnlyPropertyCompatibleWithInterface()).thenReturn(ValidationResult.VALID); when(diskVmElementValidator.isVirtIoScsiValid(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(ValidationResult.VALID); when(diskVmElementValidator.isDiskInterfaceSupported(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(ValidationResult.VALID); when(diskVmElementValidator.isPassDiscardSupported(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(ValidationResult.VALID); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Disk disk) { org.ovirt.engine.api.model.DiskAttachment diskAttachment = new org.ovirt.engine.api.model.DiskAttachment(); if (disk.isSetBootable()) { diskAttachment.setBootable(disk.isBootable()); } else { diskAttachment.setBootable(false); } diskAttachment.setPassDiscard(false); if (disk.isSetInterface()) { diskAttachment.setInterface(disk.getInterface()); } else { diskAttachment.setInterface(DiskInterface.VIRTIO); } diskAttachment.setDisk(disk); if (disk.isSetId()) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(disk.getId()); return getAttachmentsResource().attachDiskToVm(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAttachDiskResolver(diskId)); } else { return getAttachmentsResource().createDisk(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAddDiskResolver()); } }	@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Disk disk) { org.ovirt.engine.api.model.DiskAttachment diskAttachment = new org.ovirt.engine.api.model.DiskAttachment(); if (disk.isSetBootable()) { diskAttachment.setBootable(disk.isBootable()); } else { diskAttachment.setBootable(false); } if (disk.isSetInterface()) { diskAttachment.setInterface(disk.getInterface()); } else { diskAttachment.setInterface(DiskInterface.VIRTIO); } if (disk.isSetActive()) { diskAttachment.setActive(disk.isActive()); } diskAttachment.setDisk(disk); if (disk.isSetId()) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(disk.getId()); return getAttachmentsResource().attachDiskToVm(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAttachDiskResolver(diskId)); } else { return getAttachmentsResource().createDisk(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAddDiskResolver()); } }
java.lang.String passDiscardNotSupportedForStorageType();	java.lang.String nonRetrievedVmsWereAllFilteredOnImportVm();
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object virtioScsiEnabledReturnValue) { if (java.lang.Boolean.FALSE.equals(virtioScsiEnabledReturnValue)) { diskInterfaces.remove(DiskInterface.VirtIO_SCSI); } for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : diskModels) { diskModel.getDiskInterface().setItems(diskInterfaces); diskModel.getDiskInterface().setSelectedItem(DiskInterface.VirtIO); updatePassDiscardChangeability(diskModel); if (getIsBootable().getIsChangable()) { diskModel.getIsBootable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean isBootableMarked = ((java.lang.Boolean) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity())); parentModel.getIsBootable().setIsChangeable((!isBootableMarked)); } }); } else { diskModel.getIsBootable().setChangeProhibitionReason(org.ovirt.engine.ui.uicommonweb.models.vms.AttachDiskModel.constants.onlyOneBootableDisk()); diskModel.getIsBootable().setIsChangeable(false); } } java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel>> entities = org.ovirt.engine.ui.uicommonweb.Linq.toEntityModelList(org.ovirt.engine.ui.uicommonweb.Linq.filterDisksByType(diskModels, diskStorageType)); initAttachableDisks(entities); }	@java.lang.Override public void onSuccess(java.lang.Boolean virtioScsiEnabledReturnValue) { if (java.lang.Boolean.FALSE.equals(virtioScsiEnabledReturnValue)) { diskInterfaces.remove(DiskInterface.VirtIO_SCSI); } for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : diskModels) { diskModel.getDiskInterface().setItems(diskInterfaces); diskModel.getDiskInterface().setSelectedItem(DiskInterface.VirtIO); if (getIsBootable().getIsChangable()) { diskModel.getIsBootable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean isBootableMarked = ((java.lang.Boolean) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity())); getIsBootable().setIsChangeable((!isBootableMarked)); } }); } else { diskModel.getIsBootable().setChangeProhibitionReason(org.ovirt.engine.ui.uicommonweb.models.vms.AttachDiskModel.constants.onlyOneBootableDisk()); diskModel.getIsBootable().setIsChangeable(false); } } java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel>> entities = org.ovirt.engine.ui.uicommonweb.Linq.toEntityModelList(org.ovirt.engine.ui.uicommonweb.Linq.filterDisksByType(diskModels, diskStorageType)); initAttachableDisks(entities); }
private void updatePassDiscardAvailability() { if (getIsFloating()) { getPassDiscard().setIsAvailable(false); } else { org.ovirt.engine.core.common.businessentities.storage.DiskInterface selectedInterface = getDiskInterface().getSelectedItem(); org.ovirt.engine.core.common.businessentities.storage.DiskStorageType selectedDiskStorageType = getDiskStorageType().getEntity(); boolean isApplicableInterface = (selectedInterface == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI)) || (selectedInterface == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.IDE)); boolean isApplicableDiskStorageType = (selectedDiskStorageType == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN)) || (selectedDiskStorageType == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)); boolean isApplicalbeStorageType = (selectedDiskStorageType != (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) || (((getStorageDomain().getSelectedItem()) != null) && (getStorageDomain().getSelectedItem().getStorageType().isBlockDomain())); if ((isApplicableInterface && isApplicableDiskStorageType) && isApplicalbeStorageType) { getPassDiscard().setIsAvailable(true); if (!(getIsNew())) { getPassDiscard().setEntity(getDiskVmElement().isPassDiscard()); } } else { getPassDiscard().setIsAvailable(false); getPassDiscard().setEntity(false); } } }	private void updatePassDiscardAvailability() { if (!(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isPassDiscardFeatureSupported(getDataCenter().getSelectedItem().getCompatibilityVersion()))) { getPassDiscard().setIsAvailable(false); return; } if (getIsFloating()) { getPassDiscard().setIsAvailable(false); } else { org.ovirt.engine.core.common.businessentities.storage.DiskInterface selectedInterface = getDiskInterface().getSelectedItem(); org.ovirt.engine.core.common.businessentities.storage.DiskStorageType selectedDiskStorageType = getDiskStorageType().getEntity(); boolean isApplicableInterface = (selectedInterface == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI)) || (selectedInterface == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.IDE)); boolean isApplicableDiskStorageType = (selectedDiskStorageType == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN)) || (selectedDiskStorageType == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)); boolean isApplicableStorageType = (selectedDiskStorageType == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN)) || (((getStorageDomain().getSelectedItem()) != null) && (getStorageDomain().getSelectedItem().getStorageType().isInternal())); if ((isApplicableInterface && isApplicableDiskStorageType) && isApplicableStorageType) { getPassDiscard().setIsAvailable(true); if (!(getIsNew())) { getPassDiscard().setEntity(getDiskVmElement().isPassDiscard()); } } else { getPassDiscard().setIsAvailable(false); getPassDiscard().setEntity(false); } } }
private void listenToPassDiscardItemChangedEvent(final org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel>> disks, final org.ovirt.engine.ui.uicommonweb.models.vms.AttachDiskModel diskModel) { disks.getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((disks.getItems()) == null) { return; } for (org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> entityModel : disks.getItems()) { entityModel.getEntity().getPassDiscard().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (args.propertyName.equals("IsChangable")) { revealDiskPanel(diskModel); } } }); } } }); }	@java.lang.Override public void cleanup() { driver.cleanup(); }
@java.lang.Override public int setTabIndexes(int nextTabIndex) { sizeEditor.setTabIndex((nextTabIndex++)); sizeExtendEditor.setTabIndex((nextTabIndex++)); aliasEditor.setTabIndex((nextTabIndex++)); descriptionEditor.setTabIndex((nextTabIndex++)); interfaceEditor.setTabIndex((nextTabIndex++)); datacenterEditor.setTabIndex((nextTabIndex++)); storageDomainEditor.setTabIndex((nextTabIndex++)); volumeTypeEditor.setTabIndex((nextTabIndex++)); cinderVolumeTypeEditor.setTabIndex((nextTabIndex++)); diskProfileEditor.setTabIndex((nextTabIndex++)); quotaEditor.setTabIndex((nextTabIndex++)); hostListEditor.setTabIndex((nextTabIndex++)); storageTypeEditor.setTabIndex((nextTabIndex++)); plugDiskToVmEditor.setTabIndex((nextTabIndex++)); wipeAfterDeleteEditor.setTabIndex((nextTabIndex++)); passDiscardEditor.setTabIndex((nextTabIndex++)); isBootableEditor.setTabIndex((nextTabIndex++)); isShareableEditor.setTabIndex((nextTabIndex++)); isReadOnlyEditor.setTabIndex((nextTabIndex++)); isScsiPassthroughEditor.setTabIndexes((nextTabIndex++)); isSgIoUnfilteredEditor.setTabIndex((nextTabIndex++)); isUsingScsiReservationEditor.setTabIndex((nextTabIndex++)); return nextTabIndex; }	@java.lang.Override public int setTabIndexes(int nextTabIndex) { sizeEditor.setTabIndex((nextTabIndex++)); sizeExtendEditor.setTabIndex((nextTabIndex++)); aliasEditor.setTabIndex((nextTabIndex++)); descriptionEditor.setTabIndex((nextTabIndex++)); interfaceEditor.setTabIndex((nextTabIndex++)); datacenterEditor.setTabIndex((nextTabIndex++)); storageDomainEditor.setTabIndex((nextTabIndex++)); volumeTypeEditor.setTabIndex((nextTabIndex++)); cinderVolumeTypeEditor.setTabIndex((nextTabIndex++)); diskProfileEditor.setTabIndex((nextTabIndex++)); quotaEditor.setTabIndex((nextTabIndex++)); hostListEditor.setTabIndex((nextTabIndex++)); storageTypeEditor.setTabIndex((nextTabIndex++)); plugDiskToVmEditor.setTabIndex((nextTabIndex++)); wipeAfterDeleteEditor.setTabIndex((nextTabIndex++)); isBootableEditor.setTabIndex((nextTabIndex++)); isShareableEditor.setTabIndex((nextTabIndex++)); isReadOnlyEditor.setTabIndex((nextTabIndex++)); passDiscardEditor.setTabIndex((nextTabIndex++)); isScsiPassthroughEditor.setTabIndexes((nextTabIndex++)); isSgIoUnfilteredEditor.setTabIndex((nextTabIndex++)); isUsingScsiReservationEditor.setTabIndex((nextTabIndex++)); return nextTabIndex; }
java.lang.String passDiscardNotSupportedForInterface();	java.lang.String nonRetrievedAndRunningVmsWereAllFilteredOnImportVm();
public void updateOperationProgress(final org.ovirt.engine.core.common.businessentities.VM vm) { vm.setBackgroundOperationDescription(resourceManager.getVmManager(vm.getId()).getConvertOperationDescription()); vm.setBackgroundOperationProgress(resourceManager.getVmManager(vm.getId()).getConvertOperationProgress()); }	public void updateOperationProgress(final org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.vdsbroker.VmManager vmManager = resourceManager.getVmManager(vm.getId(), false); if (vmManager != null) { vm.setBackgroundOperationDescription(vmManager.getConvertOperationDescription()); vm.setBackgroundOperationProgress(vmManager.getConvertOperationProgress()); } else { vm.setBackgroundOperationDescription(null); vm.setBackgroundOperationProgress((-1)); } }
@java.lang.Override protected void executeCommand() { try { addVmToDb(); processImages(); vmHandler.addVmInitToDB(getVm().getStaticData()); } catch (java.lang.RuntimeException e) { macPool.freeMacs(macsAdded); throw e; } org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.setSucceeded(true); org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getReturnValue().setActionReturnValue(getVm()); }	@java.lang.Override protected void executeCommand() { try { addVmToDb(); processImages(); vmHandler.addVmInitToDB(getVm().getStaticData()); logIfDisksHaveIllegalPassDiscard(); } catch (java.lang.RuntimeException e) { macPool.freeMacs(macsAdded); throw e; } org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.setSucceeded(true); org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getReturnValue().setActionReturnValue(getVm()); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSnapshotDao().get(org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getParameters().getId(), Snapshot.SnapshotType.NEXT_RUN, org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getUserID(), org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getParameters().isFiltered()); if (snapshot != null) { org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); vmHandler.updateDisksFromDb(vm); vmHandler.updateVmGuestAgentVersion(vm); vmHandler.updateNetworkInterfacesFromDb(vm); org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getQueryReturnValue().setReturnValue(vm); } else { super.executeQueryCommand(); } }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = snapshotDao.get(org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getParameters().getId(), Snapshot.SnapshotType.NEXT_RUN, org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getUserID(), org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getParameters().isFiltered()); if (snapshot != null) { org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); vmHandler.updateDisksFromDb(vm); vmHandler.updateVmGuestAgentVersion(vm); vmHandler.updateNetworkInterfacesFromDb(vm); vmHandler.updateVmStatistics(vm); org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getQueryReturnValue().setReturnValue(vm); } else { super.executeQueryCommand(); } }
public void updateVmStatistics(final org.ovirt.engine.core.common.businessentities.VM vm) { vm.setStatisticsData(resourceManager.getVmManager(vm.getId()).getStatistics()); }	public void updateVmStatistics(final org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.vdsbroker.VmManager vmManager = resourceManager.getVmManager(vm.getId(), false); if (vmManager != null) { vm.setStatisticsData(vmManager.getStatistics()); } }
public boolean isUsbPolicyLegal(org.ovirt.engine.core.common.businessentities.UsbPolicy usbPolicy, int osId, java.util.List<java.lang.String> messages) { boolean retVal = true; if (UsbPolicy.ENABLED_LEGACY.equals(usbPolicy)) { if (osRepository.isLinux(osId)) { messages.add(EngineMessage.USB_LEGACY_NOT_SUPPORTED_ON_LINUX_VMS.toString()); retVal = false; } } return retVal; }	public static boolean isVmPriorityValueLegal(int value, java.util.List<java.lang.String> reasons) { boolean res = false; if ((value >= 0) && (value <= (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VmPriorityMaxValue)))) { res = true; } else { reasons.add(EngineMessage.VM_OR_TEMPLATE_ILLEGAL_PRIORITY_VALUE.toString()); reasons.add(java.lang.String.format("$MaxValue %1$s", org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VmPriorityMaxValue))); } return res; }
private java.util.List<org.ovirt.engine.core.common.businessentities.VM> searchVmsFromDb() { org.ovirt.engine.core.aaa.QueryData data = initQueryData(true); if (data == null) { return java.util.Collections.emptyList(); } java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getVmDao().getAllUsingQuery(data.getQuery()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { vmHandler.updateVmGuestAgentVersion(vm); vmHandler.updateVmLock(vm); vmHandler.updateOperationProgress(vm); vmHandler.updateVmStatistics(vm); } return vms; }	private java.util.List<org.ovirt.engine.core.common.businessentities.VM> searchVmsFromDb() { org.ovirt.engine.core.aaa.QueryData data = initQueryData(true); if (data == null) { return java.util.Collections.emptyList(); } java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = vmDao.getAllUsingQuery(data.getQuery()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { vmHandler.updateVmGuestAgentVersion(vm); vmHandler.updateVmLock(vm); vmHandler.updateOperationProgress(vm); vmHandler.updateVmStatistics(vm); } return vms; }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getDbFacade().getVmDao().getAllVmsRelatedToQuotaId(org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getParameters().getId()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { vmHandler.updateDisksFromDb(vm); vmHandler.updateVmInitFromDB(vm.getStaticData(), true); java.util.Collections.sort(vm.getDiskList(), new org.ovirt.engine.core.common.businessentities.comparators.DiskByDiskAliasComparator()); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.fillImagesBySnapshots(vm); } org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getQueryReturnValue().setReturnValue(vms); }	@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = vmDao.getAllVmsRelatedToQuotaId(org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getParameters().getId()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { vmHandler.updateDisksFromDb(vm); vmHandler.updateVmInitFromDB(vm.getStaticData(), true); java.util.Collections.sort(vm.getDiskList(), new org.ovirt.engine.core.common.businessentities.comparators.DiskByDiskAliasComparator()); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.fillImagesBySnapshots(vm); } org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getQueryReturnValue().setReturnValue(vms); }
protected void addVmTemplateToDb() { getVmTemplate().setClusterId(getParameters().getClusterId()); if (!(vmHandler.validateDedicatedVdsExistOnSameCluster(getVmTemplate(), null))) { getVmTemplate().setDedicatedVmForVdsList(java.util.Collections.emptyList()); } getVmTemplate().setStatus(VmTemplateStatus.Locked); getVmTemplate().setQuotaId(getParameters().getQuotaId()); vmHandler.updateImportedVmUsbPolicy(getVmTemplate()); vmTemplateDao.save(getVmTemplate()); getCompensationContext().snapshotNewEntity(getVmTemplate()); int count = 1; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : getImages()) { image.setActive(true); org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap map = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.saveImage(image); getCompensationContext().snapshotNewEntity(image.getImage()); getCompensationContext().snapshotNewEntity(map); if (!(baseDiskDao.exists(image.getId()))) { image.setDiskAlias(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getSuggestedDiskAlias(image, getVmTemplateName(), count)); count++; baseDiskDao.save(image); getCompensationContext().snapshotNewEntity(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic(); diskDynamic.setId(image.getImageId()); diskDynamic.setActualSize(image.getActualSizeInBytes()); diskImageDynamicDao.save(diskDynamic); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.copyOf(image.getDiskVmElementForVm(sourceTemplateId), image.getId(), getVmTemplateId()); diskVmElementDao.save(dve); getCompensationContext().snapshotNewEntity(diskDynamic); } }	protected void addVmTemplateToDb() { getVmTemplate().setClusterId(getParameters().getClusterId()); if (!(vmHandler.validateDedicatedVdsExistOnSameCluster(getVmTemplate(), null))) { getVmTemplate().setDedicatedVmForVdsList(java.util.Collections.emptyList()); } getVmTemplate().setStatus(VmTemplateStatus.Locked); getVmTemplate().setQuotaId(getParameters().getQuotaId()); vmTemplateDao.save(getVmTemplate()); getCompensationContext().snapshotNewEntity(getVmTemplate()); int count = 1; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : getImages()) { image.setActive(true); org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap map = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.saveImage(image); getCompensationContext().snapshotNewEntity(image.getImage()); getCompensationContext().snapshotNewEntity(map); if (!(baseDiskDao.exists(image.getId()))) { image.setDiskAlias(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getSuggestedDiskAlias(image, getVmTemplateName(), count)); count++; baseDiskDao.save(image); getCompensationContext().snapshotNewEntity(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic(); diskDynamic.setId(image.getImageId()); diskDynamic.setActualSize(image.getActualSizeInBytes()); diskImageDynamicDao.save(diskDynamic); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.copyOf(image.getDiskVmElementForVm(sourceTemplateId), image.getId(), getVmTemplateId()); diskVmElementDao.save(dve); getCompensationContext().snapshotNewEntity(diskDynamic); } }
@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.canRunActionOnNonManagedVm())) { return false; } if ((!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.isInternalExecution())) && (!(org.ovirt.engine.core.utils.ObjectIdentityChecker.canUpdateField(org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm(), "clusterId", org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm().getStatus())))) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } org.ovirt.engine.core.bll.ChangeVmClusterValidator validator = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.bll.ChangeVmClusterValidator(this, org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getClusterId(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getVmCustomCompatibilityVersion(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVmDeviceUtils())); return validator.validate(); }	@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.canRunActionOnNonManagedVm())) { return false; } if ((!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.isInternalExecution())) && (!(org.ovirt.engine.core.utils.ObjectIdentityChecker.canUpdateField(org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm(), "clusterId", org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm().getStatus())))) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } org.ovirt.engine.core.bll.ChangeVmClusterValidator validator = org.ovirt.engine.core.bll.ChangeVmClusterValidator.create(this, org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getClusterId(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getVmCustomCompatibilityVersion()); return validator.validate(); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsList = getVMs(); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsList) { vmHandler.updateVmGuestAgentVersion(vm); } org.ovirt.engine.core.bll.GetAllVmsQueryBase.getQueryReturnValue().setReturnValue(vmsList); }	@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsList = getVMs(); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsList) { vmHandler.updateVmGuestAgentVersion(vm); vmHandler.updateVmStatistics(vm); } org.ovirt.engine.core.bll.GetAllVmsQueryBase.getQueryReturnValue().setReturnValue(vmsList); }
protected void updateVMDetails(org.ovirt.engine.core.common.businessentities.VM vm) { vmHandler.updateDisksFromDb(vm); vmHandler.updateVmGuestAgentVersion(vm); vmHandler.updateNetworkInterfacesFromDb(vm); vmHandler.updateVmInitFromDB(vm.getStaticData(), true); vmHandler.updateNumaNodesFromDb(vm); }	protected void updateVMDetails(org.ovirt.engine.core.common.businessentities.VM vm) { vmHandler.updateDisksFromDb(vm); vmHandler.updateVmGuestAgentVersion(vm); vmHandler.updateNetworkInterfacesFromDb(vm); vmHandler.updateVmInitFromDB(vm.getStaticData(), true); vmHandler.updateNumaNodesFromDb(vm); vmHandler.updateVmStatistics(vm); }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name", "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), getClusterId(action)); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(VdcActionType.ImportVm, params, action); }	@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name", "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), getClusterId(action)); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(VdcActionType.ImportVm, params, action); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(name, clusterId, volumeType, status, replicaCount, stripeCount, disperseCount, redundancyCount, arbiterCount, options, accessProtocols, transportTypes, bricks, asyncTask, advancedDetails, snapshotsCount, snapMaxLimit, snapshotScheduled); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(name, clusterId, volumeType, status, replicaCount, stripeCount, disperseCount, redundancyCount, isArbiter, options, accessProtocols, transportTypes, bricks, asyncTask, advancedDetails, snapshotsCount, snapMaxLimit, snapshotScheduled); }
public void setArbiterCount(java.lang.Integer arbiterCount) { this.arbiterCount = arbiterCount; }	public void setIsArbiter(java.lang.Boolean isArbiter) { this.isArbiter = isArbiter; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity) (obj)); return (((((((((((((((((java.util.Objects.equals(name, other.getName())) && (java.util.Objects.equals(clusterId, other.clusterId))) && ((volumeType) == (other.volumeType))) && ((status) == (other.status))) && (java.util.Objects.equals(replicaCount, other.replicaCount))) && (java.util.Objects.equals(stripeCount, other.stripeCount))) && (java.util.Objects.equals(disperseCount, other.disperseCount))) && (java.util.Objects.equals(redundancyCount, other.redundancyCount))) && (java.util.Objects.equals(arbiterCount, other.arbiterCount))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(getOptions(), other.getOptions()))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(accessProtocols, other.accessProtocols))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(transportTypes, other.transportTypes))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(bricks, other.bricks))) && (java.util.Objects.equals(asyncTask, other.asyncTask))) && (java.util.Objects.equals(advancedDetails, other.advancedDetails))) && (java.util.Objects.equals(snapshotsCount, other.snapshotsCount))) && (java.util.Objects.equals(snapMaxLimit, other.snapMaxLimit))) && (java.util.Objects.equals(snapshotScheduled, other.snapshotScheduled)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity) (obj)); return (((((((((((((((((java.util.Objects.equals(name, other.getName())) && (java.util.Objects.equals(clusterId, other.clusterId))) && ((volumeType) == (other.volumeType))) && ((status) == (other.status))) && (java.util.Objects.equals(replicaCount, other.replicaCount))) && (java.util.Objects.equals(stripeCount, other.stripeCount))) && (java.util.Objects.equals(disperseCount, other.disperseCount))) && (java.util.Objects.equals(redundancyCount, other.redundancyCount))) && (java.util.Objects.equals(isArbiter, other.isArbiter))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(getOptions(), other.getOptions()))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(accessProtocols, other.accessProtocols))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(transportTypes, other.transportTypes))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(bricks, other.bricks))) && (java.util.Objects.equals(asyncTask, other.asyncTask))) && (java.util.Objects.equals(advancedDetails, other.advancedDetails))) && (java.util.Objects.equals(snapshotsCount, other.snapshotsCount))) && (java.util.Objects.equals(snapMaxLimit, other.snapMaxLimit))) && (java.util.Objects.equals(snapshotScheduled, other.snapshotScheduled)); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity) (obj)); return (((((((java.util.Objects.equals(id, other.id)) && (java.util.Objects.equals(volumeId, other.volumeId))) && (java.util.Objects.equals(serverId, other.serverId))) && (java.util.Objects.equals(brickDirectory, other.brickDirectory))) && (java.util.Objects.equals(brickOrder, other.brickOrder))) && (java.util.Objects.equals(asyncTask, other.asyncTask))) && ((status) == (other.status))) && (java.util.Objects.equals(isArbiter, other.isArbiter)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity) (obj)); return ((((((((((java.util.Objects.equals(id, other.id)) && (java.util.Objects.equals(volumeId, other.volumeId))) && (java.util.Objects.equals(serverId, other.serverId))) && (java.util.Objects.equals(brickDirectory, other.brickDirectory))) && (java.util.Objects.equals(brickOrder, other.brickOrder))) && (java.util.Objects.equals(asyncTask, other.asyncTask))) && (java.util.Objects.equals(unSyncedEntries, other.unSyncedEntries))) && (java.util.Objects.equals(unSyncedEntriesTrend, other.unSyncedEntriesTrend))) && (java.util.Objects.equals(selfHealEta, other.selfHealEta))) && ((status) == (other.status))) && (java.util.Objects.equals(isArbiter, other.isArbiter)); }
public void copyFrom(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { setId(brick.getId()); setVolumeId(brick.getVolumeId()); setServerId(brick.getServerId()); setServerName(brick.getServerName()); setBrickDirectory(brick.getBrickDirectory()); setBrickOrder(brick.getBrickOrder()); setStatus(brick.getStatus()); setIsArbiter(brick.getIsArbiter()); }	public void copyFrom(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { setId(brick.getId()); setVolumeId(brick.getVolumeId()); setServerId(brick.getServerId()); setServerName(brick.getServerName()); setBrickDirectory(brick.getBrickDirectory()); setBrickOrder(brick.getBrickOrder()); setUnSyncedEntries(brick.unSyncedEntries); setUnSyncedEntriesTrend(brick.getUnSyncedEntriesTrend()); setStatus(brick.getStatus()); setIsArbiter(brick.getIsArbiter()); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, volumeId, serverId, brickDirectory, brickOrder, status, asyncTask, isArbiter); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, volumeId, serverId, brickDirectory, brickOrder, status, asyncTask, unSyncedEntries, unSyncedEntriesTrend, selfHealEta, isArbiter); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { return getCustomMapSqlParameterSource().addValue("id", volume.getId()).addValue("cluster_id", volume.getClusterId()).addValue("vol_name", volume.getName()).addValue("vol_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getVolumeType())).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getStatus())).addValue("replica_count", volume.getReplicaCount()).addValue("stripe_count", volume.getStripeCount()).addValue("disperse_count", volume.getDisperseCount()).addValue("redundancy_count", volume.getRedundancyCount()).addValue("arbiter_count", volume.getArbiterCount()); }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { return getCustomMapSqlParameterSource().addValue("id", volume.getId()).addValue("cluster_id", volume.getClusterId()).addValue("vol_name", volume.getName()).addValue("vol_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getVolumeType())).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getStatus())).addValue("replica_count", volume.getReplicaCount()).addValue("stripe_count", volume.getStripeCount()).addValue("disperse_count", volume.getDisperseCount()).addValue("redundancy_count", volume.getRedundancyCount()).addValue("is_arbiter", volume.getIsArbiter()); }
@java.lang.Override public void updateGlusterVolume(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { getCallsHandler().executeModification("UpdateGlusterVolume", getCustomMapSqlParameterSource().addValue("id", volume.getId()).addValue("cluster_id", volume.getClusterId()).addValue("vol_name", volume.getName()).addValue("vol_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getVolumeType())).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getStatus())).addValue("replica_count", volume.getReplicaCount()).addValue("stripe_count", volume.getStripeCount()).addValue("disperse_count", volume.getDisperseCount()).addValue("redundancy_count", volume.getRedundancyCount()).addValue("arbiter_count", volume.getArbiterCount())); }	@java.lang.Override public void updateGlusterVolume(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { getCallsHandler().executeModification("UpdateGlusterVolume", getCustomMapSqlParameterSource().addValue("id", volume.getId()).addValue("cluster_id", volume.getClusterId()).addValue("vol_name", volume.getName()).addValue("vol_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getVolumeType())).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getStatus())).addValue("replica_count", volume.getReplicaCount()).addValue("stripe_count", volume.getStripeCount()).addValue("disperse_count", volume.getDisperseCount()).addValue("redundancy_count", volume.getRedundancyCount()).addValue("is_arbiter", volume.getIsArbiter())); }
public java.lang.Integer getArbiterCount() { return arbiterCount; }	public java.lang.Boolean getIsArbiter() { return isArbiter; }
@java.lang.Override public org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBatchMapper() { return new org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>() { @java.lang.Override public org.springframework.jdbc.core.namedparam.MapSqlParameterSource map(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource paramValue = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource().addValue("volume_id", entity.getVolumeId()).addValue("server_id", entity.getServerId()).addValue("brick_dir", entity.getBrickDirectory()).addValue("status", entity.getStatus().name()).addValue("id", entity.getId().toString()).addValue("brick_order", entity.getBrickOrder()).addValue("network_id", entity.getNetworkId()).addValue("is_arbiter", entity.getIsArbiter()).addValue("task_id", ((entity.getAsyncTask().getTaskId()) != null ? entity.getAsyncTask().getTaskId().toString() : "")); return paramValue; } }; }	@java.lang.Override public org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBatchMapper() { return ( entity) -> new org.springframework.jdbc.core.namedparam.MapSqlParameterSource().addValue("volume_id", entity.getVolumeId()).addValue("server_id", entity.getServerId()).addValue("brick_dir", entity.getBrickDirectory()).addValue("status", entity.getStatus().name()).addValue("id", entity.getId().toString()).addValue("brick_order", entity.getBrickOrder()).addValue("network_id", entity.getNetworkId()).addValue("task_id", ((entity.getAsyncTask().getTaskId()) != null ? entity.getAsyncTask().getTaskId().toString() : "")).addValue("unsynced_entries", entity.getUnSyncedEntries()).addValue("unsynced_entries_history", org.apache.commons.lang.StringUtils.join(entity.getUnSyncedEntriesTrend(), ",")).addValue("is_arbiter", entity.getIsArbiter()); }
@java.lang.Override protected void executeCommand() { log.info("Creating ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); if (isImageSupplied()) { handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } else { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(false); return; } log.info("Creating {} image", getImageType()); createImage(); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { log.info("Creating ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); if (isImageProvided()) { handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } else { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(false); return; } log.info("Creating {} image", getImageType()); createImage(); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true); }
protected boolean isImageSupplied() { return !(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())); }	protected boolean isImageProvided() { return !(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> listPermissionSubjects = new java.util.ArrayList<>(); if (!(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.isImageSupplied())) { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } else { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return listPermissionSubjects; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> listPermissionSubjects = new java.util.ArrayList<>(); if (org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.isImageProvided()) { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_DISK_PROPERTIES)); } else { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return listPermissionSubjects; }
@java.lang.Override protected boolean validate() { if (isImageSupplied()) { return validateImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } else { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) != (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { return validateCreateImage(); } else { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); } } }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId(); if (isImageProvided()) { return validateImageTransfer(imageId); } else if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); } return validateCreateImage(); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if (cluster == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID); return false; } if (!(cluster.supportsGlusterService())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_DOES_NOT_SUPPORT_GLUSTER); return false; } if (volume.getVolumeType().isDispersedType()) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CREATION_OF_DISPERSE_VOLUME_NOT_SUPPORTED); return false; } if (volumeNameExists(volume.getName())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NAME_ALREADY_EXISTS); addValidationMessageVariable("volumeName", volume.getName()); return false; } if (!(validate(createVolumeValidator().isForceCreateVolumeAllowed(getCluster().getCompatibilityVersion(), getParameters().isForce())))) { return false; } if (((volume.getArbiterCount()) != 0) && (!(validate(createVolumeValidator().isArbiterVolumeSupported(getCluster().getCompatibilityVersion()))))) { return false; } if ((((volume.getArbiterCount()) != 0) && (!(volume.getVolumeType().isReplicatedType()))) || ((volume.getReplicaCount()) != 3)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_ARBITER_VOLUME_SHOULD_BE_REPLICA_3_VOLUME); return false; } return validateBricks(volume); }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if (cluster == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID); return false; } if (!(cluster.supportsGlusterService())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_DOES_NOT_SUPPORT_GLUSTER); return false; } if (getVolume().getVolumeType().isDispersedType()) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CREATION_OF_DISPERSE_VOLUME_NOT_SUPPORTED); return false; } if (volumeNameExists(getVolume().getName())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NAME_ALREADY_EXISTS); addValidationMessageVariable("volumeName", getVolume().getName()); return false; } if (getVolume().getIsArbiter()) { if (!(org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterArbiterVolumeSupported(getCluster().getCompatibilityVersion()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_ARBITER_VOLUME_NOT_SUPPORTED); } if ((!(getVolume().getVolumeType().isReplicatedType())) || ((getVolume().getReplicaCount()) != 3)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_ARBITER_VOLUME_SHOULD_BE_REPLICA_3_VOLUME); } } return validateBricks(getVolume()); }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = CreateGlusterVolumeVDSCommand.getParameters().getVolume(); boolean isForce = CreateGlusterVolumeVDSCommand.getParameters().isForce(); boolean supportForceCreateVolume = org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterForceCreateVolumeSupported(CreateGlusterVolumeVDSCommand.getParameters().getClusterVersion()); uuidReturn = (supportForceCreateVolume) ? CreateGlusterVolumeVDSCommand.getBroker().glusterVolumeCreate(volume.getName(), volume.getBrickDirectories().toArray(new java.lang.String[0]), volume.getReplicaCount(), volume.getStripeCount(), getTransportTypeArr(volume), isForce, volume.getArbiterCount()) : CreateGlusterVolumeVDSCommand.getBroker().glusterVolumeCreate(volume.getName(), volume.getBrickDirectories().toArray(new java.lang.String[0]), volume.getReplicaCount(), volume.getStripeCount(), getTransportTypeArr(volume)); CreateGlusterVolumeVDSCommand.proceedProxyReturnValue(); if (CreateGlusterVolumeVDSCommand.getVDSReturnValue().getSucceeded()) { volume.setId(org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(uuidReturn.uuid)); setReturnValue(volume); } }	@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = CreateGlusterVolumeVDSCommand.getParameters().getVolume(); boolean isForce = CreateGlusterVolumeVDSCommand.getParameters().isForce(); uuidReturn = CreateGlusterVolumeVDSCommand.getBroker().glusterVolumeCreate(volume.getName(), volume.getBrickDirectories().toArray(new java.lang.String[0]), volume.getReplicaCount(), volume.getStripeCount(), getTransportTypeArr(volume), isForce, volume.getIsArbiter()); CreateGlusterVolumeVDSCommand.proceedProxyReturnValue(); if (CreateGlusterVolumeVDSCommand.getVDSReturnValue().getSucceeded()) { volume.setId(org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(uuidReturn.uuid)); setReturnValue(volume); } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList, boolean force, int arbiterCount) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.create").withParameter("volumeName", volumeName).withParameter("bricklist", new java.util.ArrayList(java.util.Arrays.asList(brickList))).withParameter("replicaCount", replicaCount).withParameter("stripeCount", stripeCount).withParameter("transportList", new java.util.ArrayList(java.util.Arrays.asList(transportList))).withParameter("force", force).withOptionalParameter("arbiterCount", arbiterCount).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyVolume(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> volumeAddress) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.sparsify_volume").withParameter("job_id", jobId).withParameter("vol_info", volumeAddress).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
public java.util.Map<java.lang.String, java.lang.Object> glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList, boolean force, int arbiterCount);	public java.util.Map<java.lang.String, java.lang.Object> teardownImage(java.lang.String sdID, java.lang.String spID, java.lang.String imageID, java.lang.String volumeID);
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList, boolean force, int arbiterCount);	org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getExternalVmList(java.lang.String uri, java.lang.String username, java.lang.String password, java.util.List<java.lang.String> vmsNames);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList, boolean force, int arbiterCount) { try { if (arbiterCount == 0) { return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(vdsServer.glusterVolumeCreate(volumeName, brickList, replicaCount, stripeCount, transportList, force)); } else { return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(vdsServer.glusterVolumeCreate(volumeName, brickList, replicaCount, stripeCount, transportList, force, arbiterCount)); } } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc verifyUntrustedVolume(java.lang.String spID, java.lang.String sdID, java.lang.String imageID, java.lang.String volumeID) { try { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = vdsServer.verifyUntrustedVolume(sdID, spID, imageID, volumeID); org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc(xmlRpcReturnValue); return wrapper; } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
@java.lang.Override public void buildVmVirtioScsi() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.VIRTIOSCSI.getName()); java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskInterface, java.lang.Integer> controllerIndexMap = org.ovirt.engine.core.utils.archstrategy.ArchStrategyFactory.getStrategy(vm.getClusterArch()).run(new org.ovirt.engine.core.vdsbroker.architecture.GetControllerIndices()).returnValue(); int virtioScsiIndex = controllerIndexMap.get(DiskInterface.VirtIO_SCSI); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceGeneralType.CONTROLLER.getValue()); struct.put(VdsProperties.Device, VdsProperties.Scsi); struct.put(VdsProperties.Model, VdsProperties.VirtioScsi); struct.put(VdsProperties.Index, java.lang.Integer.toString(virtioScsiIndex)); if ((vm.getNumOfIoThreads()) > 0) { struct.put(VdsProperties.ioTrheadId, java.lang.Integer.toString(virtioScsiIndex)); virtioScsiIndex++; } vmInfoBuildUtils.addAddress(vmDevice, struct); virtioScsiIndex++; addDevice(struct, vmDevice, null); } }	@java.lang.Override public void buildVmVirtioScsi() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.VIRTIOSCSI.getName()); java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskInterface, java.lang.Integer> controllerIndexMap = org.ovirt.engine.core.utils.archstrategy.ArchStrategyFactory.getStrategy(vm.getClusterArch()).run(new org.ovirt.engine.core.vdsbroker.architecture.GetControllerIndices()).returnValue(); int virtioScsiIndex = controllerIndexMap.get(DiskInterface.VirtIO_SCSI); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceGeneralType.CONTROLLER.getValue()); struct.put(VdsProperties.Device, VdsProperties.Scsi); struct.put(VdsProperties.Model, VdsProperties.VirtioScsi); struct.put(VdsProperties.Index, java.lang.Integer.toString(virtioScsiIndex)); vmInfoBuildUtils.addAddress(vmDevice, struct); virtioScsiIndex++; addDevice(struct, vmDevice, null); } }
public void updateVmDevices(org.ovirt.engine.core.common.action.VmManagementParametersBase params, org.ovirt.engine.core.common.businessentities.VM oldVm) { org.ovirt.engine.core.common.businessentities.VmBase oldVmBase = oldVm.getStaticData(); org.ovirt.engine.core.common.businessentities.VmBase newVmBase = params.getVmStaticData(); if (newVmBase == null) { return; } updateCdPath(oldVmBase, newVmBase); updateBootOrder(oldVmBase, newVmBase); updateVideoDevices(oldVmBase, newVmBase); updateUsbSlots(oldVmBase, newVmBase); updateMemoryBalloon(newVmBase.getId(), params.isBalloonEnabled()); updateSoundDevice(oldVmBase, newVmBase, oldVm.getCompatibilityVersion(), params.isSoundDeviceEnabled()); updateSmartcardDevice(oldVm, newVmBase); updateConsoleDevice(newVmBase.getId(), params.isConsoleEnabled()); int scsiControllers = (((newVmBase.getNumOfIoThreads()) > 1) && (params.isVirtioScsiEnabled())) ? newVmBase.getNumOfIoThreads() : 1; for (int i = 1; i <= scsiControllers; i++) { updateVirtioScsiController(newVmBase.getId(), params.isVirtioScsiEnabled()); } }	public void updateVmDevices(org.ovirt.engine.core.common.action.VmManagementParametersBase params, org.ovirt.engine.core.common.businessentities.VM oldVm) { org.ovirt.engine.core.common.businessentities.VmBase oldVmBase = oldVm.getStaticData(); org.ovirt.engine.core.common.businessentities.VmBase newVmBase = params.getVmStaticData(); if (newVmBase == null) { return; } updateCdPath(oldVmBase, newVmBase); updateBootOrder(oldVmBase, newVmBase); updateVideoDevices(oldVmBase, newVmBase); updateUsbSlots(oldVmBase, newVmBase); updateMemoryBalloon(newVmBase.getId(), params.isBalloonEnabled()); updateSoundDevice(oldVmBase, newVmBase, oldVm.getCompatibilityVersion(), params.isSoundDeviceEnabled()); updateSmartcardDevice(oldVm, newVmBase); updateConsoleDevice(newVmBase.getId(), params.isConsoleEnabled()); updateVirtioScsiController(newVmBase, params.isVirtioScsiEnabled()); }
public boolean validate() { getReplicaCount().setIsValid(true); getStripeCount().setIsValid(true); if (getReplicaCount().getIsAvailable()) { org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation replicaCountValidation = new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(); replicaCountValidation.setMinimum(2); replicaCountValidation.setMaximum(16); getReplicaCount().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), replicaCountValidation }); } if (getStripeCount().getIsAvailable()) { org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation stripeCountValidation = new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(); stripeCountValidation.setMinimum(4); stripeCountValidation.setMaximum(16); getReplicaCount().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), stripeCountValidation }); } return ((getReplicaCount().getIsValid()) && (getStripeCount().getIsValid())) && (getArbiterVolume().getIsValid()); }	public boolean validate() { getReplicaCount().setIsValid(true); getStripeCount().setIsValid(true); if (getReplicaCount().getIsAvailable()) { org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation replicaCountValidation = new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(); replicaCountValidation.setMinimum(2); replicaCountValidation.setMaximum(16); getReplicaCount().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), replicaCountValidation }); } if (getStripeCount().getIsAvailable()) { org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation stripeCountValidation = new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(); stripeCountValidation.setMinimum(4); stripeCountValidation.setMaximum(16); getStripeCount().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), stripeCountValidation }); } return (getReplicaCount().getIsValid()) && (getStripeCount().getIsValid()); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Arbiter Volume should be a REPLICATE volume with replica count 3") java.lang.String arbiterVolumeShouldBeReplica3();	java.lang.String arbiterVolumeShouldBeReplica3();
public static boolean glusterArbiterVolumeSupported(org.ovirt.engine.core.compat.Version version) { return (Version.v4_0.compareTo(version)) <= 0; }	public static boolean glusterArbiterVolumeSupported(org.ovirt.engine.core.compat.Version version) { return (Version.v4_1.compareTo(version)) <= 0; }
private void onAddBricksInternal() { org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel volumeBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel) (getWindow())); cancelConfirmation(); if (!(volumeBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType selectedVolumeType = getTypeList().getSelectedItem(); if (selectedVolumeType.isReplicatedType()) { getReplicaCount().setEntity(volumeBrickModel.getReplicaCount().getEntity()); } if (selectedVolumeType.isStripedType()) { getStripeCount().setEntity(volumeBrickModel.getStripeCount().getEntity()); } java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>> brickList = new java.util.ArrayList<>(); brickList.addAll(volumeBrickModel.getBricks().getItems()); volumeBrickModel.getBricks().setItems(null); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>> brickListModel = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); brickListModel.setItems(brickList); brickListModel.setSelectedItems(brickList); setBricks(brickListModel); setForceAddBricks(volumeBrickModel.getForce().getEntity()); getArbiterVolume().setEntity(volumeBrickModel.getArbiterVolume().getEntity()); setWindow(null); }	private void onAddBricksInternal() { org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel volumeBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel) (getWindow())); cancelConfirmation(); if (!(volumeBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType selectedVolumeType = getTypeList().getSelectedItem(); if (selectedVolumeType.isReplicatedType()) { getReplicaCount().setEntity(volumeBrickModel.getReplicaCount().getEntity()); } if (selectedVolumeType.isStripedType()) { getStripeCount().setEntity(volumeBrickModel.getStripeCount().getEntity()); } java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>> brickList = new java.util.ArrayList<>(); brickList.addAll(volumeBrickModel.getBricks().getItems()); volumeBrickModel.getBricks().setItems(null); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>> brickListModel = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); brickListModel.setItems(brickList); brickListModel.setSelectedItems(brickList); setBricks(brickListModel); setForceAddBricks(volumeBrickModel.getForce().getEntity()); setWindow(null); }
private void updateArbiterAvailability() { getArbiterVolume().setIsAvailable(((getTypeList().getSelectedItem().isReplicatedType()) && (org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterFeaturesUtil.glusterArbiterVolumeSupported(getCluster().getSelectedItem().getCompatibilityVersion())))); }	private void updateArbiterAvailability() { getArbiterVolume().setIsAvailable(((getTypeList().getSelectedItem().isReplicatedType()) && ((Version.v4_1.compareTo(getCluster().getSelectedItem().getCompatibilityVersion())) >= 0))); }
protected void addStyles() { volumeTypeEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); replicaCountEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); stripeCountEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); arbiterVolumeEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); forceEditor.addContentWidgetContainerStyleName(style.forceEditorWidget()); }	protected void addStyles() { volumeTypeEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); replicaCountEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); stripeCountEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); forceEditor.addContentWidgetContainerStyleName(style.forceEditorWidget()); }
private void clusterSelectedItemChanged() { setBricks(new org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>>()); if ((getCluster().getSelectedItem()) != null) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster().getSelectedItem(); updateArbiterAvailability(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isAnyHostUpInCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { if (!(getCluster().getSelectedItem().getId().equals(cluster.getId()))) { return; } if (((java.lang.Boolean) (returnValue))) { getAddBricksCommand().setIsExecutionAllowed(true); setMessage(null); } else { getAddBricksCommand().setIsExecutionAllowed(false); setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().volumeEmptyClusterValidationMsg()); } } }), cluster.getName()); } else { getAddBricksCommand().setIsExecutionAllowed(false); setMessage(null); } }	private void clusterSelectedItemChanged() { setBricks(new org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>>()); if ((getCluster().getSelectedItem()) != null) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster().getSelectedItem(); updateArbiterAvailability(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isAnyHostUpInCluster(new org.ovirt.engine.ui.uicommonweb.models.gluster.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.lang.Boolean>() { @java.lang.Override public void onSuccess(java.lang.Boolean returnValue) { if (!(getCluster().getSelectedItem().getId().equals(cluster.getId()))) { return; } if (returnValue) { getAddBricksCommand().setIsExecutionAllowed(true); setMessage(null); } else { getAddBricksCommand().setIsExecutionAllowed(false); setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().volumeEmptyClusterValidationMsg()); } } }), cluster.getName()); } else { getAddBricksCommand().setIsExecutionAllowed(false); setMessage(null); } }
public boolean check(final org.ovirt.engine.core.common.businessentities.VDS host) { final int checks = (org.ovirt.engine.core.bll.host.HostConnectivityChecker.VDSM_RESPONSIVENESS_PERIOD_IN_SECONDS) / (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SetupNetworksPollingTimeout)); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller poller = new org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller(); for (int i = 0; i < checks; i++) { if (poller.poll(host.getId())) { org.ovirt.engine.core.bll.host.HostConnectivityChecker.log.info("Engine managed to communicate with VDSM agent on host '{}' ('{}')", host.getName(), host.getId()); return true; } } return false; }	public boolean check(final org.ovirt.engine.core.common.businessentities.VDS host) { final int checks = (org.ovirt.engine.core.bll.host.HostConnectivityChecker.VDSM_RESPONSIVENESS_PERIOD_IN_SECONDS) / (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SetupNetworksPollingTimeout)); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller poller = new org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller(); for (int i = 0; i < checks; i++) { if (poller.poll(host.getId())) { org.ovirt.engine.core.bll.host.HostConnectivityChecker.log.info("Engine managed to communicate with VDSM agent on host '{}' with address '{}' ('{}')", host.getName(), host.getHostName(), host.getId()); return true; } } return false; }
public void setDefaultInterface() { org.ovirt.engine.core.compat.Guid vmId = getVmId(); if ((org.ovirt.engine.core.compat.Guid.isNullOrEmpty(vmId)) || ((getDisk()) == null)) { getDiskInterface().setSelectedItem(DiskInterface.VirtIO_SCSI); } else { getDiskInterface().setSelectedItem(getDisk().getDiskVmElementForVm(vmId).getDiskInterface()); } }	public void setDefaultInterface() { org.ovirt.engine.core.compat.Guid vmId = getVmId(); if ((org.ovirt.engine.core.compat.Guid.isNullOrEmpty(vmId)) || ((getDisk()) == null)) { boolean virtioScsiEnabled = java.lang.Boolean.TRUE.equals(getIsVirtioScsiEnabled().getEntity()); getDiskInterface().setSelectedItem((virtioScsiEnabled ? org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI : org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO)); } else { getDiskInterface().setSelectedItem(getDisk().getDiskVmElementForVm(vmId).getDiskInterface()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(source, windowPopup.get(propName), false, propName); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(source, confirmWindowPopup, true, propName); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(model, propName, windowPopupInstances.get(propName), false); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(model, propName, confirmWindowPopupInstances.get(propName), true); } }
protected <T extends org.ovirt.engine.ui.uicommonweb.models.Model> void revealAndAssignPopup(T model, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<T, ?> popup, boolean isConfirm, java.lang.String windowPropertyName) { revealPopup(model, popup); if (isConfirm) { confirmWindowPopup = popup; } else { windowPopup.put(windowPropertyName, popup); } }	protected <T extends org.ovirt.engine.ui.uicommonweb.models.Model> void revealAndAssignPopup(T model, java.lang.String propertyName, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<T, ?> popup, boolean isConfirm) { revealPopup(model, popup); if (isConfirm) { confirmWindowPopupInstances.put(propertyName, popup); } else { windowPopupInstances.put(propertyName, popup); } }
@java.lang.SuppressWarnings("unchecked") void handleWindowModelChange(M sourceModel, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?> currentPopup, boolean isConfirmation, java.lang.String propertyName) { org.ovirt.engine.ui.uicommonweb.models.Model windowModel = (isConfirmation) ? popupResolver.getConfirmWindowModel(sourceModel, propertyName) : popupResolver.getWindowModel(sourceModel, propertyName); if ((windowModel != null) && (currentPopup == null)) { org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?> newPopup = null; org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand = sourceModel.getLastExecutedCommand(); if (windowModel instanceof org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) { newPopup = popupResolver.getConfirmModelPopup(sourceModel, lastExecutedCommand); if ((newPopup == null) && ((defaultConfirmPopupProvider) != null)) { newPopup = defaultConfirmPopupProvider.get(); } } else { newPopup = popupResolver.getModelPopup(sourceModel, lastExecutedCommand, windowModel); } if (newPopup != null) { revealAndAssignPopup(windowModel, ((org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<org.ovirt.engine.ui.uicommonweb.models.Model, ?>) (newPopup)), isConfirmation, propertyName); } else { if (isConfirmation) { popupResolver.clearConfirmWindowModel(sourceModel, propertyName); } else { popupResolver.clearWindowModel(sourceModel, propertyName); } } } else if ((windowModel == null) && (currentPopup != null)) { hideAndClearPopup(currentPopup, isConfirmation, propertyName); } }	@java.lang.SuppressWarnings("unchecked") void handleWindowModelChange(M sourceModel, java.lang.String propertyName, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?> currentPopup, boolean isConfirmation) { org.ovirt.engine.ui.uicommonweb.models.Model windowModel = (isConfirmation) ? popupResolver.getConfirmWindowModel(sourceModel, propertyName) : popupResolver.getWindowModel(sourceModel, propertyName); if ((windowModel != null) && (currentPopup == null)) { org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?> newPopup = null; org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand = sourceModel.getLastExecutedCommand(); if (windowModel instanceof org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) { newPopup = popupResolver.getConfirmModelPopup(sourceModel, lastExecutedCommand); if ((newPopup == null) && ((defaultConfirmPopupProvider) != null)) { newPopup = defaultConfirmPopupProvider.get(); } } else { newPopup = popupResolver.getModelPopup(sourceModel, lastExecutedCommand, windowModel); } if (newPopup != null) { revealAndAssignPopup(windowModel, propertyName, ((org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<org.ovirt.engine.ui.uicommonweb.models.Model, ?>) (newPopup)), isConfirmation); } else { if (isConfirmation) { popupResolver.clearConfirmWindowModel(sourceModel, propertyName); } else { popupResolver.clearWindowModel(sourceModel, propertyName); } } } else if ((windowModel == null) && (currentPopup != null)) { hideAndClearPopup(propertyName, currentPopup, isConfirmation); } }
protected void hideAndClearPopup(org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?> popup, boolean isConfirm, java.lang.String windowPropertyName) { popup.hideAndUnbind(); if (isConfirm) { confirmWindowPopup = null; } else { windowPopup.put(windowPropertyName, null); } }	protected void hideAndClearPopup(java.lang.String propertyName, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?> popup, boolean isConfirm) { popup.hideAndUnbind(); if (isConfirm) { confirmWindowPopupInstances.put(propertyName, null); } else { windowPopupInstances.put(propertyName, null); } }
void hideAndClearAllPopups() { if ((confirmWindowPopup) != null) { hideAndClearPopup(confirmWindowPopup, true, null); } for (java.util.Map.Entry<java.lang.String, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?>> popupPair : windowPopup.entrySet()) { if ((popupPair.getValue()) != null) { hideAndClearPopup(popupPair.getValue(), false, popupPair.getKey()); } } }	void hideAndClearAllPopups() { for (java.lang.String propName : windowPropertyNames) { org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?> popup = windowPopupInstances.get(propName); if (popup != null) { hideAndClearPopup(propName, popup, false); } } for (java.lang.String propName : confirmWindowPropertyNames) { org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?> confirmPopup = confirmWindowPopupInstances.get(propName); if (confirmPopup != null) { hideAndClearPopup(propName, confirmPopup, true); } } }
public void addDialogModelListener(final M source) { hideAndClearAllPopups(); source.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(source, windowPopup.get(propName), false, propName); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(source, confirmWindowPopup, true, propName); } } }); }	public void addDialogModelListener(final M model) { hideAndClearAllPopups(); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(model, propName, windowPopupInstances.get(propName), false); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(model, propName, confirmWindowPopupInstances.get(propName), true); } } }); }
@org.junit.Test public void testEmptySignKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.StringHelper.string2Map(org.ovirt.engine.core.utils.StringHelperTest.EMPTY_SIGN_KEY_VAL); assertEquals(1, map.size()); }	@org.junit.Test public void testEmptySignKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.StringMapUtils.string2Map(org.ovirt.engine.core.utils.StringMapUtilsTest.EMPTY_SIGN_KEY_VAL); assertEquals(1, map.size()); }
@org.junit.Test public void testOneKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.StringHelper.string2Map(org.ovirt.engine.core.utils.StringHelperTest.ONE_KEY_VAL); assertEquals(1, map.size()); }	@org.junit.Test public void testOneKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.StringMapUtils.string2Map(org.ovirt.engine.core.utils.StringMapUtilsTest.ONE_KEY_VAL); assertEquals(1, map.size()); }
private java.util.Map<java.lang.String, java.lang.String> getAddressMapForScsiDisk(java.lang.String address, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, int controllerIndex, boolean reserveFirstAddress) { java.util.Map<java.lang.String, java.lang.String> addressMap; int availableUnit = vmInfoBuildUtils.getAvailableUnitForScsiDisk(vmDeviceUnitMap, reserveFirstAddress); if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { addressMap = org.ovirt.engine.core.utils.StringHelper.string2Map(address); int unit = java.lang.Integer.parseInt(addressMap.get(VdsProperties.Unit)); if (vmDeviceUnitMap.containsValue(unit)) { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } } else { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } updateVmDeviceAddress(addressMap.toString(), vmDevice); return addressMap; }	private java.util.Map<java.lang.String, java.lang.String> getAddressMapForScsiDisk(java.lang.String address, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, int controllerIndex, boolean reserveFirstAddress) { java.util.Map<java.lang.String, java.lang.String> addressMap; int availableUnit = vmInfoBuildUtils.getAvailableUnitForScsiDisk(vmDeviceUnitMap, reserveFirstAddress); if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { addressMap = org.ovirt.engine.core.utils.StringMapUtils.string2Map(address); int unit = java.lang.Integer.parseInt(addressMap.get(VdsProperties.Unit)); if (vmDeviceUnitMap.containsValue(unit)) { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } } else { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } updateVmDeviceAddress(addressMap.toString(), vmDevice); return addressMap; }
void addAddress(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.String, java.lang.Object> struct) { java.util.Map<java.lang.String, java.lang.String> addressMap = org.ovirt.engine.core.utils.StringHelper.string2Map(vmDevice.getAddress()); if (!(addressMap.isEmpty())) { struct.put(VdsProperties.Address, addressMap); } }	void addAddress(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.String, java.lang.Object> struct) { java.util.Map<java.lang.String, java.lang.String> addressMap = org.ovirt.engine.core.utils.StringMapUtils.string2Map(vmDevice.getAddress()); if (!(addressMap.isEmpty())) { struct.put(VdsProperties.Address, addressMap); } }
public static org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer createVdsServer(java.lang.String hostname, int port, int clientTimeOut, int connectionTimeOut, int clientRetries, int heartbeat) { org.apache.commons.httpclient.HttpClient client = org.ovirt.engine.core.vdsbroker.HttpUtils.getConnection(clientTimeOut, connectionTimeOut, clientRetries, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsMaxConnectionsPerHost), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.MaxTotalConnections)); java.lang.String eventQueue = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EventQueueName); return new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer(org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.createStompClient(hostname, port, connectionTimeOut, clientTimeOut, clientRetries, heartbeat, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EncryptHostCommunication), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsmSSLProtocol), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EventProcessingPoolSize), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsRequestQueueName), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsResponseQueueName), eventQueue), client); }	public static org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer createVdsServer(java.lang.String hostname, int port, int clientTimeOut, int connectionTimeOut, int clientRetries, int heartbeat) { org.apache.commons.httpclient.HttpClient client = org.ovirt.engine.core.vdsbroker.HttpUtils.getConnection(connectionTimeOut, clientRetries, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsMaxConnectionsPerHost), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.MaxTotalConnections)); java.lang.String eventQueue = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EventQueueName); return new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer(org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.createStompClient(hostname, port, connectionTimeOut, clientTimeOut, clientRetries, heartbeat, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EncryptHostCommunication), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsmSSLProtocol), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EventProcessingPoolSize), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsRequestQueueName), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsResponseQueueName), eventQueue), client); }
@org.junit.Test public void testEmptyKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.StringHelper.string2Map(org.ovirt.engine.core.utils.StringHelperTest.EMPTY_KEY_VAL); assertEquals(2, map.size()); }	@org.junit.Test public void testEmptyKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.StringMapUtils.string2Map(org.ovirt.engine.core.utils.StringMapUtilsTest.EMPTY_KEY_VAL); assertEquals(2, map.size()); }
public static org.apache.commons.httpclient.HttpClient getConnection(int clientTimeOut, int connectionTimeOut, int clientRetries, int maxConnectionsPerHost, int maxTotalConnections) { org.apache.commons.httpclient.params.HttpConnectionManagerParams params = new org.apache.commons.httpclient.params.HttpConnectionManagerParams(); params.setConnectionTimeout(connectionTimeOut); params.setDefaultMaxConnectionsPerHost(maxConnectionsPerHost); params.setMaxTotalConnections(maxTotalConnections); org.apache.commons.httpclient.MultiThreadedHttpConnectionManager httpConnectionManager = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager(); httpConnectionManager.setParams(params); org.apache.commons.httpclient.HttpClient client = new org.apache.commons.httpclient.HttpClient(httpConnectionManager); int retries = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.vdsRetries); org.apache.commons.httpclient.HttpMethodRetryHandler handler = new org.apache.commons.httpclient.DefaultHttpMethodRetryHandler(retries, false); org.apache.commons.httpclient.params.HttpClientParams parameters = client.getParams(); parameters.setParameter(HttpMethodParams.RETRY_HANDLER, handler); return client; }	public static org.apache.commons.httpclient.HttpClient getConnection(int connectionTimeOut, int clientRetries, int maxConnectionsPerHost, int maxTotalConnections) { org.apache.commons.httpclient.params.HttpConnectionManagerParams params = new org.apache.commons.httpclient.params.HttpConnectionManagerParams(); params.setConnectionTimeout(connectionTimeOut); params.setDefaultMaxConnectionsPerHost(maxConnectionsPerHost); params.setMaxTotalConnections(maxTotalConnections); org.apache.commons.httpclient.MultiThreadedHttpConnectionManager httpConnectionManager = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager(); httpConnectionManager.setParams(params); org.apache.commons.httpclient.HttpClient client = new org.apache.commons.httpclient.HttpClient(httpConnectionManager); int retries = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.vdsRetries); org.apache.commons.httpclient.HttpMethodRetryHandler handler = new org.apache.commons.httpclient.DefaultHttpMethodRetryHandler(retries, false); org.apache.commons.httpclient.params.HttpClientParams parameters = client.getParams(); parameters.setParameter(HttpMethodParams.RETRY_HANDLER, handler); return client; }
private void addAddress(java.util.Map<java.lang.String, java.lang.Object> map, java.lang.String address) { if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { map.put(VdsProperties.Address, org.ovirt.engine.core.utils.StringHelper.string2Map(org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters().getVmDevice().getAddress())); } }	private void addAddress(java.util.Map<java.lang.String, java.lang.Object> map, java.lang.String address) { if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { map.put(VdsProperties.Address, org.ovirt.engine.core.utils.StringMapUtils.string2Map(org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters().getVmDevice().getAddress())); } }
private java.util.Map<java.lang.String, java.lang.Object> buildData() { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Object> memDeviceData = new java.util.HashMap<>(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getMemoryDevice(); data.put("vmId", org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getVmId().toString()); memDeviceData.put(VdsProperties.Type, vmDevice.getType().getValue()); memDeviceData.put(VdsProperties.Device, vmDevice.getDevice()); if (org.apache.commons.lang.StringUtils.isNotBlank(vmDevice.getAddress())) { memDeviceData.put(VdsProperties.Address, org.ovirt.engine.core.utils.StringHelper.string2Map(vmDevice.getAddress())); } memDeviceData.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); memDeviceData.put(VdsProperties.DeviceId, vmDevice.getId().getDeviceId().toString()); memDeviceData.put("size", vmDevice.getSpecParams().get("size")); memDeviceData.put("node", vmDevice.getSpecParams().get("node")); data.put("memory", memDeviceData); return data; }	private java.util.Map<java.lang.String, java.lang.Object> buildData() { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Object> memDeviceData = new java.util.HashMap<>(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getMemoryDevice(); data.put("vmId", org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getVmId().toString()); memDeviceData.put(VdsProperties.Type, vmDevice.getType().getValue()); memDeviceData.put(VdsProperties.Device, vmDevice.getDevice()); if (org.apache.commons.lang.StringUtils.isNotBlank(vmDevice.getAddress())) { memDeviceData.put(VdsProperties.Address, org.ovirt.engine.core.utils.StringMapUtils.string2Map(vmDevice.getAddress())); } memDeviceData.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); memDeviceData.put(VdsProperties.DeviceId, vmDevice.getId().getDeviceId().toString()); memDeviceData.put("size", vmDevice.getSpecParams().get("size")); memDeviceData.put("node", vmDevice.getSpecParams().get("node")); data.put("memory", memDeviceData); return data; }
@org.junit.Test public void testMulKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.StringHelper.string2Map(org.ovirt.engine.core.utils.StringHelperTest.MUL_KEY_VAL); assertEquals(4, map.size()); }	@org.junit.Test public void testMulKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.StringMapUtils.string2Map(org.ovirt.engine.core.utils.StringMapUtilsTest.MUL_KEY_VAL); assertEquals(4, map.size()); }
@org.junit.Test public void testNullKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.StringHelper.string2Map(org.ovirt.engine.core.utils.StringHelperTest.NULL_KEY_VAL); assertEquals(0, map.size()); }	@org.junit.Test public void testNullKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.StringMapUtils.string2Map(org.ovirt.engine.core.utils.StringMapUtilsTest.NULL_KEY_VAL); assertEquals(0, map.size()); }
protected org.ovirt.engine.core.bll.ValidationResult validateMountOptions() { java.lang.String mountOptions = org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.getConnection().getMountOptions(); if (org.apache.commons.lang.StringUtils.isBlank(mountOptions)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.List<java.lang.String> disallowedOptions = ((org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.getConnection().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.POSIXFS)) ? org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.POSIX_MANAGED_OPTIONS : org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.NFS_MANAGED_OPTIONS; java.util.Map<java.lang.String, java.lang.String> optionsMap = org.ovirt.engine.core.utils.StringHelper.string2Map(mountOptions); java.util.Set<java.lang.String> optionsKeys = new java.util.HashSet<>(); for (java.lang.String option : optionsMap.keySet()) { optionsKeys.add(option.toLowerCase()); } optionsKeys.retainAll(disallowedOptions); if (!(optionsKeys.isEmpty())) { addValidationMessageVariable("invalidOptions", org.apache.commons.lang.StringUtils.join(optionsKeys, ", ")); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VALIDATION_STORAGE_CONNECTION_MOUNT_OPTIONS_CONTAINS_MANAGED_PROPERTY); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	protected org.ovirt.engine.core.bll.ValidationResult validateMountOptions() { java.lang.String mountOptions = org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.getConnection().getMountOptions(); if (org.apache.commons.lang.StringUtils.isBlank(mountOptions)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.List<java.lang.String> disallowedOptions = ((org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.getConnection().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.POSIXFS)) ? org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.POSIX_MANAGED_OPTIONS : org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.NFS_MANAGED_OPTIONS; java.util.Map<java.lang.String, java.lang.String> optionsMap = org.ovirt.engine.core.utils.StringMapUtils.string2Map(mountOptions); java.util.Set<java.lang.String> optionsKeys = new java.util.HashSet<>(); for (java.lang.String option : optionsMap.keySet()) { optionsKeys.add(option.toLowerCase()); } optionsKeys.retainAll(disallowedOptions); if (!(optionsKeys.isEmpty())) { addValidationMessageVariable("invalidOptions", org.apache.commons.lang.StringUtils.join(optionsKeys, ", ")); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VALIDATION_STORAGE_CONNECTION_MOUNT_OPTIONS_CONTAINS_MANAGED_PROPERTY); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public static java.util.Map<java.lang.String, java.lang.String> string2Map(java.lang.String str) { java.util.Map<java.lang.String, java.lang.String> map = new java.util.HashMap<>(); if (str != null) { str = str.trim(); if (str.startsWith("{")) { str = str.substring(1, ((str.length()) - 1)); } if (str.endsWith("}")) { str = str.substring(0, ((str.length()) - 1)); } str = str.trim(); if ((str.length()) > 0) { java.lang.String[] keyValPairs = str.split(org.ovirt.engine.core.utils.StringHelper.PAIRS_SEPARATOR); for (java.lang.String pair : keyValPairs) { java.lang.String[] keyval = pair.split(org.ovirt.engine.core.utils.StringHelper.KEY_VALUE_SEPARATOR); if ((keyval.length) == 2) { map.put(keyval[0].trim(), keyval[1].trim()); } else if ((keyval.length) == 1) { map.put(keyval[0].trim(), ""); } } } } return map; }	public static java.util.Map<java.lang.String, java.lang.String> string2Map(java.lang.String str) { java.util.Map<java.lang.String, java.lang.String> map = new java.util.HashMap<>(); if (str != null) { str = str.trim(); if (str.startsWith("{")) { str = str.substring(1, ((str.length()) - 1)); } if (str.endsWith("}")) { str = str.substring(0, ((str.length()) - 1)); } str = str.trim(); if ((str.length()) > 0) { java.lang.String[] keyValPairs = str.split(org.ovirt.engine.core.utils.StringMapUtils.PAIRS_SEPARATOR); for (java.lang.String pair : keyValPairs) { java.lang.String[] keyval = pair.split(org.ovirt.engine.core.utils.StringMapUtils.KEY_VALUE_SEPARATOR); if ((keyval.length) == 2) { map.put(keyval[0].trim(), keyval[1].trim()); } else if ((keyval.length) == 1) { map.put(keyval[0].trim(), ""); } } } } return map; }
@javax.annotation.PostConstruct protected final void postConstruct() { if (!(isCompensationContext())) { initCommandBase(); } }	@javax.annotation.PostConstruct protected final void postConstruct() { if (!(isCompensationContext())) { initCommandBase(); init(); } }
private boolean searchForDuplicatesWithExistingVmDevices(org.ovirt.engine.core.common.businessentities.VmDevice vmDeviceToHotplug) { java.lang.String deviceAddress = vmDeviceToHotplug.getAddress(); if (org.apache.commons.lang.StringUtils.isEmpty(deviceAddress)) { return false; } java.util.Map<java.lang.String, java.lang.String> addressMapToHotplug = org.ovirt.engine.core.utils.StringHelper.string2Map(deviceAddress); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> allVmDevices = vmDeviceDao.getVmDeviceByVmId(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm().getId()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : allVmDevices) { if (!(vmDeviceToHotplug.getId().equals(vmDevice.getId()))) { java.util.Map<java.lang.String, java.lang.String> deviceAddressMap = org.ovirt.engine.core.utils.StringHelper.string2Map(vmDevice.getAddress()); if (deviceAddressMap.equals(addressMapToHotplug)) { return true; } } } return false; }	private boolean searchForDuplicatesWithExistingVmDevices(org.ovirt.engine.core.common.businessentities.VmDevice vmDeviceToHotplug) { java.lang.String deviceAddress = vmDeviceToHotplug.getAddress(); if (org.apache.commons.lang.StringUtils.isEmpty(deviceAddress)) { return false; } java.util.Map<java.lang.String, java.lang.String> addressMapToHotplug = org.ovirt.engine.core.utils.StringMapUtils.string2Map(deviceAddress); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> allVmDevices = vmDeviceDao.getVmDeviceByVmId(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm().getId()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : allVmDevices) { if (!(vmDeviceToHotplug.getId().equals(vmDevice.getId()))) { java.util.Map<java.lang.String, java.lang.String> deviceAddressMap = org.ovirt.engine.core.utils.StringMapUtils.string2Map(vmDevice.getAddress()); if (deviceAddressMap.equals(addressMapToHotplug)) { return true; } } } return false; }
protected void initTooltip() { tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(getContents()); tooltip.setPlacement(Placement.BOTTOM); java.lang.String tooltipContent = org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel.infoPopup.getTooltipContent(item, this); if (tooltipContent != null) { tooltip.setHtml(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(tooltipContent)); } }	protected void initTooltip() { tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(getContents()); tooltip.setPlacement(Placement.BOTTOM); com.google.gwt.safehtml.shared.SafeHtml tooltipContent = org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel.infoPopup.getTooltipContent(item); if (tooltipContent != null) { tooltip.setHtml(tooltipContent); } }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetDifferentlyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPoolA = factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPoolB = factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorB)); assertThat(decoratedPoolA, is(macPoolDecoratorA)); assertThat(decoratedPoolB, is(macPoolDecoratorB)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor1 = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(macPool), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any()); }	private void multipleDecoratorsUsesSameLock(org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator... decorators) { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactory); java.util.Arrays.stream(decorators).forEach(( decorator) -> factory.createDecoratedPool(poolId, macPool, singletonList(decorator))); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactory, times(2)).createLockingInstance(eq(macPool), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor.capture()); assertThat(captor.getAllValues().stream().distinct().count(), is(1L)); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetEquallyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool1 = factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool2 = factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)); assertThat(decoratedPool1, is(macPoolDecoratorA)); assertThat(decoratedPool2, is(macPoolDecoratorA)); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(macPool), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any()); }	@org.junit.Test public void testDifferenlyDecoratedPoolsUseSameLock() { multipleDecoratorsUsesSameLock(macPoolDecoratorA, macPoolDecoratorB); }
public void performPendingOperations() { java.util.Queue<java.util.concurrent.Future<?>> operations = pendingOperations; pendingOperations = new java.util.concurrent.ConcurrentLinkedQueue<>(); operations.forEach(( task) -> { if (task instanceof java.util.concurrent.FutureTask) { ((java.util.concurrent.FutureTask<?>) (task)).run(); } else { org.ovirt.vdsm.jsonrpc.client.utils.ReactorScheduler.LOG.error("Unsupported task type in the queue '{}'", task); } }); }	public void performPendingOperations() { java.util.Queue<java.util.concurrent.Future<?>> operations = pendingOperations; pendingOperations = new java.util.concurrent.ConcurrentLinkedQueue<>(); operations.forEach(( task) -> ((java.util.concurrent.FutureTask<?>) (task)).run()); }
public void refreshVdsStats() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.DebugTimerLogging)) { org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("vdsManager::refreshVdsStats entered, host='{}'({})", vds.getName(), vds.getId()); } fetchHostInterfaces(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue statsReturnValue = resourceManager.runVdsCommand(VDSCommandType.GetStats, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase(vds)); if ((!(statsReturnValue.getSucceeded())) && ((statsReturnValue.getExceptionObject()) != null)) { org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.error("Failed getting vds stats, host='{}'({}): {}", vds.getName(), vds.getId(), statsReturnValue.getExceptionString()); throw statsReturnValue.getExceptionObject(); } getVdsEventListener().updateSchedulingStats(vds); updateV2VJobs(); saveVdsDynamic = vdsManager.checkIfDynamicDataChanged(vds.getDynamicData()); saveVdsStatistics = vdsManager.checkIfStatisticChanged(vds.getStatisticsData()); alertIfLowDiskSpaceOnHost(); checkVdsInterfaces(); if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.DebugTimerLogging)) { org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("vds::refreshVdsStats\n{}", this); } }	public void refreshVdsStats() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.DebugTimerLogging)) { org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("vdsManager::refreshVdsStats entered, host='{}'({})", vds.getName(), vds.getId()); } fetchHostInterfaces(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue statsReturnValue = resourceManager.runVdsCommand(VDSCommandType.GetStats, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase(vds)); if ((!(statsReturnValue.getSucceeded())) && ((statsReturnValue.getExceptionObject()) != null)) { org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.error("Failed getting vds stats, host='{}'({}): {}", vds.getName(), vds.getId(), statsReturnValue.getExceptionString()); throw statsReturnValue.getExceptionObject(); } getVdsEventListener().updateSchedulingStats(vds); updateV2VJobs(); saveVdsDynamic = true; saveVdsStatistics = true; alertIfLowDiskSpaceOnHost(); checkVdsInterfaces(); if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.DebugTimerLogging)) { org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("vds::refreshVdsStats\n{}", this); } }
public void updateStatisticsData(org.ovirt.engine.core.common.businessentities.VdsStatistics statisticsData) { vdsStatisticsDao.update(statisticsData); cachedVds.setStatisticsData(statisticsData); cachedStatisticsData = statisticsData; }	public void updateStatisticsData(org.ovirt.engine.core.common.businessentities.VdsStatistics statisticsData) { vdsStatisticsDao.update(statisticsData); cachedVds.setStatisticsData(statisticsData); }
public void refresh() { try { refreshVdsRunTimeInfo(); } finally { try { if (((firstStatus) != (vds.getStatus())) && ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { vdsManager.cancelRecoveryJob(); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Host '{}' ({}) firing up event.", vds.getName(), vds.getId()); vdsManager.setIsSetNonOperationalExecuted((!(getVdsEventListener().vdsUpEvent(vds)))); } saveVdsDynamic = vdsManager.checkIfDynamicDataChanged(vds.getDynamicData()); saveVdsStatistics = vdsManager.checkIfStatisticChanged(vds.getStatisticsData()); saveDataToDb(); } catch (org.ovirt.engine.core.vdsbroker.irsbroker.IRSErrorException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Exception", ex); } catch (java.lang.RuntimeException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.error("Exception", ex); } } }	public void refresh() { try { refreshVdsRunTimeInfo(); } finally { try { if (((firstStatus) != (vds.getStatus())) && ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { vdsManager.cancelRecoveryJob(); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Host '{}' ({}) firing up event.", vds.getName(), vds.getId()); vdsManager.setIsSetNonOperationalExecuted((!(getVdsEventListener().vdsUpEvent(vds)))); } saveDataToDb(); } catch (org.ovirt.engine.core.vdsbroker.irsbroker.IRSErrorException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Exception", ex); } catch (java.lang.RuntimeException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.error("Exception", ex); } } }
private void moveVDSToMaintenanceIfNeeded() { if ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.PreparingForMaintenance)) { if (monitoringStrategy.canMoveToMaintenance(vds)) { org.ovirt.engine.core.common.businessentities.VdsDynamic dbVds = getDbFacade().getVdsDynamicDao().get(vds.getId()); vds.setMaintenanceReason(dbVds.getMaintenanceReason()); vdsManager.setStatus(VDSStatus.Maintenance, vds); saveVdsDynamic = vdsManager.checkIfDynamicDataChanged(vds.getDynamicData()); saveVdsStatistics = vdsManager.checkIfStatisticChanged(vds.getStatisticsData()); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.info("Updated host status from 'Preparing for Maintenance' to 'Maintenance' in database, host '{}'({})", vds.getName(), vds.getId()); } else { vdsMaintenanceTimeoutOccurred = vdsManager.isTimeToRetryMaintenance(); } } }	private void moveVDSToMaintenanceIfNeeded() { if ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.PreparingForMaintenance)) { if (monitoringStrategy.canMoveToMaintenance(vds)) { org.ovirt.engine.core.common.businessentities.VdsDynamic dbVds = getDbFacade().getVdsDynamicDao().get(vds.getId()); vds.setMaintenanceReason(dbVds.getMaintenanceReason()); vdsManager.setStatus(VDSStatus.Maintenance, vds); saveVdsDynamic = true; saveVdsStatistics = true; org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.info("Updated host status from 'Preparing for Maintenance' to 'Maintenance' in database, host '{}'({})", vds.getName(), vds.getId()); } else { vdsMaintenanceTimeoutOccurred = vdsManager.isTimeToRetryMaintenance(); } } }
private void beforeFirstRefreshTreatment(boolean isVdsUpOrGoingToMaintenance) { if (vdsManager.getbeforeFirstRefresh()) { boolean flagsChanged = false; final java.util.concurrent.atomic.AtomicBoolean processHardwareCapsNeededTemp = new java.util.concurrent.atomic.AtomicBoolean(); vdsManager.refreshCapabilities(processHardwareCapsNeededTemp, vds); flagsChanged = processHardwareCapsNeededTemp.get(); vdsManager.setbeforeFirstRefresh(false); refreshedCapabilities = true; saveVdsDynamic = vdsManager.checkIfDynamicDataChanged(vds.getDynamicData()); processHardwareCapsNeeded = (processHardwareCapsNeeded) ? processHardwareCapsNeeded : flagsChanged; } else if (isVdsUpOrGoingToMaintenance || ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Error))) { return; } if ((vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(vds.getId())); logable.addCustomValue("HostStatus", vds.getStatus().toString()); auditLog(logable, AuditLogType.VDS_DETECTED); } }	private void beforeFirstRefreshTreatment(boolean isVdsUpOrGoingToMaintenance) { if (vdsManager.getbeforeFirstRefresh()) { boolean flagsChanged = false; final java.util.concurrent.atomic.AtomicBoolean processHardwareCapsNeededTemp = new java.util.concurrent.atomic.AtomicBoolean(); vdsManager.refreshCapabilities(processHardwareCapsNeededTemp, vds); flagsChanged = processHardwareCapsNeededTemp.get(); vdsManager.setbeforeFirstRefresh(false); refreshedCapabilities = true; saveVdsDynamic = true; processHardwareCapsNeeded = (processHardwareCapsNeeded) ? processHardwareCapsNeeded : flagsChanged; } else if (isVdsUpOrGoingToMaintenance || ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Error))) { return; } if ((vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(vds.getId())); logable.addCustomValue("HostStatus", vds.getStatus().toString()); auditLog(logable, AuditLogType.VDS_DETECTED); } }
public void updateDynamicData(org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicData) { vdsDynamicDao.update(dynamicData); cachedVds.setDynamicData(dynamicData); cachedDynamicData = dynamicData; }	public void updateDynamicData(org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicData) { vdsDynamicDao.updateIfNeeded(dynamicData); cachedVds.setDynamicData(dynamicData); }
private void saveDataToDb() { if (saveVdsDynamic) { vdsManager.updateDynamicData(vds.getDynamicData()); } if (refreshedCapabilities) { vdsManager.updateNumaData(vds); } if (saveVdsStatistics) { org.ovirt.engine.core.common.businessentities.VdsStatistics stat = vds.getStatisticsData(); vdsManager.updateStatisticsData(stat); checkVdsMemoryThreshold(stat); checkVdsCpuThreshold(stat); checkVdsNetworkThreshold(stat); checkVdsSwapThreshold(stat); final java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics> statistics = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : vds.getInterfaces()) { statistics.add(iface.getStatistics()); } if (!(statistics.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getDbFacade().getInterfaceDao().massUpdateStatisticsForVds(statistics); return null; }); } saveNumaStatisticsDataToDb(); } }	private void saveDataToDb() { if (saveVdsDynamic) { vdsManager.updateDynamicData(vds.getDynamicData()); if (refreshedCapabilities) { vdsManager.updateNumaData(vds); } } if (saveVdsStatistics) { org.ovirt.engine.core.common.businessentities.VdsStatistics stat = vds.getStatisticsData(); vdsManager.updateStatisticsData(stat); checkVdsMemoryThreshold(stat); checkVdsCpuThreshold(stat); checkVdsNetworkThreshold(stat); checkVdsSwapThreshold(stat); final java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics> statistics = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : vds.getInterfaces()) { statistics.add(iface.getStatistics()); } if (!(statistics.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getDbFacade().getInterfaceDao().massUpdateStatisticsForVds(statistics); return null; }); } saveNumaStatisticsDataToDb(); } }
public org.ovirt.engine.core.common.HostUpgradeManagerResult checkForUpdates(org.ovirt.engine.core.common.businessentities.VDS host) { if (upgradeCheckInProgressMap.getOrDefault(host.getId(), false)) { java.lang.String error = java.lang.String.format("Failed to refresh host '%s' packages availability, another refresh process is already running.", host.getName()); org.ovirt.engine.core.bll.host.AvailableUpdatesFinder.log.warn(error); throw new java.lang.RuntimeException(error); } try { upgradeCheckInProgressMap.put(host.getId(), true); return create(host.getVdsType()).checkForUpdates(host); } finally { upgradeCheckInProgressMap.remove(host.getId()); } }	public org.ovirt.engine.core.common.HostUpgradeManagerResult checkForUpdates(org.ovirt.engine.core.common.businessentities.VDS host) { if (upgradeCheckInProgressMap.getOrDefault(host.getId(), false)) { java.lang.String error = java.lang.String.format("Failed to refresh host '%s' packages availability, another refresh process is already running.", host.getName()); throw new java.lang.IllegalStateException(error); } try { upgradeCheckInProgressMap.put(host.getId(), true); return create(host.getVdsType()).checkForUpdates(host); } finally { upgradeCheckInProgressMap.remove(host.getId()); } }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { log.debug("Entered SsoPostLoginFilter"); javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); try { java.lang.String engineSessionId = ((java.lang.String) (req.getAttribute(SessionConstants.HTTP_SESSION_ENGINE_SESSION_ID_KEY))); if ((org.apache.commons.lang.StringUtils.isEmpty(engineSessionId)) && ((req.getSession(false)) != null)) { engineSessionId = ((java.lang.String) (req.getSession(false).getAttribute(SessionConstants.HTTP_SESSION_ENGINE_SESSION_ID_KEY))); } if (org.apache.commons.lang.StringUtils.isNotEmpty(engineSessionId)) { javax.naming.InitialContext ctx = new javax.naming.InitialContext(); try { java.lang.String ssoToken = ((java.lang.String) (runQuery(VdcQueryType.GetEngineSessionIdToken, engineSessionId, ctx))); java.lang.Object loggedInUser = runQuery(VdcQueryType.GetUserBySessionId, engineSessionId, ctx); if (loggedInUser != null) { log.debug("Adding userInfo to session"); req.getSession(true).setAttribute(org.ovirt.engine.core.aaa.filters.SsoPostLoginFilter.ATTR_USER_INFO, getUserInfoObject(((org.ovirt.engine.core.common.businessentities.aaa.DbUser) (loggedInUser)), ssoToken)); } else { log.warn("Failed to find logged user by sessionId"); } chain.doFilter(request, response); } finally { ctx.close(); } } else { log.warn(("Missing sessionId in either request or session scope. " + "Please configure SSO properly with SsoPostLoginServlet.")); } } catch (java.lang.Exception ex) { log.error("Unable to get token for engine session {}", ex.getMessage()); log.debug("Exception", ex); } log.debug("Exiting SsoPostLoginFilter"); }	@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { log.debug("Entered SsoPostLoginFilter"); javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); try { java.lang.String engineSessionId = ((java.lang.String) (req.getAttribute(SessionConstants.HTTP_SESSION_ENGINE_SESSION_ID_KEY))); if ((org.apache.commons.lang.StringUtils.isEmpty(engineSessionId)) && ((req.getSession(false)) != null)) { engineSessionId = ((java.lang.String) (req.getSession(false).getAttribute(SessionConstants.HTTP_SESSION_ENGINE_SESSION_ID_KEY))); } if (org.apache.commons.lang.StringUtils.isNotEmpty(engineSessionId)) { javax.naming.InitialContext ctx = new javax.naming.InitialContext(); try { java.lang.String ssoToken = ((java.lang.String) (runQuery(VdcQueryType.GetEngineSessionIdToken, engineSessionId, ctx))); java.lang.Object loggedInUser = runQuery(VdcQueryType.GetUserBySessionId, engineSessionId, ctx); if (loggedInUser != null) { log.debug("Adding userInfo to session"); req.getSession(true).setAttribute(org.ovirt.engine.core.aaa.filters.SsoPostLoginFilter.ATTR_USER_INFO, getUserInfoObject(((org.ovirt.engine.core.common.businessentities.aaa.DbUser) (loggedInUser)), ssoToken)); } else { log.info("Failed to find logged user by sessionId"); } chain.doFilter(request, response); } finally { ctx.close(); } } else { log.warn(("Missing sessionId in either request or session scope. " + "Please configure SSO properly with SsoPostLoginServlet.")); } } catch (java.lang.Exception ex) { log.error("Unable to get token for engine session {}", ex.getMessage()); log.debug("Exception", ex); } log.debug("Exiting SsoPostLoginFilter"); }
public java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> getVmInitByIds(java.util.List<org.ovirt.engine.core.compat.Guid> ids) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> all = vmInitDao.getVmInitByIds(ids); for (org.ovirt.engine.core.common.businessentities.VmInit vmInit : all) { vmInit.setPasswordAlreadyStored((!(org.apache.commons.lang.StringUtils.isEmpty(vmInit.getRootPassword())))); vmInit.setRootPassword(null); } return all; }	public java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> getVmInitWithoutPasswordByIds(java.util.List<org.ovirt.engine.core.compat.Guid> ids) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> all = vmInitDao.getVmInitByIds(ids); for (org.ovirt.engine.core.common.businessentities.VmInit vmInit : all) { vmInit.setPasswordAlreadyStored((!(org.apache.commons.lang.StringUtils.isEmpty(vmInit.getRootPassword())))); vmInit.setRootPassword(null); } return all; }
@java.lang.Override protected void executeQueryCommand() { if ((org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getIds()) != null) { org.ovirt.engine.core.bll.GetVmsInitQuery.getQueryReturnValue().setReturnValue(vmHandler.getVmInitByIds(org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getIds())); } }	@java.lang.Override protected void executeQueryCommand() { if ((org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getIds()) != null) { org.ovirt.engine.core.bll.GetVmsInitQuery.getQueryReturnValue().setReturnValue(vmHandler.getVmInitWithoutPasswordByIds(org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getIds())); } }
@java.lang.Override public boolean test(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { return (diskStorageType) == (disk.getDiskStorageType()); }	@java.lang.Override public boolean test(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { return (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.forClass(implementingDiskType)) == (disk.getDiskStorageType()); }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> getCinderDisksToBeRemoved() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> imageDisks = org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getParameters().cinderDisks; java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = new java.util.ArrayList<>(); if (imageDisks == null) { cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getVmId())); } else { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : imageDisks) { cinderDisks.add(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (diskImage))); } } return cinderDisks; }	private java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> getCinderDisksToBeRemoved() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> imageDisks = org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getParameters().cinderDisks; java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = new java.util.ArrayList<>(); if (imageDisks == null) { cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(diskDao.getAllForVm(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getVmId())); } else { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : imageDisks) { cinderDisks.add(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (diskImage))); } } return cinderDisks; }
@java.lang.Override protected void init() { super.init(); org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmDao().get(getVmIdFromSnapshot()); org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); boolean isCinderDisksExist = !(org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(vm.getDiskList()).isEmpty()); org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters().setUseCinderCommandCallback(isCinderDisksExist); }	@java.lang.Override protected void init() { super.init(); org.ovirt.engine.core.common.businessentities.VM vm = vmDao.get(getVmIdFromSnapshot()); vmHandler.updateDisksFromDb(vm); boolean isCinderDisksExist = !(org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(vm.getDiskList()).isEmpty()); org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters().setUseCinderCommandCallback(isCinderDisksExist); }
public boolean validateCinder() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVmId())); if (!(cinderDisks.isEmpty())) { org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator cinderDisksValidator = getCinderDisksValidator(cinderDisks); return validate(cinderDisksValidator.validateCinderDiskLimits()); } return true; }	public boolean validateCinder() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(diskDao.getAllForVm(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVmId())); if (!(cinderDisks.isEmpty())) { org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator cinderDisksValidator = getCinderDisksValidator(cinderDisks); return validate(cinderDisksValidator.validateCinderDiskLimits()); } return true; }
public boolean validateCinder() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVmId())); if (!(cinderDisks.isEmpty())) { org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator cinderDisksValidator = getCinderDisksValidator(cinderDisks); return validate(cinderDisksValidator.validateCinderDiskSnapshotsLimits()); } return true; }	public boolean validateCinder() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(diskDao.getAllForVm(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVmId())); if (!(cinderDisks.isEmpty())) { org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator cinderDisksValidator = getCinderDisksValidator(cinderDisks); return validate(cinderDisksValidator.validateCinderDiskSnapshotsLimits()); } return true; }
private void addRedundantCinderSnapshots(org.ovirt.engine.core.compat.Guid previewedSnapshotId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesFromActiveSnapshot) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderImagesForPreviewedSnapshot = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getDiskImageDao().getAllSnapshotsForVmSnapshot(previewedSnapshotId)); java.util.Set<org.ovirt.engine.core.compat.Guid> criticalSnapshotsChain = getCriticalSnapshotsChain(imagesFromActiveSnapshot, cinderImagesForPreviewedSnapshot); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : cinderImagesForPreviewedSnapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> redundantSnapshotIdsToDelete = org.ovirt.engine.core.bll.storage.connection.CINDERStorageHelper.getRedundantVolumesToDeleteAfterCommitSnapshot(image.getId(), criticalSnapshotsChain); snapshotsToRemove.addAll(redundantSnapshotIdsToDelete.stream().filter(( snapIdToDelete) -> isSnapshotEligibleToBeDeleted(getSnapshotDao().get(snapIdToDelete))).collect(java.util.stream.Collectors.toList())); } }	private void addRedundantCinderSnapshots(org.ovirt.engine.core.compat.Guid previewedSnapshotId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesFromActiveSnapshot) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderImagesForPreviewedSnapshot = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(diskImageDao.getAllSnapshotsForVmSnapshot(previewedSnapshotId)); java.util.Set<org.ovirt.engine.core.compat.Guid> criticalSnapshotsChain = getCriticalSnapshotsChain(imagesFromActiveSnapshot, cinderImagesForPreviewedSnapshot); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : cinderImagesForPreviewedSnapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> redundantSnapshotIdsToDelete = org.ovirt.engine.core.bll.storage.connection.CINDERStorageHelper.getRedundantVolumesToDeleteAfterCommitSnapshot(image.getId(), criticalSnapshotsChain); snapshotsToRemove.addAll(redundantSnapshotIdsToDelete.stream().filter(( snapIdToDelete) -> isSnapshotEligibleToBeDeleted(org.ovirt.engine.core.bll.snapshots.snapshotDao.get(snapIdToDelete))).collect(java.util.stream.Collectors.toList())); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) { imagesToPreview = ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks()) != null) ? org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks() : org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getDbFacade().getDiskImageDao().getAllSnapshotsForVmSnapshot(getDstSnapshot().getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(imagesToPreview, org.ovirt.engine.core.bll.snapshots.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.snapshots.ONLY_SNAPABLE); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }	private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) { imagesToPreview = ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks()) != null) ? org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks() : diskImageDao.getAllSnapshotsForVmSnapshot(getDstSnapshot().getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(imagesToPreview, org.ovirt.engine.core.bll.snapshots.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.snapshots.ONLY_SNAPABLE); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }
@org.junit.Test public void testImportVMFromConfigurationXMLCouldNotGetParsed() { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntity = getOvfEntityData(); ovfEntity.setOvfData("This is not a valid XML"); initCommand(ovfEntity); java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> ovfEntityDataList = new java.util.ArrayList<>(); ovfEntityDataList.add(ovfEntity); when(unregisteredOVFDataDao.getByEntityIdAndStorageDomain(vmId, org.ovirt.engine.core.bll.exportimport.ImportVMFromConfigurationCommandTest.storageDomainId)).thenReturn(ovfEntityDataList); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), any(java.lang.Boolean.class), any(java.util.Map.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED); }	@org.junit.Test public void testImportVMFromConfigurationXMLCouldNotGetParsed() { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntity = getOvfEntityData(); ovfEntity.setOvfData("This is not a valid XML"); initCommand(ovfEntity); java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> ovfEntityDataList = new java.util.ArrayList<>(); ovfEntityDataList.add(ovfEntity); when(unregisteredOVFDataDao.getByEntityIdAndStorageDomain(vmId, org.ovirt.engine.core.bll.exportimport.ImportVMFromConfigurationCommandTest.storageDomainId)).thenReturn(ovfEntityDataList); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED); }
protected boolean setAndValidateDiskProfiles() { if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm().getDiskMap()) != null) { java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskImage, org.ovirt.engine.core.compat.Guid> map = new java.util.HashMap<>(); java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm().getDiskMap().values(); if (org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getAllowPartialImport()) { disks = disks.stream().filter(( disk) -> getImages().stream().anyMatch(( image) -> image.getId().equals(disk.getId()))).collect(java.util.stream.Collectors.toList()); } for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); map.put(diskImage, imageToDestinationDomainMap.get(diskImage.getId())); } } return validate(diskProfileHelper.setAndValidateDiskProfiles(map, org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getCurrentUser())); } return true; }	protected boolean setAndValidateDiskProfiles() { if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm().getDiskMap()) != null) { java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskImage, org.ovirt.engine.core.compat.Guid> map = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : getDisksForDiskProfileValidation()) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); map.put(diskImage, imageToDestinationDomainMap.get(diskImage.getId())); } } return validate(diskProfileHelper.setAndValidateDiskProfiles(map, org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getCurrentUser())); } return true; }
@org.junit.Test public void testImportVMFromConfigurationWhenStorageDomainIsInactive() { initCommand(getOvfEntityData()); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomain(); storageDomain.setStatus(StorageDomainStatus.Inactive); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), any(java.lang.Boolean.class), any(java.util.Map.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2); }	@org.junit.Test public void testImportVMFromConfigurationWhenStorageDomainIsInactive() { initCommand(getOvfEntityData()); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomain(); storageDomain.setStatus(StorageDomainStatus.Inactive); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class))).thenReturn(ValidationResult.VALID); when(validator.validateStorageExistForUnregisteredEntity(anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), any(java.lang.Boolean.class), any(java.util.Map.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2); }
@java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget()) { if (!(validateExternalVnicProfileMapping())) { return false; } if (!(validateMacs(vmFromConfiguration))) { return false; } org.ovirt.engine.core.bll.validator.ImportValidator importValidator = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImportValidator(); if (!(validate(importValidator.validateUnregisteredEntity(vmFromConfiguration, ovfEntityData, org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImages(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getAllowPartialImport(), imageToDestinationDomainMap)))) { return false; } setImagesWithStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVm().getImages()); } return super.validate(); }	@java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget()) { if (!(validateExternalVnicProfileMapping())) { return false; } if (!(validateMacs(vmFromConfiguration))) { return false; } org.ovirt.engine.core.bll.validator.ImportValidator importValidator = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImportValidator(); if (!(validate(importValidator.validateUnregisteredEntity(vmFromConfiguration, ovfEntityData)))) { return false; } if (!(validate(importValidator.validateStorageExistForUnregisteredEntity(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImages(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getAllowPartialImport(), imageToDestinationDomainMap)))) { return false; } setImagesWithStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVm().getImages()); } return super.validate(); }
@org.junit.Test public void testImportVMFromConfigurationWhenStorageDomainIsInMaintenance() { initCommand(getOvfEntityData()); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomain(); storageDomain.setStatus(StorageDomainStatus.Maintenance); doReturn(storageDomain).when(cmd).getStorageDomain(); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), any(java.lang.Boolean.class), any(java.util.Map.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2); }	@org.junit.Test public void testImportVMFromConfigurationWhenStorageDomainIsInMaintenance() { initCommand(getOvfEntityData()); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomain(); storageDomain.setStatus(StorageDomainStatus.Maintenance); doReturn(storageDomain).when(cmd).getStorageDomain(); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class))).thenReturn(ValidationResult.VALID); when(validator.validateStorageExistForUnregisteredEntity(anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), any(java.lang.Boolean.class), any(java.util.Map.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2); }
@org.junit.Test public void testPositiveImportVmFromConfiguration() { initCommand(getOvfEntityData()); doReturn(storagePool).when(cmd).getStoragePool(); doReturn(java.lang.Boolean.TRUE).when(cmd).validateAfterCloneVm(anyMapOf(org.ovirt.engine.core.compat.Guid.class, org.ovirt.engine.core.common.businessentities.StorageDomain.class)); doReturn(java.lang.Boolean.TRUE).when(cmd).validateBeforeCloneVm(anyMapOf(org.ovirt.engine.core.compat.Guid.class, org.ovirt.engine.core.common.businessentities.StorageDomain.class)); final org.ovirt.engine.core.common.businessentities.VM expectedVm = cmd.getVm(); when(externalVmMacsFinder.findExternalMacAddresses(eq(expectedVm), any(org.ovirt.engine.core.bll.context.CommandContext.class))).thenReturn(java.util.Collections.emptySet()); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), any(java.lang.Boolean.class), any(java.util.Map.class))).thenReturn(ValidationResult.VALID); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(cmd); }	@org.junit.Test public void testPositiveImportVmFromConfiguration() { initCommand(getOvfEntityData()); doReturn(storagePool).when(cmd).getStoragePool(); doReturn(java.lang.Boolean.TRUE).when(cmd).validateAfterCloneVm(anyMapOf(org.ovirt.engine.core.compat.Guid.class, org.ovirt.engine.core.common.businessentities.StorageDomain.class)); doReturn(java.lang.Boolean.TRUE).when(cmd).validateBeforeCloneVm(anyMapOf(org.ovirt.engine.core.compat.Guid.class, org.ovirt.engine.core.common.businessentities.StorageDomain.class)); final org.ovirt.engine.core.common.businessentities.VM expectedVm = cmd.getVm(); when(externalVmMacsFinder.findExternalMacAddresses(eq(expectedVm), any(org.ovirt.engine.core.bll.context.CommandContext.class))).thenReturn(java.util.Collections.emptySet()); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class))).thenReturn(ValidationResult.VALID); when(validator.validateStorageExistForUnregisteredEntity(anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), any(java.lang.Boolean.class), any(java.util.Map.class))).thenReturn(ValidationResult.VALID); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(cmd); }
public void performPendingOperations() { java.util.Queue<java.util.concurrent.Future<?>> operations = pendingOperations; pendingOperations = new java.util.concurrent.ConcurrentLinkedQueue<>(); while (!(operations.isEmpty())) { ((java.util.concurrent.FutureTask) (operations.poll())).run(); } }	public void performPendingOperations() { while (!(pendingOperations.isEmpty())) { ((java.util.concurrent.FutureTask) (pendingOperations.poll())).run(); } }
@org.junit.Test public void testUpdate() { dao.save(vnicProfile); vnicProfile.setPortMirroring(true); vnicProfile.setPassthrough(true); vnicProfile.setMigratable(true); dao.update(vnicProfile); org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(vnicProfile.getId()); assertNotNull(result); assertEquals(vnicProfile.getId(), result.getId()); assertTrue(result.isPortMirroring()); assertTrue(result.isPassthrough()); assertTrue(result.isMigratable()); }	@org.junit.Test public void testUpdate() { dao.save(vnicProfile); vnicProfile.setPortMirroring(true); vnicProfile.setPassthrough(true); vnicProfile.setMigratable(true); dao.update(vnicProfile); org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(vnicProfile.getId()); assertNotNull(result); assertEquals(vnicProfile.getId(), result.getId()); assertTrue(result.isPortMirroring()); assertTrue(result.isPassthrough()); assertEquals(vnicProfile.getNetworkFilterId(), result.getNetworkFilterId()); assertTrue(result.isMigratable()); }
@org.junit.Test public void testSave() { dao.save(vnicProfile); org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(vnicProfile.getId()); assertNotNull(result); assertEquals(vnicProfile.getId(), result.getId()); assertFalse(result.isPortMirroring()); assertFalse(result.isPassthrough()); assertTrue(result.isMigratable()); }	@org.junit.Test public void testSave() { dao.save(vnicProfile); org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(vnicProfile.getId()); assertNotNull(result); assertEquals(vnicProfile.getId(), result.getId()); assertFalse(result.isPortMirroring()); assertFalse(result.isPassthrough()); assertEquals(vnicProfile.getNetworkFilterId(), result.getNetworkFilterId()); assertTrue(result.isMigratable()); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(customProperties, id, name, networkId, networkQosId, portMirroring, passthrough, migratable, description); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(customProperties, id, name, networkId, networkQosId, portMirroring, passthrough, migratable, description, networkFilterId); }
@org.junit.Test public void testGetWithPassthrough() { org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(FixturesTool.VM_NETWORK_INTERFACE_PASSTHROUGH_PROFILE); assertNotNull(result); assertEquals(FixturesTool.VM_NETWORK_INTERFACE_PASSTHROUGH_PROFILE, result.getId()); assertTrue(result.isPassthrough()); assertTrue(result.isMigratable()); }	@org.junit.Test public void testGetWithPassthrough() { org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(FixturesTool.VM_NETWORK_INTERFACE_PASSTHROUGH_PROFILE); assertNotNull(result); assertEquals(FixturesTool.VM_NETWORK_INTERFACE_PASSTHROUGH_PROFILE, result.getId()); assertTrue(result.isPassthrough()); assertFalse(result.isMigratable()); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", getId()).append("networkId", getNetworkId()).append("networkQosId", getNetworkQosId()).append("portMirroring", isPortMirroring()).append("passthrough", isPassthrough()).append("migratable", isMigratable()).append("customProperties", getCustomProperties()).append("description", getDescription()).build(); }	@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", getId()).append("networkId", getNetworkId()).append("networkQosId", getNetworkQosId()).append("portMirroring", isPortMirroring()).append("passthrough", isPassthrough()).append("migratable", isMigratable()).append("customProperties", getCustomProperties()).append("description", getDescription()).append("networkFilterId", getNetworkFilterId()).build(); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.network.VnicProfile)) { return false; } org.ovirt.engine.core.common.businessentities.network.VnicProfile other = ((org.ovirt.engine.core.common.businessentities.network.VnicProfile) (obj)); return ((((((((java.util.Objects.equals(customProperties, other.customProperties)) && (java.util.Objects.equals(id, other.id))) && (java.util.Objects.equals(name, other.name))) && (java.util.Objects.equals(networkId, other.networkId))) && (java.util.Objects.equals(networkQosId, other.networkQosId))) && ((portMirroring) == (other.portMirroring))) && ((passthrough) == (other.passthrough))) && ((migratable) == (other.migratable))) && (java.util.Objects.equals(description, other.description)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.network.VnicProfile)) { return false; } org.ovirt.engine.core.common.businessentities.network.VnicProfile other = ((org.ovirt.engine.core.common.businessentities.network.VnicProfile) (obj)); return (((((((((java.util.Objects.equals(customProperties, other.customProperties)) && (java.util.Objects.equals(id, other.id))) && (java.util.Objects.equals(name, other.name))) && (java.util.Objects.equals(networkId, other.networkId))) && (java.util.Objects.equals(networkQosId, other.networkQosId))) && ((portMirroring) == (other.portMirroring))) && ((passthrough) == (other.passthrough))) && ((migratable) == (other.migratable))) && (java.util.Objects.equals(description, other.description))) && (java.util.Objects.equals(networkFilterId, other.networkFilterId)); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getVnicProfileDao(); vnicProfile = new org.ovirt.engine.core.common.businessentities.network.VnicProfile(); vnicProfile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vnicProfile.setName("new_profile"); vnicProfile.setNetworkId(FixturesTool.NETWORK_ENGINE); vnicProfile.setNetworkQosId(FixturesTool.NETWORK_QOS); vnicProfile.setPortMirroring(false); vnicProfile.setPassthrough(false); vnicProfile.setMigratable(true); }	@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getVnicProfileDao(); vnicProfile = new org.ovirt.engine.core.common.businessentities.network.VnicProfile(); vnicProfile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vnicProfile.setName("new_profile"); vnicProfile.setNetworkId(FixturesTool.NETWORK_ENGINE); vnicProfile.setNetworkQosId(FixturesTool.NETWORK_QOS); vnicProfile.setPortMirroring(false); vnicProfile.setPassthrough(false); vnicProfile.setNetworkFilterId(FixturesTool.VNIC_PROFILE_NETWORK_FILTER); vnicProfile.setMigratable(true); }
private org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface mockVnic(boolean passthrough, boolean migratable) { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = mock(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface.class); org.ovirt.engine.core.compat.Guid vnicId = org.ovirt.engine.core.compat.Guid.newGuid(); when(vnic.getId()).thenReturn(vnicId); when(vnic.isPassthrough()).thenReturn(passthrough); org.ovirt.engine.core.common.businessentities.network.VnicProfile profile = mock(org.ovirt.engine.core.common.businessentities.network.VnicProfile.class); when(vnicProfileDao.get(vnicId)).thenReturn(profile); when(profile.isMigratable()).thenReturn(migratable); return vnic; }	private void mockVnics(java.util.stream.Stream<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vNics = vnics.collect(java.util.stream.Collectors.toList()); when(vmNetworkInterfaceDao.getAllForVm(vm.getId())).thenReturn(vNics); }
@org.junit.Test public void allPassthroughVnicsMigratableNoPassthroughVnics() { allPassthroughVnicsMigratableCommon(vm.getId(), 2); assertThatAllPassthroughVnicsMigratable(true); }	@org.junit.Test public void allPassthroughVnicsMigratableForRegularVnics() { mockVnics(createRegularNics(2)); assertThatAllPassthroughVnicsMigratable(true); }
public org.ovirt.engine.core.bll.ValidationResult allPassthroughVnicsMigratable() { for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = getDbFacade().getVmNetworkInterfaceDao().getAllForVm(vm.getId()); java.util.List<java.lang.String> nonMigratablePassthroughVnicNames = vnics.stream().filter(isVnicMigratable(vm).negate()).map(VmNic::getName).collect(java.util.stream.Collectors.toList()); if (!(nonMigratablePassthroughVnicNames.isEmpty())) { java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith("interfaces", nonMigratablePassthroughVnicNames); replacements.add(java.lang.String.format("$vmName %s", vm.getName())); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED, replacements); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult allPassthroughVnicsMigratable() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = getDbFacade().getVmNetworkInterfaceDao().getAllForVm(vm.getId()); java.util.List<java.lang.String> nonMigratablePassthroughVnicNames = vnics.stream().filter(isVnicMigratable(vm).negate()).map(VmNic::getName).collect(java.util.stream.Collectors.toList()); if (!(nonMigratablePassthroughVnicNames.isEmpty())) { java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith("interfaces", nonMigratablePassthroughVnicNames); replacements.add(java.lang.String.format("$vmName %s", vm.getName())); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED, replacements); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private java.util.function.Predicate<? super org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> isVnicMigratable(org.ovirt.engine.core.common.businessentities.VM vm) { return ( vnic) -> (!(vnic.isPassthrough())) || ((org.ovirt.engine.core.common.FeatureSupported.sriovHotPlugSupported(vm.getClusterCompatibilityVersion())) && (getVnicProfile(vnic).isMigratable())); }	private java.util.function.Predicate<? super org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> isVnicMigratable(org.ovirt.engine.core.common.businessentities.VM vm) { return ( vnic) -> ((!(vnic.isPassthrough())) || (!(vnic.isPlugged()))) || ((org.ovirt.engine.core.common.FeatureSupported.sriovHotPlugSupported(vm.getClusterCompatibilityVersion())) && (getVnicProfile(vnic).isMigratable())); }
@org.junit.Test public void notAllPassthroughVnicsMigratable() { vmNotHavingPassthroughVnicsCommon(vm.getId(), 2, 1, 3); assertThat(validator.allPassthroughVnicsMigratable(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED)); }	@org.junit.Test public void thereIsPluggedPassthroughNonMigratableVnic() { mockVnics(createNonMigratablePassthroughNics(1, true)); assertThatAllPassthroughVnicsMigratable(false); }
@org.junit.Test public void allPassthroughVnicsMigratableMulitpleVmsNotValid() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = initValidatorWithMultipleVms(3); allPassthroughVnicsMigratableCommon(vmList.get(0).getId(), 2); vmNotHavingPassthroughVnicsCommon(vmList.get(1).getId(), 0, 1, 8); allPassthroughVnicsMigratableCommon(vmList.get(2).getId(), 4); assertThat(validator.allPassthroughVnicsMigratable(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED)); }	@org.junit.Test public void passthroughVnicsMigrationIsNotSupported() { mockVnics(createMigratablePassthroughNics(1, true)); vm.setClusterCompatibilityVersion(Version.v3_6); assertThatAllPassthroughVnicsMigratable(false); }
@org.junit.Test public void allPassthroughVnicsMigratableMulitpleVmsValid() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = initValidatorWithMultipleVms(2); allPassthroughVnicsMigratableCommon(vmList.get(0).getId(), 2); allPassthroughVnicsMigratableCommon(vmList.get(1).getId(), 8); assertThat(validator.allPassthroughVnicsMigratable(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }	@org.junit.Test public void allPassthroughNonMigratableNicsAreUnplugged() { mockVnics(createNonMigratablePassthroughNics(2, false)); assertThatAllPassthroughVnicsMigratable(true); }
@org.junit.Test public void allPassthroughVnicsMigratable() { vmNotHavingPassthroughVnicsCommon(vm.getId(), 2, 0, 3); assertThatAllPassthroughVnicsMigratable(true); }	@org.junit.Test public void allPassthroughVnicsMigratable() { mockVnics(java.util.stream.Stream.concat(createMigratablePassthroughNics(2, false), createRegularNics(3))); assertThatAllPassthroughVnicsMigratable(true); }
@org.junit.Test public void allPassthroughVnicsMigratableNoVnics() { allPassthroughVnicsMigratableCommon(vm.getId(), 0); assertThatAllPassthroughVnicsMigratable(true); }	@org.junit.Test public void allPassthroughVnicsMigratableForEmptyVnicList() { mockVnics(createRegularNics(0)); assertThatAllPassthroughVnicsMigratable(true); }
private void populateInventoryCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Inventory inventory = lookupInventory(); long endTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.inventoryCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_KEY, inventory, 15, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Inventoy cache updated in {}ms", (endTime - startTime)); }	private org.ovirt.engine.ui.frontend.server.dashboard.Inventory populateInventoryCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Inventory inventory = lookupInventory(); long endTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.inventoryCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_KEY, inventory, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_CACHE_UPDATE_INTERVAL, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Dashboard inventoy cache updated in {}ms", (endTime - startTime)); return inventory; }
@java.lang.Override public void run() { log.debug("Attempting to update the Inventory cache"); try { populateInventoryCache(); } catch (org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException e) { log.error("Could not update the Inventory Cache: {}", e.getMessage(), e); } }	@java.lang.Override public void run() { log.trace("Attempting to update the Inventory cache"); try { populateInventoryCache(); } catch (org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException e) { log.error("Could not update the Inventory Cache: {}", e.getMessage(), e); } }
@javax.annotation.PreDestroy private void stopScheduledTasks() { dashboardCacheUpdate.cancel(true); inventoryCacheUpdate.cancel(true); }	@javax.annotation.PreDestroy private void stopScheduledTasks() { if ((utilizationCacheUpdate) != null) { utilizationCacheUpdate.cancel(true); } if ((inventoryCacheUpdate) != null) { inventoryCacheUpdate.cancel(true); } }
private void populateDashboardCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Dashboard dashboard = getDashboard(); long endTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.dashboardCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_KEY, dashboard, 5, java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Dashboard cache updated in {}ms", (endTime - startTime)); }	private org.ovirt.engine.ui.frontend.server.dashboard.Dashboard populateUtilizationCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Dashboard dashboard = getDashboard(); long endTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.dashboardCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_KEY, dashboard, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_CACHE_UPDATE_INTERVAL, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Dashboard utilization cache updated in {}ms", (endTime - startTime)); return dashboard; }
private org.ovirt.engine.ui.frontend.server.dashboard.Dashboard getDashboardFromCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.Dashboard dashboard; org.ovirt.engine.ui.frontend.server.dashboard.Inventory inventory; synchronized(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_LOCK) { dashboard = org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.dashboardCache.get(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_KEY); if (dashboard == null) { org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Dashboard cache is empty, querying dashboard data directly"); dashboard = getDashboard(); } inventory = org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.inventoryCache.get(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_KEY); if (inventory == null) { org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Inventory cache is empty, querying inventory data directly"); inventory = lookupInventory(); } } dashboard.setInventory(inventory); return dashboard; }	private org.ovirt.engine.ui.frontend.server.dashboard.Dashboard getDashboardFromCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.Dashboard dashboard; org.ovirt.engine.ui.frontend.server.dashboard.Inventory inventory; synchronized(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_LOCK) { dashboard = org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.dashboardCache.get(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_KEY); if (dashboard == null) { dashboard = populateUtilizationCache(); } inventory = org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.inventoryCache.get(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_KEY); if (inventory == null) { inventory = populateInventoryCache(); } } dashboard.setInventory(inventory); return dashboard; }
@java.lang.Override public void run() { log.debug("Attempting to update the Dashboard cache"); try { populateDashboardCache(); } catch (org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException e) { log.error("Could not update the Dashboard Cache: {}", e.getMessage(), e); } }	@java.lang.Override public void run() { log.trace("Attempting to update the Utilization cache"); try { populateUtilizationCache(); } catch (org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException e) { log.error("Could not update the Utilization Cache: {}", e.getMessage(), e); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { updateSysprepVisibility(object); autoSetVmHostname(object); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { updateSysprepVisibility(object); if (java.lang.Boolean.TRUE.equals(object.getIsSysprepEnabled().getEntity())) { runOnceModel.autoSetVmHostname(); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { updateCloudInitVisibility(object); autoSetVmHostname(object); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { updateCloudInitVisibility(object); if (java.lang.Boolean.TRUE.equals(object.getIsCloudInitEnabled().getEntity())) { runOnceModel.autoSetVmHostname(); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand((org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().isCreateImage() ? org.ovirt.engine.core.common.vdscommands.VDSCommandType.CreateImage : org.ovirt.engine.core.common.vdscommands.VDSCommandType.CreateSnapshot), getCreateVDSCommandParameters()); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().setVdsmTaskIds(new java.util.ArrayList()); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVdsmTaskIds().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getTaskIdList().add(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVdsmTaskIds().get(0)); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.setSucceeded(true); } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.CreateSnapshot, getCreateVDSCommandParameters()); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().setVdsmTaskIds(new java.util.ArrayList()); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVdsmTaskIds().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getTaskIdList().add(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVdsmTaskIds().get(0)); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.setSucceeded(true); } }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return (org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getParameters().isUseCinderCommandCallback()) || (org.ovirt.engine.core.common.FeatureSupported.dataOperationsByHSM(org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getStoragePool().getCompatibilityVersion())) ? new org.ovirt.engine.core.bll.ConcurrentChildCommandsExecutionCallback() : null; }	@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return new org.ovirt.engine.core.bll.ConcurrentChildCommandsExecutionCallback(); }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { if (org.ovirt.engine.core.bll.CreateCloneOfTemplateCommand.isDataOperationsByHSM()) { return new org.ovirt.engine.core.bll.ConcurrentChildCommandsExecutionCallback(); } return null; }	@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return org.ovirt.engine.core.bll.CreateCloneOfTemplateCommand.isDataOperationsByHSM() ? new org.ovirt.engine.core.bll.ConcurrentChildCommandsExecutionCallback() : null; }
private void updateVmStatistics() { statistics = getVmManager().getStatistics(); java.lang.Integer reportedMigrationProgress = vdsmVm.getVmStatistics().getMigrationProgressPercent(); boolean updateMigrationProgress = (reportedMigrationProgress == null) || (getVmManager().getVmCompatibilityVersion().less(Version.v4_1)); statistics.updateRuntimeData(vdsmVm.getVmStatistics(), getVmManager().getNumOfCpus(), updateMigrationProgress); }	private void updateVmStatistics() { statistics = getVmManager().getStatistics(); java.lang.Integer reportedMigrationProgress = vdsmVm.getVmStatistics().getMigrationProgressPercent(); boolean updateMigrationProgress = (reportedMigrationProgress == null) || (getVmManager().getClusterCompatibilityVersion().less(Version.v4_1)); statistics.updateRuntimeData(vdsmVm.getVmStatistics(), getVmManager().getNumOfCpus(), updateMigrationProgress); }
@java.lang.Override public void onNext(java.util.Map<java.lang.String, java.lang.Object> map) { try { map.entrySet().stream().forEach(( vmInfo) -> { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid(vmInfo.getKey()); java.util.Map<?, ?> properties = ((java.util.Map<?, ?>) (vmInfo.getValue())); int progress = java.lang.Integer.valueOf(properties.get("progress").toString()); org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics = resourceManager.getVmManager(vmId).getStatistics(); vmStatistics.setMigrationProgressPercent(progress); }); } finally { subscription.request(1); } }	@java.lang.Override public void onNext(java.util.Map<java.lang.String, java.lang.Object> map) { try { map.remove(VdsProperties.notify_time); map.entrySet().stream().forEach(( vmInfo) -> { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid(vmInfo.getKey()); java.util.Map<?, ?> properties = ((java.util.Map<?, ?>) (vmInfo.getValue())); int progress = java.lang.Integer.valueOf(properties.get(VdsProperties.vm_migration_progress).toString()); org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics = resourceManager.getVmManager(vmId).getStatistics(); vmStatistics.setMigrationProgressPercent(progress); }); } finally { subscription.request(1); } }
private void updateStaticFields(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { name = vmStatic.getName(); origin = vmStatic.getOrigin(); autoStart = vmStatic.isAutoStartup(); memSizeMb = vmStatic.getMemSizeMb(); minAllocatedMem = vmStatic.getMinAllocatedMem(); numOfCpus = vmStatic.getNumOfCpus(); clusterId = vmStatic.getClusterId(); }	private void updateStaticFields(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { name = vmStatic.getName(); origin = vmStatic.getOrigin(); autoStart = vmStatic.isAutoStartup(); memSizeMb = vmStatic.getMemSizeMb(); minAllocatedMem = vmStatic.getMinAllocatedMem(); numOfCpus = vmStatic.getNumOfCpus(); clusterCompatibilityVersion = clusterDao.get(vmStatic.getClusterId()).getCompatibilityVersion(); }
public org.ovirt.engine.core.compat.Version getVmCompatibilityVersion() { return clusterDao.get(clusterId).getCompatibilityVersion(); }	public org.ovirt.engine.core.compat.Version getClusterCompatibilityVersion() { return clusterCompatibilityVersion; }
@java.lang.Override public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.Boolean value, com.google.gwt.safehtml.shared.SafeHtml tooltipHtml, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.Boolean> valueUpdater) { java.lang.String tooltip; if (tooltipHtml == null) { tooltip = getTooltip(value); } else { tooltip = tooltipHtml.asString(); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, parent); super.onBrowserEvent(context, parent, value, event, valueUpdater); }	@java.lang.Override public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.Boolean value, java.lang.String tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.Boolean> valueUpdater) { java.lang.String tooltip; if (tooltipContent == null) { tooltip = getTooltip(value); } else { tooltip = tooltipContent; } org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipUtils.setTooltipOnElement(tooltip, parent); super.onBrowserEvent(context, parent, value, event, valueUpdater); }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { if (tooltipContent == null) { tooltipContent = getTooltip(value); } if (BrowserEvents.MOUSEOVER.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltipContent.asString(), parent); } }	@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, java.lang.String tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { if (tooltipContent == null) { tooltipContent = getTooltip(value); } if (BrowserEvents.MOUSEOVER.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipUtils.setTooltipOnElement(tooltipContent, parent); } }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml tooltipHtml, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { java.lang.String tooltip; if (tooltipHtml == null) { tooltip = getTooltip(value); } else { tooltip = tooltipHtml.asString(); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, parent); if (BrowserEvents.MOUSEOVER.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, parent); } super.onBrowserEvent(context, parent, value, event, valueUpdater); }	public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, java.lang.String tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { java.lang.String tooltip; if (tooltipContent == null) { tooltip = getTooltip(value); } else { tooltip = tooltipContent; } org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipUtils.setTooltipOnElement(tooltip, parent); if (BrowserEvents.MOUSEOVER.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipUtils.setTooltipOnElement(tooltip, parent); } super.onBrowserEvent(context, parent, value, event, valueUpdater); }
private void updateKeyTitle(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) { java.lang.String selectedKey = ((java.lang.String) (object.getKeys().getSelectedItem())); if (selectedKey != null) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(selectedKey, keyField.getElement()); } }	private void updateKeyTitle(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) { java.lang.String selectedKey = ((java.lang.String) (object.getKeys().getSelectedItem())); if (selectedKey != null) { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipUtils.setTooltipOnElement(selectedKey, keyField.getElement()); } }
void attachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().add(alertPanel); com.google.gwt.dom.client.Element messageDivElement = alertPanel.getMessageAt(0).getElement(); if (org.ovirt.engine.ui.common.utils.ElementUtils.detectOverflowUsingScrollWidth(messageDivElement)) { com.google.gwt.safehtml.shared.SafeHtml tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(messageDivElement.getInnerText()); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltipContent.asString(), alertPanel.getElement()); } }	void attachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().add(alertPanel); com.google.gwt.dom.client.Element messageDivElement = alertPanel.getMessageAt(0).getElement(); if (org.ovirt.engine.ui.common.utils.ElementUtils.detectOverflowUsingScrollWidth(messageDivElement)) { java.lang.String tooltipContent = messageDivElement.getInnerText(); org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipUtils.setTooltipOnElement(tooltipContent, alertPanel.getElement()); } }
protected void disableElement(com.google.gwt.dom.client.Element element) { element.getStyle().setProperty("disabled", "true"); element.getStyle().setColor("#999999"); if ((getNodeDisabledTooltip()) != null) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(getNodeDisabledTooltip(), element); } }	protected void disableElement(com.google.gwt.dom.client.Element element) { element.getStyle().setProperty("disabled", "true"); element.getStyle().setColor("#999999"); if ((getNodeDisabledTooltip()) != null) { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipUtils.setTooltipOnElement(getNodeDisabledTooltip(), element); } }
@java.lang.Override public void setTooltip(java.lang.String tooltip) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, getElement()); }	@java.lang.Override public void setTooltip(java.lang.String tooltip) { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipUtils.setTooltipOnElement(tooltip, getElement()); }
protected void updateInputTitle(java.util.ArrayList<java.lang.String> grayOutReasons, com.google.gwt.dom.client.Element input) { java.lang.StringBuilder title = new java.lang.StringBuilder(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.empty()); for (java.lang.String reason : grayOutReasons) { title.append(reason).append(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.space()); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(title.toString(), input); }	protected void updateInputTitle(java.util.ArrayList<java.lang.String> grayOutReasons, com.google.gwt.dom.client.Element input) { java.lang.StringBuilder title = new java.lang.StringBuilder(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.empty()); for (java.lang.String reason : grayOutReasons) { title.append(reason).append(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.space()); } org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipUtils.setTooltipOnElement(title.toString(), input); }
public void setContentWidgetContainerTooltip(java.lang.String tooltipText) { contentWidgetContainerConfiguredTooltip = tooltipText; contentWidgetContainer.setTitle(tooltipText); }	public void setContentWidgetContainerTooltip(java.lang.String tooltipText) { contentWidgetContainer.setTitle(tooltipText); }
public void setText(java.lang.String text) { this.setTitle(text); }	public void setText(java.lang.String text) { infoImage.setTitle(text); }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { java.lang.String tooltip = ""; if (tooltipContent == null) { tooltipContent = getTooltip(value); } if (tooltipContent != null) { tooltip = tooltipContent.asString(); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, parent); super.onBrowserEvent(context, parent, value, event, valueUpdater); }	public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, java.lang.String tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { java.lang.String tooltip = ""; if (tooltipContent == null) { tooltipContent = getTooltip(value); } if (tooltipContent != null) { tooltip = tooltipContent; } org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipUtils.setTooltipOnElement(tooltip, parent); super.onBrowserEvent(context, parent, value, event, valueUpdater); }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.String value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.String> valueUpdater) { if ((tooltipContent == null) || (tooltipContent.asString().isEmpty())) { java.lang.String renderedTooltip = renderTooltip(context, parent, value); tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(renderedTooltip); } super.onBrowserEvent(context, parent, value, tooltipContent, event, valueUpdater); }	public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.String value, java.lang.String tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.String> valueUpdater) { if ((tooltipContent == null) || (tooltipContent.isEmpty())) { java.lang.String renderedTooltip = renderTooltip(context, parent, value); tooltipContent = renderedTooltip; } super.onBrowserEvent(context, parent, value, tooltipContent, event, valueUpdater); }
public void validate(java.util.List<java.lang.String> errors) { int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); assert (errors != null) && ((errors.size()) == rowCount) : "errors must be the same size as the contents of the table!"; for (int i = 0; i < rowCount; ++i) { com.google.gwt.dom.client.Element element = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowElement(i); assert element != null : "element shouldn't be null if errors is the same size as the contents of the table!"; java.lang.String error = errors.get(i); boolean valid = org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(error); if (!valid) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(error, element); element.addClassName(style.invalidRow()); } else { element.removeClassName(style.invalidRow()); } } }	public void validate(java.util.List<java.lang.String> errors) { int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); assert (errors != null) && ((errors.size()) == rowCount) : "errors must be the same size as the contents of the table!"; for (int i = 0; i < rowCount; ++i) { com.google.gwt.dom.client.Element element = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowElement(i); assert element != null : "element shouldn't be null if errors is the same size as the contents of the table!"; java.lang.String error = errors.get(i); boolean valid = org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(error); if (!valid) { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipUtils.setTooltipOnElement(error, element); element.addClassName(style.invalidRow()); } else { element.removeClassName(style.invalidRow()); } } }
public static boolean haveHostsAvailableforHE(final org.ovirt.engine.core.dao.VdsDao vdsDao, final org.ovirt.engine.core.common.businessentities.VDS vds, final java.lang.Iterable<org.ovirt.engine.core.compat.Guid> vdsesInBatch) { java.util.Set<org.ovirt.engine.core.compat.Guid> vdsIds = new java.util.HashSet<>(); vdsesInBatch.forEach(vdsIds::add); return vdsDao.getAllForClusterWithStatus(vds.getClusterId(), VDSStatus.Up).stream().filter(( v) -> !(v.getId().equals(vds.getId()))).filter(( v) -> !(vdsIds.contains(v))).filter(VDS::getHighlyAvailableIsConfigured).filter(VDS::getHighlyAvailableIsActive).filter(( v) -> !(v.getHighlyAvailableLocalMaintenance())).filter(( v) -> (v.getHighlyAvailableScore()) > 0).findAny().isPresent(); }	public static boolean haveHostsAvailableforHE(java.util.Collection<org.ovirt.engine.core.common.businessentities.VDS> clusterVdses, final java.lang.Iterable<org.ovirt.engine.core.compat.Guid> vdses) { java.util.Set<org.ovirt.engine.core.compat.Guid> vdsIds = new java.util.HashSet<>(); vdses.forEach(vdsIds::add); return clusterVdses.stream().filter(( v) -> !(vdsIds.contains(v.getId()))).filter(VDS::getHighlyAvailableIsConfigured).filter(VDS::getHighlyAvailableIsActive).filter(( v) -> !(v.getHighlyAvailableLocalMaintenance())).filter(( v) -> (v.getHighlyAvailableScore()) > 0).findAny().isPresent(); }
@org.ovirt.engine.ui.webadmin.Source("images/host_ha_configured.png") com.google.gwt.resources.client.ImageResource haConfigured();	@org.ovirt.engine.ui.webadmin.Source("images/host_ha_active.png") com.google.gwt.resources.client.ImageResource haActive();
java.lang.String haConfiguredTooltip();	java.lang.String haActiveTooltip();
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc amendVolume(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> imgInfo, java.util.Map<java.lang.String, java.lang.Object> volAttr) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.amend_volume").withParameter("job_id", jobId).withParameter("img_info", imgInfo).withParameter("vol_attr", volAttr).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn amendVolume(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> volInfo, java.util.Map<java.lang.String, java.lang.Object> volAttr) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.amend_volume").withParameter("job_id", jobId).withParameter("vol_info", volInfo).withParameter("vol_attr", volAttr).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DiskFormat.class, to = java.lang.String.class) public static org.ovirt.engine.core.common.businessentities.storage.QcowCompat map(org.ovirt.engine.api.model.QcowVersion qcowVersion, org.ovirt.engine.core.common.businessentities.storage.QcowCompat template) { switch (qcowVersion) { case QCOW2_V2 : return org.ovirt.engine.core.common.businessentities.storage.QcowCompat.QCOW2_V2; case QCOW2_V3 : return org.ovirt.engine.core.common.businessentities.storage.QcowCompat.QCOW2_V3; default : return org.ovirt.engine.core.common.businessentities.storage.QcowCompat.Undefined; } }	public static org.ovirt.engine.core.common.businessentities.storage.QcowCompat mapQcowVersion(org.ovirt.engine.api.model.QcowVersion qcowVersion) { switch (qcowVersion) { case QCOW2_V2 : return org.ovirt.engine.core.common.businessentities.storage.QcowCompat.QCOW2_V2; case QCOW2_V3 : return org.ovirt.engine.core.common.businessentities.storage.QcowCompat.QCOW2_V3; default : return org.ovirt.engine.core.common.businessentities.storage.QcowCompat.Undefined; } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.QcowVersion.class, to = java.lang.String.class) public static org.ovirt.engine.api.model.QcowVersion map(org.ovirt.engine.core.common.businessentities.storage.QcowCompat qcowCompat, org.ovirt.engine.api.model.QcowVersion template) { switch (qcowCompat) { case QCOW2_V2 : return org.ovirt.engine.api.model.QcowVersion.QCOW2_V2; case QCOW2_V3 : return org.ovirt.engine.api.model.QcowVersion.QCOW2_V3; default : return null; } }	public static org.ovirt.engine.api.model.QcowVersion mapQcowCompat(org.ovirt.engine.core.common.businessentities.storage.QcowCompat qcowCompat) { switch (qcowCompat) { case QCOW2_V2 : return org.ovirt.engine.api.model.QcowVersion.QCOW2_V2; case QCOW2_V3 : return org.ovirt.engine.api.model.QcowVersion.QCOW2_V3; default : return null; } }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc amendVolume(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> imgInfo, java.util.Map<java.lang.String, java.lang.Object> volAttr);	org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn amendVolume(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> volInfo, java.util.Map<java.lang.String, java.lang.Object> volAttr);
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), false)); }	@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), false)); }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue mergeSnapshots(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.vdscommands.MergeSnapshotsVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.MergeSnapshotsVDSCommandParameters(storagePoolId, storageDomainId, org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getVmId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().getId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().getImageId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDestinationDiskImage().getImageId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().isWipeAfterDelete()); return runVdsCommand(VDSCommandType.MergeSnapshots, org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(params)); }	protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue mergeSnapshots(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.vdscommands.MergeSnapshotsVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.MergeSnapshotsVDSCommandParameters(storagePoolId, storageDomainId, org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getVmId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().getId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().getImageId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDestinationDiskImage().getImageId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().isWipeAfterDelete()); return runVdsCommand(VDSCommandType.MergeSnapshots, org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.fixParameters(params)); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), false)); }	@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return postDeleteActionHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), false)); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(VdcActionType.RemoveVmTemplate); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getWipeAfterDelete(), false))); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getReturnValue().getInternalVdsmTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), VdcActionType.RemoveVmTemplate, VdcObjectType.Storage, org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.setSucceeded(true); } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(VdcActionType.RemoveVmTemplate); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getWipeAfterDelete(), false))); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getReturnValue().getInternalVdsmTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), VdcActionType.RemoveVmTemplate, VdcObjectType.Storage, org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.setSucceeded(true); } }
private org.ovirt.engine.core.common.vdscommands.VDSParametersBase createVDSParameters() { return org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DestroyImageVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getImageList(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().isPostZero(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().isForce())); }	private org.ovirt.engine.core.common.vdscommands.VDSParametersBase createVDSParameters() { return org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DestroyImageVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getImageList(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().isPostZero(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().isForce())); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(4), isPostZero(), false)); }	@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return postDeleteActionHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(4), isPostZero(), false)); }
protected static <T extends org.ovirt.engine.core.common.vdscommands.StorageDomainIdParametersBase & org.ovirt.engine.core.common.vdscommands.ActionAfterDelete> T fixParameters(T parameters, boolean isFileDomain) { if (isFileDomain) { parameters.setPostZero(false); } return parameters; }	protected static <T extends org.ovirt.engine.core.common.vdscommands.StorageDomainIdParametersBase & org.ovirt.engine.core.common.vdscommands.PostDeleteAction> T fixParameters(T parameters, boolean isFileDomain) { if (isFileDomain) { parameters.setPostZero(false); } return parameters; }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(4), isPostZero(), false)); }	@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(4), isPostZero(), false)); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue performImageVdsmOperation() { if (org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getParameters().isShouldLockImage()) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImageSnapshotsStatusWithCompensation(org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getRelevantDiskImage().getId(), ImageStatus.LOCKED, ImageStatus.ILLEGAL, org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getCompensationContext()); } return runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().getId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().isWipeAfterDelete(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getParameters().getForceDelete()))); }	protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue performDeleteImageVdsmOperation() { if (org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getParameters().isShouldLockImage()) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImageSnapshotsStatusWithCompensation(org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getRelevantDiskImage().getId(), ImageStatus.LOCKED, ImageStatus.ILLEGAL, org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getCompensationContext()); } return runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().getId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().isWipeAfterDelete(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getParameters().getForceDelete()))); }
public static <T extends org.ovirt.engine.core.common.vdscommands.StorageDomainIdParametersBase & org.ovirt.engine.core.common.vdscommands.ActionAfterDelete> T fixParameters(T parameters) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainStaticDao().get(parameters.getStorageDomainId()); return org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(parameters, storageDomainStatic.getStorageType().isFileDomain()); }	public static <T extends org.ovirt.engine.core.common.vdscommands.StorageDomainIdParametersBase & org.ovirt.engine.core.common.vdscommands.PostDeleteAction> T fixParameters(T parameters) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainStaticDao().get(parameters.getStorageDomainId()); return org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.fixParameters(parameters, storageDomainStatic.getStorageType().isFileDomain()); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = getSafeHtmlStringMap(vm); if (!(imagesToText.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getTooltip(imagesToText); } return null; }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = getImagesToTooltipTextMap(vm); return imagesToText.isEmpty() ? null : org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getTooltip(imagesToText); }
private java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> getSafeHtmlStringMap(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> res = new java.util.LinkedHashMap<>(); if ((vm.getVmPoolId()) == null) { org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig config = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig.from(vm.getVmType(), vm.isStateless(), vm.isNextRunConfigurationExists()); res.put(getImageSafeHtml(config.getImageResource()), config.getTooltip()); } else { com.google.gwt.resources.client.ImageResource img = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.getPoolVmImageResource(vm.getVmType(), vm.isNextRunConfigurationExists()); res.put(getImageSafeHtml(img), getPoolVmTooltip(vm.getVmType())); } if (vm.isHostedEngine()) { res.put(getImageSafeHtml(org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.mgmtNetwork()), org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.constants.isVmHostedEngineTooltip()); } return res; }	private java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> getImagesToTooltipTextMap(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> res = new java.util.LinkedHashMap<>(); if ((vm.getVmPoolId()) == null) { org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig config = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig.from(vm.getVmType(), vm.isStateless(), vm.isNextRunConfigurationExists()); res.put(org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.getImageSafeHtml(config.getImageResource()), config.getTooltip()); } else { com.google.gwt.resources.client.ImageResource img = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.getPoolVmImageResource(vm.getVmType(), vm.isNextRunConfigurationExists()); res.put(org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.getImageSafeHtml(img), getPoolVmTooltip(vm.getVmType())); } if (vm.isHostedEngine()) { res.put(org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.getImageSafeHtml(org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.mgmtNetwork()), org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.constants.isHostedEngineVmTooltip()); } return res; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData object) { return new org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn().getValue(object.getVm()); }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData object) { return org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.getRenderedValue(object.getVm()); }
private com.google.gwt.safehtml.shared.SafeHtml getImageSafeHtml(com.google.gwt.resources.client.ImageResource imageResource) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(imageResource).getHTML()); }	private static com.google.gwt.safehtml.shared.SafeHtml getImageSafeHtml(com.google.gwt.resources.client.ImageResource imageResource) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(imageResource).getHTML()); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue(java.lang.Object object) { return new org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn().getValue(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm()); }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue(java.lang.Object object) { return org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.getRenderedValue(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm()); }
java.lang.String isVmHostedEngineTooltip();	java.lang.String isHostedEngineVmTooltip();
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.List<com.google.gwt.safehtml.shared.SafeHtml> imagesHtml = new java.util.ArrayList(getSafeHtmlStringMap(vm).keySet()); if (!(imagesHtml.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getValue(imagesHtml); } return null; }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.core.common.businessentities.VM vm) { return org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.getRenderedValue(vm); }
public static java.util.Map<java.lang.String, java.lang.Object> authenticate(javax.servlet.http.HttpServletRequest req, java.lang.String scope) { org.apache.http.client.methods.HttpPost request; try { request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.lang.String[] credentials = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getUserCredentialsFromHeader(req); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(4); form.add(new org.apache.http.message.BasicNameValuePair("grant_type", "password")); form.add(new org.apache.http.message.BasicNameValuePair("username", credentials[0])); form.add(new org.apache.http.message.BasicNameValuePair("password", credentials[1])); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }	public static java.util.Map<java.lang.String, java.lang.Object> authenticate(javax.servlet.http.HttpServletRequest req, java.lang.String scope) { try { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.lang.String[] credentials = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getUserCredentialsFromHeader(req); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(4); form.add(new org.apache.http.message.BasicNameValuePair("grant_type", "password")); form.add(new org.apache.http.message.BasicNameValuePair("username", credentials[0])); form.add(new org.apache.http.message.BasicNameValuePair("password", credentials[1])); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form, java.nio.charset.StandardCharsets.UTF_8)); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }
private static org.apache.http.client.methods.HttpPost createPost(java.lang.String path) throws java.lang.Exception { org.ovirt.engine.core.utils.EngineLocalConfig config = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance(); java.lang.String base = config.getProperty("ENGINE_SSO_SERVICE_URL"); org.apache.http.client.methods.HttpPost request = new org.apache.http.client.methods.HttpPost(); request.setURI(new java.net.URI((base + path))); request.setHeader("Accept", "application/json"); request.setHeader("Content-Type", "application/x-www-form-urlencoded"); request.setHeader("Content-Language", "en-US"); return request; }	private static org.apache.http.client.methods.HttpPost createPost(java.lang.String path) throws java.lang.Exception { org.ovirt.engine.core.utils.EngineLocalConfig config = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance(); java.lang.String base = config.getProperty("ENGINE_SSO_SERVICE_URL"); org.apache.http.client.methods.HttpPost request = new org.apache.http.client.methods.HttpPost(); request.setURI(new java.net.URI((base + path))); request.setHeader("Accept", "application/json"); request.setHeader("Content-Language", "en-US"); return request; }
private static java.util.Map<java.lang.String, java.lang.Object> search(java.lang.String token, java.util.Map<java.lang.String, java.lang.Object> params, java.lang.String queryType, java.lang.String scope) { try { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token-info"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(4); form.add(new org.apache.http.message.BasicNameValuePair("query_type", queryType)); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); if (org.apache.commons.lang.StringUtils.isNotEmpty(token)) { form.add(new org.apache.http.message.BasicNameValuePair("token", token)); } if (params != null) { form.add(new org.apache.http.message.BasicNameValuePair("params", org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.encode(new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer().serialize(params)))); } request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }	private static java.util.Map<java.lang.String, java.lang.Object> search(java.lang.String token, java.util.Map<java.lang.String, java.lang.Object> params, java.lang.String queryType, java.lang.String scope) { try { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token-info"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(4); form.add(new org.apache.http.message.BasicNameValuePair("query_type", queryType)); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); if (org.apache.commons.lang.StringUtils.isNotEmpty(token)) { form.add(new org.apache.http.message.BasicNameValuePair("token", token)); } if (params != null) { form.add(new org.apache.http.message.BasicNameValuePair("params", org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.serialize(params))); } request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form, java.nio.charset.StandardCharsets.UTF_8)); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }
public static java.util.Map<java.lang.String, java.lang.Object> getTokenInfo(java.lang.String token, java.lang.String scope) { try { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token-info"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(2); form.add(new org.apache.http.message.BasicNameValuePair("token", token)); if (org.apache.commons.lang.StringUtils.isNotEmpty(scope)) { form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); } request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); java.util.Map<java.lang.String, java.lang.Object> jsonData = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); java.util.Map<java.lang.String, java.lang.Object> ovirtData = ((java.util.Map<java.lang.String, java.lang.Object>) (jsonData.get("ovirt"))); if (ovirtData != null) { java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> groupIds = ((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (ovirtData.get("group_ids"))); if (groupIds != null) { ovirtData.put("group_ids", org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.processGroupMembershipsFromJson(groupIds)); } } return jsonData; } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }	public static java.util.Map<java.lang.String, java.lang.Object> getTokenInfo(java.lang.String token, java.lang.String scope) { try { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token-info"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(2); form.add(new org.apache.http.message.BasicNameValuePair("token", token)); if (org.apache.commons.lang.StringUtils.isNotEmpty(scope)) { form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); } request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form, java.nio.charset.StandardCharsets.UTF_8)); java.util.Map<java.lang.String, java.lang.Object> jsonData = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); java.util.Map<java.lang.String, java.lang.Object> ovirtData = ((java.util.Map<java.lang.String, java.lang.Object>) (jsonData.get("ovirt"))); if (ovirtData != null) { java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> groupIds = ((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (ovirtData.get("group_ids"))); if (groupIds != null) { ovirtData.put("group_ids", org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.processGroupMembershipsFromJson(groupIds)); } } return jsonData; } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }
public static java.util.Map<java.lang.String, java.lang.Object> getToken(java.lang.String grantType, java.lang.String code, java.lang.String scope, java.lang.String redirectUri) { try { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(4); form.add(new org.apache.http.message.BasicNameValuePair("grant_type", grantType)); form.add(new org.apache.http.message.BasicNameValuePair("code", code)); form.add(new org.apache.http.message.BasicNameValuePair("redirect_uri", redirectUri)); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }	public static java.util.Map<java.lang.String, java.lang.Object> getToken(java.lang.String grantType, java.lang.String code, java.lang.String scope, java.lang.String redirectUri) { try { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(4); form.add(new org.apache.http.message.BasicNameValuePair("grant_type", grantType)); form.add(new org.apache.http.message.BasicNameValuePair("code", code)); form.add(new org.apache.http.message.BasicNameValuePair("redirect_uri", redirectUri)); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form, java.nio.charset.StandardCharsets.UTF_8)); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }
private static java.util.Map<java.lang.String, java.lang.Object> loginWithPasswordImpl(java.lang.String username, java.lang.String password, java.lang.String scope, org.ovirt.engine.api.extensions.ExtMap authRecord) { try { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(5); form.add(new org.apache.http.message.BasicNameValuePair("grant_type", "password")); form.add(new org.apache.http.message.BasicNameValuePair("username", username)); form.add(new org.apache.http.message.BasicNameValuePair("password", password)); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); if (authRecord != null) { form.add(new org.apache.http.message.BasicNameValuePair("ovirt_auth_record", new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer().serialize(authRecord))); } request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }	private static java.util.Map<java.lang.String, java.lang.Object> loginWithPasswordImpl(java.lang.String username, java.lang.String password, java.lang.String scope, org.ovirt.engine.api.extensions.ExtMap authRecord) { try { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(5); form.add(new org.apache.http.message.BasicNameValuePair("grant_type", "password")); form.add(new org.apache.http.message.BasicNameValuePair("username", username)); form.add(new org.apache.http.message.BasicNameValuePair("password", password)); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); if (authRecord != null) { form.add(new org.apache.http.message.BasicNameValuePair("ovirt_auth_record", org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.serialize(authRecord))); } request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form, java.nio.charset.StandardCharsets.UTF_8)); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }
private static org.apache.http.client.methods.HttpPost createPost(java.lang.String url) throws java.lang.Exception { org.apache.http.client.methods.HttpPost request = new org.apache.http.client.methods.HttpPost(); request.setURI(new java.net.URI(url)); request.setHeader("Accept", "application/json"); request.setHeader("Content-Type", "application/x-www-form-urlencoded"); return request; }	private static org.apache.http.client.methods.HttpPost createPost(java.lang.String url) throws java.lang.Exception { org.apache.http.client.methods.HttpPost request = new org.apache.http.client.methods.HttpPost(); request.setURI(new java.net.URI(url)); request.setHeader("Accept", "application/json"); return request; }
public static java.util.Map<java.lang.String, java.lang.Object> isSsoDeployed() { org.apache.http.client.methods.HttpGet request; try { request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createGet("/status"); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.io.FileNotFoundException ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", "oVirt Engine is initializing."); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }	private static java.lang.String serialize(java.lang.Object obj) throws java.io.IOException { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.mapper.writeValueAsString(obj); }
private static void notifyClientOfLogoutEvent(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, java.lang.String clientId, java.lang.String token) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.ClientInfo clientInfo = ssoContext.getClienInfo(clientId); java.lang.String url = clientInfo.getClientNotificationCallback(); if (org.apache.commons.lang.StringUtils.isNotEmpty(url)) { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.sso.utils.SsoUtils.createPost(url); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(3); form.add(new org.apache.http.message.BasicNameValuePair("event", "logout")); form.add(new org.apache.http.message.BasicNameValuePair("token", token)); form.add(new org.apache.http.message.BasicNameValuePair("token_type", "bearer")); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); org.ovirt.engine.core.sso.utils.SsoUtils.execute(request, ssoContext, clientId); } }	private static void notifyClientOfLogoutEvent(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, java.lang.String clientId, java.lang.String token) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.ClientInfo clientInfo = ssoContext.getClienInfo(clientId); java.lang.String url = clientInfo.getClientNotificationCallback(); if (org.apache.commons.lang.StringUtils.isNotEmpty(url)) { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.sso.utils.SsoUtils.createPost(url); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(3); form.add(new org.apache.http.message.BasicNameValuePair("event", "logout")); form.add(new org.apache.http.message.BasicNameValuePair("token", token)); form.add(new org.apache.http.message.BasicNameValuePair("token_type", "bearer")); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form, java.nio.charset.StandardCharsets.UTF_8)); org.ovirt.engine.core.sso.utils.SsoUtils.execute(request, ssoContext, clientId); } }
private static java.util.Map<java.lang.String, java.lang.Object> getResponse(org.apache.http.client.methods.HttpUriRequest request) throws java.lang.Exception { try (org.apache.http.client.methods.CloseableHttpResponse response = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.execute(request)) { if ((response.getStatusLine().getStatusCode()) == (org.apache.http.HttpStatus.SC_NOT_FOUND)) { throw new java.io.FileNotFoundException(); } try (java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream()) { try (java.io.InputStream input = response.getEntity().getContent()) { org.ovirt.engine.core.aaa.filters.FiltersHelper.copy(input, os); } java.lang.ClassLoader loader = java.lang.Thread.currentThread().getContextClassLoader(); java.lang.Thread.currentThread().setContextClassLoader(org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.class.getClassLoader()); try { return new org.ovirt.engine.core.utils.serialization.json.JsonObjectDeserializer().deserialize(new java.lang.String(os.toByteArray(), java.nio.charset.StandardCharsets.UTF_8.name()), java.util.HashMap.class); } finally { java.lang.Thread.currentThread().setContextClassLoader(loader); } } } }	private static java.util.Map<java.lang.String, java.lang.Object> getResponse(org.apache.http.client.methods.HttpUriRequest request) throws java.lang.Exception { try (org.apache.http.client.methods.CloseableHttpResponse response = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.execute(request)) { if ((response.getStatusLine().getStatusCode()) == (org.apache.http.HttpStatus.SC_NOT_FOUND)) { throw new java.io.FileNotFoundException(); } try (java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream()) { try (java.io.InputStream input = response.getEntity().getContent()) { org.ovirt.engine.core.aaa.filters.FiltersHelper.copy(input, os); } java.lang.ClassLoader loader = java.lang.Thread.currentThread().getContextClassLoader(); java.lang.Thread.currentThread().setContextClassLoader(org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.class.getClassLoader()); try { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.deserialize(new java.lang.String(os.toByteArray(), java.nio.charset.StandardCharsets.UTF_8.name()), java.util.HashMap.class); } finally { java.lang.Thread.currentThread().setContextClassLoader(loader); } } } }
public static java.util.Map<java.lang.String, java.lang.Object> revoke(java.lang.String token, java.lang.String scope) { try { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/revoke"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(2); form.add(new org.apache.http.message.BasicNameValuePair("token", token)); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }	public static java.util.Map<java.lang.String, java.lang.Object> revoke(java.lang.String token, java.lang.String scope) { try { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/revoke"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(2); form.add(new org.apache.http.message.BasicNameValuePair("token", token)); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form, java.nio.charset.StandardCharsets.UTF_8)); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }
@java.lang.Override public void rerun() { org.ovirt.engine.core.bll.RunVmCommand.cleanupPassthroughVnics(); setFlow(null); super.rerun(); }	@java.lang.Override public void rerun() { cleanupPassthroughVnics(); setFlow(null); super.rerun(); }
protected void cleanupPassthroughVnics() { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> vnicToVfMap = getVnicToVfMap(); if (vnicToVfMap != null) { networkDeviceHelper.setVmIdOnVfs(org.ovirt.engine.core.bll.RunVmCommandBase.getVdsId(), null, new java.util.HashSet(vnicToVfMap.values())); } vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommandBase.getVmId()); }	protected void cleanupPassthroughVnics(org.ovirt.engine.core.compat.Guid hostId) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> vnicToVfMap = getVnicToVfMap(hostId); if (vnicToVfMap != null) { networkDeviceHelper.setVmIdOnVfs(hostId, null, new java.util.HashSet(vnicToVfMap.values())); } vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommandBase.getVmId()); }
@java.lang.Override protected void runningFailed() { org.ovirt.engine.core.bll.RunVmCommand.cleanupPassthroughVnics(); if (memoryFromSnapshotUsed) { removeMemoryFromActiveSnapshot(); } super.runningFailed(); }	@java.lang.Override protected void runningFailed() { cleanupPassthroughVnics(); if (memoryFromSnapshotUsed) { removeMemoryFromActiveSnapshot(); } super.runningFailed(); }
@org.junit.Test public void shouldNotTryToMigrateWhenNotSchedulable() { when(schedulingManager.canSchedule(eq(cluster), any(org.ovirt.engine.core.common.businessentities.VM.class), anyList(), anyList(), anyList())).thenReturn(false); affinityGroups.add(createAffinityGroup(cluster, true, vm1, vm2, vm4)); assertThat(enforcer.chooseNextVmToMigrate(cluster)).isNull(); }	@org.junit.Test public void shouldNotTryToMigrateWhenNotSchedulable() { when(schedulingManager.canSchedule(eq(cluster), any(org.ovirt.engine.core.common.businessentities.VM.class), anyList(), anyList(), anyList())).thenReturn(false); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, vm1, vm2, vm4)); assertThat(enforcer.chooseNextVmToMigrate(cluster)).isNull(); }
@org.junit.Test public void shouldSelectFirstSchedulableFromCandidatePool() { affinityGroups.add(createAffinityGroup(cluster, true, vm1, vm2, vm3, vm5, vm6)); when(schedulingManager.canSchedule(eq(cluster), any(org.ovirt.engine.core.common.businessentities.VM.class), anyList(), anyList(), anyList())).thenReturn(false, true); assertThat(enforcer.chooseNextVmToMigrate(cluster)).isIn(vm5, vm6); verify(schedulingManager).canSchedule(eq(cluster), eq(vm5), anyList(), anyList(), anyList()); verify(schedulingManager).canSchedule(eq(cluster), eq(vm6), anyList(), anyList(), anyList()); }	@org.junit.Test public void shouldSelectFirstSchedulableFromCandidatePool() { affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, vm1, vm2, vm3, vm5, vm6)); when(schedulingManager.canSchedule(eq(cluster), any(org.ovirt.engine.core.common.businessentities.VM.class), anyList(), anyList(), anyList())).thenReturn(false, true); assertThat(enforcer.chooseNextVmToMigrate(cluster)).isIn(vm5, vm6); verify(schedulingManager).canSchedule(eq(cluster), eq(vm5), anyList(), anyList(), anyList()); verify(schedulingManager).canSchedule(eq(cluster), eq(vm6), anyList(), anyList(), anyList()); }
protected void initParametersForPassthroughVnics() { org.ovirt.engine.core.bll.RunVmCommand.getVm().setPassthroughVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommand.getVnicToVfMap()); vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); }	protected void initParametersForPassthroughVnics() { org.ovirt.engine.core.bll.RunVmCommand.getVm().setPassthroughVnicToVfMap(getVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommand.getVdsId())); vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); }
protected java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> getVnicToVfMap() { org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.bll.RunVmCommandBase.getVdsId(); return hostId == null ? null : vfScheduler.getVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommandBase.getVmId(), hostId); }	protected java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> getVnicToVfMap(org.ovirt.engine.core.compat.Guid hostId) { return hostId == null ? null : vfScheduler.getVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommandBase.getVmId(), hostId); }
private void updateMetadataDevice() { org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().setMetadataDevice(metadataDevice); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomainStaticDao().update(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); }	protected void updateMetadataDevices() { if (((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getVds().getId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.updateStaticDataDefaults(); metadataDevice = org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getMetadataDevice(); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().setMetadataDevice(null); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.addStorageDomainInDb(); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.updateStorageDomainDynamicFromIrs(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = getLUNsFromVgInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorage()); saveLUNsInDB(luns); updateMetadataDevice(); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.updateStaticDataDefaults(); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.addStorageDomainInDb(); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.updateStorageDomainDynamicFromIrs(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = getLUNsFromVgInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorage()); saveLUNsInDB(luns); updateMetadataDevices(); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.setSucceeded(true); }
private void handlePolledJobStatus(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, org.ovirt.engine.core.common.businessentities.HostJobInfo jobInfo) { if ((jobInfo.getStatus()) != (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed)) { return; } if ((jobInfo.getError()) != null) { jobInfo.setStatus(cmd.inspectJobError(jobInfo.getError().getCode())); if ((jobInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.done)) { jobInfo.setProgress(null); } } }	private void handlePolledJobStatus(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, org.ovirt.engine.core.common.businessentities.HostJobInfo jobInfo) { if ((jobInfo.getStatus()) != (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed)) { return; } if ((jobInfo.getError()) != null) { jobInfo.setStatus(cmd.handleJobError(jobInfo.getError().getCode())); if ((jobInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.done)) { jobInfo.setProgress(null); } } }
public org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus inspectJobError(org.ovirt.engine.core.common.errors.EngineError error) { return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; }	public org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus handleJobError(org.ovirt.engine.core.common.errors.EngineError error) { return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc movePV(java.lang.String jobId, java.lang.String sdUUID, java.lang.String device);	org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn moveDomainDevice(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> moveParams);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc movePV(java.lang.String jobId, java.lang.String sdUUID, java.lang.String device) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("StorageDomain.movePV").withParameter("jobID", jobId).withParameter("storagedomainID", sdUUID).withParameter("guid", device).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn moveDomainDevice(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> moveParams) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.move_domain_device").withParameter("job_id", jobId).withParameter("move_params", moveParams).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
public void setValue(T value, boolean fireEvents, boolean fromClick) { if (changing) { return; } else if (value == null) { updateCurrentValue(null, fireEvents); } else { boolean found = false; for (T listItem : this.valueList) { if ((listItem == value) || ((listItem != null) && (listItem.equals(value)))) { updateCurrentValue(value, fireEvents); found = true; break; } } if (!found) { addValue(value); updateCurrentValue(value, fireEvents); } } }	protected void setValue(T value, boolean fireEvents, boolean fromClick) { if (changing) { return; } else if (value == null) { updateCurrentValue(null, fireEvents); } else { boolean found = false; for (T listItem : this.valueList) { if ((listItem == value) || ((listItem != null) && (listItem.equals(value)))) { updateCurrentValue(value, fireEvents); found = true; break; } } if (!found) { addValue(value); updateCurrentValue(value, fireEvents); } } }
@java.lang.Override public void setValue(java.util.List<T> values, boolean fireEvents, boolean fromClick) { if (((values != null) && ((lastValues) != null)) && (lastValues.equals(values))) { return; } if (fromClick) { T value = values.get(0); if (selectedList.contains(value)) { selectedList.remove(value); } else { if (value != null) { selectedList.add(value); } } } else { selectedList.clear(); for (T value : values) { if (value != null) { selectedList.add(value); } } } listPanel.setSelected(selectedList); updateCurrentValue(selectedList, fireEvents); }	@java.lang.Override protected void setValue(java.util.List<T> values, boolean fireEvents, boolean fromClick) { if (((values != null) && ((lastValues) != null)) && (lastValues.equals(values))) { return; } if (fromClick) { T value = values.get(0); if (selectedList.contains(value)) { selectedList.remove(value); } else { if (value != null) { selectedList.add(value); } } } else { selectedList.clear(); if (values != null) { for (T value : values) { if (value != null) { selectedList.add(value); } } } } listPanel.setSelected(selectedList); updateCurrentValue(selectedList, fireEvents); }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc reduceStorageDomain(java.lang.String jobId, java.lang.String sdUUID, java.lang.String device);	org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn amendVolume(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> volInfo, java.util.Map<java.lang.String, java.lang.Object> volAttr);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc reduceStorageDomain(java.lang.String jobId, java.lang.String sdUUID, java.lang.String device) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("StorageDomain.reduce").withParameter("jobID", jobId).withParameter("storagedomainID", sdUUID).withParameter("guid", device).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn amendVolume(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> volInfo, java.util.Map<java.lang.String, java.lang.Object> volAttr) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.amend_volume").withParameter("job_id", jobId).withParameter("vol_info", volInfo).withParameter("vol_attr", volAttr).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
@java.lang.Override protected void executeVdsBrokerCommand() { log.info("-- executeVdsBrokerCommand: calling 'reduceStorageDomain'"); status = org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getBroker().reduceStorageDomain(org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getParameters().getJobId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getParameters().getDeviceId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.proceedProxyReturnValue(); }	@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getBroker().reduceDomain(org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getParameters().getJobId().toString(), buildReduceParams()); org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return (org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getActionState()) == (org.ovirt.engine.core.bll.CommandActionState.EXECUTE) ? org.ovirt.engine.core.common.AuditLogType.USER_EDIT_DOMAIN_DEVICES_STARTED : org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_EDIT_DOMAIN_DEVICES_SUCCEEDED : org.ovirt.engine.core.common.AuditLogType.USER_EDIT_DOMAIN_DEVICES_FAILED; }	@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { switch (org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getActionState()) { case EXECUTE : return org.ovirt.engine.core.common.AuditLogType.USER_REDUCE_DOMAIN_DEVICES_STARTED; case END_FAILURE : return org.ovirt.engine.core.common.AuditLogType.USER_REDUCE_DOMAIN_DEVICES_FAILED; case END_SUCCESS : return org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_REDUCE_DOMAIN_DEVICES_SUCCEEDED : org.ovirt.engine.core.common.AuditLogType.USER_REDUCE_DOMAIN_DEVICES_FAILED; } return null; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.setSucceeded(true); }
private void endOperation() { try { disconnectHostFromDomain(); } catch (java.lang.Exception e) { log.error("Failed to disconnect the host from the domain storage servers, ignoring", e); } endActionOnDevices(); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.setSucceeded(true); }	private void endOperation() { try { disconnectHostFromDomain(); } catch (java.lang.Exception e) { log.error("Failed to disconnect the host from the domain storage servers, ignoring", e); } endActionOnDevices(); org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.setSucceeded(true); }
private void prepareForRemove() { java.util.List<java.lang.String> devices = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorage()).stream().map(LUNs::getId).filter(( x) -> !(getParameters().getDevicesToReduce().contains(x))).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().setDstDevices(devices); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.persistCommandIfNeeded(); }	private void prepareForRemove() { java.util.List<java.lang.String> devices = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorage()).stream().map(LUNs::getId).filter(( x) -> !(getParameters().getDevicesToReduce().contains(x))).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().setDstDevices(devices); org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.persistCommandIfNeeded(); }
private org.ovirt.engine.core.common.action.RemoveDeviceFromSANStorageDomainCommandParameters createRemoveParameters(java.lang.String deviceId) { org.ovirt.engine.core.common.action.RemoveDeviceFromSANStorageDomainCommandParameters p = new org.ovirt.engine.core.common.action.RemoveDeviceFromSANStorageDomainCommandParameters(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getStorageDomainId(), deviceId); p.setEndProcedure(EndProcedure.COMMAND_MANAGED); p.setVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getVdsId()); p.setParentCommand(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getActionType()); p.setParentParameters(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters()); p.setDestinationDevices(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDstDevices()); return p; }	private org.ovirt.engine.core.common.action.RemoveDeviceFromSANStorageDomainCommandParameters createRemoveParameters(java.lang.String deviceId) { org.ovirt.engine.core.common.action.RemoveDeviceFromSANStorageDomainCommandParameters p = new org.ovirt.engine.core.common.action.RemoveDeviceFromSANStorageDomainCommandParameters(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getStorageDomainId(), deviceId); p.setEndProcedure(EndProcedure.PARENT_MANAGED); p.setVdsId(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getVdsId()); p.setParentCommand(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getActionType()); p.setParentParameters(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters()); p.setDestinationDevices(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getDstDevices()); return p; }
private void disconnectHostFromDomain() { org.ovirt.engine.core.bll.storage.connection.StorageHelperDirector.getInstance().getItem(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorageType()).disconnectStorageFromDomainByVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getVdsId()); }	private void disconnectHostFromDomain() { org.ovirt.engine.core.bll.storage.connection.StorageHelperDirector.getInstance().getItem(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageType()).disconnectStorageFromDomainByVdsId(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getVdsId()); }
protected void endActionOnDevices() { for (org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getImagesParameters()) { org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getBackend().endAction(p.getCommandType(), p, org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getContext().clone().withoutCompensationContext().withoutExecutionContext().withoutLock()); } }	protected void endActionOnDevices() { for (org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getImagesParameters()) { org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getBackend().endAction(p.getCommandType(), p, org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getContext().clone().withoutCompensationContext().withoutExecutionContext().withoutLock()); } }
java.lang.String ACTION_TYPE_FAILED_STORAGE_DOMAIN_DEVICES_ARE_BEING_EDITED();	java.lang.String ACTION_TYPE_FAILED_STORAGE_DOMAIN_IS_BEING_REDUCED();
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()) == 0) { prepareForRemove(); connectHostToDomain(); } if ((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()) < (org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().size())) { runInternalActionWithTasksContext(VdcActionType.RemoveDeviceFromSANStorageDomain, createRemoveParameters(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().get(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()))); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().setRemoveIndex(((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()) + 1)); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.persistCommandIfNeeded(); return true; } return false; }	@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()) == 0) { prepareForRemove(); connectHostToDomain(); validateRemove(); } if ((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()) < (org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().size())) { runInternalActionWithTasksContext(VdcActionType.RemoveDeviceFromSANStorageDomain, createRemoveParameters(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().get(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()))); org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().setRemoveIndex(((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()) + 1)); org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.persistCommandIfNeeded(); return true; } return false; }
@java.lang.Override protected boolean initializeVds() { if (super.initializeVds()) { org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().setVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getVds().getId()); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.persistCommandIfNeeded(); return true; } return false; }	@java.lang.Override protected boolean initializeVds() { if (super.initializeVds()) { org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().setVdsId(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getVds().getId()); org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.persistCommandIfNeeded(); return true; } return false; }
private void connectHostToDomain() { if (!(org.ovirt.engine.core.bll.storage.connection.StorageHelperDirector.getInstance().getItem(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorageType()).connectStorageToDomainByVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getVdsId()))) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.StorageServerConnectionError); } }	private void connectHostToDomain() { if (!(org.ovirt.engine.core.bll.storage.connection.StorageHelperDirector.getInstance().getItem(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageType()).connectStorageToDomainByVdsId(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getVdsId()))) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.StorageServerConnectionError); } }
private boolean validateReduceDeviceSupported() { if (((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStoragePool()) != null) && (!(org.ovirt.engine.core.common.FeatureSupported.reduceDeviceFromStorageDomain(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStoragePool().getCompatibilityVersion())))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_REDUCE_DOMAIN_DEVICE_NOT_SUPPORTED); } return true; }	private boolean validateReduceDeviceSupported() { if ((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageFormat()) == (org.ovirt.engine.core.common.businessentities.StorageFormatType.V1)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_FORMAT_ILLEGAL, java.lang.String.format("$storageFormat %1$s", StorageFormatType.V1.toString())); } if (((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStoragePool()) != null) && (!(org.ovirt.engine.core.common.FeatureSupported.reduceDeviceFromStorageDomain(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStoragePool().getCompatibilityVersion())))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_REDUCE_DOMAIN_DEVICE_NOT_SUPPORTED); } return true; }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { if ((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getStorageDomainId()) != null) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.STORAGE, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_DEVICES_ARE_BEING_EDITED)); } return super.getExclusiveLocks(); }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { if ((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getStorageDomainId()) != null) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.STORAGE, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_IS_BEING_REDUCED)); } return super.getExclusiveLocks(); }
public org.ovirt.engine.core.bll.ValidationResult lunsInDomain(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain, java.util.Set<java.lang.String> luns) { luns.removeAll(lunDao.getAllForVolumeGroup(storageDomain.getStorage()).stream().map(LUNs::getId).collect(java.util.stream.Collectors.toSet())); if (luns.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.validator.storage.BlockStorageDomainValidator.VAR_LUN_IDS, luns, ","); replacements.add(java.lang.String.format("$storageDomainName %s", storageDomain.getName())); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DEVICE_NOT_IN_STORAGE_DOMAIN, replacements); }	public org.ovirt.engine.core.bll.ValidationResult lunsInDomain(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain, java.util.Collection<java.lang.String> luns) { java.util.Collection<java.lang.String> notInDomain = org.apache.commons.collections.CollectionUtils.removeAll(luns, lunDao.getAllForVolumeGroup(storageDomain.getStorage()).stream().map(LUNs::getId).collect(java.util.stream.Collectors.toSet())); if (notInDomain.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } return prepareValidationError(notInDomain, storageDomain, EngineMessage.ACTION_TYPE_FAILED_DEVICE_NOT_IN_STORAGE_DOMAIN); }
private org.ovirt.engine.core.bll.ValidationResult validateDevices() { java.util.Set<java.lang.String> devices = org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().stream().collect(java.util.stream.Collectors.toSet()); if ((devices.size()) != (org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().size())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DUPLICATE_DEVICE); } return blockSDValidator.lunsInDomain(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain(), devices); }	private boolean validateDevices() { java.util.Set<java.lang.String> devices = org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().stream().collect(java.util.stream.Collectors.toSet()); if ((devices.size()) != (org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().size())) { return validate(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DUPLICATE_DEVICE)); } return (validate(blockSDValidator.lunsInDomain(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain(), devices))) && (validate(blockSDValidator.lunsEligibleForOperation(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain(), devices))); }
@java.lang.Override protected boolean validate() { if (org.apache.commons.collections.CollectionUtils.isEmpty(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce())) { failValidation(EngineMessage.ACTION_TYPE_FAILED_PARAMETERS_INVALID); } if (!(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.checkStorageDomain())) { return false; } if (!(validateReduceDeviceSupported())) { return false; } if (!(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorageType().isBlockDomain())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); } if (!(validate(validateDevices()))) { return false; } if (!(checkStorageDomainStatus(StorageDomainStatus.Maintenance))) { return false; } if (!(initializeVds())) { return false; } return true; }	@java.lang.Override protected boolean validate() { if (org.apache.commons.collections.CollectionUtils.isEmpty(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_NO_DEVICES_PROVIDED); } if (!(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.checkStorageDomain())) { return false; } if (!(validateReduceDeviceSupported())) { return false; } if (!(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageType().isBlockDomain())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); } if (!(validateDevices())) { return false; } if (!(checkStorageDomainStatus(StorageDomainStatus.Maintenance))) { return false; } if (!(initializeVds())) { return false; } return true; }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.AffinityGroup model, org.ovirt.engine.api.model.AffinityGroup transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getCluster().getId(), transform.getCluster().getId()); assertEquals(model.isPositive(), transform.isPositive()); assertEquals(model.isEnforcing(), transform.isEnforcing()); assertNotNull(transform.getHostsRule()); assertEquals(model.getHostsRule().isEnabled(), transform.getHostsRule().isEnabled()); assertEquals(model.getHostsRule().isEnforcing(), transform.getHostsRule().isEnforcing()); assertEquals(model.getHostsRule().isPositive(), transform.getHostsRule().isPositive()); assertNotNull(transform.getVmsRule()); assertEquals(model.getVmsRule().isEnabled(), transform.getVmsRule().isEnabled()); assertEquals(model.getVmsRule().isEnforcing(), transform.getVmsRule().isEnforcing()); assertEquals(model.getVmsRule().isPositive(), transform.getVmsRule().isPositive()); }	@java.lang.Override protected void verify(org.ovirt.engine.api.model.AffinityGroup model, org.ovirt.engine.api.model.AffinityGroup transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getCluster().getId(), transform.getCluster().getId()); assertEquals(model.isPositive(), transform.isPositive()); assertEquals(model.isEnforcing(), transform.isEnforcing()); assertNotNull(transform.getHostsRule()); assertEquals(model.getHostsRule().isEnabled(), transform.getHostsRule().isEnabled()); assertEquals(model.getHostsRule().isEnforcing(), transform.getHostsRule().isEnforcing()); assertEquals(model.getHostsRule().isPositive(), transform.getHostsRule().isPositive()); assertNotNull(transform.getVmsRule()); assertEquals(model.getVmsRule().isEnabled(), transform.getVmsRule().isEnabled()); assertEquals(model.getVmsRule().isEnforcing(), transform.getVmsRule().isEnforcing()); if (transform.getVmsRule().isEnabled()) { assertEquals(model.getVmsRule().isPositive(), transform.getVmsRule().isPositive()); } else { assertEquals(false, transform.getVmsRule().isPositive()); } }
public org.ovirt.engine.core.common.businessentities.LeaseInfo getLeaseInfo() { return leaseInfo; }	public org.ovirt.engine.core.common.businessentities.LeaseStatus getLeaseStatus() { return leaseStatus; }
public void setLeaseInfo(org.ovirt.engine.core.common.businessentities.LeaseInfo leaseInfo) { this.leaseInfo = leaseInfo; }	public void setLeaseStatus(org.ovirt.engine.core.common.businessentities.LeaseStatus leaseStatus) { this.leaseStatus = leaseStatus; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Step.class, to = org.ovirt.engine.api.model.Step.class) public static org.ovirt.engine.api.model.Step map(org.ovirt.engine.api.model.Step step, org.ovirt.engine.core.common.job.Step entity) { org.ovirt.engine.core.common.job.Step target = (entity != null) ? entity : new org.ovirt.engine.core.common.job.Step(); target.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getId())); if (step.isSetParentStep()) { target.setParentStepId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getParentStep().getId())); } target.setJobId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getJob().getId())); if (step.isSetType()) { target.setStepType(org.ovirt.engine.api.restapi.types.StepMapper.map(step.getType())); } if (step.isSetDescription()) { target.setDescription(step.getDescription()); } if (step.isSetNumber()) { target.setStepNumber(step.getNumber()); } if (step.isSetStatus()) { target.setStatus(org.ovirt.engine.api.restapi.types.StepMapper.mapStepStatus(step.getStatus())); } target.setProgress(step.getProgress()); target.setStartTime((step.isSetStartTime() ? step.getStartTime().toGregorianCalendar().getTime() : new java.sql.Date(java.util.Calendar.getInstance().getTimeInMillis()))); target.setEndTime((step.isSetEndTime() ? step.getEndTime().toGregorianCalendar().getTime() : new java.sql.Date(java.util.Calendar.getInstance().getTimeInMillis()))); target.setExternal((step.isSetExternal() ? step.isExternal() : true)); return target; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Step.class, to = org.ovirt.engine.api.model.Step.class) public static org.ovirt.engine.api.model.Step map(org.ovirt.engine.api.model.Step step, org.ovirt.engine.core.common.job.Step entity) { org.ovirt.engine.core.common.job.Step target = (entity != null) ? entity : new org.ovirt.engine.core.common.job.Step(); target.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getId())); if (step.isSetParentStep()) { target.setParentStepId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getParentStep().getId())); } target.setJobId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getJob().getId())); if (step.isSetType()) { target.setStepType(org.ovirt.engine.api.restapi.types.StepMapper.map(step.getType())); } if (step.isSetDescription()) { target.setDescription(step.getDescription()); } if (step.isSetNumber()) { target.setStepNumber(step.getNumber()); } if (step.isSetStatus()) { target.setStatus(org.ovirt.engine.api.restapi.types.StepMapper.mapStepStatus(step.getStatus())); } if (step.isSetProgress()) { target.setProgress(step.getProgress()); } target.setStartTime((step.isSetStartTime() ? step.getStartTime().toGregorianCalendar().getTime() : new java.sql.Date(java.util.Calendar.getInstance().getTimeInMillis()))); target.setEndTime((step.isSetEndTime() ? step.getEndTime().toGregorianCalendar().getTime() : new java.sql.Date(java.util.Calendar.getInstance().getTimeInMillis()))); target.setExternal((step.isSetExternal() ? step.isExternal() : true)); return target; }
private boolean perform() { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setStartTime(new java.util.Date()); allVmPassthroughNics = getAllVmPassthroughNics(); log.debug("Performing migration with following passthrough nics: {}", allVmPassthroughNics); try { org.ovirt.engine.core.bll.MigrateVmCommand.InvocationResult invocationResult = plugOrUnplugNics(allVmPassthroughNics, PlugAction.UNPLUG); if (!(invocationResult.success)) { invocationResult.producedErrorMessages.forEach(this::addValidationMessage); return false; } if ((connectLunDisks(getDestinationVdsId())) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } } catch (org.ovirt.engine.core.common.errors.EngineException e) { } org.ovirt.engine.core.bll.MigrateVmCommand.runningFailed(); return false; }	private boolean perform() { try { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setStartTime(new java.util.Date()); allVmPassthroughNics = getAllVmPassthroughNics(); log.debug("Performing migration with following passthrough nics: {}", allVmPassthroughNics); if (!(unplugNics(allVmPassthroughNics))) { return false; } if ((connectLunDisks(getDestinationVdsId())) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } } catch (java.lang.Exception e) { log.debug("Migration failed.", e); cleanupPassthroughVnics(getDestinationVdsId()); } org.ovirt.engine.core.bll.MigrateVmCommand.runningFailed(); return false; }
private void logPlugUnplug(org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.action.PlugAction plugAction) { switch (plugAction) { case PLUG : log.debug("Plugging nic id='{}'", nic.getId()); break; case UNPLUG : log.debug("Unplugging nic id='{}'", nic.getId()); break; default : throw new java.lang.RuntimeException("Unknown enum value"); } }	private org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters createActivateDeactivateVmNicParameters(org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.action.PlugAction plugAction) { org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters parameters = new org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters(nic, plugAction, false); parameters.setVmId(org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().getVmId()); return parameters; }
private org.ovirt.engine.core.bll.MigrateVmCommand.InvocationResult plugOrUnplugNic(org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.action.PlugAction plugAction) { org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters parameters = new org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters(nic, plugAction, false); parameters.setVmId(org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().getVmId()); logPlugUnplug(nic, plugAction); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalAction(VdcActionType.ActivateDeactivateVmNic, parameters); return new org.ovirt.engine.core.bll.MigrateVmCommand.InvocationResult(returnValue.getSucceeded(), returnValue.getValidationMessages()); }	private java.util.List<org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters> createActivateDeactivateVmNicParameters(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmNics, org.ovirt.engine.core.common.action.PlugAction plugAction) { return vmNics.stream().map(( vmNic) -> createActivateDeactivateVmNicParameters(vmNic, plugAction)).collect(java.util.stream.Collectors.toList()); }
@java.lang.Override public void runningSucceded() { try { getDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugOrUnplugNics(allVmPassthroughNics, PlugAction.PLUG); } finally { super.runningSucceded(); } }	@java.lang.Override public void runningSucceded() { try { getDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); } finally { super.runningSucceded(); try { plugNics(allVmPassthroughNics); } catch (java.lang.Exception e) { log.debug("Failed to plug nic back after migration", e); log.error("Failed to plug nic back after migration"); } } }
public void setHostedEngineDeployed(boolean value) { this.hostedEngineDeployed = value; }	public void setHostedEngineConfigured(boolean heConfigured) { this.hostedEngineConfigured = heConfigured; }
public void setHostedEngineDeployed(boolean value) { vdsDynamic.setHostedEngineDeployed(value); }	public void setHostedEngineConfigured(boolean heConfigured) { vdsDynamic.setHostedEngineConfigured(heConfigured); }
public boolean isHostedEngineDeployed() { return vdsDynamic.isHostedEngineDeployed(); }	public boolean isHostedEngineConfigured() { return vdsDynamic.isHostedEngineConfigured(); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineDeployed); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured); }
public boolean isHostedEngineDeployed() { return hostedEngineDeployed; }	public boolean isHostedEngineConfigured() { return hostedEngineConfigured; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> getAllForCluster(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userId, boolean filtered) { return getCallsHandler().executeReadList("GetVnicProfileViewsByDataCenterId", org.ovirt.engine.core.dao.network.VnicProfileViewDaoImpl.VnicProfileViewRowMapper.INSTANCE, getCustomMapSqlParameterSource().addValue("id", id).addValue("user_id", userId).addValue("is_filtered", filtered)); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> getAllForCluster(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userId, boolean filtered) { return getCallsHandler().executeReadList("GetVnicProfileViewsByClusterId", org.ovirt.engine.core.dao.network.VnicProfileViewDaoImpl.VnicProfileViewRowMapper.INSTANCE, getCustomMapSqlParameterSource().addValue("id", id).addValue("user_id", userId).addValue("is_filtered", filtered)); }
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String postZero, boolean discard, java.lang.String force);	org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String postZero, java.lang.Boolean discard, java.lang.String force);
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn moveImage(java.lang.String spUUID, java.lang.String srcDomUUID, java.lang.String dstDomUUID, java.lang.String imgGUID, java.lang.String vmGUID, int op, java.lang.String postZero, boolean discard, java.lang.String force);	org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn moveImage(java.lang.String spUUID, java.lang.String srcDomUUID, java.lang.String dstDomUUID, java.lang.String imgGUID, java.lang.String vmGUID, int op, java.lang.String postZero, java.lang.Boolean discard, java.lang.String force);
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn copyImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String srcImgGUID, java.lang.String srcVolUUID, java.lang.String dstImgGUID, java.lang.String dstVolUUID, java.lang.String descr, java.lang.String dstSdUUID, int volType, int volFormat, int preallocate, java.lang.String postZero, boolean discard, java.lang.String force);	org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn copyImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String srcImgGUID, java.lang.String srcVolUUID, java.lang.String dstImgGUID, java.lang.String dstVolUUID, java.lang.String descr, java.lang.String dstSdUUID, int volType, int volFormat, int preallocate, java.lang.String postZero, java.lang.Boolean discard, java.lang.String force);
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { boolean discardAfterDelete = getStorageDomainDao().get(guids.get(0)).isDiscardAfterDelete(); return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(4), isPostZero(), discardAfterDelete, false)); }	@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { boolean discardAfterDelete = storageDomainDao.get(guids.get(0)).isDiscardAfterDelete(); return postDeleteActionHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(4), isPostZero(), discardAfterDelete, false)); }
protected boolean validateDiscardAfterDeleteLegal(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator) { if (org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().isDiscardAfterDelete()) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISCARD_AFTER_DELETE_SUPPORTED_ONLY_BY_BLOCK_DOMAINS); } return true; }	protected abstract boolean validateDiscardAfterDeleteLegal(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator, org.ovirt.engine.core.compat.Version compatibilityVersion);
@java.lang.Override @java.lang.SuppressWarnings("unchecked") protected boolean validateDiscardAfterDeleteLegal(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetDeviceList, new org.ovirt.engine.core.common.vdscommands.GetDeviceListVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageType(), false, org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getParameters().getLunIds())).getReturnValue())); return validate(storageDomainValidator.isDiscardAfterDeleteLegalForNewBlockStorageDomain(luns)); }	@java.lang.Override @java.lang.SuppressWarnings("unchecked") protected boolean validateDiscardAfterDeleteLegal(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator, org.ovirt.engine.core.compat.Version compatibilityVersion) { if (!(validate(storageDomainValidator.isDiscardAfterDeleteSupportedByDcVersion(compatibilityVersion)))) { return false; } java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetDeviceList, new org.ovirt.engine.core.common.vdscommands.GetDeviceListVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageType(), false, org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getParameters().getLunIds())).getReturnValue())); return validate(storageDomainValidator.isDiscardAfterDeleteLegalForNewBlockStorageDomain(luns)); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { boolean discardAfterDelete = getStorageDomainDao().get(guids.get(0)).isDiscardAfterDelete(); return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), discardAfterDelete, false)); }	@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { boolean discardAfterDelete = storageDomainDao.get(guids.get(0)).isDiscardAfterDelete(); return postDeleteActionHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), discardAfterDelete, false)); }
private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if (((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) || (!(validate(storageDomainValidator.isDiscardAfterDeleteLegalForExistingStorageDomain())))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("discardAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn("There was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }	private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if (((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) || (!(validateDiscardAfterDeleteLegal(storageDomainValidator)))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("discardAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn("There was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
private void mockStorageDomainValidator() { doReturn(storageDomainValidator).when(cmd).getStorageDomainValidator(); when(storageDomainValidator.isDiscardAfterDeleteLegalForExistingStorageDomain()).thenReturn(ValidationResult.VALID); }	private void mockStorageDomainValidator() { doReturn(storageDomainValidator).when(cmd).getStorageDomainValidator(); when(storageDomainValidator.isDiscardAfterDeleteLegalForExistingStorageDomain()).thenReturn(ValidationResult.VALID); when(storageDomainValidator.isDiscardAfterDeleteSupportedByDcVersion(any(org.ovirt.engine.core.compat.Version.class))).thenReturn(ValidationResult.VALID); }
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteVolume(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String[] volUUID, java.lang.String postZero, boolean discard, java.lang.String force);	org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteVolume(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String[] volUUID, java.lang.String postZero, java.lang.Boolean discard, java.lang.String force);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn moveImage(java.lang.String spUUID, java.lang.String srcDomUUID, java.lang.String dstDomUUID, java.lang.String imgGUID, java.lang.String vmGUID, int op, java.lang.String postZero, boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.move").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", srcDomUUID).withParameter("dstSdUUID", dstDomUUID).withParameter("operation", op).withParameter("postZero", postZero).withParameter("discard", discard).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn moveImage(java.lang.String spUUID, java.lang.String srcDomUUID, java.lang.String dstDomUUID, java.lang.String imgGUID, java.lang.String vmGUID, int op, java.lang.String postZero, java.lang.Boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.move").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", srcDomUUID).withParameter("dstSdUUID", dstDomUUID).withParameter("operation", op).withParameter("postZero", postZero).withOptionalParameter("discard", discard).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn mergeSnapshots(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String imgGUID, java.lang.String ancestorUUID, java.lang.String successorUUID, java.lang.String postZero, boolean discard);	org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn mergeSnapshots(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String imgGUID, java.lang.String ancestorUUID, java.lang.String successorUUID, java.lang.String postZero, java.lang.Boolean discard);
private void updateDiscardAfterDelete() { if ((getAvailableStorageTypeItems().getSelectedItem()) != null) { boolean isBlockDomain = getAvailableStorageTypeItems().getSelectedItem().isBlockDomain(); getDiscardAfterDelete().setIsAvailable(isBlockDomain); if (isBlockDomain) { if (isNewStorage()) { getDiscardAfterDelete().setEntity(false); } else { getDiscardAfterDelete().setEntity(getStorage().isDiscardAfterDelete()); } } } }	private void updateDiscardAfterDelete() { if (((getDataCenter().getSelectedItem()) != null) && ((getAvailableStorageTypeItems().getSelectedItem()) != null)) { boolean isBlockDomain = getAvailableStorageTypeItems().getSelectedItem().isBlockDomain(); if (!isBlockDomain) { getDiscardAfterDelete().setIsAvailable(false); getDiscardAfterDelete().setEntity(false); return; } boolean discardAfterDeleteSupported = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.DiscardAfterDeleteSupported, getDataCenter().getSelectedItem().getCompatibilityVersion().toString()))); getDiscardAfterDelete().setIsAvailable(discardAfterDeleteSupported); if (getDiscardAfterDelete().getIsAvailable()) { if (isNewStorage()) { getDiscardAfterDelete().setEntity(false); } else { getDiscardAfterDelete().setEntity(getStorage().isDiscardAfterDelete()); } } } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn mergeSnapshots(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String imgGUID, java.lang.String ancestorUUID, java.lang.String successorUUID, java.lang.String postZero, boolean discard) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.mergeSnapshots").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("ancestor", ancestorUUID).withParameter("successor", successorUUID).withParameter("postZero", postZero).withParameter("discard", discard).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn mergeSnapshots(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String imgGUID, java.lang.String ancestorUUID, java.lang.String successorUUID, java.lang.String postZero, java.lang.Boolean discard) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.mergeSnapshots").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("ancestor", ancestorUUID).withParameter("successor", successorUUID).withParameter("postZero", postZero).withOptionalParameter("discard", discard).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteVolume(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String[] volUUID, java.lang.String postZero, boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.deleteVolumes").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("volumeList", new java.util.ArrayList(java.util.Arrays.asList(volUUID))).withOptionalParameter("postZero", postZero).withOptionalParameter("discard", discard).withOptionalParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteVolume(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String[] volUUID, java.lang.String postZero, java.lang.Boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.deleteVolumes").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("volumeList", new java.util.ArrayList(java.util.Arrays.asList(volUUID))).withOptionalParameter("postZero", postZero).withOptionalParameter("discard", discard).withOptionalParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String postZero, boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.delete").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("postZero", postZero).withParameter("discard", discard).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String postZero, java.lang.Boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.delete").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("postZero", postZero).withOptionalParameter("discard", discard).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn copyImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String srcImgGUID, java.lang.String srcVolUUID, java.lang.String dstImgGUID, java.lang.String dstVolUUID, java.lang.String descr, java.lang.String dstSdUUID, int volType, int volFormat, int preallocate, java.lang.String postZero, boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Volume.copy").withParameter("volumeID", srcVolUUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("imageID", srcImgGUID).withParameter("dstSdUUID", dstSdUUID).withParameter("dstImgUUID", dstImgGUID).withParameter("dstVolUUID", dstVolUUID).withParameter("desc", descr).withParameter("volType", volType).withParameter("volFormat", volFormat).withParameter("preallocate", preallocate).withParameter("postZero", postZero).withParameter("discard", discard).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn copyImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String srcImgGUID, java.lang.String srcVolUUID, java.lang.String dstImgGUID, java.lang.String dstVolUUID, java.lang.String descr, java.lang.String dstSdUUID, int volType, int volFormat, int preallocate, java.lang.String postZero, java.lang.Boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Volume.copy").withParameter("volumeID", srcVolUUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("imageID", srcImgGUID).withParameter("dstSdUUID", dstSdUUID).withParameter("dstImgUUID", dstImgGUID).withParameter("dstVolUUID", dstVolUUID).withParameter("desc", descr).withParameter("volType", volType).withParameter("volFormat", volFormat).withParameter("preallocate", preallocate).withParameter("postZero", postZero).withOptionalParameter("discard", discard).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }
public org.ovirt.engine.core.bll.network.macpool.ReadOnlyMacPool getMacPoolForCluster(org.ovirt.engine.core.compat.Guid clusterId) { return getMacPoolById(getMacPoolId(clusterId)); }	public org.ovirt.engine.core.bll.network.macpool.ReadMacPool getMacPoolForCluster(org.ovirt.engine.core.compat.Guid clusterId) { return getMacPoolById(getMacPoolId(clusterId)); }
@java.lang.Override public java.lang.String toString() { return (((((((("SubchainInfo [" + "storageDomainId=") + (storageDomainId)) + ", imageGroupId=") + (imageGroupId)) + ", baseImageId=") + (baseImageId)) + ", topImageId=") + (topImageId)) + ']'; }	@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId).append("imageGroupId", imageGroupId).append("baseImageId", baseImageId).append("topImageId", topImageId).build(); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.ColdMergeIRSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.ColdMergeIRSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getJobId(), org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getParameters().getSubchainInfo()); runVdsCommand(VDSCommandType.PrepareMerge, parameters); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.SPMColdMergeVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SPMColdMergeVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getParameters().getSubchainInfo()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.PrepareMerge, parameters); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getParameters().getParentCommand()); org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.setSucceeded(true); } }
private org.ovirt.engine.core.common.action.ColdMergeCommandParameters buildColdMergeParameters(org.ovirt.engine.core.compat.Guid topVolumeId, org.ovirt.engine.core.compat.Guid baseVolumeId) { org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo = new org.ovirt.engine.core.common.businessentities.SubchainInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), baseVolumeId, topVolumeId); org.ovirt.engine.core.common.action.ColdMergeCommandParameters parameters = new org.ovirt.engine.core.common.action.ColdMergeCommandParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStoragePoolId(), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters().getJobId(), subchainInfo); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(VdcActionType.ColdMergeSnapshotSingleDisk); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }	private org.ovirt.engine.core.common.action.ColdMergeCommandParameters buildColdMergeParameters(org.ovirt.engine.core.compat.Guid baseVolumeId, org.ovirt.engine.core.compat.Guid topVolumeId) { org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo = new org.ovirt.engine.core.common.businessentities.SubchainInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), baseVolumeId, topVolumeId); org.ovirt.engine.core.common.action.ColdMergeCommandParameters parameters = new org.ovirt.engine.core.common.action.ColdMergeCommandParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStoragePoolId(), subchainInfo); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }
@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getCommandStep() { return org.ovirt.engine.core.common.job.StepEnum.PREPARE_MERGE; }	@java.lang.Override protected org.ovirt.engine.core.common.asynctasks.AsyncTaskType getTaskType() { return org.ovirt.engine.core.common.asynctasks.AsyncTaskType.prepareMerge; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc prepareMerge(java.lang.String spUUID, java.lang.String jobUUID, java.util.Map<java.lang.String, java.lang.String> subchainInfo) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.prepare_merge").withParameter("storagepoolID", spUUID).withParameter("job_id", jobUUID).withParameter("subchain_info", subchainInfo).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn moveImage(java.lang.String spUUID, java.lang.String srcDomUUID, java.lang.String dstDomUUID, java.lang.String imgGUID, java.lang.String vmGUID, int op, java.lang.String postZero, java.lang.Boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.move").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", srcDomUUID).withParameter("dstSdUUID", dstDomUUID).withParameter("operation", op).withParameter("postZero", postZero).withOptionalParameter("discard", discard).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }
org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc prepareMerge(java.lang.String spUUID, java.lang.String jobUUID, java.util.Map<java.lang.String, java.lang.String> subchainInfo);	org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn moveImage(java.lang.String spUUID, java.lang.String srcDomUUID, java.lang.String dstDomUUID, java.lang.String imgGUID, java.lang.String vmGUID, int op, java.lang.String postZero, java.lang.Boolean discard, java.lang.String force);
@java.lang.Override protected void executeIrsBrokerCommand() { org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getIrsProxy().prepareMerge(org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getStorageJobId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getSubchainInfo().convertToVdsmMergeSnapshotsInfo()); }	@java.lang.Override protected void executeIrsBrokerCommand() { uuidReturn = org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getIrsProxy().prepareMerge(org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.common.utils.SubchainInfoHelper.prepareSubchainInfoForVdsCommand(org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getSubchainInfo())); org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.compat.Guid taskID = new org.ovirt.engine.core.compat.Guid(uuidReturn.uuid); org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getVDSReturnValue().setCreationInfo(new org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo(taskID, org.ovirt.engine.core.common.asynctasks.AsyncTaskType.prepareMerge, org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getStoragePoolId())); }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("srcInfo", getSrcInfo()).append("dstInfo", getDstInfo()).append("collapse", collapse); }	@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("srcInfo", srcInfo).append("dstInfo", dstInfo).append("collapse", collapse); }
@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getCommandStep() { return org.ovirt.engine.core.common.job.StepEnum.COLD_MERGE; }	@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getCommandStep() { return org.ovirt.engine.core.common.job.StepEnum.MERGE_SNAPSHOTS; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithFailover(VDSCommandType.ColdMerge, new org.ovirt.engine.core.common.vdscommands.ColdMergeVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStorageJobId(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSrcInfo(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getDstInfo()), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStoragePoolId(), this); org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithFailover(VDSCommandType.ColdMerge, new org.ovirt.engine.core.common.vdscommands.ColdMergeVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStorageJobId(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo()), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStoragePoolId(), this); org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.setSucceeded(true); }
@java.lang.Override protected void executeVdsBrokerCommand() { log.info("-- executeVdsBrokerCommand: calling 'merge'"); status = org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getBroker().merge(org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getParameters().getJobId().toString(), org.ovirt.engine.core.common.utils.LocationInfoHelper.prepareLocationInfoForVdsCommand(org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getParameters().getSrcInfo()), org.ovirt.engine.core.common.utils.LocationInfoHelper.prepareLocationInfoForVdsCommand(org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getParameters().getDstInfo())); org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.proceedProxyReturnValue(); }	@java.lang.Override protected void executeVdsBrokerCommand() { log.info("-- executeVdsBrokerCommand: calling 'mergeSubchain'"); status = org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getBroker().mergeSubchain(org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getParameters().getJobId().toString(), org.ovirt.engine.core.common.utils.SubchainInfoHelper.prepareSubchainInfoForVdsCommand(org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getParameters().getSubchainInfo())); org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc merge(java.lang.String jobId, java.util.Map topImage, java.util.Map baseImage) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.merge").withParameter("top", topImage).withParameter("base", baseImage).withParameter("job_id", jobId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn moveDomainDevice(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> moveParams) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.move_domain_device").withParameter("job_id", jobId).withParameter("move_params", moveParams).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
private org.ovirt.engine.core.common.action.ColdMergeCommandParameters buildColdMergeParameters(org.ovirt.engine.core.compat.Guid srcImageGuid, org.ovirt.engine.core.compat.Guid destImageDuid) { org.ovirt.engine.core.common.action.ColdMergeCommandParameters parameters = new org.ovirt.engine.core.common.action.ColdMergeCommandParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getStoragePoolId(), new org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), srcImageGuid), new org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), destImageDuid)); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(VdcActionType.ColdMergeSnapshotSingleDisk); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }	private org.ovirt.engine.core.common.action.ColdMergeCommandParameters buildColdMergeParameters(org.ovirt.engine.core.compat.Guid baseVolumeId, org.ovirt.engine.core.compat.Guid topVolumeId) { org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo = new org.ovirt.engine.core.common.businessentities.SubchainInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), baseVolumeId, topVolumeId); org.ovirt.engine.core.common.action.ColdMergeCommandParameters parameters = new org.ovirt.engine.core.common.action.ColdMergeCommandParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStoragePoolId(), subchainInfo); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }
@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getCommandStep() { return org.ovirt.engine.core.common.job.StepEnum.FINALIZE_MERGE; }	@java.lang.Override protected org.ovirt.engine.core.common.asynctasks.AsyncTaskType getTaskType() { return org.ovirt.engine.core.common.asynctasks.AsyncTaskType.finalizeMerge; }
org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc finalizeMerge(java.lang.String spUUID, java.lang.String jobUUID, java.util.Map<java.lang.String, java.lang.String> subchainInfo);	org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn finalizeMerge(java.lang.String spUUID, java.util.Map<java.lang.String, java.lang.String> subchainInfo);
@java.lang.Override protected void executeIrsBrokerCommand() { org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getIrsProxy().prepareMerge(org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getParameters().getStorageJobId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getParameters().getSubchainInfo().convertToVdsmMergeSnapshotsInfo()); }	@java.lang.Override protected void executeIrsBrokerCommand() { uuidReturn = org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getIrsProxy().finalizeMerge(org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.common.utils.SubchainInfoHelper.prepareSubchainInfoForVdsCommand(org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getParameters().getSubchainInfo())); org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.compat.Guid taskID = new org.ovirt.engine.core.compat.Guid(uuidReturn.uuid); org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getVDSReturnValue().setCreationInfo(new org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo(taskID, org.ovirt.engine.core.common.asynctasks.AsyncTaskType.finalizeMerge, org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getParameters().getStoragePoolId())); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc finalizeMerge(java.lang.String spUUID, java.lang.String jobUUID, java.util.Map<java.lang.String, java.lang.String> subchainInfo) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.finalize_merge").withParameter("storagepoolID", spUUID).withParameter("job_id", jobUUID).withParameter("subchain_info", subchainInfo).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn finalizeMerge(java.lang.String spUUID, java.util.Map<java.lang.String, java.lang.String> subchainInfo) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("StoragePool.finalizeMerge").withParameter("storagepoolID", spUUID).withParameter("subchainInfo", subchainInfo).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.ColdMergeIRSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.ColdMergeIRSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.FinalizeMergeCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.FinalizeMergeCommand.getJobId(), org.ovirt.engine.core.bll.storage.disk.image.FinalizeMergeCommand.getParameters().getSubchainInfo()); runVdsCommand(VDSCommandType.FinalizeMerge, parameters); }	@java.lang.Override protected void executeCommand() { executeSPMMergeCommand(VDSCommandType.FinalizeMerge); }
private void updateHaMaintenanceAvailability(java.util.List items) { getEnableGlobalHaMaintenanceCommand().setIsExecutionAllowed(false); getDisableGlobalHaMaintenanceCommand().setIsExecutionAllowed(false); if ((items == null) || ((items.size()) != 1)) { return; } org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem(); if ((vm == null) || (!(vm.isHostedEngine()))) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostById(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.businessentities.VDS>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.VDS vds) { boolean isMaintenance = vds.getHighlyAvailableGlobalMaintenance(); getEnableGlobalHaMaintenanceCommand().setIsExecutionAllowed((!isMaintenance)); getDisableGlobalHaMaintenanceCommand().setIsExecutionAllowed(isMaintenance); } }), vm.getRunOnVds()); }	public org.ovirt.engine.ui.uicommonweb.models.Model getDiskWindow() { return diskModel; }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getJobMessageProperties() { java.util.Map<java.lang.String, java.lang.String> props = super.getJobMessageProperties(); props.put(org.ovirt.engine.core.bll.storage.domain.STEP_DEVICE_TYPE, org.ovirt.engine.core.bll.storage.domain.RemoveDeviceFromSANStorageDomainCommand.getParameters().getDeviceId()); return props; }	@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getJobMessageProperties() { if ((jobProperties) == null) { jobProperties = super.getJobMessageProperties(); } jobProperties.put(org.ovirt.engine.core.bll.storage.domain.STEP_DEVICE_TYPE, org.ovirt.engine.core.bll.storage.domain.RemoveDeviceFromSANStorageDomainCommand.getParameters().getDeviceId()); return jobProperties; }
@org.junit.Test public void testFindExternalMacAddresses() { when(mockMacPool.isMacInRange(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_1)).thenReturn(java.lang.Boolean.TRUE); when(mockMacPool.isMacInRange(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_2)).thenReturn(java.lang.Boolean.FALSE); vm.setInterfaces(java.util.Arrays.asList(vNic1, vNic2)); final java.util.Set<java.lang.String> actual = underTest.findExternalMacAddresses(vm); assertThat(actual, contains(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_2)); }	@org.junit.Test public void testFindExternalMacAddresses() { when(mockReadMacPool.isMacInRange(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_1)).thenReturn(java.lang.Boolean.TRUE); when(mockReadMacPool.isMacInRange(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_2)).thenReturn(java.lang.Boolean.FALSE); vm.setInterfaces(java.util.Arrays.asList(vNic1, vNic2)); final java.util.Set<java.lang.String> actual = underTest.findExternalMacAddresses(vm); assertThat(actual, contains(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_2)); }
private static boolean isDisplayTypeSupported(org.ovirt.engine.core.common.businessentities.DisplayType displayType, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.DisplayType>> graphicsAndDisplays) { if (displayType == (org.ovirt.engine.core.common.businessentities.DisplayType.none)) { return true; } for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.DisplayType> pair : graphicsAndDisplays) { if (displayType.equals(pair.getSecond())) { return true; } } return false; }	private static boolean isDisplayTypeSupported(org.ovirt.engine.core.common.businessentities.DisplayType displayType, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.DisplayType>> graphicsAndDisplays) { for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.DisplayType> pair : graphicsAndDisplays) { if (displayType.equals(pair.getSecond())) { return true; } } return false; }
public void addVideoDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, int numberOfVideoDevices) { for (int i = 0; i < numberOfVideoDevices; i++) { if ((vmBase.getDefaultDisplayType()) != (org.ovirt.engine.core.common.businessentities.DisplayType.none)) { addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vmBase.getId()), VmDeviceGeneralType.VIDEO, vmBase.getDefaultDisplayType().getDefaultVmDeviceType(), getVideoDeviceSpecParams(vmBase), true, false); } } }	public void addVideoDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, int numberOfVideoDevices) { if ((vmBase.getDefaultDisplayType()) != (org.ovirt.engine.core.common.businessentities.DisplayType.none)) { for (int i = 0; i < numberOfVideoDevices; i++) { addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vmBase.getId()), VmDeviceGeneralType.VIDEO, vmBase.getDefaultDisplayType().getDefaultVmDeviceType(), getVideoDeviceSpecParams(vmBase), true, false); } } }
@java.lang.Override protected boolean validate() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.Permission p = permissionDao.get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getPermission().getId()); if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isLastSuperUserPermission(p.getRoleId())) { org.ovirt.engine.core.bll.RemovePermissionCommand.getReturnValue().getValidationMessages().add(EngineMessage.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString()); returnValue = false; } else if ((p.getRoleType().equals(RoleType.ADMIN)) && (!(org.ovirt.engine.core.bll.RemovePermissionCommand.isSystemSuperUser()))) { addValidationMessage(EngineMessage.PERMISSION_REMOVE_FAILED_ONLY_SYSTEM_SUPER_USER_CAN_REMOVE_ADMIN_ROLES); returnValue = false; } else if ((java.util.Objects.equals(p.getObjectId(), MultiLevelAdministrationHandler.SYSTEM_OBJECT_ID)) && (java.util.Objects.equals(p.getAdElementId(), MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID))) { addValidationMessage(EngineMessage.SYSTEM_PERMISSIONS_CANT_BE_REMOVED_TO_EVERYONE); returnValue = false; } if ((!(java.util.Objects.equals(p.getAdElementId(), org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId()))) && ((dbUserDao.get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId())) != null)) { addValidationMessage(EngineMessage.INHERITED_PERMISSION_CANT_BE_REMOVED); returnValue = false; } return returnValue; }	@java.lang.Override protected boolean validate() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.Permission p = permissionDao.get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getPermission().getId()); if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isLastSuperUserPermission(p.getRoleId())) { org.ovirt.engine.core.bll.RemovePermissionCommand.getReturnValue().getValidationMessages().add(EngineMessage.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString()); returnValue = false; } else if ((p.getRoleType().equals(RoleType.ADMIN)) && (!(org.ovirt.engine.core.bll.RemovePermissionCommand.isSystemSuperUser()))) { addValidationMessage(EngineMessage.PERMISSION_REMOVE_FAILED_ONLY_SYSTEM_SUPER_USER_CAN_REMOVE_ADMIN_ROLES); returnValue = false; } else if ((java.util.Objects.equals(p.getObjectId(), MultiLevelAdministrationHandler.SYSTEM_OBJECT_ID)) && (java.util.Objects.equals(p.getAdElementId(), MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID))) { addValidationMessage(EngineMessage.SYSTEM_PERMISSIONS_CANT_BE_REMOVED_FROM_EVERYONE); returnValue = false; } if ((!(java.util.Objects.equals(p.getAdElementId(), org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId()))) && ((dbUserDao.get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId())) != null)) { addValidationMessage(EngineMessage.INHERITED_PERMISSION_CANT_BE_REMOVED); returnValue = false; } return returnValue; }
@org.junit.Test public void testGetLunsThatBreakPassDiscardFunctionalityFullPassDiscardFunctionalityBreaks() { createVmDiskOnSd(false, false); createVmDiskOnSd(true, true); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardSupport = createLunWithDiscardFunctionality(0L, false); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardZeroesTheDataSupport = createLunWithDiscardFunctionality(1024L, false); assertGetLunsThatBreakPassDiscardFunctionalityContainsExpectedLuns(java.util.Arrays.asList(createLunWithDiscardFunctionality(1024L, true), lunThatBreaksDiscardSupport, lunThatBreaksDiscardZeroesTheDataSupport), java.util.Arrays.asList(lunThatBreaksDiscardSupport, lunThatBreaksDiscardZeroesTheDataSupport)); }	@org.junit.Test public void testGetLunsThatBreakPassDiscardFunctionalityFullDiscardFunctionalityBreaks() { createVmDiskOnSd(false, false); createVmDiskOnSd(true, true); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardSupport = createLunWithDiscardFunctionality(0L, false); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardZeroesTheDataSupport = createLunWithDiscardFunctionality(1024L, false); assertGetLunsThatBreakPassDiscardFunctionalityContainsExpectedLuns(java.util.Arrays.asList(createLunWithDiscardFunctionality(1024L, true), lunThatBreaksDiscardSupport, lunThatBreaksDiscardZeroesTheDataSupport), java.util.Arrays.asList(lunThatBreaksDiscardSupport, lunThatBreaksDiscardZeroesTheDataSupport)); }
@org.junit.Test public void testGetLunsThatBreakPassDiscardFunctionalityPassDiscardFunctionalityDoesntBreak() { createVmDiskOnSd(false, false); createVmDiskOnSd(true, true); assertGetLunsThatBreakPassDiscardFunctionalityContainsExpectedLuns(java.util.Arrays.asList(createLunWithDiscardFunctionality(1024L, true), createLunWithDiscardFunctionality(2048L, true)), java.util.Collections.emptyList()); }	@org.junit.Test public void testGetLunsThatBreakPassDiscardFunctionalityDiscardFunctionalityDoesntBreak() { createVmDiskOnSd(false, false); createVmDiskOnSd(true, true); assertGetLunsThatBreakPassDiscardFunctionalityContainsExpectedLuns(java.util.Arrays.asList(createLunWithDiscardFunctionality(1024L, true), createLunWithDiscardFunctionality(2048L, true)), java.util.Collections.emptyList()); }
private org.ovirt.engine.core.bll.ValidationResult hostStatusLegalForSetupNetworks() { boolean hostStatusLegalForSetupNetworks = (org.ovirt.engine.core.bll.network.host.HostValidator.LEGAL_STATUSES.contains(host.getStatus())) || (((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing)) && (internalExecution)); if (!hostStatusLegalForSetupNetworks) { org.ovirt.engine.core.bll.network.host.HostValidator.logger.error(("Unable to setup network: operation can only be done when Host status is one of: {};" + " current status is {}"), org.ovirt.engine.core.bll.network.host.HostValidator.LEGAL_STATUSES_STR, host.getStatus()); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL, org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.network.host.HostValidator.VAR_HOST_STATUS, org.ovirt.engine.core.bll.network.host.HostValidator.LEGAL_STATUSES, ",", org.ovirt.engine.core.bll.network.host.HostValidator.LEGAL_STATUSES.size())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	private org.ovirt.engine.core.bll.ValidationResult hostStatusLegalForSetupNetworks() { org.ovirt.engine.core.common.businessentities.VDSStatus hostStatus = host.getStatus(); boolean hostStatusLegalForSetupNetworks = (org.ovirt.engine.core.bll.network.host.HostValidator.LEGAL_STATUSES.contains(hostStatus)) || ((hostStatus == (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing)) && (internalExecution)); if (!hostStatusLegalForSetupNetworks) { org.ovirt.engine.core.bll.network.host.HostValidator.logger.error(("Unable to setup network: operation can only be done when Host status is one of: {};" + " current status is {}"), org.ovirt.engine.core.bll.network.host.HostValidator.LEGAL_STATUSES_STR, hostStatus); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL, org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.network.host.HostValidator.VAR_HOST_STATUS, org.ovirt.engine.core.bll.network.host.HostValidator.LEGAL_STATUSES, ",", org.ovirt.engine.core.bll.network.host.HostValidator.LEGAL_STATUSES.size())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public void setOldClusterVersionOfSnapshotWithMemory(org.ovirt.engine.core.common.businessentities.VM vm) { if (!(isVMWithMemoryCompatible(vm))) { org.ovirt.engine.core.compat.Version originalClusterVersion = vm.getClusterCompatibilityVersionOrigin(); originalClusterVersion = (originalClusterVersion == null) ? org.ovirt.engine.core.compat.Version.v3_6 : originalClusterVersion; this.oldClusterVersionOfSnapshotWithMemory = originalClusterVersion; } else { this.oldClusterVersionOfSnapshotWithMemory = null; } }	public void setOldClusterVersionOfSnapshotWithMemory(org.ovirt.engine.core.common.businessentities.VM vm) { if (!(isVMWithMemoryCompatible(vm))) { org.ovirt.engine.core.compat.Version originalClusterVersion = vm.getClusterCompatibilityVersionOrigin(); originalClusterVersion = (originalClusterVersion == null) ? org.ovirt.engine.core.compat.Version.v3_6 : originalClusterVersion; oldClusterVersionOfSnapshotWithMemory = originalClusterVersion; } else { oldClusterVersionOfSnapshotWithMemory = null; } }
@java.lang.Override protected void executeIrsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.RemoveVmLeaseVDSCommand.getIrsProxy().removeVmLease(org.ovirt.engine.core.vdsbroker.RemoveVmLeaseVDSCommand.getParameters().getLeaseId().toString(), org.ovirt.engine.core.vdsbroker.RemoveVmLeaseVDSCommand.getParameters().getStorageDomainId().toString()); }	@java.lang.Override protected void executeIrsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.vdsbroker.RemoveVmLeaseVDSCommand.getIrsProxy().removeVmLease(org.ovirt.engine.core.vdsbroker.vdsbroker.RemoveVmLeaseVDSCommand.getParameters().getLeaseId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.RemoveVmLeaseVDSCommand.getParameters().getStorageDomainId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.RemoveVmLeaseVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn removeVmLease(java.lang.String leaseUUID, java.lang.String sdUUID) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.delete").withParameter("lease_id", leaseUUID).withParameter("sd_id", sdUUID).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn removeVmLease(java.lang.String leaseUUID, java.lang.String sdUUID) { java.util.HashMap<java.lang.String, java.lang.Object> leaseDict = new java.util.HashMap<>(); leaseDict.put("lease_id", leaseUUID); leaseDict.put("sd_id", sdUUID); org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.delete").withParameter("lease", leaseDict).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn addVmLease(java.lang.String leaseUUID, java.lang.String sdUUID) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.create").withParameter("lease_id", leaseUUID).withParameter("sd_id", sdUUID).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn addVmLease(java.lang.String leaseUUID, java.lang.String sdUUID) { java.util.HashMap<java.lang.String, java.lang.Object> leaseDict = new java.util.HashMap<>(); leaseDict.put("lease_id", leaseUUID); leaseDict.put("sd_id", sdUUID); org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.create").withParameter("lease", leaseDict).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
@java.lang.Override protected void executeIrsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.AddVmLeaseVDSCommand.getIrsProxy().addVmLease(org.ovirt.engine.core.vdsbroker.AddVmLeaseVDSCommand.getParameters().getLeaseId().toString(), org.ovirt.engine.core.vdsbroker.AddVmLeaseVDSCommand.getParameters().getStorageDomainId().toString()); }	@java.lang.Override protected void executeIrsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.vdsbroker.AddVmLeaseVDSCommand.getIrsProxy().addVmLease(org.ovirt.engine.core.vdsbroker.vdsbroker.AddVmLeaseVDSCommand.getParameters().getLeaseId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.AddVmLeaseVDSCommand.getParameters().getStorageDomainId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.AddVmLeaseVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Failed to add VM. The reasons are: {}", java.lang.String.join(",", errorMessages)); return; } if (!(addVmLeaseIfNeeded())) { return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } }	@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Failed to add VM. The reasons are: {}", java.lang.String.join(",", errorMessages)); return; } if (!(addVmLease(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.AddVmCommand.getVmId()))) { return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> getVolumesSupportedAsStorageDomain() { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = getCallsHandler().executeReadList("GetGlusterVolumesSupportedAsStorageDomain", org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoImpl.volumeRowMapper, getCustomMapSqlParameterSource().addValue("replica_count", 3)); return volumes; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> getVolumesSupportedAsStorageDomain() { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = getCallsHandler().executeReadList("GetGlusterVolumesSupportedAsStorageDomain", org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoImpl.volumeRowMapper, null); fetchRelatedEntities(volumes); return volumes; }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.gluster.GetAllGlusterVolumesForStorageDomainQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.gluster.GetAllGlusterVolumesForStorageDomainQuery.getGlusterVolumeDao().getVolumesSupportedAsStorageDomain()); org.ovirt.engine.core.bll.gluster.GetAllGlusterVolumesForStorageDomainQuery.getQueryReturnValue().setSucceeded(true); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.gluster.GetAllGlusterVolumesForStorageDomainQuery.getQueryReturnValue().setReturnValue(glusterVolumeDao.getVolumesSupportedAsStorageDomain()); org.ovirt.engine.core.bll.gluster.GetAllGlusterVolumesForStorageDomainQuery.getQueryReturnValue().setSucceeded(true); }
public org.ovirt.engine.core.bll.ValidationResult isMacAssignableValidator() { java.lang.Boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); boolean illegalDuplicateMacUsage = (!allowDupMacs) && (macPool.isMacInUse(macAddress)); org.ovirt.engine.core.common.errors.EngineMessage failMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE; return org.ovirt.engine.core.bll.ValidationResult.failWith(failMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(failMessage, macAddress)).when(illegalDuplicateMacUsage); }	public org.ovirt.engine.core.bll.ValidationResult isMacAssignableValidator() { boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); boolean illegalDuplicateMacUsage = (!allowDupMacs) && (macPool.isMacInUse(macAddress)); org.ovirt.engine.core.common.errors.EngineMessage failMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE; return org.ovirt.engine.core.bll.ValidationResult.failWith(failMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(failMessage, macAddress)).when(illegalDuplicateMacUsage); }
private void getDefaultConfigurationVersion(final org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue != null) { _defaultConfigurationVersion = returnValue.getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); } }); callback.setHandleFailure(true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetDefaultConfigurationVersion, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), callback); }	private void getDefaultConfigurationVersion(final org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue != null) { _defaultConfigurationVersion = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); } }); callback.setHandleFailure(true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetDefaultConfigurationVersion, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), callback); }
@java.lang.Override public boolean validate() { getGlusterVolumes().validateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(128) }); return (getGlusterVolumes().getIsValid()) && (super.validate()); }	@java.lang.Override public boolean validate() { getGlusterVolumes().validateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(128) }); getVfsType().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.AsciiNameValidation() }); if (getLinkGlusterVolume().getEntity()) { return (getGlusterVolumes().getIsValid()) && (getVfsType().getIsValid()); } else { return super.validate(); } }
@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue != null) { _defaultConfigurationVersion = returnValue.getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue != null) { _defaultConfigurationVersion = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); }
@java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume) { return glusterVolume == null ? "" : glusterVolume.getName(); }	@java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume) { if (glusterVolume == null) { return ""; } else { if (glusterVolume.getBricks().isEmpty()) { return glusterVolume.getName(); } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = glusterVolume.getBricks().get(0); if (brick == null) { return glusterVolume.getName(); } java.lang.String server = (((brick.getNetworkId()) != null) && (!(org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(brick.getNetworkAddress())))) ? brick.getNetworkAddress() : brick.getServerName(); return (server + ":/") + (glusterVolume.getName()); } }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel object) { final org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel glusterStorageModel = object; driver.edit(object); glusterVolumesEditor.setVisible(false); pathExampleLabel.setVisible(((object.getPath().getIsAvailable()) && (object.getPath().getIsChangable()))); glusterStorageModel.getLinkGlusterVolume().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (glusterStorageModel.getLinkGlusterVolume().getEntity()) { glusterVolumesEditor.setVisible(true); pathEditor.setVisible(false); } else { glusterVolumesEditor.setVisible(false); pathEditor.setVisible(true); } } }); }	@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel object) { final org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel glusterStorageModel = object; driver.edit(object); glusterVolumesEditor.asEditor().setValue(object.getGlusterVolumes().getSelectedItem()); glusterVolumesEditor.setVisible(false); pathExampleLabel.setVisible(((object.getPath().getIsAvailable()) && (object.getPath().getIsChangable()))); glusterStorageModel.getLinkGlusterVolume().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (glusterStorageModel.getLinkGlusterVolume().getEntity()) { glusterVolumesEditor.setVisible(true); pathEditor.setVisible(false); } else { glusterVolumesEditor.setVisible(false); pathEditor.setVisible(true); } } }); }
void initEditors() { linkGlusterVolumeEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor(org.ovirt.engine.ui.common.widget.Align.RIGHT); glusterVolumesEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>() { @java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume) { return glusterVolume == null ? "" : glusterVolume.getName(); } }); }	void initEditors() { linkGlusterVolumeEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor(org.ovirt.engine.ui.common.widget.Align.RIGHT); glusterVolumesEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>() { @java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume) { if (glusterVolume == null) { return ""; } else { if (glusterVolume.getBricks().isEmpty()) { return glusterVolume.getName(); } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = glusterVolume.getBricks().get(0); if (brick == null) { return glusterVolume.getName(); } java.lang.String server = (((brick.getNetworkId()) != null) && (!(org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(brick.getNetworkAddress())))) ? brick.getNetworkAddress() : brick.getServerName(); return (server + ":/") + (glusterVolume.getName()); } } }); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostViolations = getHostsViolations(false, hosts, vm, new org.ovirt.engine.core.common.scheduling.PerHostMessages()); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> retList = new java.util.ArrayList<>(); int score; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { score = (hostViolations.containsKey(host.getId())) ? hostViolations.get(host.getId()) : org.ovirt.engine.core.bll.scheduling.policyunits.VmToHostAffinityWeightPolicyUnit.DEFAULT_SCORE; retList.add(new org.ovirt.engine.core.common.utils.Pair(host.getId(), score)); } return retList; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostViolations = getHostViolationCount(false, hosts, vm, new org.ovirt.engine.core.common.scheduling.PerHostMessages()); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> retList = new java.util.ArrayList<>(); int score; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { score = (hostViolations.containsKey(host.getId())) ? hostViolations.get(host.getId()) : org.ovirt.engine.core.bll.scheduling.policyunits.VmToHostAffinityWeightPolicyUnit.DEFAULT_SCORE; retList.add(new org.ovirt.engine.core.common.utils.Pair(host.getId(), score)); } return retList; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostViolations = getHostsViolations(true, hosts, vm, messages); return hosts.stream().filter(( host) -> !(hostViolations.containsKey(host.getId()))).collect(java.util.stream.Collectors.toList()); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostViolations = getHostViolationCount(true, hosts, vm, messages); return hosts.stream().filter(( host) -> !(hostViolations.containsKey(host.getId()))).collect(java.util.stream.Collectors.toList()); }
public static void init() { org.ovirt.engine.core.bll.utils.VmDeviceUtils.osRepository = org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().get(org.ovirt.engine.core.common.osinfo.OsRepository.class); org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade = org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().get(org.ovirt.engine.core.dal.dbbroker.DbFacade.class); org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmDeviceDao = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDeviceDao(); org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmDao = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDao(); }	public static void init() { org.ovirt.engine.core.bll.utils.VmDeviceUtils.osRepository = org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().get(org.ovirt.engine.core.common.osinfo.OsRepository.class); org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade = org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().get(org.ovirt.engine.core.dal.dbbroker.DbFacade.class); org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmDeviceDao = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDeviceDao(); org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmDao = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDao(); org.ovirt.engine.core.bll.utils.VmDeviceUtils.clusterDao = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getClusterDao(); }
private static org.ovirt.engine.core.common.businessentities.UsbControllerModel getUsbControllerModel(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmDao.get(vmBase.getId()); return org.ovirt.engine.core.bll.utils.VmDeviceUtils.osRepository.getOsUsbControllerModel(vmBase.getOsId(), vm.getCompatibilityVersion()); }	private static org.ovirt.engine.core.common.businessentities.UsbControllerModel getUsbControllerModel(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { final org.ovirt.engine.core.compat.Version version = ((vmBase.getCustomCompatibilityVersion()) != null) ? vmBase.getCustomCompatibilityVersion() : (vmBase.getClusterId()) != null ? org.ovirt.engine.core.bll.utils.VmDeviceUtils.clusterDao.get(vmBase.getClusterId()).getCompatibilityVersion() : null; return org.ovirt.engine.core.bll.utils.VmDeviceUtils.osRepository.getOsUsbControllerModel(vmBase.getOsId(), version); }
@java.lang.Override public java.lang.String render(org.ovirt.engine.core.common.businessentities.StorageDomain domain) { return domain != null ? domain.getName() : org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget.constants.emptyleaseStorageDomain(); }	@java.lang.Override public java.lang.String render(org.ovirt.engine.core.common.businessentities.StorageDomain domain) { return domain != null ? domain.getName() : org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget.constants.emptyLeaseStorageDomain(); }
@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { deactivateInstanceTypeManager(new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.InstanceTypeManager.ActivatedListener() { @java.lang.Override public void activated() { getInstanceTypeManager().updateAll(); } }); updateDefaultHost(); updateCustomPropertySheet(); updateMinAllocatedMemory(); updateNumOfSockets(); if ((getModel().getTemplateWithVersion().getSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel().getTemplateWithVersion().getSelectedItem().getTemplateVersion(); updateQuotaByCluster(template.getQuotaId(), template.getQuotaName()); } updateCpuPinningVisibility(); updateTemplate(); updateOSValues(); updateMemoryBalloon(); updateCpuSharesAvailability(); updateVirtioScsiAvailability(); activateInstanceTypeManager(); updateLeaseStorageDomains(); }	@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { deactivateInstanceTypeManager(new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.InstanceTypeManager.ActivatedListener() { @java.lang.Override public void activated() { getInstanceTypeManager().updateAll(); } }); updateDefaultHost(); updateCustomPropertySheet(); updateMinAllocatedMemory(); updateNumOfSockets(); if ((getModel().getTemplateWithVersion().getSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel().getTemplateWithVersion().getSelectedItem().getTemplateVersion(); updateQuotaByCluster(template.getQuotaId(), template.getQuotaName()); } updateCpuPinningVisibility(); updateTemplate(); updateOSValues(); updateMemoryBalloon(); updateCpuSharesAvailability(); updateVirtioScsiAvailability(); activateInstanceTypeManager(); }
java.lang.String emptyleaseStorageDomain();	java.lang.String emptyLeaseStorageDomain();
public void buildVmLease() { java.util.Map<java.lang.String, java.lang.Object> device = new java.util.HashMap<>(); device.put(VdsProperties.Type, VdsProperties.VmLease); device.put(VdsProperties.Device, VdsProperties.VmLease); device.put(VdsProperties.DeviceId, org.ovirt.engine.core.compat.Guid.newGuid()); device.put(VdsProperties.VmLeaseSdId, vm.getLeaseStorageDomainId()); device.put(VdsProperties.VmLeaseId, vm.getId()); devices.add(device); }	public void buildVmLease() { java.util.Map<java.lang.String, java.lang.Object> device = new java.util.HashMap<>(); device.put(VdsProperties.Type, VdsProperties.VmLease); device.put(VdsProperties.Device, VdsProperties.VmLease); device.put(VdsProperties.DeviceId, org.ovirt.engine.core.compat.Guid.newGuid()); device.put(VdsProperties.VmLeaseSdId, vm.getLeaseStorageDomainId().toString()); device.put(VdsProperties.VmLeaseId, vm.getId().toString()); devices.add(device); }
private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if (((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) || (!(((org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStoragePoolId()) != null) && (validateDiscardAfterDeleteLegal(storageDomainValidator))))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("discardAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn("There was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }	private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if (((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) || (!(validateDiscardAfterDeleteLegal(storageDomainValidator)))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("discardAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn("There was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
private void generateStructReadOne(org.ovirt.api.metamodel.concepts.StructType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getInterfaceName(type); org.ovirt.api.metamodel.tool.JavaClassName containerName = javaTypes.getContainerName(type); javaBuffer.addImport(typeName); javaBuffer.addImport(containerName); javaBuffer.addImport(javax.json.stream.JsonParser.class); javaBuffer.addLine("public static %1$s readOne(JsonReader reader) {", typeName.getSimpleName()); javaBuffer.addLine("return readOne(reader, false);"); javaBuffer.addLine("}"); javaBuffer.addLine(); java.util.List<org.ovirt.api.metamodel.concepts.StructMember> members = new java.util.ArrayList<>(); members.addAll(type.getAttributes()); members.addAll(type.getLinks()); javaBuffer.addLine("public static %1$s readOne(JsonReader reader, boolean started) {", typeName.getSimpleName()); javaBuffer.addLine("if (!started) {"); javaBuffer.addLine("reader.expect(JsonParser.Event.START_OBJECT);"); javaBuffer.addLine("}"); javaBuffer.addLine("%1$s object = new %1$s();", containerName.getSimpleName()); javaBuffer.addLine("while (reader.next() == JsonParser.Event.KEY_NAME) {"); if (members.isEmpty()) { javaBuffer.addLine("reader.skip();"); } else { javaBuffer.addLine("String name = reader.getString();"); javaBuffer.addLine("switch (name) {"); members.stream().sorted().forEach(this::generateStructReadMember); javaBuffer.addLine("default:"); javaBuffer.addLine("reader.skip();"); javaBuffer.addLine("}"); } javaBuffer.addLine("}"); javaBuffer.addLine("return object;"); javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateStructReadOne(org.ovirt.api.metamodel.concepts.StructType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getInterfaceName(type); org.ovirt.api.metamodel.tool.JavaClassName containerName = javaTypes.getContainerName(type); javaBuffer.addImport(typeName); javaBuffer.addImport(containerName); javaBuffer.addImport(javax.json.stream.JsonParser.class); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.json.JsonReader.class); javaBuffer.addLine("public static %1$s readOne(JsonReader reader) {", typeName.getSimpleName()); javaBuffer.addLine("return readOne(reader, false);"); javaBuffer.addLine("}"); javaBuffer.addLine(); java.util.List<org.ovirt.api.metamodel.concepts.StructMember> members = new java.util.ArrayList<>(); members.addAll(type.getAttributes()); members.addAll(type.getLinks()); javaBuffer.addLine("public static %1$s readOne(JsonReader reader, boolean started) {", typeName.getSimpleName()); javaBuffer.addLine("if (!started) {"); javaBuffer.addLine("reader.expect(JsonParser.Event.START_OBJECT);"); javaBuffer.addLine("}"); javaBuffer.addLine("%1$s object = new %1$s();", containerName.getSimpleName()); javaBuffer.addLine("while (reader.next() == JsonParser.Event.KEY_NAME) {"); if (members.isEmpty()) { javaBuffer.addLine("reader.skip();"); } else { javaBuffer.addLine("String name = reader.getString();"); javaBuffer.addLine("switch (name) {"); members.stream().sorted().forEach(this::generateStructReadMember); javaBuffer.addLine("default:"); javaBuffer.addLine("reader.skip();"); javaBuffer.addLine("}"); } javaBuffer.addLine("}"); javaBuffer.addLine("return object;"); javaBuffer.addLine("}"); javaBuffer.addLine(); }
protected void removeSnapshotsFromDB() { snapshotsToRemove.addAll(findSnapshotsWithOnlyIllegalDisks()); for (org.ovirt.engine.core.compat.Guid snapshotId : snapshotsToRemove) { org.ovirt.engine.core.common.businessentities.Snapshot snap = snapshotDao.get(snapshotId); if (snap != null) { java.lang.String memoryVolume = snapshotDao.get(snapshotId).getMemoryVolume(); if ((!(memoryVolume.isEmpty())) && ((snapshotDao.getNumOfSnapshotsByMemory(memoryVolume)) == 1)) { boolean succeed = org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.removeMemoryDisks(memoryVolume); if (!succeed) { log.error("Failed to remove memory '{}' of snapshot '{}'", memoryVolume, snapshotId); } } snapshotDao.remove(snapshotId); } } }	protected void removeSnapshotsFromDB() { for (org.ovirt.engine.core.compat.Guid snapshotId : snapshotsToRemove) { org.ovirt.engine.core.common.businessentities.Snapshot snap = snapshotDao.get(snapshotId); if (snap != null) { java.lang.String memoryVolume = snapshotDao.get(snapshotId).getMemoryVolume(); if ((!(memoryVolume.isEmpty())) && ((snapshotDao.getNumOfSnapshotsByMemory(memoryVolume)) == 1)) { boolean succeed = org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.removeMemoryDisks(memoryVolume); if (!succeed) { log.error("Failed to remove memory '{}' of snapshot '{}'", memoryVolume, snapshotId); } } snapshotDao.remove(snapshotId); } } }
public static org.ovirt.engine.core.bll.ValidationResult snapshotVmConfigurationBroken(org.ovirt.engine.core.common.businessentities.Snapshot snapshot, java.lang.String vmName) { return !(snapshot.isVmConfigurationBroken()) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_SNAPSHOT_HAS_NO_CONFIGURATION, java.lang.String.format("$VmName %1$s", vmName), java.lang.String.format("$SnapshotName %1$s", snapshot.getDescription())); }	public org.ovirt.engine.core.bll.ValidationResult snapshotVmConfigurationBroken(org.ovirt.engine.core.common.businessentities.Snapshot snapshot, java.lang.String vmName) { return !(snapshot.isVmConfigurationBroken()) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_SNAPSHOT_HAS_NO_CONFIGURATION, java.lang.String.format("$VmName %1$s", vmName), java.lang.String.format("$SnapshotName %1$s", snapshot.getDescription())); }
private java.util.Set<org.ovirt.engine.core.compat.Guid> findSnapshotsWithOnlyIllegalDisks() { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> newerSnapshots = getNewerSnapshots(snapshot); java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotsToRemove = new java.util.HashSet<>(); newerSnapshots.forEach(( snapshot) -> { org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); if (vm != null) { boolean shouldRemove = (!(vm.getImages().isEmpty())) && (vm.getImages().stream().allMatch(( diskImage) -> (diskImage.getImageStatus()) == ImageStatus.ILLEGAL)); if (shouldRemove) { snapshotsToRemove.add(snapshot.getId()); } } }); return snapshotsToRemove; }	private java.util.Set<org.ovirt.engine.core.compat.Guid> findSnapshotsWithOnlyIllegalDisks() { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> newerSnapshots = getNewerSnapshots(snapshot); java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotsToRemove = new java.util.HashSet<>(); newerSnapshots.forEach(( snapshot) -> { org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); if (vm != null) { boolean shouldRemove = (vm.getImages().isEmpty()) || (vm.getImages().stream().allMatch(( diskImage) -> (diskImage.getImageStatus()) == ImageStatus.ILLEGAL)); if (shouldRemove) { snapshotsToRemove.add(snapshot.getId()); } } }); return snapshotsToRemove; }
public boolean validate() { if ((backingFile) == null) { getInvalidityReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.ImageInfoModel.constants.uploadImageFileNotExist()); return false; } if (backingFile) { getInvalidityReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.ImageInfoModel.constants.uploadImageBackingFileUnsupported()); return false; } return true; }	public boolean validate() { if (!(fileLoaded)) { getInvalidityReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.ImageInfoModel.constants.uploadImageCannotBeOpened()); return false; } if (backingFile) { getInvalidityReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.ImageInfoModel.constants.uploadImageBackingFileUnsupported()); return false; } return true; }
java.lang.String uploadImageFileNotExist();	java.lang.String uploadImageCannotBeOpened();
private boolean isAttributes(com.thoughtworks.qdox.model.JavaMethod javaMethod) { return javaMethod.getName().equals("attributes"); }	private com.thoughtworks.qdox.model.JavaMethod getInputDetailMethod(com.thoughtworks.qdox.model.JavaClass javaClass) { java.util.Optional<com.thoughtworks.qdox.model.JavaMethod> method = javaClass.getMethods().stream().filter(( x) -> isAnnotatedWith(x, .class.getCanonicalName())).findFirst(); return method.isPresent() ? method.get() : null; }
private void analyzeMethod(com.thoughtworks.qdox.model.JavaClass javaClass, org.ovirt.api.metamodel.concepts.Service service) { org.ovirt.api.metamodel.concepts.Method method = new org.ovirt.api.metamodel.concepts.Method(); analyzeName(javaClass, method); analyzeAnnotations(javaClass, method); analyzeDocumentation(javaClass, method); javaClass.getMethods().forEach(( x) -> analyzeMethodMember(x, method)); com.thoughtworks.qdox.model.JavaMethod attributesMethod = javaClass.getMethod("attributes", null, false); if (attributesMethod != null) { org.ovirt.api.metamodel.analyzer.AttributesAnalyzer attributesAnalyzer = new org.ovirt.api.metamodel.analyzer.AttributesAnalyzer(); attributesAnalyzer.analyzeAttributes(attributesMethod.getSourceCode(), method.getParameters()); } method.setDeclaringService(service); service.addMethod(method); }	public void analyzeInputDetail(com.thoughtworks.qdox.model.JavaClass javaClass, org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Service service) { com.thoughtworks.qdox.model.JavaMethod inputDetailMethod = getInputDetailMethod(javaClass); if (inputDetailMethod != null) { org.ovirt.api.metamodel.analyzer.InputDetailAnalyzer inputDetailAnalyzer = new org.ovirt.api.metamodel.analyzer.InputDetailAnalyzer(); inputDetailAnalyzer.analyzeInput(inputDetailMethod.getSourceCode(), method.getParameters()); } }
public java.util.List<org.ovirt.api.metamodel.concepts.Parameter.AttributeNode> getNodes() { return nodes; }	public java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> getMemberInvolvementTrees() { return memberInvolvementTrees; }
public org.ovirt.api.metamodel.concepts.Parameter.AttributeNode getNode(org.ovirt.api.metamodel.concepts.Name name) { for (org.ovirt.api.metamodel.concepts.Parameter.AttributeNode node : nodes) { if (node.getName().equals(name)) { return node; } } return null; }	public org.ovirt.api.metamodel.concepts.MemberInvolvementTree getMemberInvolvemnetTree(org.ovirt.api.metamodel.concepts.Name name) { for (org.ovirt.api.metamodel.concepts.MemberInvolvementTree tree : memberInvolvementTrees) { if (tree.getName().equals(name)) { return tree; } } return null; }
public org.ovirt.api.metamodel.concepts.Parameter.AttributeNode getAttributes() { return attributes; }	public java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> getMandatoryAttributes() { java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> mandatoryAttributes = new java.util.ArrayList<>(); for (org.ovirt.api.metamodel.concepts.MemberInvolvementTree memberInvolvementTree : memberInvolvementTrees) { mandatoryAttributes.addAll(memberInvolvementTree.getMandatoryAttributes()); } return mandatoryAttributes; }
@org.junit.Test public void testFindMappingEntryEmptyExternal() { final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingEntry(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFinderTest.NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFinderTest.VNIC_PROFILE1_NAME, java.util.Arrays.asList(emptySourceMapping)); assertFalse(actual.isPresent()); }	@org.junit.Test public void testFindMappingEntryEmptyExternal() { final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingEntry(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFinderTest.NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFinderTest.VNIC_PROFILE1_NAME, java.util.Collections.singletonList(emptySourceMapping)); assertFalse(actual.isPresent()); }
@org.junit.Test public void testFindMappingEntryEmptySourceVnicProfile() { final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingEntry(null, null, java.util.Arrays.asList(emptySourceMapping)); assertThat(actual.get(), sameInstance(emptySourceMapping)); }	@org.junit.Test public void testFindMappingEntryEmptySourceVnicProfile() { final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingEntry(null, null, java.util.Collections.singletonList(emptySourceMapping)); assertThat(actual.get(), sameInstance(emptySourceMapping)); }
@java.lang.Override public <U extends T> javax.enterprise.inject.Instance<U> select(java.lang.Class<U> aClass, java.lang.annotation.Annotation... annotations) { return createMockInstance(aClass); }	@java.lang.Override @java.lang.SuppressWarnings("unchecked") public <U extends T> javax.enterprise.inject.Instance<U> select(java.lang.Class<U> aClass, java.lang.annotation.Annotation... annotations) { return new org.ovirt.engine.core.di.InjectorRule.SimpleInstanceIdGenerator(((U) (org.ovirt.engine.core.di.InjectorRule.beansCache.get(aClass)))); }
private java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> getNewVnicProfileMappings(org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<org.ovirt.engine.core.common.businessentities.VM> vmImportEntityData, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> clusterVnicProfileMappings) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> result = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : vmImportEntityData.getEntity().getInterfaces()) { final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity(vnic.getNetworkName(), vnic.getVnicProfileName(), null); if (!(clusterVnicProfileMappings.contains(newMapping))) { result.add(newMapping); } } return result; }	private java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> getNewVnicProfileMappings(org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<org.ovirt.engine.core.common.businessentities.VM> vmImportEntityData, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> previousClusterVnicProfileMappings) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> result = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : vmImportEntityData.getEntity().getInterfaces()) { final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity(vnic.getNetworkName(), vnic.getVnicProfileName(), null); final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity mapping; if (previousClusterVnicProfileMappings.contains(newMapping)) { mapping = org.ovirt.engine.ui.uicommonweb.Linq.retrieveFromSet(previousClusterVnicProfileMappings, newMapping); } else { mapping = newMapping; } result.add(mapping); } return result; }
private void updateExternalVnicProfilesPerTargetCluster() { for (org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<org.ovirt.engine.core.common.businessentities.VM> vmImportEntityData : getEntities().getItems()) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = vmImportEntityData.getCluster().getSelectedItem(); final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> clusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { clusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { clusterVnicProfileMappings = new java.util.HashSet(); externalVnicProfilesPerTargetCluster.put(cluster, clusterVnicProfileMappings); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> vmVnicProfiles = getNewVnicProfileMappings(vmImportEntityData, clusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); } }	private void updateExternalVnicProfilesPerTargetCluster() { final java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> result = new java.util.HashMap<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<org.ovirt.engine.core.common.businessentities.VM> vmImportEntityData : getEntities().getItems()) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = vmImportEntityData.getCluster().getSelectedItem(); final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> clusterVnicProfileMappings; if (result.containsKey(cluster)) { clusterVnicProfileMappings = result.get(cluster); } else { clusterVnicProfileMappings = new java.util.HashSet(); result.put(cluster, clusterVnicProfileMappings); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> previousClusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { previousClusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { previousClusterVnicProfileMappings = new java.util.HashSet(); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> vmVnicProfiles = getNewVnicProfileMappings(vmImportEntityData, previousClusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); } externalVnicProfilesPerTargetCluster = result; }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingsModel model) { driver.edit(model); refreshMappingsTable(model.getMappingModelRows()); model.getMappingModelRows().getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { refreshMappingsTable(model.getMappingModelRows()); } }); cluster.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.register.VnicProfileMappingsView.constants.importVm_destCluster()); }	@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingModel model) { driver.edit(model); refreshMappingsTable(model.getMappingModelRows()); model.getMappingModelRows().getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { refreshMappingsTable(model.getMappingModelRows()); } }); cluster.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.register.VnicProfileMappingPopupView.constants.importVm_destCluster()); }
private void refreshMappingsTable(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingModel> mappingModelRows) { vnicProfileMappingsTable.asEditor().edit(mappingModelRows); }	private void refreshMappingsTable(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingItem> mappingModelRows) { vnicProfileMappingTable.asEditor().edit(mappingModelRows); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingsModel flush() { return driver.flush(); }	@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingModel flush() { return driver.flush(); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.ListModel getValue(org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingModel object) { return object.getTargetVnicProfile(); }	@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.ListModel getValue(org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingItem object) { return object.getTargetVnicProfile(); }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> getTargetVnicProfile() { return targetVnicProfile; }	public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.Cluster> getTargetCluster() { return targetCluster; }
private java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> getExternalVnicProfileMappings(org.ovirt.engine.core.common.businessentities.Cluster cluster) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> vnicProfileMappingEnities = externalVnicProfilesPerTargetCluster.get(cluster); final java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> result = new java.util.ArrayList(vnicProfileMappingEnities.size()); for (org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity vnicProfileMappingEnity : vnicProfileMappingEnities) { result.add(new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity(vnicProfileMappingEnity)); } return result; }	private java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> getExternalVnicProfileMappings(org.ovirt.engine.core.common.businessentities.Cluster cluster) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> vnicProfileMappingEntities = getClusterVnicProfileMappingEntities(cluster); final java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> result = new java.util.ArrayList(vnicProfileMappingEntities.size()); for (org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity vnicProfileMappingEntity : vnicProfileMappingEntities) { result.add(vnicProfileMappingEntity.getExternalVnicProfileMapping()); } return result; }
private void createVnicProfileMappingsModel() { updateExternalVnicProfilesPerTargetCluster(); vnicProfileMappingsModel = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingsModel(this, externalVnicProfilesPerTargetCluster); vnicProfileMappingsModel.initialize(); }	private void createVnicProfileMappingsModel() { updateExternalVnicProfilesPerTargetCluster(); vnicProfileMappingModel = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingModel(this, externalVnicProfilesPerTargetCluster); vnicProfileMappingModel.initialize(); }
private void selectTargetVnicProfileByPredicate(org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> predicate) { final org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile = org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(targetVnicProfile.getItems(), predicate, VnicProfileView.EMPTY); targetVnicProfile.setSelectedItem(vnicProfile); }	private <T> void addOrReplace(java.util.Set<T> set, T e) { set.remove(e); set.add(e); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { getEntity().setVnicProfileId(getTargetVnicProfileId()); }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> returnValue) { final java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> vnicProfiles = new java.util.ArrayList<>(); vnicProfiles.add(VnicProfileView.EMPTY); vnicProfiles.addAll(returnValue); java.util.Collections.sort(vnicProfiles, new org.ovirt.engine.ui.uicommonweb.Linq.VnicProfileViewComparator()); populateMappingRows(vnicProfiles); stopProgress(); }
private void selectInitialTargetVnicProfile() { final org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> predicate; if ((getEntity().getVnicProfileId()) == null) { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { return (java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getNetworkName())) && (java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getName())); } }; } else { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { return java.util.Objects.equals(getEntity().getVnicProfileId(), vnicProfile.getId()); } }; } selectTargetVnicProfileByPredicate(predicate); }	private void mergeShownRows() { for (java.util.Map.Entry<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingItem>> showCluster : shownMappingRows.entrySet()) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = showCluster.getKey(); final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingItem> showClusterRows = showCluster.getValue(); final java.util.Set<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> existingMappings; if (externalVnicProfiles.containsKey(cluster)) { existingMappings = externalVnicProfiles.get(cluster); } else { existingMappings = new java.util.HashSet(); externalVnicProfiles.put(cluster, existingMappings); } for (org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingItem shownRow : showClusterRows) { final org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping shownMapping = shownRow.getEntity(); addOrReplace(existingMappings, shownMapping); } } }
private void selectInitialTargetVnicProfile() { final org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> predicate; if (getEntity().isChanged()) { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { return java.util.Objects.equals(getEntity().getVnicProfileId(), vnicProfile.getId()); } }; } else { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { return (java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getNetworkName())) && (java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getName())); } }; } selectTargetVnicProfileByPredicate(predicate); }	private void closeDialog() { originModel.setWindow(null); }
private org.ovirt.engine.core.compat.Guid getTargetVnicProfileId() { final org.ovirt.engine.core.common.businessentities.network.VnicProfileView selectedVnicProfile = targetVnicProfile.getSelectedItem(); if ((selectedVnicProfile == null) || (selectedVnicProfile == (org.ovirt.engine.core.common.businessentities.network.VnicProfileView.EMPTY))) { return null; } else { return selectedVnicProfile.getId(); } }	private void initTargetClusters() { targetCluster.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { updateMappingRows(); } }); targetCluster.setItems(externalVnicProfiles.keySet(), org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(targetCluster.getItems())); }
private void onVnicProfileMap() { if ((getWindow()) != null) { return; } createVnicProfileMappingsModel(); setConfirmWindow(vnicProfileMappingsModel); }	private void onVnicProfileMap() { if ((getWindow()) != null) { return; } createVnicProfileMappingsModel(); setWindow(vnicProfileMappingModel); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (org.ovirt.engine.ui.uicommonweb.models.storage.RegisterVmModel.VNIC_PROFILE_MAPPING_COMMAND.equals(command.getName())) { onVnicProfileMap(); } }	@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getVnicProfileMappingCommand())) { onVnicProfileMap(); } }
@java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.Model, ?> getModelPopup(org.ovirt.engine.ui.uicommonweb.models.storage.RegisterVmModel source, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand, org.ovirt.engine.ui.uicommonweb.models.Model windowModel) { if (lastExecutedCommand == (source.getVnicProfileMappingCommand())) { return vnicProfileMappingsPopupPresenterWidgetProvider.get(); } return super.getModelPopup(source, lastExecutedCommand, windowModel); }	@java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.Model, ?> getModelPopup(org.ovirt.engine.ui.uicommonweb.models.storage.RegisterVmModel source, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand, org.ovirt.engine.ui.uicommonweb.models.Model windowModel) { if (lastExecutedCommand == (source.getVnicProfileMappingCommand())) { return vnicProfileMappingPopupProvider.get(); } return super.getModelPopup(source, lastExecutedCommand, windowModel); }
@java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.network.VnicProfileView profile) { return profile == (org.ovirt.engine.core.common.businessentities.network.VnicProfileView.EMPTY) ? org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.register.VnicProfileMappingsView.messages.emptyProfile().asString() : org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.register.VnicProfileMappingsView.messages.profileAndNetworkSelected(profile.getName(), profile.getNetworkName()).asString(); }	@java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.network.VnicProfileView profile) { return profile == (org.ovirt.engine.core.common.businessentities.network.VnicProfileView.EMPTY) ? org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.register.VnicProfileMappingPopupView.messages.emptyProfile().asString() : org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.register.VnicProfileMappingPopupView.messages.profileAndNetworkSelected(profile.getName(), profile.getNetworkName()).asString(); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData) { java.lang.String problem; if ((registerVmData.getError()) != null) { problem = registerVmData.getError(); } else { problem = registerVmData.getWarning(); } return problem == null ? null : com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(problem); }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData) { java.lang.String problem; if ((registerVmData.getError()) != null) { problem = registerVmData.getError(); } else { problem = registerVmData.getWarning(); } return problem == null ? null : new com.google.gwt.safehtml.shared.SafeHtmlBuilder().appendEscapedLines(problem).toSafeHtml(); }
private void postClustersInit() { validateAllMacs(); for (final org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData : getEntities().getItems()) { final org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs> validateMacsListener = new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { final java.lang.Boolean reassignMacs = registerVmData.getReassignMacs().getEntity(); if (reassignMacs) { clearVmMacsWarning(registerVmData); } else { validateVmMacs(java.util.Collections.singletonList(registerVmData)); } } }; registerVmData.getReassignMacs().getEntityChangedEvent().addListener(validateMacsListener); registerVmData.getCluster().getSelectedItemChangedEvent().addListener(validateMacsListener); } }	private void postClustersInit() { validateAllMacs(); for (final org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData : getEntities().getItems()) { final org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs> validateMacsListener = new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { validateVmMacs(java.util.Collections.singletonList(registerVmData)); } }; registerVmData.getReassignMacs().getEntityChangedEvent().addListener(validateMacsListener); registerVmData.getCluster().getSelectedItemChangedEvent().addListener(validateMacsListener); } }
@java.lang.Override public void initialize() { getCluster().getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { postClustersInit(); } }); super.initialize(); vmsById = mapVmsById(getEntities().getItems()); }	@java.lang.Override public void initialize() { addVnicProfileMappingCommand(); getCluster().getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { postClustersInit(); } }); super.initialize(); }
private void setVmMacsWarning(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData vmData, java.lang.String message, java.lang.Boolean aTrue) { vmData.setWarning(message); vmData.getBadMacsExist().setEntity(aTrue); }	private void setVmMacsWarning(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData vmData, java.lang.String message, java.lang.Boolean isValid) { vmData.setWarning(message); vmData.getBadMacsExist().setEntity(isValid); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { final java.lang.Boolean reassignMacs = registerVmData.getReassignMacs().getEntity(); if (reassignMacs) { clearVmMacsWarning(registerVmData); } else { validateVmMacs(java.util.Collections.singletonList(registerVmData)); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { validateVmMacs(java.util.Collections.singletonList(registerVmData)); }
private void updateExternalVnicProfilesPerTargetCluster() { for (org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData : getEntities().getItems()) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = registerVmData.getCluster().getSelectedItem(); final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> clusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { clusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { clusterVnicProfileMappings = new java.util.HashSet(); externalVnicProfilesPerTargetCluster.put(cluster, clusterVnicProfileMappings); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> vmVnicProfiles = getNewVnicProfileMappings(registerVmData, clusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); } }	private void updateExternalVnicProfilesPerTargetCluster() { final java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> result = new java.util.HashMap<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData : getEntities().getItems()) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = registerVmData.getCluster().getSelectedItem(); final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> clusterVnicProfileMappings; if (result.containsKey(cluster)) { clusterVnicProfileMappings = result.get(cluster); } else { clusterVnicProfileMappings = new java.util.HashSet(); result.put(cluster, clusterVnicProfileMappings); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> previousClusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { previousClusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { previousClusterVnicProfileMappings = new java.util.HashSet(); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> vmVnicProfiles = getNewVnicProfileMappings(registerVmData, previousClusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); } externalVnicProfilesPerTargetCluster = result; }
private java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> getNewVnicProfileMappings(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> clusterVnicProfileMappings) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> result = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : registerVmData.getEntity().getInterfaces()) { final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity(vnic.getNetworkName(), vnic.getVnicProfileName(), null); if (!(clusterVnicProfileMappings.contains(newMapping))) { result.add(newMapping); } } return result; }	private java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> getNewVnicProfileMappings(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> previousClusterVnicProfileMappings) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> result = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : registerVmData.getEntity().getInterfaces()) { final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity(vnic.getNetworkName(), vnic.getVnicProfileName(), null); final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity mapping; if (previousClusterVnicProfileMappings.contains(newMapping)) { mapping = org.ovirt.engine.ui.uicommonweb.Linq.retrieveFromSet(previousClusterVnicProfileMappings, newMapping); } else { mapping = newMapping; } result.add(mapping); } return result; }
private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData> mapVmsById(java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData> vms) { final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData> result = new java.util.HashMap<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData vm : vms) { result.put(vm.getVm().getId(), vm); } return result; }	private java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> getClusterVnicProfileMappingEntities(org.ovirt.engine.core.common.businessentities.Cluster cluster) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> result = externalVnicProfilesPerTargetCluster.get(cluster); if (result == null) { return new java.util.HashSet<>(); } else { return result; } }
public long setArik(long arik) { long result = this.arik; this.arik = arik; return result; }	public long setPowerOffTimeout(long powerOffTimeout) { long result = this.powerOffTimeout; this.powerOffTimeout = powerOffTimeout; return result; }
@javax.annotation.PostConstruct public void init() { setArik(java.lang.System.nanoTime()); org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(vmId); if (vmStatic != null) { updateStaticFields(vmStatic); } }	@javax.annotation.PostConstruct public void init() { setPowerOffTimeout(java.lang.System.nanoTime()); org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(vmId); if (vmStatic != null) { updateStaticFields(vmStatic); } }
void proceedDownVm() { if (((java.lang.System.nanoTime()) - (getVmManager().getArik())) < 0) { clearVm(VmExitStatus.Normal, java.lang.String.format("VM %s shutdown complete", getVmManager().getName()), VmExitReason.Success); return; } destroyVm(); if (!(isVmRunningInDatabaseOnMonitoredHost())) { return; } logVmStatusTransition(); switch (dbVm.getStatus()) { case SavingState : resourceManager.internalSetVmStatus(dbVm, VMStatus.Suspended); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); resourceManager.removeAsyncRunningVm(dbVm.getId()); auditVmSuspended(); break; case MigratingFrom : switch (vdsmVm.getVmDynamic().getExitStatus()) { case Normal : handOverVm(); break; case Error : abortVmMigration(); if (getVmManager().isAutoStart()) { setAutoRunFlag(); break; } } break; default : auditVmOnDownEvent(); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); switch (vdsmVm.getVmDynamic().getExitStatus()) { case Error : if (resourceManager.isVmInAsyncRunningList(vdsmVm.getVmDynamic().getId())) { setRerunFlag(); break; } if (getVmManager().isAutoStart()) { setAutoRunFlag(); break; } break; case Normal : resourceManager.removeAsyncRunningVm(vdsmVm.getVmDynamic().getId()); if (getVmManager().isColdReboot()) { setColdRebootFlag(); } } } }	void proceedDownVm() { destroyVm(); if (!(isVmRunningInDatabaseOnMonitoredHost())) { return; } logVmStatusTransition(); switch (dbVm.getStatus()) { case SavingState : resourceManager.internalSetVmStatus(dbVm, VMStatus.Suspended); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); resourceManager.removeAsyncRunningVm(dbVm.getId()); auditVmSuspended(); break; case MigratingFrom : switch (vdsmVm.getVmDynamic().getExitStatus()) { case Normal : handOverVm(); break; case Error : abortVmMigration(); if (getVmManager().isAutoStart()) { setAutoRunFlag(); break; } } break; default : switch (vdsmVm.getVmDynamic().getExitStatus()) { case Error : auditVmOnDownError(); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); if (resourceManager.isVmInAsyncRunningList(vdsmVm.getVmDynamic().getId())) { setRerunFlag(); break; } if (getVmManager().isAutoStart()) { setAutoRunFlag(); break; } break; case Normal : boolean powerOff = ((java.lang.System.nanoTime()) - (getVmManager().getPowerOffTimeout())) < 0; auditVmOnDownNormal(powerOff); clearVm(vdsmVm.getVmDynamic().getExitStatus(), (powerOff ? getPowerOffExitMessage() : vdsmVm.getVmDynamic().getExitMessage()), vdsmVm.getVmDynamic().getExitReason()); resourceManager.removeAsyncRunningVm(vdsmVm.getVmDynamic().getId()); if (getVmManager().isColdReboot()) { setColdRebootFlag(); } } } }
private void proceedDisappearedVm() { if (((java.lang.System.nanoTime()) - (getVmManager().getArik())) < 0) { clearVm(VmExitStatus.Normal, java.lang.String.format("VM %s shutdown complete", getVmManager().getName()), VmExitReason.Success); return; } switch (dbVm.getStatus()) { case MigratingFrom : handOverVm(); break; case PoweringDown : clearVm(VmExitStatus.Normal, java.lang.String.format("VM %s shutdown complete", getVmManager().getName()), VmExitReason.Success); if (getVmManager().isColdReboot()) { setColdRebootFlag(); } break; default : clearVm(VmExitStatus.Error, java.lang.String.format("Could not find VM %s on host, assuming it went down unexpectedly", getVmManager().getName()), VmExitReason.GenericError); if (resourceManager.isVmInAsyncRunningList(dbVm.getId())) { setRerunFlag(); break; } if (getVmManager().isColdReboot()) { setColdRebootFlag(); break; } if (getVmManager().isAutoStart()) { setAutoRunFlag(); break; } } }	private void proceedDisappearedVm() { if (((java.lang.System.nanoTime()) - (getVmManager().getPowerOffTimeout())) < 0) { auditVmOnDownNormal(true); clearVm(VmExitStatus.Normal, getPowerOffExitMessage(), VmExitReason.Success); return; } switch (dbVm.getStatus()) { case MigratingFrom : handOverVm(); break; case PoweringDown : clearVm(VmExitStatus.Normal, java.lang.String.format("VM %s shutdown complete", getVmManager().getName()), VmExitReason.Success); if (getVmManager().isColdReboot()) { setColdRebootFlag(); } break; default : clearVm(VmExitStatus.Error, java.lang.String.format("Could not find VM %s on host, assuming it went down unexpectedly", getVmManager().getName()), VmExitReason.GenericError); if (resourceManager.isVmInAsyncRunningList(dbVm.getId())) { setRerunFlag(); break; } if (getVmManager().isColdReboot()) { setColdRebootFlag(); break; } if (getVmManager().isAutoStart()) { setAutoRunFlag(); break; } } }
public long getArik() { return arik; }	public long getPowerOffTimeout() { return powerOffTimeout; }
private void initiateResumeUploadStartTransfer(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (((result.getReturnValue()) != null) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer rv = result.getReturnValue().getActionReturnValue(); setCommandId(rv.getId()); setBytesSent(rv.getBytesSent()); startStatusPolling(); model.stopProgress(); model.getCancelCommand().execute(); } else { setErrorMessage(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeMessage(result.getReturnValue().getDescription())); model.stopProgress(); } }	private void initiateResumeUploadStartTransfer(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (((result.getReturnValue()) != null) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer rv = result.getReturnValue().getActionReturnValue(); setCommandId(rv.getId()); setBytesSent(rv.getBytesSent()); startStatusPolling(); model.stopProgress(); model.getCancelCommand().execute(); } else { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeMessage(result.getReturnValue().getDescription())); model.stopProgress(); } }
private void initiateResumeUploadCheckStatus(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (((result.getReturnValue()) != null) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer rv = result.getReturnValue().getActionReturnValue(); if ((rv.getBytesTotal()) != (getImageSize())) { if ((rv.getBytesTotal()) == 0) { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeUploadOriginatedInAPI()); } else { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeSizeMessage(rv.getBytesTotal(), getImageSize())); } model.stopProgress(); return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); updates.setPhase(ImageTransferPhase.RESUMING); final org.ovirt.engine.core.common.action.TransferImageStatusParameters parameters = new org.ovirt.engine.core.common.action.TransferImageStatusParameters(rv.getId()); parameters.setUpdates(updates); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TransferImageStatus, parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { initiateResumeUploadStartTransfer(result); } }, model); } else { setErrorMessage(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeMessage(result.getReturnValue().getDescription())); model.stopProgress(); } }	private void initiateResumeUploadCheckStatus(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (((result.getReturnValue()) != null) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer rv = result.getReturnValue().getActionReturnValue(); if ((rv.getBytesTotal()) != (getImageSize())) { if ((rv.getBytesTotal()) == 0) { setMessage(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeUploadOriginatedInAPI()); } else { setMessage(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeSizeMessage(rv.getBytesTotal(), getImageSize())); } model.stopProgress(); return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); updates.setPhase(ImageTransferPhase.RESUMING); final org.ovirt.engine.core.common.action.TransferImageStatusParameters parameters = new org.ovirt.engine.core.common.action.TransferImageStatusParameters(rv.getId()); parameters.setUpdates(updates); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TransferImageStatus, parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { initiateResumeUploadStartTransfer(result); } }, model); } else { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeMessage(result.getReturnValue().getDescription())); model.stopProgress(); } }
private boolean hasBootProtocol(org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration) { return (hasIpv4BootProtocol(ipConfiguration)) || (hasIpv6BootProtocol(ipConfiguration)); }	private boolean hasBootProtocol(org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration) { return (hasIpv4BootProtocol(ipConfiguration)) || (hasIpv6BootProtocol(ipConfiguration)); }
private org.ovirt.engine.core.bll.validator.NetworkCluster getNetworkCluster() { if ((networkCluster) == null) { org.ovirt.engine.core.bll.validator.NetworkClusterId networkClusterId = new org.ovirt.engine.core.bll.validator.NetworkClusterId(host.getClusterId(), attachment.getNetworkId()); networkCluster = networkClusterDao.get(networkClusterId); } return networkCluster; }	private org.ovirt.engine.core.common.businessentities.network.NetworkCluster getNetworkCluster() { if ((networkCluster) == null) { org.ovirt.engine.core.common.businessentities.network.NetworkClusterId networkClusterId = new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(host.getClusterId(), attachment.getNetworkId()); networkCluster = networkClusterDao.get(networkClusterId); } return networkCluster; }
private boolean hasIpv6BootProtocol(org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration) { return (ipConfiguration.hasIpv6PrimaryAddressSet()) && ((ipConfiguration.getIpv6PrimaryAddress().getBootProtocol()) != (Ipv6BootProtocol.NONE)); }	private boolean hasIpv6BootProtocol(org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration) { return (ipConfiguration.hasIpv6PrimaryAddressSet()) && ((ipConfiguration.getIpv6PrimaryAddress().getBootProtocol()) != (org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol.NONE)); }
private boolean validBootProtocolForRoleNetwork() { if (!(isRoleNetwork())) { return true; } org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration = attachment.getIpConfiguration(); if (ipConfiguration == null) { return false; } if (getNetworkCluster().isMigration()) { return hasBootProtocol(ipConfiguration); } return hasIpv4BootProtocol(ipConfiguration); }	private boolean validBootProtocolForRoleNetwork() { if (!(isRoleNetwork())) { return true; } org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration(); if (ipConfiguration == null) { return false; } if (getNetworkCluster().isMigration()) { return hasBootProtocol(ipConfiguration); } return hasIpv4BootProtocol(ipConfiguration); }
public org.ovirt.engine.core.bll.ValidationResult existingAttachmentIsReused(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.validator.NetworkAttachment> existingAttachmentsByNetworkId) { org.ovirt.engine.core.bll.validator.NetworkAttachment existingAttachmentWithTheSameNetwork = existingAttachmentsByNetworkId.get(attachment.getNetworkId()); if (existingAttachmentWithTheSameNetwork == null) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ATTACHMENT_IS_NOT_REUSED, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_ATTACHMENT_ID, existingAttachmentWithTheSameNetwork.getId()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_NAME, existingAttachmentWithTheSameNetwork.getNetworkName())).unless(existingAttachmentWithTheSameNetwork.getId().equals(attachment.getId())); }	public org.ovirt.engine.core.bll.ValidationResult existingAttachmentIsReused(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> existingAttachmentsByNetworkId) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingAttachmentWithTheSameNetwork = existingAttachmentsByNetworkId.get(attachment.getNetworkId()); if (existingAttachmentWithTheSameNetwork == null) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ATTACHMENT_IS_NOT_REUSED, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_ATTACHMENT_ID, existingAttachmentWithTheSameNetwork.getId()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_NAME, existingAttachmentWithTheSameNetwork.getNetworkName())).unless(existingAttachmentWithTheSameNetwork.getId().equals(attachment.getId())); }
public org.ovirt.engine.core.bll.ValidationResult networkNotChanged(org.ovirt.engine.core.bll.validator.NetworkAttachment oldAttachment) { org.ovirt.engine.core.compat.Guid oldAttachmentId = (oldAttachment == null) ? null : oldAttachment.getId(); boolean when = (oldAttachment != null) && (!(java.util.Objects.equals(oldAttachment.getNetworkId(), attachment.getNetworkId()))); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.CANNOT_CHANGE_ATTACHED_NETWORK, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_ATTACHMENT_ID, oldAttachmentId)).when(when); }	public org.ovirt.engine.core.bll.ValidationResult networkNotChanged(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment oldAttachment) { org.ovirt.engine.core.compat.Guid oldAttachmentId = (oldAttachment == null) ? null : oldAttachment.getId(); boolean when = (oldAttachment != null) && (!(java.util.Objects.equals(oldAttachment.getNetworkId(), attachment.getNetworkId()))); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.CANNOT_CHANGE_ATTACHED_NETWORK, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_ATTACHMENT_ID, oldAttachmentId)).when(when); }
private boolean hasIpv4BootProtocol(org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration) { return (ipConfiguration.hasIpv4PrimaryAddressSet()) && ((ipConfiguration.getIpv4PrimaryAddress().getBootProtocol()) != (Ipv4BootProtocol.NONE)); }	private boolean hasIpv4BootProtocol(org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration) { return (ipConfiguration.hasIpv4PrimaryAddressSet()) && ((ipConfiguration.getIpv4PrimaryAddress().getBootProtocol()) != (org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.NONE)); }
protected org.ovirt.engine.core.bll.validator.Network getNetwork() { if ((network) == null) { network = networkDao.get(attachment.getNetworkId()); } return network; }	protected org.ovirt.engine.core.common.businessentities.network.Network getNetwork() { if ((network) == null) { network = networkDao.get(attachment.getNetworkId()); } return network; }
public void onFailed() { updateEntityPhase(ImageTransferPhase.FINISHED_FAILURE); log.debug("Removing ImageTransfer id {}", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); imageTransferDao.remove(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.endWithFailure(); log.error("Failed to transfer disk {} (command id '{}')", getImageIdNullSafe(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); }	public void onFailed() { updateEntityPhase(ImageTransferPhase.FINISHED_FAILURE); log.debug("Removing ImageTransfer id {}", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); imageTransferDao.remove(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.endWithFailure(); log.error("Failed to transfer disk '{}' (command id '{}')", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); }
public void onSucceeded() { updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); log.debug("Removing ImageTransfer id {}", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); imageTransferDao.remove(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.endSuccessfully(); log.info("Successfully transferred disk {} (command id '{}')", getImageIdNullSafe(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); }	public void onSucceeded() { updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); log.debug("Removing ImageTransfer id {}", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); imageTransferDao.remove(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.endSuccessfully(); log.info("Successfully transferred disk '{}' (command id '{}')", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); }
@java.lang.Override public boolean runInThread(java.lang.Runnable runnable) { try { executorService.submit(runnable); return true; } catch (java.util.concurrent.RejectedExecutionException e) { log.error(("Task rejected due to: " + (e.getMessage())), e); return false; } }	@java.lang.Override public boolean runInThread(java.lang.Runnable runnable) { try { executorService.submit(runnable); return true; } catch (java.util.concurrent.RejectedExecutionException e) { log.error("Task rejected due to: ", e); return false; } }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return new org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCallback(); }	@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return new org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback(); }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession getSession() { return geoRepDao.getById(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getGeoRepSessionId()); }	private org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession getSession() { if ((geoRepSession) == null) { geoRepSession = geoRepDao.getById(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getGeoRepSessionId()); } return geoRepSession; }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("syncData") public void syncData(java.lang.String storageDomainId, java.lang.String geoRepSessionId) { try { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = storageDomainDao.get(new org.ovirt.engine.core.compat.Guid(storageDomainId)); if (storageDomain == null) { org.ovirt.engine.core.bll.storage.dr.GlusterStorageDomainDRSyncJob.log.error("No storage domain found"); return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session = geoRepDao.getById(new org.ovirt.engine.core.compat.Guid(geoRepSessionId)); if (session == null) { org.ovirt.engine.core.bll.storage.dr.GlusterStorageDomainDRSyncJob.log.error("No geo-replication session found"); } backend.runInternalAction(VdcActionType.GlusterStorageSync, new org.ovirt.engine.core.common.action.GlusterStorageSyncCommandParameters(storageDomain.getId(), session.getId()), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.dr.GlusterStorageDomainDRSyncJob.log.error("Error running dr sync", e); } }	@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("syncData") public void syncData(java.lang.String storageDomainId, java.lang.String geoRepSessionId) { try { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = storageDomainDao.get(new org.ovirt.engine.core.compat.Guid(storageDomainId)); if (storageDomain == null) { org.ovirt.engine.core.bll.storage.dr.GlusterStorageDomainDRSyncJob.log.error("No storage domain found for id '{}'", storageDomainId); return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session = geoRepDao.getById(new org.ovirt.engine.core.compat.Guid(geoRepSessionId)); if (session == null) { org.ovirt.engine.core.bll.storage.dr.GlusterStorageDomainDRSyncJob.log.error("No geo-replication session found for id '{}'", geoRepSessionId); return; } backend.runInternalAction(VdcActionType.GlusterStorageSync, new org.ovirt.engine.core.common.action.GlusterStorageSyncCommandParameters(storageDomain.getId(), session.getId()), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.dr.GlusterStorageDomainDRSyncJob.log.error("Error running dr sync", e); } }
public void setSnapshotIdVmIds(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> snapshotIdVmIds) { this.snapshotIdVmIds = snapshotIdVmIds; }	public void setVmIdSnapshotIds(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> vmIdsnapshotIds) { this.vmIdSnapshotIds = vmIdsnapshotIds; }
public java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> getSnapshotIdVmIds() { return snapshotIdVmIds; }	public java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> getVmIdSnapshotIds() { return vmIdSnapshotIds; }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersSource(org.ovirt.engine.core.common.businessentities.StorageDomainDR storageDomainDR) { return getCustomMapSqlParameterSource().addValue("storage_domain_id", storageDomainDR.getStorageDomainId()).addValue("georep_session_id", storageDomainDR.getGeoRepSessionId()).addValue("sync_schedule", storageDomainDR.getSyncSchedule()).addValue("qrtz_job_id", storageDomainDR.getJobId()); }	private org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersSource(org.ovirt.engine.core.common.businessentities.StorageDomainDR storageDomainDR) { return getCustomMapSqlParameterSource().addValue("storage_domain_id", storageDomainDR.getStorageDomainId()).addValue("georep_session_id", storageDomainDR.getGeoRepSessionId()).addValue("sync_schedule", storageDomainDR.getScheduleCronExpression()).addValue("qrtz_job_id", storageDomainDR.getJobId()); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule other = ((org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule) (obj)); return (((java.util.Objects.equals(frequency, other.frequency)) && (java.util.Objects.equals(days, other.days))) && (java.util.Objects.equals(hour, other.hour))) && (java.util.Objects.equals(mins, other.mins)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule other = ((org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule) (obj)); return (((java.util.Objects.equals(frequency, other.frequency)) && (java.util.Arrays.equals(days, other.days))) && (java.util.Objects.equals(hour, other.hour))) && (java.util.Objects.equals(mins, other.mins)); }
public java.lang.String getCronExpression() { java.lang.String cronExpression = ""; switch (frequency) { case DAILY : cronExpression = org.ovirt.engine.core.compat.StringFormat.format("0 %s %s * * ? *", mins, hour); break; case WEEKLY : cronExpression = org.ovirt.engine.core.compat.StringFormat.format("0 %s %s ? * %s *", mins, hour, getDaysCron()); case NONE : cronExpression = ""; } return cronExpression; }	public java.lang.String toCronExpression() { java.lang.String cronExpression = ""; switch (frequency) { case DAILY : if (((mins) != null) && ((hour) != null)) { cronExpression = org.ovirt.engine.core.compat.StringFormat.format("0 %s %s * * ? *", mins, hour); } break; case WEEKLY : if ((((mins) != null) && ((hour) != null)) && ((days) != null)) { cronExpression = org.ovirt.engine.core.compat.StringFormat.format("0 %s %s ? * %s *", mins, hour, toDaysCron()); } break; case NONE : cronExpression = ""; } return cronExpression; }
public org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule get(java.lang.String cronExpression) { org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule schedule = new org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule(); if (((cronExpression == null) || (cronExpression.isEmpty())) || ((cronExpression.split(" ").length) != 7)) { schedule.setFrequency(org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.Frequency.NONE); return schedule; } java.lang.String[] cronParts = cronExpression.split(" "); if (cronParts[5].equals("?")) { schedule.setFrequency(org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.Frequency.DAILY); } else { schedule.setFrequency(org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.Frequency.WEEKLY); } schedule.setMins(java.lang.Integer.valueOf(cronParts[1])); schedule.setHour(java.lang.Integer.valueOf(cronParts[2])); return schedule; }	@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(frequency.name()); switch (frequency) { case WEEKLY : sb.append(" on ").append(toDaysCron()); sb.append(" at ").append(hour).append(":").append(mins); break; case DAILY : sb.append(" at ").append(hour).append(":").append(mins); break; case NONE : } return sb.toString(); }
private java.lang.String getDaysCron() { java.lang.StringBuffer sb = new java.lang.StringBuffer(); for (org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.Day day : days) { sb.append(day.name()).append(","); } sb.deleteCharAt(sb.length()); return sb.toString(); }	private java.lang.String toDaysCron() { java.lang.StringBuffer sb = new java.lang.StringBuffer(); java.util.Arrays.sort(days); for (org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.Day day : days) { sb.append(day.name()).append(","); } if ((sb.length()) > 0) { sb.deleteCharAt(((sb.length()) - 1)); } return sb.toString(); }
private boolean doesNicHaveMacAddress(org.ovirt.engine.core.common.businessentities.network.VmNic vmNic) { return (vmNic.getMacAddress()) != null; }	private boolean nicWithoutMacAddress(org.ovirt.engine.core.common.businessentities.network.VmNic vmNic) { return (vmNic.getMacAddress()) == null; }
public org.ovirt.engine.core.bll.ValidationResult validateThereIsEnoughOfFreeMacs(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> vmNics, org.ovirt.engine.core.bll.network.macpool.MacPool macPool) { long requiredMacs = streamOfFilteredNics(vmNics, false).count(); boolean notEnoughOfMacs = (requiredMacs > 0) && ((macPool.getAvailableMacsCount()) < requiredMacs); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES).when(notEnoughOfMacs); }	public org.ovirt.engine.core.bll.ValidationResult validateThereIsEnoughOfFreeMacs(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> vmNics, org.ovirt.engine.core.bll.network.macpool.MacPool macPool) { java.util.stream.Stream<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> nicsWithoutMacAddress = vmNics.stream().filter(this::nicWithoutMacAddress); long requiredMacs = nicsWithoutMacAddress.count(); boolean notEnoughOfMacs = (requiredMacs > 0) && ((macPool.getAvailableMacsCount()) < requiredMacs); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES).when(notEnoughOfMacs); }
public org.ovirt.engine.core.bll.ValidationResult validateMacAddress(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> vmNics) { for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : vmNics) { java.lang.String str = iface.getMacAddress(); if (str != null) { if (!(org.ovirt.engine.core.bll.validator.VmNicMacsUtils.VALIDATE_MAC_ADDRESS.matcher(iface.getMacAddress()).matches())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_NETWORK_INTERFACE_MAC_INVALID, java.lang.String.format("$IfaceName %1$s", iface.getName()), java.lang.String.format("$MacAddress %1$s", iface.getMacAddress())); } } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult validateMacAddress(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> vmNics) { for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : vmNics) { if ((iface.getMacAddress()) != null) { if (!(org.ovirt.engine.core.bll.validator.VmNicMacsUtils.VALIDATE_MAC_ADDRESS.matcher(iface.getMacAddress()).matches())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_NETWORK_INTERFACE_MAC_INVALID, java.lang.String.format("$IfaceName %1$s", iface.getName()), java.lang.String.format("$MacAddress %1$s", iface.getMacAddress())); } } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public void replaceInvalidEmptyStringMacAddressesWithNull(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmNetworkInterfaces) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmNetworkInterface : vmNetworkInterfaces) { java.lang.String macAddress = vmNetworkInterface.getMacAddress(); if ((macAddress != null) && (macAddress.isEmpty())) { vmNetworkInterface.setMacAddress(null); } } }	public void replaceInvalidEmptyStringMacAddressesWithNull(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmNetworkInterfaces) { vmNetworkInterfaces.stream().filter(( vmNetworkInterface) -> org.apache.commons.lang.StringUtils.isEmpty(vmNetworkInterface.getMacAddress())).forEach(( e) -> e.setMacAddress(null)); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } macPool = getMacPool(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> domainsMap = new java.util.HashMap<>(); if (!(validateBeforeCloneVm(domainsMap))) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmNetworkInterfaces = org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getInterfaces(); vmNicMacsUtils.replaceInvalidEmptyStringMacAddressesWithNull(vmNetworkInterfaces); if (org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().isImportAsNewEntity()) { initImportClonedVm(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getInterfaces().size()) > (macPool.getAvailableMacsCount())) { return failValidation(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateBallonDevice())) { return false; } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateSoundDevice())) { return false; } return validateAfterCloneVm(domainsMap); }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } macPool = getMacPool(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> domainsMap = new java.util.HashMap<>(); if (!(validateBeforeCloneVm(domainsMap))) { return false; } if (org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().isImportAsNewEntity()) { initImportClonedVm(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getInterfaces().size()) > (macPool.getAvailableMacsCount())) { return failValidation(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateBallonDevice())) { return false; } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateSoundDevice())) { return false; } return validateAfterCloneVm(domainsMap); }
protected boolean initVdss() { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); java.util.Optional<org.ovirt.engine.core.compat.Guid> vdsToRunOn = getVdsToRunOn(); setDestinationVdsId(vdsToRunOn.orElse(null)); if (vdsToRunOn.isPresent()) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn.get()); } vmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); if (!(vdsToRunOn.isPresent())) { return false; } if (org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds().equals(vdsToRunOn.get())) { return false; } if (((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } return true; }	protected boolean initVdss() { try { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); java.util.Optional<org.ovirt.engine.core.compat.Guid> vdsToRunOn = getVdsToRunOn(); setDestinationVdsId(vdsToRunOn.orElse(null)); if (vdsToRunOn.isPresent()) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn.get()); } vmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); if (!(vdsToRunOn.isPresent())) { return false; } if (((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } return true; } catch (java.lang.Exception e) { cleanupPassthroughVnics(getDestinationVdsId()); throw e; } }
private java.util.List<org.ovirt.engine.core.compat.Guid> getVdsBlackList() { java.util.List<org.ovirt.engine.core.compat.Guid> blackList = new java.util.ArrayList(org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList()); if (((org.ovirt.engine.core.bll.MigrateVmCommand.getVdsId()) != null) && (!(org.ovirt.engine.core.bll.MigrateVmCommand.isInternalExecution()))) { blackList.add(org.ovirt.engine.core.bll.MigrateVmCommand.getVdsId()); } return blackList; }	protected java.util.List<org.ovirt.engine.core.compat.Guid> getVdsBlackList() { java.util.List<org.ovirt.engine.core.compat.Guid> blackList = new java.util.ArrayList(org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList()); if ((org.ovirt.engine.core.bll.MigrateVmCommand.getVdsId()) != null) { blackList.add(org.ovirt.engine.core.bll.MigrateVmCommand.getVdsId()); } return blackList; }
@java.lang.Override protected void processIncoming() throws java.io.IOException, org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if ((this.ibuff) == null) { int read = read(headerBuffer); if (read <= 0) { return; } updateLastIncomingHeartbeat(); this.message = getMessage(headerBuffer, headerBuffer.position()); if ((this.message) == null) { this.ibuff = null; this.message = null; return; } int contentLength = this.message.getContentLength(); if (contentLength == (-1)) { java.lang.String[] messages = new java.lang.String(headerBuffer.array(), UTF8).split(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.END_OF_MESSAGE); for (java.lang.String message : messages) { message = message + (END_OF_MESSAGE); emitOnMessageReceived(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.parse(message.getBytes(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.UTF8))); } return; } int length = this.message.getContent().length; if (contentLength == (length - 1)) { emitOnMessageReceived(this.message); return; } else if (contentLength > length) { this.ibuff = java.nio.ByteBuffer.allocate(((contentLength - length) + 1)); } else { byte[] content = this.message.getContent(); this.message.withContent(java.util.Arrays.copyOfRange(content, 0, (contentLength + 1))); emitOnMessageReceived(this.message); headerBuffer.put(java.util.Arrays.copyOfRange(content, (contentLength + 1), content.length)); return; } } read(this.ibuff); updateLastIncomingHeartbeat(); int length = (this.message.getContent().length) + (this.ibuff.position()); if ((this.message.getContentLength()) != (length - 1)) { return; } this.message.withAdditionalContent(this.ibuff.array()); emitOnMessageReceived(this.message); }	@java.lang.Override protected void processIncoming() throws java.io.IOException, org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if ((this.ibuff) == null) { int read = read(headerBuffer); if (read <= 0) { return; } updateLastIncomingHeartbeat(); this.message = getMessage(headerBuffer, headerBuffer.position()); if ((this.message) == null) { return; } int contentLength = this.message.getContentLength(); if (contentLength == (-1)) { emitOnMessageReceived(this.message); return; } int length = this.message.getContent().length; if (contentLength == (length - 1)) { emitOnMessageReceived(this.message); return; } else if (contentLength > length) { this.ibuff = java.nio.ByteBuffer.allocate(((contentLength - length) + 1)); } else { byte[] content = this.message.getContent(); this.message.withContent(java.util.Arrays.copyOfRange(content, 0, (contentLength + 1))); emitOnMessageReceived(this.message); headerBuffer.put(java.util.Arrays.copyOfRange(content, (contentLength + 1), content.length)); return; } } read(this.ibuff); updateLastIncomingHeartbeat(); int length = (this.message.getContent().length) + (this.ibuff.position()); if ((this.message.getContentLength()) != (length - 1)) { return; } this.message.withAdditionalContent(this.ibuff.array()); emitOnMessageReceived(this.message); }
private void translateVolumeType(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity) { org.ovirt.engine.ui.uicompat.EnumTranslator translator = org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance(); if (translator.containsKey(volumeEntity.getVolumeType())) { java.lang.String volumeType = translator.translate(volumeEntity.getVolumeType()); if (volumeEntity.getIsArbiter()) { volumeType += " " + (org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().arbiter()); } getDetailModel().setVolumeTypeSilently(volumeType); } }	private void translateVolumeType(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity) { org.ovirt.engine.ui.uicompat.EnumTranslator translator = org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance(); if (translator.containsKey(volumeEntity.getVolumeType())) { java.lang.String volumeType = translator.translate(volumeEntity.getVolumeType()); if (volumeEntity.getIsArbiter()) { volumeType += (" (" + (org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().arbiter())) + ")"; } getDetailModel().setVolumeTypeSilently(volumeType); } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { java.lang.String qualifiedName = brick.getQualifiedName(); if (brick.getIsArbiter()) { qualifiedName += " " + (org.ovirt.engine.ui.webadmin.section.main.view.tab.gluster.SubTabVolumeBrickView.constants.arbiter()); } return qualifiedName; }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { java.lang.String qualifiedName = brick.getQualifiedName(); if (brick.getIsArbiter()) { qualifiedName += (" (" + (org.ovirt.engine.ui.webadmin.section.main.view.tab.gluster.SubTabVolumeBrickView.constants.arbiter())) + ")"; } return qualifiedName; }
@java.lang.Override public void setVmsWithvNumaNodeList(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsWithvNumaNodeList) { super.setVmsWithvNumaNodeList(vmsWithvNumaNodeList); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(vm.getId())) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (parentModel)); if ((model.getVmNumaNodes()) != null) { this.getVm().setvNumaNodeList(model.getVmNumaNodes()); } vmsWithvNumaNodeList.add(vm); } else { for (org.ovirt.engine.core.common.businessentities.VM vmFromDb : vmsWithvNumaNodeList) { if (vmFromDb.getId().equals(vm.getId())) { vmFromDb.setvNumaNodeList(vm.getvNumaNodeList()); break; } } } }	@java.lang.Override public void setVmsWithvNumaNodeList(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsWithvNumaNodeList) { super.setVmsWithvNumaNodeList(vmsWithvNumaNodeList); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(vm.getId())) { if ((getParentModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getParentModel())); if ((model.getVmNumaNodes()) != null) { this.getVm().setvNumaNodeList(model.getVmNumaNodes()); } } vmsWithvNumaNodeList.add(vm); } else { for (org.ovirt.engine.core.common.businessentities.VM vmFromDb : vmsWithvNumaNodeList) { if (vmFromDb.getId().equals(vm.getId())) { vmFromDb.setvNumaNodeList(vm.getvNumaNodeList()); break; } } } }
public org.ovirt.vdsm.jsonrpc.client.ResponseBuilder run(org.codehaus.jackson.JsonNode params, org.ovirt.vdsm.jsonrpc.client.ResponseBuilder builder) { java.lang.Object result = null; try { java.util.Map apiResult = activateApi(params); if ((fieldName()) != null) { result = apiResult.get(fieldName()); } else { result = apiResult; } } catch (java.lang.Exception e) { org.ovirt.vdsmfake.rpc.json.commands.JsonCommand.log.error("Can't run api call", e); java.util.Map<java.lang.String, java.lang.Object> error = new java.util.HashMap<>(); error.put("code", 100); error.put("message", e.getMessage()); return builder.withError(error); } if (result instanceof java.util.Map) { builder = builder.withResult(((java.util.Map) (result))); } else if (result instanceof java.util.List) { builder = builder.withResult(((java.util.List) (result))); } else if (result instanceof java.lang.String) { builder = builder.withResult(((java.lang.String) (result))); } else if ((result != null) && (result.getClass().isArray())) { java.util.List tempList = new java.util.ArrayList(); java.util.Collections.addAll(tempList, ((java.lang.Object[]) (result))); builder = builder.withResult(tempList); } else { org.ovirt.vdsmfake.rpc.json.commands.JsonCommand.log.error(("Unknown response data --> " + result), new java.lang.Exception()); } return builder; }	public org.ovirt.vdsm.jsonrpc.client.ResponseBuilder run(org.codehaus.jackson.JsonNode params, org.ovirt.vdsm.jsonrpc.client.ResponseBuilder builder) { java.lang.Object result = null; try { java.util.Map apiResult = activateApi(params); if ((fieldName()) != null) { result = apiResult.get(fieldName()); } else { result = apiResult; } } catch (java.lang.Exception e) { org.ovirt.vdsmfake.rpc.json.commands.JsonCommand.log.error("Can't run api call", e); java.util.Map<java.lang.String, java.lang.Object> error = new java.util.HashMap<>(); error.put("code", 100); error.put("message", e.getMessage()); return builder.withError(error); } if (result instanceof java.util.Map) { builder = builder.withResult(((java.util.Map) (result))); } else if (result instanceof java.util.List) { builder = builder.withResult(((java.util.List) (result))); } else if (result instanceof java.lang.String) { builder = builder.withResult(((java.lang.String) (result))); } else if ((result != null) && (result.getClass().isArray())) { java.util.List tempList = new java.util.ArrayList(); java.util.Collections.addAll(tempList, ((java.lang.Object[]) (result))); builder = builder.withResult(tempList); } else { org.ovirt.vdsmfake.rpc.json.commands.JsonCommand.log.error(("Unknown response data --> " + result), new java.lang.Exception()); java.util.Map<java.lang.String, java.lang.Object> error = new java.util.HashMap<>(); error.put("code", 100); error.put("message", "Unknown response data"); builder.withError(error); } return builder; }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageDiskListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDiskListModel) (result.getState())); localModel.stopProgress(); cancel(); }	@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel) (result.getState())); model.stopProgress(); localModel.postSaveAction(result.getReturnValue()); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.domain.GetStorageDomainDRQuery.getQueryReturnValue().setReturnValue(storageDomainDRDao.get(org.ovirt.engine.core.bll.storage.domain.GetStorageDomainDRQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.domain.GetStorageDomainDRQuery.getParameters().getId())); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.domain.GetStorageDomainDRQuery.getQueryReturnValue().setReturnValue(storageDomainDRDao.getAllForStorageDomain(org.ovirt.engine.core.bll.storage.domain.GetStorageDomainDRQuery.getParameters().getId())); }
private void setDetailList(final org.ovirt.engine.ui.uicommonweb.models.storage.StorageEventListModel storageEventListModel, final org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.StorageDomain> permissionListModel) { generalModel.setIsAvailable(false); dcListModel.setIsAvailable(false); this.vmBackupModel.setIsAvailable(false); this.templateBackupModel.setIsAvailable(false); vmRegisterListModel.setIsAvailable(false); templateRegisterListModel.setIsAvailable(false); diskImageRegisterListModel.setIsAvailable(false); vmListModel.setIsAvailable(false); templateListModel.setIsAvailable(false); isoListModel.setIsAvailable(false); diskListModel.setIsAvailable(false); registerDiskListModel.setIsAvailable(false); snapshotListModel.setIsAvailable(false); this.diskProfileListModel.setIsAvailable(false); this.storageDRModel.setIsAvailable(false); java.util.List<org.ovirt.engine.ui.uicommonweb.models.HasEntity<org.ovirt.engine.core.common.businessentities.StorageDomain>> list = new java.util.ArrayList<>(); list.add(generalModel); list.add(dcListModel); list.add(vmBackupModel); list.add(templateBackupModel); list.add(vmRegisterListModel); list.add(templateRegisterListModel); list.add(diskImageRegisterListModel); list.add(vmListModel); list.add(templateListModel); list.add(isoListModel); list.add(diskListModel); list.add(registerDiskListModel); list.add(snapshotListModel); list.add(this.diskProfileListModel); list.add(this.storageDRModel); list.add(storageEventListModel); list.add(permissionListModel); setDetailModels(list); }	private void setDetailList(final org.ovirt.engine.ui.uicommonweb.models.storage.StorageEventListModel storageEventListModel, final org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.StorageDomain> permissionListModel) { generalModel.setIsAvailable(false); dcListModel.setIsAvailable(false); this.vmBackupModel.setIsAvailable(false); this.templateBackupModel.setIsAvailable(false); vmRegisterListModel.setIsAvailable(false); templateRegisterListModel.setIsAvailable(false); diskImageRegisterListModel.setIsAvailable(false); vmListModel.setIsAvailable(false); templateListModel.setIsAvailable(false); isoListModel.setIsAvailable(false); diskListModel.setIsAvailable(false); registerDiskListModel.setIsAvailable(false); snapshotListModel.setIsAvailable(false); this.diskProfileListModel.setIsAvailable(false); this.storageDRListModel.setIsAvailable(false); java.util.List<org.ovirt.engine.ui.uicommonweb.models.HasEntity<org.ovirt.engine.core.common.businessentities.StorageDomain>> list = new java.util.ArrayList<>(); list.add(generalModel); list.add(dcListModel); list.add(vmBackupModel); list.add(templateBackupModel); list.add(vmRegisterListModel); list.add(templateRegisterListModel); list.add(diskImageRegisterListModel); list.add(vmListModel); list.add(templateListModel); list.add(isoListModel); list.add(diskListModel); list.add(registerDiskListModel); list.add(snapshotListModel); list.add(this.diskProfileListModel); list.add(this.storageDRListModel); list.add(storageEventListModel); list.add(permissionListModel); setDetailModels(list); }
@java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel, ?> getConfirmModelPopup(org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel source, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand) { if (lastExecutedCommand == (getModel().getRemoveCommand())) { return removeConfirmPopupProvider.get(); } else { return super.getConfirmModelPopup(source, lastExecutedCommand); } }	@java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.Model, ?> getModelPopup(org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel source, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand, org.ovirt.engine.ui.uicommonweb.models.Model windowModel) { if (lastExecutedCommand == (getModel().getNewCommand())) { return storageDRPopupProvider.get(); } else if (lastExecutedCommand == (getModel().getEditCommand())) { return storageDRPopupProvider.get(); } else { return super.getModelPopup(source, lastExecutedCommand, windowModel); } }
private void onRemove() { org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel) (getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> paramerterList = new java.util.ArrayList<>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (item)); org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters(disk.getId(), getEntity().getId()); paramerterList.add(parameters); } model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.RemoveDisk, paramerterList, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageDiskListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDiskListModel) (result.getState())); localModel.stopProgress(); cancel(); } }, this); }	private void onNewDR() { final org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRModel) (getWindow())); if (!(model.validate())) { return; } org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getEntity(); final org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule syncSchedule = new org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule(); syncSchedule.setFrequency(model.getFrequency().getSelectedItem()); syncSchedule.setHour(model.getHour().getSelectedItem()); syncSchedule.setMins(model.getMins().getSelectedItem()); org.ovirt.engine.core.compat.Guid georepId = ((model.getGeoRepSession().getSelectedItem()) != null) ? model.getGeoRepSession().getSelectedItem().getId() : null; org.ovirt.engine.core.common.action.StorageSyncScheduleParameters parameter = new org.ovirt.engine.core.common.action.StorageSyncScheduleParameters(syncSchedule, storageDomain.getId(), georepId); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.ScheduleGlusterStorageSync, parameter, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel) (result.getState())); model.stopProgress(); localModel.postSaveAction(result.getReturnValue()); } }, this); }
private void updateActionAvailability() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomainDR> domainDRs = ((getSelectedItems()) != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.StorageDomainDR>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomainDR>(); getRemoveCommand().setIsExecutionAllowed(((domainDRs.size()) > 0)); }	private void updateActionAvailability() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomainDR> domainDRs = ((getSelectedItems()) != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.StorageDomainDR>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomainDR>(); getEditCommand().setIsExecutionAllowed(((domainDRs.size()) == 1)); }
private void remove() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeDisksTitle()); model.setHelpTag(HelpTag.remove_disk); model.setHashName("remove_disk"); model.getLatch().setIsAvailable(false); java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> items = new java.util.ArrayList<>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (item)); org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = new org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel(); diskModel.setDisk(disk); items.add(diskModel); } model.setItems(items); org.ovirt.engine.ui.uicommonweb.UICommand onRemoveCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnRemove", this); model.getCommands().add(onRemoveCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.getCommands().add(cancelCommand); }	private void remove() { if ((getWindow()) != null) { return; } }
@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { return; } super.syncSearch(); org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(getEntity().getId()); parameters.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainDR, parameters, new org.ovirt.engine.ui.uicommonweb.models.storage.SetItemsAsyncQuery()); }	@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { return; } super.syncSearch(); org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(getEntity().getId()); parameters.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainDR, parameters, new org.ovirt.engine.ui.uicommonweb.models.storage.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainDR> resultList = returnValue.getReturnValue(); setItems(resultList); populateSessionsMap(resultList); } })); }
private void onSave() { final org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRModel) (getWindow())); if (!(model.validate())) { return; } org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getEntity(); final org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule syncSchedule = new org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule(); syncSchedule.setFrequency(model.getFrequency().getSelectedItem()); syncSchedule.setHour(model.getHour().getEntity()); syncSchedule.setMins(model.getMins().getEntity()); org.ovirt.engine.core.compat.Guid georepId = ((model.getGeoRepSession().getSelectedItem()) != null) ? model.getGeoRepSession().getSelectedItem().getId() : null; org.ovirt.engine.core.common.action.StorageSyncScheduleParameters parameter = new org.ovirt.engine.core.common.action.StorageSyncScheduleParameters(syncSchedule, storageDomain.getId(), georepId); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.ScheduleGlusterStorageSync, parameter, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel) (result.getState())); model.stopProgress(); localModel.postSaveAction(result.getReturnValue()); } }, this); }	private void onSave() { final org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRModel) (getWindow())); if (!(model.validate())) { return; } org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getEntity(); final org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule syncSchedule = new org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule(); syncSchedule.setFrequency(model.getFrequency().getSelectedItem()); syncSchedule.setHour(model.getHour().getSelectedItem()); syncSchedule.setMins(model.getMins().getSelectedItem()); org.ovirt.engine.core.compat.Guid georepId = ((model.getGeoRepSession().getSelectedItem()) != null) ? model.getGeoRepSession().getSelectedItem().getId() : null; org.ovirt.engine.core.common.action.StorageSyncScheduleParameters parameter = new org.ovirt.engine.core.common.action.StorageSyncScheduleParameters(syncSchedule, storageDomain.getId(), georepId); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.ScheduleGlusterStorageSync, parameter, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel) (result.getState())); model.stopProgress(); localModel.postSaveAction(result.getReturnValue()); } }, this); }
@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> geoRepSessions) { model.getGeoRepSession().setItems(geoRepSessions); model.getGeoRepSession().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(geoRepSessions, new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate<>(selectedDR.getGeoRepSessionId()))); }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> geoRepSessions) { model.getGeoRepSession().setItems(geoRepSessions); model.getGeoRepSession().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(geoRepSessions, new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate<>(selectedDR.getGeoRepSessionId()))); model.stopProgress(); }
public boolean isQualifyForOnDemandCheckUpdates() { return (((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonOperational))) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance)); }	public boolean isEligibleForOnDemandCheckUpdates() { return (((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonOperational))) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance)); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("availableUpdates") public void availableUpdates() { for (org.ovirt.engine.core.common.businessentities.VDS host : hostDao.getAll()) { if (!(host.getStatus().isQualifyForCheckUpdates())) { org.ovirt.engine.core.bll.hostdeploy.HostUpdatesCheckerService.log.warn("Check for available updates is skipped for host '{}' due to unsupported host status '{}' ", host.getName(), host.getStatus()); continue; } org.ovirt.engine.core.bll.hostdeploy.HostUpdatesCheckerService.executor.submit(() -> hostUpdatesChecker.checkForUpdates(host)); } }	@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("availableUpdates") public void availableUpdates() { hostDao.getAll().stream().filter(( h) -> h.getStatus().isEligibleForCheckUpdates()).forEach(this::submitCheckUpdatesForHost); }
public boolean isQualifyForCheckUpdates() { return ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonOperational)); }	public boolean isEligibleForCheckUpdates() { return ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonOperational)); }
public void setVdsName(final java.lang.String value) { vdsName = value; }	protected void setVdsName(final java.lang.String value) { vdsName = value; }
protected void executeSPMMergeCommand(org.ovirt.engine.core.common.vdscommands.VDSCommandType vdsCommandType) { org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getSubchainInfo().getBaseImageId())); org.ovirt.engine.core.common.vdscommands.SPMColdMergeVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SPMColdMergeVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getSubchainInfo()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(vdsCommandType, parameters); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getParentCommand()); org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.setSucceeded(true); } }	protected void executeSPMMergeCommand(org.ovirt.engine.core.common.vdscommands.VDSCommandType vdsCommandType) { org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getSubchainInfo().getImageGroupId())); org.ovirt.engine.core.common.vdscommands.SPMColdMergeVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SPMColdMergeVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getSubchainInfo()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(vdsCommandType, parameters); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getParentCommand()); org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.setSucceeded(true); } }
private void mockSnapshotValidator() { when(snapshotsValidator.vmNotDuringSnapshot(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(ValidationResult.VALID); when(snapshotsValidator.vmNotInPreview(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(ValidationResult.VALID); }	private void mockSnapshotsValidator() { when(snapshotsValidator.vmNotDuringSnapshot(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(ValidationResult.VALID); when(snapshotsValidator.vmNotInPreview(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(ValidationResult.VALID); }
@org.junit.Before public void initializeMocks() { doNothing().when(command).updateDisksFromDb(); doReturn(true).when(command).checkImageConfiguration(); doReturn(false).when(command).isVirtioScsiControllerAttached(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(false).when(command).hasWatchdog(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(false).when(command).isBalloonEnabled(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(false).when(command).isSoundDeviceEnabled(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(true).when(command).setAndValidateDiskProfiles(); doReturn(new java.util.ArrayList()).when(diskVmElementDao).getAllForVm(org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.vmId); doReturn(true).when(command).validateQuota(); mockSnapshotValidator(); doAnswer(( invocation) -> (invocation.getArguments()[0]) != null ? invocation.getArguments()[0] : org.ovirt.engine.core.compat.Guid.newGuid()).when(quotaManager).getDefaultQuotaIfNull(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class)); doReturn(ValidationResult.VALID).when(diskVmElementValidator).isPassDiscardSupported(any(org.ovirt.engine.core.compat.Guid.class)); org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); injectorRule.bind(org.ovirt.engine.core.bll.utils.VmDeviceUtils.class, vmDeviceUtils); }	@org.junit.Before public void initializeMocks() { doNothing().when(command).updateDisksFromDb(); doReturn(true).when(command).checkImageConfiguration(); doReturn(false).when(command).isVirtioScsiControllerAttached(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(false).when(command).hasWatchdog(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(false).when(command).isBalloonEnabled(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(false).when(command).isSoundDeviceEnabled(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(true).when(command).setAndValidateDiskProfiles(); doReturn(new java.util.ArrayList()).when(diskVmElementDao).getAllForVm(org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.vmId); doReturn(true).when(command).validateQuota(); mockSnapshotsValidator(); doAnswer(( invocation) -> (invocation.getArguments()[0]) != null ? invocation.getArguments()[0] : org.ovirt.engine.core.compat.Guid.newGuid()).when(quotaManager).getDefaultQuotaIfNull(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class)); doReturn(ValidationResult.VALID).when(diskVmElementValidator).isPassDiscardSupported(any(org.ovirt.engine.core.compat.Guid.class)); org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); injectorRule.bind(org.ovirt.engine.core.bll.utils.VmDeviceUtils.class, vmDeviceUtils); }
private void tagListModel_SelectedItemsChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs e) { boolean hadSelectedTags = getHasSelectedTags(); updateHasSelectedTags(); if (getHasSelectedTags()) { setAllListModelsUnavailable(); getHostList().setIsAvailable(true); getVmList().setIsAvailable(true); getUserList().setIsAvailable(true); } else { updateAvailability(SystemTreeItemType.System, null); getHostList().setSearchString("Host:"); getVmList().setSearchString("Vms:"); getUserList().setSearchString("Users:"); } org.ovirt.engine.ui.uicommonweb.models.ListModel oldSelectedItem = getSelectedItem(); if (((((getHasSelectedTags()) && (oldSelectedItem != (getHostList()))) && (oldSelectedItem != (getVolumeList()))) && (oldSelectedItem != (getVmList()))) && (oldSelectedItem != (getUserList()))) { setSelectedItem(getVmList()); } else if ((getHasSelectedTags()) || hadSelectedTags) { java.lang.String prefix = ""; java.lang.String search = ""; org.ovirt.engine.core.compat.RefObject<java.lang.String> tempRef_prefix = new org.ovirt.engine.core.compat.RefObject(prefix); org.ovirt.engine.core.compat.RefObject<java.lang.String> tempRef_search = new org.ovirt.engine.core.compat.RefObject(search); splitSearchString(getSelectedItem().getDefaultSearchString(), tempRef_prefix, tempRef_search); prefix = tempRef_prefix.argvalue; search = tempRef_search.argvalue; setSearchStringPrefix(prefix); setSearchString(search); getSearchCommand().execute(); searchStringChanged(); } }	private void tagListModel_SelectedItemsChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs e) { boolean hadSelectedTags = getHasSelectedTags(); updateHasSelectedTags(); if (getHasSelectedTags()) { setAllListModelsUnavailable(); getHostList().setIsAvailable(true); getVmList().setIsAvailable(true); getUserList().setIsAvailable(true); } else { updateAvailability(SystemTreeItemType.System, null); getHostList().setSearchString(getHostList().getDefaultSearchString()); getVmList().setSearchString(getVmList().getDefaultSearchString()); getUserList().setSearchString(getUserList().getDefaultSearchString()); } org.ovirt.engine.ui.uicommonweb.models.ListModel oldSelectedItem = getSelectedItem(); if (((((getHasSelectedTags()) && (oldSelectedItem != (getHostList()))) && (oldSelectedItem != (getVolumeList()))) && (oldSelectedItem != (getVmList()))) && (oldSelectedItem != (getUserList()))) { setSelectedItem(getVmList()); } else if ((getHasSelectedTags()) || hadSelectedTags) { java.lang.String prefix = ""; java.lang.String search = ""; org.ovirt.engine.core.compat.RefObject<java.lang.String> tempRef_prefix = new org.ovirt.engine.core.compat.RefObject(prefix); org.ovirt.engine.core.compat.RefObject<java.lang.String> tempRef_search = new org.ovirt.engine.core.compat.RefObject(search); splitSearchString(getSelectedItem().getDefaultSearchString(), tempRef_prefix, tempRef_search); prefix = tempRef_prefix.argvalue; search = tempRef_search.argvalue; setSearchStringPrefix(prefix); setSearchString(search); getSearchCommand().execute(); searchStringChanged(); } }
private void setAllListModelsUnavailable() { for (org.ovirt.engine.ui.uicommonweb.models.ListModel m : getItems()) { if (!(m instanceof org.ovirt.engine.ui.uicommonweb.models.plugin.PluginModel)) { m.setIsAvailable(false); } } }	private void setAllListModelsUnavailable() { for (org.ovirt.engine.ui.uicommonweb.models.ListModel m : getItems()) { m.setIsAvailable(false); } }
private org.ovirt.engine.ui.uicommonweb.models.tags.TagModel findRootNode(org.ovirt.engine.ui.uicommonweb.models.tags.TagModel tagModel) { if ((tagModel.getParent()) != null) { return findRootNode(tagModel.getParent()); } return tagModel; }	private java.util.List<org.ovirt.engine.ui.uicommonweb.models.tags.TagModel> activeTagList(org.ovirt.engine.ui.uicommonweb.models.tags.TagModel model) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.tags.TagModel> result = new java.util.ArrayList<>(); if (model.getSelection()) { result.add(model); } for (org.ovirt.engine.ui.uicommonweb.models.tags.TagModel child : model.getChildren()) { result.addAll(activeTagList(child)); } return result; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("SelectedItems".equals(args.propertyName)) { if ((getSelectionModel().getSelectedObject()) != null) { org.ovirt.engine.ui.webadmin.uicommon.model.TagActivatedEvent.fire(this, findRootNode(getSelectionModel().getSelectedObject())); } } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.webadmin.uicommon.model.TagActivationChangeEvent.fire(this, activeTagList(model.getRootNode())); }
public static org.ovirt.engine.ui.webadmin.plugin.entity.TagObject from(org.ovirt.engine.ui.uicommonweb.models.tags.TagModel model) { if (model != null) { org.ovirt.engine.ui.webadmin.plugin.entity.TagObject result = com.google.gwt.core.client.JavaScriptObject.createObject().cast(); com.google.gwt.core.client.JsArray<org.ovirt.engine.ui.webadmin.plugin.entity.TagObject> children = com.google.gwt.core.client.JavaScriptObject.createArray().cast(); result.setValueAsString("description", model.getDescription().getEntity()); result.setValueAsString("name", model.getName().getEntity()); result.setValueAsBoolean("selected", model.getSelection()); if ((model.getParent()) == null) { result.setValueAsDouble("selectedTagCount", org.ovirt.engine.ui.webadmin.plugin.entity.TagObject.calculateSelectedTagCount(model)); } for (org.ovirt.engine.ui.uicommonweb.models.tags.TagModel child : model.getChildren()) { children.push(org.ovirt.engine.ui.webadmin.plugin.entity.TagObject.from(child)); } result.setValueAsJavaScriptObject("children", children); return result; } else { return null; } }	public static org.ovirt.engine.ui.webadmin.plugin.entity.TagObject from(org.ovirt.engine.ui.uicommonweb.models.tags.TagModel model) { return org.ovirt.engine.ui.webadmin.plugin.entity.TagObject.from(model, true); }
private static java.lang.Double calculateSelectedTagCount(org.ovirt.engine.ui.uicommonweb.models.tags.TagModel model) { double result = 0; for (org.ovirt.engine.ui.uicommonweb.models.tags.TagModel child : model.getChildren()) { result += org.ovirt.engine.ui.webadmin.plugin.entity.TagObject.calculateSelectedTagCount(child); } if (model.getSelection()) { result++; } return result; }	private static org.ovirt.engine.ui.webadmin.plugin.entity.TagObject from(org.ovirt.engine.ui.uicommonweb.models.tags.TagModel model, boolean includeChildren) { org.ovirt.engine.ui.webadmin.plugin.entity.TagObject result = com.google.gwt.core.client.JavaScriptObject.createObject().cast(); result.setValueAsString("description", model.getDescription().getEntity()); result.setValueAsString("name", model.getName().getEntity()); result.setValueAsBoolean("selected", model.getSelection()); if (includeChildren) { com.google.gwt.core.client.JsArray<org.ovirt.engine.ui.webadmin.plugin.entity.TagObject> children = com.google.gwt.core.client.JavaScriptObject.createArray().cast(); for (org.ovirt.engine.ui.uicommonweb.models.tags.TagModel child : model.getChildren()) { children.push(org.ovirt.engine.ui.webadmin.plugin.entity.TagObject.from(child, true)); } result.setValueAsJavaScriptObject("children", children); } return result; }
@java.lang.Override public void onTagActivated(org.ovirt.engine.ui.webadmin.uicommon.model.TagActivatedEvent event) { manager.invokePluginsNow("TagActivated", org.ovirt.engine.ui.webadmin.plugin.jsni.JsArrayHelper.createMixedArray(org.ovirt.engine.ui.webadmin.plugin.entity.TagObject.from(event.getRoot()))); }	@java.lang.Override public void onTagActivationChange(org.ovirt.engine.ui.webadmin.uicommon.model.TagActivationChangeEvent event) { manager.invokePluginsNow("TagActivationChange", org.ovirt.engine.ui.webadmin.plugin.entity.TagObject.activeTagArray(event.getActiveTags())); }
public void setTasksMonitored(boolean tasksMonitored) { isTasksMonitored = tasksMonitored; }	public void setTasksMonitored(boolean tasksMonitored) { this.tasksMonitored = tasksMonitored; }
public boolean isTasksMonitored() { return isTasksMonitored; }	public boolean isTasksMonitored() { return tasksMonitored; }
public void setMonitored(boolean monitored) { isMonitored = monitored; }	public void setMonitored(boolean monitored) { this.monitored = monitored; }
public void setJobRequired(boolean jobRequired) { isJobRequired = jobRequired; }	public void setJobRequired(boolean jobRequired) { this.jobRequired = jobRequired; }
public void setCompleted(boolean completed) { isCompleted = completed; }	public void setCompleted(boolean completed) { this.completed = completed; }
private org.ovirt.engine.core.common.utils.PersistedCommandContext buildPersistedCommandContext() { org.ovirt.engine.core.common.utils.PersistedCommandContext persistedCommandContext = new org.ovirt.engine.core.common.utils.PersistedCommandContext(); persistedCommandContext.setJobId((((getExecutionContext()) == null) || ((getExecutionContext().getJob()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getJob().getId())); persistedCommandContext.setStepId((((getExecutionContext()) == null) || ((getExecutionContext().getStep()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getStep().getId())); persistedCommandContext.setExecutionMethod(((getExecutionContext()) == null ? ExecutionContext.ExecutionMethod.AsStep.toString() : getExecutionContext().getExecutionMethod().toString())); if ((getExecutionContext()) != null) { persistedCommandContext.setCompleted(getExecutionContext().isCompleted()); persistedCommandContext.setJobRequired(getExecutionContext().isJobRequired()); persistedCommandContext.setMonitored(getExecutionContext().isMonitored()); persistedCommandContext.setShouldEndJob(getExecutionContext().shouldEndJob()); persistedCommandContext.setTasksMonitored(getExecutionContext().isTasksMonitored()); } return persistedCommandContext; }	private org.ovirt.engine.core.common.utils.PersistedCommandContext buildPersistedCommandContext() { org.ovirt.engine.core.common.utils.PersistedCommandContext persistedCommandContext = new org.ovirt.engine.core.common.utils.PersistedCommandContext(); persistedCommandContext.setJobId((((getExecutionContext()) == null) || ((getExecutionContext().getJob()) == null) ? null : getExecutionContext().getJob().getId())); persistedCommandContext.setStepId((((getExecutionContext()) == null) || ((getExecutionContext().getStep()) == null) ? null : getExecutionContext().getStep().getId())); persistedCommandContext.setExecutionMethod(((getExecutionContext()) == null ? org.ovirt.engine.core.common.utils.ExecutionMethod.AsStep : getExecutionContext().getExecutionMethod())); if ((getExecutionContext()) != null) { persistedCommandContext.setCompleted(getExecutionContext().isCompleted()); persistedCommandContext.setJobRequired(getExecutionContext().isJobRequired()); persistedCommandContext.setMonitored(getExecutionContext().isMonitored()); persistedCommandContext.setShouldEndJob(getExecutionContext().shouldEndJob()); persistedCommandContext.setTasksMonitored(getExecutionContext().isTasksMonitored()); } return persistedCommandContext; }
private org.ovirt.engine.core.bll.context.CommandContext buildCommandContext(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); org.ovirt.engine.core.common.utils.PersistedCommandContext persistedCommandContext = cmdEntity.getCommandContext(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(persistedCommandContext.getJobId()))) { executionContext.setJob(jobRepository.getJobWithSteps(persistedCommandContext.getJobId())); } else if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(persistedCommandContext.getStepId()))) { executionContext.setStep(jobRepository.getStep(persistedCommandContext.getStepId())); } if (org.apache.commons.lang.StringUtils.isNotEmpty(persistedCommandContext.getExecutionMethod())) { executionContext.setExecutionMethod(ExecutionContext.ExecutionMethod.valueOf(persistedCommandContext.getExecutionMethod())); } executionContext.setCompleted(persistedCommandContext.isCompleted()); executionContext.setJobRequired(persistedCommandContext.isJobRequired()); executionContext.setMonitored(persistedCommandContext.isMonitored()); executionContext.setShouldEndJob(persistedCommandContext.shouldEndJob()); executionContext.setTasksMonitored(persistedCommandContext.isTasksMonitored()); return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext); }	private org.ovirt.engine.core.bll.context.CommandContext buildCommandContext(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); org.ovirt.engine.core.common.utils.PersistedCommandContext persistedCommandContext = cmdEntity.getCommandContext(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(persistedCommandContext.getJobId()))) { executionContext.setJob(jobRepository.getJobWithSteps(persistedCommandContext.getJobId())); } else if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(persistedCommandContext.getStepId()))) { executionContext.setStep(jobRepository.getStep(persistedCommandContext.getStepId())); } executionContext.setExecutionMethod(persistedCommandContext.getExecutionMethod()); executionContext.setCompleted(persistedCommandContext.isCompleted()); executionContext.setJobRequired(persistedCommandContext.isJobRequired()); executionContext.setMonitored(persistedCommandContext.isMonitored()); executionContext.setShouldEndJob(persistedCommandContext.shouldEndJob()); executionContext.setTasksMonitored(persistedCommandContext.isTasksMonitored()); return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext); }
public static org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid userId, long engineSessionSeqId, org.ovirt.engine.core.compat.Guid commandId, org.ovirt.engine.core.compat.Guid parentCommandId, org.ovirt.engine.core.compat.Guid rootCommandId, org.ovirt.engine.core.common.utils.PersistedCommandContext commandContext, org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase params, org.ovirt.engine.core.compat.CommandStatus status, boolean callbackEnabled, org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue, java.util.Map<java.lang.String, java.io.Serializable> data) { org.ovirt.engine.core.common.businessentities.CommandEntity entity = new org.ovirt.engine.core.common.businessentities.CommandEntity(); entity.setEngineSessionSeqId(engineSessionSeqId); entity.setUserId(userId); entity.setId(commandId); entity.setParentCommandId(parentCommandId); entity.setRootCommandId(rootCommandId); entity.setCommandContext(commandContext); entity.setCommandType(actionType); entity.setCommandParameters(params); entity.setCommandStatus(status); entity.setCallbackEnabled(callbackEnabled); entity.setReturnValue(returnValue); entity.setData(data); return entity; }	public static org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid userId, long engineSessionSeqId, org.ovirt.engine.core.compat.Guid commandId, org.ovirt.engine.core.compat.Guid parentCommandId, org.ovirt.engine.core.compat.Guid rootCommandId, org.ovirt.engine.core.common.utils.PersistedCommandContext commandContext, org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase params, org.ovirt.engine.core.compat.CommandStatus status, boolean callbackEnabled, org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue, java.util.Map<java.lang.String, java.io.Serializable> data) { org.ovirt.engine.core.common.businessentities.CommandEntity entity = new org.ovirt.engine.core.common.businessentities.CommandEntity(); entity.setEngineSessionSeqId(engineSessionSeqId); entity.setUserId(userId); entity.setId(commandId); entity.setParentCommandId(parentCommandId); entity.setRootCommandId(rootCommandId); if (commandContext != null) { entity.setCommandContext(commandContext); } entity.setCommandType(actionType); entity.setCommandParameters(params); entity.setCommandStatus(status); entity.setCallbackEnabled(callbackEnabled); entity.setReturnValue(returnValue); entity.setData(data); return entity; }
public boolean isCompleted() { return isCompleted; }	public boolean isCompleted() { return completed; }
public java.lang.String getExecutionMethod() { return executionMethod; }	public org.ovirt.engine.core.common.utils.ExecutionMethod getExecutionMethod() { return executionMethod; }
public void setExecutionMethod(java.lang.String executionMethod) { this.executionMethod = executionMethod; }	public void setExecutionMethod(org.ovirt.engine.core.common.utils.ExecutionMethod executionMethod) { this.executionMethod = executionMethod; }
public boolean isJobRequired() { return isJobRequired; }	public boolean isJobRequired() { return jobRequired; }
public boolean isMonitored() { return isMonitored; }	public boolean isMonitored() { return monitored; }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.AuditLog event) { java.util.Map<java.lang.String, java.lang.Object> returnVal = null; if (event.isExternal()) { returnVal = getCallsHandler().executeModification("InsertExternalAuditLog", getExternalEventSqlMapper(event)); } else { returnVal = getCallsHandler().executeModification("InsertAuditLog", getSqlMapper(event)); } event.setAuditLogId(((java.lang.Integer) (returnVal.get("audit_log_id")))); }	@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.AuditLog event) { if (event.isExternal()) { getCallsHandler().executeModification("InsertExternalAuditLog", getExternalEventSqlMapper(event)); } else { getCallsHandler().executeModification("InsertAuditLog", getSqlMapper(event)); } }
private static java.lang.String getMessageToLog(java.lang.String loggerString, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { java.lang.String message; if (loggerString.isEmpty()) { message = auditLog.toStringForLogging(); } else { message = java.text.MessageFormat.format(loggerString, auditLog.getMessage()); } return java.text.MessageFormat.format("Audit Log ID: {0}, {1}", auditLog.getAuditLogId(), message); }	private static java.lang.String getMessageToLog(java.lang.String loggerString, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { java.lang.String message; if (loggerString.isEmpty()) { message = auditLog.toStringForLogging(); } else { message = java.text.MessageFormat.format(loggerString, auditLog.getMessage()); } return java.text.MessageFormat.format("EVENT_ID: {0}({1}), {2}", auditLog.getLogType(), auditLog.getLogType().getValue(), message); }
public static java.lang.String escapeUnderScore(final java.lang.String customizedValue, final java.lang.String customizedRelation) { java.lang.String escapedValue = customizedValue; if ((customizedRelation.equalsIgnoreCase("LIKE")) || (customizedRelation.equalsIgnoreCase("ILIKE"))) { java.lang.String replaceWith = "_"; int pgMajorRelease = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PgMajorRelease); if (pgMajorRelease == (org.ovirt.engine.core.searchbackend.SyntaxChecker.PgMajorRelease.PG8.getValue())) { replaceWith = "\\\\_"; } else if (pgMajorRelease == (org.ovirt.engine.core.searchbackend.SyntaxChecker.PgMajorRelease.PG9.getValue())) { replaceWith = "\\_"; } escapedValue = customizedValue.replace("_", replaceWith); } return escapedValue; }	public static java.lang.String escapeUnderScore(final java.lang.String customizedValue, final java.lang.String customizedRelation) { java.lang.String escapedValue = customizedValue; if ((customizedRelation.equalsIgnoreCase("LIKE")) || (customizedRelation.equalsIgnoreCase("ILIKE"))) { escapedValue = customizedValue.replace("_", org.ovirt.engine.core.searchbackend.SyntaxChecker.getEscapedCharacter("_")); } return escapedValue; }
private java.lang.String getEffectiveEmulatedMachine() { if ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomEmulatedMachine()) != null) { return org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomEmulatedMachine(); } java.lang.String recentDefault = org.ovirt.engine.core.bll.RunVmCommand.getCluster().getEmulatedMachine(); if ((removeThisDebugSwitch) && ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomCompatibilityVersion()) != null)) { java.util.List<java.lang.String> oldSupported = org.ovirt.engine.core.common.config.Config.<java.util.List<java.lang.String>>getValue(ConfigValues.ClusterEmulatedMachines, org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomCompatibilityVersion().getValue()); java.util.Optional<java.lang.String> best = oldSupported.stream().max(( s1, s2) -> (org.apache.commons.lang.StringUtils.indexOfDifference(recentDefault, s1)) - (org.apache.commons.lang.StringUtils.indexOfDifference(recentDefault, s2))); org.ovirt.engine.core.bll.RunVmCommand.log.info("Emulated machine '{}' selected since Custom Compatibility Version is set for the '{}' VM", best.orElse(recentDefault), org.ovirt.engine.core.bll.RunVmCommand.getVm().getName()); return best.orElse(recentDefault); } return recentDefault; }	protected java.lang.String getEffectiveEmulatedMachine() { if ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomEmulatedMachine()) != null) { return org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomEmulatedMachine(); } java.lang.String recentClusterDefault = org.ovirt.engine.core.bll.RunVmCommand.getCluster().getEmulatedMachine(); if ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomCompatibilityVersion()) == null) { return recentClusterDefault; } java.util.List<java.lang.String> oldSupported = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.ClusterEmulatedMachines, org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomCompatibilityVersion().getValue()); java.util.Optional<java.lang.String> best = oldSupported.stream().max(( s1, s2) -> (org.apache.commons.lang.StringUtils.indexOfDifference(recentClusterDefault, s1)) - (org.apache.commons.lang.StringUtils.indexOfDifference(recentClusterDefault, s2))); org.ovirt.engine.core.bll.RunVmCommand.log.info("Emulated machine '{}' selected since Custom Compatibility Version is set for '{}'", best.orElse(recentClusterDefault), org.ovirt.engine.core.bll.RunVmCommand.getVm()); return best.orElse(recentClusterDefault); }
public static java.util.Map<java.lang.String, java.lang.Object> prepareLocationInfoForVdsCommand(org.ovirt.engine.core.common.businessentities.LocationInfo locationInfo) { if (locationInfo instanceof org.ovirt.engine.core.common.businessentities.ExternalLocationInfo) { org.ovirt.engine.core.common.businessentities.ExternalLocationInfo info = ((org.ovirt.engine.core.common.businessentities.ExternalLocationInfo) (locationInfo)); if (ConnectionMethod.HTTP.equals(info.getConnectionMethod())) { org.ovirt.engine.core.common.businessentities.HttpLocationInfo httpInfo = ((org.ovirt.engine.core.common.businessentities.HttpLocationInfo) (info)); java.util.Map<java.lang.String, java.lang.Object> infoMap = new java.util.HashMap<>(); infoMap.put("method", "http"); infoMap.put("url", httpInfo.getUrl()); infoMap.put("headers", httpInfo.getHeaders()); return infoMap; } } if (locationInfo instanceof org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) { org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo info = ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (locationInfo)); java.util.Map<java.lang.String, java.lang.Object> infoMap = new java.util.HashMap<>(); infoMap.put("endpoint_type", "div"); infoMap.put("sd_id", info.getStorageDomainId().toString()); infoMap.put("img_id", info.getImageGroupId().toString()); infoMap.put("vol_id", info.getImageId().toString()); infoMap.put("generation", info.getGeneration()); return infoMap; } throw new java.lang.RuntimeException("Unsupported location info"); }	public static java.util.Map<java.lang.String, java.lang.Object> prepareLocationInfoForVdsCommand(org.ovirt.engine.core.common.businessentities.LocationInfo locationInfo) { if (locationInfo instanceof org.ovirt.engine.core.common.businessentities.ExternalLocationInfo) { org.ovirt.engine.core.common.businessentities.ExternalLocationInfo info = ((org.ovirt.engine.core.common.businessentities.ExternalLocationInfo) (locationInfo)); if (ConnectionMethod.HTTP.equals(info.getConnectionMethod())) { org.ovirt.engine.core.common.businessentities.HttpLocationInfo httpInfo = ((org.ovirt.engine.core.common.businessentities.HttpLocationInfo) (info)); java.util.Map<java.lang.String, java.lang.Object> infoMap = new java.util.HashMap<>(); infoMap.put("method", "http"); infoMap.put("url", httpInfo.getUrl()); infoMap.put("headers", httpInfo.getHeaders()); return infoMap; } } if (locationInfo instanceof org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) { org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo info = ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (locationInfo)); java.util.Map<java.lang.String, java.lang.Object> infoMap = new java.util.HashMap<>(); infoMap.put("endpoint_type", "div"); infoMap.put("sd_id", info.getStorageDomainId().toString()); infoMap.put("img_id", info.getImageGroupId().toString()); infoMap.put("vol_id", info.getImageId().toString()); if ((info.getGeneration()) != null) { infoMap.put("generation", info.getGeneration()); } return infoMap; } throw new java.lang.RuntimeException("Unsupported location info"); }
@java.lang.Override public org.ovirt.engine.api.model.ImageTransfer get() { org.ovirt.engine.api.model.ImageTransfer imageTransfer = performGet(VdcQueryType.GetImageTransferById, new org.ovirt.engine.core.common.queries.IdQueryParameters(guid)); if (imageTransfer.isSetImage()) { imageTransfer.getImage().unsetLinks(); } return imageTransfer; }	@java.lang.Override public org.ovirt.engine.api.model.ImageTransfer get() { return performGet(VdcQueryType.GetImageTransferById, new org.ovirt.engine.core.common.queries.IdQueryParameters(guid)); }
@java.lang.Override public org.ovirt.engine.core.common.job.Step getStep(org.ovirt.engine.core.compat.Guid stepId, boolean includeSubjectEntities) { org.ovirt.engine.core.common.job.Step step = stepDao.get(stepId); if (includeSubjectEntities) { step.setSubjectEntities(stepSubjectEntityDao.getStepSubjectEntitiesByStepId(stepId)); } return step; }	@java.lang.Override public org.ovirt.engine.core.common.job.Step getStep(org.ovirt.engine.core.compat.Guid stepId, boolean loadSubjectEntities) { org.ovirt.engine.core.common.job.Step step = stepDao.get(stepId); if ((step != null) && loadSubjectEntities) { step.setSubjectEntities(stepSubjectEntityDao.getStepSubjectEntitiesByStepId(stepId)); } return step; }
org.ovirt.engine.core.common.job.Step getStep(org.ovirt.engine.core.compat.Guid stepId, boolean includeSubjectEntities);	org.ovirt.engine.core.common.job.Step getStep(org.ovirt.engine.core.compat.Guid stepId, boolean loadSubjectEntities);
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.job.Step> steps = stepDao.getStepsByJobId(org.ovirt.engine.core.bll.GetStepsByJobIdQuery.getParameters().getJobId()); steps.forEach(( s) -> s.setSubjectEntities(stepSubjectEntityDao.getStepSubjectEntitiesByStepId(s.getId()))); org.ovirt.engine.core.bll.GetStepsByJobIdQuery.getQueryReturnValue().setReturnValue(steps); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.GetStepsByJobIdQuery.getQueryReturnValue().setReturnValue(stepDao.getStepsByJobId(org.ovirt.engine.core.bll.GetStepsByJobIdQuery.getParameters().getJobId())); }
private org.ovirt.engine.core.bll.context.CommandContext buildCommandContext(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getJobId()))) { executionContext.setJob(jobRepository.getJobWithSteps(cmdEntity.getJobId())); } else if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getStepId()))) { executionContext.setStep(jobRepository.getStep(cmdEntity.getStepId(), false)); } return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext); }	private org.ovirt.engine.core.bll.context.CommandContext buildCommandContext(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); org.ovirt.engine.core.common.utils.PersistedCommandContext persistedCommandContext = cmdEntity.getCommandContext(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(persistedCommandContext.getJobId()))) { executionContext.setJob(jobRepository.getJobWithSteps(persistedCommandContext.getJobId())); } else if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(persistedCommandContext.getStepId()))) { executionContext.setStep(jobRepository.getStep(persistedCommandContext.getStepId(), false)); } executionContext.setExecutionMethod(persistedCommandContext.getExecutionMethod()); executionContext.setCompleted(persistedCommandContext.isCompleted()); executionContext.setJobRequired(persistedCommandContext.isJobRequired()); executionContext.setMonitored(persistedCommandContext.isMonitored()); executionContext.setShouldEndJob(persistedCommandContext.shouldEndJob()); executionContext.setTasksMonitored(persistedCommandContext.isTasksMonitored()); return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext); }
private void reorderNics() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDevice> vmInterfaceDevices = getVmInterfaceDevices(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> nics = vmNicDao.getAllForVm(org.ovirt.engine.core.bll.network.vm.ReorderVmNicsCommand.getParameters().getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> nicsToReorder = new java.util.ArrayList<>(); java.util.List<java.lang.String> macsToReorder = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNic nic : nics) { org.ovirt.engine.core.common.businessentities.VmDevice nicDevice = vmInterfaceDevices.get(nic.getId()); if ((nicDevice == null) || (org.apache.commons.lang.StringUtils.isEmpty(nicDevice.getAddress()))) { nicsToReorder.add(nic); macsToReorder.add(nic.getMacAddress()); } } java.util.Collections.sort(nicsToReorder, new org.ovirt.engine.core.bll.common.comparator.NumericSuffixNameableComparator()); java.util.Collections.sort(macsToReorder); for (int i = 0; i < (nicsToReorder.size()); ++i) { org.ovirt.engine.core.common.businessentities.network.VmNic nic = nicsToReorder.get(i); nic.setMacAddress(macsToReorder.get(i)); vmNicDao.update(nic); } }	private void reorderNics() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDevice> vmInterfaceDevices = getVmInterfaceDevices(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> nics = vmNicDao.getAllForVm(org.ovirt.engine.core.bll.network.vm.ReorderVmNicsCommand.getParameters().getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> nicsToReorder = new java.util.ArrayList<>(); java.util.List<java.lang.String> macsToReorder = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNic nic : nics) { org.ovirt.engine.core.common.businessentities.VmDevice nicDevice = vmInterfaceDevices.get(nic.getId()); if ((nicDevice == null) || (org.apache.commons.lang.StringUtils.isEmpty(nicDevice.getAddress()))) { nicsToReorder.add(nic); macsToReorder.add(nic.getMacAddress()); } } java.util.Collections.sort(nicsToReorder, numericSuffixNameableComparator); java.util.Collections.sort(macsToReorder); for (int i = 0; i < (nicsToReorder.size()); ++i) { org.ovirt.engine.core.common.businessentities.network.VmNic nic = nicsToReorder.get(i); nic.setMacAddress(macsToReorder.get(i)); vmNicDao.update(nic); } }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Nameable nameable1, org.ovirt.engine.core.common.businessentities.Nameable nameable2) { final java.lang.String name1 = nameable1.getName(); final java.lang.String name2 = nameable2.getName(); final org.ovirt.engine.core.bll.common.NumericSuffixNormalizer numericSuffixNormalizer = new org.ovirt.engine.core.bll.common.NumericSuffixNormalizer(); final java.util.List<java.lang.String> normalizedNames = numericSuffixNormalizer.normalize(name1, name2); return org.apache.commons.lang.ObjectUtils.compare(normalizedNames.get(0), normalizedNames.get(1)); }	@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Nameable nameable1, org.ovirt.engine.core.common.businessentities.Nameable nameable2) { final java.lang.String name1 = nameable1.getName(); final java.lang.String name2 = nameable2.getName(); final java.util.List<java.lang.String> normalizedNames = numericSuffixNormalizer.normalize(name1, name2); return org.apache.commons.lang.ObjectUtils.compare(normalizedNames.get(0), normalizedNames.get(1)); }
private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info("Command {} id: '{}': attempting to determine the job status by polling the entity.", cmd.getActionType(), cmd.getCommandId()); org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus status = pollEntity(cmd); if (status != null) { return status; } org.ovirt.engine.core.bll.storage.EntityPollingCommand entityPollingCommand = ((org.ovirt.engine.core.bll.storage.EntityPollingCommand) (cmd)); if ((entityPollingCommand.isJobFencingSupported()) && (!(cmd.getParameters().getJobStarted()))) { log.info("Command {} id: '{}': attempting to fence job {}", cmd.getActionType(), cmd.getCommandId(), cmd.getJobId()); entityPollingCommand.attemptToFenceJob(); } return null; } if (jobsReportedByHost) { log.error(("Command {} id: '{}': entity polling isn't supported and the job isn't reported by the host," + "assuming it failed so that the command execution will end."), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } if (cmd.failJobWithUndeterminedStatus()) { log.error(("Command {} id: '{}': failed to determine the actual job status, considering as failed as per" + " the command implementation"), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } log.error("Command {} id: '{}': failed to determine the actual job status, will retry to poll the job soon", cmd.getActionType(), cmd.getCommandId()); return null; }	private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info("Command {} id: '{}': attempting to determine the job status by polling the entity.", cmd.getActionType(), cmd.getCommandId()); org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus jobStatus = pollEntity(cmd); handlePolledJobStatus(cmd, jobStatus); if (jobStatus != null) { return jobStatus; } org.ovirt.engine.core.bll.storage.EntityPollingCommand entityPollingCommand = ((org.ovirt.engine.core.bll.storage.EntityPollingCommand) (cmd)); if (!(cmd.getParameters().getJobStarted())) { entityPollingCommand.attemptToFenceJob(); } return null; } if (cmd.failJobWithUndeterminedStatus()) { log.error(("Command {} id: '{}': failed to determine the actual job status, considering as failed as per" + " the command implementation"), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } if (jobsReportedByHost) { log.error(("Command {} id: '{}': entity polling isn't supported and the job isn't reported by the host," + "assuming it failed so that the command execution will end."), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } log.error("Command {} id: '{}': failed to determine the actual job status, will retry to poll the job soon", cmd.getActionType(), cmd.getCommandId()); return null; }
private void handlePolledJobInfo(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, org.ovirt.engine.core.common.businessentities.HostJobInfo jobInfo) { if (((jobInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.running)) && (!(cmd.getParameters().getJobStarted()))) { cmd.getParameters().setJobStarted(true); cmd.persistCommand(cmd.getParameters().getParentCommand(), true); } if ((jobInfo.getStatus()) != (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed)) { return; } if ((jobInfo.getError()) != null) { jobInfo.setStatus(cmd.handleJobError(jobInfo.getError().getCode())); if ((jobInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.done)) { jobInfo.setProgress(null); } } }	private void handlePolledJobInfo(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, org.ovirt.engine.core.common.businessentities.HostJobInfo jobInfo) { handlePolledJobStatus(cmd, jobInfo.getStatus()); if ((jobInfo.getStatus()) != (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed)) { return; } if ((jobInfo.getError()) != null) { jobInfo.setStatus(cmd.handleJobError(jobInfo.getError().getCode())); if ((jobInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.done)) { jobInfo.setProgress(null); } } }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn setVolumeGeneration(java.lang.String jobId, java.util.Map<?, ?> volumeInfo);	org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn updateVolume(java.lang.String jobId, java.util.Map<?, ?> volumeInfo, java.util.Map<?, ?> volumeAttributes);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn setVolumeGeneration(java.lang.String jobId, java.util.Map<?, ?> volumeInfo) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.set_volume_generation").withParameter("job_id", jobId).withParameter("vol_info", volumeInfo).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn updateVolume(java.lang.String jobId, java.util.Map<?, ?> volumeInfo, java.util.Map<?, ?> volumeAttributes) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.update_volume").withParameter("job_id", jobId).withParameter("vol_info", volumeInfo).withParameter("vol_attr", volumeAttributes).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.CommandBase<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info("Command {} id: '{}': attempting to determine the job status by polling the entity.", cmd.getActionType(), cmd.getCommandId()); return pollEntity(cmd); } if (jobsReportedByHost) { log.error(("Command {} id: '{}': entity polling isn't supported and the job isn't reported by the host," + "assuming it failed so that the command execution will end."), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } if (cmd.failJobWithUndeterminedStatus()) { log.error(("Command {} id: '{}': failed to determine the actual job status, considering as failed as per" + " the command implementation"), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } }	private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info("Command {} id: '{}': attempting to determine the job status by polling the entity.", cmd.getActionType(), cmd.getCommandId()); return pollEntity(cmd); } if (cmd.failJobWithUndeterminedStatus()) { log.error(("Command {} id: '{}': failed to determine the actual job status, considering as failed as per" + " the command implementation"), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } if (jobsReportedByHost) { log.error(("Command {} id: '{}': entity polling isn't supported and the job isn't reported by the host," + "assuming it failed so that the command execution will end."), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } log.error("Command {} id: '{}': failed to determine the actual job status, will retry to poll the job soon", cmd.getActionType(), cmd.getCommandId()); return null; }
@java.lang.Override public boolean isJobFencingSupported() { return isDstVdsmImage(); }	@java.lang.Override public org.ovirt.engine.core.common.job.StepEnum getCommandStep() { return org.ovirt.engine.core.common.job.StepEnum.COPY_VOLUME; }
@java.lang.Override public void attemptToFenceJob() { if (isDstVdsmImage()) { org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo info = ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo())); org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters p = new org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters(info); p.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getActionType()); p.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters()); p.setStoragePoolId(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getStoragePoolId()); runInternalActionWithTasksContext(VdcActionType.FenceVolumeJob, p); } }	@java.lang.Override public void attemptToFenceJob() { if (isDstVdsmImage()) { log.info("Command {} id: '{}': attempting to fence job {}", org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getActionType(), org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getCommandId(), org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getJobId()); org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo info = ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo())); org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters p = new org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters(info); p.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getActionType()); p.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters()); p.setStoragePoolId(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getStoragePoolId()); p.setEndProcedure(EndProcedure.COMMAND_MANAGED); runInternalActionWithTasksContext(VdcActionType.FenceVolumeJob, p); } }
protected void initEffectiveCompatibilityVersion() { org.ovirt.engine.core.compat.Version effectiveCompatibilityVersion = (org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils.getInstance().getSupportedClusterLevels().contains(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVmStaticData().getCustomCompatibilityVersion())) ? org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVmStaticData(), this::getCluster) : org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(this::getCluster); setEffectiveCompatibilityVersion(effectiveCompatibilityVersion); }	protected void initEffectiveCompatibilityVersion() { setEffectiveCompatibilityVersion(org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVmStaticData(), this::getCluster)); }
public void checkInvalidAddress() { assertFalse(underTest.test(generateVdsNetworkInterface(org.ovirt.engine.core.utils.network.predicate.AbstractVdsNetworkInterfacePredicateTest.INVALID))); }	@org.junit.Test public void checkInvalidAddress() { assertFalse(underTest.test(generateVdsNetworkInterface(org.ovirt.engine.core.utils.network.predicate.AbstractVdsNetworkInterfacePredicateTest.INVALID))); }
@java.lang.Override protected void executeVdsBrokerCommand() { log.info("-- executeVdsBrokerCommand: calling 'copyVolumeData'"); boolean b = true; if (b) { status = org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getBroker().copyData(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getJobId().toString(), buildLocationInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getSrcInfo()), buildLocationInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getDstInfo())); } else { status = createFailStatus(); } org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.proceedProxyReturnValue(); }	@java.lang.Override protected void executeVdsBrokerCommand() { log.info("-- executeVdsBrokerCommand: calling 'copyVolumeData'"); status = org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getBroker().copyData(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getJobId().toString(), buildLocationInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getSrcInfo()), buildLocationInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getDstInfo())); org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.proceedProxyReturnValue(); }
protected boolean validateLeaseStorageDomain(org.ovirt.engine.core.compat.Guid leaseStorageDomainId) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.get(leaseStorageDomainId); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); if (!(validate(validator.isDomainExistAndActive()))) { return false; } if (getStoragePoolId().equals(domain.getStoragePoolId())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_LEASE_STORAGE_IS_NOT_A_PART_OF_POOL); } return true; }	protected boolean validateLeaseStorageDomain(org.ovirt.engine.core.compat.Guid leaseStorageDomainId) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.getForStoragePool(leaseStorageDomainId, getStoragePoolId()); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); return (validate(validator.isDomainExistAndActive())) && (validate(validator.isDataDomain())); }
@java.lang.Override protected void executeVmCommand() { if (shouldAddLease(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm())) { if (org.ovirt.engine.core.common.FeatureSupported.isVmLeasesSupported(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getEffectiveCompatibilityVersion())) { if (validateLeaseStorageDomain(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getLeaseStorageDomainId())) { if (!(addVmLease(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getId()))) { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().setLeaseStorageDomainId(null); } } else { auditLogDirector.log(this, AuditLogType.CANNOT_IMPORT_VM_WITH_LEASE_STORAGE_DOMAIN_ERROR); } } else { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().setLeaseStorageDomainId(null); auditLogDirector.log(this, AuditLogType.CANNOT_IMPORT_VM_WITH_LEASE_COMPAT_VERSION); } } super.executeVmCommand(); }	@java.lang.Override protected void executeVmCommand() { if (shouldAddLease(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getStaticData())) { if (org.ovirt.engine.core.common.FeatureSupported.isVmLeasesSupported(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getEffectiveCompatibilityVersion())) { if (validateLeaseStorageDomain(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getLeaseStorageDomainId())) { if (!(addVmLease(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getId()))) { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().setLeaseStorageDomainId(null); } } else { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().setLeaseStorageDomainId(null); auditLogDirector.log(this, AuditLogType.CANNOT_IMPORT_VM_WITH_LEASE_STORAGE_DOMAIN); } } else { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().setLeaseStorageDomainId(null); auditLogDirector.log(this, AuditLogType.CANNOT_IMPORT_VM_WITH_LEASE_COMPAT_VERSION); } } super.executeVmCommand(); }
public java.lang.String getConfigurationValue(java.lang.String miimonValue) { java.lang.String extraOption = ""; if (value.equals(org.ovirt.engine.core.common.businessentities.network.BondMode.BOND4.value)) { extraOption = " xmit_hash_policy=2"; } return ((((org.ovirt.engine.core.common.businessentities.network.BondMode.MODE) + (value)) + " miimon=") + "100") + extraOption; }	public java.lang.String getConfigurationValue(java.lang.String miimonValue) { java.lang.String extraOption; if (value.equals(org.ovirt.engine.core.common.businessentities.network.BondMode.BOND4.value)) { extraOption = " xmit_hash_policy=" + (org.ovirt.engine.core.common.businessentities.network.BondMode.BOND_XMIT_POLICY_LAYER23); } else { extraOption = ""; } return ((((org.ovirt.engine.core.common.businessentities.network.BondMode.MODE) + (value)) + " miimon=") + miimonValue) + extraOption; }
void initComboBox() { keyListBoxEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelTypeAheadListBoxEditor(new org.ovirt.engine.ui.common.widget.editor.ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo>() { @java.lang.Override public java.lang.String getReplacementStringNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo option) { return option.getKey(); } @java.lang.Override public java.lang.String getDisplayStringNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo data) { return templates.typeAheadNameDescription((data == null ? org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.empty() : data.getKey()), org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.empty()).asString(); } }); }	void initComboBox() { keyListBoxEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelTypeAheadChangeableListBoxEditor(new org.ovirt.engine.ui.common.widget.editor.ListModelTypeAheadChangeableListBoxEditor.NullSafeSuggestBoxRenderer() { @java.lang.Override public java.lang.String getDisplayStringNullSafe(java.lang.String data) { return typeAheadNameTemplateNullSafe(data); } }); }
@java.lang.Override public java.lang.String getDisplayStringNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo data) { return templates.typeAheadNameDescription((data == null ? org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.empty() : data.getKey()), org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.empty()).asString(); }	@java.lang.Override public java.lang.String getDisplayStringNullSafe(java.lang.String data) { return typeAheadNameTemplateNullSafe(data); }
private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { log.info("Finalizing successful transfer for {}", getTransferDescription()); if (stopImageTransferSession(context.entity)) { org.ovirt.engine.core.compat.Guid transferingVdsId = context.entity.getVdsId(); if (verifyImage(transferingVdsId)) { setVolumeLegalityInStorage(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.LEGAL_IMAGE); org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImageId(), false); if (qemuImageInfo != null) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().setQcowCompat(qemuImageInfo.getQcowCompat()); imageDao.update(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage()); } org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.unLockImage(); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); } else { setImageStatus(ImageStatus.ILLEGAL); updateEntityPhase(ImageTransferPhase.FINALIZING_FAILURE); } tearDownImage(context.entity.getVdsId()); } }	private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { log.info("Finalizing successful transfer for {}", getTransferDescription()); if (stopImageTransferSession(context.entity)) { org.ovirt.engine.core.compat.Guid transferingVdsId = context.entity.getVdsId(); if (verifyImage(transferingVdsId)) { setVolumeLegalityInStorage(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.LEGAL_IMAGE); updateQcowCompat(); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.unLockImage(); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); } else { setImageStatus(ImageStatus.ILLEGAL); updateEntityPhase(ImageTransferPhase.FINALIZING_FAILURE); } tearDownImage(context.entity.getVdsId()); } }
@java.lang.Override protected org.ovirt.engine.ui.common.widget.AbstractUiCommandButton createCommandButton(java.lang.String label, java.lang.String uniqueId) { if (VmBasedWidgetSwitchModeCommand.NAME.equals(uniqueId)) { org.ovirt.engine.ui.common.widget.LeftAlignedUiCommandButton leftAlignedUiCommandButton = new org.ovirt.engine.ui.common.widget.LeftAlignedUiCommandButton(label); return leftAlignedUiCommandButton; } return super.createCommandButton(label, uniqueId); }	@java.lang.Override protected org.ovirt.engine.ui.common.widget.UiCommandButton createCommandButton(java.lang.String label, java.lang.String uniqueId) { if (VmBasedWidgetSwitchModeCommand.NAME.equals(uniqueId)) { org.ovirt.engine.ui.common.widget.LeftAlignedUiCommandButton leftAlignedUiCommandButton = new org.ovirt.engine.ui.common.widget.LeftAlignedUiCommandButton(label); return leftAlignedUiCommandButton; } return super.createCommandButton(label, uniqueId); }
@javax.ws.rs.Path("{action: (activate|migrate|stopmigrate)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:activate|migrate|stopmigrate)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (undelete)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:undelete)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (getprofilestatistics|rebalance|resetalloptions|resetoption|setoption|start|startprofile|stop|stopprofile|stoprebalance)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:getprofilestatistics|rebalance|resetalloptions|resetoption|setoption|start|startprofile|stop|stopprofile|stoprebalance)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (activate|deactivate|export|move)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:activate|deactivate|export|move)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (end)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:end)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (activate|approve|commitnetconfig|deactivate|enrollcertificate|fence|forceselectspm|install|iscsidiscover|iscsilogin|refresh|setupnetworks|unregisteredstoragedomainsdiscover|upgrade)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:activate|approve|commitnetconfig|deactivate|enrollcertificate|fence|forceselectspm|install|iscsidiscover|iscsilogin|refresh|setupnetworks|unregisteredstoragedomainsdiscover|upgrade)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@java.lang.Override public javax.ws.rs.core.Response getActionStatus(java.lang.String action, java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendActionResource(action, id)).get(); }	@java.lang.Override public org.ovirt.engine.api.resource.ActionResource getActionResource(java.lang.String action, java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendActionResource(action, id)); }
@javax.ws.rs.Path("{action: (disable|enable|resolve)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:disable|enable|resolve)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
public javax.ws.rs.core.Response getActionStatus(java.lang.String action, java.lang.String oid) { java.net.URI uri = java.net.URI.create(org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(newModel(id)).getHref()); javax.ws.rs.core.Response.Status status = Response.Status.MOVED_PERMANENTLY; return javax.ws.rs.core.Response.status(status).location(uri).build(); }	public org.ovirt.engine.api.resource.ActionResource getActionResource(java.lang.String action, java.lang.String oid) { return new org.ovirt.engine.api.resource.ActionResource() { @java.lang.Override public javax.ws.rs.core.Response get() { java.net.URI uri = java.net.URI.create(org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(newModel(id)).getHref()); javax.ws.rs.core.Response.Status status = Response.Status.MOVED_PERMANENTLY; return javax.ws.rs.core.Response.status(status).location(uri).build(); } @java.lang.Override public org.ovirt.engine.api.model.Action getAction() { return null; } }; }
public static java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> getSubServices(java.lang.Class<?> resource) { java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> resources = new java.util.ArrayList<>(); for (java.lang.reflect.Method method : org.ovirt.engine.api.rsdl.ServiceTree.getMethods(resource, org.ovirt.engine.api.rsdl.ServiceTree.SUB_RESOURCES)) { java.lang.String name = method.getName(); if ((!("getActionStatus".equals(name))) && (!("getCreationResource".equals(name)))) { java.lang.String path = method.getAnnotation(javax.ws.rs.Path.class).value(); java.lang.Class<?> type = method.getReturnType(); resources.add(org.ovirt.engine.api.rsdl.ServiceTree.buildNode(type, path)); } } return resources; }	public static java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> getSubServices(java.lang.Class<?> resource) { java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> resources = new java.util.ArrayList<>(); for (java.lang.reflect.Method method : org.ovirt.engine.api.rsdl.ServiceTree.getMethods(resource, org.ovirt.engine.api.rsdl.ServiceTree.SUB_RESOURCES)) { javax.ws.rs.Path path = method.getAnnotation(javax.ws.rs.Path.class); if ((!(method.getReturnType().equals(org.ovirt.engine.api.resource.ActionResource.class))) && (!(method.getReturnType().equals(org.ovirt.engine.api.resource.CreationResource.class)))) { resources.add(org.ovirt.engine.api.rsdl.ServiceTree.buildNode(method.getReturnType(), path.value())); } } return resources; }
@javax.ws.rs.Path("{action: (isattached|refreshluns)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:isattached|refreshluns)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (export)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:export)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (allocatevm)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:allocatevm)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (attach|detach|updatevirtualfunctionsconfiguration)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:attach|detach|updatevirtualfunctionsconfiguration)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (restore)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:restore)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (copy)}/{oid}") public javax.ws.rs.core.Response getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:copy)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (copy|export)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:copy|export)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (move)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:move)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (cancelmigration|clone|commit_snapshot|detach|export|freezefilesystems|logon|maintenance|migrate|move|preview_snapshot|reboot|reordermacaddresses|shutdown|start|stop|suspend|thawfilesystems|ticket|undo_snapshot)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:cancelmigration|clone|commit_snapshot|detach|export|freezefilesystems|logon|maintenance|migrate|move|preview_snapshot|reboot|reordermacaddresses|shutdown|start|stop|suspend|thawfilesystems|ticket|undo_snapshot)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (proxyticket)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:proxyticket)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (replace)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:replace)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (copy|export|move)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:copy|export|move)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (reloadconfigurations)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:reloadconfigurations)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (resetemulatedmachine)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:resetemulatedmachine)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (importcertificates|testconnectivity)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return getDelegate().getActionStatus(action, oid); }	@javax.ws.rs.Path("{action: (?:importcertificates|testconnectivity)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@javax.ws.rs.Path("{action: (clear|end)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }	@javax.ws.rs.Path("{action: (?:clear|end)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
public void addNetworkFiltersToNic(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VmNic vmNic) { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = fetchVnicProfileNetworkFilter(vmNic); if (networkFilter != null) { final java.lang.String networkFilterName = networkFilter.getName(); struct.put(VdsProperties.NW_FILTER, networkFilterName); java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parameters = new java.util.LinkedList<>(); final java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter> vmNicFilterParameters = vmNicFilterParameterDao.getAllForVmNic(vmNic.getId()); vmNicFilterParameters.forEach(( nicFilterParameter) -> { Map<java.lang.String, java.lang.Object> parameter = new org.ovirt.engine.core.vdsbroker.builder.vminfo.HashMap<>(); parameter.put("name", nicFilterParameter.getName()); parameter.put("value", nicFilterParameter.getValue()); parameters.add(parameter); }); struct.put(VdsProperties.NW_FILTER_PARAMETERS, parameters); } }	public void addNetworkFiltersToNic(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VmNic vmNic) { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = fetchVnicProfileNetworkFilter(vmNic); if (networkFilter != null) { final java.lang.String networkFilterName = networkFilter.getName(); struct.put(VdsProperties.NW_FILTER, networkFilterName); final java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter> vmNicFilterParameters = vmNicFilterParameterDao.getAllForVmNic(vmNic.getId()); struct.put(VdsProperties.NETWORK_FILTER_PARAMETERS, mapVmNicFilterParameter(vmNicFilterParameters)); } }
@java.lang.Override protected void init() { super.init(); setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getContainerId()); setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getStoragePoolId()); imageToDestinationDomainMap = org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getImageToDestinationDomainMap(); if (((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm()) != null) && ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap()) != null)) { imageList = new java.util.ArrayList(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { imageList.add(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))); } } } ensureDomainMap(imageList, org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getDestDomainId()); org.ovirt.engine.core.bll.VmHandler.updateMaxMemorySize(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getEffectiveCompatibilityVersion()); }	@java.lang.Override protected void init() { super.init(); setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getContainerId()); setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getStoragePoolId()); imageToDestinationDomainMap = org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getImageToDestinationDomainMap(); if (((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm()) != null) && ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap()) != null)) { imageList = new java.util.ArrayList(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { imageList.add(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))); } } } ensureDomainMap(imageList, org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getDestDomainId()); }
public static org.ovirt.vdsmfake.rpc.Api getInstance() { return org.ovirt.vdsmfake.rpc.Api.singleton; }	public static org.ovirt.vdsmfake.rpc.Api getInstance() { if ((org.ovirt.vdsmfake.rpc.Api.instance) == null) { synchronized(org.ovirt.vdsmfake.rpc.Api.class) { if ((org.ovirt.vdsmfake.rpc.Api.instance) == null) { org.ovirt.vdsmfake.rpc.Api.instance = new org.ovirt.vdsmfake.rpc.Api(); } } } return org.ovirt.vdsmfake.rpc.Api.instance; }
public java.util.Map<java.lang.String, java.util.Map> hostDevListByCaps() { java.util.Map resultMap = getDoneStatus(); java.util.Map<java.lang.String, java.util.Map> infoMap = map(); try { infoMap.put("computer", getCapability()); infoMap.put("pci_0000_00_1b_0", getHardware(0)); infoMap.put("pci_0000_00_1b_1", getHardware(1)); infoMap.put("pci_0000_00_1b_2", getHardware(2)); infoMap.put("pci_0000_00_1b_3", getHardware(3)); infoMap.put("pci_0000_00_1b_4", getHardware(4)); infoMap.put("pci_0000_00_1b_5", getHardware(5)); infoMap.put("pci_0000_00_1b_6", getHardware(6)); infoMap.put("pci_0000_00_1b_7", getHardware(7)); infoMap.put("pci_0000_00_1b_8", getHardware(8)); infoMap.put("pci_0000_00_1b_9", getHardware(9)); infoMap.put("pci_0000_00_1b_10", getHardware(10)); infoMap.put("pci_0000_00_1b_11", getHardware(11)); infoMap.put("pci_0000_00_1f_12", getHardware(12)); resultMap.put("info", infoMap); } catch (java.lang.NullPointerException e) { log.error("getHostDevListByCaps failed due to {}", e); throw error(e); } finally { return resultMap; } }	public java.util.Map<java.lang.String, java.util.Map> hostDevListByCaps() { java.util.Map resultMap = getDoneStatus(); java.util.Map<java.lang.String, java.util.Map> infoMap = map(); infoMap.put("computer", getCapability()); java.util.stream.IntStream.range(0, 12).forEach(( i) -> { infoMap.put(("pci_0000_00_1b_" + i), getHardware(i)); }); resultMap.put("info", infoMap); return resultMap; }
public void sparsifyNotSupportedWhenWipeAfterDeleteIsOn() { createStorageDomainForDisk(StorageType.ISCSI); disk.setWipeAfterDelete(true); assertThat(validator.isSparsifySupported(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_SPARSIFY_NOT_SUPPORTED_BY_UNDERLYING_STORAGE_WHEN_WAD_IS_ENABLED)); }	@org.junit.Test public void sparsifyNotSupportedWhenWipeAfterDeleteIsOn() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomainForDisk(StorageType.ISCSI); disk.setWipeAfterDelete(true); storageDomain.setSupportsDiscardZeroesData(false); assertThat(validator.isSparsifySupported(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_SPARSIFY_NOT_SUPPORTED_BY_UNDERLYING_STORAGE_WHEN_WAD_IS_ENABLED)); }
private void setupParameters() { org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setImageGroupID(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setDestinationImageId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImageGroupID())); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setVmSnapshotId(org.ovirt.engine.core.compat.Guid.newGuid()); }	private void setupParameters() { org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setImageGroupID(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setDestinationImageId(org.ovirt.engine.core.compat.Guid.newGuid()); if (org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImportAsTemplate()) { org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setVmSnapshotId(org.ovirt.engine.core.compat.Guid.newGuid()); } org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImageGroupID())); }
private void writeCdRom(org.ovirt.engine.core.utils.ovf.xml.XmlTextWriter writer, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices, org.ovirt.engine.core.common.businessentities.VM vm) { if (devices.isEmpty()) { return; } org.ovirt.engine.core.common.businessentities.VmDevice device = devices.get(0); writer.writeStartElement("disk"); writer.writeAttributeString("type", "file"); writer.writeAttributeString("device", "cdrom"); writer.writeAttributeString("snapshot", "no"); writer.writeStartElement("source"); writer.writeAttributeString("file", "optional"); writer.writeAttributeString("startupPolicy", "optional"); writer.writeEndElement(); java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getCompatibilityVersion(), org.ovirt.engine.core.common.businessentities.ChipsetType.fromMachineType(vm.getEmulatedMachine())); writer.writeStartElement("target"); writer.writeAttributeString("dev", "hdc"); writer.writeAttributeString("bus", cdInterface); writer.writeEndElement(); writer.writeElement("readonly", null); writeAliasAndAddress(writer, device); writer.writeEndElement(); }	private void writeCdRom(org.ovirt.engine.core.utils.ovf.xml.XmlTextWriter writer, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices, org.ovirt.engine.core.common.businessentities.VM vm) { if (devices.isEmpty()) { return; } org.ovirt.engine.core.common.businessentities.VmDevice device = devices.get(0); writer.writeStartElement("disk"); writer.writeAttributeString("type", "file"); writer.writeAttributeString("device", "cdrom"); writer.writeAttributeString("snapshot", "no"); writer.writeStartElement("source"); writer.writeAttributeString("file", ""); writer.writeAttributeString("startupPolicy", "optional"); writer.writeEndElement(); java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getCompatibilityVersion(), org.ovirt.engine.core.common.businessentities.ChipsetType.fromMachineType(vm.getEmulatedMachine())); writer.writeStartElement("target"); writer.writeAttributeString("dev", "hdc"); writer.writeAttributeString("bus", cdInterface); writer.writeEndElement(); writer.writeElement("readonly", null); writeAliasAndAddress(writer, device); writer.writeEndElement(); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } macPool = getMacPool(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> domainsMap = new java.util.HashMap<>(); if (!(validateBeforeCloneVm(domainsMap))) { return false; } org.ovirt.engine.core.bll.VmHandler.updateMaxMemorySize(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getEffectiveCompatibilityVersion()); if (org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().isImportAsNewEntity()) { initImportClonedVm(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getInterfaces().size()) > (macPool.getAvailableMacsCount())) { return failValidation(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateBallonDevice())) { return false; } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateSoundDevice())) { return false; } if (!(validate(org.ovirt.engine.core.bll.VmHandler.validateMaxMemorySize(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getEffectiveCompatibilityVersion())))) { return false; } return validateAfterCloneVm(domainsMap); }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } macPool = getMacPool(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> domainsMap = new java.util.HashMap<>(); if (!(validateBeforeCloneVm(domainsMap))) { return false; } org.ovirt.engine.core.bll.VmHandler.updateMaxMemorySize(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getEffectiveCompatibilityVersion()); if (org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().isImportAsNewEntity()) { initImportClonedVm(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getInterfaces().size()) > (macPool.getAvailableMacsCount())) { return failValidation(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateBallonDevice())) { return false; } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateSoundDevice())) { return false; } return validateAfterCloneVm(domainsMap); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.VmDevice graphicsDev = getParameters().getDev(); vmDeviceDao.remove(graphicsDev.getId()); if (noGraphicsDevicesLeft()) { getVmDeviceUtils().removeVideoDevices(getParameters().getDev().getVmId()); setVmToHeadlessMode(); setTemplateToHeadlessMode(); } setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.VmDevice graphicsDev = getParameters().getDev(); vmDeviceDao.remove(graphicsDev.getId()); if (noGraphicsDevicesLeft()) { vmDeviceUtils.removeVideoDevices(getVmBaseId()); if (!(setVmToHeadlessMode())) { setTemplateToHeadlessMode(); } } setSucceeded(true); }
private void setVmToHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(getParameters().getDev().getVmId()); if ((vmStatic != null) && ((vmStatic.getDefaultDisplayType()) != (org.ovirt.engine.core.common.businessentities.DisplayType.none))) { vmStatic.setDefaultDisplayType(DisplayType.none); vmStatic.setSingleQxlPci(false); vmStaticDao.update(vmStatic); } }	private boolean setVmToHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(getVmBaseId()); if ((vmStatic != null) && ((vmStatic.getDefaultDisplayType()) != (org.ovirt.engine.core.common.businessentities.DisplayType.none))) { vmStatic.setDefaultDisplayType(DisplayType.none); vmStatic.setSingleQxlPci(false); resourceManager.getVmManager(getVmBaseId()).update(vmStatic); return true; } return false; }
private boolean noGraphicsDevicesLeft() { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> devices = runInternalQuery(VdcQueryType.GetGraphicsDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(getParameters().getDev().getVmId())).getReturnValue(); return devices.isEmpty(); }	private boolean noGraphicsDevicesLeft() { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> devices = runInternalQuery(VdcQueryType.GetGraphicsDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(getVmBaseId())).getReturnValue(); return devices.isEmpty(); }
private void setTemplateToNonHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = vmTemplateDao.get(getParameters().getDev().getVmId()); if ((vmTemplate != null) && ((vmTemplate.getDefaultDisplayType()) == (org.ovirt.engine.core.common.businessentities.DisplayType.none))) { vmTemplate.setDefaultDisplayType(DisplayType.qxl); vmTemplateDao.update(vmTemplate); } if (getVmDeviceUtils().getVideoDevices(getParameters().getDev().getVmId()).isEmpty()) { getVmDeviceUtils().addVideoDevices(vmTemplate, getVmDeviceUtils().getNeededNumberOfVideoDevices(vmTemplate)); } }	private void setTemplateToNonHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = vmTemplateDao.get(getVmBaseId()); if (vmTemplate == null) { return; } if ((vmTemplate.getDefaultDisplayType()) == (org.ovirt.engine.core.common.businessentities.DisplayType.none)) { vmTemplate.setDefaultDisplayType(DisplayType.qxl); vmTemplateDao.update(vmTemplate); } vmDeviceUtils.addVideoDevicesOnlyIfNoVideoDeviceExists(vmTemplate); }
private void setVmToNonHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(getParameters().getDev().getVmId()); if ((vmStatic != null) && ((vmStatic.getDefaultDisplayType()) == (org.ovirt.engine.core.common.businessentities.DisplayType.none))) { vmStatic.setDefaultDisplayType(DisplayType.qxl); vmStaticDao.update(vmStatic); } if (getVmDeviceUtils().getVideoDevices(getParameters().getDev().getVmId()).isEmpty()) { getVmDeviceUtils().addVideoDevices(vmStatic, getVmDeviceUtils().getNeededNumberOfVideoDevices(vmStatic)); } }	private void setVmToNonHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(getVmBaseId()); if (vmStatic == null) { return; } if ((vmStatic.getDefaultDisplayType()) == (org.ovirt.engine.core.common.businessentities.DisplayType.none)) { vmStatic.setDefaultDisplayType(DisplayType.qxl); resourceManager.getVmManager(getVmBaseId()).update(vmStatic); } vmDeviceUtils.addVideoDevicesOnlyIfNoVideoDeviceExists(vmStatic); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } org.ovirt.engine.core.common.queries.VdcQueryReturnValue res = runInternalQuery(VdcQueryType.GetGraphicsDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(getParameters().getDev().getVmId())); if (res.getSucceeded()) { prevDevices = res.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.GraphicsDevice device : prevDevices) { if (device.getGraphicsType().equals(getParameters().getDev().getGraphicsType())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_ONLY_ONE_DEVICE_WITH_THIS_GRAPHICS_ALLOWED); } } return true; } return false; }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } org.ovirt.engine.core.common.queries.VdcQueryReturnValue res = runInternalQuery(VdcQueryType.GetGraphicsDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(getVmBaseId())); if (res.getSucceeded()) { prevDevices = res.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.GraphicsDevice device : prevDevices) { if (device.getGraphicsType().equals(getParameters().getDev().getGraphicsType())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_ONLY_ONE_DEVICE_WITH_THIS_GRAPHICS_ALLOWED); } } return true; } return false; }
public int getNeededNumberOfVideoDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { int maxMonitorsSpice = (vmBase.getSingleQxlPci()) ? org.ovirt.engine.core.bll.utils.VmDeviceUtils.SINGLE_QXL_MONITORS : vmBase.getNumOfMonitors(); int maxMonitorsVnc = java.lang.Math.max(org.ovirt.engine.core.bll.utils.VmDeviceUtils.VNC_MIN_MONITORS, vmBase.getNumOfMonitors()); return java.lang.Math.min(maxMonitorsSpice, maxMonitorsVnc); }	private int getNeededNumberOfVideoDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { int maxMonitorsSpice = (vmBase.getSingleQxlPci()) ? org.ovirt.engine.core.bll.utils.VmDeviceUtils.SINGLE_QXL_MONITORS : vmBase.getNumOfMonitors(); int maxMonitorsVnc = java.lang.Math.max(org.ovirt.engine.core.bll.utils.VmDeviceUtils.VNC_MIN_MONITORS, vmBase.getNumOfMonitors()); return java.lang.Math.min(maxMonitorsSpice, maxMonitorsVnc); }
private void setTemplateToHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = vmTemplateDao.get(getParameters().getDev().getVmId()); if ((vmTemplate != null) && ((vmTemplate.getDefaultDisplayType()) != (org.ovirt.engine.core.common.businessentities.DisplayType.none))) { vmTemplate.setDefaultDisplayType(DisplayType.none); vmTemplate.setSingleQxlPci(false); vmTemplateDao.update(vmTemplate); } }	private void setTemplateToHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = vmTemplateDao.get(getVmBaseId()); if ((vmTemplate != null) && ((vmTemplate.getDefaultDisplayType()) != (org.ovirt.engine.core.common.businessentities.DisplayType.none))) { vmTemplate.setDefaultDisplayType(DisplayType.none); vmTemplate.setSingleQxlPci(false); vmTemplateDao.update(vmTemplate); } }
public java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> getPrevDevices() { return prevDevices; }	protected java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> getPrevDevices() { return prevDevices; }
private void updateQcowCompat() { if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getVolumeFormat().equals(VolumeFormat.COW)) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().setQcowCompat(QcowCompat.QCOW2_V2); if (org.ovirt.engine.core.common.FeatureSupported.qcowCompatSupported(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getCompatibilityVersion())) { org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImageId(), false); if (qemuImageInfo != null) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().setQcowCompat(qemuImageInfo.getQcowCompat()); } imageDao.update(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage()); } } }	private void updateQcowCompat() { if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getVolumeFormat().equals(VolumeFormat.COW)) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().setQcowCompat(QcowCompat.QCOW2_V2); if (org.ovirt.engine.core.common.FeatureSupported.qcowCompatSupported(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getCompatibilityVersion())) { org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImageId(), false); if (qemuImageInfo != null) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().setQcowCompat(qemuImageInfo.getQcowCompat()); } } imageDao.update(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage()); } }
private void completeGenerationInfo() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStoragePoolId(), info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId()); info.setGeneration(image.getImage().getGeneration()); org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.persistCommandIfNeeded(); }	private void completeGenerationInfo() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStoragePoolId(), info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId()); info.setBaseImageGeneration(image.getImage().getGeneration()); org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.persistCommandIfNeeded(); }
public static java.util.Map<java.lang.String, java.lang.Object> prepareSubchainInfoForVdsCommand(org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo) { java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(); map.put("sd_id", subchainInfo.getStorageDomainId().toString()); map.put("img_id", subchainInfo.getImageGroupId().toString()); map.put("base_id", subchainInfo.getBaseImageId().toString()); map.put("top_id", subchainInfo.getTopImageId().toString()); if ((subchainInfo.getGeneration()) != null) { map.put("base_generation", subchainInfo.getGeneration()); } return map; }	public static java.util.Map<java.lang.String, java.lang.Object> prepareSubchainInfoForVdsCommand(org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo) { java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(); map.put("sd_id", subchainInfo.getStorageDomainId().toString()); map.put("img_id", subchainInfo.getImageGroupId().toString()); map.put("base_id", subchainInfo.getBaseImageId().toString()); map.put("top_id", subchainInfo.getTopImageId().toString()); if ((subchainInfo.getBaseImageGeneration()) != null) { map.put("base_generation", subchainInfo.getBaseImageGeneration()); } return map; }
public java.lang.Integer getGeneration() { return generation; }	public java.lang.Integer getBaseImageGeneration() { return baseImageGeneration; }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId).append("imageGroupId", imageGroupId).append("baseImageId", baseImageId).append("topImageId", topImageId).append("generation", generation).build(); }	@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId).append("imageGroupId", imageGroupId).append("baseImageId", baseImageId).append("topImageId", topImageId).append("generation", baseImageGeneration).build(); }
public void setGeneration(java.lang.Integer generation) { this.generation = generation; }	public void setBaseImageGeneration(java.lang.Integer generation) { this.baseImageGeneration = generation; }
@java.lang.Override public HostJobInfo.HostJobStatus poll() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); return poller.pollImage(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getStoragePoolId(), info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId(), info.getGeneration(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getCommandId(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getActionType()); }	@java.lang.Override public HostJobInfo.HostJobStatus poll() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); return poller.pollImage(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStoragePoolId(), info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId(), info.getBaseImageGeneration(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getCommandId(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getActionType()); }
@java.lang.Override public void attemptToFenceJob() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo locationInfo = new org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo(info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId(), info.getGeneration()); org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters parameters = new org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters(locationInfo); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters()); parameters.setStoragePoolId(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStoragePoolId()); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); runInternalActionWithTasksContext(VdcActionType.FenceVolumeJob, parameters); }	@java.lang.Override public void attemptToFenceJob() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo locationInfo = new org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo(info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId(), info.getBaseImageGeneration()); org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters parameters = new org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters(locationInfo); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters()); parameters.setStoragePoolId(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStoragePoolId()); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); runInternalActionWithTasksContext(VdcActionType.FenceVolumeJob, parameters); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId).append("imageGroupId", imageGroupId).append("baseImageId", baseImageId).append("topImageId", topImageId).append("generation", baseImageGeneration).build(); }	@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId).append("imageGroupId", imageGroupId).append("baseImageId", baseImageId).append("topImageId", topImageId).append("baseImageGeneration", baseImageGeneration).build(); }
private void setNextRunMessages() { com.google.gwt.safehtml.shared.SafeHtmlBuilder changedFieldsBuilder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); java.lang.String translated = org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.nextRunMessages.minAllocatedMem(); try { translated = org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.nextRunMessages.getString("minAllocatedMem"); } catch (java.util.MissingResourceException e) { } java.lang.String escapedField = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(translated); changedFieldsBuilder.append(bulletedItem(escapedField)); }	private java.lang.String getNextRunMessage(java.lang.String field) { try { return org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.nextRunMessages.getString(field); } catch (java.util.MissingResourceException e) { } return field; }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel object) { driver.edit(object); setNextRunMessages(); if (object.isVmUnpinned()) { setVisibilityToVmUnpinningWarrningPanel(true); } if ((object.getChangedFields().size()) > 0) { setVisibilityToChangedFieldsExpander(true); com.google.gwt.safehtml.shared.SafeHtmlBuilder changedFieldsBuilder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); for (java.lang.String field : object.getChangedFields()) { java.lang.String escapedField = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(field); changedFieldsBuilder.append(bulletedItem(escapedField)); } changedFields.setHTML(changedFieldsBuilder.toSafeHtml()); } setVisibilityToHotChanges(object); }	@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel object) { driver.edit(object); if (object.isVmUnpinned()) { setVisibilityToVmUnpinningWarrningPanel(true); } if ((object.getChangedFields().size()) > 0) { setVisibilityToChangedFieldsExpander(true); com.google.gwt.safehtml.shared.SafeHtmlBuilder changedFieldsBuilder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); for (java.lang.String field : object.getChangedFields()) { java.lang.String msg = getNextRunMessage(field); java.lang.String escapedField = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(msg); changedFieldsBuilder.append(bulletedItem(escapedField)); } changedFields.setHTML(changedFieldsBuilder.toSafeHtml()); } setVisibilityToHotChanges(object); }
@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { java.util.Collection<java.lang.String> packages = org.ovirt.engine.core.bll.host.HostUpgradeManager.getPackagesForCheckUpdate(host.getVdsType(), host.getClusterCompatibilityVersion()); try (final org.ovirt.engine.core.bll.hostdeploy.VdsDeploy hostPackagesManager = createPackagesManager(host, true)) { hostPackagesManager.addUnit(new org.ovirt.engine.core.bll.hostdeploy.VdsDeployPackagesUnit(packages, false)); hostPackagesManager.execute(); } catch (final java.lang.Exception e) { org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error("Failed to update host '{}' packages '{}'.", host.getName(), org.apache.commons.lang.StringUtils.join(packages, ", ")); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error("Exception", e.getMessage()); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.debug("Exception", e); throw new java.lang.RuntimeException(e); } }	@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { java.util.Collection<java.lang.String> packages = org.ovirt.engine.core.bll.host.HostUpgradeManager.getPackagesForCheckUpdate(host.getVdsType(), host.getClusterCompatibilityVersion()); try (final org.ovirt.engine.core.bll.hostdeploy.VdsDeploy hostPackagesManager = createPackagesManager(host, true)) { hostPackagesManager.addUnit(new org.ovirt.engine.core.bll.hostdeploy.VdsDeployPackagesUnit(packages, false)); hostPackagesManager.execute(); } catch (final java.lang.Exception e) { org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error("Failed to update host '{}' packages '{}': {}", host.getName(), org.apache.commons.lang.StringUtils.join(packages, ", "), e.getMessage()); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.debug("Exception", e); throw new java.lang.RuntimeException(e); } }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (isMonitoringNeeded(vdsManager.getCopyVds().getStatus())) { org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher fetcher = new org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher(vdsManager); long fetchTime = java.lang.System.nanoTime(); if (fetcher.fetch()) { getVmsMonitoring().perform(fetcher.getChangedVms(), fetchTime, vdsManager, true); processDevices(fetcher.getVdsmVms().stream(), fetchTime); } else { org.ovirt.engine.core.vdsbroker.monitoring.PollVmStatsRefresher.log.info("Failed to fetch vms info for host '{}' - skipping VMs monitoring.", vdsManager.getVdsName()); } } }	@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (isMonitoringNeeded(vdsManager.getStatus())) { org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher fetcher = new org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher(vdsManager); long fetchTime = java.lang.System.nanoTime(); if (fetcher.fetch()) { getVmsMonitoring().perform(fetcher.getChangedVms(), fetchTime, vdsManager, true); processDevices(fetcher.getVdsmVms().stream(), fetchTime); } else { org.ovirt.engine.core.vdsbroker.monitoring.PollVmStatsRefresher.log.info("Failed to fetch vms info for host '{}' - skipping VMs monitoring.", vdsManager.getVdsName()); } } }
boolean isMonitoringNeeded(org.ovirt.engine.core.common.businessentities.VDSStatus status) { return (status == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) || (((((((((status != (org.ovirt.engine.core.common.businessentities.VDSStatus.Unassigned)) && (status != (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing))) && (status != (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallFailed))) && (status != (org.ovirt.engine.core.common.businessentities.VDSStatus.Reboot))) && (status != (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance))) && (status != (org.ovirt.engine.core.common.businessentities.VDSStatus.PendingApproval))) && (status != (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallingOS))) && (status != (org.ovirt.engine.core.common.businessentities.VDSStatus.Down))) && (status != (org.ovirt.engine.core.common.businessentities.VDSStatus.Kdumping))); }	boolean isMonitoringNeeded(org.ovirt.engine.core.common.businessentities.VDSStatus status) { switch (status) { default : return false; case Up : case Error : case NonOperational : case PreparingForMaintenance : case NonResponsive : case Initializing : case Connecting : return true; } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.AffinityLabel.class, to = org.ovirt.engine.core.common.businessentities.Label.class) public static org.ovirt.engine.core.common.businessentities.Label map(org.ovirt.engine.api.model.AffinityLabel model, org.ovirt.engine.core.common.businessentities.Label template) { org.ovirt.engine.core.common.businessentities.LabelBuilder entity = (template != null) ? new org.ovirt.engine.core.common.businessentities.LabelBuilder(template) : new org.ovirt.engine.core.common.businessentities.LabelBuilder(); if (model.isSetId()) { entity.id(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.name(model.getName()); } if (model.isSetReadOnly()) { entity.readOnly(model.getReadOnly()); } if ((model.isSetVms()) && (model.getVms().isSetVms())) { model.getVms().getVms().forEach(( vm) -> entity.vm(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(vm.getId()))); } if ((model.isSetHosts()) && (model.getHosts().isSetHosts())) { model.getHosts().getHosts().forEach(( host) -> entity.host(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(host.getId()))); } return entity.build(); }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.AffinityLabel.class, to = org.ovirt.engine.core.common.businessentities.Label.class) public static org.ovirt.engine.core.common.businessentities.Label map(org.ovirt.engine.api.model.AffinityLabel model, org.ovirt.engine.core.common.businessentities.Label template) { org.ovirt.engine.core.common.businessentities.LabelBuilder entity = (template != null) ? new org.ovirt.engine.core.common.businessentities.LabelBuilder(template) : new org.ovirt.engine.core.common.businessentities.LabelBuilder(); if (model.isSetId()) { entity.id(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.name(model.getName()); } if (model.isSetReadOnly()) { entity.readOnly(model.isReadOnly()); } if ((model.isSetVms()) && (model.getVms().isSetVms())) { model.getVms().getVms().forEach(( vm) -> entity.vm(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(vm.getId()))); } if ((model.isSetHosts()) && (model.getHosts().isSetHosts())) { model.getHosts().getHosts().forEach(( host) -> entity.host(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(host.getId()))); } return entity.build(); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.Disk model, org.ovirt.engine.api.model.Disk transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getImageId(), transform.getImageId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.getReadOnly(), transform.getReadOnly()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getLogicalName(), transform.getLogicalName()); assertEquals(model.getOpenstackVolumeType().getName(), transform.getOpenstackVolumeType().getName()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals("unexpected status", model.getStatus(), transform.getStatus()); assertEquals("unexpected sparse", model.isSparse(), transform.isSparse()); assertEquals("unexpected propagate errors", model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals("unexpected wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals("unexpected shareable", model.isShareable(), transform.isShareable()); }	@java.lang.Override protected void verify(org.ovirt.engine.api.model.Disk model, org.ovirt.engine.api.model.Disk transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getImageId(), transform.getImageId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.isReadOnly(), transform.isReadOnly()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getLogicalName(), transform.getLogicalName()); assertEquals(model.getOpenstackVolumeType().getName(), transform.getOpenstackVolumeType().getName()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals("unexpected status", model.getStatus(), transform.getStatus()); assertEquals("unexpected sparse", model.isSparse(), transform.isSparse()); assertEquals("unexpected propagate errors", model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals("unexpected wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals("unexpected shareable", model.isShareable(), transform.isShareable()); }
protected javax.ws.rs.core.Response attachDiskToVm(org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource resource, org.ovirt.engine.api.model.DiskAttachment attachment, org.ovirt.engine.api.restapi.resource.IResolver entityResolver) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(attachment.getDisk().getId()); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = map(attachment); dve.getId().setVmId(vmId); dve.getId().setDeviceId(diskId); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve); org.ovirt.engine.api.model.Disk disk = attachment.getDisk(); boolean isDiskActive = false; if (attachment.isSetActive()) { isDiskActive = org.apache.commons.lang.BooleanUtils.toBoolean(attachment.isActive()); } params.setPlugUnPlug(isDiskActive); boolean isDiskReadOnly = false; if (disk.isSetReadOnly()) { isDiskReadOnly = org.apache.commons.lang.BooleanUtils.toBoolean(disk.getReadOnly()); } params.setReadOnly(isDiskReadOnly); if (disk.isSetSnapshot()) { validateParameters(disk, "snapshot.id"); params.setSnapshotId(asGuid(disk.getSnapshot().getId())); } return resource.performCreate(VdcActionType.AttachDiskToVm, params, entityResolver); }	protected javax.ws.rs.core.Response attachDiskToVm(org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource resource, org.ovirt.engine.api.model.DiskAttachment attachment, org.ovirt.engine.api.restapi.resource.IResolver entityResolver) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(attachment.getDisk().getId()); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = map(attachment); dve.getId().setVmId(vmId); dve.getId().setDeviceId(diskId); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve); org.ovirt.engine.api.model.Disk disk = attachment.getDisk(); boolean isDiskActive = false; if (attachment.isSetActive()) { isDiskActive = org.apache.commons.lang.BooleanUtils.toBoolean(attachment.isActive()); } params.setPlugUnPlug(isDiskActive); boolean isDiskReadOnly = false; if (disk.isSetReadOnly()) { isDiskReadOnly = org.apache.commons.lang.BooleanUtils.toBoolean(disk.isReadOnly()); } params.setReadOnly(isDiskReadOnly); if (disk.isSetSnapshot()) { validateParameters(disk, "snapshot.id"); params.setSnapshotId(asGuid(disk.getSnapshot().getId())); } return resource.performCreate(VdcActionType.AttachDiskToVm, params, entityResolver); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.AffinityLabel model, org.ovirt.engine.core.common.businessentities.Label entity) { org.ovirt.engine.core.common.businessentities.LabelBuilder newEntity = new org.ovirt.engine.core.common.businessentities.LabelBuilder(entity); if (model.isSetReadOnly()) { newEntity.readOnly(model.getReadOnly()); } if (model.isSetName()) { newEntity.name(model.getName()); } return new org.ovirt.engine.core.common.action.LabelActionParameters(newEntity.build()); }	@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.AffinityLabel model, org.ovirt.engine.core.common.businessentities.Label entity) { org.ovirt.engine.core.common.businessentities.LabelBuilder newEntity = new org.ovirt.engine.core.common.businessentities.LabelBuilder(entity); if (model.isSetReadOnly()) { newEntity.readOnly(model.isReadOnly()); } if (model.isSetName()) { newEntity.name(model.getName()); } return new org.ovirt.engine.core.common.action.LabelActionParameters(newEntity.build()); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.DiskSnapshot model, org.ovirt.engine.api.model.DiskSnapshot transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.getReadOnly(), transform.getReadOnly()); assertEquals(model.getDescription(), transform.getDescription()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals("unexpected status", model.getStatus(), transform.getStatus()); assertEquals("unexpected sparse", model.isSparse(), transform.isSparse()); assertEquals("unexpected propagate errors", model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals("unexpected wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals("unexpected shareable", model.isShareable(), transform.isShareable()); }	@java.lang.Override protected void verify(org.ovirt.engine.api.model.DiskSnapshot model, org.ovirt.engine.api.model.DiskSnapshot transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.isReadOnly(), transform.isReadOnly()); assertEquals(model.getDescription(), transform.getDescription()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals("unexpected status", model.getStatus(), transform.getStatus()); assertEquals("unexpected sparse", model.isSparse(), transform.isSparse()); assertEquals("unexpected propagate errors", model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals("unexpected wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals("unexpected shareable", model.isShareable(), transform.isShareable()); }
public java.lang.String getFieldName() { return fieldName; }	public java.lang.String getExpression() { return expression; }
private static java.lang.String pretty(java.lang.String xmlString) { try { javax.xml.parsers.DocumentBuilderFactory documentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory.newInstance(); javax.xml.parsers.DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder(); org.w3c.dom.Document document = documentBuilder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xmlString))); javax.xml.transform.TransformerFactory transformerFactory = javax.xml.transform.TransformerFactory.newInstance(); javax.xml.transform.Transformer transformer = transformerFactory.newTransformer(); transformer.setOutputProperty(javax.xml.transform.OutputKeys.ENCODING, "UTF-8"); transformer.setOutputProperty(javax.xml.transform.OutputKeys.INDENT, "yes"); transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2"); javax.xml.transform.stream.StreamResult result = new javax.xml.transform.stream.StreamResult(new java.io.StringWriter()); javax.xml.transform.Source source = new javax.xml.transform.dom.DOMSource(document); transformer.transform(source, result); return result.getWriter().toString(); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.log.info("failed"); return ""; } }	public static java.lang.String prettify(java.lang.String input) { javax.xml.transform.Source xmlInput = new javax.xml.transform.stream.StreamSource(new java.io.StringReader(input)); java.io.StringWriter stringWriter = new java.io.StringWriter(); try { javax.xml.transform.TransformerFactory transformerFactory = javax.xml.transform.TransformerFactory.newInstance(); javax.xml.transform.Transformer transformer = transformerFactory.newTransformer(); transformer.setOutputProperty(javax.xml.transform.OutputKeys.INDENT, "yes"); transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2"); transformer.transform(xmlInput, new javax.xml.transform.stream.StreamResult(stringWriter)); return stringWriter.toString().replace("\r\n", "\n"); } catch (java.lang.Exception ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.log.error("Failed to produce pretty-print of {}", input); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.log.error("Exception:", ex); return null; } }
@java.lang.Override protected void executeVdsBrokerCommand() { buildVmData(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.log.info("VM {}", createInfo); if (Version.v4_1.lessOrEquals(vm.getCompatibilityVersion())) { java.lang.String libvirtXml = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder()).build(createInfo, vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getVds().getId()); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.log.info("VM' {}", org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.pretty(libvirtXml)); createInfo.put("xml", libvirtXml); } vmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getBroker().create(createInfo); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(vm.getDynamicData(), vmReturn.vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getVds()); }	@java.lang.Override protected void executeVdsBrokerCommand() { buildVmData(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.log.info("VM {}", createInfo); if (((boolean) (org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DomainXML)))) { java.lang.String libvirtXml = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder()).build(createInfo, vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getVds().getId()); java.lang.String prettyLibvirtXml = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.prettify(libvirtXml); if (prettyLibvirtXml != null) { org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.log.info("VM {}", prettyLibvirtXml); } createInfo.put("xml", libvirtXml); } vmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getBroker().create(createInfo); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(vm.getDynamicData(), vmReturn.vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getVds()); }
@javax.annotation.PostConstruct public void create() { log.info("oVirt optimizer service starting"); int refresh = java.lang.Integer.parseInt(configProvider.load().getConfig().getProperty(ConfigProvider.SOLVER_CLUSTER_REFRESH)); executors.getScheduler().schedule(() -> executors.getThreadPool().submit(this::refreshClusters), refresh, java.util.concurrent.TimeUnit.MILLISECONDS); }	@javax.annotation.PostConstruct public void create() { log.info("oVirt optimizer service starting"); int refresh = java.lang.Integer.parseInt(configProvider.load().getConfig().getProperty(ConfigProvider.SOLVER_CLUSTER_REFRESH)); executors.getScheduler().scheduleWithFixedDelay(() -> executors.getThreadPool().submit(this::refreshClusters), 0, refresh, java.util.concurrent.TimeUnit.SECONDS); }
private void refreshClusters() { log.debug("Discovering clusters..."); java.util.Set<java.lang.String> availableClusters = discovery.getClusters(); if (availableClusters == null) { log.error("Cluster discovery failed"); return; } availableClusters.removeAll(clusterOptimizers.keySet()); java.util.Properties config = new org.ovirt.optimizer.config.ConfigProvider().load().getConfig(); final int maxSteps = java.lang.Integer.parseInt(config.getProperty(ConfigProvider.SOLVER_STEPS)); for (java.lang.String clusterId : availableClusters) { log.info(java.lang.String.format("New cluster %s detected", clusterId)); long timeout = (java.lang.Integer.parseInt(configProvider.load().getConfig().getProperty(ConfigProvider.SOLVER_TIMEOUT))) * 1000; int refresh = java.lang.Integer.parseInt(configProvider.load().getConfig().getProperty(ConfigProvider.SOLVER_DATA_REFRESH)); org.ovirt.optimizer.solver.thread.ClusterOptimizer optimizer = new org.ovirt.optimizer.solver.thread.ClusterOptimizer(clusterId, maxSteps, timeout, configProvider.customRuleFiles()); org.ovirt.optimizer.solver.thread.ClusterInfoUpdater updater = new org.ovirt.optimizer.solver.thread.ClusterInfoUpdater(client, optimizer); clusterOptimizers.put(clusterId, optimizer); java.util.concurrent.CompletableFuture.supplyAsync(optimizer, executors.getThreadPool()).thenApply(OptimalDistributionStepsSolution::getClusterId).thenApply(clusterOptimizers::remove); executors.getScheduler().schedule(() -> executors.getThreadPool().submit(updater), refresh, java.util.concurrent.TimeUnit.SECONDS); } }	private void refreshClusters() { log.debug("Discovering clusters..."); java.util.Set<java.lang.String> availableClusters = discovery.getClusters(); if (availableClusters == null) { log.error("Cluster discovery failed"); return; } availableClusters.removeAll(clusterOptimizers.keySet()); java.util.Properties config = new org.ovirt.optimizer.config.ConfigProvider().load().getConfig(); final int maxSteps = java.lang.Integer.parseInt(config.getProperty(ConfigProvider.SOLVER_STEPS)); for (java.lang.String clusterId : availableClusters) { log.info(java.lang.String.format("New cluster %s detected", clusterId)); long timeout = java.lang.Integer.parseInt(configProvider.load().getConfig().getProperty(ConfigProvider.SOLVER_TIMEOUT)); int refresh = java.lang.Integer.parseInt(configProvider.load().getConfig().getProperty(ConfigProvider.SOLVER_DATA_REFRESH)); org.ovirt.optimizer.solver.thread.ClusterOptimizer optimizer = new org.ovirt.optimizer.solver.thread.ClusterOptimizer(clusterId, maxSteps, (timeout * 1000), configProvider.customRuleFiles()); org.ovirt.optimizer.solver.thread.ClusterInfoUpdater updater = new org.ovirt.optimizer.solver.thread.ClusterInfoUpdater(client, optimizer); clusterOptimizers.put(clusterId, optimizer); java.util.concurrent.CompletableFuture.supplyAsync(optimizer, executors.getThreadPool()).thenApply(OptimalDistributionStepsSolution::getClusterId).thenApply(clusterOptimizers::remove); executors.getScheduler().scheduleWithFixedDelay(() -> executors.getThreadPool().submit(updater), 0, refresh, java.util.concurrent.TimeUnit.SECONDS); } }
public java.util.List<java.nio.file.Path> customRuleFiles() { java.nio.file.Path dir = java.nio.file.FileSystems.getDefault().getPath(config.getProperty(org.ovirt.optimizer.config.ConfigProvider.SOLVER_CUSTOM_RULE_DIR)); final java.util.List<java.nio.file.Path> candidateFiles; try { candidateFiles = java.nio.file.Files.list(dir).collect(java.util.stream.Collectors.toList()); } catch (java.io.IOException e) { org.ovirt.optimizer.config.ConfigProvider.log.warn("Could not get a list of custom DRL files: {}", e); return java.util.Collections.emptyList(); } org.ovirt.optimizer.config.ConfigProvider.log.debug("Found {} custom DRL candidate files", candidateFiles.size()); return candidateFiles.stream().filter(( p) -> p.endsWith(".drl")).filter(java.nio.file.Files::isRegularFile).peek(( p) -> org.ovirt.optimizer.config.ConfigProvider.log.debug("Using {} custom DRL file", p)).collect(java.util.stream.Collectors.toList()); }	public java.util.List<java.nio.file.Path> customRuleFiles() { java.nio.file.Path dir = java.nio.file.FileSystems.getDefault().getPath(config.getProperty(org.ovirt.optimizer.config.ConfigProvider.SOLVER_CUSTOM_RULE_DIR)); final java.util.List<java.nio.file.Path> candidateFiles; try { candidateFiles = java.nio.file.Files.list(dir).collect(java.util.stream.Collectors.toList()); } catch (java.io.IOException e) { org.ovirt.optimizer.config.ConfigProvider.log.warn("Could not get a list of custom DRL files:", e); return java.util.Collections.emptyList(); } org.ovirt.optimizer.config.ConfigProvider.log.debug("Found {} custom DRL candidate files", candidateFiles.size()); return candidateFiles.stream().peek(( p) -> org.ovirt.optimizer.config.ConfigProvider.log.debug("Checking out file {}", p)).filter(java.nio.file.Files::isRegularFile).filter(( p) -> p.toString().endsWith(".drl")).peek(( p) -> org.ovirt.optimizer.config.ConfigProvider.log.info("Using {} as custom DRL file", p)).collect(java.util.stream.Collectors.toList()); }
private void updateImportedVmDevice(org.ovirt.engine.core.common.businessentities.VmBase vmBase, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.compat.Guid deviceId, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate) { org.ovirt.engine.core.common.businessentities.VmDevice exportedDevice = vmBase.getManagedDeviceMap().get(deviceId); if (exportedDevice != null) { vmDevice.setAddress(exportedDevice.getAddress()); vmDevice.setIsPlugged(exportedDevice.getIsPlugged()); vmDevice.setIsReadOnly(exportedDevice.getIsReadOnly()); vmDevicesToUpdate.add(vmDevice); } }	private void updateImportedVmDevice(org.ovirt.engine.core.common.businessentities.VmBase vmBase, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.compat.Guid deviceId, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate) { org.ovirt.engine.core.common.businessentities.VmDevice exportedDevice = vmBase.getManagedDeviceMap().get(deviceId); if (exportedDevice != null) { vmDevice.setAddress(exportedDevice.getAddress()); vmDevice.setPlugged(exportedDevice.isPlugged()); vmDevice.setReadOnly(exportedDevice.getReadOnly()); vmDevicesToUpdate.add(vmDevice); } }
private void addDiskVmElements() { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : _images) { disk.getDiskVmElements().stream().forEach(( dve) -> dve.setId(new org.ovirt.engine.core.common.businessentities.VmDeviceId(disk.getId(), vmBase.getId()))); disk.setDiskVmElements(disk.getDiskVmElements()); } }	private void fixDiskVmElements() { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : _images) { disk.getDiskVmElements().stream().forEach(( dve) -> dve.setId(new org.ovirt.engine.core.common.businessentities.VmDeviceId(disk.getId(), vmBase.getId()))); disk.setDiskVmElements(disk.getDiskVmElements()); } }
public static void deserialize(com.google.gwt.user.client.rpc.SerializationStreamReader streamReader, org.ovirt.engine.core.common.queries.VdcQueryReturnValue instance) throws com.google.gwt.user.client.rpc.SerializationException { instance.setSucceeded(streamReader.readBoolean()); instance.setExceptionString(streamReader.readString()); java.lang.String type = streamReader.readString(); if (type.equals("java.lang.String")) { instance.setReturnValue(streamReader.readString()); } else if (type.equals("java.lang.Integer")) { instance.setReturnValue(streamReader.readInt()); } else if (type.equals("java.lang.Boolean")) { instance.setReturnValue(streamReader.readBoolean()); } else if (type.equals("java.lang.Double")) { instance.setReturnValue(streamReader.readDouble()); } else if (type.equals("java.lang.Float")) { instance.setReturnValue(streamReader.readFloat()); } else if (type.equals("java.lang.Character")) { instance.setReturnValue(streamReader.readChar()); } else if (type.equals("java.lang.Short")) { instance.setReturnValue(streamReader.readShort()); } else if (type.equals("java.lang.Byte")) { instance.setReturnValue(streamReader.readByte()); } else if (type.equals("java.util.List")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("java.util.Map")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("java.util.Set")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("IVdcQueryable")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("UNKNOWN")) { instance.setReturnValue(streamReader.readObject()); } }	public static void deserialize(com.google.gwt.user.client.rpc.SerializationStreamReader streamReader, org.ovirt.engine.core.common.queries.VdcQueryReturnValue instance) throws com.google.gwt.user.client.rpc.SerializationException { instance.setSucceeded(streamReader.readBoolean()); instance.setExceptionString(streamReader.readString()); java.lang.String type = streamReader.readString(); if (type == null) { } else if (type.equals("java.lang.String")) { instance.setReturnValue(streamReader.readString()); } else if (type.equals("java.lang.Integer")) { instance.setReturnValue(streamReader.readInt()); } else if (type.equals("java.lang.Boolean")) { instance.setReturnValue(streamReader.readBoolean()); } else if (type.equals("java.lang.Double")) { instance.setReturnValue(streamReader.readDouble()); } else if (type.equals("java.lang.Float")) { instance.setReturnValue(streamReader.readFloat()); } else if (type.equals("java.lang.Character")) { instance.setReturnValue(streamReader.readChar()); } else if (type.equals("java.lang.Short")) { instance.setReturnValue(streamReader.readShort()); } else if (type.equals("java.lang.Byte")) { instance.setReturnValue(streamReader.readByte()); } else if (type.equals("java.util.List")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("java.util.Map")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("java.util.Set")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("IVdcQueryable")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("UNKNOWN")) { instance.setReturnValue(streamReader.readObject()); } }
public boolean poll(org.ovirt.engine.core.compat.Guid hostId) { waitBetweenPolls(); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace("Request to do poll for host {}.", hostId); org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runFutureVdsCommand(FutureVDSCommandType.Poll, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(hostId)); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace("FutureVDSCommandType.Poll executed for host{}.", hostId); boolean succeeded = getValue(task, hostId); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace("Result of FutureVDSCommandType.Poll for host {}: {}", hostId, succeeded); timestampOfEndOfPreviousInvocation = currentTimestamp(); return succeeded; }	public boolean poll(org.ovirt.engine.core.compat.Guid hostId) { waitBetweenPolls(); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace("Request to do poll for host {}.", hostId); org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runFutureVdsCommand(FutureVDSCommandType.Poll, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(hostId)); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace("FutureVDSCommandType.Poll executed for host{}.", hostId); boolean succeeded = getValue(task); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace("Result of FutureVDSCommandType.Poll for host {}: {}", hostId, succeeded); timestampOfEndOfPreviousInvocation = currentTimestamp(); return succeeded; }
private boolean getValue(org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task, org.ovirt.engine.core.compat.Guid hostId) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = task.get(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SetupNetworksPollingTimeout), java.util.concurrent.TimeUnit.SECONDS); return vdsReturnValue.getSucceeded(); } catch (java.util.concurrent.TimeoutException e) { return false; } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSRecoveringException e) { org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace("Failed to poll host {} - it's in recovery mode.", hostId, e); return false; } }	private boolean getValue(org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = task.get(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SetupNetworksPollingTimeout), java.util.concurrent.TimeUnit.SECONDS); return vdsReturnValue.getSucceeded(); } catch (java.util.concurrent.TimeoutException e) { return false; } }
@org.junit.Test public void testGetValue() { java.lang.System.out.println("test1"); assertEquals(("Wrong getValue() for " + (value)), value.ordinal(), value.getValue()); }	@org.junit.Test public void testGetValue() { assertEquals(("Wrong getValue() for " + (value)), value.ordinal(), value.getValue()); }
@org.junit.Test public void testForValue() { java.lang.System.out.println("test2"); assertEquals(("Wrong forValue() for " + (value)), value, org.ovirt.engine.core.common.queries.ConfigurationValues.forValue(value.getValue())); }	@org.junit.Test public void testForValue() { assertEquals(("Wrong forValue() for " + (value)), value, org.ovirt.engine.core.common.queries.ConfigurationValues.forValue(value.getValue())); }
private void updatePassDiscardChangeabilityForDiskImage() { if (getStorageDomain().getSelectedItem().getStorageType().isFileDomain()) { getPassDiscard().setIsChangeable(true); } else if (getStorageDomain().getSelectedItem().getStorageType().isBlockDomain()) { if (!(getStorageDomain().getSelectedItem().getSupportsDiscard())) { getPassDiscard().setIsChangeable(false, org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); getPassDiscard().setEntity(false); } else { getPassDiscard().setIsChangeable(((!(getIsWipeAfterDelete().getEntity())) || (getStorageDomain().getSelectedItem().getSupportsDiscardZeroesData())), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.theUnderlyingStorageDoesNotSupportDiscardWhenWipeAfterDeleteIsEnabled()); if (!(getPassDiscard().getIsChangable())) { getPassDiscard().setEntity(false); } } } }	private void updatePassDiscardChangeabilityForDiskImage() { if ((getStorageDomain().getSelectedItem()) == null) { return; } if (getStorageDomain().getSelectedItem().getStorageType().isFileDomain()) { getPassDiscard().setIsChangeable(true); } else if (getStorageDomain().getSelectedItem().getStorageType().isBlockDomain()) { if (!(getStorageDomain().getSelectedItem().getSupportsDiscard())) { getPassDiscard().setIsChangeable(false, org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); getPassDiscard().setEntity(false); } else { getPassDiscard().setIsChangeable(((!(getIsWipeAfterDelete().getEntity())) || (getStorageDomain().getSelectedItem().getSupportsDiscardZeroesData())), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.theUnderlyingStorageDoesNotSupportDiscardWhenWipeAfterDeleteIsEnabled()); if (!(getPassDiscard().getIsChangable())) { getPassDiscard().setEntity(false); } } } }
private void updatePassDiscardChangeabilityForDirectLun() { if (((getSanStorageModelBase()) != null) && ((getSanStorageModelBase().getAddedLuns()) != null)) { if (getSanStorageModelBase().getAddedLuns().isEmpty()) { getPassDiscard().setIsChangeable(false, null); } else { getPassDiscard().setIsChangeable(isLunSupportDiscard(getSanStorageModelBase().getAddedLuns().get(0).getEntity()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); if (!(getPassDiscard().getIsChangable())) { getPassDiscard().setEntity(false); } } } else if ((getLunDisk()) != null) { getPassDiscard().setIsChangeable(isLunSupportDiscard(getLunDisk().getLun()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); } }	private void updatePassDiscardChangeabilityForDirectLun() { if (((getSanStorageModelBase()) != null) && ((getSanStorageModelBase().getAddedLuns()) != null)) { if (getSanStorageModelBase().getAddedLuns().isEmpty()) { getPassDiscard().setIsChangeable(false); } else { getPassDiscard().setIsChangeable(isLunSupportDiscard(getSanStorageModelBase().getAddedLuns().get(0).getEntity()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); if (!(getPassDiscard().getIsChangable())) { getPassDiscard().setEntity(false); } } } else if ((getLunDisk()) != null) { getPassDiscard().setIsChangeable(isLunSupportDiscard(getLunDisk().getLun()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); } }
@java.lang.Override protected void executeQueryCommand() { try { org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase.getQueryReturnValue().setReturnValue(getUserRequestForStorageDomainRepoFileList()); } catch (java.lang.Exception e) { log.error("Failed to retrieve image list: {}", e.getCause().getMessage()); org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase.getQueryReturnValue().setExceptionString(e.getCause().getMessage()); org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase.getQueryReturnValue().setSucceeded(false); } }	@java.lang.Override protected void executeQueryCommand() { try { org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase.getQueryReturnValue().setReturnValue(getUserRequestForStorageDomainRepoFileList()); } catch (java.lang.Exception e) { java.lang.String message = java.util.Optional.of(e.getCause()).map(java.lang.Throwable::getMessage).orElse(""); log.error("Failed to retrieve image list: {}", message); org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase.getQueryReturnValue().setExceptionString(message); org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase.getQueryReturnValue().setSucceeded(false); } }
public boolean isRebootCommandExecutionAllowed(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { if ((vms.isEmpty()) || (!(org.ovirt.engine.core.common.VdcActionUtils.canExecutePartially(vms, VM.VmWithStatusForExclusive.class, VdcActionType.RebootVm)))) { return false; } for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { boolean guestAgentPresent = !(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(vm.getIp())); boolean acpiEnabled = java.lang.Boolean.TRUE.equals(vm.getAcpiEnable()); if (!(guestAgentPresent || acpiEnabled)) { return false; } } return true; }	public boolean isRebootCommandExecutionAllowed(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { if ((vms.isEmpty()) || (!(org.ovirt.engine.core.common.VdcActionUtils.canExecutePartially(vms, org.ovirt.engine.core.common.businessentities.VmWithStatusForExclusiveLock.class, VdcActionType.RebootVm)))) { return false; } for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { boolean guestAgentPresent = !(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(vm.getIp())); boolean acpiEnabled = java.lang.Boolean.TRUE.equals(vm.getAcpiEnable()); if (!(guestAgentPresent || acpiEnabled)) { return false; } } return true; }
private java.util.List<org.ovirt.engine.core.common.businessentities.VM.VmWithStatusForExclusive> getSelectedItemsWithStatusForExclusiveLock() { java.util.List<org.ovirt.engine.core.common.businessentities.VM.VmWithStatusForExclusive> vmsWithStatusForExclusive = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItems()) { vmsWithStatusForExclusive.add(new org.ovirt.engine.core.common.businessentities.VM.VmWithStatusForExclusive(vm)); } return vmsWithStatusForExclusive; }	private java.util.List<org.ovirt.engine.core.common.businessentities.VmWithStatusForExclusiveLock> getSelectedItemsWithStatusForExclusiveLock() { java.util.List<org.ovirt.engine.core.common.businessentities.VmWithStatusForExclusiveLock> vmsWithStatusForExclusive = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItems()) { vmsWithStatusForExclusive.add(new org.ovirt.engine.core.common.businessentities.VmWithStatusForExclusiveLock(vm)); } return vmsWithStatusForExclusive; }
@java.lang.Override protected void proceedProxyReturnValue() { try { super.proceedProxyReturnValue(); } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException e) { handleException(e, "exception was caught and ignored"); } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSRecoveringException e) { handleException(e, "it's in recovery mode"); } }	@java.lang.Override protected void proceedProxyReturnValue() { try { super.proceedProxyReturnValue(); } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException e) { handleException(e, "VDSNetworkException was caught"); } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSRecoveringException e) { handleException(e, "it's in recovery mode"); } }
private void handleException(org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase e, java.lang.String reason) { final org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getVDSReturnValue(); vdsReturnValue.setSucceeded(false); vdsReturnValue.setExceptionString(e.toString()); vdsReturnValue.setExceptionObject(e); vdsReturnValue.setVdsError(e.getVdsError()); final java.lang.String msg = org.slf4j.helpers.MessageFormatter.format("Failed to poll host {} - {}.", org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getVdsId(), reason).getMessage(); org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.log.debug(msg, e); }	private void handleException(org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase e, java.lang.String reason) { setVdsRuntimeError(e); final java.lang.String msg = java.lang.String.format("Failed to poll host %s - %s.", org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getVdsId(), reason); org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.log.debug(msg, e); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetDifferentlyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); assertThat(factory.createDecoratedPool(macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); assertThat(factory.createDecoratedPool(macPool, java.util.Collections.singletonList(macPoolDecoratorB)), instanceOf(java.lang.reflect.Proxy.class)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor1 = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy).createLockingInstance(eq(macPoolDecoratorA), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor1.capture()); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor2 = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy).createLockingInstance(eq(macPoolDecoratorB), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor2.capture()); assertEquals(captor1.getValue(), captor2.getValue()); }	private void multipleDecoratorsUsesSameLock(org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator... decorators) { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactory); java.util.Arrays.stream(decorators).forEach(( decorator) -> factory.createDecoratedPool(macPool, singletonList(decorator))); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactory, times(2)).createLockingInstance(eq(macPool), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor.capture()); assertThat(captor.getAllValues().stream().distinct().count(), is(1L)); }
@java.lang.Override public final java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("macPool", macPool.toString()).build(); }	@java.lang.Override public final java.lang.String toString() { org.ovirt.engine.core.common.utils.ToStringBuilder result = org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this); if ((macPool) != null) { result.append("macPool", macPool.toString()); } return result.build(); }
@org.junit.Test public void testCreateDecoratedPoolByTwoDecorators() { doAnswer(( invocation) -> invocation.getArguments()[0]).when(lockedObjectFactoryMock).createLockingInstance(any(), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any()); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool = decoratePoolWhileNotUsingLocking(java.util.Arrays.asList(macPoolDecoratorA, macPoolDecoratorB)); assertThat(decoratedPool, is(macPoolDecoratorB)); java.lang.String macToPropagate = "macToPropagate"; when(macPool.allocateNewMac()).thenReturn(macToPropagate); java.lang.String propagatedMac = decoratedPool.allocateNewMac(); assertThat(propagatedMac, is(macToPropagate)); verify(macPoolDecoratorA).allocateNewMac(); verify(macPoolDecoratorB).allocateNewMac(); verify(macPool).getId(); verify(macPool).allocateNewMac(); verifyNoMoreInteractions(macPoolDecoratorA); verifyNoMoreInteractions(macPoolDecoratorB); verifyNoMoreInteractions(macPool); }	@org.junit.Test public void testEqualyDecoratedPoolsUseSameLock() { multipleDecoratorsUsesSameLock(macPoolDecoratorA, macPoolDecoratorA); }
public org.ovirt.engine.core.bll.network.macpool.MacPool createDecoratedPool(org.ovirt.engine.core.bll.network.macpool.MacPool macPool, java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator> decorators) { org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool = decoratePool(macPool, decorators); return lockedObjectFactory.createLockingInstance(decoratedPool, org.ovirt.engine.core.bll.network.macpool.MacPool.class, lockForMacPool(macPool.getId())); }	public org.ovirt.engine.core.bll.network.macpool.MacPool createDecoratedPool(org.ovirt.engine.core.bll.network.macpool.MacPool macPool, java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator> decorators) { org.ovirt.engine.core.bll.network.macpool.MacPool lockedPool = lockedObjectFactory.createLockingInstance(macPool, org.ovirt.engine.core.bll.network.macpool.MacPool.class, lockForMacPool(macPool.getId())); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool = decoratePool(lockedPool, decorators); return decoratedPool; }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetEquallyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); assertThat(factory.createDecoratedPool(macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); assertThat(factory.createDecoratedPool(macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(macPoolDecoratorA), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor.capture()); java.util.List<java.util.concurrent.locks.ReentrantReadWriteLock> capturesValues = captor.getAllValues(); assertEquals(capturesValues.get(0), capturesValues.get(1)); }	@org.junit.Test public void testDifferenlyDecoratedPoolsUseSameLock() { multipleDecoratorsUsesSameLock(macPoolDecoratorA, macPoolDecoratorB); }
public void modifyPool(org.ovirt.engine.core.common.businessentities.MacPool macPool) { try (org.ovirt.engine.core.utils.lock.AutoCloseableLock lock = writeLockResource()) { if (!(macPools.containsKey(macPool.getId()))) { throw new java.lang.IllegalStateException(org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.INEXISTENT_POOL_EXCEPTION_MESSAGE); } org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.log.debug("Updating pool {}. (old will be deleted and new initialized from db entity)", macPool); removeWithoutLocking(macPool.getId()); initializeMacPool(macPool); } }	public void modifyPool(org.ovirt.engine.core.common.businessentities.MacPool macPool) { try (org.ovirt.engine.core.utils.lock.AutoCloseableLock lock = writeLockResource()) { org.ovirt.engine.core.compat.Guid macPoolId = macPool.getId(); if (!(macPools.containsKey(macPoolId))) { throw new java.lang.IllegalStateException(createExceptionMessageMacPoolHavingIdDoesNotExist(macPoolId)); } org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.log.debug("Updating pool {}. (old will be deleted and new initialized from db entity)", macPool); removeWithoutLocking(macPoolId); initializeMacPool(macPool); } }
@java.lang.Override public final void freeMacs(java.util.List<java.lang.String> macs) { java.util.List<java.lang.String> macsToRelease = filterOutUnusedMacs(macs); if (macsToRelease.isEmpty()) { org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.log.warn("Call to release with empty collection as parameter."); } else { org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.TransactionalStrategyState strategyForMacRelease = getStrategyForMacRelease(); org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.log.debug("Using {} as release strategy", strategyForMacRelease); strategyForMacRelease.releaseMacsOnCommit(macsToRelease); } }	@java.lang.Override public final void freeMacs(java.util.List<java.lang.String> macs) { java.util.List<java.lang.String> macsToRelease = filterOutUnusedMacs(macs); if (macsToRelease.isEmpty()) { org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.log.warn("Trying to release MACs using empty collection as parameter."); } else { org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.TransactionalStrategyState strategyForMacRelease = getStrategyForMacRelease(); org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.log.debug("Using {} as release strategy", strategyForMacRelease); strategyForMacRelease.releaseMacsOnCommit(macsToRelease); } }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { org.ovirt.engine.core.bll.context.CompensationContext compensationContext = this.commandContext.getCompensationContext(); org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.UsingCompensationState.ReleaseMacsCompensationListener compensationListener = this.compensationListener; log.debug("Registering macs: {} to be released in case of successful execution", java.util.Arrays.toString(macs.toArray())); compensationListener.macsToReleaseOnCommit.addAll(macs); log.debug(("Registering compensation listener {}" + compensationListener)); compensationContext.addListener(compensationListener); }	@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { org.ovirt.engine.core.bll.context.CompensationContext compensationContext = this.commandContext.getCompensationContext(); org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.UsingCompensationState.ReleaseMacsCompensationListener compensationListener = this.compensationListener; log.debug("Registering macs: {} to be released in case of successful execution", macs); compensationListener.macsToReleaseOnCommit.addAll(macs); log.debug(("Registering compensation listener {}" + compensationListener)); compensationContext.addListener(compensationListener); }
public org.ovirt.engine.core.bll.network.macpool.MacPool getMacPoolById(org.ovirt.engine.core.compat.Guid macPoolId) { org.ovirt.engine.core.bll.network.macpool.MacPool result = getMacPoolById(macPoolId, java.util.Collections.emptyList()); org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.log.debug("Returning {} for use in compensation mechanism", result); return result; }	public org.ovirt.engine.core.bll.network.macpool.MacPool getMacPoolById(org.ovirt.engine.core.compat.Guid macPoolId) { return getMacPoolById(macPoolId, java.util.Collections.emptyList()); }
@java.lang.Override public java.util.List<java.lang.String> allocateMacAddresses(int numberOfAddresses) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug("Allocating {} mac addresses from {}.", numberOfAddresses, this); java.util.List<java.lang.Long> macs = macsStorage.allocateAvailableMacs(numberOfAddresses); java.util.List<java.lang.String> result = org.ovirt.engine.core.utils.MacAddressRangeUtils.macAddressesToStrings(macs); org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug("Allocated mac addresses: {} from {}.", java.util.Arrays.toString(result.toArray()), this); java.util.Collections.sort(result); logWhenMacPoolIsEmpty(); return result; }	@java.lang.Override public java.util.List<java.lang.String> allocateMacAddresses(int numberOfAddresses) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug("Allocating {} mac addresses from {}.", numberOfAddresses, this); java.util.List<java.lang.Long> macs = macsStorage.allocateAvailableMacs(numberOfAddresses); java.util.List<java.lang.String> result = org.ovirt.engine.core.utils.MacAddressRangeUtils.macAddressesToStrings(macs); org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug("Allocated mac addresses: {} from {}.", result, this); java.util.Collections.sort(result); logWhenMacPoolIsEmpty(); return result; }
private void initializeMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool) { java.util.List<java.lang.String> macsForMacPool = macPoolDao.getAllMacsForMacPool(macPool.getId()); final org.ovirt.engine.core.bll.network.macpool.MacPool pool = createPoolInternal(macPool); org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.log.debug("Initializing {} with macs: {}", pool, java.util.Arrays.toString(macsForMacPool.toArray())); for (java.lang.String mac : macsForMacPool) { pool.forceAddMac(mac); } }	private void initializeMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool) { java.util.List<java.lang.String> macsForMacPool = macPoolDao.getAllMacsForMacPool(macPool.getId()); final org.ovirt.engine.core.bll.network.macpool.MacPool pool = createPoolInternal(macPool); org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.log.debug("Initializing {} with macs: {}", pool, macsForMacPool); for (java.lang.String mac : macsForMacPool) { pool.forceAddMac(mac); } }
@java.lang.Override public void freeMacs(java.util.List<java.lang.String> macs) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug("Releasing mac addresses {} back to {}", java.util.Arrays.toString(macs.toArray()), this); for (java.lang.String mac : macs) { macsStorage.freeMac(org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong(mac)); } }	@java.lang.Override public void freeMacs(java.util.List<java.lang.String> macs) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug("Releasing mac addresses {} back to {}", macs, this); for (java.lang.String mac : macs) { macsStorage.freeMac(org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong(mac)); } }
public org.ovirt.engine.core.bll.network.macpool.MacPool createDecoratedPool(org.ovirt.engine.core.bll.network.macpool.MacPool macPool, java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator> decorators) { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory.log.debug("Creating decorated MacPool for {}", macPool); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool = decoratePool(macPool, decorators); org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory.log.debug("MacPool {} decorated as {}.", macPool, decoratedPool); return lockedObjectFactory.createLockingInstance(decoratedPool, org.ovirt.engine.core.bll.network.macpool.MacPool.class, lockForMacPool(macPool.getId())); }	public org.ovirt.engine.core.bll.network.macpool.MacPool createDecoratedPool(org.ovirt.engine.core.bll.network.macpool.MacPool macPool, java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator> decorators) { org.ovirt.engine.core.bll.network.macpool.MacPool lockedPool = lockedObjectFactory.createLockingInstance(macPool, org.ovirt.engine.core.bll.network.macpool.MacPool.class, lockForMacPool(macPool.getId())); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool = decoratePool(lockedPool, decorators); org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory.log.debug("MacPool {} decorated as {}.", macPool, decoratedPool); return decoratedPool; }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("allowDuplicateMacAddresses", allowDuplicateMacAddresses).append("defaultPool", defaultPool).append("description", description).append("id", id).append("name", name).append("ranges", ranges).build(); }	@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", id).append("name", name).append("description", description).append("ranges", ranges).append("allowDuplicateMacAddresses", allowDuplicateMacAddresses).append("defaultPool", defaultPool).build(); }
@java.lang.Override public void cleaningCompensationDataAfterSuccess() { log.debug(("Command successfully executed, releasing macs: {}" + (macsToReleaseOnCommit))); macsToReleaseOnCommit.forEach(macPool::freeMac); this.macsToReleaseOnCommit.clear(); }	@java.lang.Override public void cleaningCompensationDataAfterSuccess() { log.debug(("Command successfully executed, releasing macs: {}" + (macsToReleaseOnCommit))); macsToReleaseOnCommit.forEach(macPool::freeMac); }
@java.lang.Override public void onSuccess() { log.debug("Command succeeded, releasing macs {}.", java.util.Arrays.toString(super.macs.toArray())); releaseMacs(); }	@java.lang.Override public void onSuccess() { log.debug("Command succeeded, releasing macs {}.", super.macs); releaseMacs(); }
@java.lang.Override public void onRollback() { log.debug("Rollback occured, releasing macs {}.", java.util.Arrays.toString(super.macs.toArray())); releaseMacs(); }	@java.lang.Override public void onRollback() { log.debug("Rollback occurred, releasing macs {}.", super.macs); releaseMacs(); }
private java.util.List<org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.TransactionalStrategyState> getStrategyForMacAllocation() { java.util.List<org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.TransactionalStrategyState> states = new java.util.ArrayList<>(); if (usingCompensationState.shouldUseCompensation()) { states.add(usingCompensationState); } boolean shouldUseTxDecorator = (org.ovirt.engine.core.utils.transaction.TransactionSupport.current()) != null; if (shouldUseTxDecorator) { states.add(usingTxDecoratorState); } if (states.isEmpty()) { states.add(nontransactionalState); } org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.log.debug("Using {} as allocation strategies", java.util.Arrays.toString(states.toArray())); return states; }	private java.util.List<org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.TransactionalStrategyState> getStrategyForMacAllocation() { java.util.List<org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.TransactionalStrategyState> states = new java.util.ArrayList<>(); if (usingCompensationState.shouldUseCompensation()) { states.add(usingCompensationState); } boolean shouldUseTxDecorator = (org.ovirt.engine.core.utils.transaction.TransactionSupport.current()) != null; if (shouldUseTxDecorator) { states.add(usingTxDecoratorState); } if (states.isEmpty()) { states.add(nontransactionalState); } org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.log.debug("Using {} as allocation strategies", states); return states; }
private org.ovirt.engine.core.bll.network.macpool.MacPool decoratePool(org.ovirt.engine.core.bll.network.macpool.MacPool macPool, java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator> decorators) { if ((decorators == null) || (decorators.isEmpty())) { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory.log.debug("No MacPoolDecorators passed to decorate pool {}. ", macPool); return macPool; } org.ovirt.engine.core.bll.network.macpool.MacPool result = macPool; org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory.log.debug("Decorating MacPool {} with decorators: {}.", java.util.Arrays.toString(decorators.toArray())); for (org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator decorator : decorators) { decorator.setMacPool(result); result = decorator; } return result; }	private org.ovirt.engine.core.bll.network.macpool.MacPool decoratePool(org.ovirt.engine.core.bll.network.macpool.MacPool macPool, java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator> decorators) { if (org.apache.commons.collections.CollectionUtils.isEmpty(decorators)) { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory.log.debug("No MacPoolDecorators were passed to decorate pool {}. ", macPool); return macPool; } org.ovirt.engine.core.bll.network.macpool.MacPool result = macPool; org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory.log.debug("Decorating MacPool {} with decorators: {}.", java.util.Arrays.toString(decorators.toArray())); for (org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator decorator : decorators) { decorator.setMacPool(result); result = decorator; } return result; }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { log.debug("Non-tx, non-compensation state, immediately releasing macs {}.", java.util.Arrays.toString(macs.toArray())); macs.forEach(macPool::freeMac); }	@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { log.debug("Non-tx, non-compensation state, immediately releasing macs {}.", macs); macs.forEach(macPool::freeMac); }
private void updatePassDiscardChangeabilityForDirectLun() { if (((getSanStorageModelBase()) != null) && ((getSanStorageModelBase().getAddedLuns()) != null)) { if (getSanStorageModelBase().getAddedLuns().isEmpty()) { getPassDiscard().setIsChangeable(false); } else { getPassDiscard().setIsChangeable(isLunSupportDiscard(getSanStorageModelBase().getAddedLuns().get(0).getEntity()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); if (!(getPassDiscard().getIsChangable())) { getPassDiscard().setEntity(false); } } } else if ((getLunDisk()) != null) { getPassDiscard().setIsChangeable(isLunSupportDiscard(getLunDisk().getLun()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); } }	private void updatePassDiscardChangeabilityForDirectLun() { if (((getSanStorageModelBase()) != null) && ((getSanStorageModelBase().getAddedLuns()) != null)) { if (getSanStorageModelBase().getAddedLuns().isEmpty()) { getPassDiscard().setIsChangeable(false, null); } else { getPassDiscard().setIsChangeable(isLunSupportDiscard(getSanStorageModelBase().getAddedLuns().get(0).getEntity()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); if (!(getPassDiscard().getIsChangable())) { getPassDiscard().setEntity(false); } } } else if ((getLunDisk()) != null) { getPassDiscard().setIsChangeable(isLunSupportDiscard(getLunDisk().getLun()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); } }
private boolean isMigrationOriginally(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return ((clusterNetworkModel.getOriginalNetworkCluster()) != null) && (clusterNetworkModel.getOriginalNetworkCluster().isMigration()); }	@java.lang.Override protected boolean isRoleSet(org.ovirt.engine.core.common.businessentities.network.NetworkCluster originalNetworkCluster) { return originalNetworkCluster.isMigration(); }
private boolean isUnsetRoleProhibited(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return (isMultipleSelectionAllowed()) && (isDisplayOriginally(clusterNetworkModel)); }	@java.lang.Override protected boolean isRoleSet(org.ovirt.engine.core.common.businessentities.network.NetworkCluster originalNetworkCluster) { return originalNetworkCluster.isDisplay(); }
private boolean isGlusterOriginally(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return ((clusterNetworkModel.getOriginalNetworkCluster()) != null) && (clusterNetworkModel.getOriginalNetworkCluster().isGluster()); }	@java.lang.Override protected boolean isRoleSet(org.ovirt.engine.core.common.businessentities.network.NetworkCluster originalNetworkCluster) { return originalNetworkCluster.isGluster(); }
private boolean isDisplayOriginally(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return ((clusterNetworkModel.getOriginalNetworkCluster()) != null) && (clusterNetworkModel.getOriginalNetworkCluster().isDisplay()); }	protected boolean isUnsetRoleProhibited(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return (isMultipleSelectionAllowed()) && (isRoleSet(clusterNetworkModel)); }
private boolean isUnsetRoleProhibited(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return (isMultipleSelectionAllowed()) && (isManagementOriginally(clusterNetworkModel)); }	@java.lang.Override protected boolean isRoleSet(org.ovirt.engine.core.common.businessentities.network.NetworkCluster originalNetworkCluster) { return originalNetworkCluster.isManagement(); }
private void initCreateOrUpdateBondParameters() { org.ovirt.engine.core.common.utils.NetworkCommonUtils.fillBondSlaves(allExistingNics); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : allExistingNics) { if (nic.isBond()) { getHostSetupNetworksParametersData().getBonds().add(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(((org.ovirt.engine.core.common.businessentities.network.Bond) (nic)))); } } initBondNameToIdMap(); }	private void initCreateOrUpdateBondParameters() { org.ovirt.engine.core.common.utils.NetworkCommonUtils.fillBondSlaves(allExistingNics); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : allExistingNics) { if (nic.isBond()) { getHostSetupNetworksParametersData().getBonds().add(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(((org.ovirt.engine.core.common.businessentities.network.Bond) (nic)))); } } hostSetupNetworksParametersData.setOriginalBondsByName(org.ovirt.engine.core.common.businessentities.Entities.entitiesByName(hostSetupNetworksParametersData.getBonds())); }
public void addBondToParameters(org.ovirt.engine.core.common.action.CreateOrUpdateBond bond) { assert (bond.getId()) == null : "When adding a bond to the parameters its id should be null"; org.ovirt.engine.core.compat.Guid originalIdOfBondWithTheSameName = originalBondNameToId.get(bond.getName()); bond.setId(originalIdOfBondWithTheSameName); if (originalIdOfBondWithTheSameName != null) { removedBonds.remove(originalIdOfBondWithTheSameName); } bonds.add(bond); }	public void addBondToParameters(org.ovirt.engine.core.common.action.CreateOrUpdateBond bond) { if ((bond.getId()) != null) { throw new java.lang.IllegalArgumentException("When adding a bond to the parameters its id should be null"); } org.ovirt.engine.core.common.action.CreateOrUpdateBond originalBondWithTheSameName = originalBondsByName.get(bond.getName()); if (originalBondWithTheSameName != null) { bond.setId(originalBondWithTheSameName.getId()); removedBonds.remove(originalBondWithTheSameName.getId()); } bonds.add(bond); }
private void initOrginalBondNameToIdMap(org.ovirt.engine.core.common.action.CreateOrUpdateBond... bonds) { java.util.Map<java.lang.String, org.ovirt.engine.core.compat.Guid> originalBondNameToId = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.action.CreateOrUpdateBond bond : bonds) { originalBondNameToId.put(bond.getName(), bond.getId()); } dataFromHostSetupNetworksModel.setOriginalBondNameToId(originalBondNameToId); }	private void initOrginalBondNameToIdMap(org.ovirt.engine.core.common.action.CreateOrUpdateBond... bonds) { dataFromHostSetupNetworksModel.setOriginalBondsByName(org.ovirt.engine.core.common.businessentities.Entities.entitiesByName(java.util.Arrays.asList(bonds))); }
public void setOriginalBondNameToId(java.util.Map<java.lang.String, org.ovirt.engine.core.compat.Guid> originalBondNameToId) { this.originalBondNameToId = originalBondNameToId; }	public void setOriginalBondsByName(java.util.Map<java.lang.String, org.ovirt.engine.core.common.action.CreateOrUpdateBond> originalBondsByName) { this.originalBondsByName = originalBondsByName; }
@org.junit.Test public void testBondNotUpdatedAndRemovedSimultaneouslyNotValid() { org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(bond)).addRemovedBonds(bond.getId()).build(); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(params).build(); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.BOND_UPDATED_AND_REMOVED_SIMULTANEOUSLY; assertThat(validator.bondNotUpdatedAndRemovedSimultaneously(), failsWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, java.util.Collections.singletonList(bond.getName())))); }	@org.junit.Test public void testBondNotUpdatedAndRemovedSimultaneouslyNotValid() { org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(bond)).addRemovedBonds(bond.getId()).build(); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(params).build(); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.BONDS_UPDATED_AND_REMOVED_SIMULTANEOUSLY; assertThat(validator.bondNotUpdatedAndRemovedSimultaneously(), failsWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, java.util.Collections.singletonList(bond.getName())))); }
public org.ovirt.engine.core.bll.ValidationResult bondNotUpdatedAndRemovedSimultaneously() { java.util.List<org.ovirt.engine.core.common.action.CreateOrUpdateBond> duplicateBonds = params.getCreateOrUpdateBonds().stream().filter(( bond) -> params.getRemovedBonds().contains(bond.getId())).collect(java.util.stream.Collectors.toList()); if (org.apache.commons.collections.CollectionUtils.isNotEmpty(duplicateBonds)) { org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.BOND_UPDATED_AND_REMOVED_SIMULTANEOUSLY; return new org.ovirt.engine.core.bll.ValidationResult(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, duplicateBonds.stream().map(CreateOrUpdateBond::getName).collect(java.util.stream.Collectors.toList()))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult bondNotUpdatedAndRemovedSimultaneously() { java.util.List<java.lang.String> bondsUpdatedAndRemovedSimultaneously = params.getCreateOrUpdateBonds().stream().filter(( bond) -> params.getRemovedBonds().contains(bond.getId())).map(CreateOrUpdateBond::getName).collect(java.util.stream.Collectors.toList()); if (org.apache.commons.collections.CollectionUtils.isNotEmpty(bondsUpdatedAndRemovedSimultaneously)) { org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.BONDS_UPDATED_AND_REMOVED_SIMULTANEOUSLY; return new org.ovirt.engine.core.bll.ValidationResult(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, bondsUpdatedAndRemovedSimultaneously)); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
java.lang.String BOND_UPDATED_AND_REMOVED_SIMULTANEOUSLY();	java.lang.String BONDS_UPDATED_AND_REMOVED_SIMULTANEOUSLY();
@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { if (status == (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { org.ovirt.engine.core.compat.Guid cmdId = command.getCommandId(); org.ovirt.engine.core.bll.SerialChildExecutingCommand serialChildExecutingCommand = ((org.ovirt.engine.core.bll.SerialChildExecutingCommand) (command)); if ((!anyFailed) || (serialChildExecutingCommand.ignoreChildCommandFailure())) { try { boolean endCommand = !(serialChildExecutingCommand.performNextOperation(completedChildren)); if (!endCommand) { return; } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.info("Command '{}' id: '{}' failed when attempting to perform the next operation, marking as FAILED '{}'", command.getActionType(), cmdId, childCmdIds, command.getCommandStatus()); serialChildExecutingCommand.handleFailure(); anyFailed = true; } } else { serialChildExecutingCommand.handleFailure(); } } setCommandEndStatus(command, anyFailed, status, childCmdIds); }	@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.compat.Guid cmdId = command.getCommandId(); if (status == (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { org.ovirt.engine.core.bll.SerialChildExecutingCommand serialChildExecutingCommand = ((org.ovirt.engine.core.bll.SerialChildExecutingCommand) (command)); if ((!anyFailed) || (serialChildExecutingCommand.ignoreChildCommandFailure())) { try { boolean endCommand = !(serialChildExecutingCommand.performNextOperation(completedChildren)); if (!endCommand) { return; } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.info("Command '{}' id: '{}' failed when attempting to perform the next operation, marking as FAILED '{}'", command.getActionType(), cmdId, childCmdIds, command.getCommandStatus()); serialChildExecutingCommand.handleFailure(); anyFailed = true; } } else { serialChildExecutingCommand.handleFailure(); } } else { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.info("Command '{}' id: '{}' execution didn't complete, not proceeding to perform the next operation", command.getActionType(), cmdId); } setCommandEndStatus(command, anyFailed, status, childCmdIds); }
@org.junit.Test public void testExecuteQueryWithNotExistingIscsiBond() { org.ovirt.engine.core.common.businessentities.IscsiBond iscsiBond = new org.ovirt.engine.core.common.businessentities.IscsiBond(); iscsiBond.setId(org.ovirt.engine.core.compat.Guid.newGuid()); when(getQueryParameters().getId()).thenReturn(iscsiBondId); getQuery().executeQueryCommand(); org.ovirt.engine.core.common.businessentities.IscsiBond result = getQuery().getQueryReturnValue().getReturnValue(); assertNull(result); }	@org.junit.Test public void testExecuteQueryWithNotExistingIscsiBond() { when(getQueryParameters().getId()).thenReturn(iscsiBondId); getQuery().executeQueryCommand(); org.ovirt.engine.core.common.businessentities.IscsiBond result = getQuery().getQueryReturnValue().getReturnValue(); assertNull(result); }
@java.lang.Override protected void executeCommand() { T parameters = org.ovirt.engine.core.bll.AddDeprecatedApiEventCommand.getParameters(); addCustomValue("ApiVersion", parameters.getApiVersion()); addCustomValue("ClientAddress", parameters.getClientAddress()); addCustomValue("DeprecatingVersion", parameters.getDeprecatingVersion()); addCustomValue("RemovingVersion", parameters.getRemovingVersion()); org.ovirt.engine.core.bll.AddDeprecatedApiEventCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { T parameters = org.ovirt.engine.core.bll.AddDeprecatedApiEventCommand.getParameters(); setCustomId(parameters.getClientAddress()); addCustomValue("ApiVersion", parameters.getApiVersion()); addCustomValue("ClientAddress", parameters.getClientAddress()); addCustomValue("DeprecatingVersion", parameters.getDeprecatingVersion()); addCustomValue("RemovingVersion", parameters.getRemovingVersion()); org.ovirt.engine.core.bll.AddDeprecatedApiEventCommand.setSucceeded(true); }
@java.lang.Override public void init(javax.servlet.FilterConfig config) throws javax.servlet.ServletException { org.ovirt.engine.api.restapi.LocalConfig localConfig = org.ovirt.engine.api.restapi.LocalConfig.getInstance(); supportedVersions = localConfig.getSupportedVersions(); defaultVersion = localConfig.getDefaultVersion(); java.util.Set<org.ovirt.engine.api.restapi.DeprecatedVersionInfo> deprecatedVersionInfos = localConfig.getDeprecatedVersions(); deprecatedVersionsSet = deprecatedVersionInfos.stream().map(DeprecatedVersionInfo::getVersion).collect(java.util.stream.Collectors.toSet()); deprecatedVersionsMap = deprecatedVersionInfos.stream().collect(java.util.stream.Collectors.toMap(DeprecatedVersionInfo::getVersion, java.util.function.Function.identity())); deprecatedMessagesTime = (localConfig.getDeprecatedMessagesFrequency()) * 1000L; }	@java.lang.Override public void init(javax.servlet.FilterConfig config) throws javax.servlet.ServletException { org.ovirt.engine.api.restapi.LocalConfig localConfig = org.ovirt.engine.api.restapi.LocalConfig.getInstance(); supportedVersions = localConfig.getSupportedVersions(); defaultVersion = localConfig.getDefaultVersion(); java.util.Set<org.ovirt.engine.api.restapi.DeprecatedVersionInfo> deprecatedVersionInfos = localConfig.getDeprecatedVersions(); deprecatedVersionsSet = deprecatedVersionInfos.stream().map(DeprecatedVersionInfo::getVersion).collect(java.util.stream.Collectors.toSet()); deprecatedVersionsMap = deprecatedVersionInfos.stream().collect(java.util.stream.Collectors.toMap(DeprecatedVersionInfo::getVersion, java.util.function.Function.identity())); }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Start initializing {}", getClass().getSimpleName()); org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Setting data center compatibility checker manager to run every 7 days"); schedulerUtil.scheduleAFixedDelayJob(this, "onTimer", new java.lang.Class[]{ }, new java.lang.Object[]{ }, 0, 7, java.util.concurrent.TimeUnit.DAYS); org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Finished initializing {}", getClass().getSimpleName()); }	@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Start initializing {}", getClass().getSimpleName()); schedulerUtil.scheduleAFixedDelayJob(this, "onTimer", new java.lang.Class[]{ }, new java.lang.Object[]{ }, 0, 7, java.util.concurrent.TimeUnit.DAYS); org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Finished initializing {}", getClass().getSimpleName()); }
@java.lang.Override public synchronized java.lang.String format(java.util.logging.LogRecord record) { cal.setTimeZone(org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.timeZone); org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.dateTimeFormat.setTimeZone(org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.timeZone); cal.setTimeInMillis(record.getMillis()); java.lang.String source; if ((record.getSourceClassName()) != null) { source = record.getSourceClassName(); if ((record.getSourceMethodName()) != null) { source += " " + (record.getSourceMethodName()); } } else { source = record.getLoggerName(); } java.lang.String message = formatMessage(record); java.lang.String throwable = ""; if ((record.getThrown()) != null) { java.io.StringWriter sw = new java.io.StringWriter(); java.io.PrintWriter pw = new java.io.PrintWriter(sw); pw.println(); record.getThrown().printStackTrace(pw); pw.close(); throwable = sw.toString(); } return java.lang.String.format(org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.recordFormat, org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.dateTimeFormat.format(cal.getTime()), source, record.getLoggerName(), record.getLevel().getName(), message, throwable); }	@java.lang.Override public synchronized java.lang.String format(java.util.logging.LogRecord record) { final java.util.Calendar cal = java.util.Calendar.getInstance(); cal.setTimeZone(org.ovirt.engine.core.logutils.TimeZoneBasedFormatter.timeZone); org.ovirt.engine.core.logutils.TimeZoneBasedFormatter.dateTimeFormat.setTimeZone(org.ovirt.engine.core.logutils.TimeZoneBasedFormatter.timeZone); cal.setTimeInMillis(record.getMillis()); java.lang.String source; if ((record.getSourceClassName()) != null) { source = record.getSourceClassName(); if ((record.getSourceMethodName()) != null) { source += " " + (record.getSourceMethodName()); } } else { source = record.getLoggerName(); } java.lang.String message = formatMessage(record); java.lang.String throwable = ""; if ((record.getThrown()) != null) { try (java.io.CharArrayWriter wr = new java.io.CharArrayWriter(1024);java.io.PrintWriter pw = new java.io.PrintWriter(wr)) { pw.println(); record.getThrown().printStackTrace(pw); throwable = wr.toString(); } } return java.lang.String.format(org.ovirt.engine.core.logutils.TimeZoneBasedFormatter.recordFormat, org.ovirt.engine.core.logutils.TimeZoneBasedFormatter.dateTimeFormat.format(cal.getTime()), source, record.getLoggerName(), record.getLevel().getName(), message, throwable); }
private static java.lang.String getLoggingProperty(java.lang.String key, java.lang.String defaultValue) { java.lang.String value = java.util.logging.LogManager.getLogManager().getProperty(key); return value == null ? defaultValue : value; }	private static java.lang.String getLoggingProperty(java.lang.String key, java.lang.String defaultValue) { java.lang.String value = java.util.logging.LogManager.getLogManager().getProperty(key); return (value == null) || (value.isEmpty()) ? defaultValue : value; }
public static void main(java.lang.String... args) { org.ovirt.engine.core.config.EngineConfigCLIParser parser = null; try { parser = new org.ovirt.engine.core.config.EngineConfigCLIParser(); parser.parse(args); org.ovirt.engine.core.config.EngineConfigMap argsMap = parser.getEngineConfigMap(); if ((argsMap.getLogFile()) != null) { org.ovirt.engine.core.uutils.log.JavaLoggingUtils.addFileHandler(argsMap.getLogFile()); } if ((argsMap.getLogLevel()) != null) { org.ovirt.engine.core.uutils.log.JavaLoggingUtils.setLogLevel(argsMap.getLogLevel()); } } catch (java.lang.Throwable t) { java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } try { org.ovirt.engine.core.config.EngineConfig.getInstance().setUpAndExecute(parser); } catch (java.lang.Throwable t) { org.slf4j.LoggerFactory.getLogger(org.ovirt.engine.core.config.EngineConfigExecutor.class).debug("Exiting with error: ", t); java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } }	public static void main(java.lang.String... args) { org.ovirt.engine.core.config.EngineConfigCLIParser parser = null; try { parser = new org.ovirt.engine.core.config.EngineConfigCLIParser(); parser.parse(args); org.ovirt.engine.core.config.EngineConfigMap argsMap = parser.getEngineConfigMap(); if ((argsMap.getLogFile()) != null) { org.ovirt.engine.core.logutils.JavaLoggingUtils.addFileHandler(argsMap.getLogFile()); } if ((argsMap.getLogLevel()) != null) { org.ovirt.engine.core.logutils.JavaLoggingUtils.setLogLevel(argsMap.getLogLevel()); } } catch (java.lang.Throwable t) { java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } try { org.ovirt.engine.core.config.EngineConfig.getInstance().setUpAndExecute(parser); } catch (java.lang.Throwable t) { org.slf4j.LoggerFactory.getLogger(org.ovirt.engine.core.config.EngineConfigExecutor.class).debug("Exiting with error: ", t); java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } }
public static void main(java.lang.String[] args) { org.ovirt.engine.core.notifier.utils.NotificationProperties prop = null; org.ovirt.engine.core.notifier.NotificationService notificationService = null; org.ovirt.engine.core.notifier.EngineMonitorService engineMonitorService = null; try { prop = org.ovirt.engine.core.notifier.utils.NotificationProperties.getInstance(); org.ovirt.engine.core.uutils.log.JavaLoggingUtils.setLogLevel(prop.getProperty(org.ovirt.engine.core.notifier.LOG_LEVEL)); prop.validate(); notificationService = new org.ovirt.engine.core.notifier.NotificationService(prop); engineMonitorService = new org.ovirt.engine.core.notifier.EngineMonitorService(prop); notificationService.registerTransport(new org.ovirt.engine.core.notifier.transport.smtp.Smtp(prop)); notificationService.registerTransport(new org.ovirt.engine.core.notifier.transport.snmp.Snmp(prop)); if (!(notificationService.hasTransports())) { throw new java.lang.RuntimeException(("No transport is enabled, please enable at least one of SMTP (using MAIL_SERVER option)" + " or SNMP (using SNMP_MANAGERS option) transports.")); } } catch (java.lang.Exception ex) { org.ovirt.engine.core.notifier.Notifier.log.error("Failed to initialize", ex); java.lang.System.err.println(ex.getMessage()); java.lang.System.exit(1); } if (((args != null) && ((args.length) > 0)) && (org.ovirt.engine.core.notifier.Notifier.ARG_VALIDATE.equals(args[0]))) { java.lang.System.exit(0); } try { notificationService.run(); engineMonitorService.run(); } catch (java.lang.Exception e) { org.ovirt.engine.core.notifier.Notifier.log.error("Failed to run the event notification service. ", e); java.lang.System.exit(1); } }	public static void main(java.lang.String[] args) { org.ovirt.engine.core.notifier.utils.NotificationProperties prop = null; org.ovirt.engine.core.notifier.NotificationService notificationService = null; org.ovirt.engine.core.notifier.EngineMonitorService engineMonitorService = null; try { prop = org.ovirt.engine.core.notifier.utils.NotificationProperties.getInstance(); org.ovirt.engine.core.logutils.JavaLoggingUtils.setLogLevel(prop.getProperty(org.ovirt.engine.core.notifier.LOG_LEVEL)); prop.validate(); notificationService = new org.ovirt.engine.core.notifier.NotificationService(prop); engineMonitorService = new org.ovirt.engine.core.notifier.EngineMonitorService(prop); notificationService.registerTransport(new org.ovirt.engine.core.notifier.transport.smtp.Smtp(prop)); notificationService.registerTransport(new org.ovirt.engine.core.notifier.transport.snmp.Snmp(prop)); if (!(notificationService.hasTransports())) { throw new java.lang.RuntimeException(("No transport is enabled, please enable at least one of SMTP (using MAIL_SERVER option)" + " or SNMP (using SNMP_MANAGERS option) transports.")); } } catch (java.lang.Exception ex) { org.ovirt.engine.core.notifier.Notifier.log.error("Failed to initialize", ex); java.lang.System.err.println(ex.getMessage()); java.lang.System.exit(1); } if (((args != null) && ((args.length) > 0)) && (org.ovirt.engine.core.notifier.Notifier.ARG_VALIDATE.equals(args[0]))) { java.lang.System.exit(0); } try { notificationService.run(); engineMonitorService.run(); } catch (java.lang.Exception e) { org.ovirt.engine.core.notifier.Notifier.log.error("Failed to run the event notification service. ", e); java.lang.System.exit(1); } }
public static void setLogLevel(java.lang.String levelName) { org.ovirt.engine.core.uutils.log.JavaLoggingUtils.OVIRT_LOGGER.setLevel(org.ovirt.engine.core.uutils.log.JavaLoggingUtils.parseLevel(levelName)); }	public static void setLogLevel(java.lang.String levelName) { org.ovirt.engine.core.logutils.JavaLoggingUtils.OVIRT_LOGGER.setLevel(org.ovirt.engine.core.logutils.JavaLoggingUtils.parseLevel(levelName)); }
private java.lang.Integer calcMaxVCpu() { org.ovirt.engine.core.common.businessentities.ArchitectureType architecture = vm.getClusterArch().getFamily(); return org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu(vm.getStaticData(), vm.getClusterCompatibilityVersion(), architecture); }	private java.lang.Integer calcMaxVCpu() { return org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu(vm, vm.getClusterCompatibilityVersion()); }
private static int bitWidth(int n) { return n == 0 ? 0 : 32 - (java.lang.Integer.numberOfLeadingZeros(n)); }	private static int bitWidth(int n) { return n == 0 ? 0 : 32 - (java.lang.Integer.numberOfLeadingZeros((n - 1))); }
public static boolean validateCpuCounts(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.businessentities.ArchitectureType architecture = vm.getClusterArch().getFamily(); if (architecture == (org.ovirt.engine.core.common.businessentities.ArchitectureType.x86)) { return (org.ovirt.engine.core.common.utils.VmCpuCountHelper.bitWidth(((org.ovirt.engine.core.common.utils.VmCpuCountHelper.bitWidth(vm.getThreadsPerCpu())) + (org.ovirt.engine.core.common.utils.VmCpuCountHelper.bitWidth(vm.getCpuPerSocket()))))) <= (org.ovirt.engine.core.common.utils.VmCpuCountHelper.maxBitWidth); } return true; }	public static boolean validateCpuCounts(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.businessentities.ArchitectureType architecture = org.ovirt.engine.core.common.utils.VmCpuCountHelper.architectureFamily(vm); if ((architecture == null) || (architecture == (org.ovirt.engine.core.common.businessentities.ArchitectureType.x86))) { return ((org.ovirt.engine.core.common.utils.VmCpuCountHelper.bitWidth(vm.getThreadsPerCpu())) + (org.ovirt.engine.core.common.utils.VmCpuCountHelper.bitWidth(vm.getCpuPerSocket()))) <= (org.ovirt.engine.core.common.utils.VmCpuCountHelper.maxBitWidth); } return true; }
private void writevCpu(org.ovirt.engine.core.utils.ovf.xml.XmlTextWriter writer, java.util.Map<java.lang.String, java.lang.Object> createInfo, org.ovirt.engine.core.common.businessentities.VM vm) { writer.writeStartElement("vcpu"); writer.writeAttributeString("current", java.lang.String.valueOf(vm.getNumOfCpus())); writer.writeRaw((org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.HotPlugCpuSupported, vm.getCompatibilityVersion(), vm.getClusterArch()) ? org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu(vm.getStaticData(), vm.getClusterCompatibilityVersion(), vm.getClusterArch().getFamily()).toString() : java.lang.String.valueOf(vm.getNumOfCpus()))); writer.writeEndElement(); }	private void writevCpu() { writer.writeStartElement("vcpu"); writer.writeAttributeString("current", java.lang.String.valueOf(vm.getNumOfCpus())); writer.writeRaw((org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.HotPlugCpuSupported, vm.getCompatibilityVersion(), vm.getClusterArch()) ? org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu(vm, vm.getClusterCompatibilityVersion()).toString() : java.lang.String.valueOf(vm.getNumOfCpus()))); writer.writeEndElement(); }
public void updateSuggestedLabels() { suggestedLabels = new java.util.TreeSet<>(suggestedLabelsCache); suggestedLabels.removeAll(computeSelecetedLabels()); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : getItems()) { labelModel.setItems(suggestedLabels, labelModel.getSelectedItem()); } }	public void updateSuggestedLabels() { suggestedLabels = new java.util.TreeSet<>(suggestedLabelsCache); suggestedLabels.removeAll(computeSelectedLabels()); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : getItems()) { labelModel.setItems(suggestedLabels, labelModel.getSelectedItem()); } }
@java.lang.Override protected void onAdd(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value, org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor widget) { super.onAdd(value, widget); value.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsNicLabelWidget.this, null); model.updateSuggestedLabels(); } }); }	@java.lang.Override protected void onAdd(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value, org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor widget) { super.onAdd(value, widget); getModel().updateSuggestedLabels(); value.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { selectedLabelsChanged(); } }); }
@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value, org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor widget) { super.onRemove(value, widget); com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, null); model.updateSuggestedLabels(); }	@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value, org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor widget) { super.onRemove(value, widget); getModel().updateSuggestedLabels(); }
@java.lang.Override protected void init(final org.ovirt.engine.ui.uicommonweb.models.hosts.VfsNicLabelModel model) { super.init(model); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : model.getItems()) { labelModel.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsNicLabelWidget.this, null); model.updateSuggestedLabels(); } }); } }	private void selectedLabelsChanged() { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, null); getModel().updateSuggestedLabels(); }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.VfsNicLabelModel model) { super.edit(model); }	@java.lang.Override protected void init(final org.ovirt.engine.ui.uicommonweb.models.hosts.VfsNicLabelModel model) { super.init(model); getModel().updateSuggestedLabels(); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : model.getItems()) { labelModel.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { selectedLabelsChanged(); } }); } }
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> createGhostValue() { org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); value.setItems(flush().getSuggestedLabels()); value.setSelectedItem(""); return value; }	@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> createGhostValue() { org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); value.setSelectedItem(""); return value; }
@org.junit.Before public void init() { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.String>> initialHashes = new java.util.ArrayList<>(); initialHashes.add(new org.ovirt.engine.core.common.utils.Pair(org.ovirt.engine.core.vdsbroker.monitoring.VmDevicesMonitoringTest.VM_ID, org.ovirt.engine.core.vdsbroker.monitoring.VmDevicesMonitoringTest.INITIAL_HASH)); doReturn(initialHashes).when(vmDynamicDao).getAllDevicesHashes(); }	@org.junit.Before public void init() { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.String>> initialHashes = new java.util.ArrayList<>(); initialHashes.add(new org.ovirt.engine.core.common.utils.Pair(org.ovirt.engine.core.vdsbroker.monitoring.VmDevicesMonitoringTest.VM_ID, org.ovirt.engine.core.vdsbroker.monitoring.VmDevicesMonitoringTest.INITIAL_HASH)); doReturn(initialHashes).when(vmDynamicDao).getAllDevicesHashes(); org.ovirt.engine.core.vdsbroker.monitoring.VmDevicesMonitoringTest.injectorRule.bind(javax.transaction.TransactionManager.class, transactionManager); }
protected org.ovirt.engine.core.common.vdscommands.VDSCommandType getLeaseAction() { return org.ovirt.engine.core.common.vdscommands.VDSCommandType.AddVmLease; }	@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSCommandType getLeaseAction() { return org.ovirt.engine.core.common.vdscommands.VDSCommandType.AddVmLease; }
protected boolean removeVmLease(org.ovirt.engine.core.compat.Guid leaseStorageDomainId, org.ovirt.engine.core.compat.Guid vmId) { if (leaseStorageDomainId == null) { return true; } return runInternalAction(VdcActionType.RemoveVmLease, new org.ovirt.engine.core.common.action.VmLeaseParameters(getStoragePoolId(), leaseStorageDomainId, vmId)).getSucceeded(); }	protected boolean removeVmLease(org.ovirt.engine.core.compat.Guid leaseStorageDomainId, org.ovirt.engine.core.compat.Guid vmId) { if (leaseStorageDomainId == null) { return true; } return runInternalActionWithTasksContext(VdcActionType.RemoveVmLease, new org.ovirt.engine.core.common.action.VmLeaseParameters(getStoragePoolId(), leaseStorageDomainId, vmId)).getSucceeded(); }
protected boolean addVmLease(org.ovirt.engine.core.compat.Guid leaseStorageDomainId, org.ovirt.engine.core.compat.Guid vmId) { if (leaseStorageDomainId == null) { return true; } return runInternalAction(VdcActionType.AddVmLease, new org.ovirt.engine.core.common.action.VmLeaseParameters(getStoragePoolId(), leaseStorageDomainId, vmId)).getSucceeded(); }	protected boolean addVmLease(org.ovirt.engine.core.compat.Guid leaseStorageDomainId, org.ovirt.engine.core.compat.Guid vmId) { if (leaseStorageDomainId == null) { return true; } return runInternalActionWithTasksContext(VdcActionType.AddVmLease, new org.ovirt.engine.core.common.action.VmLeaseParameters(getStoragePoolId(), leaseStorageDomainId, vmId)).getSucceeded(); }
protected org.ovirt.engine.core.common.vdscommands.VDSCommandType getLeaseAction() { return org.ovirt.engine.core.common.vdscommands.VDSCommandType.RemoveVmLease; }	@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSCommandType getLeaseAction() { return org.ovirt.engine.core.common.vdscommands.VDSCommandType.RemoveVmLease; }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.getForStoragePool(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getStoragePoolId()); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); return (validate(validator.isDomainExistAndActive())) && (validate(validator.isDataDomain())); }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.getForStoragePool(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getStoragePoolId()); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); return (validate(validator.isDomainExistAndActive())) && (validate(validator.isDataDomain())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionCheckSubjects = new java.util.ArrayList<>(); permissionCheckSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getLeaseStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getActionType().getActionGroup())); return permissionCheckSubjects; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionCheckSubjects = new java.util.ArrayList<>(); permissionCheckSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getActionType().getActionGroup())); return permissionCheckSubjects; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getParentCommand()); org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters params = new org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getVmId()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(getLeaseAction(), params); if (returnValue.getSucceeded()) { org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getTaskIdList().add(createTask(taskId, returnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getActionType(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getLeaseStorageDomainId())); } setSucceeded(returnValue.getSucceeded()); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getParentCommand()); org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters params = new org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getVmId()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(getLeaseAction(), params); if (returnValue.getSucceeded()) { org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getTaskIdList().add(createTask(taskId, returnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getActionType(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getStorageDomainId())); } setSucceeded(returnValue.getSucceeded()); }
@org.junit.Test public void networkInUseBySingleVm() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VM vm = mock(org.ovirt.engine.core.common.businessentities.VM.class); when(vm.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); networkNotUsedByVmsTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.failsWithOneNetworkInUse(), java.util.Collections.singletonList(vm)); }	@org.junit.Test public void networkInUseByOneVm() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VM vm = mock(org.ovirt.engine.core.common.businessentities.VM.class); when(vm.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); networkNotUsedByVmsTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.failsWithOneNetworkInUse(), java.util.Collections.singletonList(vm)); }
@org.junit.Test public void networkInUseByTemplates() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmTemplate template = mock(org.ovirt.engine.core.common.businessentities.VmTemplate.class); when(template.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); networkNotUsedByTemplatesTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.failsWithOneNetworkInUse(), java.util.Collections.singletonList(template)); }	@org.junit.Test public void networkInUseByManyTemplates() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmTemplate template1 = mock(org.ovirt.engine.core.common.businessentities.VmTemplate.class); when(template1.getName()).thenReturn(((org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME) + 1)); org.ovirt.engine.core.common.businessentities.VmTemplate template2 = mock(org.ovirt.engine.core.common.businessentities.VmTemplate.class); when(template2.getName()).thenReturn(((org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME) + 2)); networkNotUsedByTemplatesTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.failsWithManyNetworkInUse(), java.util.Arrays.asList(template1, template2)); }
@org.junit.Test public void networkInUseByHosts() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VDS host = mock(org.ovirt.engine.core.common.businessentities.VDS.class); when(host.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); networkNotUsedByHostsTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.failsWithOneNetworkInUse(), java.util.Collections.singletonList(host)); }	@org.junit.Test public void networkInUseByManyHosts() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VDS host1 = mock(org.ovirt.engine.core.common.businessentities.VDS.class); when(host1.getName()).thenReturn(((org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME) + 1)); org.ovirt.engine.core.common.businessentities.VDS host2 = mock(org.ovirt.engine.core.common.businessentities.VDS.class); when(host2.getName()).thenReturn(((org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME) + 2)); networkNotUsedByHostsTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.failsWithManyNetworkInUse(), java.util.Arrays.asList(host1, host2)); }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()) != null) { vmPoolDao.removeVmFromVmPool(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmId()); if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isUpdatePrestartedVms()) { vmPoolDao.boundVmPoolPrestartedVms(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()); } if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isRemovePoolUponDetachAllVMs()) { removeVmPool(); } org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); } }	@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()) != null) { vmPoolDao.removeVmFromVmPool(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmId()); if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isUpdatePrestartedVms()) { vmPoolDao.boundVmPoolPrestartedVms(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()); } if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isRemovePoolUponDetachAllVMs()) { removeVmPoolIfNeeded(); } org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); } }
protected void removeVmPool() { try { lockManager.acquireLockWait(new org.ovirt.engine.core.utils.lock.EngineLock(getExclusiveLockForPoolDetach())); if ((vmPoolDao.getVmPoolsMapByVmPoolId(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()).size()) == 0) { org.ovirt.engine.core.common.action.VmPoolParametersBase removePoolParam = new org.ovirt.engine.core.common.action.VmPoolParametersBase(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()); removePoolParam.setSessionId(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().getSessionId()); if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isUpdatePrestartedVms()) { removePoolParam.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); } org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.RemoveVmPool, removePoolParam); } } finally { lockManager.releaseLock(new org.ovirt.engine.core.utils.lock.EngineLock(getExclusiveLockForPoolDetach())); } org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); }	protected void removeVmPoolIfNeeded() { try { lockManager.acquireLockWait(new org.ovirt.engine.core.utils.lock.EngineLock(getExclusiveLockForPoolDetach())); if (vmPoolDao.getVmPoolsMapByVmPoolId(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()).isEmpty()) { vmPoolDao.remove(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()); } } finally { lockManager.releaseLock(new org.ovirt.engine.core.utils.lock.EngineLock(getExclusiveLockForPoolDetach())); } }
@org.junit.Test public void replaceProductKey_definedKeyShouldBeReplaced() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "someKey", false); assertThat(res, containsString("<Key><![CDATA[someKey]]></Key>")); }	@org.junit.Test public void replaceProductKeyDefinedKeyShouldBeReplaced() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "someKey", false); assertThat(res, containsString("<Key><![CDATA[someKey]]></Key>")); }
@org.junit.Test public void replaceProductKey_emptyKeyShouldRemoveTheWholeSection() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "", false); assertThat(res, not(containsString("<ProductKey>"))); assertThat(res, not(containsString("</ProductKey>"))); }	@org.junit.Test public void replaceProductKeyEmptyKeyShouldRemoveTheWholeSection() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "", false); assertThat(res, not(containsString("<ProductKey>"))); assertThat(res, not(containsString("</ProductKey>"))); }
@org.junit.Test public void replaceProductKey_emptyKeyShouldNotRemoveTheWholeSectionForCustomScript() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "", true); assertThat(res, containsString("<ProductKey>")); assertThat(res, containsString("</ProductKey>")); }	@org.junit.Test public void replaceProductKeyEmptyKeyShouldNotRemoveTheWholeSectionForCustomScript() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "", true); assertThat(res, containsString("<ProductKey>")); assertThat(res, containsString("</ProductKey>")); }
@org.junit.Test public void testLimit() { java.lang.Integer maxVCpu = org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu(null, new java.lang.Integer(16), new java.lang.Integer(100), 2, 8); assertEquals(new java.lang.Integer(100), maxVCpu); }	@org.junit.Test public void testLimit() { java.lang.Integer maxVCpu = org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu(null, new java.lang.Integer(16), new java.lang.Integer(100), 2, 8); assertEquals(new java.lang.Integer(96), maxVCpu); }
@com.google.gwt.uibinder.client.UiHandler("container") void onPanelDragDrop(com.google.gwt.event.dom.client.DropEvent event) { java.lang.String vmGid = event.getData("VM_GID"); if (!(vmGid.isEmpty())) { org.ovirt.engine.core.compat.Guid vmGuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(vmGid); boolean pinned = java.lang.Boolean.valueOf(event.getData("PINNED")); int vNumaNodeIndex = java.lang.Integer.parseInt(event.getData("INDEX")); container.removeStyleName(style.dragOver()); event.preventDefault(); org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(this, vmGuid, pinned, vNumaNodeIndex, pNumaNodeIndex); } }	@com.google.gwt.uibinder.client.UiHandler("container") void onPanelDragDrop(com.google.gwt.event.dom.client.DropEvent event) { java.lang.String vmGid = event.getData("VM_GID"); if (org.ovirt.engine.ui.uicompat.external.StringUtils.isNotEmpty(vmGid)) { org.ovirt.engine.core.compat.Guid vmGuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(vmGid); boolean pinned = java.lang.Boolean.valueOf(event.getData("PINNED")); int vNumaNodeIndex = java.lang.Integer.parseInt(event.getData("INDEX")); container.removeStyleName(style.dragOver()); event.preventDefault(); org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(this, vmGuid, pinned, vNumaNodeIndex, pNumaNodeIndex); } else { container.removeStyleName(style.dragOver()); } }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityValue(org.ovirt.engine.core.common.businessentities.StoragePool object) { java.util.List<com.google.gwt.safehtml.shared.SafeHtml> imagesHtml = new java.util.ArrayList(getSafeHtmlStringMap(object).keySet()); if (!(imagesHtml.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getValue(imagesHtml); } return null; }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityValue(org.ovirt.engine.core.common.businessentities.StoragePool object) { if (object.isStoragePoolCompatibilityLevelUpgradeNeeded()) { return getImageSafeHtml(IconType.EXCLAMATION); } return null; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityTooltip(org.ovirt.engine.core.common.businessentities.StoragePool object) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = getSafeHtmlStringMap(object); if (!(imagesToText.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getDataCenterTooltip(imagesToText); } return null; }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityTooltip(org.ovirt.engine.core.common.businessentities.StoragePool object) { if (object.isStoragePoolCompatibilityLevelUpgradeNeeded()) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(org.ovirt.engine.ui.webadmin.widget.table.column.DcAdditionalStatusColumn.constants.clusterLevelUpgradeNeeded()); } return null; }
public boolean isClusterCompatibilityLevelUpgradeNeeded() { return clusterCompatibilityLevelUpgradeNeeded; }	public boolean isStoragePoolCompatibilityLevelUpgradeNeeded() { return storagePoolCompatibilityLevelUpgradeNeeded; }
@org.ovirt.engine.ui.webadmin.Template("<span style='position: relative; margin-left: 3px; margin-right: 3px; white-space: nowrap; height: 14px; line-height: 14px;'>{0}</span></span>") com.google.gwt.safehtml.shared.SafeHtml text(java.lang.String text);	@org.ovirt.engine.ui.webadmin.Template("<i class= \"fa {0}\" style= \"font-size:16px;color:orange;\"></i>") com.google.gwt.safehtml.shared.SafeHtml iconTypeAlertTemplate(java.lang.String css);
public void setClusterCompatibilityLevelUpgradeNeeded(boolean clusterCompatibilityLevelUpgradeNeeded) { this.clusterCompatibilityLevelUpgradeNeeded = clusterCompatibilityLevelUpgradeNeeded; }	public void setStoragePoolCompatibilityLevelUpgradeNeeded(boolean storagePoolCompatibilityLevelUpgradeNeeded) { this.storagePoolCompatibilityLevelUpgradeNeeded = storagePoolCompatibilityLevelUpgradeNeeded; }
protected com.google.gwt.safehtml.shared.SafeHtml getImageSafeHtml(org.gwtbootstrap3.client.ui.constants.IconType iconType) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString((("<i class='fa " + (iconType.getCssName())) + "' style='font-size:16px;color:orange'></i>")); }	protected com.google.gwt.safehtml.shared.SafeHtml getImageSafeHtml(org.gwtbootstrap3.client.ui.constants.IconType iconType) { return org.ovirt.engine.ui.webadmin.gin.AssetProvider.getTemplates().iconTypeAlertTemplate(iconType.getCssName()); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityTooltip(org.ovirt.engine.core.common.businessentities.Cluster object) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = getSafeHtmlStringMap(object); if (!(imagesToText.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getDataCenterTooltip(imagesToText); } return null; }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityTooltip(org.ovirt.engine.core.common.businessentities.Cluster object) { if (object.isClusterCompatibilityLevelUpgradeNeeded()) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(org.ovirt.engine.ui.webadmin.widget.table.column.ClusterAdditionalStatusColumn.constants.clusterLevelUpgradeNeeded()); } return null; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityValue(org.ovirt.engine.core.common.businessentities.Cluster object) { java.util.List<com.google.gwt.safehtml.shared.SafeHtml> imagesHtml = new java.util.ArrayList(getSafeHtmlStringMap(object).keySet()); if (!(imagesHtml.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getValue(imagesHtml); } return null; }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityValue(org.ovirt.engine.core.common.businessentities.Cluster object) { if (object.isClusterCompatibilityLevelUpgradeNeeded()) { return getImageSafeHtml(IconType.EXCLAMATION); } return null; }
private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(( v1, v2) -> v1.compareTo(v2)); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); if (retVal.isPresent()) { org.ovirt.engine.core.compat.Version version = retVal.get(); dataCenters.stream().forEach(( dataCenter) -> dataCenter.setClusterCompatibilityLevelUpgradeNeeded(((version.compareTo(dataCenter.getCompatibilityVersion())) > 0))); } return dataCenters; }	private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(( v1, v2) -> v1.compareTo(v2)); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); if (retVal.isPresent()) { dataCenters.stream().forEach(( dataCenter) -> dataCenter.setStoragePoolCompatibilityLevelUpgradeNeeded(((retVal.get().compareTo(dataCenter.getCompatibilityVersion())) > 0))); } return dataCenters; }
java.lang.String dcUpgradeNeeded();	java.lang.String clusterLevelUpgradeNeeded();
protected org.ovirt.engine.core.common.businessentities.VMStatus createVm() { initParametersForExternalNetworks(); initParametersForPassthroughVnics(); org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = ((org.ovirt.engine.core.common.businessentities.VMStatus) (org.ovirt.engine.core.bll.RunVmCommand.getVdsBroker().runAsyncVdsCommand(VDSCommandType.Create, buildCreateVmParameters(), this).getReturnValue())); memoryFromSnapshotUsed = (vmStatus.isRunning()) || (vmStatus == (org.ovirt.engine.core.common.businessentities.VMStatus.RestoringState)); return vmStatus; }	protected org.ovirt.engine.core.common.businessentities.VMStatus createVm() { updateCdPath(); if (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getParameters().getFloppyPath()))) { org.ovirt.engine.core.bll.RunVmCommand.getVm().setFloppyPath(cdPathWindowsToLinux(org.ovirt.engine.core.bll.RunVmCommand.getParameters().getFloppyPath())); } if (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getVm().getInitrdUrl()))) { org.ovirt.engine.core.bll.RunVmCommand.getVm().setInitrdUrl(getIsoPrefixFilePath(org.ovirt.engine.core.bll.RunVmCommand.getVm().getInitrdUrl())); } if (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getVm().getKernelUrl()))) { org.ovirt.engine.core.bll.RunVmCommand.getVm().setKernelUrl(getIsoPrefixFilePath(org.ovirt.engine.core.bll.RunVmCommand.getVm().getKernelUrl())); } initParametersForExternalNetworks(); initParametersForPassthroughVnics(); org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = ((org.ovirt.engine.core.common.businessentities.VMStatus) (org.ovirt.engine.core.bll.RunVmCommand.getVdsBroker().runAsyncVdsCommand(VDSCommandType.Create, buildCreateVmParameters(), this).getReturnValue())); memoryFromSnapshotUsed = (vmStatus.isRunning()) || (vmStatus == (org.ovirt.engine.core.common.businessentities.VMStatus.RestoringState)); return vmStatus; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmOnceParams)) { return false; } org.ovirt.engine.core.common.action.RunVmOnceParams other = ((org.ovirt.engine.core.common.action.RunVmOnceParams) (obj)); return ((((((((((super.equals(obj)) && (java.util.Objects.equals(sysPrepDomainName, other.sysPrepDomainName))) && (java.util.Objects.equals(sysPrepUserName, other.sysPrepUserName))) && (java.util.Objects.equals(sysPrepPassword, other.sysPrepPassword))) && (java.util.Objects.equals(vmInit, other.vmInit))) && (java.util.Objects.equals(destinationVdsId, other.destinationVdsId))) && (java.util.Objects.equals(customEmulatedMachine, other.customEmulatedMachine))) && (java.util.Objects.equals(customCpuName, other.customCpuName))) && (java.util.Objects.equals(bootMenuEnabled, other.bootMenuEnabled))) && (java.util.Objects.equals(spiceFileTransferEnabled, other.spiceFileTransferEnabled))) && (java.util.Objects.equals(spiceCopyPasteEnabled, other.spiceCopyPasteEnabled)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmOnceParams)) { return false; } org.ovirt.engine.core.common.action.RunVmOnceParams other = ((org.ovirt.engine.core.common.action.RunVmOnceParams) (obj)); return (((((((((((((super.equals(obj)) && (java.util.Objects.equals(sysPrepDomainName, other.sysPrepDomainName))) && (java.util.Objects.equals(sysPrepUserName, other.sysPrepUserName))) && (java.util.Objects.equals(sysPrepPassword, other.sysPrepPassword))) && (java.util.Objects.equals(vmInit, other.vmInit))) && (java.util.Objects.equals(destinationVdsId, other.destinationVdsId))) && (java.util.Objects.equals(customEmulatedMachine, other.customEmulatedMachine))) && (java.util.Objects.equals(customCpuName, other.customCpuName))) && (java.util.Objects.equals(initrdUrl, other.initrdUrl))) && (java.util.Objects.equals(kernelUrl, other.kernelUrl))) && (java.util.Objects.equals(kernelParams, other.kernelParams))) && (java.util.Objects.equals(bootMenuEnabled, other.bootMenuEnabled))) && (java.util.Objects.equals(spiceFileTransferEnabled, other.spiceFileTransferEnabled))) && (java.util.Objects.equals(spiceCopyPasteEnabled, other.spiceCopyPasteEnabled)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), sysPrepDomainName, sysPrepUserName, sysPrepPassword, vmInit, destinationVdsId, customEmulatedMachine, customCpuName, bootMenuEnabled, spiceFileTransferEnabled, spiceCopyPasteEnabled); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), sysPrepDomainName, sysPrepUserName, sysPrepPassword, vmInit, destinationVdsId, customEmulatedMachine, customCpuName, initrdUrl, kernelUrl, kernelParams, bootMenuEnabled, spiceFileTransferEnabled, spiceCopyPasteEnabled); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmParams)) { return false; } org.ovirt.engine.core.common.action.RunVmParams other = ((org.ovirt.engine.core.common.action.RunVmParams) (obj)); return (((((((((((((((((java.util.Objects.equals(getVmId(), other.getVmId())) && ((bootSequence) == (other.bootSequence))) && (java.util.Objects.equals(diskPath, other.diskPath))) && (java.util.Objects.equals(runAndPause, other.runAndPause))) && ((acpiEnable) == (other.acpiEnable))) && (java.util.Objects.equals(win2kHackEnable, other.win2kHackEnable))) && (java.util.Objects.equals(customProperties, other.customProperties))) && (java.util.Objects.equals(floppyPath, other.floppyPath))) && (java.util.Objects.equals(clientIp, other.clientIp))) && (java.util.Objects.equals(requestingUser, other.requestingUser))) && ((initializationType) == (other.initializationType))) && (java.util.Objects.equals(runAsStateless, other.runAsStateless))) && (java.util.Objects.equals(initrdUrl, other.initrdUrl))) && (java.util.Objects.equals(kernelUrl, other.kernelUrl))) && (java.util.Objects.equals(kernelParams, other.kernelParams))) && (java.util.Objects.equals(payload, other.payload))) && ((balloonEnabled) == (other.balloonEnabled))) && ((cpuShares) == (other.cpuShares)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmParams)) { return false; } org.ovirt.engine.core.common.action.RunVmParams other = ((org.ovirt.engine.core.common.action.RunVmParams) (obj)); return ((((((((((((((java.util.Objects.equals(getVmId(), other.getVmId())) && ((bootSequence) == (other.bootSequence))) && (java.util.Objects.equals(diskPath, other.diskPath))) && (java.util.Objects.equals(runAndPause, other.runAndPause))) && ((acpiEnable) == (other.acpiEnable))) && (java.util.Objects.equals(win2kHackEnable, other.win2kHackEnable))) && (java.util.Objects.equals(customProperties, other.customProperties))) && (java.util.Objects.equals(floppyPath, other.floppyPath))) && (java.util.Objects.equals(clientIp, other.clientIp))) && (java.util.Objects.equals(requestingUser, other.requestingUser))) && ((initializationType) == (other.initializationType))) && (java.util.Objects.equals(runAsStateless, other.runAsStateless))) && (java.util.Objects.equals(payload, other.payload))) && ((balloonEnabled) == (other.balloonEnabled))) && ((cpuShares) == (other.cpuShares)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(getVmId(), bootSequence, diskPath, runAndPause, acpiEnable, win2kHackEnable, customProperties, floppyPath, clientIp, requestingUser, initializationType, runAsStateless, initrdUrl, kernelUrl, kernelParams, payload, balloonEnabled, cpuShares); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(getVmId(), bootSequence, diskPath, runAndPause, acpiEnable, win2kHackEnable, customProperties, floppyPath, clientIp, requestingUser, initializationType, runAsStateless, payload, balloonEnabled, cpuShares); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmOnceParams)) { return false; } org.ovirt.engine.core.common.action.RunVmOnceParams other = ((org.ovirt.engine.core.common.action.RunVmOnceParams) (obj)); return ((((((((super.equals(obj)) && ((bootSequence) == (other.bootSequence))) && (java.util.Objects.equals(sysPrepDomainName, other.sysPrepDomainName))) && (java.util.Objects.equals(sysPrepUserName, other.sysPrepUserName))) && (java.util.Objects.equals(sysPrepPassword, other.sysPrepPassword))) && (java.util.Objects.equals(vmInit, other.vmInit))) && (java.util.Objects.equals(destinationVdsId, other.destinationVdsId))) && (java.util.Objects.equals(customEmulatedMachine, other.customEmulatedMachine))) && (java.util.Objects.equals(customCpuName, other.customCpuName)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmOnceParams)) { return false; } org.ovirt.engine.core.common.action.RunVmOnceParams other = ((org.ovirt.engine.core.common.action.RunVmOnceParams) (obj)); return ((((((((((((((super.equals(obj)) && ((bootSequence) == (other.bootSequence))) && (java.util.Objects.equals(sysPrepDomainName, other.sysPrepDomainName))) && (java.util.Objects.equals(sysPrepUserName, other.sysPrepUserName))) && (java.util.Objects.equals(sysPrepPassword, other.sysPrepPassword))) && (java.util.Objects.equals(vmInit, other.vmInit))) && (java.util.Objects.equals(destinationVdsId, other.destinationVdsId))) && (java.util.Objects.equals(customEmulatedMachine, other.customEmulatedMachine))) && (java.util.Objects.equals(customCpuName, other.customCpuName))) && (java.util.Objects.equals(initrdUrl, other.initrdUrl))) && (java.util.Objects.equals(kernelUrl, other.kernelUrl))) && (java.util.Objects.equals(kernelParams, other.kernelParams))) && (java.util.Objects.equals(bootMenuEnabled, other.bootMenuEnabled))) && (java.util.Objects.equals(spiceFileTransferEnabled, other.spiceFileTransferEnabled))) && (java.util.Objects.equals(spiceCopyPasteEnabled, other.spiceCopyPasteEnabled)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), sysPrepDomainName, sysPrepUserName, sysPrepPassword, vmInit, destinationVdsId, customEmulatedMachine, customCpuName, bootSequence); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), sysPrepDomainName, sysPrepUserName, sysPrepPassword, vmInit, destinationVdsId, customEmulatedMachine, customCpuName, initrdUrl, kernelUrl, kernelParams, bootMenuEnabled, spiceFileTransferEnabled, spiceCopyPasteEnabled, bootSequence); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmParams)) { return false; } org.ovirt.engine.core.common.action.RunVmParams other = ((org.ovirt.engine.core.common.action.RunVmParams) (obj)); return ((((((((((((((java.util.Objects.equals(getVmId(), other.getVmId())) && (java.util.Objects.equals(diskPath, other.diskPath))) && (java.util.Objects.equals(runAndPause, other.runAndPause))) && (java.util.Objects.equals(customProperties, other.customProperties))) && (java.util.Objects.equals(floppyPath, other.floppyPath))) && (java.util.Objects.equals(clientIp, other.clientIp))) && (java.util.Objects.equals(requestingUser, other.requestingUser))) && ((initializationType) == (other.initializationType))) && (java.util.Objects.equals(runAsStateless, other.runAsStateless))) && (java.util.Objects.equals(initrdUrl, other.initrdUrl))) && (java.util.Objects.equals(kernelUrl, other.kernelUrl))) && (java.util.Objects.equals(kernelParams, other.kernelParams))) && (java.util.Objects.equals(payload, other.payload))) && ((balloonEnabled) == (other.balloonEnabled))) && ((cpuShares) == (other.cpuShares)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmParams)) { return false; } org.ovirt.engine.core.common.action.RunVmParams other = ((org.ovirt.engine.core.common.action.RunVmParams) (obj)); return ((((((((java.util.Objects.equals(getVmId(), other.getVmId())) && (java.util.Objects.equals(diskPath, other.diskPath))) && (java.util.Objects.equals(runAndPause, other.runAndPause))) && (java.util.Objects.equals(customProperties, other.customProperties))) && (java.util.Objects.equals(floppyPath, other.floppyPath))) && ((initializationType) == (other.initializationType))) && (java.util.Objects.equals(runAsStateless, other.runAsStateless))) && (java.util.Objects.equals(payload, other.payload))) && ((balloonEnabled) == (other.balloonEnabled)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(getVmId(), diskPath, runAndPause, customProperties, floppyPath, clientIp, requestingUser, initializationType, runAsStateless, initrdUrl, kernelUrl, kernelParams, payload, balloonEnabled, cpuShares); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(getVmId(), diskPath, runAndPause, customProperties, floppyPath, initializationType, runAsStateless, payload, balloonEnabled); }
private java.lang.String messageFormatter(java.lang.String msg, java.lang.String vmid, java.lang.String module, java.lang.String callType) { org.codehaus.jackson.node.ObjectNode vmDetailNode = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); vmDetailNode.put("status", msg); vmDetailNode.put("hash", java.lang.Integer.toString(vmid.hashCode())); org.codehaus.jackson.node.ObjectNode paramsNode = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); paramsNode.put(vmid.toString(), vmDetailNode); org.codehaus.jackson.node.ObjectNode node = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); node.put("params", paramsNode); node.put("jsonrpc", "2.0"); node.put("method", ((((("|" + module) + "|") + callType) + "|") + vmid)); return node.toString(); }	private java.lang.String messageFormatter(java.lang.String msg, java.lang.String id, java.lang.String method) { org.codehaus.jackson.node.ObjectNode vmDetailNode = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); vmDetailNode.put("status", msg); vmDetailNode.put("hash", java.lang.Integer.toString(id.hashCode())); org.codehaus.jackson.node.ObjectNode paramsNode = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); paramsNode.put(id.toString(), vmDetailNode); paramsNode.put("notify_time", java.lang.System.nanoTime()); org.codehaus.jackson.node.ObjectNode node = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); node.put("params", paramsNode); node.put("jsonrpc", "2.0"); node.put("method", method); return node.toString(); }
private void vmUpdateStatus(final org.ovirt.vdsmfake.domain.VM vm, final org.ovirt.vdsmfake.domain.VM.VMStatus status, final long delay, final java.lang.String msg, final boolean removeClient) throws java.lang.InterruptedException { java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newFixedThreadPool(5); java.util.concurrent.Future<java.lang.Void> future = ((java.util.concurrent.Future<java.lang.Void>) (executor.submit(() -> { try { java.util.concurrent.TimeUnit.MILLISECONDS.sleep(delay); vm.setStatus(status); sendNotification(msg, vm.getId(), removeClient, "virt", "VmStatus"); org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.info("VM {} set to {}", vm.getId(), msg); if (isUpdateRequired(status)) { org.ovirt.vdsmfake.domain.VdsmManager.getInstance().updateHost(vm.getHost()); } } catch (java.lang.Exception e) { e.printStackTrace(); } }))); try { future.get(); } catch (java.util.concurrent.ExecutionException e) { e.printStackTrace(); } }	private void vmUpdateStatus(final org.ovirt.vdsmfake.domain.VM vm, final org.ovirt.vdsmfake.domain.VM.VMStatus status, final long delay, final java.lang.String msg, final boolean removeClient) throws java.lang.InterruptedException { org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.scheduledExecutorService.schedule(() -> { try { vm.setStatus(status); sendNotification(msg, vm.getId(), removeClient, ("|virt|VM_status|" + (vm.getId()))); org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.info("VM {} set to {}", vm.getId(), msg); if (isUpdateRequired(status)) { org.ovirt.vdsmfake.domain.VdsmManager.getInstance().updateHost(vm.getHost()); } } catch (java.lang.Exception e) { e.printStackTrace(); } return null; }, delay, java.util.concurrent.TimeUnit.MILLISECONDS); }
private boolean isUpdateRequired(org.ovirt.vdsmfake.domain.VM.VMStatus status) { if (((status == (VM.VMStatus.Up)) || (status == (VM.VMStatus.PoweringDown))) || (status == (VM.VMStatus.Paused))) { return true; } return false; }	private boolean isUpdateRequired(org.ovirt.vdsmfake.domain.VM.VMStatus status) { switch (status) { case Up : case PoweringDown : case Paused : return true; default : return false; } }
private void sendNotification(java.lang.String message, java.lang.String vmId, boolean removeClient, java.lang.String module, java.lang.String callType) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if (message == null) { org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.warn("empty message has arrived, ignore empty messages"); } send(messageFormatter(message, vmId, module, callType), vmId, removeClient); }	private void sendNotification(java.lang.String message, java.lang.String id, boolean removeClient, java.lang.String method) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if (message == null) { org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.warn("empty message has arrived, ignore empty messages"); } send(messageFormatter(message, id, method), id, removeClient); }
protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setInitializationType(InitializationType.None); if ((((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }	protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); if ((((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }
protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.setPassthroughVnicToVfMap(initParametersForPassthroughVnics()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setVmPayload(vmPayload); parameters.setHibernationVolHandle(getMemoryFromActiveSnapshot()); if ((((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }	protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setVmPayload(vmPayload); parameters.setHibernationVolHandle(getMemoryFromActiveSnapshot()); if ((((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }
private void refresh() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> allVds = vdsDao.getAll(org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.getUserID(), org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.getParameters().isFiltered()); java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.businessentities.VDS vds : allVds) { if ((sb.length()) > 0) { sb.append(','); } sb.append(HTTPS); sb.append(vds.getHostName()); } cachedResult = sb.toString(); org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.log.debug("Default list of origins refreshed to: {}", cachedResult); }	private java.util.List<java.lang.String> getHostOrigins(java.lang.String host, java.util.Set<java.lang.String> suffixes) { java.util.List<java.lang.String> origins = new java.util.LinkedList<>(); suffixes.stream().forEach(( suffix) -> origins.add(java.lang.String.format("https://%s%s", host, suffix))); return origins; }
private java.lang.String mergeOrigins(java.lang.String fromConfig, java.lang.String fromDefault) { if ("*".equals(fromConfig)) { return fromConfig; } if (org.apache.commons.lang.StringUtils.isEmpty(fromConfig)) { return fromDefault; } return (fromConfig + ",") + fromDefault; }	private java.lang.String mergeOrigins(java.lang.String fromConfig, java.util.Set<java.lang.String> fromDefault) { if ("*".equals(fromConfig)) { return fromConfig; } if (org.apache.commons.lang.StringUtils.isEmpty(fromConfig)) { return org.apache.commons.lang.StringUtils.join(fromDefault, ','); } return (fromConfig + ",") + (org.apache.commons.lang.StringUtils.join(fromDefault, ',')); }
private java.lang.String getDefaultAllowedOrigins() throws javax.servlet.ServletException { org.ovirt.engine.core.common.queries.VdcQueryReturnValue value = backend.runPublicQuery(VdcQueryType.GetDefaultAllowedOrigins, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase()); if (!(value.getSucceeded())) { throw new javax.servlet.ServletException("Can't get list of default origins"); } return value.getReturnValue(); }	private java.util.Set<java.lang.String> getDefaultAllowedOrigins() throws javax.servlet.ServletException { if (this.enabledDefaultOrigins) { org.ovirt.engine.core.common.queries.GetDefaultAllowedOriginsQueryParameters parameters = new org.ovirt.engine.core.common.queries.GetDefaultAllowedOriginsQueryParameters(); parameters.addSuffixes(defaultOriginsSuffixes); org.ovirt.engine.core.common.queries.VdcQueryReturnValue value = backend.runPublicQuery(VdcQueryType.GetDefaultAllowedOrigins, parameters); if (!(value.getSucceeded())) { throw new javax.servlet.ServletException("Can't get list of default origins"); } if (org.ovirt.engine.core.utils.servlet.CORSSupportFilter.log.isDebugEnabled()) { org.ovirt.engine.core.utils.servlet.CORSSupportFilter.log.debug("Origins allowed by default: {}", org.apache.commons.lang.StringUtils.join(((java.util.Set<java.lang.String>) (value.getReturnValue())), ',')); } return value.getReturnValue(); } return org.ovirt.engine.core.utils.servlet.CORSSupportFilter.EMPTY_SET; }
private void refreshIfNeeded() { long now = java.lang.System.currentTimeMillis(); if (((lastRefresh) + (DELAY)) < now) { refresh(); lastRefresh = now; } }	private java.util.Set<java.lang.String> getDefaultOrigins() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> allVds = vdsDao.getAll(org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.getUserID(), org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.getParameters().isFiltered()); java.util.Set<java.lang.String> allowedOrigins = new java.util.HashSet<>(); if (org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.getParameters().getSuffixes().isEmpty()) { allVds.stream().forEach(( vds) -> allowedOrigins.add(java.lang.String.format("https://%s", vds.getHostName()))); } else { allVds.stream().forEach(( vds) -> allowedOrigins.addAll(getHostOrigins(vds.getHostName(), getParameters().getSuffixes()))); } if (org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.log.isDebugEnabled()) { org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.log.debug("Default list of origins refreshed to: {}", org.apache.commons.lang.StringUtils.join(allowedOrigins, ',')); } return allowedOrigins; }
@java.lang.Override public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runPublicQuery(org.ovirt.engine.core.common.queries.VdcQueryType actionType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters) { parameters.setRefresh(false); switch (actionType) { case GetAAAProfileList : case RegisterVds : case CheckDBConnection : case GetDbUserBySession : case GetEngineSessionIdForSsoToken : case ValidateSession : case GetDefaultAllowedOrigins : return runQueryImpl(actionType, parameters, false); case GetConfigurationValue : org.ovirt.engine.core.common.queries.GetConfigurationValueParameters configParameters = ((org.ovirt.engine.core.common.queries.GetConfigurationValueParameters) (parameters)); switch (configParameters.getConfigValue()) { case VdcVersion : case ProductRPMVersion : case ApplicationMode : case UserSessionTimeOutInterval : case CORSSupport : case CORSAllowedOrigins : return runQueryImpl(actionType, parameters, false); default : break; } default : break; } return getErrorQueryReturnValue(EngineMessage.USER_CANNOT_RUN_QUERY_NOT_PUBLIC); }	@java.lang.Override public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runPublicQuery(org.ovirt.engine.core.common.queries.VdcQueryType actionType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters) { parameters.setRefresh(false); switch (actionType) { case GetAAAProfileList : case RegisterVds : case CheckDBConnection : case GetDbUserBySession : case GetEngineSessionIdForSsoToken : case ValidateSession : case GetDefaultAllowedOrigins : return runQueryImpl(actionType, parameters, false); case GetConfigurationValue : org.ovirt.engine.core.common.queries.GetConfigurationValueParameters configParameters = ((org.ovirt.engine.core.common.queries.GetConfigurationValueParameters) (parameters)); switch (configParameters.getConfigValue()) { case VdcVersion : case ProductRPMVersion : case ApplicationMode : case UserSessionTimeOutInterval : case CORSSupport : case CORSAllowedOrigins : case CORSAllowDefaultOrigins : case CORSDefaultOriginSuffixes : return runQueryImpl(actionType, parameters, false); default : break; } default : break; } return getErrorQueryReturnValue(EngineMessage.USER_CANNOT_RUN_QUERY_NOT_PUBLIC); }
@java.lang.Override protected void executeQueryCommand() { refreshIfNeeded(); org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.getQueryReturnValue().setReturnValue(cachedResult); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.getQueryReturnValue().setReturnValue(getDefaultOrigins()); }
protected java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> initParametersForPassthroughVnics() { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> result = getVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommand.getVdsId()); vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); return result; }	protected java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> flushPassthroughVnicToVfMap() { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> passthroughVnicToVf = getVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommand.getVdsId()); vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); return passthroughVnicToVf; }
protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.setPassthroughVnicToVfMap(initParametersForPassthroughVnics()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setVmPayload(vmPayload); if ((((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }	protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setVmPayload(vmPayload); parameters.setHibernationVolHandle(getMemoryFromActiveSnapshot()); parameters.setPassthroughVnicToVfMap(flushPassthroughVnicToVfMap()); if ((((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }
public int getControllerForScsiDisk(org.ovirt.engine.core.common.businessentities.VmDevice disk, org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Map<java.lang.String, java.lang.String> address = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(disk.getAddress()); java.lang.String controllerStr = address.get(VdsProperties.Controller); int defaultIndex = getDefaultVirtioScsiIndex(vm); if (org.apache.commons.lang.StringUtils.isNotEmpty(controllerStr)) { return java.lang.Integer.parseInt(controllerStr); } if (((vm.getNumOfIoThreads()) > 0) && (org.ovirt.engine.core.common.FeatureSupported.virtioScsiIoThread(vm.getCompatibilityVersion()))) { int numOfDisks = ((vm.getDiskMap()) != null) ? vm.getDiskMap().values().size() : 0; return (numOfDisks % (vm.getNumOfIoThreads())) + defaultIndex; } return defaultIndex; }	public org.ovirt.engine.core.common.businessentities.network.Network getDisplayNetwork(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster> all = networkClusterDao.getAllForCluster(vm.getClusterId()); org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = null; for (org.ovirt.engine.core.common.businessentities.network.NetworkCluster tempNetworkCluster : all) { if (tempNetworkCluster.isDisplay()) { networkCluster = tempNetworkCluster; break; } } if (networkCluster != null) { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> allNetworks = networkDao.getAll(); for (org.ovirt.engine.core.common.businessentities.network.Network tempNetwork : allNetworks) { if (tempNetwork.getId().equals(networkCluster.getNetworkId())) { return tempNetwork; } } } return null; }
private java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMapForController(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.Integer, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer>> vmDeviceUnitMap) { int controllerId = vmInfoBuildUtils.getControllerForScsiDisk(vmDevice, org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVm()); if (!(vmDeviceUnitMap.containsKey(controllerId))) { return new java.util.HashMap<>(); } return vmDeviceUnitMap.get(controllerId); }	private java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMapForController(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.Integer, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer>> vmDeviceUnitMap) { int numOfDisks = org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVm().getDiskMap().values().size(); int controllerId = vmInfoBuildUtils.getControllerForScsiDisk(vmDevice, org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVm(), numOfDisks); if (!(vmDeviceUnitMap.containsKey(controllerId))) { return new java.util.HashMap<>(); } return vmDeviceUnitMap.get(controllerId); }
public org.ovirt.engine.core.bll.ValidationResult defaultRouteNetworkCannotBeExternal(org.ovirt.engine.core.common.businessentities.network.Network network) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_ROUTE_NETWORK_CANNOT_BE_EXTERNAL, java.lang.String.format(org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase.NETWORK_NAME_REPLACEMENT, network.getName())).when(((networkCluster.isManagement()) && (network.isExternal()))); }	public org.ovirt.engine.core.bll.ValidationResult defaultRouteNetworkCannotBeExternal(org.ovirt.engine.core.common.businessentities.network.Network network) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_ROUTE_NETWORK_CANNOT_BE_EXTERNAL, java.lang.String.format(org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase.NETWORK_NAME_REPLACEMENT, network.getName())).when(((networkCluster.isDefaultRoute()) && (network.isExternal()))); }
private org.ovirt.engine.core.bll.ValidationResult checkVmNumaCpuAssignment(int cpuCores, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) { java.util.ArrayList<java.lang.Integer> cpuIds = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { cpuIds.addAll(node.getCpuIds()); } if (cpuIds.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } int minId = java.util.Collections.min(cpuIds); int maxId = java.util.Collections.max(cpuIds); if ((minId < 0) || (maxId >= cpuCores)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_INVALID_CPU_ID, java.lang.String.format("$cpuIndex %d", (minId < 0 ? minId : maxId)), java.lang.String.format("$cpuIndexMax %d", (cpuCores - 1))); } java.util.Collections.sort(cpuIds); for (int i = 0; i < ((cpuIds.size()) - 1); ++i) { if (cpuIds.get(i).equals(cpuIds.get((i + 1)))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_DUPLICATE_CPU_ID, java.lang.String.format("$cpuIndex %d", cpuIds.get(i))); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	private org.ovirt.engine.core.bll.ValidationResult checkVmNumaCpuAssignment(int cpuCores, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) { java.util.List<java.lang.Integer> cpuIds = vmNumaNodes.stream().flatMap(( node) -> node.getCpuIds().stream()).collect(java.util.stream.Collectors.toList()); if (cpuIds.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } int minId = java.util.Collections.min(cpuIds); int maxId = java.util.Collections.max(cpuIds); if ((minId < 0) || (maxId >= cpuCores)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_INVALID_CPU_ID, java.lang.String.format("$cpuIndex %d", (minId < 0 ? minId : maxId)), java.lang.String.format("$cpuIndexMax %d", (cpuCores - 1))); } java.util.List<java.lang.Integer> duplicateIds = cpuIds.stream().collect(java.util.stream.Collectors.groupingBy(java.util.function.Function.identity(), java.util.stream.Collectors.counting())).entrySet().stream().filter(( a) -> (a.getValue()) > 1).map(java.util.Map.Entry::getKey).collect(java.util.stream.Collectors.toList()); if (!(duplicateIds.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_DUPLICATE_CPU_IDS, java.lang.String.format("$cpuIndexes %s", duplicateIds.stream().map(( i) -> i.toString()).collect(java.util.stream.Collectors.joining(", ")))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@org.junit.Test public void shouldDetectDupliciteCpuAssignment() { vmNumaNodes.get(0).setCpuIds(java.util.Collections.singletonList(0)); vmNumaNodes.get(1).setCpuIds(java.util.Collections.singletonList(0)); assertValidationFailure(underTest.checkVmNumaNodesIntegrity(vm, vm.getvNumaNodeList()), EngineMessage.VM_NUMA_NODE_DUPLICATE_CPU_ID); }	@org.junit.Test public void shouldDetectDuplicateCpuAssignment() { vmNumaNodes.get(0).setCpuIds(java.util.Collections.singletonList(0)); vmNumaNodes.get(1).setCpuIds(java.util.Collections.singletonList(0)); assertValidationFailure(underTest.checkVmNumaNodesIntegrity(vm, vm.getvNumaNodeList()), EngineMessage.VM_NUMA_NODE_DUPLICATE_CPU_IDS); }
private void storeIp(java.lang.StringBuilder output, org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.IpInfoFetcher ipInfoFetcher) { output.append(java.lang.String.format("iface %s inet%s %s\n", ipInfoFetcher.fetchName(), ipInfoFetcher.getIpStackVersion(), ipInfoFetcher.fetchBootProtocol())); if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchIp())) { output.append(java.lang.String.format(" address %s\n", ipInfoFetcher.fetchIp())); } if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchNetmask())) { output.append(java.lang.String.format(" netmask %s\n", ipInfoFetcher.fetchNetmask())); } if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchGateway())) { output.append(java.lang.String.format(" gateway %s\n", ipInfoFetcher.fetchGateway())); } }	private void storeIp(java.lang.String ipStack, org.ovirt.engine.core.utils.network.vm.VmInitNetworkIpInfoFetcher ipInfoFetcher, java.lang.StringBuilder output) { output.append(java.lang.String.format("iface %s %s %s%n", ipInfoFetcher.fetchName(), ipStack, ipInfoFetcher.fetchBootProtocol())); if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchIp())) { output.append(java.lang.String.format(" address %s%n", ipInfoFetcher.fetchIp())); } if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchNetmask())) { output.append(java.lang.String.format(" netmask %s%n", ipInfoFetcher.fetchNetmask())); } if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchGateway())) { output.append(java.lang.String.format(" gateway %s%n", ipInfoFetcher.fetchGateway())); } }
private void storeIpv4(java.lang.StringBuilder output, org.ovirt.engine.core.common.businessentities.VmInitNetwork iface) { storeIp(output, new org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.Ipv4InfoFetcher(iface)); }	private void storeIpv4(org.ovirt.engine.core.common.businessentities.VmInitNetwork iface, java.lang.StringBuilder output) { storeIp("inet", new org.ovirt.engine.core.utils.network.vm.VmInitNetworkIpv4InfoFetcher(iface), output); }
private void storeNetwork() throws java.io.UnsupportedEncodingException { java.lang.StringBuilder output = new java.lang.StringBuilder(); if ((vmInit.getNetworks()) != null) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInitNetwork> networks = vmInit.getNetworks(); for (org.ovirt.engine.core.common.businessentities.VmInitNetwork iface : networks) { if (java.lang.Boolean.TRUE.equals(iface.getStartOnBoot())) { output.append("auto ").append(iface.getName()).append("\n"); } storeIpv4(output, iface); if ((vmInit.getDnsServers()) != null) { output.append(" dns-nameservers").append(" ").append(vmInit.getDnsServers()); output.append("\n"); } if ((vmInit.getDnsSearch()) != null) { output.append(" dns-search").append(" ").append(vmInit.getDnsSearch()); output.append("\n"); } storeIpv6(output, iface); } } interfaces = output.toString(); if (!(interfaces.isEmpty())) { metaData.put("network-interfaces", interfaces); storeNextFile(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.CloudInitFileMode.NETWORK, "/etc/network/interfaces", interfaces.getBytes("US-ASCII")); } }	private void storeNetwork() throws java.io.UnsupportedEncodingException { java.lang.StringBuilder output = new java.lang.StringBuilder(); if ((vmInit.getNetworks()) != null) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInitNetwork> networks = vmInit.getNetworks(); for (org.ovirt.engine.core.common.businessentities.VmInitNetwork iface : networks) { if (java.lang.Boolean.TRUE.equals(iface.getStartOnBoot())) { output.append("auto ").append(iface.getName()).append("\n"); } storeIpv4(iface, output); if ((vmInit.getDnsServers()) != null) { output.append(" dns-nameservers").append(" ").append(vmInit.getDnsServers()); output.append("\n"); } if ((vmInit.getDnsSearch()) != null) { output.append(" dns-search").append(" ").append(vmInit.getDnsSearch()); output.append("\n"); } storeIpv6(iface, output); } } interfaces = output.toString(); if (!(interfaces.isEmpty())) { metaData.put("network-interfaces", interfaces); storeNextFile(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.CloudInitFileMode.NETWORK, "/etc/network/interfaces", interfaces.getBytes("US-ASCII")); } }
private void storeIpv6(java.lang.StringBuilder output, org.ovirt.engine.core.common.businessentities.VmInitNetwork iface) { storeIp(output, new org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.Ipv6InfoFetcher(iface)); }	private void storeIpv6(org.ovirt.engine.core.common.businessentities.VmInitNetwork iface, java.lang.StringBuilder output) { storeIp("inet6", new org.ovirt.engine.core.utils.network.vm.VmInitNetworkIpv6InfoFetcher(iface), output); }
private int calculateValue(org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster) { int res = 0; if (networkCluster != null) { if (networkCluster.isDefaultRoute()) { res += 16; } if (networkCluster.isManagement()) { res += 10; } if (networkCluster.isDisplay()) { res += 4; } if (networkCluster.isMigration()) { res += 2; } if (networkCluster.isGluster()) { res += 1; } } return res; }	private int calculateValue(org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster) { int res = 0; if (networkCluster != null) { if (networkCluster.isManagement()) { res += 16; } if (networkCluster.isDefaultRoute()) { res += 8; } if (networkCluster.isDisplay()) { res += 4; } if (networkCluster.isMigration()) { res += 2; } if (networkCluster.isGluster()) { res += 1; } } return res; }
private HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.CommandBase<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info("Command {} id: '{}': attempting to determine the job status by polling the entity.", cmd.getActionType(), cmd.getCommandId()); return pollEntity(cmd); } if (jobsReportedByHost) { log.error(("Command {} id: '{}': entity polling isn't supported and the job isn't reported by the host," + "assuming it failed so that the command execution will end."), cmd.getActionType(), cmd.getCommandId()); return HostJobInfo.HostJobStatus.failed; } log.error("Command {} id: '{}': entity polling isn't supported, will retry to poll the job soon", cmd.getActionType(), cmd.getCommandId()); return null; }	private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.CommandBase<? extends org.ovirt.engine.core.common.action.HostJobCommandParameters> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info("Command {} id: '{}': attempting to determine the job status by polling the entity.", cmd.getActionType(), cmd.getCommandId()); org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus jobStatus = pollEntity(cmd); if (jobStatus != null) { return jobStatus; } ((org.ovirt.engine.core.bll.storage.EntityPollingCommand) (cmd)).attemptToFenceJob(); return null; } if (((org.ovirt.engine.core.bll.HostJobCommand) (cmd)).failJobWithUndeterminedStatus()) { log.error(("Command {} id: '{}': failed to determine the actual job status, considering as failed as per" + " the command implementation"), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } if (jobsReportedByHost) { log.error(("Command {} id: '{}': entity polling isn't supported and the job isn't reported by the host," + "assuming it failed so that the command execution will end."), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } log.error("Command {} id: '{}': failed to determine the actual job status, will retry to poll the job soon", cmd.getActionType(), cmd.getCommandId()); return null; }
@java.lang.Override public org.ovirt.engine.core.compat.Guid getHostJobId() { return getStorageJobId(); }	@org.codehaus.jackson.annotate.JsonIgnore @java.lang.Override public org.ovirt.engine.core.compat.Guid getHostJobId() { return getStorageJobId(); }
protected abstract HostJobInfo.HostJobType getHostJobType();	protected abstract org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobType getHostJobType();
protected org.ovirt.engine.core.bll.CommandBase<?> getCommand(org.ovirt.engine.core.compat.Guid cmdId) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand(cmdId); }	protected org.ovirt.engine.core.bll.CommandBase<? extends org.ovirt.engine.core.common.action.HostJobCommandParameters> getCommand(org.ovirt.engine.core.compat.Guid cmdId) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand(cmdId); }
private HostJobInfo.HostJobStatus pollEntity(org.ovirt.engine.core.bll.CommandBase<?> cmd) { try { return ((org.ovirt.engine.core.bll.storage.EntityPollingCommand) (cmd)).poll(); } catch (java.lang.Exception e) { log.error("Command {} id: '{}': failed to poll the command entity", cmd.getActionType(), cmd.getCommandId()); } return null; }	private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus pollEntity(org.ovirt.engine.core.bll.CommandBase<?> cmd) { try { return ((org.ovirt.engine.core.bll.storage.EntityPollingCommand) (cmd)).poll(); } catch (java.lang.Exception e) { log.error("Command {} id: '{}': failed to poll the command entity", cmd.getActionType(), cmd.getCommandId()); } return null; }
public static java.util.Map<java.lang.String, java.lang.Object> createVmMemoryDeviceMap(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice) { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Object> memDeviceData = new java.util.HashMap<>(); data.put("vmId", vmDevice.getVmId().toString()); memDeviceData.put(VdsProperties.Type, vmDevice.getType().getValue()); memDeviceData.put(VdsProperties.Device, vmDevice.getDevice()); if (org.apache.commons.lang.StringUtils.isNotBlank(vmDevice.getAddress())) { memDeviceData.put(VdsProperties.Address, org.ovirt.engine.core.utils.StringMapUtils.string2Map(vmDevice.getAddress())); } memDeviceData.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); memDeviceData.put(VdsProperties.DeviceId, vmDevice.getId().getDeviceId().toString()); memDeviceData.put("size", vmDevice.getSpecParams().get("size")); memDeviceData.put("node", vmDevice.getSpecParams().get("node")); data.put("memory", memDeviceData); return data; }	public static java.util.Map<java.lang.String, java.lang.Object> createVmMemoryDeviceMap(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, boolean copyAlias) { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Object> memDeviceData = new java.util.HashMap<>(); data.put("vmId", vmDevice.getVmId().toString()); memDeviceData.put(VdsProperties.Type, vmDevice.getType().getValue()); memDeviceData.put(VdsProperties.Device, vmDevice.getDevice()); if (org.apache.commons.lang.StringUtils.isNotBlank(vmDevice.getAddress())) { memDeviceData.put(VdsProperties.Address, org.ovirt.engine.core.utils.StringMapUtils.string2Map(vmDevice.getAddress())); } memDeviceData.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); memDeviceData.put(VdsProperties.DeviceId, vmDevice.getId().getDeviceId().toString()); if (copyAlias) { memDeviceData.put(VdsProperties.Alias, vmDevice.getAlias()); } memDeviceData.put("size", vmDevice.getSpecParams().get("size")); memDeviceData.put("node", vmDevice.getSpecParams().get("node")); data.put("memory", memDeviceData); return data; }
@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.getBroker().hotUnplugMemory(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createVmMemoryDeviceMap(org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.getParameters().getMemoryDeviceToUnplug())); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.setVdsRuntimeErrorAndReport(e); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.getVDSReturnValue().setExceptionString(null); } }	@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getBroker().hotUnplugMemory(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createVmMemoryDeviceMap(org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getParameters().getMemoryDeviceToUnplug(), true)); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.setVdsRuntimeErrorAndReport(e); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getVDSReturnValue().setExceptionString(null); } }
@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getBroker().hotplugMemory(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createVmMemoryDeviceMap(org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getMemoryDevice())); org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.setVdsRuntimeErrorAndReport(e); org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getVDSReturnValue().setExceptionString(null); } }	@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getBroker().hotplugMemory(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createVmMemoryDeviceMap(org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getMemoryDevice(), false)); org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.setVdsRuntimeErrorAndReport(e); org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getVDSReturnValue().setExceptionString(null); } }
@org.junit.Before public void init() { syncJob.setLogUtil(logUtil); org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.injectorRule.bind(org.ovirt.engine.core.utils.lock.LockManager.class, lockManager); doReturn(clusterDao).when(syncJob).getClusterDao(); doReturn(vdsDao).when(syncJob).getVdsDao(); doReturn(geoRepDao).when(syncJob).getGeoRepDao(); doReturn(volumeDao).when(syncJob).getVolumeDao(); doReturn(getClusters()).when(clusterDao).getAll(); doReturn(getVolume()).when(volumeDao).getByName(any(org.ovirt.engine.core.compat.Guid.class), anyString()); doReturn(getVolume()).when(volumeDao).getById(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(getServer()).when(glusterUtil).getRandomUpServer(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(glusterUtil).when(syncJob).getGlusterUtil(); doReturn(getSessions(2, true)).when(geoRepDao).getGeoRepSessionsInCluster(org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.CLUSTER_GUID); }	@org.junit.Before public void init() { syncJob.setLogUtil(logUtil); org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.injectorRule.bind(org.ovirt.engine.core.utils.lock.LockManager.class, lockManager); doReturn(clusterDao).when(syncJob).getClusterDao(); doReturn(vdsDao).when(syncJob).getVdsDao(); doReturn(geoRepDao).when(syncJob).getGeoRepDao(); doReturn(volumeDao).when(syncJob).getVolumeDao(); doReturn(storageDomainDRDao).when(syncJob).getStorageDomainDRDao(); doReturn(getClusters()).when(clusterDao).getAll(); doReturn(getVolume()).when(volumeDao).getByName(any(org.ovirt.engine.core.compat.Guid.class), anyString()); doReturn(getVolume()).when(volumeDao).getById(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(getServer()).when(glusterUtil).getRandomUpServer(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(glusterUtil).when(syncJob).getGlusterUtil(); doReturn(getSessions(2, true)).when(geoRepDao).getGeoRepSessionsInCluster(org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.CLUSTER_GUID); doReturn(java.util.Collections.emptyList()).when(storageDomainDRDao).getWithGeoRepSession(any(org.ovirt.engine.core.compat.Guid.class)); }
@org.junit.Before public void init() { syncJob.setLogUtil(logUtil); org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.injectorRule.bind(org.ovirt.engine.core.utils.lock.LockManager.class, lockManager); doReturn(getClusters()).when(clusterDao).getAll(); doReturn(getVolume()).when(volumeDao).getByName(any(org.ovirt.engine.core.compat.Guid.class), anyString()); doReturn(getVolume()).when(volumeDao).getById(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(getServer()).when(glusterUtil).getRandomUpServer(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(glusterUtil).when(syncJob).getGlusterUtil(); doReturn(getSessions(2, true)).when(geoRepDao).getGeoRepSessionsInCluster(org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.CLUSTER_GUID); }	@org.junit.Before public void init() { syncJob.setLogUtil(logUtil); org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.injectorRule.bind(org.ovirt.engine.core.utils.lock.LockManager.class, lockManager); doReturn(getClusters()).when(clusterDao).getAll(); doReturn(getVolume()).when(volumeDao).getByName(any(org.ovirt.engine.core.compat.Guid.class), anyString()); doReturn(getVolume()).when(volumeDao).getById(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(getServer()).when(glusterUtil).getRandomUpServer(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(glusterUtil).when(syncJob).getGlusterUtil(); doReturn(getSessions(2, true)).when(geoRepDao).getGeoRepSessionsInCluster(org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.CLUSTER_GUID); doReturn(java.util.Collections.emptyList()).when(storageDomainDRDao).getWithGeoRepSession(any(org.ovirt.engine.core.compat.Guid.class)); }
private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.Optional<org.ovirt.engine.core.compat.Version> optionalVersion = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(java.util.Comparator.naturalOrder()); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); optionalVersion.ifPresent(( version) -> dataCenters.forEach(( dataCenter) -> { dataCenter.setStoragePoolCompatibilityLevelUpgradeNeeded(((version.compareTo(dataCenter.getCompatibilityVersion())) > 0)); dataCenter.setMacPoolId(dcSingleMacPoolFinder.find(dataCenter.getId())); })); return dataCenters; }	private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); dataCenters.forEach(this::setDcSingleMacPoolId); setDcCompatibilityLevelUpgradeNeeded(dataCenters); return dataCenters; }
private static void populateModelWithIpv6Details(org.ovirt.engine.core.common.businessentities.VmInitNetwork entity, org.ovirt.engine.api.model.NicConfiguration model) { if ((entity.getIpv6BootProtocol()) != null) { model.setIpv6BootProtocol(org.ovirt.engine.api.restapi.types.Ipv6BootProtocolMapper.map(entity.getIpv6BootProtocol())); } model.setIp(org.ovirt.engine.api.restapi.types.InitializationMapper.createIpModel(new org.ovirt.engine.core.common.network.vm.VmInitNetworkIpv6InfoFetcher(entity))); }	private static void populateModelWithIpv6Details(org.ovirt.engine.core.common.businessentities.VmInitNetwork entity, org.ovirt.engine.api.model.NicConfiguration model) { if ((entity.getIpv6BootProtocol()) != null) { model.setIpv6BootProtocol(org.ovirt.engine.api.restapi.types.Ipv6BootProtocolMapper.map(entity.getIpv6BootProtocol())); } model.setIpv6(org.ovirt.engine.api.restapi.types.InitializationMapper.createIpModel(new org.ovirt.engine.core.utils.network.vm.VmInitNetworkIpv6InfoFetcher(entity))); }
private static void populateModelWithIpv4Details(org.ovirt.engine.core.common.businessentities.VmInitNetwork entity, org.ovirt.engine.api.model.NicConfiguration model) { if ((entity.getBootProtocol()) != null) { model.setBootProtocol(org.ovirt.engine.api.restapi.types.Ipv4BootProtocolMapper.map(entity.getBootProtocol())); } model.setIp(org.ovirt.engine.api.restapi.types.InitializationMapper.createIpModel(new org.ovirt.engine.core.common.network.vm.VmInitNetworkIpv4InfoFetcher(entity))); }	private static void populateModelWithIpv4Details(org.ovirt.engine.core.common.businessentities.VmInitNetwork entity, org.ovirt.engine.api.model.NicConfiguration model) { if ((entity.getBootProtocol()) != null) { model.setBootProtocol(org.ovirt.engine.api.restapi.types.Ipv4BootProtocolMapper.map(entity.getBootProtocol())); } model.setIp(org.ovirt.engine.api.restapi.types.InitializationMapper.createIpModel(new org.ovirt.engine.core.utils.network.vm.VmInitNetworkIpv4InfoFetcher(entity))); }
private static org.ovirt.engine.api.model.Ip createIpModel(org.ovirt.engine.core.common.network.vm.VmInitNetworkIpInfoFetcher ipInfoFetcher) { org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); ip.setAddress(ipInfoFetcher.fetchIp()); ip.setNetmask(ipInfoFetcher.fetchNetmask()); ip.setGateway(ipInfoFetcher.fetchGateway()); return ip; }	private static org.ovirt.engine.api.model.Ip createIpModel(org.ovirt.engine.core.utils.network.vm.VmInitNetworkIpInfoFetcher ipInfoFetcher) { org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); ip.setAddress(ipInfoFetcher.fetchIp()); ip.setNetmask(ipInfoFetcher.fetchNetmask()); ip.setGateway(ipInfoFetcher.fetchGateway()); return ip; }
private java.lang.String getCompatVersion() { int version = java.lang.Integer.parseInt(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStoragePool().getStoragePoolFormatType().getValue()); if (version >= 4) { return org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.VDSM_COMPAT_VERSION_1_1; } return org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.VDSM_COMPAT_DEFAULT_VERSION; }	private java.lang.String getCompatVersion() { int version = java.lang.Integer.parseInt(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStoragePool().getStoragePoolFormatType().getValue()); if ((version >= 4) && ((org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getOrigin()) != (org.ovirt.engine.core.common.businessentities.OriginType.KVM))) { return org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.VDSM_COMPAT_VERSION_1_1; } return null; }
private java.util.Map<java.lang.String, java.lang.Object> createVmProperties() { java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(); map.put(VdsProperties.vm_name, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVmName()); map.put(VdsProperties.PoolId, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getStoragePoolId().toString()); map.put(VdsProperties.DomainId, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getStorageDomainId().toString()); map.put(VdsProperties.compat_version, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getCompatVersion()); map.put(VdsProperties.vm_disks, getDisksProperties()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getDisks()) { map.put(VdsProperties.Format, diskImage.getVolumeFormat().toString()); map.put(VdsProperties.DISK_ALLOCATION, diskImage.getVolumeType().toString()); break; } if ((org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVirtioIsoPath()) != null) { map.put(VdsProperties.VIRTIO_ISO_PATH, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVirtioIsoPath()); } return map; }	private java.util.Map<java.lang.String, java.lang.Object> createVmProperties() { java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(); map.put(VdsProperties.vm_name, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVmName()); map.put(VdsProperties.PoolId, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getStoragePoolId().toString()); map.put(VdsProperties.DomainId, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getStorageDomainId().toString()); if ((org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getCompatVersion()) != null) { map.put(VdsProperties.compat_version, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getCompatVersion()); } map.put(VdsProperties.vm_disks, getDisksProperties()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getDisks()) { map.put(VdsProperties.Format, diskImage.getVolumeFormat().toString()); map.put(VdsProperties.DISK_ALLOCATION, diskImage.getVolumeType().toString()); break; } if ((org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVirtioIsoPath()) != null) { map.put(VdsProperties.VIRTIO_ISO_PATH, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVirtioIsoPath()); } return map; }
private void initCommandBase() { initUser(); org.ovirt.engine.core.bll.job.ExecutionContext executionContext = context.getExecutionContext(); if ((executionContext.getJob()) != null) { setJobId(executionContext.getJob().getId()); } else if ((executionContext.getStep()) != null) { setJobId(executionContext.getStep().getJobId()); } if ((parameters.getParentParameters()) != null) { parameters.setCorrelationId(parameters.getParentParameters().getCorrelationId()); } setCorrelationId(parameters.getCorrelationId()); }	private void initCommandBase() { initUser(); org.ovirt.engine.core.bll.job.ExecutionContext executionContext = context.getExecutionContext(); if ((executionContext.getJob()) != null) { setJobId(executionContext.getJob().getId()); } else if ((executionContext.getStep()) != null) { setJobId(executionContext.getStep().getJobId()); } setCorrelationId(parameters.getCorrelationId()); }
public long getMinimum() { return privateMinimum; }	public long getMinimum() { return minimum; }
public void setMinimum(long value) { privateMinimum = value; }	public void setMinimum(long minimum) { this.minimum = minimum; }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if ((value != null) && (((value instanceof java.lang.String) && (!(((java.lang.String) (value)).equals("")))) || (value instanceof java.lang.Long))) { java.lang.Long longValue = (value instanceof java.lang.String) ? org.ovirt.engine.core.compat.LongCompat.tryParse(((java.lang.String) (value))) : ((java.lang.Long) (value)); java.lang.String msg = ""; java.lang.String prefixMsg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().thisFieldMustContainNumberInvalidReason(); if (longValue == null) { result.setSuccess(false); msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberBetweenInvalidReason(prefixMsg, getMinimum(), getMaximum()); result.getReasons().add(msg); } else if ((longValue < (getMinimum())) || (longValue > (getMaximum()))) { if (((getMinimum()) != (java.lang.Long.MIN_VALUE)) && ((getMaximum()) != (java.lang.Long.MAX_VALUE))) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberBetweenInvalidReason(prefixMsg, getMinimum(), getMaximum()); } else if ((getMinimum()) != (java.lang.Long.MIN_VALUE)) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberGreaterInvalidReason(prefixMsg, getMinimum()); } else if ((getMaximum()) != (java.lang.Long.MAX_VALUE)) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberLessInvalidReason(prefixMsg, getMaximum()); } result.setSuccess(false); result.getReasons().add(msg); } } return result; }	@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if ((value != null) && (((value instanceof java.lang.String) && (!("".equals(value)))) || (value instanceof java.lang.Long))) { java.lang.Long longValue = (value instanceof java.lang.String) ? org.ovirt.engine.core.compat.LongCompat.tryParse(((java.lang.String) (value))) : ((java.lang.Long) (value)); java.lang.String msg = ""; java.lang.String prefixMsg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().thisFieldMustContainNumberInvalidReason(); if (longValue == null) { result.setSuccess(false); msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberBetweenInvalidReason(prefixMsg, getMinimum(), getMaximum()); result.getReasons().add(msg); } else if ((longValue < (getMinimum())) || (longValue > (getMaximum()))) { if (((getMinimum()) != (java.lang.Long.MIN_VALUE)) && ((getMaximum()) != (java.lang.Long.MAX_VALUE))) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberBetweenInvalidReason(prefixMsg, getMinimum(), getMaximum()); } else if ((getMinimum()) != (java.lang.Long.MIN_VALUE)) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberGreaterInvalidReason(prefixMsg, getMinimum()); } else if ((getMaximum()) != (java.lang.Long.MAX_VALUE)) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberLessInvalidReason(prefixMsg, getMaximum()); } result.setSuccess(false); result.getReasons().add(msg); } } return result; }
@org.junit.Test public void tryParse() { org.junit.Assert.assertNull(org.ovirt.engine.core.compat.LongCompat.tryParse("")); org.junit.Assert.assertNull(org.ovirt.engine.core.compat.LongCompat.tryParse("no good")); org.junit.Assert.assertNull(org.ovirt.engine.core.compat.LongCompat.tryParse("$1")); org.junit.Assert.assertEquals(java.lang.Long.valueOf(1), org.ovirt.engine.core.compat.LongCompat.tryParse("1")); org.junit.Assert.assertEquals(java.lang.Long.valueOf((-1)), org.ovirt.engine.core.compat.LongCompat.tryParse("-1")); org.junit.Assert.assertEquals(java.lang.Long.valueOf(0), org.ovirt.engine.core.compat.LongCompat.tryParse("0")); }	@org.junit.Test public void parseValidValuesTest() { org.junit.Assert.assertEquals(java.lang.Long.valueOf(1), org.ovirt.engine.core.compat.LongCompat.tryParse("1")); org.junit.Assert.assertEquals(java.lang.Long.valueOf((-1)), org.ovirt.engine.core.compat.LongCompat.tryParse("-1")); org.junit.Assert.assertEquals(java.lang.Long.valueOf(0), org.ovirt.engine.core.compat.LongCompat.tryParse("0")); }
public void setMaximum(long value) { privateMaximum = value; }	public void setMaximum(long maximum) { this.maximum = maximum; }
public long getMaximum() { return privateMaximum; }	public long getMaximum() { return maximum; }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.createVnicProfileValidator(); boolean useDefaultNetworkFilterId = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFiterId(); return ((((((((((validate(validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileForVmNetworkOnly()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.passthroughProfileContainsSupportedProperties()))) && (validate(validator.validUseDefaultNetworkFilterFlag(useDefaultNetworkFilterId)))) && (validate(validator.validNetworkFilterId()))) && (validate(validator.validNetworkFilterForPassthroughProfile(useDefaultNetworkFilterId))); }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.createVnicProfileValidator(); boolean useDefaultNetworkFilterId = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFiterId(); return (((((((((validate(validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileForVmNetworkOnly()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.passthroughProfileContainsSupportedProperties(useDefaultNetworkFilterId)))) && (validate(validator.validUseDefaultNetworkFilterFlag(useDefaultNetworkFilterId)))) && (validate(validator.validNetworkFilterId())); }
java.lang.String ACTION_TYPE_FAILED_INVALID_VNIC_PROFILE_NETWORK_FILTER_CANNOT_BE_USED_WITH_PASSTHROUGH();	java.lang.String ACTION_TYPE_FAILED_DEFAULT_ROUTE_NETWORK_CANNOT_BE_EXTERNAL();
public org.ovirt.engine.core.bll.ValidationResult validNetworkFilterForPassthroughProfile(boolean useDefaultNetworkFilterId) { if (!(vnicProfile.isPassthrough())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_INVALID_VNIC_PROFILE_NETWORK_FILTER_CANNOT_BE_USED_WITH_PASSTHROUGH; boolean allowedState = ((vnicProfile.getNetworkFilterId()) == null) && (!useDefaultNetworkFilterId); return org.ovirt.engine.core.bll.ValidationResult.failWith(engineMessage).unless(allowedState); }	public org.ovirt.engine.core.bll.ValidationResult passthroughProfileContainsSupportedProperties(boolean useDefaultNetworkFilterId) { boolean nullValuedNetworkFilterWillBeUsed = ((vnicProfile.getNetworkFilterId()) == null) && (!useDefaultNetworkFilterId); boolean conditionOccurs = (vnicProfile.isPassthrough()) && (((vnicProfile.isPortMirroring()) || ((vnicProfile.getNetworkQosId()) != null)) || (!nullValuedNetworkFilterWillBeUsed)); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_PASSTHROUGH_PROFILE_CONTAINS_NOT_SUPPORTED_PROPERTIES).when(conditionOccurs); }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.UpdateVnicProfileCommand.createVnicProfileValidator(); return (((((((((((validate(validator.vnicProfileIsSet())) && (validate(validator.vnicProfileExists()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.networkNotChanged()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.portMirroringNotChangedIfUsedByVms()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.UpdateVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.passthroughNotChangedIfUsedByVms()))) && (validate(validator.passthroughProfileContainsSupportedProperties()))) && (validate(validator.validNetworkFilterId()))) && (validate(validator.validNetworkFilterForPassthroughProfile(false))); }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.UpdateVnicProfileCommand.createVnicProfileValidator(); return ((((((((((validate(validator.vnicProfileIsSet())) && (validate(validator.vnicProfileExists()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.networkNotChanged()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.portMirroringNotChangedIfUsedByVms()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.UpdateVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.passthroughNotChangedIfUsedByVms()))) && (validate(validator.passthroughProfileContainsSupportedProperties(false)))) && (validate(validator.validNetworkFilterId())); }
private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(java.util.Comparator.naturalOrder()); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); if (retVal.isPresent()) { dataCenters.forEach(( dataCenter) -> dataCenter.setStoragePoolCompatibilityLevelUpgradeNeeded(((retVal.get().compareTo(dataCenter.getCompatibilityVersion())) > 0))); } return dataCenters; }	private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); dataCenters.forEach(this::setDcSingleMacPoolId); setDcCompatibilityLevelUpgradeNeeded(dataCenters); return dataCenters; }
public org.ovirt.engine.core.bll.ValidationResult memoryOptimizationConfiguration() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_AND_BALLOONING).when(((((cluster.getMaxVdsMemoryOverCommit()) > 100) || ((cluster.getMaxVdsMemoryOverCommit()) <= 0)) && (!((cluster.isEnableKsm()) || (cluster.isEnableBallooning()))))); }	public org.ovirt.engine.core.bll.ValidationResult memoryOptimizationConfiguration() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_OR_BALLOONING).when(((((cluster.getMaxVdsMemoryOverCommit()) > 100) || ((cluster.getMaxVdsMemoryOverCommit()) <= 0)) && (!((cluster.isEnableKsm()) || (cluster.isEnableBallooning()))))); }
@org.junit.Test public void memoryOptimizationLowerThenZeroWithoutKsmOrBallooning() { final org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.UpdateClusterCommandTest.createDefaultCluster(); cluster.setMaxVdsMemoryOverCommit((-52)); cluster.setEnableKsm(false); cluster.setEnableBallooning(false); createCommand(cluster); cpuExists(); validateFailedWithReason(EngineMessage.CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_AND_BALLOONING); }	@org.junit.Test public void memoryOptimizationLowerThenZeroWithoutKsmOrBallooning() { final org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.UpdateClusterCommandTest.createDefaultCluster(); cluster.setMaxVdsMemoryOverCommit((-52)); cluster.setEnableKsm(false); cluster.setEnableBallooning(false); createCommand(cluster); cpuExists(); validateFailedWithReason(EngineMessage.CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_OR_BALLOONING); }
java.lang.String CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_AND_BALLOONING();	java.lang.String CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_OR_BALLOONING();
@org.junit.Test public void memoryOptimizationWithoutKsmOrBallooning() { final org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.UpdateClusterCommandTest.createDefaultCluster(); cluster.setMaxVdsMemoryOverCommit(150); cluster.setEnableKsm(false); cluster.setEnableBallooning(false); createCommand(cluster); cpuExists(); validateFailedWithReason(EngineMessage.CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_AND_BALLOONING); }	@org.junit.Test public void memoryOptimizationWithoutKsmOrBallooning() { final org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.UpdateClusterCommandTest.createDefaultCluster(); cluster.setMaxVdsMemoryOverCommit(150); cluster.setEnableKsm(false); cluster.setEnableBallooning(false); createCommand(cluster); cpuExists(); validateFailedWithReason(EngineMessage.CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_OR_BALLOONING); }
private void setDiskProfilesList(java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> diskProfiles) { if ((diskProfiles != null) && (!(diskProfiles.isEmpty()))) { getDiskProfile().setItems(diskProfiles); } org.ovirt.engine.core.compat.Guid defaultProfileId = ((((getDisk()) != null) && (isExistingDisk())) && ((getDisk().getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE))) ? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getDiskProfileId() : null; if (defaultProfileId != null) { for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile profile : diskProfiles) { if (profile.getId().equals(defaultProfileId)) { getDiskProfile().setSelectedItem(profile); return; } } org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile = new org.ovirt.engine.core.common.businessentities.profiles.DiskProfile(); diskProfile.setId(defaultProfileId); if ((getDisk()) != null) { diskProfile.setName(getDiskImage().getDiskProfileName()); } diskProfiles.add(diskProfile); getDiskProfile().setItems(diskProfiles); getDiskProfile().setSelectedItem(diskProfile); } }	private void setDiskProfilesList(java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> diskProfiles) { if ((diskProfiles != null) && (!(diskProfiles.isEmpty()))) { getDiskProfile().setItems(diskProfiles); } org.ovirt.engine.core.compat.Guid defaultProfileId = ((((getDisk()) != null) && (!(getIsNew()))) && ((getDisk().getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE))) ? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getDiskProfileId() : null; if (defaultProfileId != null) { for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile profile : diskProfiles) { if (profile.getId().equals(defaultProfileId)) { getDiskProfile().setSelectedItem(profile); return; } } org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile = new org.ovirt.engine.core.common.businessentities.profiles.DiskProfile(); diskProfile.setId(defaultProfileId); if ((getDisk()) != null) { diskProfile.setName(getDiskImage().getDiskProfileName()); } diskProfiles.add(diskProfile); getDiskProfile().setItems(diskProfiles); getDiskProfile().setSelectedItem(diskProfile); } }
@java.lang.Override public org.ovirt.engine.api.model.Vm update(org.ovirt.engine.api.model.Vm incoming) { validateParameters(incoming); if ((incoming.isSetCluster()) && ((incoming.getCluster().isSetId()) || (incoming.getCluster().isSetName()))) { org.ovirt.engine.core.compat.Guid clusterId = lookupClusterId(incoming); if (!(clusterId.toString().equals(get().getCluster().getId()))) { performAction(VdcActionType.ChangeVMCluster, new org.ovirt.engine.core.common.action.ChangeVMClusterParameters(clusterId, guid, null)); } } if (!(isFiltered())) { if (incoming.isSetPlacementPolicy()) { parent.validateAndUpdateHostsInPlacementPolicy(incoming.getPlacementPolicy()); } } else { incoming.setPlacementPolicy(null); } org.ovirt.engine.api.model.Vm vm = performUpdate(incoming, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetVmByVmId, org.ovirt.engine.core.common.queries.IdQueryParameters.class), VdcActionType.UpdateVm, new org.ovirt.engine.api.restapi.resource.BackendVmResource.UpdateParametersProvider()); if (isNextRunRequested()) { org.ovirt.engine.core.common.businessentities.VM entity = getEntity(org.ovirt.engine.core.common.businessentities.VM.class, VdcQueryType.GetVmNextRunConfiguration, new org.ovirt.engine.core.common.queries.IdQueryParameters(guid), id, true); vm = addLinks(populate(org.ovirt.engine.api.restapi.types.VmMapper.map(entity, null, false), entity)); } if (vm != null) { org.ovirt.engine.api.restapi.util.DisplayHelper.adjustDisplayData(this, vm, false); removeRestrictedInfo(vm); } return vm; }	@java.lang.Override public org.ovirt.engine.api.model.Vm update(org.ovirt.engine.api.model.Vm incoming) { validateParameters(incoming); if ((incoming.isSetCluster()) && ((incoming.getCluster().isSetId()) || (incoming.getCluster().isSetName()))) { org.ovirt.engine.core.compat.Guid clusterId = lookupClusterId(incoming); if (!(clusterId.toString().equals(get().getCluster().getId()))) { performAction(VdcActionType.ChangeVMCluster, new org.ovirt.engine.core.common.action.ChangeVMClusterParameters(clusterId, guid, null)); } } if (!(isFiltered())) { if (incoming.isSetPlacementPolicy()) { parent.validateAndUpdateHostsInPlacementPolicy(incoming.getPlacementPolicy()); } } else { incoming.setPlacementPolicy(null); } org.ovirt.engine.core.common.queries.VdcQueryType queryType = (isNextRunRequested()) ? org.ovirt.engine.core.common.queries.VdcQueryType.GetVmNextRunConfiguration : org.ovirt.engine.core.common.queries.VdcQueryType.GetVmByVmId; org.ovirt.engine.api.model.Vm vm = performUpdate(incoming, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(queryType, org.ovirt.engine.core.common.queries.IdQueryParameters.class), VdcActionType.UpdateVm, new org.ovirt.engine.api.restapi.resource.BackendVmResource.UpdateParametersProvider()); if (vm != null) { org.ovirt.engine.api.restapi.util.DisplayHelper.adjustDisplayData(this, vm, false); removeRestrictedInfo(vm); } return vm; }
public void refresh() { try { refreshVdsRunTimeInfo(); } finally { try { if (((firstStatus) != (vds.getStatus())) && ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { vdsManager.cancelRecoveryJob(); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Host '{}' ({}) firing up event.", vds.getName(), vds.getId()); vdsManager.setIsSetNonOperationalExecuted((!(getVdsEventListener().vdsUpEvent(vds)))); } saveDataToDb(); } catch (org.ovirt.engine.core.vdsbroker.irsbroker.IRSErrorException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Exception", ex); } catch (java.lang.RuntimeException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Exception", ex); } } }	public void refresh() { try { refreshVdsRunTimeInfo(); } finally { try { if (((firstStatus) != (vds.getStatus())) && ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { vdsManager.cancelRecoveryJob(); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Host '{}' ({}) firing up event.", vds.getName(), vds.getId()); vdsManager.setIsSetNonOperationalExecuted((!(getVdsEventListener().vdsUpEvent(vds)))); } saveDataToDb(); } catch (java.lang.RuntimeException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Exception", ex); } } }
@org.junit.Test public void testListWithCustomGlobalHeaderOverridden() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(1); headers.put("my", "local"); clustersService.list().headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }	@org.junit.Test public void testListWithCustomGlobalHeaderOverridden() { clustersService.list().header("my", "local").send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }
public org.ovirt.engine.sdk4.ConnectionBuilder headers(java.util.Map<java.lang.String, java.lang.String> headers) { this.headers = headers; return this; }	public org.ovirt.engine.sdk4.ConnectionBuilder header(java.lang.String name, java.lang.String value) { headers.put(name, value); return this; }
@org.junit.Test public void testAddWithCustomGlobalHeader() { clustersService.add().cluster(cluster()).send(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }	@org.junit.Test public void testAddWithCustomGlobalHeader() { clustersService.add().cluster(cluster()).send(); assertEquals("value", getLastRequestHeaders().get("my").getFirst()); }
@org.junit.Test public void testLGetWithCustomGlobalHeader() { clusterService.get().send(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }	@org.junit.Test public void testLGetWithCustomGlobalHeader() { clusterService.get().send(); assertEquals("value", getLastRequestHeaders().get("my").getFirst()); }
@org.junit.Before public void setUp() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(); headers.put("my", "value"); setXmlResponse("clusters", 200, "<clusters/>"); setXmlResponse("clusters/123", 200, "<cluster id=\"123\"><name>test</name></cluster>"); startServer(); connection = ((org.ovirt.engine.sdk4.internal.HttpConnection) (testConnectionBuilder().headers(headers).build())); clustersService = connection.systemService().clustersService(); clusterService = clustersService.clusterService("123"); }	@org.junit.Before public void setUp() { setXmlResponse("clusters", 200, "<clusters/>"); setXmlResponse("clusters/123", 200, "<cluster id=\"123\"><name>test</name></cluster>"); startServer(); connection = ((org.ovirt.engine.sdk4.internal.HttpConnection) (testConnectionBuilder().header("my", "value").build())); clustersService = connection.systemService().clustersService(); clusterService = clustersService.clusterService("123"); }
@org.junit.Test public void testListWithCustomGlobalHeader() { clustersService.list().send(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }	@org.junit.Test public void testListWithCustomGlobalHeader() { clustersService.list().send(); assertEquals("value", getLastRequestHeaders().get("my").getFirst()); }
@org.junit.Test public void testRemoveWithCustomGlobalHeader() { clusterService.remove().send(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }	@org.junit.Test public void testRemoveWithCustomGlobalHeader() { clusterService.remove().send(); assertEquals("value", getLastRequestHeaders().get("my").getFirst()); }
@org.junit.Test public void testRemoveWithCustomGlobalHeaderOverridden() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(1); headers.put("my", "local"); clusterService.remove().headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }	@org.junit.Test public void testRemoveWithCustomGlobalHeaderOverridden() { clusterService.remove().header("my", "local").send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }
private void generateAdditionalHeadersParameters() { buffer.addLine(); buffer.addLine("if (headers != null) {"); buffer.addLine("for (Map.Entry<String, String> header : headers.entrySet()) {"); buffer.addLine("request.setHeader(header.getKey(), header.getValue());"); buffer.addLine("}"); buffer.addLine("}"); buffer.addLine(); }	private void generateAdditionalHeadersParameters() { buffer.addImport(java.util.Map.class); buffer.addLine(); buffer.addLine("if (headers != null) {"); buffer.addLine("for (Map.Entry<String, String> header : headers.entrySet()) {"); buffer.addLine("request.setHeader(header.getKey(), header.getValue());"); buffer.addLine("}"); buffer.addLine("}"); buffer.addLine(); }
private void generateAdditionalQueryParameters() { buffer.addLine("if (query != null) {"); buffer.addLine("for (Map.Entry<String, String> queryParam : query.entrySet()) {"); buffer.addLine("uriBuilder.addParameter(queryParam.getKey(), queryParam.getValue());"); buffer.addLine("}"); buffer.addLine("}"); }	private void generateAdditionalQueryParameters() { buffer.addImport(java.util.Map.class); buffer.addLine("if (query != null) {"); buffer.addLine("for (Map.Entry<String, String> queryParam : query.entrySet()) {"); buffer.addLine("uriBuilder.addParameter(queryParam.getKey(), queryParam.getValue());"); buffer.addLine("}"); buffer.addLine("}"); }
private void injectHeaders(org.apache.http.client.methods.HttpUriRequest request) { for (java.util.Map.Entry<java.lang.String, java.lang.String> header : headers.entrySet()) { request.addHeader(header.getKey(), header.getValue()); } java.util.List<org.apache.http.Header> updated = excludeNullHeaders(request.getAllHeaders()); if ((updated != null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(new org.apache.http.Header[updated.size()])); } for (org.apache.http.NameValuePair nameValuePair : org.apache.http.client.utils.URLEncodedUtils.parse(request.getURI(), HTTP.UTF_8)) { if (nameValuePair.getName().equalsIgnoreCase("all_content")) { request.addHeader("All-Content", nameValuePair.getValue()); } } request.addHeader("Version", "4"); request.addHeader("Content-type", "application/xml"); request.addHeader("User-Agent", "JavaSDK"); request.addHeader("Accept", "application/xml"); request.addHeader("Authorization", ("Bearer " + (getAccessToken()))); }	private void injectHeaders(org.apache.http.client.methods.HttpUriRequest request) { if ((headers) != null) { for (java.util.Map.Entry<java.lang.String, java.lang.String> header : headers.entrySet()) { request.addHeader(header.getKey(), header.getValue()); } } java.util.List<org.apache.http.Header> updated = excludeNullHeaders(request.getAllHeaders()); if ((updated != null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(new org.apache.http.Header[updated.size()])); } for (org.apache.http.NameValuePair nameValuePair : org.apache.http.client.utils.URLEncodedUtils.parse(request.getURI(), HTTP.UTF_8)) { if (nameValuePair.getName().equalsIgnoreCase("all_content")) { request.addHeader("All-Content", nameValuePair.getValue()); } } request.addHeader("Version", "4"); request.addHeader("Content-type", "application/xml"); request.addHeader("User-Agent", "JavaSDK"); request.addHeader("Accept", "application/xml"); request.addHeader("Authorization", ("Bearer " + (getAccessToken()))); }
@org.junit.Test public void testGetWithCustomGlobalHeaderOverridden() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(1); headers.put("my", "local"); clusterService.get().headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }	@org.junit.Test public void testGetWithCustomGlobalHeaderOverridden() { clusterService.get().header("my", "local").send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }
@org.junit.Test public void testListWithTwoCustomQueryParam() { java.util.Map<java.lang.String, java.lang.String> query = new java.util.HashMap<>(2); query.put("first", "value1"); query.put("second", "value2"); vmsService.list().query(query).send(); assertEquals("first=value1&second=value2", getLastRequestQuery()); }	@org.junit.Test public void testListWithTwoCustomQueryParam() { vmsService.list().query("first", "value1").query("second", "value2").send(); assertEquals("first=value1&second=value2", getLastRequestQuery()); }
private void injectHeaders(org.apache.http.client.methods.HttpUriRequest request) { for (java.util.Map.Entry<java.lang.String, java.lang.String> header : headers.entrySet()) { request.setHeader(header.getKey(), header.getValue()); } java.util.List<org.apache.http.Header> updated = excludeNullHeaders(request.getAllHeaders()); if ((updated != null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(new org.apache.http.Header[updated.size()])); } for (org.apache.http.NameValuePair nameValuePair : org.apache.http.client.utils.URLEncodedUtils.parse(request.getURI(), HTTP.UTF_8)) { if (nameValuePair.getName().equalsIgnoreCase("all_content")) { request.addHeader("All-Content", nameValuePair.getValue()); } } request.addHeader("Version", "4"); request.addHeader("Content-type", "application/xml"); request.addHeader("User-Agent", "JavaSDK"); request.addHeader("Accept", "application/xml"); request.addHeader("Authorization", ("Bearer " + (getAccessToken()))); }	private void injectHeaders(org.apache.http.client.methods.HttpUriRequest request) { if ((headers) != null) { for (java.util.Map.Entry<java.lang.String, java.lang.String> header : headers.entrySet()) { request.addHeader(header.getKey(), header.getValue()); } } java.util.List<org.apache.http.Header> updated = excludeNullHeaders(request.getAllHeaders()); if ((updated != null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(new org.apache.http.Header[updated.size()])); } for (org.apache.http.NameValuePair nameValuePair : org.apache.http.client.utils.URLEncodedUtils.parse(request.getURI(), HTTP.UTF_8)) { if (nameValuePair.getName().equalsIgnoreCase("all_content")) { request.addHeader("All-Content", nameValuePair.getValue()); } } request.addHeader("Version", "4"); request.addHeader("Content-type", "application/xml"); request.addHeader("User-Agent", "JavaSDK"); request.addHeader("Accept", "application/xml"); request.addHeader("Authorization", ("Bearer " + (getAccessToken()))); }
@org.junit.Test public void testListWithCustomQueryParam() { java.util.Map<java.lang.String, java.lang.String> query = new java.util.HashMap<>(1); query.put("my", "value"); vmsService.list().query(query).send(); assertEquals("my=value", getLastRequestQuery()); }	@org.junit.Test public void testListWithCustomQueryParam() { vmsService.list().query("my", "value").send(); assertEquals("my=value", getLastRequestQuery()); }
private void generateRequestInterface(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); java.lang.String request = getRequestName(method); java.lang.String response = getResponseName(method); javaBuffer.addLine("public interface %1$s extends Request<%1$s, %2$s> {", request, response); method.parameters().filter(Parameter::isIn).sorted().forEach(this::generateRequestParameterInterface); javaBuffer.addImport(java.util.Map.class); javaBuffer.addDocComment("Additional HTTP headers."); javaBuffer.addLine("%1s headers(Map<String, String> headers);", request); javaBuffer.addDocComment("Additional URL query parameters."); javaBuffer.addLine("%1s query(Map<String, String> query);", request); javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateRequestInterface(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); java.lang.String request = getRequestName(method); java.lang.String response = getResponseName(method); javaBuffer.addLine("public interface %1$s extends Request<%1$s, %2$s> {", request, response); method.parameters().filter(Parameter::isIn).sorted().forEach(this::generateRequestParameterInterface); javaBuffer.addLine("}"); javaBuffer.addLine(); }
@org.junit.Test public void testAddWithCustomGlobalHeaderOverridden() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(1); headers.put("my", "local"); clustersService.add().cluster(cluster()).headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }	@org.junit.Test public void testAddWithCustomGlobalHeaderOverridden() { clustersService.add().cluster(cluster()).header("my", "local").send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }
private void generateRequestImplementation(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Name name = method.getName(); java.lang.String request = getRequestName(method); java.lang.String requestImpl = getRequestImplName(method); buffer.addLine("private class %1$s implements %2$s {", requestImpl, request); method.parameters().filter(Parameter::isIn).sorted().forEach(this::generateRequestParameterImplementation); buffer.addImport(java.util.Map.class); buffer.addLine("private Map<String, String> headers;"); buffer.addLine("public %1s headers(Map<String, String> headers) {", request); buffer.addLine("this.headers = headers;"); buffer.addLine("return this;"); buffer.addLine("}"); buffer.addLine("private Map<String, String> query;"); buffer.addLine("public %1s query(Map<String, String> query) {", request); buffer.addLine("this.query = query;"); buffer.addLine("return this;"); buffer.addLine("}"); buffer.addLine("public %1$s send() {", getResponseName(method)); if (org.ovirt.sdk.java.ServicesImplGenerator.ADD.equals(name)) { generateAddRequestImplementation(method); } else if ((org.ovirt.sdk.java.ServicesImplGenerator.GET.equals(name)) || (org.ovirt.sdk.java.ServicesImplGenerator.LIST.equals(name))) { generateListRequestImplementation(method); } else if (org.ovirt.sdk.java.ServicesImplGenerator.REMOVE.equals(name)) { generateRemoveRequestImplementation(method); } else if (org.ovirt.sdk.java.ServicesImplGenerator.UPDATE.equals(name)) { generateUpdateRequestImplementation(method); } else { generateActionRequestImplementation(method); } buffer.addLine("}"); buffer.addLine(); buffer.addLine("}"); buffer.addLine(); }	private void generateRequestImplementation(org.ovirt.api.metamodel.concepts.Method method) { buffer.addImport(((BASE_PACKAGE) + ".BaseRequest")); org.ovirt.api.metamodel.concepts.Name name = method.getName(); java.lang.String request = getRequestName(method); java.lang.String response = getResponseName(method); java.lang.String requestImpl = getRequestImplName(method); buffer.addLine("private class %1$s extends BaseRequest<%2$s, %3$s> implements %2$s {", requestImpl, request, response); method.parameters().filter(Parameter::isIn).sorted().forEach(this::generateRequestParameterImplementation); buffer.addLine("public %1$s send() {", getResponseName(method)); if (org.ovirt.sdk.java.ServicesImplGenerator.ADD.equals(name)) { generateAddRequestImplementation(method); } else if ((org.ovirt.sdk.java.ServicesImplGenerator.GET.equals(name)) || (org.ovirt.sdk.java.ServicesImplGenerator.LIST.equals(name))) { generateListRequestImplementation(method); } else if (org.ovirt.sdk.java.ServicesImplGenerator.REMOVE.equals(name)) { generateRemoveRequestImplementation(method); } else if (org.ovirt.sdk.java.ServicesImplGenerator.UPDATE.equals(name)) { generateUpdateRequestImplementation(method); } else { generateActionRequestImplementation(method); } buffer.addLine("}"); buffer.addLine(); buffer.addLine("}"); buffer.addLine(); }
@java.lang.Override public javax.ws.rs.core.Response ticket(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.businessentities.GraphicsType graphicsType = deriveGraphicsType(); if (graphicsType == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("Operation Failed"); fault.setDetail(localize(Messages.CANNOT_GET_TICKET_FOR_DOWN_VM)); return javax.ws.rs.core.Response.status(Response.Status.CONFLICT).entity(fault).build(); } java.lang.String consoleId = org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.asConsoleId(graphicsType); return getGraphicsConsolesResource().getConsoleResource(consoleId).ticket(action); }	@java.lang.Override public javax.ws.rs.core.Response ticket(org.ovirt.engine.api.model.Action action) { return org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.setTicket(this, action, guid, deriveGraphicsType()); }
public boolean isAction() { java.util.List<java.lang.String> nonActionMethodNames = new java.util.ArrayList<>(java.util.Arrays.asList("add", "get", "list", "update", "remove")); if ((nonActionMethodNames.contains(getName().toString().toLowerCase())) || (((base) != null) && (nonActionMethodNames.contains(base.getName().toString().toLowerCase())))) { return false; } else { return true; } }	public boolean isAction() { return !((NON_ACTION_METHOD_NAMES.contains(getName())) || (((base) != null) && (NON_ACTION_METHOD_NAMES.contains(base.getName())))); }
private void generateUpdateMethod(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Name helperClassName, boolean base) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) { java.lang.System.err.println((("Method \"" + method) + "\" doesn\'t have any struct parameter")); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.PUT.class); javaBuffer.addImports(mainTypeReference.getImports()); generateDoc(method); javaBuffer.addLine("@PUT"); javaBuffer.addLine("@Consumes({ %s })", generateMediaTypes()); java.lang.String parameterName = javaNames.getJavaMemberStyleName(mainParameter.getName()); if (base) { javaBuffer.addLine("default %s update(%s %s) {", mainTypeReference.getText(), mainTypeReference.getText(), parameterName); writeHelperInvocation(helperClassName, parameterName, method.getName()); javaBuffer.addLine("}"); } else { addMethod(mainTypeReference.getText(), "update(%s %s)", mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); } javaBuffer.addLine(); }	private void generateUpdateMethod(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.tool.JavaClassName helperClassName, boolean base) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = jaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) { throw new java.lang.IllegalStateException((("Method \"" + method) + "\" doesn\'t have any struct parameter")); } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.PUT.class); javaBuffer.addImports(mainTypeReference.getImports()); generateDoc(method); javaBuffer.addLine("@PUT"); javaBuffer.addLine("@Consumes({ %s })", generateMediaTypes()); java.lang.String parameterName = javaNames.getJavaMemberStyleName(mainParameter.getName()); if (base) { javaBuffer.addLine("default %s update(%s %s) {", mainTypeReference.getText(), mainTypeReference.getText(), parameterName); if (method.isMandatoryAttributeExists()) { writeHelperInvocation(helperClassName, parameterName, method.getName()); } else { javaBuffer.addLine("throw new UnsupportedOperationException();"); } javaBuffer.addLine("}"); } else { addMethod(mainTypeReference.getText(), "update(%s %s)", mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); } javaBuffer.addLine(); }
private void generateAddMethod(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Name helperClassName, boolean base) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainAddParameter(method); if (mainParameter == null) { java.lang.System.err.println((("Method \"" + method) + "\" doesn\'t have any struct parameter")); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.POST.class); javaBuffer.addImport(javax.ws.rs.core.Response.class); javaBuffer.addImports(mainTypeReference.getImports()); generateDoc(method); javaBuffer.addLine("@POST"); javaBuffer.addLine("@Consumes({ %s })", generateMediaTypes()); java.lang.String parameterName = javaNames.getJavaMemberStyleName(mainParameter.getName()); if (base) { javaBuffer.addLine("default Response add(%s %s) {", mainTypeReference.getText(), parameterName); writeHelperInvocation(helperClassName, parameterName, method.getName()); javaBuffer.addLine("}"); } else { addResponseReturnMethod("add(%s %s)", mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); } javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateAddMethod(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.tool.JavaClassName helperClassName, boolean base) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = jaxrsGeneratorUtils.getMainAddParameter(method); if (mainParameter == null) { throw new java.lang.IllegalStateException((("Method \"" + method) + "\" doesn\'t have any struct parameter")); } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.POST.class); javaBuffer.addImport(javax.ws.rs.core.Response.class); javaBuffer.addImports(mainTypeReference.getImports()); generateDoc(method); javaBuffer.addLine("@POST"); javaBuffer.addLine("@Consumes({ %s })", generateMediaTypes()); java.lang.String parameterName = javaNames.getJavaMemberStyleName(mainParameter.getName()); if (base) { javaBuffer.addLine("default public Response add(%s %s) {", mainTypeReference.getText(), parameterName); if (method.isMandatoryAttributeExists()) { writeHelperInvocation(helperClassName, parameterName, method.getName()); } else { javaBuffer.addLine("throw new UnsupportedOperationException();"); } javaBuffer.addLine("}"); } else { addResponseReturnMethod("add(%s %s)", mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); } javaBuffer.addLine(); }
private void generateGetMethod(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) { java.lang.System.err.println((("Method \"" + method) + "\" doesn\'t have any struct parameter")); return; } org.ovirt.api.metamodel.concepts.Service service = method.getDeclaringService(); boolean isRoot = service == (service.getModel().getRoot()); generateDoc(method); javaBuffer.addImport(javax.ws.rs.GET.class); javaBuffer.addLine("@GET"); if (isRoot) { javaBuffer.addImport(javax.ws.rs.core.Response.class); addResponseReturnMethod("get()"); } else { org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImports(mainTypeReference.getImports()); addMethod(mainTypeReference.getText(), "get()"); } javaBuffer.addLine(); }	private void generateGetMethod(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = jaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) { throw new java.lang.IllegalStateException((("Method \"" + method) + "\" doesn\'t have any struct parameter")); } org.ovirt.api.metamodel.concepts.Service service = method.getDeclaringService(); boolean isRoot = service == (service.getModel().getRoot()); generateDoc(method); javaBuffer.addImport(javax.ws.rs.GET.class); javaBuffer.addLine("@GET"); if (isRoot) { javaBuffer.addImport(javax.ws.rs.core.Response.class); addResponseReturnMethod("get()"); } else { org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImports(mainTypeReference.getImports()); addMethod(mainTypeReference.getText(), "get()"); } javaBuffer.addLine(); }
private void generateMethod(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Name helperClassName, java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods) { boolean base = baseMethods.containsKey(method); org.ovirt.api.metamodel.concepts.Name name = method.getName(); if (JaxrsGeneratorUtils.ADD.equals(name)) { generateAddMethod(method, helperClassName, base); } else if (JaxrsGeneratorUtils.GET.equals(name)) { generateGetMethod(method); } else if (JaxrsGeneratorUtils.LIST.equals(name)) { generateListMethod(method); } else if (JaxrsGeneratorUtils.REMOVE.equals(name)) { generateRemoveMethod(method); } else if (JaxrsGeneratorUtils.UPDATE.equals(name)) { generateUpdateMethod(method, helperClassName, base); } else if (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isAddSignature(method)) { generateAddSignature(method); } else if (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isUpdateSignature(method)) { generateUpdateSignature(method); } else if (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isActionSignature(method)) { generateActionSignature(method); } else { generateActionMethod(method, helperClassName, base); } }	private void generateMethod(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.tool.JavaClassName helperClassName, java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods) { boolean base = baseMethods.containsKey(method); org.ovirt.api.metamodel.concepts.Name name = method.getName(); if (JaxrsGeneratorUtils.ADD.equals(name)) { generateAddMethod(method, helperClassName, base); } else if (JaxrsGeneratorUtils.GET.equals(name)) { generateGetMethod(method); } else if (JaxrsGeneratorUtils.LIST.equals(name)) { generateListMethod(method); } else if (JaxrsGeneratorUtils.REMOVE.equals(name)) { generateRemoveMethod(method); } else if (JaxrsGeneratorUtils.UPDATE.equals(name)) { generateUpdateMethod(method, helperClassName, base); } else if (jaxrsGeneratorUtils.isAddSignature(method)) { generateAddSignature(method); } else if (jaxrsGeneratorUtils.isUpdateSignature(method)) { generateUpdateSignature(method); } else if (jaxrsGeneratorUtils.isActionSignature(method)) { generateActionSignature(method); } else { generateActionMethod(method, helperClassName, base); } }
private void generateActionMethod(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Name helperClassName, boolean base) { javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.POST.class); javaBuffer.addImport(javax.ws.rs.Path.class); javaBuffer.addImport(javax.ws.rs.core.Response.class); javaBuffer.addImport(javaPackages.getXjcPackageName(), "Action"); javaBuffer.addImport(javaPackages.getXjcPackageName(), "Actionable"); generateDoc(method); javaBuffer.addLine("@POST"); javaBuffer.addLine("@Consumes({ %s })", generateMediaTypes()); javaBuffer.addLine("@Actionable"); javaBuffer.addLine("@Path(\"%s\")", jaxrsNames.getActionPath(method.getName())); java.lang.String methodName = jaxrsNames.getMethodName(method.getName()); if (base) { javaBuffer.addLine("default Response %s(Action action) {", methodName); writeHelperInvocation(helperClassName, "action", method.getName()); javaBuffer.addLine("}"); } else { addResponseReturnMethod(((jaxrsNames.getMethodName(method.getName())) + "(Action action)")); } javaBuffer.addLine(); }	private void generateActionMethod(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.tool.JavaClassName helperClassName, boolean base) { javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.POST.class); javaBuffer.addImport(javax.ws.rs.Path.class); javaBuffer.addImport(javax.ws.rs.core.Response.class); javaBuffer.addImport(javaPackages.getXjcPackageName(), "Action"); javaBuffer.addImport(javaPackages.getXjcPackageName(), "Actionable"); generateDoc(method); javaBuffer.addLine("@POST"); javaBuffer.addLine("@Consumes({ %s })", generateMediaTypes()); javaBuffer.addLine("@Actionable"); javaBuffer.addLine("@Path(\"%s\")", jaxrsNames.getActionPath(method.getName())); java.lang.String methodName = jaxrsNames.getMethodName(method.getName()); if (base) { javaBuffer.addLine("default Response %s(Action action) {", methodName); if (method.isMandatoryAttributeExists()) { writeHelperInvocation(helperClassName, "action", method.getName()); } else { javaBuffer.addLine("throw new UnsupportedOperationException();"); } javaBuffer.addLine("}"); } else { addResponseReturnMethod(((jaxrsNames.getMethodName(method.getName())) + "(Action action)")); } javaBuffer.addLine(); }
private void generateUpdateSignature(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) { java.lang.System.err.println((("Method \"" + method) + "\" doesn\'t have any struct parameter")); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); java.lang.String methodName = concatenateName(method, method.getBase().getName()); javaBuffer.addLine((("default %s " + methodName) + "(%s %s) {"), mainTypeReference.getText(), mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); javaBuffer.addLine("throw new UnsupportedOperationException();"); javaBuffer.addLine("}"); }	private void generateUpdateSignature(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); org.ovirt.api.metamodel.concepts.Parameter mainParameter = jaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) { throw new java.lang.IllegalStateException((("Method \"" + method) + "\" doesn\'t have any struct parameter")); } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); java.lang.String methodName = javaNames.getJavaMemberStyleName(names.concatenate(method.getBase().getName(), method.getName())); javaBuffer.addLine((("default public %s " + methodName) + "(%s %s) {"), mainTypeReference.getText(), mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); javaBuffer.addLine("throw new UnsupportedOperationException();"); javaBuffer.addLine("}"); }
private void initVariables(org.ovirt.api.metamodel.concepts.Service service) { resourceName = jaxrsNames.getInterfaceName(service); helperName = new org.ovirt.api.metamodel.tool.JavaClassName(resourceName.getPackageName(), ((resourceName.getSimpleName()) + "Helper")); serviceMethods = service.getDeclaredMethods(); baseMethods = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getBaseMethodsMap(serviceMethods); javaBuffer = new org.ovirt.api.metamodel.tool.JavaClassBuffer(); javaBuffer.setClassName(helperName); javaBuffer.addImport(resourceName); }	private void initVariables(org.ovirt.api.metamodel.concepts.Service service) { resourceName = jaxrsNames.getInterfaceName(service); helperName = new org.ovirt.api.metamodel.tool.JavaClassName(resourceName.getPackageName(), ((resourceName.getSimpleName()) + "Helper")); serviceMethods = service.getDeclaredMethods(); baseMethods = jaxrsGeneratorUtils.getBaseMethodsMap(serviceMethods); javaBuffer = new org.ovirt.api.metamodel.tool.JavaClassBuffer(); javaBuffer.setClassName(helperName); javaBuffer.addImport(resourceName); }
private void writeHelperInvocation(org.ovirt.api.metamodel.concepts.Name helperClassName, java.lang.String parameterName, org.ovirt.api.metamodel.concepts.Name methodName) { java.lang.String helperMethodName = ("get" + (javaNames.getJavaClassStyleName(methodName))) + "Signature"; javaBuffer.addLine("try {"); javaBuffer.addLine((((((((("return (Response)" + (javaNames.getJavaClassStyleName(helperClassName))) + ".") + helperMethodName) + "(") + parameterName) + ").invoke(this, ") + parameterName) + ");")); javaBuffer.addLine("} catch(Exception e) {"); javaBuffer.addLine("throw new IllegalStateException(\"Failed to find or invoke API method. The failure is in auto-generated code and indicates a bug in the JAX-RS intrafaces generation process\", e);"); javaBuffer.addLine("}"); }	private void writeHelperInvocation(org.ovirt.api.metamodel.tool.JavaClassName helperClassName, java.lang.String parameterName, org.ovirt.api.metamodel.concepts.Name methodName) { java.lang.String helperMethodName = ("get" + (javaNames.getJavaClassStyleName(methodName))) + "Signature"; javaBuffer.addLine("try {"); javaBuffer.addLine((((((((("return (Response)(" + (helperClassName.getSimpleName())) + ".") + helperMethodName) + "(") + parameterName) + ").invoke(this, ") + parameterName) + "));")); javaBuffer.addLine("}"); javaBuffer.addLine("catch(Exception e) {"); javaBuffer.addLine("throw new IllegalStateException(\"Failed to find or invoke API method. The failure is in auto-generated code and indicates a bug in the JAX-RS intrafaces generation process\", e);"); javaBuffer.addLine("}"); }
private void writeActionValidationMethodName(org.ovirt.api.metamodel.concepts.Method method) { javaBuffer.addLine("public static void validate%s(Action action) {", javaNames.getJavaClassStyleName(method.getName())); }	private void writeActionValidationMethodName(org.ovirt.api.metamodel.concepts.Method method) { javaBuffer.addImports(schemaNames.getXjcTypeReference(org.ovirt.api.metamodel.tool.JaxrsHelperGenerator.ACTION_TYPE).getImports()); javaBuffer.addLine("public static void validate%s(Action action) {", javaNames.getJavaClassStyleName(method.getName())); }
private static void updateBaseMethodsMap(org.ovirt.api.metamodel.concepts.Method method, java.util.List<org.ovirt.api.metamodel.concepts.Method> methods, java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods) { for (org.ovirt.api.metamodel.concepts.Method currentMethod : methods) { if (((currentMethod.getBase()) != null) && (currentMethod.getBase().equals(method))) { org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.add(baseMethods, method, currentMethod); } } }	private void updateBaseMethodsMap(org.ovirt.api.metamodel.concepts.Method method, java.util.List<org.ovirt.api.metamodel.concepts.Method> methods, java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods) { for (org.ovirt.api.metamodel.concepts.Method currentMethod : methods) { if (((currentMethod.getBase()) != null) && (currentMethod.getBase().equals(method))) { add(baseMethods, method, currentMethod); } } }
public static boolean isActionSignature(org.ovirt.api.metamodel.concepts.Method method) { return (((method.getBase()) != null) && (!(method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.ADD)))) && (!(method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.UPDATE))); }	public boolean isActionSignature(org.ovirt.api.metamodel.concepts.Method method) { return (((method.getBase()) != null) && (!(method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.ADD)))) && (!(method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.UPDATE))); }
private static void add(java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods, org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Method currentMethod) { if (!(baseMethods.containsKey(method))) { baseMethods.put(method, new java.util.HashSet()); } java.util.Set<org.ovirt.api.metamodel.concepts.Method> signatures = ((java.util.Set<org.ovirt.api.metamodel.concepts.Method>) (baseMethods.get(method))); signatures.add(currentMethod); }	private void add(java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods, org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Method currentMethod) { if (!(baseMethods.containsKey(method))) { baseMethods.put(method, new java.util.HashSet()); } java.util.Set<org.ovirt.api.metamodel.concepts.Method> signatures = ((java.util.Set<org.ovirt.api.metamodel.concepts.Method>) (baseMethods.get(method))); signatures.add(currentMethod); }
private void generateValidationMethodName(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter parameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainAddParameter(method); javaBuffer.addImports(schemaNames.getXjcTypeReference(parameter.getType()).getImports()); javaBuffer.addLine("public static void validate%s(%s %s) {", javaNames.getJavaClassStyleName(method.getName()), javaNames.getJavaClassStyleName(parameter.getName()), javaNames.getJavaMemberStyleName(parameter.getName())); }	private void generateValidationMethodName(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter parameter = jaxrsGeneratorUtils.getMainAddParameter(method); javaBuffer.addImports(schemaNames.getXjcTypeReference(parameter.getType()).getImports()); javaBuffer.addLine("public static void validate%s(%s %s) {", javaNames.getJavaClassStyleName(method.getName()), javaNames.getJavaClassStyleName(parameter.getType().getName()), javaNames.getJavaMemberStyleName(parameter.getName())); }
public static org.ovirt.api.metamodel.concepts.Parameter getMainAddParameter(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = method.getParameters().stream().filter(( x) -> ((x.getType()) instanceof org.ovirt.api.metamodel.concepts.StructType) || ((x.getType()) instanceof org.ovirt.api.metamodel.concepts.ListType)).findFirst().orElse(null); return mainParameter; }	public org.ovirt.api.metamodel.concepts.Parameter getMainAddParameter(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = method.getParameters().stream().filter(( x) -> ((x.getType()) instanceof org.ovirt.api.metamodel.concepts.StructType) || ((x.getType()) instanceof org.ovirt.api.metamodel.concepts.ListType)).findFirst().orElse(null); return mainParameter; }
public static boolean isAddSignature(org.ovirt.api.metamodel.concepts.Method method) { return ((method.getBase()) != null) && (method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.ADD)); }	public boolean isAddSignature(org.ovirt.api.metamodel.concepts.Method method) { return ((method.getBase()) != null) && (method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.ADD)); }
public static org.ovirt.api.metamodel.concepts.Parameter getMainUpdateParameter(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = method.getParameters().stream().filter(( x) -> (x.getType()) instanceof org.ovirt.api.metamodel.concepts.StructType).findFirst().orElse(null); return mainParameter; }	public org.ovirt.api.metamodel.concepts.Parameter getMainUpdateParameter(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = method.getParameters().stream().filter(( x) -> (x.getType()) instanceof org.ovirt.api.metamodel.concepts.StructType).findFirst().orElse(null); return mainParameter; }
public static boolean isUpdateSignature(org.ovirt.api.metamodel.concepts.Method method) { return ((method.getBase()) != null) && (method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.UPDATE)); }	public boolean isUpdateSignature(org.ovirt.api.metamodel.concepts.Method method) { return ((method.getBase()) != null) && (method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.UPDATE)); }
public static java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> getBaseMethodsMap(java.util.List<org.ovirt.api.metamodel.concepts.Method> methods) { java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods = new java.util.HashMap<>(); methods.forEach(( x) -> updateBaseMethodsMap(x, methods, baseMethods)); return baseMethods; }	public java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> getBaseMethodsMap(java.util.List<org.ovirt.api.metamodel.concepts.Method> methods) { java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods = new java.util.HashMap<>(); methods.forEach(( x) -> updateBaseMethodsMap(x, methods, baseMethods)); return baseMethods; }
private void closeSignatureDetectionMethod() { javaBuffer.addLine("else {"); javaBuffer.addLine("return null;"); javaBuffer.addLine("}"); javaBuffer.addLine("}"); }	private void closeSignatureDetectionMethod() { javaBuffer.addLine(""); javaBuffer.addLine("throw new IllegalArgumentException(\"No matching signature found, make sure that mandatory attributes are provided.\");"); javaBuffer.addLine("}"); javaBuffer.addLine(""); }
private void generateAddSignature(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainAddParameter(method); if (mainParameter == null) { java.lang.System.err.println((("Method \"" + method) + "\" doesn\'t have any struct parameter")); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); java.lang.String parameterName = javaNames.getJavaMemberStyleName(mainParameter.getName()); java.lang.String methodName = concatenateName(method, method.getBase().getName()); javaBuffer.addLine((("default Response " + methodName) + "(%s %s) {"), mainTypeReference.getText(), parameterName); javaBuffer.addLine("throw new UnsupportedOperationException();"); javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateAddSignature(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); org.ovirt.api.metamodel.concepts.Parameter mainParameter = jaxrsGeneratorUtils.getMainAddParameter(method); if (mainParameter == null) { throw new java.lang.IllegalStateException((("Method \"" + method) + "\" doesn\'t have any struct parameter")); } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImports(mainTypeReference.getImports()); java.lang.String parameterName = javaNames.getJavaMemberStyleName(mainParameter.getName()); java.lang.String methodName = javaNames.getJavaMemberStyleName(names.concatenate(method.getBase().getName(), method.getName())); javaBuffer.addLine("default public Response %s(%s %s) {", methodName, mainTypeReference.getText(), parameterName); javaBuffer.addLine("throw new UnsupportedOperationException();"); javaBuffer.addLine("}"); javaBuffer.addLine(); }
private static boolean isAttributesContained(java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> mandatoryAttributes1, java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> mandatoryAttributes2) { return org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.toNames(mandatoryAttributes2).containsAll(org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.toNames(mandatoryAttributes1)); }	private boolean isAttributesContained(java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> mandatoryAttributes1, java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> mandatoryAttributes2) { if ((mandatoryAttributes1.isEmpty()) && (mandatoryAttributes2.isEmpty())) { return false; } return toNames(mandatoryAttributes2).containsAll(toNames(mandatoryAttributes1)); }
private static java.util.List<org.ovirt.api.metamodel.concepts.Name> toNames(java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> attributes) { java.util.List<org.ovirt.api.metamodel.concepts.Name> names = new java.util.ArrayList<>(); for (org.ovirt.api.metamodel.concepts.MemberInvolvementTree attribute : attributes) { names.add(((attribute.getAlternative()) == null ? attribute.shallowToString() : org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.combineAlternatives(attribute))); } return names; }	private java.util.List<org.ovirt.api.metamodel.concepts.Name> toNames(java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> attributes) { java.util.List<org.ovirt.api.metamodel.concepts.Name> names = new java.util.ArrayList<>(); for (org.ovirt.api.metamodel.concepts.MemberInvolvementTree attribute : attributes) { names.add(((attribute.getAlternative()) == null ? attribute.shallowToString() : combineAlternatives(attribute))); } return names; }
private void generateValidation(org.ovirt.api.metamodel.concepts.Method method) { generateValidationMethodName(method); for (org.ovirt.api.metamodel.concepts.Parameter parameter : method.getParameters()) { generateParameterValidation(parameter); } javaBuffer.addLine("}"); }	private void generateValidation(org.ovirt.api.metamodel.concepts.Method method) { if (method.isMandatoryAttributeExists()) { generateValidationMethodName(method); for (org.ovirt.api.metamodel.concepts.Parameter parameter : method.getParameters()) { generateParameterValidation(parameter); } javaBuffer.addLine("}"); javaBuffer.addLine(""); } }
private void generateHelperCode(org.ovirt.api.metamodel.concepts.Method method) { boolean base = baseMethods.containsKey(method); org.ovirt.api.metamodel.concepts.Name name = method.getName(); if ((((((JaxrsGeneratorUtils.GET.equals(name)) || (JaxrsGeneratorUtils.LIST.equals(name))) || (JaxrsGeneratorUtils.REMOVE.equals(name))) || (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isAddSignature(method))) || (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isUpdateSignature(method))) || (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isActionSignature(method))) { return; } if ((JaxrsGeneratorUtils.ADD.equals(name)) || (JaxrsGeneratorUtils.UPDATE.equals(name))) { if (base) { generateSignatureDetection(method); } else { if (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isMandatoryParametersExist(method)) { generateValidation(method); } else { } } } else { if (base) { generateActionSignatureDetection(method, serviceMethods); } else if (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isMandatoryParametersExist(method)) { if (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isMandatoryParametersExist(method)) { generateActionValidation(method); } else { } } } }	private void generateHelperCode(org.ovirt.api.metamodel.concepts.Method method) { boolean base = baseMethods.containsKey(method); org.ovirt.api.metamodel.concepts.Name name = method.getName(); if ((((((JaxrsGeneratorUtils.GET.equals(name)) || (JaxrsGeneratorUtils.LIST.equals(name))) || (JaxrsGeneratorUtils.REMOVE.equals(name))) || (jaxrsGeneratorUtils.isAddSignature(method))) || (jaxrsGeneratorUtils.isUpdateSignature(method))) || (jaxrsGeneratorUtils.isActionSignature(method))) { return; } if ((JaxrsGeneratorUtils.ADD.equals(name)) || (JaxrsGeneratorUtils.UPDATE.equals(name))) { if (base) { generateSignatureDetection(method); } else { generateValidation(method); } } else { if (base) { generateActionSignatureDetection(method); } else { generateActionValidation(method); } } }
private void generateActionSignature(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); org.ovirt.api.metamodel.concepts.Name methodName = new org.ovirt.api.metamodel.concepts.Name(method.getBase().getName()); methodName.addWords(method.getName().getWords()); javaBuffer.addLine("Response %s(Action action) {", jaxrsNames.getMethodName(methodName)); javaBuffer.addLine("throw new UnsupportedOperationException();"); javaBuffer.addLine("}"); }	private void generateActionSignature(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); javaBuffer.addImport(javax.ws.rs.core.Response.class); javaBuffer.addImport(javaPackages.getXjcPackageName(), "Action"); org.ovirt.api.metamodel.concepts.Name methodName = new org.ovirt.api.metamodel.concepts.Name(method.getBase().getName()); methodName.addWords(method.getName().getWords()); javaBuffer.addLine("default public Response %s(Action action) {", jaxrsNames.getMethodName(methodName)); javaBuffer.addLine("throw new UnsupportedOperationException();"); javaBuffer.addLine("}"); }
private void generateParameterValidation(org.ovirt.api.metamodel.concepts.Parameter parameter) { for (org.ovirt.api.metamodel.concepts.MemberInvolvementTree attribute : parameter.getMandatoryAttributes()) { java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> list = stackAttributeComponents(attribute); java.lang.String attributePath = getAttributePath(list); java.lang.String name = javaNames.getJavaMemberStyleName(parameter.getName()); javaBuffer.addLine((("if (" + name) + "==null")); javaBuffer.addLine(getFullAttributeCheck(javaNames.getJavaMemberStyleName(parameter.getName()), list, org.ovirt.api.metamodel.tool.JaxrsHelperGenerator.Operator.OR)); javaBuffer.addLine(((("throw new IllegalArgumentException(\"Invalid input, " + name) + attributePath) + " is mandatory\");")); javaBuffer.addLine("}"); javaBuffer.addLine(); } }	private void generateParameterValidation(org.ovirt.api.metamodel.concepts.Parameter parameter) { java.lang.String parameterName = javaNames.getJavaMemberStyleName(parameter.getName()); java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> mandatoryAttributes = parameter.getMandatoryAttributes(); if ((parameter.isMandatory()) || (!(mandatoryAttributes.isEmpty()))) { javaBuffer.addLine((("if (" + parameterName) + "==null) {")); javaBuffer.addLine((("throw new IllegalArgumentException(\"" + parameterName) + " is mandatory but was not provided.\");")); javaBuffer.addLine("}"); } for (org.ovirt.api.metamodel.concepts.MemberInvolvementTree attribute : mandatoryAttributes) { java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> attributeComponents = stackAttributeComponents(attribute); java.lang.String attributePath = getAttributePath(attributeComponents); if (attribute.hasAlternative()) { generateAlternativesValidation(parameter.getName(), attribute, attributeComponents, attributePath); } else { javaBuffer.addLine((("if (" + (getFullAttributeCheck(javaNames.getJavaMemberStyleName(parameter.getName()), attributeComponents, org.ovirt.api.metamodel.tool.JaxrsHelperGenerator.Operator.OR, false))) + ") {")); javaBuffer.addLine(((("throw new IllegalArgumentException(\"" + parameterName) + attributePath) + " is mandatory but was not provided.\");")); } javaBuffer.addLine("}"); javaBuffer.addLine(); } }
public static boolean isContained(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Method method2) { if (method.getName().equals(method2.getName())) { return false; } if (((method.getBase()) == null) || ((method2.getBase()) == null)) { return false; } if (!(method.getBase().getName().equals(method2.getBase().getName()))) { return false; } return (org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.isParametersContained(method.getMandatoryParameters(), method2.getMandatoryParameters())) && (org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.isAttributesContained(method.getMandatoryAttributes(), method2.getMandatoryAttributes())); }	public boolean isContained(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Method method2) { if (method.getName().equals(method2.getName())) { return false; } if (((method.getBase()) == null) || ((method2.getBase()) == null)) { return false; } if (!(method.getBase().getName().equals(method2.getBase().getName()))) { return false; } return (isParametersContained(method.getMandatoryParameters(), method2.getMandatoryParameters())) && (isAttributesContained(method.getMandatoryAttributes(), method2.getMandatoryAttributes())); }
private void generateSignatureDetection(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter parameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainAddParameter(method); javaBuffer.addImports(schemaNames.getXjcTypeReference(parameter.getType()).getImports()); org.ovirt.api.metamodel.concepts.Name methodName = getSignatureDetectionMethodName(method); org.ovirt.api.metamodel.concepts.Name parameterName = parameter.getName(); javaBuffer.addLine("public static Method %s(%s %s) throws NoSuchMethodException, SecurityException {", javaNames.getJavaMemberStyleName(methodName), javaNames.getJavaClassStyleName(parameterName), javaNames.getJavaMemberStyleName(parameterName)); generateParameterValidation(parameter); java.util.Set<org.ovirt.api.metamodel.concepts.Method> signatures = baseMethods.get(method); org.ovirt.api.metamodel.tool.JaxrsHelperGenerator.CyclicIterator iterator = new org.ovirt.api.metamodel.tool.JaxrsHelperGenerator.CyclicIterator(signatures); while (iterator.hasNext()) { org.ovirt.api.metamodel.concepts.Method signature = iterator.next(); if (!(org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.isContained(signature, signatures))) { handleSignature(method.getName(), signature, parameterName); iterator.remove(); } } closeSignatureDetectionMethod(); }	private void generateSignatureDetection(org.ovirt.api.metamodel.concepts.Method method) { java.util.Set<org.ovirt.api.metamodel.concepts.Method> signatures = baseMethods.get(method); if (mandatoryAttributeExists(signatures)) { javaBuffer.addImport(java.lang.reflect.Method.class); org.ovirt.api.metamodel.concepts.Parameter parameter = jaxrsGeneratorUtils.getMainAddParameter(method); org.ovirt.api.metamodel.concepts.Name parameterName = parameter.getName(); javaBuffer.addImports(schemaNames.getXjcTypeReference(parameter.getType()).getImports()); org.ovirt.api.metamodel.concepts.Name methodName = getSignatureDetectionMethodName(method); javaBuffer.addLine("public static Method %s(%s %s) throws NoSuchMethodException, SecurityException {", javaNames.getJavaMemberStyleName(methodName), javaNames.getJavaClassStyleName(parameter.getType().getName()), javaNames.getJavaMemberStyleName(parameterName)); generateParameterValidation(parameter); org.ovirt.api.metamodel.tool.JaxrsHelperGenerator.CyclicIterator iterator = new org.ovirt.api.metamodel.tool.JaxrsHelperGenerator.CyclicIterator(signatures); while (iterator.hasNext()) { org.ovirt.api.metamodel.concepts.Method signature = iterator.next(); if (!(jaxrsHelperGeneratorUtils.isContained(signature, signatures))) { handleSignature(method.getName(), signature, parameterName, parameter.getType()); iterator.remove(); } } closeSignatureDetectionMethod(); } }
private java.lang.String getFullAttributeCheck(java.lang.String paramName, java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> list, org.ovirt.api.metamodel.tool.JaxrsHelperGenerator.Operator operator) { java.lang.StringBuilder builder = new java.lang.StringBuilder(); for (int i = 0; i < (list.size()); i++) { builder.append(operator.getPaddedSign()).append(paramName).append(getAttributePath(list.subList(0, (i + 1)))).append(operator.comaprison).append("null"); } java.lang.String attributeCheck = builder.toString(); if (attributeCheck.endsWith(".size()!=0!=null")) { attributeCheck = attributeCheck.substring(0, ((attributeCheck.length()) - 6)); } return attributeCheck; }	private java.lang.String getFullAttributeCheck(java.lang.String paramName, java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> list, org.ovirt.api.metamodel.tool.JaxrsHelperGenerator.Operator operator, boolean startWithOperator) { java.lang.StringBuilder builder = new java.lang.StringBuilder(); for (int i = 0; i < (list.size()); i++) { if ((i != 0) || startWithOperator) { builder.append(operator.getPaddedSign()); } builder.append(paramName).append(getAttributePath(list.subList(0, (i + 1)))); if (!(builder.toString().endsWith(".size()!=0"))) { builder.append(operator.comaprison).append("null"); } } return builder.toString(); }
private void generateActionValidation(org.ovirt.api.metamodel.concepts.Method method) { writeActionValidationMethodName(method); for (org.ovirt.api.metamodel.concepts.Parameter parameter : method.getParameters()) { generateActionParameterValidation(parameter); } javaBuffer.addLine("}"); }	private void generateActionValidation(org.ovirt.api.metamodel.concepts.Method method) { if (method.isMandatoryAttributeExists()) { writeActionValidationMethodName(method); validateActionNotNull(); for (org.ovirt.api.metamodel.concepts.Parameter parameter : method.getParameters()) { generateActionParameterValidation(parameter); } javaBuffer.addLine("}"); javaBuffer.addLine(""); } }
private java.lang.String getAttributePath(java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> list) { java.lang.StringBuilder attributePath = new java.lang.StringBuilder(); for (int i = 0; i < (list.size()); i++) { org.ovirt.api.metamodel.concepts.MemberInvolvementTree current = list.get(i); attributePath.append(".get").append(javaNames.getJavaClassStyleName(current.getName())).append("()"); if (current.isCollection()) { if (i == ((list.size()) - 1)) { attributePath.append(".get").append(javaNames.getJavaClassStyleName(current.getName())).append("().size()!=0"); } else { attributePath.append(".get").append(javaNames.getJavaClassStyleName(current.getName())).append("().get(0)"); } } } return attributePath.toString(); }	private java.lang.String getAttributePath(java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> list) { java.lang.StringBuilder attributePath = new java.lang.StringBuilder(); for (int i = 0; i < (list.size()); i++) { org.ovirt.api.metamodel.concepts.MemberInvolvementTree current = list.get(i); attributePath.append(isOrGet(current.getType())).append(javaNames.getJavaClassStyleName(current.getName())).append("()"); if (current.isCollection()) { java.lang.String getterName = (current.getName().toString().equals("bricks")) ? "GlusterBricks" : javaNames.getJavaClassStyleName(current.getName()); if (i == ((list.size()) - 1)) { attributePath.append(".get").append(getterName).append("().size()!=0"); } else { attributePath.append(".get").append(getterName).append("().get(0)"); } } } return attributePath.toString(); }
private void generateHelper(org.ovirt.api.metamodel.concepts.Service service) { initVariables(service); serviceMethods.forEach(( x) -> generateHelperCode(x)); try { javaBuffer.write(outDir); } catch (java.io.IOException exception) { exception.printStackTrace(); } }	private void generateHelper(org.ovirt.api.metamodel.concepts.Service service) { initVariables(service); javaBuffer.addLine("public class %s {", jaxrsNames.getHelperName(service).getSimpleName()); serviceMethods.forEach(( x) -> generateHelperCode(x)); javaBuffer.addLine("}"); try { javaBuffer.write(outDir); } catch (java.io.IOException exception) { exception.printStackTrace(); } }
public static boolean isContained(org.ovirt.api.metamodel.concepts.Method method, java.util.Collection<org.ovirt.api.metamodel.concepts.Method> methods) { for (org.ovirt.api.metamodel.concepts.Method currentMethod : methods) { if (org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.isContained(method, currentMethod)) { return true; } } return false; }	public boolean isContained(org.ovirt.api.metamodel.concepts.Method method, java.util.Collection<org.ovirt.api.metamodel.concepts.Method> methods) { for (org.ovirt.api.metamodel.concepts.Method currentMethod : methods) { if (isContained(method, currentMethod)) { return true; } } return false; }
private static boolean isParametersContained(java.util.List<org.ovirt.api.metamodel.concepts.Parameter> mandatoryParameters1, java.util.List<org.ovirt.api.metamodel.concepts.Parameter> mandatoryParameters2) { java.util.List<org.ovirt.api.metamodel.concepts.Name> names1 = new java.util.ArrayList<>(); java.util.List<org.ovirt.api.metamodel.concepts.Name> names2 = new java.util.ArrayList<>(); for (org.ovirt.api.metamodel.concepts.Parameter p : mandatoryParameters1) { names1.add(p.getName()); } for (org.ovirt.api.metamodel.concepts.Parameter p : mandatoryParameters2) { names2.add(p.getName()); } return mandatoryParameters2.containsAll(mandatoryParameters1); }	private boolean isParametersContained(java.util.List<org.ovirt.api.metamodel.concepts.Parameter> mandatoryParameters1, java.util.List<org.ovirt.api.metamodel.concepts.Parameter> mandatoryParameters2) { if ((mandatoryParameters1.isEmpty()) && (mandatoryParameters2.isEmpty())) { return false; } java.util.List<org.ovirt.api.metamodel.concepts.Name> names1 = new java.util.ArrayList<>(); java.util.List<org.ovirt.api.metamodel.concepts.Name> names2 = new java.util.ArrayList<>(); for (org.ovirt.api.metamodel.concepts.Parameter p : mandatoryParameters1) { names1.add(p.getName()); } for (org.ovirt.api.metamodel.concepts.Parameter p : mandatoryParameters2) { names2.add(p.getName()); } return names2.containsAll(names1); }
private static org.ovirt.api.metamodel.concepts.Name combineAlternatives(org.ovirt.api.metamodel.concepts.MemberInvolvementTree attribute) { org.ovirt.api.metamodel.concepts.Name name1 = attribute.shallowToString(); org.ovirt.api.metamodel.concepts.Name name2 = attribute.getAlternative().shallowToString(); if ((name1.toString().compareTo(name2.toString())) < 0) { name1.addWords(name2.getWords()); return name1; } else { name2.addWords(name1.getWords()); return name2; } }	private org.ovirt.api.metamodel.concepts.Name combineAlternatives(org.ovirt.api.metamodel.concepts.MemberInvolvementTree attribute) { org.ovirt.api.metamodel.concepts.Name name1 = attribute.shallowToString(); org.ovirt.api.metamodel.concepts.Name name2 = attribute.getAlternative().shallowToString(); if ((name1.compareTo(name2)) < 0) { return names.concatenate(name1, name2); } else { return names.concatenate(name2, name1); } }
public void updateInitialRunFields() { getIsSysprepPossible().setEntity(getIsWindowsOS()); getIsSysprepEnabled().setEntity(((getInitializationType()) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep))); getIsCloudInitPossible().setEntity((!(getIsWindowsOS()))); getIsCloudInitEnabled().setEntity(((getInitializationType()) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit))); getIsCloudInitEnabled().setIsAvailable((!(getIsWindowsOS()))); if ((getIsSysprepPossible().getEntity()) && (getIsSysprepEnabled().getEntity())) { getVmInitModel().updateSysprepDomain(null); } }	public void updateInitialRunFields() { getIsSysprepPossible().setEntity(getIsWindowsOS()); getIsSysprepEnabled().setEntity(((getInitializationType()) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep))); getIsCloudInitPossible().setEntity((!(getIsWindowsOS()))); getIsCloudInitEnabled().setEntity(((getInitializationType()) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit))); getIsCloudInitEnabled().setIsAvailable((!(getIsWindowsOS()))); if ((getIsSysprepPossible().getEntity()) && (getIsSysprepEnabled().getEntity())) { getVmInitModel().updateSysprepDomain(getVmInitModel().getSysprepDomain().getSelectedItem()); } }
private void vmInitEnabledChanged() { if (!(getVmInitEnabled().getEntity())) { getSysprepEnabled().setEntity(false); getCloudInitEnabled().setEntity(false); } else { getSysprepEnabled().setEntity(getIsWindowsOS()); getCloudInitEnabled().setEntity((!(getIsWindowsOS()))); autoSetHostname(); if (getSysprepEnabled().getEntity()) { getVmInitModel().updateSysprepDomain(null); } } }	private void vmInitEnabledChanged() { if (!(getVmInitEnabled().getEntity())) { getSysprepEnabled().setEntity(false); getCloudInitEnabled().setEntity(false); } else { getSysprepEnabled().setEntity(getIsWindowsOS()); getCloudInitEnabled().setEntity((!(getIsWindowsOS()))); autoSetHostname(); if (getSysprepEnabled().getEntity()) { getVmInitModel().updateSysprepDomain(getVmInitModel().getSysprepDomain().getSelectedItem()); } } }
@java.lang.Override public java.util.List<java.lang.String> addMacs(java.util.List<java.lang.String> macs) { java.util.List<java.lang.String> notAddedMacs = new java.util.ArrayList<>(macs.size()); for (java.lang.String mac : macs) { if (addMac(mac)) { notAddedMacs.add(mac); } } return notAddedMacs; }	@java.lang.Override public java.util.List<java.lang.String> addMacs(java.util.List<java.lang.String> macs) { java.util.List<java.lang.String> notAddedMacs = new java.util.ArrayList<>(macs.size()); for (java.lang.String mac : macs) { if (!(addMac(mac))) { notAddedMacs.add(mac); } } return notAddedMacs; }
public void moveMacsOfUpdatedCluster(org.ovirt.engine.core.compat.Guid sourceMacPoolId, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.compat.Guid idOfClusterHavingSourceMacPool, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceMacPoolId); java.util.Objects.requireNonNull(targetMacPoolId); if (needToMigrateMacs(sourceMacPoolId, targetMacPoolId)) { java.util.List<java.lang.String> macToMigrate = vmNicDao.getAllMacsByClusterId(idOfClusterHavingSourceMacPool); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macToMigrate, commandContext); } }	public void moveMacsOfUpdatedCluster(org.ovirt.engine.core.common.businessentities.Cluster sourceCluster, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceCluster); java.util.Objects.requireNonNull(targetMacPoolId); org.ovirt.engine.core.compat.Guid sourceMacPoolId = sourceCluster.getMacPoolId(); org.ovirt.engine.core.compat.Guid clusterId = sourceCluster.getId(); java.util.Objects.requireNonNull(sourceMacPoolId); java.util.Objects.requireNonNull(clusterId); if (needToMigrateMacs(sourceMacPoolId, targetMacPoolId)) { java.util.List<java.lang.String> macsToMigrate = vmNicDao.getAllMacsByClusterId(clusterId); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macsToMigrate, commandContext); } }
private void migrateMacsToAnotherMacPool(org.ovirt.engine.core.compat.Guid sourceMacPoolId, org.ovirt.engine.core.compat.Guid targetMacPoolId, java.util.List<java.lang.String> macToMigrate, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(macToMigrate); org.ovirt.engine.core.bll.network.macpool.MacPool sourcePool = poolPerCluster.getMacPoolById(sourceMacPoolId, commandContext); org.ovirt.engine.core.bll.network.macpool.MacPool targetPool = poolPerCluster.getMacPoolById(targetMacPoolId, commandContext); for (java.lang.String mac : macToMigrate) { sourcePool.freeMac(mac); targetPool.forceAddMac(mac); } }	private void migrateMacsToAnotherMacPool(org.ovirt.engine.core.compat.Guid sourceMacPoolId, org.ovirt.engine.core.compat.Guid targetMacPoolId, java.util.List<java.lang.String> macsToMigrate, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(macsToMigrate); org.ovirt.engine.core.bll.network.macpool.MacPool sourcePool = poolPerCluster.getMacPoolById(sourceMacPoolId, commandContext); org.ovirt.engine.core.bll.network.macpool.MacPool targetPool = poolPerCluster.getMacPoolById(targetMacPoolId, commandContext); for (java.lang.String mac : macsToMigrate) { sourcePool.freeMac(mac); targetPool.forceAddMac(mac); } }
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); final boolean shouldSetNewMacPoolOnAllClusters = newMacPoolId != null; if (shouldSetNewMacPoolOnAllClusters) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { this.moveMacs.updateClusterAndMoveMacs(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()); } } }	private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); final boolean shouldSetNewMacPoolOnAllClusters = newMacPoolId != null; if (shouldSetNewMacPoolOnAllClusters) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { moveMacs.updateClusterAndMoveMacs(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()); } } }
public org.ovirt.engine.api.model.Disks list() { throw new javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(Response.Status.NOT_IMPLEMENTED).build()); }	public org.ovirt.engine.api.model.Disks list() { return mapCollection(getBackendCollection(VdcQueryType.GetAllDisksByVmId, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmId))); }
@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Failed to add VM. The reasons are: {}", java.lang.String.join(",", errorMessages)); return; } if (!(addVmLease(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.AddVmCommand.getVmId()))) { return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); getVmDeviceUtils().updateVirtioScsiController(getVm().getStaticData(), getParameters().isVirtioScsiEnabled()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } discardHelper.logIfDisksWithIllegalPassDiscardExist(org.ovirt.engine.core.bll.AddVmCommand.getVmId()); }	@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Failed to add VM. The reasons are: {}", java.lang.String.join(",", errorMessages)); return; } if (!(addVmLease(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.AddVmCommand.getVmId()))) { return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); getVmDeviceUtils().updateVirtioScsiController(getVm().getStaticData(), getParameters().isVirtioScsiEnabled()); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } discardHelper.logIfDisksWithIllegalPassDiscardExist(org.ovirt.engine.core.bll.AddVmCommand.getVmId()); }
@org.junit.Test public void statusSupportedForHostUpgrade() { assertThat(validator.statusSupportedForHostUpgrade(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }	@org.junit.Test public void maintenanceStatusIsSupportedForHostUpgrade() { host.setStatus(VDSStatus.Maintenance); assertThat(validator.statusSupportedForHostUpgrade(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
private void removeImage() { org.ovirt.engine.core.common.action.RemoveImageParameters removeImageParams = new org.ovirt.engine.core.common.action.RemoveImageParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotFromTemplateCommand.getParameters().getDestinationImageId()); removeImageParams.setStorageDomainId(getDestinationStorageDomainId()); removeImageParams.setParentCommand(VdcActionType.RemoveImage); removeImageParams.setDbOperationScope(ImageDbOperationScope.NONE); removeImageParams.setShouldLockImage(false); removeImageParams.setCorrelationId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotFromTemplateCommand.getParameters().getCorrelationId()); removeImageParams.setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.compat.Guid.newGuid())); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalActionWithTasksContext(VdcActionType.RemoveImage, removeImageParams); if (!(returnValue.getSucceeded())) { addAuditLogOnRemoveFailure(); } }	private void removeImage() { org.ovirt.engine.core.common.action.RemoveImageParameters removeImageParams = new org.ovirt.engine.core.common.action.RemoveImageParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotFromTemplateCommand.getParameters().getDestinationImageId()); removeImageParams.setStorageDomainId(getDestinationStorageDomainId()); removeImageParams.setDbOperationScope(ImageDbOperationScope.NONE); removeImageParams.setShouldLockImage(false); removeImageParams.setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.snapshots.CreateSnapshotFromTemplateCommand.getDestinationDiskImage().getId())); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalActionWithTasksContext(VdcActionType.RemoveImage, removeImageParams); if (!(returnValue.getSucceeded())) { addAuditLogOnRemoveFailure(); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(@javax.validation.constraints.NotNull org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Paused)) { return hosts; } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> goodHosts = new java.util.ArrayList<>(); final int allowedSwapUsage = org.apache.commons.lang.math.NumberUtils.toInt(parameters.get(PolicyUnitParameter.MAX_ALLOWED_SWAP_USAGE.getDbName()), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BlockMigrationOnSwapUsagePercentage)); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { if (isHostSwapping(vds, allowedSwapUsage)) { org.ovirt.engine.core.bll.scheduling.policyunits.SwapFilterPolicyUnit.log.debug("Host '{}' is swapping more than allowed. Ignoring it.", vds.getName()); messages.addMessage(vds.getId(), EngineMessage.VAR__DETAIL__SWAP_VALUE_ILLEGAL.toString()); continue; } goodHosts.add(vds); } return goodHosts; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if (!(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableSwapCheck))) { return hosts; } if ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Paused)) { return hosts; } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> goodHosts = new java.util.ArrayList<>(); final int allowedSwapUsage = org.apache.commons.lang.math.NumberUtils.toInt(parameters.get(PolicyUnitParameter.MAX_ALLOWED_SWAP_USAGE.getDbName()), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BlockMigrationOnSwapUsagePercentage)); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { if (isHostSwapping(vds, allowedSwapUsage)) { org.ovirt.engine.core.bll.scheduling.policyunits.SwapFilterPolicyUnit.log.debug("Host '{}' is swapping more than allowed. Ignoring it.", vds.getName()); messages.addMessage(vds.getId(), EngineMessage.VAR__DETAIL__SWAP_VALUE_ILLEGAL.toString()); continue; } goodHosts.add(vds); } return goodHosts; }
private boolean isHostSwapping(@javax.validation.constraints.NotNull org.ovirt.engine.core.common.businessentities.VDS host, int allowedSwapUsage) { if (!(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableSwapCheck))) { return false; } if (((((((host.getSwapTotal()) == null) || ((host.getSwapFree()) == null)) || ((host.getMemAvailable()) == null)) || ((host.getMemAvailable()) <= 0)) || ((host.getPhysicalMemMb()) == null)) || ((host.getPhysicalMemMb()) <= 0)) { return false; } long swap_total = host.getSwapTotal(); long swap_free = host.getSwapFree(); long mem_available = host.getMemAvailable(); long physical_mem_mb = host.getPhysicalMemMb(); return ((((swap_total - swap_free) - mem_available) * 100) / physical_mem_mb) > allowedSwapUsage; }	private boolean isHostSwapping(org.ovirt.engine.core.common.businessentities.VDS host, int allowedSwapUsage) { if (((((((host.getSwapTotal()) == null) || ((host.getSwapFree()) == null)) || ((host.getMemFree()) == null)) || ((host.getMemFree()) <= 0)) || ((host.getPhysicalMemMb()) == null)) || ((host.getPhysicalMemMb()) <= 0)) { return false; } long swapTotal = host.getSwapTotal(); long swapFree = host.getSwapFree(); long memFree = host.getMemFree(); long physicalMemMb = host.getPhysicalMemMb(); return ((((swapTotal - swapFree) - memFree) * 100) / physicalMemMb) > allowedSwapUsage; }
@org.junit.Test public void externalNetworkNameChanged() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = mockExternalNetwork(); assertThat(validator.externalNetworkDetailsUnchanged(externalNetwork), isValid()); }	@org.junit.Test public void externalNetworkNameChanged() { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = createExternalNetwork(); externalNetwork.setName("aaa"); network.setName("bbb"); assertThat(validator.externalNetworkDetailsUnchanged(externalNetwork), isValid()); }
@org.junit.Test public void externalNetworkDescriptionChanged() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = mockExternalNetwork(); assertThat(validator.externalNetworkDetailsUnchanged(externalNetwork), isValid()); }	@org.junit.Test public void externalNetworkDescriptionChanged() { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = createExternalNetwork(); externalNetwork.setDescription("aaa"); network.setDescription("bbb"); assertThat(validator.externalNetworkDetailsUnchanged(externalNetwork), isValid()); }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { log.debug("Non-tx, non-compensation state, immediately releasing macs {}.", macs); macPool.freeMacs(macs); }	@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { macPool.freeMacs(macs); }
@java.lang.Override public void cleaningCompensationDataAfterSuccess() { log.debug(("Command successfully executed, releasing macs: {}" + (macsToReleaseOnCommit))); macPool.freeMacs(macsToReleaseOnCommit); }	@java.lang.Override public void cleaningCompensationDataAfterSuccess() { macPool.freeMacs(macsToReleaseOnCommit); }
private void mockThatDuringAddingToTargetPoolOnlyFirstMacWillBeAdded() { when(targetMacPool.addMacs(anyList())).thenAnswer(( invocation) -> { List<java.lang.String> macs = invocation.getArgument(0); return java.util.Collections.singletonList(macs.get(1)); }); }	private void mockThatDuringAddingToTargetPoolOnlyFirstMacWillBeAdded() { when(targetMacPool.addMacs(anyList())).thenAnswer(( invocation) -> { List<java.lang.String> macs = ((List<java.lang.String>) (invocation.getArguments()[0])); return java.util.Collections.singletonList(macs.get(1)); }); }
private void mockLockObjectFactoryToDisableLocking() { when(lockedObjectFactory.createLockingInstance(any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any(java.util.concurrent.locks.ReentrantReadWriteLock.class))).thenAnswer(org.mockito.AdditionalAnswers.returnsArgAt(0)); }	private void mockLockObjectFactoryToDisableLocking() { when(lockedObjectFactory.createLockingInstance(any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any(java.util.concurrent.locks.ReentrantReadWriteLock.class))).thenAnswer(( invocation) -> invocation.getArguments()[0]); }
@java.lang.Override public java.lang.String toString() { java.lang.String prefix = ((TotalMilliseconds) < 0) ? "-" : ""; return java.lang.String.format("%s%d.%02d:%02d:%02d.%03d", prefix, Days, Hours, Minutes, Seconds, Milliseconds); }	@java.lang.Override public java.lang.String toString() { return java.lang.String.format("%s%d.%02d:%02d:%02d.%03d", ((TotalMilliseconds) < 0 ? "-" : ""), Days, Hours, Minutes, Seconds, Milliseconds); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { org.ovirt.engine.core.compat.Guid originalHostId = org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds(); return hostLocking.getSetupNetworksLock(originalHostId); }	@java.lang.SuppressWarnings("unchecked") private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> callFilterImageDisks(org.ovirt.engine.core.common.businessentities.VM vm) { return org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(diskDao.getAllForVm(vm.getId(), true), org.ovirt.engine.core.bll.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.ONLY_ACTIVE); }
protected boolean perform() { try { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setStartTime(new java.util.Date()); destinationHostLock = new org.ovirt.engine.core.utils.lock.EngineLock(hostLocking.getSetupNetworksLock(getDestinationVdsId())); lockManager.acquireLockWait(destinationHostLock); if (((unplugPassthroughNics()) && (connectLunDisks(getDestinationVdsId()))) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } runningFailed(); return false; } catch (java.lang.Exception e) { runningFailed(); throw e; } }	protected boolean perform() { try { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setStartTime(new java.util.Date()); if (((unplugPassthroughNics()) && (connectLunDisks(getDestinationVdsId()))) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } runningFailed(); return false; } catch (java.lang.Exception e) { runningFailed(); throw e; } }
public java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSetupNetworksLock(org.ovirt.engine.core.compat.Guid hostId) { return java.util.Collections.singletonMap(((LockingGroup.HOST_NETWORK.name()) + (hostId.toString())), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.HOST_NETWORK, EngineMessage.ACTION_TYPE_FAILED_SETUP_NETWORKS_OR_REFRESH_OR_MIGRATION_IN_PROGRESS)); }	public java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSetupNetworksLock(org.ovirt.engine.core.compat.Guid hostId) { return java.util.Collections.singletonMap(((LockingGroup.HOST_NETWORK.name()) + (hostId.toString())), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.HOST_NETWORK, EngineMessage.ACTION_TYPE_FAILED_SETUP_NETWORKS_OR_REFRESH_IN_PROGRESS)); }
@java.lang.Override protected void runningFailed() { try { cleanupPassthroughVnics(getDestinationVdsId()); } finally { super.runningFailed(); lockManager.releaseLock(destinationHostLock); } }	@java.lang.Override protected void runningFailed() { try { cleanupPassthroughVnics(getDestinationVdsId()); } finally { super.runningFailed(); } }
java.lang.String ACTION_TYPE_FAILED_SETUP_NETWORKS_OR_REFRESH_OR_MIGRATION_IN_PROGRESS();	java.lang.String ACTION_TYPE_FAILED_SETUP_NETWORKS_OR_REFRESH_IN_PROGRESS();
@java.lang.Override public void runningSucceded() { try { getDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugPassthroughNics(); } finally { super.runningSucceded(); lockManager.releaseLock(destinationHostLock); } }	@java.lang.Override public void runningSucceded() { try { getDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugPassthroughNics(); } finally { super.runningSucceded(); } }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn sealDisks(java.lang.String vmId, java.lang.String jobId, java.util.List<java.util.Map<java.lang.String, java.lang.String>> volumes);	org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn sealDisks(java.lang.String templateId, java.lang.String jobId, java.lang.String storagePoolId, java.util.List<java.util.Map<java.lang.String, java.lang.Object>> images);
@java.lang.Override protected void executeCommand() { if (getDiskImages().isEmpty()) { org.ovirt.engine.core.bll.SealVmTemplateCommand.setSucceeded(true); return; } org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters(); parameters.setVmId(org.ovirt.engine.core.bll.SealVmTemplateCommand.getParameters().getVmTemplateId()); parameters.setJobId(org.ovirt.engine.core.bll.SealVmTemplateCommand.getParameters().getHostJobId()); getDiskImages().forEach(( diskImage) -> parameters.addVolume(diskImage.getStorageIds().get(0), diskImage.getId(), diskImage.getImageId())); lockTemplateInDb(); lockDiskImagesInDb(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithFailover(VDSCommandType.SealDisks, parameters, getDiskImages().get(0).getStoragePoolId(), this); if (!(vdsReturnValue.getSucceeded())) { setCommandStatus(CommandStatus.FAILED); unlockDiskImagesInDb(); unlockTemplateInDb(); } setSucceeded(vdsReturnValue.getSucceeded()); }	@java.lang.Override protected void executeCommand() { if (getDiskImages().isEmpty()) { org.ovirt.engine.core.bll.SealVmTemplateCommand.setSucceeded(true); return; } org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithFailover(VDSCommandType.SealDisks, buildSealDisksVDSCommandParameters(), getDiskImages().get(0).getStoragePoolId(), this); if (!(vdsReturnValue.getSucceeded())) { setCommandStatus(CommandStatus.FAILED); } setSucceeded(vdsReturnValue.getSucceeded()); }
@java.lang.Override protected void endSuccessfully() { setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getVmTemplateId()); setVmId(getVmIdFromImageParameters()); isVmInDb = (org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm()) != null; vmStaticDao.incrementDbGeneration(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); for (org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getImagesParameters()) { org.ovirt.engine.core.bll.Backend.getInstance().endAction(p.getCommandType(), p, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); } if ((reloadVmTemplateFromDB()) != null) { endDefaultOperations(); } checkTrustedService(); sealVmTemplate(); org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded(true); }	@java.lang.Override protected void endSuccessfully() { restoreCommandState(); vmStaticDao.incrementDbGeneration(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); if ((reloadVmTemplateFromDB()) != null) { endDefaultOperations(); } checkTrustedService(); org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded(true); }
private void endSuccessfullySynchronous() { if ((reloadVmTemplateFromDB()) != null) { endDefaultOperations(); } sealVmTemplate(); org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded(true); }	private void endSuccessfullySynchronous() { if ((reloadVmTemplateFromDB()) != null) { endDefaultOperations(); } org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded(true); }
private void sealVmTemplate() { if (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().isSealTemplate())) { return; } org.ovirt.engine.core.common.action.SealVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.SealVmTemplateParameters(); parameters.setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(VdcActionType.SealVmTemplate, parameters, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); }	protected boolean validateVmNotDuringSnapshot() { return validate(snapshotsValidator.vmNotDuringSnapshot(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmId())); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn sealDisks(java.lang.String vmId, java.lang.String jobId, java.util.List<java.util.Map<java.lang.String, java.lang.String>> volumes) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.seal").withParameter("vmID", vmId).withParameter("job_id", jobId).withOptionalParameterAsList("volumes", volumes).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn sealDisks(java.lang.String templateId, java.lang.String jobId, java.lang.String storagePoolId, java.util.List<java.util.Map<java.lang.String, java.lang.Object>> images) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.seal").withParameter("vmID", templateId).withParameter("job_id", jobId).withParameter("sp_id", storagePoolId).withOptionalParameterAsList("images", images).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImages() { if ((diskImages) == null) { diskImages = diskDao.getAllForVm(org.ovirt.engine.core.bll.SealVmTemplateCommand.getVmTemplateId()).stream().map(( disk) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))).collect(java.util.stream.Collectors.toList()); } return diskImages; }	private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImages() { if ((diskImages) == null) { vmTemplateHandler.updateDisksFromDb(org.ovirt.engine.core.bll.SealVmTemplateCommand.getVmTemplate()); diskImages = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(org.ovirt.engine.core.bll.SealVmTemplateCommand.getVmTemplate().getDiskTemplateMap().values(), DisksFilter.ONLY_NOT_SHAREABLE); } return diskImages; }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("vmId", vmId).append("jobId", jobId).append("volumes", volumes); }	@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("templateId", templateId).append("jobId", jobId).append("images", images); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> locks = new java.util.HashMap<>(); locks.put(org.ovirt.engine.core.bll.SealVmTemplateCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.TEMPLATE, EngineMessage.VMT_SEALING)); getDiskImages().forEach(( diskImage) -> locks.put(diskImage.getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, EngineMessage.VMT_SEALING))); return locks; }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__SEAL); addValidationMessage(EngineMessage.VAR__TYPE__VM_TEMPLATE); }
public void addVolume(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid imageId, org.ovirt.engine.core.compat.Guid volumeId) { volumes.add(new org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters.VolumeAddress(storageDomainId, imageId, volumeId)); }	public void addImage(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { images.add(new org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo(diskImage)); }
@java.lang.Override protected void executeVdsBrokerCommand() { result = org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getBroker().sealDisks(org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getParameters().getVmId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getParameters().getJobId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getParameters().getVolumes().stream().map(this::mapToEndpoint).collect(java.util.stream.Collectors.toList())); org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.proceedProxyReturnValue(); }	@java.lang.Override protected void executeVdsBrokerCommand() { result = org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getBroker().sealDisks(org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getParameters().getTemplateId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getParameters().getJobId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getParameters().getImages().stream().map(this::mapToEndpoint).collect(java.util.stream.Collectors.toList())); org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override protected void endWithFailure() { super.endWithFailure(); unlockDiskImagesInDb(); unlockTemplateInDb(); }	@java.lang.Override public boolean failJobWithUndeterminedStatus() { return false; }
private void lockDiskImagesInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { getDiskImages().forEach(( diskImage) -> { getCompensationContext().snapshotEntityStatus(diskImage.getImage()); diskImage.setImageStatus(ImageStatus.LOCKED); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(diskImage.getImageId(), ImageStatus.LOCKED); }); getCompensationContext().stateChanged(); return null; }); }	private org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters buildSealDisksVDSCommandParameters() { org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters(); parameters.setTemplateId(org.ovirt.engine.core.bll.SealVmTemplateCommand.getParameters().getVmTemplateId()); parameters.setJobId(org.ovirt.engine.core.bll.SealVmTemplateCommand.getParameters().getHostJobId()); parameters.setStoragePoolId(getDiskImages().get(0).getStoragePoolId()); getDiskImages().forEach(parameters::addImage); return parameters; }
private java.util.Map<java.lang.String, java.lang.String> mapToEndpoint(org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters.VolumeAddress volumeAddress) { java.util.Map<java.lang.String, java.lang.String> endpoint = new java.util.HashMap<>(); endpoint.put("sd_id", volumeAddress.getStorageDomainId().toString()); endpoint.put("img_id", volumeAddress.getImageId().toString()); endpoint.put("vol_id", volumeAddress.getVolumeId().toString()); return endpoint; }	private java.util.Map<java.lang.String, java.lang.Object> mapToEndpoint(org.ovirt.engine.core.common.businessentities.LocationInfo locationInfo) { return org.ovirt.engine.core.common.utils.LocationInfoHelper.prepareLocationInfoForVdsCommand(locationInfo); }
private void unlockDiskImagesInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { getDiskImages().forEach(( diskImage) -> { diskImage.setImageStatus(ImageStatus.OK); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(diskImage.getImageId(), ImageStatus.OK); }); return null; }); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus handleJobError(org.ovirt.engine.core.common.errors.EngineError error) { return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; }
public java.util.List<org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters.VolumeAddress> getVolumes() { return volumes; }	public org.ovirt.engine.core.compat.Guid getStoragePoolId() { return storagePoolId; }
@java.lang.Override protected void endSuccessfully() { super.endSuccessfully(); unlockDiskImagesInDb(); unlockTemplateInDb(); }	@java.lang.Override protected void init() { super.init(); setVmTemplateId(org.ovirt.engine.core.bll.SealVmTemplateCommand.getParameters().getVmTemplateId()); }
private void assignLegalAndShared(boolean legalAndShared) { org.ovirt.engine.core.common.action.UpdateAllTemplateDisksParameters parameters = new org.ovirt.engine.core.common.action.UpdateAllTemplateDisksParameters(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId(), legalAndShared, (legalAndShared ? org.ovirt.engine.core.common.businessentities.storage.CopyVolumeType.SharedVol : null)); parameters.setParentCommand(org.ovirt.engine.core.bll.AddVmTemplateCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters()); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(VdcActionType.UpdateAllTemplateDisks, parameters, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); }	private void assignLegalAndShared(boolean legalAndShared) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalAction(VdcActionType.UpdateAllTemplateDisks, buildUpdateAllTemplateDisksParameters(legalAndShared), org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContextForTasks(org.ovirt.engine.core.bll.AddVmTemplateCommand.getContext())); if (!(returnValue.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(returnValue.getFault().getError(), returnValue.getFault().getMessage()); } }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if (completedChildCount < (org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.AddVmTemplateCommand.getCommandId()).size())) { return false; } switch (org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getPhase()) { case CREATE_TEMPLATE : if (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().isSealTemplate())) { return true; } org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().setPhase(Phase.ASSIGN_ILLEGAL); break; case ASSIGN_ILLEGAL : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().setPhase(Phase.SEAL); break; case SEAL : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().setPhase(Phase.ASSIGN_LEGAL_SHARED); break; case ASSIGN_LEGAL_SHARED : return true; } org.ovirt.engine.core.bll.AddVmTemplateCommand.persistCommandIfNeeded(); executeNextOperation(); return false; }	@java.lang.Override public boolean performNextOperation(int completedChildCount) { if (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().isSealTemplate())) { return false; } restoreCommandState(); switch (org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getPhase()) { case CREATE_TEMPLATE : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().setPhase(Phase.ASSIGN_ILLEGAL); break; case ASSIGN_ILLEGAL : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().setPhase(Phase.SEAL); break; case SEAL : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().setPhase(Phase.ASSIGN_LEGAL_SHARED); break; case ASSIGN_LEGAL_SHARED : return false; } org.ovirt.engine.core.bll.AddVmTemplateCommand.persistCommandIfNeeded(); executeNextOperation(); return true; }
private void sealVmTemplate() { org.ovirt.engine.core.common.action.SealVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.SealVmTemplateParameters(); parameters.setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); parameters.setParentCommand(org.ovirt.engine.core.bll.AddVmTemplateCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters()); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(VdcActionType.SealVmTemplate, parameters, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); }	private void sealVmTemplate() { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalAction(VdcActionType.SealVmTemplate, buildSealVmTemplateParameters(), org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContextForTasks(org.ovirt.engine.core.bll.AddVmTemplateCommand.getContext())); if (!(returnValue.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(returnValue.getFault().getError(), returnValue.getFault().getMessage()); } }
private static void switchTab(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> mapping, org.ovirt.engine.ui.common.view.TabbedView view) { int lowestIndex = java.lang.Integer.MAX_VALUE; java.util.List<org.gwtbootstrap3.client.ui.TabListItem> allTabs = view.getTabPanel().getTabs(); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if ((allTabs.indexOf(mapping.get(invalidTabName))) < lowestIndex) { lowestIndex = allTabs.indexOf(mapping.get(invalidTabName)); } } if (lowestIndex != (java.lang.Integer.MAX_VALUE)) { view.getTabPanel().switchTab(allTabs.get(lowestIndex)); } }	private static void switchTab(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem> mapping, org.ovirt.engine.ui.common.view.TabbedView view) { int lowestIndex = java.lang.Integer.MAX_VALUE; java.util.List<org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem> allTabs = view.getTabPanel().getTabs(); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if ((allTabs.indexOf(mapping.get(invalidTabName))) < lowestIndex) { lowestIndex = allTabs.indexOf(mapping.get(invalidTabName)); } } if (lowestIndex != (java.lang.Integer.MAX_VALUE)) { view.getTabPanel().switchTab(allTabs.get(lowestIndex)); } }
@java.lang.Override public void onValidationComplete(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent event) { if (((event.getModel()) != null) && (event.getModel().equals(presenterWidget.getModel()))) { java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs = presenterWidget.getModel().getInvalidTabs(); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> mapping = view.getTabNameMapping(); org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.markTabs(invalidTabs, mapping); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if (view.getTabPanel().getActiveTab().equals(mapping.get(invalidTabName))) { return; } } org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.switchTab(invalidTabs, mapping, view); } }	@java.lang.Override public void onValidationComplete(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent event) { if (((event.getModel()) != null) && (event.getModel().equals(presenterWidget.getModel()))) { java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs = presenterWidget.getModel().getInvalidTabs(); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem> mapping = view.getTabNameMapping(); org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.markTabs(invalidTabs, mapping); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if (view.getTabPanel().getActiveTab().equals(mapping.get(invalidTabName))) { return; } } org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.switchTab(invalidTabs, mapping, view); } }
public static com.google.gwt.event.shared.HandlerRegistration registerValidationHandler(final com.google.gwt.event.shared.EventBus eventBus, final org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?> presenterWidget, final org.ovirt.engine.ui.common.view.TabbedView view) { return eventBus.addHandler(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent.getType(), new org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent.ValidationCompleteEventHandler() { @java.lang.Override public void onValidationComplete(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent event) { if (((event.getModel()) != null) && (event.getModel().equals(presenterWidget.getModel()))) { java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs = presenterWidget.getModel().getInvalidTabs(); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> mapping = view.getTabNameMapping(); org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.markTabs(invalidTabs, mapping); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if (view.getTabPanel().getActiveTab().equals(mapping.get(invalidTabName))) { return; } } org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.switchTab(invalidTabs, mapping, view); } } }); }	public static com.google.gwt.event.shared.HandlerRegistration registerValidationHandler(final com.google.gwt.event.shared.EventBus eventBus, final org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?> presenterWidget, final org.ovirt.engine.ui.common.view.TabbedView view) { return eventBus.addHandler(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent.getType(), new org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent.ValidationCompleteEventHandler() { @java.lang.Override public void onValidationComplete(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent event) { if (((event.getModel()) != null) && (event.getModel().equals(presenterWidget.getModel()))) { java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs = presenterWidget.getModel().getInvalidTabs(); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem> mapping = view.getTabNameMapping(); org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.markTabs(invalidTabs, mapping); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if (view.getTabPanel().getActiveTab().equals(mapping.get(invalidTabName))) { return; } } org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.switchTab(invalidTabs, mapping, view); } } }); }
private void updateTabVisibilities(org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel object) { generalTab.setVisible(object.isGeneralTabVisible()); scheduleTab.setVisible(object.isScheduleTabVisible()); if ((object.getRecurrence().getSelectedItem()) != (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotScheduleRecurrence.UNKNOWN)) { } }	private void updateTabVisibilities(org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel object) { generalTab.setVisible(object.isGeneralTabVisible()); scheduleTab.setVisible(object.isScheduleTabVisible()); if ((object.getRecurrence().getSelectedItem()) != (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotScheduleRecurrence.UNKNOWN)) { scheduleTab.activate(); } }
@java.lang.Override public java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> getTabNameMapping() { return ((org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget) (getContentWidget())).getTabNameMapping(); }	@java.lang.Override public java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem> getTabNameMapping() { return ((org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget) (getContentWidget())).getTabNameMapping(); }
@java.lang.Override public void init(java.lang.String title, java.lang.String width, java.lang.String height, boolean closeIconVisible) { asWidget().setWidth(width); asWidget().setHeight(height); asWidget().setCloseIconButtonVisible(closeIconVisible); }	@java.lang.Override public void init(java.lang.String title, java.lang.String width, java.lang.String height, boolean closeIconVisible) { dialogPanel.setTitle(title); asWidget().setWidth(width); asWidget().setHeight(height); asWidget().setCloseIconButtonVisible(closeIconVisible); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel object) { driver.edit(object); initLists(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (propName.equals("IsValid")) { onIsValidPropertyChange(object); } else if (propName.equals("IsGrouppedByTarget")) { updateListByGropping(object); } } }); iscsiTargetToLunView.edit(object); iscsiLunToTargetView.edit(object); dialogTabPanel.switchTab((object.getIsGrouppedByTarget() ? targetsToLunTab : lunToTargetsTab)); updateListByGropping(object); }	@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel object) { driver.edit(object); initLists(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (propName.equals("IsValid")) { onIsValidPropertyChange(object); } else if (propName.equals("IsGrouppedByTarget")) { updateListByGropping(object); } } }); iscsiTargetToLunView.edit(object); iscsiLunToTargetView.edit(object); targetsToLunTab.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { iscsiLunToTargetView.disableItemsUpdate(); object.setIsGrouppedByTarget(true); } }); lunToTargetsTab.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { iscsiTargetToLunView.disableItemsUpdate(); object.setIsGrouppedByTarget(false); } }); dialogTabPanel.switchTab((object.getIsGrouppedByTarget() ? targetsToLunTab : lunToTargetsTab)); updateListByGropping(object); }
@java.lang.Override public java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> getTabNameMapping() { return tabMap; }	@java.lang.Override public java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem> getTabNameMapping() { return tabMap; }
@java.lang.Override public void show() { super.show(); contentScrollPanel.getElement().getStyle().setHeight(((getOffsetHeight()) - 100), Unit.PX); contentPanel.getElement().getStyle().setProperty("minHeight", ((getOffsetHeight()) - 100), Unit.PX); }	@java.lang.Override public void show() { super.show(); contentScrollPanel.getElement().getStyle().setHeight(((getOffsetHeight()) - (org.ovirt.engine.ui.common.widget.dialog.SimpleDialogPanel.HEADER_FOOTER_HEIGHT)), Unit.PX); contentPanel.getElement().getStyle().setProperty("minHeight", ((getOffsetHeight()) - (org.ovirt.engine.ui.common.widget.dialog.SimpleDialogPanel.HEADER_FOOTER_HEIGHT)), Unit.PX); }
@java.lang.Override public void setHeight(java.lang.String height) { super.setHeight(height); }	@java.lang.Override public void setHelpCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { helpCommand = command; infoAnchor.setVisible((command != null)); }
@java.lang.Override @com.google.gwt.uibinder.client.UiChild(tagname = "header", limit = 1) public void setHeader(java.lang.String headerTitle) { com.google.gwt.user.client.ui.HTMLPanel headerTitlePanel = new com.google.gwt.user.client.ui.HTMLPanel("H4", headerTitle); headerTitlePanel.addStyleName(Styles.MODAL_TITLE); if ((header.getWidgetCount()) > 1) { header.remove(((header.getWidgetCount()) - 1)); } header.add(headerTitlePanel); }	@java.lang.Override @com.google.gwt.uibinder.client.UiChild(tagname = "header", limit = 1) public void setHeader(java.lang.String headerTitle) { com.google.gwt.user.client.ui.HTMLPanel headerTitlePanel = new com.google.gwt.user.client.ui.HTMLPanel("H4", headerTitle); headerTitlePanel.addStyleName(Styles.MODAL_TITLE); headerTitlePanel.getElement().getStyle().setFloat(LEFT); while ((header.getWidgetCount()) > 2) { header.remove(((header.getWidgetCount()) - 1)); } header.add(headerTitlePanel); addHelpButtonHandler(); helpIconButtonTooltip.setText(org.ovirt.engine.ui.common.widget.dialog.SimpleDialogPanel.constants.clickForHelp()); }
public java.util.List<org.gwtbootstrap3.client.ui.TabListItem> getTabs() { java.util.List<org.gwtbootstrap3.client.ui.TabListItem> tabs = new java.util.ArrayList<>(); for (int i = 0; i < (navTabs.getWidgetCount()); i++) { com.google.gwt.user.client.ui.Widget tab = navTabs.getWidget(i); if (tab instanceof org.gwtbootstrap3.client.ui.TabListItem) { tabs.add(((org.gwtbootstrap3.client.ui.TabListItem) (tab))); } } return tabs; }	public java.util.List<org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem> getTabs() { java.util.List<org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem> tabs = new java.util.ArrayList<>(); for (int i = 0; i < (navTabs.getWidgetCount()); i++) { com.google.gwt.user.client.ui.Widget tab = navTabs.getWidget(i); if (tab instanceof org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem) { tabs.add(((org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem) (tab))); } } return tabs; }
@java.lang.Override public void setHelpCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { }	@java.lang.Override public void setHelpCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { AbstractModelBoundPopupView.asWidget().setHelpCommand(command); }
@java.lang.Override public final java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> getTabNameMapping() { return tabMap; }	@java.lang.Override public final java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem> getTabNameMapping() { return tabMap; }
public org.gwtbootstrap3.client.ui.TabListItem getTabListItem() { return tabListItem; }	public org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem getTabListItem() { return tabListItem; }
java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> getTabNameMapping();	java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem> getTabNameMapping();
public void setNoScroll(boolean value) { if (value) { contentScrollPanel.getElement().getStyle().setOverflow(Overflow.VISIBLE); } }	public void setNoScroll(boolean value) { if (value) { contentScrollPanel.getElement().getStyle().setOverflow(Overflow.VISIBLE); } else { contentScrollPanel.getElement().getStyle().setOverflow(Overflow.AUTO); } }
private static void markTabs(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> mapping) { for (java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> entry : mapping.entrySet()) { if (invalidTabs.contains(entry.getKey())) { } else { } } }	private static void markTabs(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem> mapping) { for (java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.OvirtTabListItem> entry : mapping.entrySet()) { if (invalidTabs.contains(entry.getKey())) { entry.getValue().markAsInvalid(null); } else { entry.getValue().markAsValid(); } } }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ManagePolicyUnitModel flush() { return null; }	@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ManagePolicyUnitModel flush() { return model; }
private void revealDiskPanel(final org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel disk) { boolean isInVm = (disk.getVm()) != null; radioButtonsPanel.setVisible(isNewLunDiskEnabled); externalDiskPanel.setVisible(((isNewLunDiskEnabled) && ((disk.getDiskStorageType().getEntity()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN)))); aliasEditor.setFocus((!isInVm)); }	private void revealDiskPanel(final org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel disk) { boolean isInVm = (disk.getVm()) != null; radioButtonPanel.setVisible(isNewLunDiskEnabled); externalDiskPanel.setVisible(((isNewLunDiskEnabled) && ((disk.getDiskStorageType().getEntity()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN)))); aliasEditor.setFocus((!isInVm)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ("IsChangable".equals(propName)) { if ((disk.getDiskStorageType().getIsChangable()) && (disk.isEditEnabled())) { enableWidget(radioButtonsPanel); } else { disableWidget(radioButtonsPanel); } } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ("IsChangable".equals(propName)) { if ((disk.getDiskStorageType().getIsChangable()) && (disk.isEditEnabled())) { enableWidget(radioButtonPanel); } else { disableWidget(radioButtonPanel); } } }
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { disk.getDiskStorageType().setEntity(DiskStorageType.LUN); revealStorageView(disk); revealDiskPanel(disk); }	@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { if (disk.getIsNew()) { disk.getDiskStorageType().setEntity(DiskStorageType.LUN); revealStorageView(disk); revealDiskPanel(disk); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (disk.getIsModelDisabled().getEntity()) { disableWidget(getWidget()); enableWidget(radioButtonsPanel); enableWidget(datacenterEditor); disk.getDefaultCommand().setIsExecutionAllowed(false); disk.setIsChangeable(false); } else { enableWidget(getWidget()); disk.getDefaultCommand().setIsExecutionAllowed(true); disk.setIsChangeable(true); driver.edit(disk); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (disk.getIsModelDisabled().getEntity()) { disableWidget(getWidget()); enableWidget(radioButtonPanel); enableWidget(datacenterEditor); disk.getDefaultCommand().setIsExecutionAllowed(false); disk.setIsChangeable(false); } else { enableWidget(getWidget()); disk.getDefaultCommand().setIsExecutionAllowed(true); disk.setIsChangeable(true); driver.edit(disk); } }
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { disk.getDiskStorageType().setEntity(DiskStorageType.LUN); revealDiskPanel(disk); }	@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { if (disk.getIsNew()) { disk.getDiskStorageType().setEntity(DiskStorageType.LUN); revealDiskPanel(disk); } }
@java.lang.Override public java.lang.String getRawValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel model) { return (java.lang.String.valueOf(model.getSize())) + (org.ovirt.engine.ui.common.widget.uicommon.storage.SanStorageTargetToLunList.constants.gb()); }	@java.lang.Override public java.lang.String getRawValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel model) { return org.ovirt.engine.ui.common.widget.uicommon.storage.SanStorageTargetToLunList.messages.gigabytes(java.lang.String.valueOf(model.getSize())); }
@java.lang.Override public java.lang.String getRawValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel model) { return (java.lang.String.valueOf(model.getSize())) + (org.ovirt.engine.ui.common.widget.uicommon.storage.SanStorageLunToTargetList.constants.gb()); }	@java.lang.Override public java.lang.String getRawValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel model) { return org.ovirt.engine.ui.common.widget.uicommon.storage.SanStorageLunToTargetList.messages.gigabytes(java.lang.String.valueOf(model.getSize())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VM object) { return ((java.lang.String.valueOf(object.getVmMemSizeMb())) + " ") + (org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageVmBackupView.constants.mb()); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VM object) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageVmBackupView.messages.megabytes(java.lang.String.valueOf(object.getVmMemSizeMb())); }
private java.lang.String renderMemory(double memory) { if (memory <= 0) { return "0"; } return memory > (java.lang.Math.abs(((org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.MB_GB_THRESHOLD) * (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.GIGA)))) ? org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.diskSizeRenderer.render((memory / (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.GIGA))) : ((int) (memory)) + (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.constants.mb()); }	private java.lang.String renderMemory(double memory) { if (memory <= 0) { return "0"; } return memory > (java.lang.Math.abs(((org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.MB_GB_THRESHOLD) * (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.GIGA)))) ? org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.diskSizeRenderer.render((memory / (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.GIGA))) : org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.messages.megabytes(java.lang.String.valueOf(((int) (memory)))); }
private java.lang.String renderHumanReadableSize(long size) { long sizeInBytes = org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.BYTES).longValue(); if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_GB)) { return ((org.ovirt.engine.core.common.utils.SizeConverter.convert(sizeInBytes, SizeUnit.BYTES, SizeUnit.GiB).longValue()) + " ") + (org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.constants.gb()); } else if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_MB)) { return ((org.ovirt.engine.core.common.utils.SizeConverter.convert(sizeInBytes, SizeUnit.BYTES, SizeUnit.MiB).longValue()) + " ") + (org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.constants.mb()); } else if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_KB)) { return ((org.ovirt.engine.core.common.utils.SizeConverter.convert(sizeInBytes, SizeUnit.BYTES, SizeUnit.KiB).longValue()) + " ") + (org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.constants.kb()); } else { return (sizeInBytes + " ") + (org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.constants.bytes2()); } }	private java.lang.String renderHumanReadableSize(long size) { long sizeInBytes = org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.BYTES).longValue(); if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_GB)) { return org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.messages.gigabytes(java.lang.String.valueOf(org.ovirt.engine.core.common.utils.SizeConverter.convert(sizeInBytes, SizeUnit.BYTES, SizeUnit.GiB).longValue())); } else if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_MB)) { return org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.messages.megabytes(java.lang.String.valueOf(org.ovirt.engine.core.common.utils.SizeConverter.convert(sizeInBytes, SizeUnit.BYTES, SizeUnit.MiB).longValue())); } else if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_KB)) { return org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.messages.kilobytes(java.lang.String.valueOf(org.ovirt.engine.core.common.utils.SizeConverter.convert(sizeInBytes, SizeUnit.BYTES, SizeUnit.KiB).longValue())); } else { return org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.messages.bytes(java.lang.String.valueOf(sizeInBytes)); } }
@java.lang.Override public java.lang.String render(T sizeInMB) { return sizeInMB != null ? ((sizeInMB.toString()) + " ") + (org.ovirt.engine.ui.common.widget.renderer.MemorySizeRenderer.constants.mb()) : org.ovirt.engine.ui.common.widget.renderer.MemorySizeRenderer.constants.unAvailablePropertyLabel(); }	@java.lang.Override public java.lang.String render(T sizeInMB) { return sizeInMB != null ? org.ovirt.engine.ui.common.widget.renderer.MemorySizeRenderer.messages.megabytes(sizeInMB.toString()) : org.ovirt.engine.ui.common.widget.renderer.MemorySizeRenderer.constants.unAvailablePropertyLabel(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData object) { return ((java.lang.String.valueOf(object.getVm().getVmMemSizeMb())) + " ") + (constants.mb()); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData object) { return messages.megabytes(java.lang.String.valueOf(object.getVm().getVmMemSizeMb())); }
@java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return "< 1 " + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.AbstractFindStoragePopupView.constants.gb()); } return ((storage.getAvailableDiskSize()) + " ") + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.AbstractFindStoragePopupView.constants.gb()); }	@java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.AbstractFindStoragePopupView.messages.gigabytes("< 1"); } return org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.AbstractFindStoragePopupView.messages.gigabytes(java.lang.String.valueOf(storage.getAvailableDiskSize())); }
private java.lang.String renderGigabyteSize(long size) { long sizeInGB = ((unit) == (org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit.GiB)) ? size : org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.GiB).longValue(); return ((sizeInGB >= 1 ? sizeInGB : "< 1") + " ") + (org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.constants.gb()); }	private java.lang.String renderGigabyteSize(long size) { long sizeInGB = ((unit) == (org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit.GiB)) ? size : org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.GiB).longValue(); return org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.messages.gigabytes((sizeInGB >= 1 ? java.lang.String.valueOf(sizeInGB) : "< 1")); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData) { int size = registerVmData.getVm().getVmMemSizeMb(); return (size + " ") + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterVmPopupView.constants.mb()); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData) { int size = registerVmData.getVm().getVmMemSizeMb(); return org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterVmPopupView.messages.megabytes(java.lang.String.valueOf(size)); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VM object) { return ((java.lang.String.valueOf(object.getVmMemSizeMb())) + " ") + (org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageRegisterVmView.constants.mb()); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VM object) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageRegisterVmView.messages.megabytes(java.lang.String.valueOf(object.getVmMemSizeMb())); }
@java.lang.Override public java.lang.String getValue(java.lang.Object object) { int size = getEntity(object).getMemSizeMb(); return (size + " ") + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterTemplatePopupView.constants.mb()); }	@java.lang.Override public java.lang.String getValue(java.lang.Object object) { int size = getEntity(object).getMemSizeMb(); return org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterTemplatePopupView.messages.megabytes(java.lang.String.valueOf(size)); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Quota object) { double value; double allocated = 0; double used = 0; if ((object.getGlobalQuotaStorage()) != null) { allocated = object.getGlobalQuotaStorage().getStorageSizeGB(); used = object.getGlobalQuotaStorage().getStorageSizeGBUsage(); } else { for (org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage : object.getQuotaStorages()) { if (!(QuotaStorage.UNLIMITED.equals(quotaStorage.getStorageSizeGB()))) { allocated += quotaStorage.getStorageSizeGB(); used += quotaStorage.getStorageSizeGBUsage(); } else { allocated = org.ovirt.engine.core.common.businessentities.QuotaStorage.UNLIMITED; break; } } } value = allocated - used; java.lang.String returnVal; if (allocated < 0) { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.unlimited(); } else if (value <= 0) { returnVal = "0 " + (org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.gb()); } else { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.diskSizeRenderer.render(value); } return returnVal; }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Quota object) { double value; double allocated = 0; double used = 0; if ((object.getGlobalQuotaStorage()) != null) { allocated = object.getGlobalQuotaStorage().getStorageSizeGB(); used = object.getGlobalQuotaStorage().getStorageSizeGBUsage(); } else { for (org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage : object.getQuotaStorages()) { if (!(QuotaStorage.UNLIMITED.equals(quotaStorage.getStorageSizeGB()))) { allocated += quotaStorage.getStorageSizeGB(); used += quotaStorage.getStorageSizeGBUsage(); } else { allocated = org.ovirt.engine.core.common.businessentities.QuotaStorage.UNLIMITED; break; } } } value = allocated - used; java.lang.String returnVal; if (allocated < 0) { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.unlimited(); } else if (value <= 0) { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.messages.gigabytes("0"); } else { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.diskSizeRenderer.render(value); } return returnVal; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return ((java.lang.String.valueOf(object.getMemSizeMb())) + " ") + (org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageTemplateBackupView.constants.mb()); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageTemplateBackupView.messages.megabytes(java.lang.String.valueOf(object.getMemSizeMb())); }
private void initTable() { org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain> nameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { return storage.getStorageName(); } }; storageDomainItems.setColumnWidth(nameColumn, "280px"); storageDomainItems.addColumn(nameColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.nameStorage()); org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain> freeSpaceColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return "< 1 " + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.gb()); } return ((storage.getAvailableDiskSize()) + " ") + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.gb()); } }; storageDomainItems.setColumnWidth(freeSpaceColumn, "80px"); storageDomainItems.addColumn(freeSpaceColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.freeSpaceStorage()); }	private void initTable() { org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain> nameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { return storage.getStorageName(); } }; storageDomainItems.setColumnWidth(nameColumn, "280px"); storageDomainItems.addColumn(nameColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.nameStorage()); org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain> freeSpaceColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.messages.gigabytes("< 1"); } return org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.messages.gigabytes(java.lang.String.valueOf(storage.getAvailableDiskSize())); } }; storageDomainItems.setColumnWidth(freeSpaceColumn, "80px"); storageDomainItems.addColumn(freeSpaceColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.freeSpaceStorage()); }
@java.lang.Override public java.lang.String getValue(java.lang.Object object) { return ((java.lang.String.valueOf(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm().getVmMemSizeMb())) + " ") + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmFromExportDomainPopupView.constants.mb()); }	@java.lang.Override public java.lang.String getValue(java.lang.Object object) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmFromExportDomainPopupView.messages.megabytes(java.lang.String.valueOf(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm().getVmMemSizeMb())); }
@java.lang.Override public java.lang.String getValue(java.lang.Object object) { return ((java.lang.String.valueOf(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData) (object)).getTemplate().getMemSizeMb())) + " ") + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportTemplatePopupView.constants.mb()); }	@java.lang.Override public java.lang.String getValue(java.lang.Object object) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportTemplatePopupView.messages.megabytes(java.lang.String.valueOf(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData) (object)).getTemplate().getMemSizeMb())); }
java.lang.String bytes2();	java.lang.String sealTemplate();
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Quota object) { int value; long allocated = 0; long used = 0; if ((object.getGlobalQuotaCluster()) != null) { allocated = object.getGlobalQuotaCluster().getMemSizeMB(); used = object.getGlobalQuotaCluster().getMemSizeMBUsage(); } else { for (org.ovirt.engine.core.common.businessentities.QuotaCluster quotaCluster : object.getQuotaClusters()) { if (!(QuotaCluster.UNLIMITED_MEM.equals(quotaCluster.getMemSizeMB()))) { allocated += ((quotaCluster.getMemSizeMB()) != null) ? quotaCluster.getMemSizeMB() : 0; used += quotaCluster.getMemSizeMBUsage(); } else { allocated = org.ovirt.engine.core.common.businessentities.QuotaCluster.UNLIMITED_MEM; break; } } } value = ((int) (allocated - used)); java.lang.String returnVal; if (allocated < 0) { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.unlimited(); } else if (value <= 0) { returnVal = "0 " + (org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.mb()); } else if (value <= (5 * 1024)) { returnVal = value + (org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.mb()); } else { returnVal = (org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.decimalFormat.format((((double) (value)) / 1024))) + (org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.gb()); } return returnVal; }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Quota object) { int value; long allocated = 0; long used = 0; if ((object.getGlobalQuotaCluster()) != null) { allocated = object.getGlobalQuotaCluster().getMemSizeMB(); used = object.getGlobalQuotaCluster().getMemSizeMBUsage(); } else { for (org.ovirt.engine.core.common.businessentities.QuotaCluster quotaCluster : object.getQuotaClusters()) { if (!(QuotaCluster.UNLIMITED_MEM.equals(quotaCluster.getMemSizeMB()))) { allocated += ((quotaCluster.getMemSizeMB()) != null) ? quotaCluster.getMemSizeMB() : 0; used += quotaCluster.getMemSizeMBUsage(); } else { allocated = org.ovirt.engine.core.common.businessentities.QuotaCluster.UNLIMITED_MEM; break; } } } value = ((int) (allocated - used)); java.lang.String returnVal; if (allocated < 0) { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.unlimited(); } else if (value <= 0) { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.messages.megabytes("0"); } else if (value <= (5 * 1024)) { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.messages.megabytes(java.lang.String.valueOf(value)); } else { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.messages.gigabytes(org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.decimalFormat.format((((double) (value)) / 1024))); } return returnVal; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (((java.lang.Double) (asVm(entity).getActualDiskWithSnapshotsSize())).intValue()) + (org.ovirt.engine.ui.userportal.widget.resources.VmTable.constants.gb()); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return org.ovirt.engine.ui.userportal.widget.resources.VmTable.messages.gigabytes(java.lang.String.valueOf(((java.lang.Double) (asVm(entity).getActualDiskWithSnapshotsSize())).intValue())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return ((java.lang.String.valueOf(object.getMemSizeMb())) + " ") + (org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageRegisterTemplateView.constants.mb()); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageRegisterTemplateView.messages.megabytes(java.lang.String.valueOf(object.getMemSizeMb())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (((java.lang.Double) (asVm(entity).getDiskSize())).intValue()) + (org.ovirt.engine.ui.userportal.widget.resources.VmTable.constants.gb()); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return org.ovirt.engine.ui.userportal.widget.resources.VmTable.messages.gigabytes(java.lang.String.valueOf(((java.lang.Double) (asVm(entity).getDiskSize())).intValue())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (((java.lang.Double) (asDisk(entity).getActualDiskWithSnapshotsSize())).intValue()) + (org.ovirt.engine.ui.userportal.widget.resources.VmTable.constants.gb()); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return org.ovirt.engine.ui.userportal.widget.resources.VmTable.messages.gigabytes(java.lang.String.valueOf(((java.lang.Double) (asDisk(entity).getActualDiskWithSnapshotsSize())).intValue())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (asDisk(entity).getSizeInGigabytes()) + (org.ovirt.engine.ui.userportal.widget.resources.VmTable.constants.gb()); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return org.ovirt.engine.ui.userportal.widget.resources.VmTable.messages.gigabytes(java.lang.String.valueOf(asDisk(entity).getSizeInGigabytes())); }
@java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return "< 1 " + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.gb()); } return ((storage.getAvailableDiskSize()) + " ") + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.gb()); }	@java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.messages.gigabytes("< 1"); } return org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.messages.gigabytes(java.lang.String.valueOf(storage.getAvailableDiskSize())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.DiskImage object) { return ((java.lang.String.valueOf(object.getSizeInGigabytes())) + " ") + (org.ovirt.engine.ui.common.widget.uicommon.template.TemplateDiskListModelTable.constants.gb()); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.DiskImage object) { return org.ovirt.engine.ui.common.widget.uicommon.template.TemplateDiskListModelTable.messages.gigabytes(java.lang.String.valueOf(object.getSizeInGigabytes())); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().updateVmwareVisible(model.getVmwarePropertiesModel().getIsAvailable()); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().setCurrentActiveProviderWidget(); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().updateDataCenterVisible(model.getDataCenter().getIsAvailable()); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().setCurrentActiveProviderWidget(); } }
void updateDataCenterVisible(boolean isAvailable);	void setCurrentActiveProviderWidget();
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().updateKvmVisible(model.getKvmPropertiesModel().getIsAvailable()); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().setCurrentActiveProviderWidget(); } }
public void updateDataCenterVisible(boolean isAvailable) { if (isAvailable) { typeEditorRow.removeStyleName(style.headerSeparator()); datacenterEditorRow.addStyleName(style.headerSeparator()); } else { typeEditorRow.addStyleName(style.headerSeparator()); datacenterEditorRow.removeStyleName(style.headerSeparator()); } }	@java.lang.Override public void setCurrentActiveProviderWidget() { if ((providerModel) != null) { if (providerModel.getDataCenter().getIsAvailable()) { typeEditorRow.removeStyleName(style.headerSeparator()); datacenterEditorRow.addStyleName(style.headerSeparator()); } else { typeEditorRow.addStyleName(style.headerSeparator()); datacenterEditorRow.removeStyleName(style.headerSeparator()); } kvmPropertiesWidget.setVisible(providerModel.getKvmPropertiesModel().getIsAvailable()); vmwarePropertiesWidget.setVisible(providerModel.getVmwarePropertiesModel().getIsAvailable()); xenPropertiesWidget.setVisible(providerModel.getXenPropertiesModel().getIsAvailable()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().updateXenVisible(model.getXenPropertiesModel().getIsAvailable()); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().setCurrentActiveProviderWidget(); } }
@java.lang.Override protected boolean validateImageTransfer(org.ovirt.engine.core.compat.Guid imageId) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(imageId))); org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = getDiskValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = getDiskImagesValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator StorageDomainValidator = getStorageDomainValidator(storageDomainDao.getForStoragePool(diskImage.getStorageIds().get(0), diskImage.getStoragePoolId())); return ((((validate(diskValidator.isDiskExists())) && (validate(diskValidator.isDiskAttachedToAnyVm()))) && (validate(diskImagesValidator.diskImagesNotIllegal()))) && (validate(diskImagesValidator.diskImagesNotLocked()))) && (validate(StorageDomainValidator.isDomainExistAndActive())); }	@java.lang.Override protected boolean validateImageTransfer(org.ovirt.engine.core.compat.Guid imageId) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(imageId))); org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = getDiskValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = getDiskImagesValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(storageDomainDao.getForStoragePool(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getStorageDomainId(), diskImage.getStoragePoolId())); return ((((validate(diskValidator.isDiskExists())) && (validate(diskValidator.isDiskAttachedToAnyVm()))) && (validate(diskImagesValidator.diskImagesNotIllegal()))) && (validate(diskImagesValidator.diskImagesNotLocked()))) && (validate(storageDomainValidator.isDomainExistAndActive())); }
protected void initializeSuppliedImage() { super.initSuppliedImage(transferImageCommand); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); doReturn(diskImage).when(diskDao).get(any()); doReturn(diskValidator).when(getCommand()).getDiskValidator(any()); doReturn(diskImagesValidator).when(getCommand()).getDiskImagesValidator(any()); doReturn(ValidationResult.VALID).when(diskValidator).isDiskAttachedToAnyVm(); doReturn(ValidationResult.VALID).when(diskValidator).isDiskExists(); doReturn(ValidationResult.VALID).when(diskImagesValidator).diskImagesNotLocked(); doReturn(ValidationResult.VALID).when(diskImagesValidator).diskImagesNotIllegal(); doReturn(ValidationResult.VALID).when(storageDomainValidator).isDomainExistAndActive(); }	protected void initializeSuppliedImage() { super.initSuppliedImage(transferImageCommand); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); doReturn(diskImage).when(diskDao).get(any()); doReturn(diskValidator).when(getCommand()).getDiskValidator(any()); doReturn(diskImagesValidator).when(getCommand()).getDiskImagesValidator(any()); doReturn(storageDomainValidator).when(getCommand()).getStorageDomainValidator(any()); doReturn(ValidationResult.VALID).when(diskValidator).isDiskAttachedToAnyVm(); doReturn(ValidationResult.VALID).when(diskValidator).isDiskExists(); doReturn(ValidationResult.VALID).when(diskImagesValidator).diskImagesNotLocked(); doReturn(ValidationResult.VALID).when(diskImagesValidator).diskImagesNotIllegal(); doReturn(ValidationResult.VALID).when(storageDomainValidator).isDomainExistAndActive(); }
private boolean updateVms() { for (org.ovirt.engine.core.common.businessentities.VmStatic vm : vmsLockedForUpdate) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); updateParams.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); upgradeGraphicsDevices(vm, updateParams); updateRngDeviceIfNecessary(vm.getId(), vm.getCustomCompatibilityVersion(), updateParams); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { addCustomValue("VmName", vm.getName()); org.ovirt.engine.core.bll.UpdateClusterCommand.addCustomValue("Message", "todo"); auditLogDirector.log(this, AuditLogType.CLUSTER_CANNOT_UPDATE_VM_COMPATIBILITY_VERSION); vm.setCustomCompatibilityVersion(oldCluster.getCompatibilityVersion()); vmStaticDao.update(vm); } } return true; }	private boolean updateVms() { for (org.ovirt.engine.core.common.businessentities.VmStatic vm : vmsLockedForUpdate) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); updateParams.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); upgradeGraphicsDevices(vm, updateParams); updateRngDeviceIfNecessary(vm.getId(), vm.getCustomCompatibilityVersion(), updateParams); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { java.util.List<java.lang.String> params = new java.util.ArrayList<>(); params.add("$action Update"); params.add("$type VM"); params.add(parseErrorMessage(result.getValidationMessages())); java.util.List<java.lang.String> messages = org.ovirt.engine.core.bll.Backend.getInstance().getErrorsTranslator().translateErrorText(params); failedUpgradeEntities.put(vm.getName(), getFailedMessage(messages)); } } return true; }
private boolean updateTemplates() { for (org.ovirt.engine.core.common.businessentities.VmTemplate template : templatesLockedForUpdate) { template.setClusterCompatibilityVersion(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()); final org.ovirt.engine.core.common.action.UpdateVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.UpdateVmTemplateParameters(template); parameters.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); parameters.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); updateRngDeviceIfNecessary(template.getId(), template.getCustomCompatibilityVersion(), parameters); if (!(parameters.isUpdateRngDevice())) { continue; } final org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVmTemplate, parameters, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { addCustomValue("TemplateName", template.getName()); org.ovirt.engine.core.bll.UpdateClusterCommand.addCustomValue("Message", "todo"); auditLogDirector.log(this, AuditLogType.CLUSTER_CANNOT_UPDATE_TEMPLATE_COMPATIBILITY_VERSION); template.setCustomCompatibilityVersion(oldCluster.getCompatibilityVersion()); vmTemplateDao.update(template); } } return true; }	private boolean updateTemplates() { for (org.ovirt.engine.core.common.businessentities.VmTemplate template : templatesLockedForUpdate) { template.setClusterCompatibilityVersion(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()); org.ovirt.engine.core.common.action.UpdateVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.UpdateVmTemplateParameters(template); parameters.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); parameters.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); updateRngDeviceIfNecessary(template.getId(), template.getCustomCompatibilityVersion(), parameters); if (!(parameters.isUpdateRngDevice())) { continue; } final org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVmTemplate, parameters, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { java.util.List<java.lang.String> params = new java.util.ArrayList<>(); params.add("$action Update"); params.add("$type Template"); params.add(parseErrorMessage(result.getValidationMessages())); java.util.List<java.lang.String> messages = org.ovirt.engine.core.bll.Backend.getInstance().getErrorsTranslator().translateErrorText(params); failedUpgradeEntities.put(template.getName(), getFailedMessage(messages)); } } return true; }
@java.lang.Override public void initialize() throws org.quartz.SchedulerConfigException { executorService = new java.util.concurrent.ThreadPoolExecutor(10, count, 60L, java.util.concurrent.TimeUnit.SECONDS, new java.util.concurrent.ArrayBlockingQueue<java.lang.Runnable>(queueSize), new org.ovirt.engine.core.utils.timer.SchedulerThreadPool.SchedulerThreadFactory(this)); }	@java.lang.Override public void initialize() throws org.quartz.SchedulerConfigException { executorService = new java.util.concurrent.ThreadPoolExecutor(10, count, 60L, java.util.concurrent.TimeUnit.SECONDS, new java.util.concurrent.ArrayBlockingQueue<java.lang.Runnable>(queueSize), new org.ovirt.engine.core.utils.timer.SchedulerThreadPool.SchedulerThreadFactory(this), (isReject() ? new java.util.concurrent.ThreadPoolExecutor.AbortPolicy() : new org.ovirt.engine.core.utils.timer.SchedulerThreadPool.BlockedRejectedExecutionHandler(log))); }
private void generateParameterSpec(org.ovirt.api.metamodel.concepts.Parameter parameter) { org.ovirt.api.metamodel.concepts.Type type = parameter.getType(); org.ovirt.api.metamodel.concepts.Name name = parameter.getName(); java.lang.String symbol = rubyNames.getMemberStyleName(name); java.lang.String clazz = null; if (type instanceof org.ovirt.api.metamodel.concepts.PrimitiveType) { org.ovirt.api.metamodel.concepts.Model model = type.getModel(); if (type == (model.getStringType())) { clazz = "String"; } else if (type == (model.getBooleanType())) { clazz = "TrueClass"; } else if (type == (model.getIntegerType())) { clazz = "Fixnum"; } else if (type == (model.getDecimalType())) { clazz = "Float"; } else if (type == (model.getDateType())) { clazz = "DateTime"; } else { throw new java.lang.IllegalArgumentException((("Don\'t know how to generate the parameter spec for type \"" + type) + "\"")); } } else if (type instanceof org.ovirt.api.metamodel.concepts.ListType) { clazz = "List"; } if (clazz != null) { buffer.addLine("[:%1$s, %2$s].freeze,", symbol, clazz); } }	private void generateParameterSpec(org.ovirt.api.metamodel.concepts.Parameter parameter) { org.ovirt.api.metamodel.concepts.Type type = parameter.getType(); org.ovirt.api.metamodel.concepts.Name name = parameter.getName(); java.lang.String symbol = rubyNames.getMemberStyleName(name); java.lang.String clazz = null; if (type instanceof org.ovirt.api.metamodel.concepts.PrimitiveType) { org.ovirt.api.metamodel.concepts.Model model = type.getModel(); if (type == (model.getStringType())) { clazz = "String"; } else if (type == (model.getBooleanType())) { clazz = "TrueClass"; } else if (type == (model.getIntegerType())) { clazz = "Integer"; } else if (type == (model.getDecimalType())) { clazz = "Float"; } else if (type == (model.getDateType())) { clazz = "DateTime"; } else { throw new java.lang.IllegalArgumentException((("Don\'t know how to generate the parameter spec for type \"" + type) + "\"")); } } else if (type instanceof org.ovirt.api.metamodel.concepts.ListType) { clazz = "List"; } if (clazz != null) { buffer.addLine("[:%1$s, %2$s].freeze,", symbol, clazz); } }
protected void setQcowCompat(org.ovirt.engine.core.common.businessentities.storage.Image diskImage, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newStorageDomainID, java.util.List<org.ovirt.engine.core.compat.Guid> hostsForExecution, boolean shouldPrepareAndTeardown) { diskImage.setQcowCompat(QcowCompat.QCOW2_V2); if (org.ovirt.engine.core.common.FeatureSupported.qcowCompatSupported(org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand.getStoragePool().getCompatibilityVersion())) { org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, hostsForExecution, shouldPrepareAndTeardown); if (qemuImageInfo != null) { diskImage.setQcowCompat(qemuImageInfo.getQcowCompat()); } } }	protected void setQcowCompat(org.ovirt.engine.core.common.businessentities.storage.Image diskImage, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid hostIdForExecution) { diskImage.setQcowCompat(QcowCompat.QCOW2_V2); if (org.ovirt.engine.core.common.FeatureSupported.qcowCompatSupported(org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand.getStoragePool().getCompatibilityVersion())) { org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, hostIdForExecution, (hostIdForExecution == null)); if (qemuImageInfo != null) { diskImage.setQcowCompat(qemuImageInfo.getQcowCompat()); } } }
private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { log.info("Finalizing successful transfer for {}", getTransferDescription()); if (stopImageTransferSession(context.entity)) { org.ovirt.engine.core.compat.Guid transferingVdsId = context.entity.getVdsId(); if (verifyImage(transferingVdsId)) { setVolumeLegalityInStorage(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.LEGAL_IMAGE); if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getVolumeFormat().equals(VolumeFormat.COW)) { setQcowCompat(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImageId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStorageDomainId(), java.util.Collections.emptyList(), false); imageDao.update(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage()); } org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.unLockImage(); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); } else { setImageStatus(ImageStatus.ILLEGAL); updateEntityPhase(ImageTransferPhase.FINALIZING_FAILURE); } tearDownImage(context.entity.getVdsId()); } }	private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { log.info("Finalizing successful transfer for {}", getTransferDescription()); if (stopImageTransferSession(context.entity)) { org.ovirt.engine.core.compat.Guid transferingVdsId = context.entity.getVdsId(); if (verifyImage(transferingVdsId)) { setVolumeLegalityInStorage(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.LEGAL_IMAGE); if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getVolumeFormat().equals(VolumeFormat.COW)) { setQcowCompat(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImageId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStorageDomainId(), transferingVdsId); imageDao.update(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage()); } org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.unLockImage(); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); } else { setImageStatus(ImageStatus.ILLEGAL); updateEntityPhase(ImageTransferPhase.FINALIZING_FAILURE); } tearDownImage(context.entity.getVdsId()); } }
private void setQcowCompatByQemuImageInfo(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newStorageDomainID) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIdToExecuteQemuImageInfo = java.util.Collections.emptyList(); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> attachedVmsInfo = vmDao.getVmsWithPlugInfo(getDestinationDiskImage().getId()); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice> pair : attachedVmsInfo) { org.ovirt.engine.core.common.businessentities.VM vm = pair.getFirst(); if (java.lang.Boolean.TRUE.equals(pair.getSecond().isPlugged())) { if (vm.isStartingOrUp()) { hostIdToExecuteQemuImageInfo.add(vm.getRunOnVds()); break; } } } setQcowCompat(getDestinationDiskImage().getImage(), storagePoolId, newImageGroupId, newImageId, newStorageDomainID, hostIdToExecuteQemuImageInfo, (hostIdToExecuteQemuImageInfo == null)); }	private void setQcowCompatByQemuImageInfo(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newStorageDomainID) { org.ovirt.engine.core.compat.Guid hostIdToExecuteQemuImageInfo = null; java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> attachedVmsInfo = vmDao.getVmsWithPlugInfo(getDestinationDiskImage().getId()); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice> pair : attachedVmsInfo) { org.ovirt.engine.core.common.businessentities.VM vm = pair.getFirst(); if (java.lang.Boolean.TRUE.equals(pair.getSecond().isPlugged())) { if (vm.isStartingOrUp()) { hostIdToExecuteQemuImageInfo = vm.getRunOnVds(); break; } } } setQcowCompat(getDestinationDiskImage().getImage(), storagePoolId, newImageGroupId, newImageId, newStorageDomainID, hostIdToExecuteQemuImageInfo); }
private void showPanelItems(boolean show) { securityCheckbox.setVisible(show); bugCheckbox.setVisible(show); enhancementCheckbox.setVisible(show); enhancementCheckboxIcon.setVisible(show); bugCheckboxIcon.setVisible(show); securityCheckboxIcon.setVisible(show); }	private void showPanelItems(boolean show) { securityCheckbox.setVisible(show); bugCheckbox.setVisible(show); enhancementCheckbox.setVisible(show); }
@java.lang.Override public org.gwtbootstrap3.client.ui.constants.IconType getValue(org.ovirt.engine.core.common.businessentities.Erratum erratum) { if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.BUGFIX)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString("ORANGERED")); return org.gwtbootstrap3.client.ui.constants.IconType.BUG; } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.ENHANCEMENT)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString("BLUE")); return org.gwtbootstrap3.client.ui.constants.IconType.PLUS_SQUARE; } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.SECURITY)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString("DARKORANGE")); return org.gwtbootstrap3.client.ui.constants.IconType.WARNING; } return null; }	@java.lang.Override public org.gwtbootstrap3.client.ui.constants.IconType getValue(org.ovirt.engine.core.common.businessentities.Erratum erratum) { if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.BUGFIX)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(ErrataType.BUGFIX.getColor())); return org.gwtbootstrap3.client.ui.constants.IconType.BUG; } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.ENHANCEMENT)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(ErrataType.ENHANCEMENT.getColor())); return org.gwtbootstrap3.client.ui.constants.IconType.PLUS_SQUARE; } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.SECURITY)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(ErrataType.SECURITY.getColor())); return org.gwtbootstrap3.client.ui.constants.IconType.WARNING; } return null; }
protected com.google.gwt.safehtml.shared.SafeHtml getRenderedImage(org.gwtbootstrap3.client.ui.constants.IconType value, java.lang.String color) { return org.ovirt.engine.ui.common.widget.table.cell.IconTypeCell.TEMPLATE.icon(value.getCssName(), color); }	protected com.google.gwt.safehtml.shared.SafeHtml getRenderedImage(org.gwtbootstrap3.client.ui.constants.IconType value, java.lang.String color) { com.google.gwt.safecss.shared.SafeStyles styles = new com.google.gwt.safecss.shared.SafeStylesBuilder().trustedColor(color).toSafeStyles(); return org.ovirt.engine.ui.common.widget.table.cell.IconTypeCell.TEMPLATE.icon(value.getCssName(), styles); }
@org.ovirt.engine.ui.common.widget.table.cell.Template("<span class=\"fa {0} inline-icon\" style=\"color: {1}\"/>") com.google.gwt.safehtml.shared.SafeHtml icon(java.lang.String className, java.lang.String color);	@org.ovirt.engine.ui.common.widget.table.cell.Template("<span class=\"fa {0} inline-icon\" style=\"{1}\"/>") com.google.gwt.safehtml.shared.SafeHtml icon(java.lang.String className, com.google.gwt.safecss.shared.SafeStyles styles);
private void setQcowCompatByQemuImageInfo(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newStorageDomainID) { org.ovirt.engine.core.compat.Guid hostIdToExecuteQemuImageInfo = null; java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> attachedVmsInfo = vmDao.getVmsWithPlugInfo(getDestinationDiskImage().getId()); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice> pair : attachedVmsInfo) { org.ovirt.engine.core.common.businessentities.VM vm = pair.getFirst(); if (java.lang.Boolean.TRUE.equals(pair.getSecond().isPlugged())) { if (vm.isStartingOrUp()) { hostIdToExecuteQemuImageInfo = vm.getRunOnVds(); break; } } } setQcowCompat(getDestinationDiskImage().getImage(), storagePoolId, newImageGroupId, newImageId, newStorageDomainID, hostIdToExecuteQemuImageInfo); }	private void setQcowCompatByQemuImageInfo(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newStorageDomainID) { org.ovirt.engine.core.compat.Guid hostIdToExecuteQemuImageInfo = null; java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> attachedVmsInfo = vmDao.getVmsWithPlugInfo(getDestinationDiskImage().getId()); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice> pair : attachedVmsInfo) { org.ovirt.engine.core.common.businessentities.VM vm = pair.getFirst(); if (java.lang.Boolean.TRUE.equals(pair.getSecond().getIsPlugged())) { if (vm.isStartingOrUp()) { hostIdToExecuteQemuImageInfo = vm.getRunOnVds(); break; } } } setQcowCompat(getDestinationDiskImage().getImage(), storagePoolId, newImageGroupId, newImageId, newStorageDomainID, hostIdToExecuteQemuImageInfo); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(disk().format()); optional(disk().alias()); optional(disk().bootable()); optional(disk().description()); optional(disk().propagateErrors()); optional(disk().quota().id()); optional(disk().shareable()); optional(disk().sparse()); optional(disk().wipeAfterDelete()); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(disk().format()); mandatory(disk()._interface()); optional(disk().alias()); optional(disk().bootable()); optional(disk().description()); optional(disk().propagateErrors()); optional(disk().quota().id()); optional(disk().shareable()); optional(disk().sparse()); optional(disk().wipeAfterDelete()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(attachment().id()); optional(attachment().active()); optional(attachment().disk().readOnly()); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(attachment().bootable()); mandatory(attachment()._interface()); mandatory(attachment().passDiscard()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(attachment().id()); mandatory(attachment().disk().snapshot().id()); optional(attachment().active()); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(attachment().disk().id()); }
public static int getCdDeviceIndex(java.lang.String cdInterface) { switch (cdInterface) { case "scsi" : return 2; case "ide" : return 2; case "sata" : return 2; default : return -1; } }	public static int getCdDeviceIndex(java.lang.String cdInterface) { switch (cdInterface) { case "scsi" : case "ide" : case "sata" : return 2; default : return -1; } }
public boolean hasDiscardZeroesTheDataSupport() { return java.lang.Boolean.TRUE.equals(getDiscardZeroesData()); }	@org.codehaus.jackson.annotate.JsonIgnore public boolean hasDiscardZeroesTheDataSupport() { return java.lang.Boolean.TRUE.equals(getDiscardZeroesData()); }
public boolean supportsDiscard() { return ((getDiscardMaxSize()) != null) && ((getDiscardMaxSize()) > 0); }	@org.codehaus.jackson.annotate.JsonIgnore public boolean supportsDiscard() { return ((getDiscardMaxSize()) != null) && ((getDiscardMaxSize()) > 0); }
private java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> getAddedLuns(java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> lunModels, boolean selectedLuns, boolean includedLuns) { java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = new java.util.LinkedList<>(); for (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lun : lunModels) { if ((selectedLuns && (lun.getIsSelected())) || ((includedLuns && (lun.getIsIncluded())) && ((org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(luns, new org.ovirt.engine.ui.uicommonweb.Linq.LunPredicate(lun))) == null))) { luns.add(lun); } } return luns; }	private java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> getAddedLuns(java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> lunModels, boolean selectedLuns, boolean includedLuns) { java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = new java.util.LinkedList<>(); for (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lun : lunModels) { if ((((selectedLuns && (lun.getIsSelected())) && (!(lun.getIsIncluded()))) || ((includedLuns && (lun.getIsIncluded())) && (!(lun.getIsSelected())))) && ((org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(luns, new org.ovirt.engine.ui.uicommonweb.Linq.LunPredicate(lun))) == null)) { luns.add(lun); } } return luns; }
private boolean isStorageDomainSupportDiscard(java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns) { for (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lun : luns) { java.lang.Long discardMaxSize = lun.getEntity().getDiscardMaxSize(); if ((discardMaxSize != null) && (discardMaxSize == 0)) { return false; } } return true; }	private boolean storageDomainSupportsDiscard(java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns) { for (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lun : luns) { if (!(lun.getEntity().supportsDiscard())) { return false; } } return true; }
private void validateDiscardAfterDelete() { if ((getDiscardAfterDelete().getIsAvailable()) && (getDiscardAfterDelete().getEntity())) { org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase sanStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) (getCurrentStorageItem())); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = sanStorageModel.getAddedLuns(); if ((luns != null) && (!(isStorageDomainSupportDiscard(luns)))) { getDiscardAfterDelete().setIsValid(false); getDiscardAfterDelete().getInvalidityReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel.constants.discardIsNotSupportedByUnderlyingStorage()); return; } } getDiscardAfterDelete().setIsValid(true); }	private void validateDiscardAfterDelete() { if ((getDiscardAfterDelete().getIsAvailable()) && (getDiscardAfterDelete().getEntity())) { org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase sanStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) (getCurrentStorageItem())); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = sanStorageModel.getSelectedLuns(); if ((luns != null) && (!(storageDomainSupportsDiscard(luns)))) { getDiscardAfterDelete().getInvalidityReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel.constants.discardIsNotSupportedByUnderlyingStorage()); getDiscardAfterDelete().setIsValid(false); return; } } getDiscardAfterDelete().setIsValid(true); }
public void updateLunWarningForDiscardAfterDelete() { if (getContainer().getDiscardAfterDelete().getEntity()) { for (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lunModel : getAddedLuns()) { if (!(lunSupportsDiscard(lunModel.getEntity()))) { setSelectedLunWarning(org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase.uiConstants.discardIsNotSupportedByUnderlyingStorage()); return; } } } setSelectedLunWarning(org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase.uiConstants.emptyString()); }	public void updateLunWarningForDiscardAfterDelete() { if (getContainer().getDiscardAfterDelete().getEntity()) { for (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lunModel : getSelectedLuns()) { if (!(lunModel.getEntity().supportsDiscard())) { setSelectedLunWarning(org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase.constants.discardIsNotSupportedByUnderlyingStorage()); return; } } } setSelectedLunWarning(org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase.constants.emptyString()); }
private boolean lunSupportsDiscard(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { return ((lun.getDiscardMaxSize()) != null) && ((lun.getDiscardMaxSize()) > 0); }	private java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> getLuns(boolean selectedLuns, boolean includedLuns) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = new java.util.ArrayList<>(); if (getIsGrouppedByTarget()) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel> items = ((java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel>) (getItems())); for (org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel item : items) { luns.addAll(getAddedLuns(item.getLuns(), selectedLuns, includedLuns)); } } else { java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> items = ((java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>) (getItems())); luns.addAll(getAddedLuns(items, selectedLuns, includedLuns)); } return luns; }
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, T value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { org.gwtbootstrap3.client.ui.Icon icon = new org.gwtbootstrap3.client.ui.Icon(); org.gwtbootstrap3.client.ui.base.helper.StyleHelper.addEnumStyleName(icon, iconType); if (org.ovirt.engine.ui.common.widget.table.cell.AbstractIconButtonCell.isEnabled(value)) { icon.getElement().getStyle().setProperty("color", enabledColor); icon.getElement().getStyle().setProperty("cursor", "pointer"); } else { icon.getElement().getStyle().setProperty("color", disabledColor); icon.getElement().getStyle().setProperty("cursor", "default"); } sb.append(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(icon.toString())); }	@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, T value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { org.gwtbootstrap3.client.ui.Icon icon = new org.gwtbootstrap3.client.ui.Icon(); icon.setId(id); org.gwtbootstrap3.client.ui.base.helper.StyleHelper.addEnumStyleName(icon, iconType); icon.addStyleName((org.ovirt.engine.ui.common.widget.table.cell.AbstractIconButtonCell.isEnabled(value) ? "icon-enabled" : "icon-disabled")); sb.append(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(icon.toString())); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.gwtplatform.mvp.client.PresenterWidget<?> content) { super.setInSlot(slot, content); if (slot == (tabContentSlot)) { try { com.gwtplatform.mvp.client.Presenter<?, ?> presenter = ((com.gwtplatform.mvp.client.Presenter<?, ?>) (content)); com.gwtplatform.mvp.client.proxy.TabContentProxy<?> proxy = ((com.gwtplatform.mvp.client.proxy.TabContentProxy<?>) (presenter.getProxy())); org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.getView().setActiveTabHistoryToken(proxy.getTargetHistoryToken()); org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.getView().setActiveTab(proxy.getTab()); } catch (java.lang.Exception e) { org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.logger.log(java.util.logging.Level.SEVERE, "Error while updating tab view", e); } } }	@java.lang.Override public void setInSlot(java.lang.Object slot, com.gwtplatform.mvp.client.PresenterWidget<?> content) { super.setInSlot(slot, content); if (slot == (tabContentSlot)) { try { com.gwtplatform.mvp.client.Presenter<?, ?> presenter = ((com.gwtplatform.mvp.client.Presenter<?, ?>) (content)); com.gwtplatform.mvp.client.proxy.TabContentProxy<?> proxy = ((com.gwtplatform.mvp.client.proxy.TabContentProxy<?>) (presenter.getProxy())); org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.getView().setActiveTab(proxy.getTab()); org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.getView().setActiveTabHistoryToken(proxy.getTargetHistoryToken()); } catch (java.lang.Exception e) { org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.logger.log(java.util.logging.Level.SEVERE, "Error while updating tab view", e); } } }
@org.junit.Test public void testSetStatusForRequiredNetworksAbsentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = java.util.Arrays.asList(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1), createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID2, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME2)); when(vdsStaticDao.countHostsInClusterThatMissNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, VDSStatus.Up)).thenReturn(666); underTest.setStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, networks); verify(networkClusterDao).updateStatus(same(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.NON_OPERATIONAL)); }	@org.junit.Test public void testSetStatusForRequiredNetworksAbsentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = java.util.Arrays.asList(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1), createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID2, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME2)); when(vdsStaticDao.checkIfExistsHostThatMissesNetworkInCluster(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, VDSStatus.Up)).thenReturn(true); underTest.setStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, networks); verify(networkClusterDao).updateStatus(same(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.NON_OPERATIONAL)); }
@org.junit.Before public void setUp() { networkCluster = createNetworkCluster(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1); when(networkClusterDao.get(networkCluster.getId())).thenReturn(networkCluster); managementNetworkCluster = createNetworkCluster(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID); managementNetwork = createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_NAME); when(managementNetworkUtil.getManagementNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID)).thenReturn(managementNetwork); when(networkClusterDao.get(new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID))).thenReturn(managementNetworkCluster); when(vdsDynamicDao.countHostsInClusterWithStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, VDSStatus.Up)).thenReturn(666); }	@org.junit.Before public void setUp() { networkCluster = createNetworkCluster(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1); when(networkClusterDao.get(networkCluster.getId())).thenReturn(networkCluster); managementNetworkCluster = createNetworkCluster(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID); managementNetwork = createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_NAME); when(managementNetworkUtil.getManagementNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID)).thenReturn(managementNetwork); when(networkClusterDao.get(new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID))).thenReturn(managementNetworkCluster); when(vdsDynamicDao.checkIfExistsHostWithStatusInCluster(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, VDSStatus.Up)).thenReturn(true); }
@org.junit.Test public void testSetStatusForRequiredNetworkAbsentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); when(vdsStaticDao.countHostsInClusterThatMissNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, VDSStatus.Up)).thenReturn(666); underTest.setStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, java.util.Collections.singletonList(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1))); verify(networkClusterDao).updateStatus(same(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.NON_OPERATIONAL)); }	@org.junit.Test public void testSetStatusForRequiredNetworkAbsentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); when(vdsStaticDao.checkIfExistsHostThatMissesNetworkInCluster(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, VDSStatus.Up)).thenReturn(true); underTest.setStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, java.util.Collections.singletonList(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1))); verify(networkClusterDao).updateStatus(same(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.NON_OPERATIONAL)); }
@org.junit.Test public void testSetStatusForRequiredNetworkPresentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); underTest.setStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, java.util.Collections.singletonList(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1))); verify(vdsStaticDao).countHostsInClusterThatMissNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, VDSStatus.Up); verify(networkClusterDao, never()).updateStatus(same(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.OPERATIONAL)); }	@org.junit.Test public void testSetStatusForRequiredNetworkPresentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); underTest.setStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, java.util.Collections.singletonList(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1))); verify(vdsStaticDao).checkIfExistsHostThatMissesNetworkInCluster(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, VDSStatus.Up); verify(networkClusterDao, never()).updateStatus(same(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.OPERATIONAL)); }
public void setStatus(org.ovirt.engine.core.compat.Guid clusterId, final java.util.Collection<org.ovirt.engine.core.common.businessentities.network.Network> networks) { for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = networkClusterDao.get(new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(clusterId, network.getId())); boolean doUpdateNetworkClusterStatus = networkCluster != null; if (doUpdateNetworkClusterStatus) { if (networkCluster.isRequired()) { updateStatusOfRequiredNetworkCluster(networkCluster, network.getName()); } else { updateNetworkClusterStatus(networkCluster, NetworkStatus.OPERATIONAL); } } } }	public void setStatus(org.ovirt.engine.core.compat.Guid clusterId, final java.util.Collection<org.ovirt.engine.core.common.businessentities.network.Network> networks) { final org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.RequiredNetworkClusterStatusUpdater requiredNetworkClusterStatusUpdater = new org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.RequiredNetworkClusterStatusUpdater(clusterId); for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = networkClusterDao.get(new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(clusterId, network.getId())); boolean doUpdateNetworkClusterStatus = networkCluster != null; if (doUpdateNetworkClusterStatus) { if (networkCluster.isRequired()) { requiredNetworkClusterStatusUpdater.update(networkCluster, network.getName()); } else { updateNetworkClusterStatus(networkCluster, NetworkStatus.OPERATIONAL); } } } }
public static java.lang.Long determineImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.Image sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid dstDomain, org.ovirt.engine.core.compat.Guid imageGroupID) { if (org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isInitialSizeSupportedForFormat(destFormat, dstDomain)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromStorage = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(storagePoolId, srcDomain, imageGroupID, sourceImage.getId()); return (sourceImage.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW) ? org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(imageInfoFromStorage.getActualSizeInBytes()) : imageInfoFromStorage.getActualSizeInBytes(); } return null; }	public static java.lang.Long determineImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.Image sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid dstDomain, org.ovirt.engine.core.compat.Guid imageGroupID) { if (org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isInitialSizeSupportedForFormat(destFormat, dstDomain)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromStorage = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(storagePoolId, srcDomain, imageGroupID, sourceImage.getId()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(sourceImage.getVolumeFormat(), imageInfoFromStorage.getActualSizeInBytes()); } return null; }
public static void redirectToModule(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException { org.ovirt.engine.core.sso.utils.SsoUtils.log.debug("Entered redirectToModule"); try { org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request); org.ovirt.engine.core.uutils.net.URLBuilder redirectUrl = new org.ovirt.engine.core.uutils.net.URLBuilder(org.ovirt.engine.core.sso.utils.SsoUtils.getRedirectUrl(request).toString()).addParameter("code", ssoSession.getAuthorizationCode()); java.lang.String appUrl = ssoSession.getAppUrl(); if (org.apache.commons.lang.StringUtils.isNotEmpty(appUrl)) { redirectUrl.addParameter("app_url", appUrl); } java.lang.String state = ssoSession.getState(); if (org.apache.commons.lang.StringUtils.isNotEmpty(state)) { redirectUrl.addParameter("state", state); } response.sendRedirect(redirectUrl.build()); org.ovirt.engine.core.sso.utils.SsoUtils.log.debug("Redirecting back to module: {}", redirectUrl); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.SsoUtils.log.error("Error redirecting back to module: {}", ex.getMessage()); org.ovirt.engine.core.sso.utils.SsoUtils.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex); } finally { org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request).cleanup(); } }	public static void redirectToModule(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException { org.ovirt.engine.core.sso.utils.SsoUtils.log.debug("Entered redirectToModule"); try { org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request); org.ovirt.engine.core.uutils.net.URLBuilder redirectUrl = new org.ovirt.engine.core.uutils.net.URLBuilder(org.ovirt.engine.core.sso.utils.SsoUtils.getRedirectUrl(request)).addParameter("code", ssoSession.getAuthorizationCode()); java.lang.String appUrl = ssoSession.getAppUrl(); if (org.apache.commons.lang.StringUtils.isNotEmpty(appUrl)) { redirectUrl.addParameter("app_url", appUrl); } java.lang.String state = ssoSession.getState(); if (org.apache.commons.lang.StringUtils.isNotEmpty(state)) { redirectUrl.addParameter("state", state); } response.sendRedirect(redirectUrl.build()); org.ovirt.engine.core.sso.utils.SsoUtils.log.debug("Redirecting back to module: {}", redirectUrl); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.SsoUtils.log.error("Error redirecting back to module: {}", ex.getMessage()); org.ovirt.engine.core.sso.utils.SsoUtils.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex); } finally { org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request).cleanup(); } }
private static java.lang.String createTmpSsoClientConfFile(java.lang.String clientId, java.lang.String clientSecret, java.lang.String certificateFile, java.lang.String callbackPrefix) throws java.io.FileNotFoundException { if (!(org.ovirt.engine.ssoreg.core.SsoLocalConfig.getInstance().getTmpDir().exists())) { org.ovirt.engine.ssoreg.core.SsoLocalConfig.getInstance().getTmpDir().mkdirs(); } java.io.File tmpFile = new java.io.File(org.ovirt.engine.ssoreg.core.SsoLocalConfig.getInstance().getTmpDir(), java.lang.String.format("99_sso_client_%s.conf", java.lang.System.currentTimeMillis())); try (java.io.PrintWriter pw = new java.io.PrintWriter(new java.io.FileOutputStream(tmpFile))) { pw.println(java.lang.String.format("SSO_CLIENT_ID=%s", clientId)); pw.println(java.lang.String.format("SSO_CLIENT_SECRET=%s", clientSecret)); pw.println(java.lang.String.format("SSO_CLIENT_CERTIFICATE_FILE=%s", certificateFile)); pw.println(java.lang.String.format("SSO_CLIENT_CALLBACK_PREFIX=%s", callbackPrefix)); } return tmpFile.getAbsolutePath(); }	private static java.lang.String createTmpSsoClientConfFile(java.lang.String clientId, java.lang.String clientSecret, java.lang.String certificateFile, java.lang.String callbackPrefix) throws java.io.FileNotFoundException { java.io.File tmpDir = org.ovirt.engine.ssoreg.core.SsoLocalConfig.getInstance().getTmpDir(); if (tmpDir.mkdirs()) { org.ovirt.engine.ssoreg.core.SsoRegistrationToolExecutor.log.debug("Created ovirt temp directory: {}", tmpDir.getAbsolutePath()); } java.io.File tmpFile = new java.io.File(tmpDir, java.lang.String.format("99_sso_client_%s.conf", java.lang.System.currentTimeMillis())); try (java.io.PrintWriter pw = new java.io.PrintWriter(new java.io.FileOutputStream(tmpFile))) { pw.println(java.lang.String.format("SSO_CLIENT_ID=%s", clientId)); pw.println(java.lang.String.format("SSO_CLIENT_SECRET=%s", clientSecret)); pw.println(java.lang.String.format("SSO_CLIENT_CERTIFICATE_FILE=%s", certificateFile)); pw.println(java.lang.String.format("SSO_CLIENT_CALLBACK_PREFIX=%s", callbackPrefix)); } return tmpFile.getAbsolutePath(); }
public static java.lang.String createJWT(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession, java.lang.String clientId) throws java.security.NoSuchAlgorithmException { java.lang.String serverName = request.getServerName(); java.lang.String issuer = java.lang.String.format("%s://%s:%s", request.getScheme(), (org.apache.http.conn.util.InetAddressUtils.isIPv6Address(serverName) ? java.lang.String.format("[%s]", serverName) : serverName), request.getServerPort()); io.jsonwebtoken.JwtBuilder builder = io.jsonwebtoken.Jwts.builder().setId(ssoSession.getPrincipalRecord().<java.lang.String>get(Authz.PrincipalRecord.ID)).setIssuedAt(new java.util.Date(java.lang.System.currentTimeMillis())).setIssuer(issuer).setSubject(java.lang.String.format("%s@%s", ssoSession.getUserId(), ssoSession.getProfile())).setAudience(clientId).signWith(SignatureAlgorithm.HS256, org.ovirt.engine.core.sso.utils.SsoUtils.base64SecretBytes); io.jsonwebtoken.Claims claims = io.jsonwebtoken.Jwts.claims(); claims.put("sub", java.lang.String.format("%s@%s", ssoSession.getUserId(), ssoSession.getProfile())); claims.put("preferred_username", java.lang.String.format("%s@%s", ssoSession.getUserId(), ssoSession.getProfile())); claims.put("email", ssoSession.getPrincipalRecord().<java.lang.String>get(Authz.PrincipalRecord.EMAIL)); claims.put("name", ssoSession.getPrincipalRecord().<java.lang.String>get(Authz.PrincipalRecord.FIRST_NAME)); builder.setClaims(claims); return builder.compact(); }	public static java.lang.String createJWT(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession, java.lang.String clientId) throws com.nimbusds.jose.JOSEException, java.security.NoSuchAlgorithmException { java.lang.String serverName = request.getServerName(); java.lang.String issuer = java.lang.String.format("%s://%s:%s", request.getScheme(), (org.apache.http.conn.util.InetAddressUtils.isIPv6Address(serverName) ? java.lang.String.format("[%s]", serverName) : serverName), request.getServerPort()); com.nimbusds.jwt.JWTClaimsSet jwtClaims = new com.nimbusds.jwt.JWTClaimsSet.Builder().jwtID(ssoSession.getPrincipalRecord().<java.lang.String>get(Authz.PrincipalRecord.ID)).issueTime(new java.util.Date(java.lang.System.currentTimeMillis())).issuer(issuer).subject(java.lang.String.format("%s@%s", ssoSession.getUserId(), ssoSession.getProfile())).audience(java.util.Arrays.asList(clientId)).claim("sub", java.lang.String.format("%s@%s", ssoSession.getUserId(), ssoSession.getProfile())).claim("preferred_username", java.lang.String.format("%s@%s", ssoSession.getUserId(), ssoSession.getProfile())).claim("email", ssoSession.getPrincipalRecord().<java.lang.String>get(Authz.PrincipalRecord.EMAIL)).claim("name", ssoSession.getPrincipalRecord().<java.lang.String>get(Authz.PrincipalRecord.FIRST_NAME)).build(); com.nimbusds.jose.JWSSigner signer = new com.nimbusds.jose.crypto.MACSigner(org.ovirt.engine.core.sso.utils.SsoUtils.sharedSecret); com.nimbusds.jwt.SignedJWT signedJWT = new com.nimbusds.jwt.SignedJWT(new com.nimbusds.jose.JWSHeader(com.nimbusds.jose.JWSAlgorithm.HS256), jwtClaims); signedJWT.sign(signer); return signedJWT.serialize(); }
protected java.lang.String findBestMatchForEmulatedMachine(java.lang.String currentEmulatedMachine, java.util.List<java.lang.String> candidateEmulatedMachines) { if (candidateEmulatedMachines.contains(currentEmulatedMachine)) { return currentEmulatedMachine; } return candidateEmulatedMachines.stream().max(org.ovirt.engine.core.bll.Comparator.comparingInt(( s) -> org.apache.commons.lang.StringUtils.indexOfDifference(currentEmulatedMachine, s))).orElse(currentEmulatedMachine); }	protected java.lang.String findBestMatchForEmulatedMachine(java.lang.String currentEmulatedMachine, java.util.List<java.lang.String> candidateEmulatedMachines) { if (candidateEmulatedMachines.contains(currentEmulatedMachine)) { return currentEmulatedMachine; } return candidateEmulatedMachines.stream().max(java.util.Comparator.comparingInt(( s) -> org.apache.commons.lang.StringUtils.indexOfDifference(currentEmulatedMachine, s))).orElse(currentEmulatedMachine); }
private void setQcowCompatForSnapshot(org.ovirt.engine.core.common.businessentities.storage.DiskImage snapshot) { try { org.ovirt.engine.core.common.businessentities.storage.DiskImage newImageIRS = getVolumeInfo(snapshot.getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), snapshot.getId(), snapshot.getImageId()); if ((newImageIRS != null) && (newImageIRS.getVolumeFormat().equals(VolumeFormat.COW))) { setQcowCompatByQemuImageInfo(snapshot.getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), snapshot.getId(), snapshot.getImageId()); } } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Unable to update the image info for image '{}' (image group: '{}') on domain '{}'", snapshot.getImageId(), snapshot.getId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId()); } }	protected void setQcowCompatForSnapshot(org.ovirt.engine.core.common.businessentities.storage.DiskImage snapshot, org.ovirt.engine.core.common.businessentities.storage.DiskImage volInfo) { org.ovirt.engine.core.common.businessentities.storage.DiskImage info = volInfo; if (snapshot.getVolumeFormat().equals(VolumeFormat.COW)) { try { if (info == null) { info = getVolumeInfo(snapshot.getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), snapshot.getId(), snapshot.getImageId()); } if (info != null) { setQcowCompatByQemuImageInfo(snapshot.getStoragePoolId(), snapshot.getId(), snapshot.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), snapshot); } imageDao.update(snapshot.getImage()); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Unable to update the image info for image '{}' (image group: '{}') on domain '{}'", snapshot.getImageId(), snapshot.getId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId()); } } }
@java.lang.Override protected void endSuccessfully() { if (shouldUpdateStorageDisk()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = diskImageDao.getAllSnapshotsForImageGroup(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getDestImageGroupId()); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.setSnapshotForShareableDisk(snapshots); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage snapshot : snapshots) { imageStorageDomainMapDao.remove(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMapId(snapshot.getImageId(), snapshot.getStorageIds().get(0))); imageStorageDomainMapDao.save(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap(snapshot.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getQuotaId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getDiskProfileId())); setQcowCompatForSnapshot(snapshot); } } super.endSuccessfully(); }	@java.lang.Override protected void endSuccessfully() { if (shouldUpdateStorageDisk()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = diskImageDao.getAllSnapshotsForImageGroup(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getDestImageGroupId()); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.setSnapshotForShareableDisk(snapshots); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage snapshot : snapshots) { imageStorageDomainMapDao.remove(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMapId(snapshot.getImageId(), snapshot.getStorageIds().get(0))); imageStorageDomainMapDao.save(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap(snapshot.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getQuotaId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getDiskProfileId())); setQcowCompatForSnapshot(snapshot, null); } } super.endSuccessfully(); }
@org.junit.Test public void testBadGuid() throws java.lang.Exception { try { new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResource(org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.DATA_CENTER_ID, "foo"); fail("expected WebApplicationException"); } catch (javax.ws.rs.WebApplicationException wae) { verifyNotFoundException(wae); } }	@org.junit.Test public void testBadGuid() throws java.lang.Exception { try { new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResource("foo"); fail("expected WebApplicationException"); } catch (javax.ws.rs.WebApplicationException wae) { verifyNotFoundException(wae); } }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Network network) { validateParameters(network, "id|name"); java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = getNetworks(); org.ovirt.engine.core.common.businessentities.network.Network net = null; if (network.isSetId()) { net = getNetworkById(network.getId(), networks); if (net == null) { notFound(org.ovirt.engine.api.model.Network.class); } } else if (network.isSetName()) { net = getNetworkByName(network.getName(), networks); if (net == null) { notFound(org.ovirt.engine.api.model.Network.class); } } return performCreate(VdcActionType.AttachNetworkToCluster, new org.ovirt.engine.core.common.action.AttachNetworkToClusterParameter(getCluster(), net), new org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResource.AttachedNetworkResolver(net.getId())); }	@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Network network) { validateParameters(network, "id|name"); java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = getNetworks(); org.ovirt.engine.core.common.businessentities.network.Network net = null; if (network.isSetId()) { net = getNetworkById(network.getId(), networks); } else if (network.isSetName()) { net = getNetworkByName(network.getName(), networks); } if (net == null) { throw new javax.ws.rs.WebApplicationException(Response.Status.NOT_FOUND); } return performCreate(VdcActionType.AttachNetworkToCluster, new org.ovirt.engine.core.common.action.AttachNetworkToClusterParameter(getCluster(), net), new org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResource.AttachedNetworkResolver(net.getId())); }
@java.lang.Override public org.ovirt.engine.api.resource.DataCenterNetworkResource getNetworkResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResource(dataCenterId, id)); }	@java.lang.Override public org.ovirt.engine.api.resource.DataCenterNetworkResource getNetworkResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResource(id)); }
protected boolean setAndValidateCpuProfile() { getVm().getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getClusterId()); getVm().getStaticData().setCpuProfileId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getCpuProfileId()); return validate(cpuProfileHelper.setAndValidateCpuProfile(getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getUserIdIfExternal())); }	protected boolean setAndValidateCpuProfile() { getVm().getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getClusterId()); getVm().getStaticData().setCpuProfileId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getCpuProfileId()); return validate(cpuProfileHelper.setAndValidateCpuProfile(getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getUserIdIfExternal().orElse(null))); }
protected boolean setAndValidateCpuProfile() { if ((isInstanceType()) || (org.ovirt.engine.core.bll.UpdateVmTemplateCommand.isBlankTemplate())) { return true; } return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getUserIdIfExternal())); }	protected boolean setAndValidateCpuProfile() { if ((isInstanceType()) || (org.ovirt.engine.core.bll.UpdateVmTemplateCommand.isBlankTemplate())) { return true; } return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getUserIdIfExternal().orElse(null))); }
protected boolean setAndValidateCpuProfile() { getVmTemplate().setClusterId(getClusterId()); getVmTemplate().setCpuProfileId(getParameters().getCpuProfileId()); return validate(cpuProfileHelper.setAndValidateCpuProfile(getVmTemplate(), getUserIdIfExternal())); }	protected boolean setAndValidateCpuProfile() { getVmTemplate().setClusterId(getClusterId()); getVmTemplate().setCpuProfileId(getParameters().getCpuProfileId()); return validate(cpuProfileHelper.setAndValidateCpuProfile(getVmTemplate(), getUserIdIfExternal().orElse(null))); }
protected boolean setAndValidateCpuProfile() { return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.CommonVmPoolCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.CommonVmPoolCommand.getUserIdIfExternal())); }	protected boolean setAndValidateCpuProfile() { return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.CommonVmPoolCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.CommonVmPoolCommand.getUserIdIfExternal().orElse(null))); }
protected boolean setAndValidateCpuProfile() { return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.VmManagementCommandBase.getUserIdIfExternal())); }	protected boolean setAndValidateCpuProfile() { return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.VmManagementCommandBase.getUserIdIfExternal().orElse(null))); }
public org.ovirt.engine.core.compat.Guid getUserIdIfExternal() { return isInternalExecution() ? null : getUserId(); }	protected java.util.Optional<org.ovirt.engine.core.compat.Guid> getUserIdIfExternal() { return isInternalExecution() ? java.util.Optional.empty() : java.util.Optional.ofNullable(getUserId()); }
protected boolean setAndValidateCpuProfile() { if ((org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getTemplateType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE)) { return true; } return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getMasterVm(), org.ovirt.engine.core.bll.AddVmTemplateCommand.getUserIdIfExternal())); }	protected boolean setAndValidateCpuProfile() { if ((org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getTemplateType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE)) { return true; } return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getMasterVm(), org.ovirt.engine.core.bll.AddVmTemplateCommand.getUserIdIfExternal().orElse(null))); }
@javax.ws.rs.PUT @javax.ws.rs.Consumes({ "application/xml", "application/json" }) public org.ovirt.engine.api.v3.types.V3Host update(org.ovirt.engine.api.v3.types.V3Host host) { host = adaptUpdate(getDelegate()::update, host); org.ovirt.engine.api.v3.helpers.V3HostHelper.addStatistics(host); return host; }	@javax.ws.rs.PUT @javax.ws.rs.Consumes({ "application/xml", "application/json" }) public org.ovirt.engine.api.v3.types.V3Host update(org.ovirt.engine.api.v3.types.V3Host host) { return adaptUpdate(getDelegate()::update, host); }
private void registerExternalProvidersTrustStore(org.apache.http.impl.client.DefaultHttpClient httpClient) { try { java.security.KeyStore trustStore = java.security.KeyStore.getInstance(java.security.KeyStore.getDefaultType()); java.io.FileInputStream inputStream = new java.io.FileInputStream(new java.io.File(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStore().getAbsolutePath())); try { trustStore.load(inputStream, org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStorePassword().toCharArray()); } finally { inputStream.close(); } org.apache.http.conn.ssl.SSLSocketFactory socketFactory = new org.apache.http.conn.ssl.SSLSocketFactory(trustStore); org.apache.http.conn.scheme.Scheme sch = new org.apache.http.conn.scheme.Scheme("https", 443, socketFactory); httpClient.getConnectionManager().getSchemeRegistry().register(sch); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.provider.network.openstack.CustomizedRESTEasyConnector.log.warn("Cannot register external providers trust store: ", ex); } }	private void registerExternalProvidersTrustStore(org.apache.http.impl.client.DefaultHttpClient httpClient) { try (java.io.FileInputStream inputStream = new java.io.FileInputStream(new java.io.File(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStore().getAbsolutePath()))) { java.security.KeyStore trustStore = java.security.KeyStore.getInstance(java.security.KeyStore.getDefaultType()); trustStore.load(inputStream, org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStorePassword().toCharArray()); org.apache.http.conn.ssl.SSLSocketFactory socketFactory = new org.apache.http.conn.ssl.SSLSocketFactory(trustStore); org.apache.http.conn.scheme.Scheme scheme = new org.apache.http.conn.scheme.Scheme("https", 443, socketFactory); httpClient.getConnectionManager().getSchemeRegistry().register(scheme); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.provider.network.openstack.CustomizedRESTEasyConnector.log.warn("Cannot register external providers trust store: {}", ex.getMessage()); org.ovirt.engine.core.bll.provider.network.openstack.CustomizedRESTEasyConnector.log.debug("Exception", ex); } }
private void registerExternalProvidersTrustStore(org.apache.http.impl.client.DefaultHttpClient httpClient) { try { java.security.KeyStore trustStore = java.security.KeyStore.getInstance(java.security.KeyStore.getDefaultType()); java.io.FileInputStream inputStream = new java.io.FileInputStream(new java.io.File(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStore().getAbsolutePath())); try { trustStore.load(inputStream, org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStorePassword().toCharArray()); } finally { inputStream.close(); } org.apache.http.conn.ssl.SSLSocketFactory socketFactory = new org.apache.http.conn.ssl.SSLSocketFactory(trustStore); org.apache.http.conn.scheme.Scheme sch = new org.apache.http.conn.scheme.Scheme("https", 443, socketFactory); httpClient.getConnectionManager().getSchemeRegistry().register(sch); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.warn("Cannot register external providers trust store: ", ex); } }	private void registerExternalProvidersTrustStore(org.apache.http.impl.client.DefaultHttpClient httpClient) { try (java.io.FileInputStream inputStream = new java.io.FileInputStream(new java.io.File(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStore().getAbsolutePath()))) { java.security.KeyStore trustStore = java.security.KeyStore.getInstance(java.security.KeyStore.getDefaultType()); trustStore.load(inputStream, org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStorePassword().toCharArray()); org.apache.http.conn.ssl.SSLSocketFactory socketFactory = new org.apache.http.conn.ssl.SSLSocketFactory(trustStore); org.apache.http.conn.scheme.Scheme scheme = new org.apache.http.conn.scheme.Scheme("https", 443, socketFactory); httpClient.getConnectionManager().getSchemeRegistry().register(scheme); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.warn("Cannot register external providers trust store: {}", ex.getMessage()); org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.debug("Exception", ex); } }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) == null) { return false; } switch (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) { case GEO_REP : org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters(getSession().getMasterVolumeId(), getSession().getId()); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters()); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(DRStep.REMOVE_TMP_SNAPSHOTS); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.GlusterStorageGeoRepSyncInternal, parameters, org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.cloneContextAndDetachFromParent()); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; case REMOVE_TMP_SNAPSHOTS : removeDRSnapshots(); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(null); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; } return true; }	@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) == null) { return false; } switch (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) { case GEO_REP : org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters(getSession().getMasterVolumeId(), getSession().getId()); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters()); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(DRStep.REMOVE_TMP_SNAPSHOTS); runInternalActionWithTasksContext(VdcActionType.GlusterStorageGeoRepSyncInternal, parameters); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; case REMOVE_TMP_SNAPSHOTS : removeDRSnapshots(); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(null); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; } return true; }
public static boolean isValidCredentials(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials credentials) throws org.ovirt.engine.core.sso.utils.AuthenticationException { return org.ovirt.engine.core.sso.utils.SsoUtils.isValidCredentials(request, credentials, false); }	public static boolean areCredentialsValid(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials credentials) throws org.ovirt.engine.core.sso.utils.AuthenticationException { return org.ovirt.engine.core.sso.utils.SsoUtils.areCredentialsValid(request, credentials, false); }
public static boolean isValidCredentials(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials credentials, boolean isInteractiveAuth) throws org.ovirt.engine.core.sso.utils.AuthenticationException { org.ovirt.engine.core.sso.utils.SsoContext ssoContext = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoContext(request); if (org.apache.commons.lang.StringUtils.isEmpty(credentials.getUsername())) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize((isInteractiveAuth ? SsoConstants.APP_ERROR_NO_USER_NAME_IN_CREDENTIALS_INTERACTIVE_AUTH : SsoConstants.APP_ERROR_NO_USER_NAME_IN_CREDENTIALS), ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } if (!(credentials.isProfileValid())) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_NO_VALID_PROFILE_IN_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } if (org.apache.commons.lang.StringUtils.isEmpty(credentials.getProfile())) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_NO_PROFILE_IN_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } return true; }	public static boolean areCredentialsValid(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials credentials, boolean isInteractiveAuth) throws org.ovirt.engine.core.sso.utils.AuthenticationException { org.ovirt.engine.core.sso.utils.SsoContext ssoContext = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoContext(request); if (org.apache.commons.lang.StringUtils.isEmpty(credentials.getUsername())) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize((isInteractiveAuth ? SsoConstants.APP_ERROR_NO_USER_NAME_IN_CREDENTIALS_INTERACTIVE_AUTH : SsoConstants.APP_ERROR_NO_USER_NAME_IN_CREDENTIALS), ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } if (!(credentials.isProfileValid())) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_NO_VALID_PROFILE_IN_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } if (org.apache.commons.lang.StringUtils.isEmpty(credentials.getProfile())) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_NO_PROFILE_IN_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } return true; }
private java.lang.String authenticateUser(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, org.ovirt.engine.core.sso.utils.Credentials userCredentials) throws java.io.IOException, javax.servlet.ServletException, org.ovirt.engine.core.sso.utils.AuthenticationException { if ((userCredentials == null) || (!(org.ovirt.engine.core.sso.utils.SsoUtils.isValidCredentials(request, userCredentials, true)))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_INVALID_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } try { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Authenticating user using credentials"); response.addCookie(new javax.servlet.http.Cookie("profile", userCredentials.getProfile())); org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(ssoContext, request, userCredentials); return (request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_REDIRECT_TO_MODULE_URI); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { throw ex; } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.error("Internal Server Error: {}", ex.getMessage()); org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex.getMessage(), ex); } }	private java.lang.String authenticateUser(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, org.ovirt.engine.core.sso.utils.Credentials userCredentials) throws java.io.IOException, javax.servlet.ServletException, org.ovirt.engine.core.sso.utils.AuthenticationException { if ((userCredentials == null) || (!(org.ovirt.engine.core.sso.utils.SsoUtils.areCredentialsValid(request, userCredentials, true)))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_INVALID_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } try { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Authenticating user using credentials"); response.addCookie(new javax.servlet.http.Cookie("profile", userCredentials.getProfile())); org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(ssoContext, request, userCredentials); return (request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_REDIRECT_TO_MODULE_URI); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { throw ex; } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.error("Internal Server Error: {}", ex.getMessage()); org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex.getMessage(), ex); } }
@java.lang.Override public org.ovirt.engine.core.sso.utils.AuthResult doAuth(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.NonInteractiveAuth.log.debug("Performing Basic Auth"); org.ovirt.engine.core.sso.utils.Credentials credentials = org.ovirt.engine.core.sso.utils.SsoUtils.getUserCredentialsFromHeader(request); org.ovirt.engine.core.sso.utils.AuthResult retVal = new org.ovirt.engine.core.sso.utils.AuthResult(); if ((credentials == null) || (!(org.ovirt.engine.core.sso.utils.SsoUtils.isValidCredentials(request, credentials)))) { retVal.setStatus(Authn.AuthResult.CREDENTIALS_INVALID); } else { retVal.setCredentials(credentials); org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(org.ovirt.engine.core.sso.utils.SsoUtils.getSsoContext(request), request, credentials); retVal.setToken(((java.lang.String) (request.getAttribute(SsoConstants.HTTP_REQ_ATTR_ACCESS_TOKEN)))); if ((retVal.getToken()) != null) { org.ovirt.engine.core.sso.utils.NonInteractiveAuth.log.debug("Basic authentication succeeded"); retVal.setStatus(Authn.AuthResult.SUCCESS); } else { retVal.setStatus(Authn.AuthResult.CREDENTIALS_INVALID); } } return retVal; }	@java.lang.Override public org.ovirt.engine.core.sso.utils.AuthResult doAuth(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.NonInteractiveAuth.log.debug("Performing Basic Auth"); org.ovirt.engine.core.sso.utils.Credentials credentials = org.ovirt.engine.core.sso.utils.SsoUtils.getUserCredentialsFromHeader(request); org.ovirt.engine.core.sso.utils.AuthResult retVal = new org.ovirt.engine.core.sso.utils.AuthResult(); if ((credentials == null) || (!(org.ovirt.engine.core.sso.utils.SsoUtils.areCredentialsValid(request, credentials)))) { retVal.setStatus(Authn.AuthResult.CREDENTIALS_INVALID); } else { retVal.setCredentials(credentials); org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(org.ovirt.engine.core.sso.utils.SsoUtils.getSsoContext(request), request, credentials); retVal.setToken(((java.lang.String) (request.getAttribute(SsoConstants.HTTP_REQ_ATTR_ACCESS_TOKEN)))); if ((retVal.getToken()) != null) { org.ovirt.engine.core.sso.utils.NonInteractiveAuth.log.debug("Basic authentication succeeded"); retVal.setStatus(Authn.AuthResult.SUCCESS); } else { retVal.setStatus(Authn.AuthResult.CREDENTIALS_INVALID); } } return retVal; }
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug("Extracting basic auth credentials from header"); org.ovirt.engine.core.sso.utils.Credentials credentials = org.ovirt.engine.core.sso.utils.SsoUtils.getUserCredentialsFromHeader(request); boolean credentialsValid = false; try { credentialsValid = (credentials != null) && (org.ovirt.engine.core.sso.utils.SsoUtils.isValidCredentials(request, credentials)); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.error("Error validating credentials: {}", ex.getMessage()); org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug("Exception", ex); } if (credentialsValid) { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug("Credentials Valid redirecting to url: {}", SsoConstants.INTERACTIVE_LOGIN_URI); org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request).setTempCredentials(credentials); response.sendRedirect(((request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_LOGIN_URI))); } else { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug("Redirecting to url: {}", SsoConstants.INTERACTIVE_LOGIN_NEXT_AUTH_URI); response.sendRedirect(((request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_LOGIN_NEXT_AUTH_URI))); } }	@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug("Extracting basic auth credentials from header"); org.ovirt.engine.core.sso.utils.Credentials credentials = org.ovirt.engine.core.sso.utils.SsoUtils.getUserCredentialsFromHeader(request); boolean credentialsValid = false; try { credentialsValid = (credentials != null) && (org.ovirt.engine.core.sso.utils.SsoUtils.areCredentialsValid(request, credentials)); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.error("Error validating credentials: {}", ex.getMessage()); org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug("Exception", ex); } if (credentialsValid) { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug("Credentials Valid redirecting to url: {}", SsoConstants.INTERACTIVE_LOGIN_URI); org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request).setTempCredentials(credentials); response.sendRedirect(((request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_LOGIN_URI))); } else { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug("Redirecting to url: {}", SsoConstants.INTERACTIVE_LOGIN_NEXT_AUTH_URI); response.sendRedirect(((request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_LOGIN_NEXT_AUTH_URI))); } }
public org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid vdsId, boolean shouldPrepareAndTeardown) { if (vdsId == null) { vdsId = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldPrepareAndTeardown) { prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } try { qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (resourceManager.runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.error("Unable to get qemu image info from storage", e); } finally { if (shouldPrepareAndTeardown) { teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } } return qemuImageInfo; }	public org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid vdsId, boolean shouldPrepareAndTeardown) { if (vdsId == null) { vdsId = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldPrepareAndTeardown) { prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } try { qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (resourceManager.runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.error("Unable to get qemu image info from storage", e); } finally { if (shouldPrepareAndTeardown) { try { teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.warn("Unable to tear down image", e); } } } return qemuImageInfo; }
public java.lang.Long determineImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.Image sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid dstDomain, org.ovirt.engine.core.compat.Guid imageGroupID) { if (isInitialSizeSupportedForFormat(destFormat, dstDomain)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromStorage = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(storagePoolId, srcDomain, imageGroupID, sourceImage.getId()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(imageInfoFromStorage.getActualSizeInBytes()); } return null; }	public java.lang.Long determineImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.Image sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid dstDomain, org.ovirt.engine.core.compat.Guid imageGroupID) { if (isInitialSizeSupportedForFormat(destFormat, dstDomain)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromStorage = getVolumeInfoFromVdsm(storagePoolId, srcDomain, imageGroupID, sourceImage.getId()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(sourceImage.getVolumeFormat(), imageInfoFromStorage.getActualSizeInBytes()); } return null; }
public java.lang.Long determineTotalImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid dstDomain) { if (isInitialSizeSupportedForFormat(destFormat, dstDomain)) { double totalSizeForClonedDisk = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getTotalActualSizeOfDisk(sourceImage, storageDomainDao.get(dstDomain).getStorageStaticData()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(java.lang.Double.valueOf(totalSizeForClonedDisk).longValue()); } return null; }	public java.lang.Long determineTotalImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid dstDomain) { if (isInitialSizeSupportedForFormat(destFormat, dstDomain)) { double totalSizeForClonedDisk = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getTotalActualSizeOfDisk(sourceImage, storageDomainDao.get(dstDomain).getStorageStaticData()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(sourceImage.getVolumeFormat(), java.lang.Double.valueOf(totalSizeForClonedDisk).longValue()); } return null; }
public static java.lang.Long determineTotalImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid srcDomain) { if (org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isInitialSizeSupportedForFormat(destFormat, srcDomain)) { double totalSizeForClonedDisk = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getTotalActualSizeOfDisk(sourceImage, org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(srcDomain).getStorageStaticData()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(sourceImage.getVolumeFormat(), java.lang.Double.valueOf(totalSizeForClonedDisk).longValue()); } return null; }	public java.lang.Long determineTotalImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid dstDomain) { if (isInitialSizeSupportedForFormat(destFormat, dstDomain)) { double totalSizeForClonedDisk = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getTotalActualSizeOfDisk(sourceImage, storageDomainDao.get(srcDomain).getStorageStaticData()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(sourceImage.getVolumeFormat(), java.lang.Double.valueOf(totalSizeForClonedDisk).longValue()); } return null; }
private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase createEvent() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVds(host); return event; }	private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase createEvent() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVdsName(host.getName()); return event; }
private void verifyAuditLoggableBaseFilledProperly(org.ovirt.engine.core.bll.network.NetworkConfigurator underTest, org.ovirt.engine.core.common.AuditLogType auditLogType) { try { underTest.createManagementNetworkIfRequired(); } catch (org.ovirt.engine.core.bll.network.NetworkConfigurator.NetworkConfiguratorException e) { verify(auditLogDirector).log(auditLogableBaseArgumentCaptor.capture(), eq(auditLogType), anyString()); final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase capturedEvent = auditLogableBaseArgumentCaptor.getValue(); assertThat(capturedEvent.getVdsName(), is(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.HOST_NAME)); return; } fail("The test should lead to NetworkConfiguratorException"); }	private java.util.Map<java.lang.String, java.lang.String> verifyAuditLoggableBaseFilledProperly(org.ovirt.engine.core.bll.network.NetworkConfigurator underTest, org.ovirt.engine.core.common.AuditLogType auditLogType) { try { underTest.createManagementNetworkIfRequired(); } catch (org.ovirt.engine.core.bll.network.NetworkConfigurator.NetworkConfiguratorException e) { verify(auditLogDirector).log(auditLogableBaseArgumentCaptor.capture(), eq(auditLogType), anyString()); final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase capturedEvent = auditLogableBaseArgumentCaptor.getValue(); assertThat(capturedEvent.getVdsName(), is(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.HOST_NAME)); return capturedEvent.getCustomValues(); } fail("The test should lead to NetworkConfiguratorException"); return null; }
@org.junit.Test public void testCreateManagementNetworkIfRequiredFailsOnDifferentVlanId() { host.setActiveNic(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_NAME); nic.setVlanId(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_VLAN_ID); managementNetwork.setVlanId(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.MANAGMENT_NETWORK_VLAN_ID); try { underTest.createManagementNetworkIfRequired(); } catch (org.ovirt.engine.core.bll.network.NetworkConfigurator.NetworkConfiguratorException e) { verify(auditLogDirector).log(auditLogableBaseArgumentCaptor.capture(), same(AuditLogType.VLAN_ID_MISMATCH_FOR_MANAGEMENT_NETWORK_CONFIGURATION), anyString()); final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase capturedEvent = auditLogableBaseArgumentCaptor.getValue(); assertThat(capturedEvent.getVdsName(), is(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.HOST_NAME)); final java.util.Map<java.lang.String, java.lang.String> capturedCustomValues = capturedEvent.getCustomValues(); assertThat(capturedCustomValues, hasEntry("vlanid", java.lang.String.valueOf(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_VLAN_ID))); assertThat(capturedCustomValues, hasEntry("mgmtvlanid", java.lang.String.valueOf(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.MANAGMENT_NETWORK_VLAN_ID))); assertThat(capturedCustomValues, hasEntry("interfacename", org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_NAME)); return; } fail("The test should lead to NetworkConfiguratorException"); }	@org.junit.Test public void testCreateManagementNetworkIfRequiredFailsOnDifferentVlanId() { host.setActiveNic(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_NAME); nic.setVlanId(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_VLAN_ID); managementNetwork.setVlanId(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.MANAGMENT_NETWORK_VLAN_ID); final java.util.Map<java.lang.String, java.lang.String> capturedCustomValues = verifyAuditLoggableBaseFilledProperly(underTest, AuditLogType.VLAN_ID_MISMATCH_FOR_MANAGEMENT_NETWORK_CONFIGURATION); assertThat(capturedCustomValues, allOf(hasEntry("vlanid", java.lang.String.valueOf(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_VLAN_ID)), hasEntry("mgmtvlanid", java.lang.String.valueOf(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.MANAGMENT_NETWORK_VLAN_ID)), hasEntry("interfacename", org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_NAME))); }
public static <T> java.util.List<java.lang.String> validateInputs(java.util.List<java.lang.Class<?>> validationGroupList, T parameters) { java.util.List<java.lang.String> messages = java.util.Collections.emptyList(); java.util.Set<javax.validation.ConstraintViolation<T>> violations = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, validationGroupList.toArray(new java.lang.Class<?>[validationGroupList.size()])); if (!(violations.isEmpty())) { messages = new java.util.ArrayList(violations.size()); for (javax.validation.ConstraintViolation<T> constraintViolation : violations) { messages.add(constraintViolation.getMessage()); javax.validation.metadata.ConstraintDescriptor<?> constraintDescriptor = constraintViolation.getConstraintDescriptor(); if (constraintDescriptor != null) { java.util.Map<java.lang.String, java.lang.Object> violationAttributes = constraintDescriptor.getAttributes(); for (java.util.Map.Entry violationAttribute : violationAttributes.entrySet()) { java.lang.String message = java.lang.String.format("$%s %s", violationAttribute.getKey(), violationAttribute.getValue()); messages.add(message); } } if ((constraintViolation.getPropertyPath()) != null) { messages.add(EngineMessage.ACTION_TYPE_FAILED_ATTRIBUTE_PATH.name()); messages.add(org.ovirt.engine.core.common.utils.ValidationUtils.createSetVariableString("path", constraintViolation.getPropertyPath())); } messages.add(org.ovirt.engine.core.common.utils.ValidationUtils.createSetVariableString("validatedValue", constraintViolation.getInvalidValue())); } } return messages; }	public static <T> java.util.List<java.lang.String> validateInputs(java.util.List<java.lang.Class<?>> validationGroupList, T parameters) { java.util.List<java.lang.String> messages = java.util.Collections.emptyList(); java.util.Set<javax.validation.ConstraintViolation<T>> violations = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, validationGroupList.toArray(new java.lang.Class<?>[validationGroupList.size()])); if (!(violations.isEmpty())) { messages = new java.util.ArrayList(violations.size()); for (javax.validation.ConstraintViolation<T> constraintViolation : violations) { messages.add(constraintViolation.getMessage()); javax.validation.metadata.ConstraintDescriptor<?> constraintDescriptor = constraintViolation.getConstraintDescriptor(); if (constraintDescriptor != null) { java.util.Map<java.lang.String, java.lang.Object> violationAttributes = constraintDescriptor.getAttributes(); for (java.util.Map.Entry violationAttribute : violationAttributes.entrySet()) { java.lang.String propertyName = violationAttribute.getKey().toString(); java.lang.Object value = violationAttribute.getValue(); messages.add(org.ovirt.engine.core.common.utils.ValidationUtils.createSetVariableString(propertyName, value)); } } if ((constraintViolation.getPropertyPath()) != null) { messages.add(EngineMessage.ACTION_TYPE_FAILED_ATTRIBUTE_PATH.name()); messages.add(org.ovirt.engine.core.common.utils.ValidationUtils.createSetVariableString("path", constraintViolation.getPropertyPath())); } messages.add(org.ovirt.engine.core.common.utils.ValidationUtils.createSetVariableString("validatedValue", constraintViolation.getInvalidValue())); } } return messages; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { setIsFingerprintVerified(false); if (((getGlusterHostAddress().getEntity()) == null) || ((getGlusterHostAddress().getEntity().trim().length()) == 0)) { getGlusterHostFingerprint().setEntity(""); return; } fetchFingerprint(getGlusterHostAddress().getEntity(), 22); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { setIsFingerprintVerified(false); if (((getGlusterHostAddress().getEntity()) == null) || ((getGlusterHostAddress().getEntity().trim().length()) == 0)) { getGlusterHostFingerprint().setEntity(""); return; } fetchFingerprint(getGlusterHostAddress().getEntity(), VdsStatic.DEFAULT_SSH_PORT); }
@java.lang.Override public void sendMessage(byte[] message) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { try { waitForConnect(); } finally { org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message msg = new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().send().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_DESTINATION, this.getRequestQueue()).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withContent(message); send(addCorrelationId(msg).build()); } }	@java.lang.Override public void sendMessage(byte[] message) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { try { waitForConnect(); } finally { send(new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().send().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_DESTINATION, this.getRequestQueue()).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withCorrelationId().withContent(message).build()); } }
@java.lang.Override public void sendMessage(byte[] message) { org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message msg = new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().send().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_DESTINATION, this.getRequestQueue()).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withContent(message); send(addCorrelationId(msg).build()); }	@java.lang.Override public void sendMessage(byte[] message) { send(new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().send().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_DESTINATION, this.getRequestQueue()).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withCorrelationId().withContent(message).build()); }
@java.lang.Override protected void executeCommand() { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_VM_NAME, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()); addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_MEMORY_SIZE_MB, java.lang.String.valueOf(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getMemorySizeMb())); final org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.HotUnplugMemory, new org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.Params(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getRunOnVds(), getDeviceToHotUnplug())); if (!(vdsReturnValue.getSucceeded())) { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_ERROR_MESSAGE, vdsReturnValue.getVdsError().getMessage()); setReturnValueFailure(vdsReturnValue); return; } final org.ovirt.engine.core.common.businessentities.VmStatic nextRunConfigurationStatic = runInternalQuery(VdcQueryType.GetVmNextRunConfiguration, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId())).<org.ovirt.engine.core.common.businessentities.VM>getReturnValue().getStaticData(); final int finalMemorySize = (nextRunConfigurationStatic.getMemSizeMb()) - (org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getMemorySizeMb()); if (finalMemorySize > 0) { updateVm(nextRunConfigurationStatic, finalMemorySize); } org.ovirt.engine.core.bll.HotUnplugMemoryCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_VM_NAME, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_MEMORY_SIZE_MB, java.lang.String.valueOf(getUnpluggedDeviceSize())); addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_DEVICE_ID, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getDeviceId().toString()); final org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.HotUnplugMemory, new org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.Params(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getRunOnVds(), getDeviceToHotUnplug())); if (!(vdsReturnValue.getSucceeded())) { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_ERROR_MESSAGE, vdsReturnValue.getVdsError().getMessage()); setReturnValueFailure(vdsReturnValue); return; } if (((org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMemSizeMb()) - (getUnpluggedDeviceSize())) >= (org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMinAllocatedMem())) { updateVm(); } org.ovirt.engine.core.bll.HotUnplugMemoryCommand.setSucceeded(true); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if ((org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NEEDS_TO_BE_UP, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("vmId", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("vmName", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("currentVmState", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getStatus())); } if ((getDeviceToHotUnplug()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_MEMORY_DEVICE_NOT_FOUND, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("memorySize", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getMemorySizeMb()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("vmId", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("vmName", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getName())); } return true; }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (!(org.ovirt.engine.core.common.FeatureSupported.hotUnplugMemory(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getCompatibilityVersion(), org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getClusterArch()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_MEMORY_HOT_UNPLUG_NOT_SUPPORTED_FOR_COMPAT_VERSION_AND_ARCH, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("compatibilityVersion", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getCompatibilityVersion()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("architecture", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getClusterArch())); } if ((org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_UP); } if ((getDeviceToHotUnplug()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_MEMORY_DEVICE_DOESNT_EXIST, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("deviceId", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getDeviceId())); } return true; }
private void updateVm(org.ovirt.engine.core.common.businessentities.VmStatic nextRunConfigurationStatic, int finalMemorySize) { nextRunConfigurationStatic.setMemSizeMb(finalMemorySize); final org.ovirt.engine.core.common.action.VmManagementParametersBase updateVmParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(nextRunConfigurationStatic); updateVmParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); runInternalAction(VdcActionType.UpdateVm, updateVmParams); }	private void updateVm() { updateNextRunConfiguration(); updateCurrentConfiguration(); }
public void setReturnValueFailure(org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValueFailure) { org.ovirt.engine.core.bll.HotUnplugMemoryCommand.setSucceeded(false); final org.ovirt.engine.core.common.errors.EngineFault engineFault = new org.ovirt.engine.core.common.errors.EngineFault(); engineFault.setError(returnValueFailure.getVdsError().getCode()); engineFault.setMessage(returnValueFailure.getVdsError().getMessage()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getReturnValue().setFault(engineFault); }	public void setReturnValueFailure(org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValueFailure) { final org.ovirt.engine.core.common.errors.EngineFault engineFault = new org.ovirt.engine.core.common.errors.EngineFault(); engineFault.setError(returnValueFailure.getVdsError().getCode()); engineFault.setMessage(returnValueFailure.getVdsError().getMessage()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getReturnValue().setFault(engineFault); }
java.lang.String ACTION_TYPE_FAILED_VM_NEEDS_TO_BE_UP();	java.lang.String ACTION_TYPE_FAILED_MEMORY_TOO_OLD();
java.lang.String ACTION_TYPE_FAILED_VM_MEMORY_DEVICE_NOT_FOUND();	java.lang.String ACTION_TYPE_FAILED_VM_MEMORY_DEVICE_DOESNT_EXIST();
public static java.lang.Integer getSizeOfMemoryDeviceMb(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if ((memoryDevice.getType()) != (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) { throw new java.lang.RuntimeException(java.lang.String.format("Memory device expected but device %s passed of type %s", memoryDevice, memoryDevice.getType())); } return ((java.lang.Integer) (memoryDevice.getSpecParams().get(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE))); }	public static java.lang.Integer getSizeOfMemoryDeviceMb(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if ((memoryDevice.getType()) != (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) { throw new java.lang.RuntimeException(((("Memory device expected but device " + memoryDevice) + " passed of type ") + (memoryDevice.getType()))); } return ((java.lang.Integer) (memoryDevice.getSpecParams().get(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE))); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { return java.util.Collections.singletonList(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getVmId(), org.ovirt.engine.core.common.VdcObjectType.VM, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getActionType().getActionGroup())); }	private org.ovirt.engine.core.common.businessentities.VmStatic getNextRunConfiguration() { final org.ovirt.engine.core.common.businessentities.Snapshot snapshot = snapshotDao.get(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId(), Snapshot.SnapshotType.NEXT_RUN); if (snapshot == null) { return null; } final org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); return vm.getStaticData(); }
protected org.ovirt.engine.core.common.businessentities.VmDevice getDeviceToHotUnplug() { if ((deviceToHotUnplug) == null) { deviceToHotUnplug = computeDeviceToHotUnplug(); } return deviceToHotUnplug; }	protected org.ovirt.engine.core.common.businessentities.VmDevice getDeviceToHotUnplug() { if ((deviceToHotUnplug) == null) { deviceToHotUnplug = vmDeviceDao.get(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getDeviceId(), org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId())); } return deviceToHotUnplug; }
@java.lang.Override protected void init() { super.init(); setVmId(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getVmId()); }	private void updateNextRunConfiguration() { final org.ovirt.engine.core.common.businessentities.VmStatic nextRunConfigurationStatic = getNextRunConfiguration(); if (nextRunConfigurationStatic == null) { return; } final int newMemorySize = (nextRunConfigurationStatic.getMemSizeMb()) - (getUnpluggedDeviceSize()); if (newMemorySize <= 0) { return; } if ((org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMemSizeMb()) != (nextRunConfigurationStatic.getMemSizeMb())) { return; } nextRunConfigurationStatic.setMemSizeMb(newMemorySize); if (newMemorySize < (nextRunConfigurationStatic.getMinAllocatedMem())) { nextRunConfigurationStatic.setMinAllocatedMem(newMemorySize); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { vmHandler.createNextRunSnapshot(getVm(), nextRunConfigurationStatic, null, getCompensationContext()); return null; }); }
private org.ovirt.engine.core.common.businessentities.VmDevice computeDeviceToHotUnplug() { final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> memoryDevices = vmDeviceDao.getVmDeviceByVmIdAndType(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId(), VmDeviceGeneralType.MEMORY); final java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmDevice> reversedMemoryDevices = new java.util.ArrayList(memoryDevices); java.util.Collections.reverse(reversedMemoryDevices); return memoryDevices.stream().filter(( device) -> java.util.Objects.equals(getParameters().getMemorySizeMb(), org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(device))).findFirst().orElse(null); }	protected int getUnpluggedDeviceSize() { return org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(getDeviceToHotUnplug()); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { final java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> result = new java.util.HashMap(super.getSharedLocks()); result.put(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_BEING_UPDATED).with("vmName", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()))); return result; }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { final java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> result = new java.util.HashMap(super.getExclusiveLocks()); result.put(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getDeviceId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_DEVICE, new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_MEMORY_DEVICE_IS_BEING_HOT_UNPLUGGED).with("deviceId", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getDeviceId().toString()).with("vmId", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getVmId().toString()))); return result; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getReturnValue().getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.MEMORY_HOT_UNPLUGGED : org.ovirt.engine.core.common.AuditLogType.MEMORY_HOT_UNPLUG_FAILED; }	@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getReturnValue().getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.MEMORY_HOT_UNPLUG_SUCCESSFULLY_REQUESTED : org.ovirt.engine.core.common.AuditLogType.MEMORY_HOT_UNPLUG_FAILED; }
private void setQcowCompat(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid volumeId, org.ovirt.engine.core.common.businessentities.storage.DiskImage newDiskImage) { if (newDiskImage.getVolumeFormat().equals(VolumeFormat.COW)) { newDiskImage.setQcowCompat(QcowCompat.QCOW2_V2); org.ovirt.engine.core.common.businessentities.StoragePool sp = storagePoolDao.get(storagePoolId); if ((sp != null) && (org.ovirt.engine.core.common.FeatureSupported.qcowCompatSupported(sp.getCompatibilityVersion()))) { org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(storagePoolId, storageDomainId, diskId, volumeId, null, true); if (qemuImageInfo != null) { newDiskImage.setQcowCompat(qemuImageInfo.getQcowCompat()); } } } }	private boolean fetchQcowCompat(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid volumeId, org.ovirt.engine.core.common.businessentities.storage.DiskImage newDiskImage) { if (newDiskImage.getVolumeFormat().equals(VolumeFormat.COW)) { org.ovirt.engine.core.common.businessentities.StoragePool sp = storagePoolDao.get(storagePoolId); org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if ((sp != null) && (org.ovirt.engine.core.common.FeatureSupported.qcowCompatSupported(sp.getCompatibilityVersion()))) { qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(storagePoolId, storageDomainId, diskId, volumeId, null, true); if (qemuImageInfo == null) { org.ovirt.engine.core.bll.storage.disk.image.GetUnregisteredDiskQuery.getQueryReturnValue().setExceptionString("Failed to fetch qemu image info from storage"); return false; } newDiskImage.setQcowCompat(qemuImageInfo.getQcowCompat()); } } return true; }
private void setQcowCompat(org.ovirt.engine.core.common.businessentities.storage.DiskImage newDiskImage) { if (newDiskImage.getVolumeFormat().equals(VolumeFormat.COW)) { try { setQcowCompatByQemuImageInfo(newDiskImage.getStoragePoolId(), newDiskImage.getId(), newDiskImage.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getStorageDomainId(), newDiskImage); imageDao.update(newDiskImage.getImage()); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Unable to update the image info for image '{}' (image group: '{}') on domain '{}'", newDiskImage.getImageId(), newDiskImage.getId(), org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getStorageDomainId()); } } }	private void fetchQcowCompat() { if (((org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getDiskImage().getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) && (org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getDiskImage().getVolumeFormat().equals(VolumeFormat.COW))) { org.ovirt.engine.core.common.businessentities.storage.DiskImage newDiskImage = org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getDiskImage(); try { setQcowCompat(newDiskImage.getImage(), newDiskImage.getStoragePoolId(), newDiskImage.getId(), newDiskImage.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getStorageDomainId(), null); imageDao.update(newDiskImage.getImage()); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Unable to update the image info for image '{}' (image group: '{}') on domain '{}'", newDiskImage.getImageId(), newDiskImage.getId(), org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getStorageDomainId()); } } }
protected org.ovirt.engine.core.common.businessentities.VM setUpVm(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = control.createMock(org.ovirt.engine.core.common.businessentities.VmStatic.class); expect(vmStatic.getId()).andReturn(id).anyTimes(); org.ovirt.engine.core.common.businessentities.VM vm = control.createMock(org.ovirt.engine.core.common.businessentities.VM.class); expect(vm.getId()).andReturn(id).anyTimes(); expect(vm.getStaticData()).andReturn(vmStatic).anyTimes(); return vm; }	protected org.ovirt.engine.core.common.businessentities.VM setUpVm(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = mock(org.ovirt.engine.core.common.businessentities.VmStatic.class); when(vmStatic.getId()).thenReturn(id); org.ovirt.engine.core.common.businessentities.VM vm = mock(org.ovirt.engine.core.common.businessentities.VM.class); when(vm.getId()).thenReturn(id); when(vm.getStaticData()).thenReturn(vmStatic); return vm; }
private org.ovirt.engine.ui.frontend.server.dashboard.Dashboard populateUtilizationCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Dashboard dashboard = getDashboard(); long endTime = java.lang.System.currentTimeMillis(); dashboardCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_KEY, dashboard, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_CACHE_UPDATE_INTERVAL, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Dashboard utilization cache updated in {}ms", (endTime - startTime)); return dashboard; }	private org.ovirt.engine.ui.frontend.server.dashboard.Dashboard populateUtilizationCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Dashboard dashboard = getDashboard(); long endTime = java.lang.System.currentTimeMillis(); if (enableBackgroundCacheUpdate) { dashboardCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_KEY, dashboard); } else { dashboardCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_KEY, dashboard, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_CACHE_UPDATE_INTERVAL, java.util.concurrent.TimeUnit.SECONDS); } org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Dashboard utilization cache updated in {}ms", (endTime - startTime)); return dashboard; }
private org.ovirt.engine.ui.frontend.server.dashboard.Inventory populateInventoryCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Inventory inventory = lookupInventory(); long endTime = java.lang.System.currentTimeMillis(); inventoryCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_KEY, inventory, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_CACHE_UPDATE_INTERVAL, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Dashboard inventoy cache updated in {}ms", (endTime - startTime)); return inventory; }	private org.ovirt.engine.ui.frontend.server.dashboard.Inventory populateInventoryCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Inventory inventory = lookupInventory(); long endTime = java.lang.System.currentTimeMillis(); if (enableBackgroundCacheUpdate) { inventoryCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_KEY, inventory); } else { inventoryCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_KEY, inventory, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_CACHE_UPDATE_INTERVAL, java.util.concurrent.TimeUnit.SECONDS); } org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Dashboard inventoy cache updated in {}ms", (endTime - startTime)); return inventory; }
private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase createAuditLog(final org.ovirt.engine.core.common.businessentities.network.VmNic iface) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.setVmId(iface.getVmId()); logable.addCustomValue("MACAddr", iface.getMacAddress()); logable.addCustomValue("IfaceName", iface.getName()); return logable; }	private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase createAuditLog(final org.ovirt.engine.core.common.businessentities.network.VmNic iface) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("MACAddr", iface.getMacAddress()); logable.addCustomValue("IfaceName", iface.getName()); return logable; }
@java.lang.Override public void init(final T model) { super.init(model); model.getPropertyChangedEvent().addListener(( ev, sender, args) -> { org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel model1 = ((org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel) (sender)); java.lang.String propertyName = args.propertyName; if ("Message".equals(propertyName)) { getView().setMessageLabel(model1.getMessage()); } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleSubnetVisibility(model.getExport().getEntity()); model.getExport().getEntityChangedEvent().addListener(( ev, sender, args) -> getView().toggleSubnetVisibility(model.getExport().getEntity())); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleProfilesVisibility(model.getProfiles().getIsAvailable()); model.getProfiles().getPropertyChangedEvent().addListener(( ev, sender, args) -> { if ("IsAvailable".equals(args.propertyName)) { getView().toggleProfilesVisibility(model.getProfiles().getIsAvailable()); } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().setCommand(model.getAddQosCommand()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().addClickHandler(( event) -> getView().getQosButton().getCommand().execute()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().addMtuEditor(); }	@java.lang.Override public void init(final T model) { super.init(model); model.getPropertyChangedEvent().addListener(( ev, sender, args) -> { org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel senderModel = ((org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel) (sender)); java.lang.String propertyName = args.propertyName; if ("Message".equals(propertyName)) { getView().setMessageLabel(senderModel.getMessage()); } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleSubnetVisibility(model.getExport().getEntity()); model.getExport().getEntityChangedEvent().addListener(( ev, sender, args) -> getView().toggleSubnetVisibility(model.getExport().getEntity())); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleProfilesVisibility(model.getProfiles().getIsAvailable()); model.getProfiles().getPropertyChangedEvent().addListener(( ev, sender, args) -> { if ("IsAvailable".equals(args.propertyName)) { getView().toggleProfilesVisibility(model.getProfiles().getIsAvailable()); } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().setCommand(model.getAddQosCommand()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().addClickHandler(( event) -> getView().getQosButton().getCommand().execute()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().addMtuEditor(); }
public void addMenuItem(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { final com.google.gwt.user.client.ui.MenuItem menuItem = new com.google.gwt.user.client.ui.MenuItem(buttonDef.getText(), ((com.google.gwt.user.client.Command) (() -> { menuPanelPopup.asPopupPanel().hide(); buttonDef.onClick(null); }))); menuItem.setEnabled(buttonDef.isEnabled(null)); buttonDef.addInitializeHandler(( event) -> menuItem.setEnabled(buttonDef.isEnabled(null))); menuPanelPopup.getMenuBar().addItem(menuItem); }	public void addMenuItem(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { final com.google.gwt.user.client.ui.MenuItem menuItem = new com.google.gwt.user.client.ui.MenuItem(buttonDef.getText(), () -> { menuPanelPopup.asPopupPanel().hide(); buttonDef.onClick(null); }); menuItem.setEnabled(buttonDef.isEnabled(null)); buttonDef.addInitializeHandler(( event) -> menuItem.setEnabled(buttonDef.isEnabled(null))); menuPanelPopup.getMenuBar().addItem(menuItem); }
public boolean invokeAsString(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, JsFunction.RESULT_TYPE_STRING, ((org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ResultHandler<java.lang.String>) (( result) -> { this.resultValue = result; this.resultType = JsFunction.RESULT_TYPE_STRING; })), errorHandler); }	public boolean invokeAsString(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, JsFunction.RESULT_TYPE_STRING, (java.lang.String result) -> { this.resultValue = result; this.resultType = JsFunction.RESULT_TYPE_STRING; }, errorHandler); }
public boolean invokeAsBoolean(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, JsFunction.RESULT_TYPE_BOOLEAN, ((org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ResultHandler<java.lang.Boolean>) (( result) -> { this.resultValue = result; this.resultType = JsFunction.RESULT_TYPE_BOOLEAN; })), errorHandler); }	public boolean invokeAsBoolean(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, JsFunction.RESULT_TYPE_BOOLEAN, (java.lang.Boolean result) -> { this.resultValue = result; this.resultType = JsFunction.RESULT_TYPE_BOOLEAN; }, errorHandler); }
public boolean invokeAsNumber(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, JsFunction.RESULT_TYPE_NUMBER, ((org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ResultHandler<java.lang.Double>) (( result) -> { this.resultValue = result; this.resultType = JsFunction.RESULT_TYPE_NUMBER; })), errorHandler); }	public boolean invokeAsNumber(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, JsFunction.RESULT_TYPE_NUMBER, (java.lang.Double result) -> { this.resultValue = result; this.resultType = JsFunction.RESULT_TYPE_NUMBER; }, errorHandler); }
@java.lang.Override protected void fillMenuBar(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { if (used) { menuBar.addItem("Remove Function", ((com.google.gwt.user.client.Command) (() -> { org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.model.removeFunction(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.policyUnit); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.menuPopup.hide(); }))); } else { menuBar.addItem("Add Function", ((com.google.gwt.user.client.Command) (() -> { org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.model.addFunction(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.policyUnit); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.menuPopup.hide(); }))); } }	@java.lang.Override protected void fillMenuBar(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { if (used) { menuBar.addItem("Remove Function", () -> { org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.model.removeFunction(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.policyUnit); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.menuPopup.hide(); }); } else { menuBar.addItem("Add Function", () -> { org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.model.addFunction(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.policyUnit); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.menuPopup.hide(); }); } }
private org.ovirt.engine.ui.common.widget.MenuBar menuFor(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item) { org.ovirt.engine.ui.common.widget.MenuBar menu = rootMenu(item); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> operationMap = item.getSetupModel().commandsFor(item); for (final java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> entry : operationMap.entrySet()) { final java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = entry.getValue(); if (entry.getKey().isUnary()) { assert (commands.size()) == 1 : "Got a NetworkCommand List with more than one Unary Operation"; menu.addItem(entry.getKey().getVerb(item), ((com.google.gwt.user.client.Command) (() -> executeCommand(entry.getKey(), commands.get(0))))); } else { java.util.Collections.sort(commands, java.util.Comparator.comparing(NetworkCommand::getName, new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator())); org.ovirt.engine.ui.common.widget.MenuBar subMenu = subMenu(); for (final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand command : commands) { subMenu.addItem(new com.google.gwt.user.client.ui.MenuItem(command.getName(), ((com.google.gwt.user.client.Command) (() -> executeCommand(entry.getKey(), command))))); } menu.addItem(entry.getKey().getVerb(item), subMenu); } } return menu; }	private org.ovirt.engine.ui.common.widget.MenuBar menuFor(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item) { org.ovirt.engine.ui.common.widget.MenuBar menu = rootMenu(item); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> operationMap = item.getSetupModel().commandsFor(item); for (final java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> entry : operationMap.entrySet()) { final java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = entry.getValue(); if (entry.getKey().isUnary()) { assert (commands.size()) == 1 : "Got a NetworkCommand List with more than one Unary Operation"; menu.addItem(entry.getKey().getVerb(item), () -> executeCommand(entry.getKey(), commands.get(0))); } else { java.util.Collections.sort(commands, java.util.Comparator.comparing(NetworkCommand::getName, new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator())); org.ovirt.engine.ui.common.widget.MenuBar subMenu = subMenu(); for (final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand command : commands) { subMenu.addItem(new com.google.gwt.user.client.ui.MenuItem(command.getName(), () -> executeCommand(entry.getKey(), command))); } menu.addItem(entry.getKey().getVerb(item), subMenu); } } return menu; }
protected void fillMenuBar(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { if (used) { menuBar.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.removeFilter(), ((com.google.gwt.user.client.Command) (() -> { model.removeFilter(policyUnit); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); }))); } else { menuBar.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.addFilter(), ((com.google.gwt.user.client.Command) (() -> { model.addFilter(policyUnit, used, 0); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); }))); } }	protected void fillMenuBar(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { if (used) { menuBar.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.removeFilter(), () -> { model.removeFilter(policyUnit); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); }); } else { menuBar.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.addFilter(), () -> { model.addFilter(policyUnit, used, 0); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); }); } }
protected void addSubMenu(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { org.ovirt.engine.ui.common.widget.MenuBar subMenu = new org.ovirt.engine.ui.common.widget.MenuBar(true); if ((position) != 0) { subMenu.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.noPositionFilter(), ((com.google.gwt.user.client.Command) (() -> { model.addFilter(policyUnit, used, 0); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); }))); } if ((position) >= 0) { subMenu.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.firstFilter(), ((com.google.gwt.user.client.Command) (() -> { model.addFilter(policyUnit, used, (-1)); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); }))); } if ((position) <= 0) { subMenu.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.lastFilter(), ((com.google.gwt.user.client.Command) (() -> { model.addFilter(policyUnit, used, 1); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); }))); } menuBar.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.position(), subMenu); }	protected void addSubMenu(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { org.ovirt.engine.ui.common.widget.MenuBar subMenu = new org.ovirt.engine.ui.common.widget.MenuBar(true); if ((position) != 0) { subMenu.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.noPositionFilter(), () -> { model.addFilter(policyUnit, used, 0); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); }); } if ((position) >= 0) { subMenu.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.firstFilter(), () -> { model.addFilter(policyUnit, used, (-1)); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); }); } if ((position) <= 0) { subMenu.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.lastFilter(), () -> { model.addFilter(policyUnit, used, 1); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); }); } menuBar.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.position(), subMenu); }
private com.google.gwt.user.client.ui.PushButton createButton(com.google.gwt.resources.client.ImageResource imageResource) { com.google.gwt.user.client.ui.PushButton result = new com.google.gwt.user.client.ui.PushButton(new com.google.gwt.user.client.ui.Image(imageResource), ((com.google.gwt.event.dom.client.ClickHandler) (( event) -> toggleVisibleWestPanel()))); result.setVisible(false); result.addStyleName(style.sliderButton()); result.addStyleName("tslp_sliderButton_pfly_fix"); return result; }	private com.google.gwt.user.client.ui.PushButton createButton(com.google.gwt.resources.client.ImageResource imageResource) { com.google.gwt.user.client.ui.PushButton result = new com.google.gwt.user.client.ui.PushButton(new com.google.gwt.user.client.ui.Image(imageResource), (com.google.gwt.event.dom.client.ClickEvent event) -> toggleVisibleWestPanel()); result.setVisible(false); result.addStyleName(style.sliderButton()); result.addStyleName("tslp_sliderButton_pfly_fix"); return result; }
@java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { eventHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(( event1) -> { com.google.gwt.dom.client.NativeEvent nativeEvent = event1.getNativeEvent(); if ((((nativeEvent.getKeyCode()) == KeyCodes.KEY_ENTER) && (((event1.getTypeInt()) == Event.ONKEYPRESS) || ((event1.getTypeInt()) == Event.ONKEYDOWN))) && (!(event1.isCanceled()))) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); event1.cancel(); if ((event1.getTypeInt()) == Event.ONKEYDOWN) { enterPressed(); } } }); }	@java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { eventHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(( e) -> { com.google.gwt.dom.client.NativeEvent nativeEvent = e.getNativeEvent(); if ((((nativeEvent.getKeyCode()) == KeyCodes.KEY_ENTER) && (((e.getTypeInt()) == Event.ONKEYPRESS) || ((e.getTypeInt()) == Event.ONKEYDOWN))) && (!(e.isCanceled()))) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); e.cancel(); if ((e.getTypeInt()) == Event.ONKEYDOWN) { enterPressed(); } } }); }
private org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionsMenu getRefreshOptionsMenu() { org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionsMenu refreshOptionsMenu = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionsMenu(true); refreshOptionsMenu.setStylePrimaryName(style.refreshRateMenu()); com.google.gwt.user.client.ui.MenuItem title = new com.google.gwt.user.client.ui.MenuItem(org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.constants.refreshRate(), ((com.google.gwt.user.client.Command) (() -> { }))); title.setEnabled(false); title.setStylePrimaryName(style.refreshMenuTitle()); refreshOptionsMenu.addItem(title); java.util.Set<java.lang.Integer> refreshRates = org.ovirt.engine.ui.common.widget.refresh.AbstractRefreshManager.getRefreshRates(); int itemIndex = 0; for (java.lang.Integer refreshRate : refreshRates) { org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionCommand command = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionCommand(); org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionMenuItem refreshRateOption = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionMenuItem(refreshRate, command); refreshRateOption.setStylePrimaryName(style.refreshRateOption()); command.setMenuItem(refreshRateOption); refreshOptionsMenu.addItem(refreshRateOption); if (itemIndex != ((refreshRates.size()) - 1)) { com.google.gwt.user.client.ui.MenuItemSeparator separator = refreshOptionsMenu.addSeparator(); separator.getElement().getStyle().setBackgroundColor("#E0E9F2"); } itemIndex++; } return refreshOptionsMenu; }	private org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionsMenu getRefreshOptionsMenu() { org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionsMenu refreshOptionsMenu = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionsMenu(true); refreshOptionsMenu.setStylePrimaryName(style.refreshRateMenu()); com.google.gwt.user.client.ui.MenuItem title = new com.google.gwt.user.client.ui.MenuItem(org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.constants.refreshRate(), () -> { }); title.setEnabled(false); title.setStylePrimaryName(style.refreshMenuTitle()); refreshOptionsMenu.addItem(title); java.util.Set<java.lang.Integer> refreshRates = org.ovirt.engine.ui.common.widget.refresh.AbstractRefreshManager.getRefreshRates(); int itemIndex = 0; for (java.lang.Integer refreshRate : refreshRates) { org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionCommand command = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionCommand(); org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionMenuItem refreshRateOption = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionMenuItem(refreshRate, command); refreshRateOption.setStylePrimaryName(style.refreshRateOption()); command.setMenuItem(refreshRateOption); refreshOptionsMenu.addItem(refreshRateOption); if (itemIndex != ((refreshRates.size()) - 1)) { com.google.gwt.user.client.ui.MenuItemSeparator separator = refreshOptionsMenu.addSeparator(); separator.getElement().getStyle().setBackgroundColor("#E0E9F2"); } itemIndex++; } return refreshOptionsMenu; }
@com.google.gwt.uibinder.client.UiHandler("uploadButton") void onUploadIconButton(com.google.gwt.event.dom.client.ClickEvent event) { hiddenPanel.clear(); final com.google.gwt.user.client.ui.FileUpload inputFileWidget = new com.google.gwt.user.client.ui.FileUpload(); inputFileWidget.getElement().setAttribute("accept", "image/gif,image/jpeg,image/png"); inputFileWidget.addChangeHandler(( event1) -> readUploadedIconFile(inputFileWidget.getElement())); inputFileWidget.getElement().setTabIndex((-1)); hiddenPanel.add(inputFileWidget); inputFileWidget.click(); }	@com.google.gwt.uibinder.client.UiHandler("uploadButton") void onUploadIconButton(com.google.gwt.event.dom.client.ClickEvent event) { hiddenPanel.clear(); final com.google.gwt.user.client.ui.FileUpload inputFileWidget = new com.google.gwt.user.client.ui.FileUpload(); inputFileWidget.getElement().setAttribute("accept", "image/gif,image/jpeg,image/png"); inputFileWidget.addChangeHandler(( e) -> readUploadedIconFile(inputFileWidget.getElement())); inputFileWidget.getElement().setTabIndex((-1)); hiddenPanel.add(inputFileWidget); inputFileWidget.click(); }
private void initMenuPopup(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> actions) { menuPopup = new org.ovirt.engine.ui.common.widget.action.MenuPanelPopup(true); for (final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef : actions) { com.google.gwt.user.client.ui.MenuItem menuItem = new com.google.gwt.user.client.ui.MenuItem(buttonDef.getText(), ((com.google.gwt.user.client.Command) (() -> { menuPopup.asPopupPanel().hide(); buttonDef.onClick(selectedItemsProvider.getSelectedItems()); }))); menuItem.addStyleName(style.menuItem()); updateMenuItem(menuItem, buttonDef, selectedItemsProvider.getSelectedItems()); menuPopup.getMenuBar().addItem(menuItem); items.add(new org.ovirt.engine.core.common.utils.Pair(menuItem, buttonDef)); } menuPopup.asPopupPanel().setAutoHideEnabled(true); menuPopup.asPopupPanel().addAutoHidePartner(dropdownButton.getElement()); menuPopup.asPopupPanel().addCloseHandler(( event) -> dropdownButton.setDown(false)); }	private void initMenuPopup(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> actions) { menuPopup = new org.ovirt.engine.ui.common.widget.action.MenuPanelPopup(true); for (final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef : actions) { com.google.gwt.user.client.ui.MenuItem menuItem = new com.google.gwt.user.client.ui.MenuItem(buttonDef.getText(), () -> { menuPopup.asPopupPanel().hide(); buttonDef.onClick(selectedItemsProvider.getSelectedItems()); }); menuItem.addStyleName(style.menuItem()); updateMenuItem(menuItem, buttonDef, selectedItemsProvider.getSelectedItems()); menuPopup.getMenuBar().addItem(menuItem); items.add(new org.ovirt.engine.core.common.utils.Pair(menuItem, buttonDef)); } menuPopup.asPopupPanel().setAutoHideEnabled(true); menuPopup.asPopupPanel().addAutoHidePartner(dropdownButton.getElement()); menuPopup.asPopupPanel().addCloseHandler(( event) -> dropdownButton.setDown(false)); }
private void createMenu(final java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> numaNodeList, int indexToSkip) { menuBar = new org.ovirt.engine.ui.common.widget.MenuBar(true); for (final org.ovirt.engine.core.common.businessentities.VdsNumaNode numaNode : numaNodeList) { final int nodeIndex = numaNode.getIndex(); menuBar.addItem(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.messages.numaNode(nodeIndex), ((com.google.gwt.user.client.Command) (() -> { org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(this, nodeModel.getVm().getId(), true, nodeModel.getIndex(), nodeIndex); org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.menuPopup.hide(); }))); } if (nodeModel.isPinned()) { menuBar.addSeparator(); menuBar.addItem(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.constants.unPinNode(), ((com.google.gwt.user.client.Command) (() -> { org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(this, nodeModel.getVm().getId(), false, nodeModel.getIndex(), (-1)); org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.menuPopup.hide(); }))); } }	private void createMenu(final java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> numaNodeList, int indexToSkip) { menuBar = new org.ovirt.engine.ui.common.widget.MenuBar(true); for (final org.ovirt.engine.core.common.businessentities.VdsNumaNode numaNode : numaNodeList) { final int nodeIndex = numaNode.getIndex(); menuBar.addItem(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.messages.numaNode(nodeIndex), () -> { org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(this, nodeModel.getVm().getId(), true, nodeModel.getIndex(), nodeIndex); org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.menuPopup.hide(); }); } if (nodeModel.isPinned()) { menuBar.addSeparator(); menuBar.addItem(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.constants.unPinNode(), () -> { org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(this, nodeModel.getVm().getId(), false, nodeModel.getIndex(), (-1)); org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.menuPopup.hide(); }); } }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (memoryHotUnplugCommand)) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.setConfirmWindow(null); onMemoryHotUnplugConfirmed(); } else if (command == (cancelMemoryHotUnplugCommand)) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.setConfirmWindow(null); } }	@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (memoryHotUnplugCommand)) { onMemoryHotUnplugConfirmed(); } else if (command == (cancelMemoryHotUnplugCommand)) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.setConfirmWindow(null); } }
private void onMemoryHotUnplugConfirmed() { final org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getSelectedItem(); if ((vmDevice == null) || ((vmDevice.getType()) != (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } log(("call MemoryHotUnplugCommand " + vmDevice)); }	private void onMemoryHotUnplugConfirmed() { org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.setConfirmWindow(null); final org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getSelectedItem(); if ((vmDevice == null) || ((vmDevice.getType()) != (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.HotUnplugMemory, new org.ovirt.engine.core.common.action.HotUnplugMemoryParameters(vmDevice.getId()), true); }
@java.lang.Override public void initializeHandlers() { super.initializeHandlers(); getView().getHotUnplugColumn().addHandler(new org.ovirt.engine.ui.common.widget.CellClickHandler<org.ovirt.engine.core.common.businessentities.VmDevice>() { @java.lang.Override public void onClick(com.google.gwt.dom.client.NativeEvent event, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice) { getModelProvider().getModel().onHotUnplug(vmDevice); } }); }	@java.lang.Override public void initializeHandlers() { super.initializeHandlers(); registerHandler(getView().getHotUnplugColumn().addHandler(new org.ovirt.engine.ui.common.widget.CellClickHandler<org.ovirt.engine.core.common.businessentities.VmDevice>() { @java.lang.Override public void onClick(com.google.gwt.dom.client.NativeEvent event, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice) { getModelProvider().getModel().onHotUnplug(vmDevice); } })); }
@org.ovirt.engine.ui.common.widget.uicommon.vm.Template("<button class=\"btn btn-default\" id=\"{0}\"></span>{1}</button>") com.google.gwt.safehtml.shared.SafeHtml button(java.lang.String id, java.lang.String hotUnplugLabel);	@org.ovirt.engine.ui.common.widget.uicommon.vm.Template("<button class=\"btn btn-default\" id=\"{0}\">{1}</button>") com.google.gwt.safehtml.shared.SafeHtml button(java.lang.String id, java.lang.String hotUnplugLabel);
java.lang.String remove();	java.lang.String sealTemplate();
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation(org.ovirt.engine.core.bll.dwh.DwhHeartBeat.DWH_HEART_BEAT_METHOD) public void engineIsRunningNotification() { try { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("DWH Heart Beat - Start"); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew, () -> { heartBeatVar.setDateTime(new java.util.Date()); dwhHistoryTimekeepingDao.save(heartBeatVar); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("DWH Heart Beat - End"); return null; }); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.error("Error updating DWH Heart Beat: {}", ex.getMessage()); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Exception", ex); } }	@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation(org.ovirt.engine.core.bll.dwh.DwhHeartBeat.DWH_HEART_BEAT_METHOD) public void engineIsRunningNotification() { try { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("DWH Heart Beat - Start"); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew, () -> { heartBeatVar.setDateTime(new java.util.Date()); dwhHistoryTimekeepingDao.save(heartBeatVar); return null; }); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("DWH Heart Beat - End"); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.error("Error updating DWH Heart Beat: {}", ex.getMessage()); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Exception", ex); } }
@java.lang.Override protected void teardown() { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(() -> { int sleepTimeInSec = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ServerRebootTimeout); org.ovirt.engine.core.bll.pm.log.info("Waiting {} seconds, for server to finish boot process.", sleepTimeInSec); org.ovirt.engine.core.utils.ThreadUtils.sleep(TimeUnit.SECONDS.toMillis(sleepTimeInSec)); if (getParameters().isChangeHostToMaintenanceOnStart()) { setStatus(VDSStatus.Maintenance); } else { setStatus(VDSStatus.NonResponsive); } }); }	@java.lang.Override protected void teardown() { org.ovirt.engine.core.bll.pm.StartVdsCommand.runSleepOnReboot(); }
private void setSessionUser(org.ovirt.engine.api.model.Session session) { try { org.ovirt.engine.api.model.User user = getUserResource().getUserByNameAndDomain(session.getUser().getUserName(), session.getUser().getDomain().getName()); if (user != null) { session.getUser().setId(user.getId()); session.getUser().setHref(user.getHref()); session.getUser().getDomain().setId(user.getDomain().getId()); session.getUser().getDomain().setHref(user.getDomain().getHref()); } } catch (javax.ws.rs.WebApplicationException ex) { } }	private void setSessionUser(org.ovirt.engine.api.model.Session session) { org.ovirt.engine.core.common.businessentities.aaa.DbUser entity = getEntity(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class, VdcQueryType.GetDbUserByUserNameAndDomain, new org.ovirt.engine.core.common.queries.GetDbUserByUserNameAndDomainQueryParameters(session.getUser().getUserName(), session.getUser().getDomain().getName()), "", false, false); if (entity != null) { org.ovirt.engine.api.model.User user = org.ovirt.engine.api.restapi.resource.BackendApiResource.getInstance().getUsersResource().getUserResource(entity.getId().toString()).get(); if (user != null) { session.getUser().setId(user.getId()); session.getUser().setHref(user.getHref()); session.getUser().getDomain().setId(user.getDomain().getId()); session.getUser().getDomain().setHref(user.getDomain().getHref()); } } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity device) { return device.getAddress(); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity deviceEntity) { return deviceEntity.getVmDevice().getAddress(); }
private void addPluggedColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> pluggedColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return object.isPlugged(); } @java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return false; } }; pluggedColumn.makeSortable(); getTable().addColumn(pluggedColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.devicePluggedAlias(), "70px"); }	private void addPluggedColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> pluggedColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return object.getVmDevice().isPlugged(); } @java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return false; } }; pluggedColumn.makeSortable(); getTable().addColumn(pluggedColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.devicePluggedAlias(), "70px"); }
@java.lang.Override public void initializeHandlers() { super.initializeHandlers(); getView().getHotUnplugColumn().addHandler(new org.ovirt.engine.ui.common.widget.CellClickHandler<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public void onClick(com.google.gwt.dom.client.NativeEvent event, org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity vmDevice) { getModelProvider().getModel().onHotUnplug(vmDevice); } }); }	@java.lang.Override public void initializeHandlers() { super.initializeHandlers(); registerHandler(getView().getHotUnplugColumn().addHandler(new org.ovirt.engine.ui.common.widget.CellClickHandler<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public void onClick(com.google.gwt.dom.client.NativeEvent event, org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity vmDevice) { getModelProvider().getModel().onHotUnplug(vmDevice); } })); }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.uicommon.vm.Context context, com.google.gwt.dom.client.Element parent, org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity device, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> valueUpdater) { super.onBrowserEvent(context, parent, device, event, valueUpdater); if (!(BrowserEvents.CLICK.equals(event.getType()))) { return; } if (((parent.getFirstChildElement()) == null) || (!(parent.getFirstChildElement().isOrHasChild(com.google.gwt.dom.client.Element.as(event.getEventTarget()))))) { return; } for (org.ovirt.engine.ui.common.widget.CellClickHandler<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> clickHandler : clickHandlers) { clickHandler.onClick(event, device); } }	@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.uicommon.vm.Context context, com.google.gwt.dom.client.Element parent, org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity device, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> valueUpdater) { super.onBrowserEvent(context, parent, device, event, valueUpdater); if (!(BrowserEvents.CLICK.equals(event.getType()))) { return; } if (((parent.getFirstChildElement()) == null) || (!(parent.getFirstChildElement().isOrHasChild(com.google.gwt.dom.client.Element.as(event.getEventTarget()))))) { return; } final boolean isButtonEnabled = ((device.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) && (!(device.isBeingUnplugged())); if (!isButtonEnabled) { return; } for (org.ovirt.engine.ui.common.widget.CellClickHandler<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> clickHandler : clickHandlers) { clickHandler.onClick(event, device); } }
@org.ovirt.engine.ui.common.widget.uicommon.vm.Template("<button class=\"btn btn-default\" id=\"{0}\" disabled></span>{1}</button>") com.google.gwt.safehtml.shared.SafeHtml disabledButton(java.lang.String id, java.lang.String hotUnplugLabel);	@org.ovirt.engine.ui.common.widget.uicommon.vm.Template("<button class=\"btn btn-default\" id=\"{0}\" disabled title=\"{2}\">{1}</button>") com.google.gwt.safehtml.shared.SafeHtml disabledButton(java.lang.String id, java.lang.String hotUnplugLabel, java.lang.String title);
@java.lang.Override public java.lang.String toString() { return getToStringBuilder().build(); }	@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", id).append("device", getDevice()).append("type", getType()).append("specParams", getSpecParams()).append("address", getAddress()).append("managed", isManaged()).append("plugged", isPlugged()).append("readOnly", getReadOnly()).append("deviceAlias", getAlias()).append("customProperties", getCustomProperties()).append("snapshotId", getSnapshotId()).append("logicalName", getLogicalName()).append("hostDevice", getHostDevice()).build(); }
public boolean isBeingUnplugged() { return isBeingUnplugged; }	public boolean isBeingUnplugged() { return beingUnplugged; }
@java.lang.SuppressWarnings("unchecked") protected java.util.Collection<T> convertQueriedData(org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue) { return ((java.util.Collection<T>) (queryReturnValue.getReturnValue())); }	protected void syncSearch(org.ovirt.engine.core.common.queries.VdcQueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase, org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, vdcQueryParametersBase, asyncCallback); setIsQueryFirstTime(false); }
private void onMemoryHotUnplugConfirmed() { org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.setConfirmWindow(null); final org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity vmDeviceFeEntity = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getSelectedItem(); if ((vmDeviceFeEntity == null) || ((vmDeviceFeEntity.getType()) != (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } devicesBeingHotUnplugged.add(vmDeviceFeEntity, new org.ovirt.engine.ui.uicommonweb.models.utils.ExpiringSet.RemovalAction<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public void itemRemoved(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity item) { updateItems(); } }); updateItems(); log(("call MemoryHotUnplugCommand " + vmDeviceFeEntity)); }	private void onMemoryHotUnplugConfirmed() { org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.setConfirmWindow(null); final org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity deviceEntity = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getSelectedItem(); if ((deviceEntity == null) || ((deviceEntity.getVmDevice().getType()) != (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } idsOfDevicesBeingUnplugged.add(deviceEntity.getVmDevice().getId(), new org.ovirt.engine.ui.uicommonweb.models.utils.ExpiringSet.RemovalAction<org.ovirt.engine.core.common.businessentities.VmDeviceId>() { @java.lang.Override public void itemRemoved(org.ovirt.engine.core.common.businessentities.VmDeviceId item) { updateItems(); } }); updateItems(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.HotUnplugMemory, new org.ovirt.engine.core.common.action.HotUnplugMemoryParameters(deviceEntity.getVmDevice().getId()), true); }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder getToStringBuilder() { return super.getToStringBuilder().append("isBeingUnplugged", isBeingUnplugged); }	@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("vmDevice", vmDevice).append("beingUnplugged", beingUnplugged).toString(); }
public void setBeingUnplugged(boolean beingUnplugged) { isBeingUnplugged = beingUnplugged; }	public void setBeingUnplugged(boolean beingUnplugged) { this.beingUnplugged = beingUnplugged; }
@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return object.isManaged(); }	@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return object.getVmDevice().isManaged(); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { setItems(convertQueriedData(returnValue)); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { setItems(((java.util.Collection<T>) (returnValue.getReturnValue()))); }
private void addDeviceTypeColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> deviceTypeColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity device) { return device.getDevice(); } }; deviceTypeColumn.makeSortable(); getTable().addColumn(deviceTypeColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceType(), "70px"); }	private void addDeviceTypeColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> deviceTypeColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity deviceEntity) { return deviceEntity.getVmDevice().getDevice(); } }; deviceTypeColumn.makeSortable(); getTable().addColumn(deviceTypeColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceType(), "70px"); }
private void updateItems() { java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> items = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getItems(); for (org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity vmDeviceFeEntity : items) { vmDeviceFeEntity.setBeingUnplugged(devicesBeingHotUnplugged.contains(vmDeviceFeEntity)); } setItems(items); }	private void updateItems() { java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> items = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getItems(); for (org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity item : items) { item.setBeingUnplugged(idsOfDevicesBeingUnplugged.contains(item.getVmDevice().getId())); } setItems(new java.util.ArrayList(items)); }
private int toSortingIndex(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity vmDevice) { return (vmDevice == null) || (!(org.ovirt.engine.ui.common.widget.uicommon.vm.HotUnplugCell.isHotUnpluggable(vmDevice))) ? 0 : 1; }	private int toSortingIndex(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity vmDevice) { return (vmDevice == null) || (!(org.ovirt.engine.ui.common.widget.uicommon.vm.HotUnplugCell.isHotUnpluggable(vmDevice.getVmDevice()))) ? 0 : 1; }
@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return object.getReadOnly(); }	@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return object.getVmDevice().getReadOnly(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity device) { return device.getSpecParams().toString(); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity deviceEntity) { return deviceEntity.getVmDevice().getSpecParams().toString(); }
public void onHotUnplug(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity vmDeviceFeEntity) { if ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getEntity()) == null) { return; } if ((vmDeviceFeEntity == null) || ((vmDeviceFeEntity.getType()) != (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } final java.lang.Integer memorySizeMb = ((java.lang.Integer) (vmDeviceFeEntity.getSpecParams().get("size"))); if (memorySizeMb == null) { return; } setSelectedItem(vmDeviceFeEntity); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); confirmationModel.setTitle(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.constants.memoryHotUnplug()); confirmationModel.setHelpTag(HelpTag.template_not_found_on_export_domain); confirmationModel.setMessage(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.messages.memoryHotUnplugConfirmation(memorySizeMb, org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getEntity().getName())); confirmationModel.getCommands().add(memoryHotUnplugCommand); confirmationModel.getCommands().add(cancelMemoryHotUnplugCommand); setConfirmWindow(confirmationModel); }	public void onHotUnplug(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity deviceEntity) { if ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getEntity()) == null) { return; } if ((deviceEntity == null) || ((deviceEntity.getVmDevice().getType()) != (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } final java.lang.Integer memorySizeMb = ((java.lang.Integer) (deviceEntity.getVmDevice().getSpecParams().get("size"))); if (memorySizeMb == null) { return; } setSelectedItem(deviceEntity); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); confirmationModel.setTitle(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.constants.memoryHotUnplug()); confirmationModel.setHelpTag(HelpTag.template_not_found_on_export_domain); confirmationModel.setMessage(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.messages.memoryHotUnplugConfirmation(memorySizeMb, org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getEntity().getName())); confirmationModel.getCommands().add(memoryHotUnplugCommand); confirmationModel.getCommands().add(cancelMemoryHotUnplugCommand); setConfirmWindow(confirmationModel); }
@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return object.isPlugged(); }	@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return object.getVmDevice().isPlugged(); }
@java.lang.Override public void itemRemoved(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity item) { updateItems(); }	@java.lang.Override public void itemRemoved(org.ovirt.engine.core.common.businessentities.VmDeviceId item) { updateItems(); }
private void addAddressColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> deviceAddressColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity device) { return device.getAddress(); } }; deviceAddressColumn.makeSortable(); getTable().addColumn(deviceAddressColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceAddress(), "395px"); }	private void addAddressColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> deviceAddressColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity deviceEntity) { return deviceEntity.getVmDevice().getAddress(); } }; deviceAddressColumn.makeSortable(); getTable().addColumn(deviceAddressColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceAddress(), "395px"); }
private void addManagedColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> managedColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return object.isManaged(); } @java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return false; } }; managedColumn.makeSortable(); getTable().addColumn(managedColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceManagedAlias(), "70px"); }	private void addManagedColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> managedColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return object.getVmDevice().isManaged(); } @java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return false; } }; managedColumn.makeSortable(); getTable().addColumn(managedColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceManagedAlias(), "70px"); }
private void addSpecParamsColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> specParamsColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity device) { return device.getSpecParams().toString(); } }; specParamsColumn.makeSortable(); getTable().addColumn(specParamsColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceSpecParamsAlias(), "300px"); }	private void addSpecParamsColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> specParamsColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity deviceEntity) { return deviceEntity.getVmDevice().getSpecParams().toString(); } }; specParamsColumn.makeSortable(); getTable().addColumn(specParamsColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceSpecParamsAlias(), "300px"); }
private void addReadOnlyColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> readonlyColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return object.getReadOnly(); } @java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return false; } }; readonlyColumn.makeSortable(); getTable().addColumn(readonlyColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceReadOnlyAlias(), "70px"); }	private void addReadOnlyColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> readonlyColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return object.getVmDevice().getReadOnly(); } @java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity object) { return false; } }; readonlyColumn.makeSortable(); getTable().addColumn(readonlyColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceReadOnlyAlias(), "70px"); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity device) { return device.getDevice(); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity deviceEntity) { return deviceEntity.getVmDevice().getDevice(); }
private void validateUpdateWipeAfterDelete(org.ovirt.engine.core.common.businessentities.VMStatus status) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = createDiskImage(); disk.setWipeAfterDelete(false); when(diskDao.get(diskImageGuid)).thenReturn(disk); command.getParameters().getDiskInfo().setWipeAfterDelete(true); initializeCommand(createVm(status)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(command); }	private void validateUpdateWipeAfterDelete(org.ovirt.engine.core.common.businessentities.VMStatus status) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = createDiskImage(); when(diskDao.get(diskImageGuid)).thenReturn(disk); command.getParameters().getDiskInfo().setWipeAfterDelete(true); initializeCommand(createVm(status)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(command); }
private java.lang.String composeObjectId() { return new org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventKeyComposer(event, logType).composeObjectId(); }	private java.lang.String composeObjectId() { return org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventKeyComposer.composeObjectId(event, logType); }
private void compose(java.lang.StringBuilder builder, java.lang.String key, java.lang.String value) { if ((builder.length()) > 0) { builder.append(KEY_PARTS_DELIMITER); } builder.append(key).append(NAME_VALUE_SEPARATOR).append(value); }	private static void compose(java.lang.StringBuilder builder, java.lang.String key, java.lang.String value) { if ((builder.length()) > 0) { builder.append(org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventKeyComposer.KEY_PARTS_DELIMITER); } builder.append(key).append(org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventKeyComposer.NAME_VALUE_SEPARATOR).append(value); }
private boolean hasHostExternalStatus() { return ((getEvent().getVdsId()) != null) && ((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()) != null); }	private boolean hasHostExternalStatus() { return ((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent().getVdsId()) != null) && ((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()) != null); }
@java.lang.Override protected boolean validate() { if (((getEvent()) == null) || (AuditLog.OVIRT_ORIGIN.equalsIgnoreCase(getEvent().getOrigin()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLEGAL_ORIGIN); } return true; }	@java.lang.Override protected boolean validate() { boolean result = true; if (((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent()) == null) || (org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent().getOrigin().equalsIgnoreCase(AuditLog.OVIRT_ORIGIN))) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLEGAL_ORIGIN); result = false; } if (!result) { addValidationMessage(EngineMessage.VAR__ACTION__ADD); addValidationMessage(EngineMessage.VAR__TYPE__EXTERNAL_EVENT); } return result; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionList = getPermissionList(getEvent()); if (hasHostExternalStatus()) { permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(getEvent().getVdsId(), org.ovirt.engine.core.common.VdcObjectType.VDS, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_HOST_CONFIGURATION)); } if (hasStorageDomainExternalStatus()) { permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(getEvent().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_STORAGE_DOMAIN_CONFIGURATION)); } return permissionList; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionList = getPermissionList(org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent()); if (hasHostExternalStatus()) { permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent().getVdsId(), org.ovirt.engine.core.common.VdcObjectType.VDS, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_HOST_CONFIGURATION)); } if (hasStorageDomainExternalStatus()) { permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_STORAGE_DOMAIN_CONFIGURATION)); } return permissionList; }
private boolean hasStorageDomainExternalStatus() { return ((getEvent().getStorageDomainId()) != null) && ((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()) != null); }	private boolean hasStorageDomainExternalStatus() { return ((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent().getStorageDomainId()) != null) && ((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()) != null); }
protected void addStorageDomainInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageStaticData = getStorageDomain().getStorageStaticData(); org.ovirt.engine.core.bll.storage.domain.storageDomainStaticDao.save(storageStaticData); getCompensationContext().snapshotNewEntity(storageStaticData); org.ovirt.engine.core.common.businessentities.StorageDomainDynamic newStorageDynamic = new org.ovirt.engine.core.common.businessentities.StorageDomainDynamic(null, getStorageDomain().getId(), null); getReturnValue().setActionReturnValue(getStorageDomain().getId()); storageDomainDynamicDao.save(newStorageDynamic); getCompensationContext().snapshotNewEntity(newStorageDynamic); getCompensationContext().stateChanged(); return null; }); if (org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().getStorageDomainType().isDataDomain()) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.createDefaultDiskProfile(); } }	protected void addStorageDomainInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageStaticData = getStorageDomain().getStorageStaticData(); storageDomainStaticDao.save(storageStaticData); getCompensationContext().snapshotNewEntity(storageStaticData); org.ovirt.engine.core.common.businessentities.StorageDomainDynamic newStorageDynamic = new org.ovirt.engine.core.common.businessentities.StorageDomainDynamic(null, getStorageDomain().getId(), null); getReturnValue().setActionReturnValue(getStorageDomain().getId()); storageDomainDynamicDao.save(newStorageDynamic); getCompensationContext().snapshotNewEntity(newStorageDynamic); getCompensationContext().stateChanged(); return null; }); if (org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().getStorageDomainType().isDataDomain()) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.createDefaultDiskProfile(); } }
private void doBackupCheck() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastDbBackup = getLastBackupByScope(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.BackupScope.DB); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastFilesBackup = getLastBackupByScope(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.BackupScope.FILES); if ((lastDbBackup == null) || (lastFilesBackup == null)) { auditLogDirector.log(alert, AuditLogType.ENGINE_NO_FULL_BACKUP); } else { java.lang.Integer backupAlertPeriodInDays = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BackupAlertPeriodInDays); java.util.Date lastDbBackupDate = lastDbBackup.getDoneAt(); java.util.Date lastFilesBackupDate = lastFilesBackup.getDoneAt(); java.util.Date lastFullBackupDate = ((lastDbBackupDate.compareTo(lastFilesBackupDate)) < 0) ? lastDbBackupDate : lastFilesBackupDate; long diffInDays = ((java.util.Calendar.getInstance().getTimeInMillis()) - (lastFullBackupDate.getTime())) / (java.util.concurrent.TimeUnit.DAYS.toMillis(1)); if (diffInDays > backupAlertPeriodInDays) { alert.addCustomValue("Date", lastFullBackupDate.toString()); auditLogDirector.log(alert, AuditLogType.ENGINE_NO_WARM_BACKUP); } } }	private void doBackupCheck() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastDbBackup = getLastBackupByScope(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.BackupScope.DB); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastFilesBackup = getLastBackupByScope(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.BackupScope.FILES); if ((lastDbBackup == null) || (lastFilesBackup == null)) { auditLogDirector.log(alert, AuditLogType.ENGINE_NO_FULL_BACKUP); } else { java.lang.Integer backupAlertPeriodInDays = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BackupAlertPeriodInDays); java.util.Date lastDbBackupDate = lastDbBackup.getDoneAt(); java.util.Date lastFilesBackupDate = lastFilesBackup.getDoneAt(); java.util.Date lastFullBackupDate = ((lastDbBackupDate.compareTo(lastFilesBackupDate)) < 0) ? lastDbBackupDate : lastFilesBackupDate; long diffInDays = ((java.util.Calendar.getInstance().getTimeInMillis()) - (lastFullBackupDate.getTime())) / (java.util.concurrent.TimeUnit.DAYS.toMillis(1)); if (diffInDays > backupAlertPeriodInDays) { alert.addCustomValue("Date", lastFullBackupDate.toString()); auditLogDirector.log(alert, AuditLogType.ENGINE_NO_WARM_BACKUP); } } }
private static java.lang.String getMessageOrNull(org.ovirt.engine.core.common.AuditLogType logType) { final java.lang.String key = logType.name(); try { return org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.resourceBundle.getString(key); } catch (java.lang.Exception e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.error("Key '{}' is not translated in '{}'", key, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getResourceBundleName()); return null; } }	protected static java.lang.String getMessageOrNull(org.ovirt.engine.core.common.AuditLogType logType) { final java.lang.String key = logType.name(); try { return org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.resourceBundle.getString(key); } catch (java.lang.Exception e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.error("Key '{}' is not translated in '{}'", key, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getResourceBundleName()); return null; } }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.AuditLog event) { getCallsHandler().executeModification("InsertAuditLog", (event.isExternal() ? getExternalEventSqlMapper(event) : getSqlMapper(event))); }	@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.AuditLog event) { java.util.Map<java.lang.String, java.lang.Object> outParameters = getCallsHandler().executeModification("InsertAuditLog", getSqlMapper(event)); event.setAuditLogId(((java.lang.Long) (outParameters.get("audit_log_id")))); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent())); event.setExternal(true); java.lang.String message = truncateMessage(getEvent().getMessage()); switch (getEvent().getSeverity()) { case NORMAL : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_NORMAL, message); break; case WARNING : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_WARNING, message); break; case ERROR : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_ERROR, message); break; case ALERT : org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.alert(event, AuditLogType.EXTERNAL_ALERT, auditLogDirector, message); break; } org.ovirt.engine.core.common.businessentities.AuditLog auditLog = auditLogDao.getByOriginAndCustomEventId(getEvent().getOrigin(), getEvent().getCustomEventId()); if (auditLog != null) { setActionReturnValue(auditLog.getAuditLogId()); org.ovirt.engine.core.bll.AddExternalEventCommand.setSucceeded(true); } if (hasHostExternalStatus()) { vdsDynamicDao.updateExternalStatus(getEvent().getVdsId(), org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()); } if (hasStorageDomainExternalStatus()) { storageDomainDynamicDao.updateExternalStatus(getEvent().getStorageDomainId(), org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()); } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent())); event.setExternal(true); java.lang.String message = org.apache.commons.lang.StringUtils.abbreviate(getEvent().getMessage(), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.MaxAuditLogMessageLength)); switch (getEvent().getSeverity()) { case NORMAL : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_NORMAL, message); break; case WARNING : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_WARNING, message); break; case ERROR : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_ERROR, message); break; case ALERT : org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.alert(event, AuditLogType.EXTERNAL_ALERT, auditLogDirector, message); break; } org.ovirt.engine.core.common.businessentities.AuditLog auditLog = auditLogDao.getByOriginAndCustomEventId(getEvent().getOrigin(), getEvent().getCustomEventId()); if (auditLog != null) { setActionReturnValue(auditLog.getAuditLogId()); org.ovirt.engine.core.bll.AddExternalEventCommand.setSucceeded(true); } if (hasHostExternalStatus()) { vdsDynamicDao.updateExternalStatus(getEvent().getVdsId(), org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()); } if (hasStorageDomainExternalStatus()) { storageDomainDynamicDao.updateExternalStatus(getEvent().getStorageDomainId(), org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()); } }
private void auditLogFailedToConnect() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); }	private void auditLogFailedToConnect() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); }
public boolean discover() { boolean dbUpdated = false; java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("PolicyUnits updated for external broker."); dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Discovery returned empty result when talking to broker. Disabling external units"); java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit> failingPolicyUnits = policyUnitDao.getAll().stream().collect(java.util.stream.Collectors.toList()); markExternalPoliciesAsDisabled(failingPolicyUnits); dbUpdated = true; } return dbUpdated; }	public boolean discover() { boolean dbUpdated; java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("PolicyUnits updated for external broker."); dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Discovery returned empty result when talking to broker. Disabling external units"); java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit> failingPolicyUnits = policyUnitDao.getAll().stream().collect(java.util.stream.Collectors.toList()); markExternalPoliciesAsDisabled(failingPolicyUnits); dbUpdated = true; } return dbUpdated; }
private void hotSetMemory(int currentMemoryMb, int newAmountOfMemoryMb) { final int minimalHotPlugDeviceSizeMb = HotSetAmountOfMemoryCommand.HOTPLUG_MEMORY_SIZE_FACTOR_MB; final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> memoryDevices = org.ovirt.engine.core.bll.UpdateVmCommand.getVmDeviceUtils().getMemoryDevices(getVmId()); final boolean minimalMemoryDevicePresent = memoryDevices.stream().anyMatch(( device) -> (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(device)) == minimalHotPlugDeviceSizeMb); final int secondPartSizeMb = (newAmountOfMemoryMb - currentMemoryMb) - minimalHotPlugDeviceSizeMb; if (minimalMemoryDevicePresent || (secondPartSizeMb == 0)) { hotPlugMemoryDevice(currentMemoryMb, newAmountOfMemoryMb); return; } hotPlugMemoryDevice(currentMemoryMb, (currentMemoryMb + minimalHotPlugDeviceSizeMb)); hotPlugMemoryDevice((currentMemoryMb + minimalHotPlugDeviceSizeMb), newAmountOfMemoryMb); }	private void hotSetMemory(int currentMemoryMb, int newAmountOfMemoryMb) { final int minimalHotPlugDeviceSizeMb = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getClusterArch().getHotplugMemorySizeFactorMb(); final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> memoryDevices = org.ovirt.engine.core.bll.UpdateVmCommand.getVmDeviceUtils().getMemoryDevices(getVmId()); final boolean minimalMemoryDevicePresent = memoryDevices.stream().anyMatch(( device) -> (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(device)) == minimalHotPlugDeviceSizeMb); final int secondPartSizeMb = (newAmountOfMemoryMb - currentMemoryMb) - minimalHotPlugDeviceSizeMb; if (minimalMemoryDevicePresent || (secondPartSizeMb == 0)) { hotPlugMemoryDevice(currentMemoryMb, newAmountOfMemoryMb); return; } hotPlugMemoryDevice(currentMemoryMb, (currentMemoryMb + minimalHotPlugDeviceSizeMb)); hotPlugMemoryDevice((currentMemoryMb + minimalHotPlugDeviceSizeMb), newAmountOfMemoryMb); }
private void hotPlugMemoryDevice(int currentMemoryMb, int newAmountOfMemoryMb) { org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters params = new org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters(newVmStatic, org.ovirt.engine.core.common.action.PlugAction.PLUG, 0, (newAmountOfMemoryMb - currentMemoryMb)); org.ovirt.engine.core.common.action.VdcReturnValueBase setAmountOfMemoryResult = runInternalAction(VdcActionType.HotSetAmountOfMemory, params, org.ovirt.engine.core.bll.UpdateVmCommand.cloneContextAndDetachFromParent()); if (!(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isHostedEngine())) { newVmStatic.setMemSizeMb((setAmountOfMemoryResult.getSucceeded() ? newAmountOfMemoryMb : currentMemoryMb)); } hotSetMemlog(params, setAmountOfMemoryResult); }	private void hotPlugMemoryDevice(int currentMemoryMb, int newAmountOfMemoryMb) { org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters params = new org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters(newVmStatic, (currentMemoryMb < newAmountOfMemoryMb ? org.ovirt.engine.core.common.action.PlugAction.PLUG : org.ovirt.engine.core.common.action.PlugAction.UNPLUG), 0, (newAmountOfMemoryMb - currentMemoryMb)); org.ovirt.engine.core.common.action.VdcReturnValueBase setAmountOfMemoryResult = runInternalAction(VdcActionType.HotSetAmountOfMemory, params, org.ovirt.engine.core.bll.UpdateVmCommand.cloneContextAndDetachFromParent()); if (!(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isHostedEngine())) { newVmStatic.setMemSizeMb((setAmountOfMemoryResult.getSucceeded() ? newAmountOfMemoryMb : currentMemoryMb)); } hotSetMemlog(params, setAmountOfMemoryResult); }
private void updateDefaultNetworkFilterIfRequired() { if (org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFilterId()) { if (org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getVnicProfile().isPassthrough()) { org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.setNetworkFilterId(null); } else { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = org.ovirt.engine.core.bll.network.cluster.NetworkHelper.resolveVnicProfileDefaultNetworkFilter(networkFilterDao); if (networkFilter != null) { final org.ovirt.engine.core.compat.Guid networkFilterId = networkFilter.getId(); setNetworkFilterId(networkFilterId); } } } }	private void updateDefaultNetworkFilterIfRequired() { if ((org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFiterId()) && (!(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getVnicProfile().isPassthrough()))) { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = org.ovirt.engine.core.bll.network.cluster.NetworkHelper.resolveVnicProfileDefaultNetworkFilter(networkFilterDao); if (networkFilter != null) { final org.ovirt.engine.core.compat.Guid networkFilterId = networkFilter.getId(); setNetworkFilterId(networkFilterId); } } }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.createVnicProfileValidator(); boolean useDefaultNetworkFilterId = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFilterId(); return (((((((((validate(validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileForVmNetworkOnly()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.passthroughProfileContainsSupportedProperties(useDefaultNetworkFilterId)))) && (validate(validator.validUseDefaultNetworkFilterFlag(useDefaultNetworkFilterId)))) && (validate(validator.validNetworkFilterId())); }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.createVnicProfileValidator(); boolean useDefaultNetworkFilterId = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFiterId(); return (((((((((validate(validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileForVmNetworkOnly()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.passthroughProfileContainsSupportedProperties()))) && (validate(validator.validUseDefaultNetworkFilterFlag(useDefaultNetworkFilterId)))) && (validate(validator.validNetworkFilterId())); }
public boolean isUseDefaultNetworkFilterId() { return useDefaultNetworkFiterId; }	public boolean isUseDefaultNetworkFiterId() { return useDefaultNetworkFiterId; }
public java.lang.String getCompatibilityVersion() { return compatibilityVersion; }	@java.lang.Override public java.lang.String getCompatibilityVersion() { return compatibilityVersion; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcActionType actionToExecute = org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters().getAction(); org.ovirt.engine.core.common.action.VdcActionParametersBase actionParameters = org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters().getActionParameters(); actionParameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); actionParameters.setParentCommand(VdcActionType.RunAsyncAction); actionParameters.setParentParameters(org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters()); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(actionToExecute, actionParameters, org.ovirt.engine.core.bll.RunAsyncActionCommand.cloneContextAndDetachFromParent()); org.ovirt.engine.core.bll.RunAsyncActionCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters().getAction(), org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters().getActionParameters(), org.ovirt.engine.core.bll.RunAsyncActionCommand.cloneContextAndDetachFromParent()); org.ovirt.engine.core.bll.RunAsyncActionCommand.setSucceeded(true); }
public boolean isLegal() { if (useTimeout) { java.lang.String keyForCheck = ("".equals(timeoutObjectId)) ? logType.toString() : timeoutObjectId; java.lang.String value = org.ovirt.engine.core.dal.utils.CacheManager.getTimeoutBaseCache().putIfAbsent(keyForCheck, keyForCheck, endTime, java.util.concurrent.TimeUnit.MILLISECONDS); return value == null; } return true; }	public boolean isLegal() { if (useTimeout) { java.lang.String key = ("".equals(timeoutObjectId)) ? logType.toString() : timeoutObjectId; java.lang.String oldValue = org.ovirt.engine.core.dal.utils.CacheManager.getTimeoutBaseCache().putIfAbsent(key, key, endTime, java.util.concurrent.TimeUnit.MILLISECONDS); return oldValue == null; } return true; }
private boolean validateManagementNetworkAttachment() { final org.ovirt.engine.core.common.businessentities.network.Network managementNetwork; final org.ovirt.engine.core.compat.Guid managementNetworkId = org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getManagementNetworkId(); if (managementNetworkId == null) { managementNetwork = getDefaultManagementNetworkFinder().findDefaultManagementNetwork(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getStoragePoolId()); if (managementNetwork == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } } else { managementNetwork = networkDao.get(managementNetworkId); if (managementNetwork == null) { addValidationMessage(EngineMessage.NETWORK_NOT_EXISTS); return false; } } managementNetworkCluster = createManagementNetworkCluster(managementNetwork); final org.ovirt.engine.core.bll.network.cluster.UpdateClusterNetworkClusterValidator networkClusterValidator = createManagementNetworkClusterValidator(); return validate(networkClusterValidator.managementNetworkChange()); }	private boolean validateManagementNetwork() { final org.ovirt.engine.core.compat.Guid managementNetworkId = org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getManagementNetworkId(); if (managementNetworkId == null) { managementNetwork = getDefaultManagementNetworkFinder().findDefaultManagementNetwork(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getStoragePoolId()); if ((managementNetwork) == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } } else { managementNetwork = networkDao.get(managementNetworkId); if ((managementNetwork) == null) { addValidationMessage(EngineMessage.NETWORK_NOT_EXISTS); return false; } } return true; }
private org.ovirt.engine.core.common.action.ColdMergeCommandParameters buildColdMergeParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage baseVolume, org.ovirt.engine.core.common.businessentities.storage.DiskImage topVolume) { org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo = new org.ovirt.engine.core.common.businessentities.SubchainInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), baseVolume, topVolume); org.ovirt.engine.core.common.action.ColdMergeCommandParameters parameters = new org.ovirt.engine.core.common.action.ColdMergeCommandParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStoragePoolId(), subchainInfo); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }	private org.ovirt.engine.core.common.action.ColdMergeCommandParameters buildColdMergeParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage baseVolume, org.ovirt.engine.core.common.businessentities.storage.DiskImage topVolume) { org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo = new org.ovirt.engine.core.common.businessentities.SubchainInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStorageIds().get(0), baseVolume, topVolume); org.ovirt.engine.core.common.action.ColdMergeCommandParameters parameters = new org.ovirt.engine.core.common.action.ColdMergeCommandParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStoragePoolId(), subchainInfo); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass()) != (o.getClass()))) { return false; } org.ovirt.engine.core.common.businessentities.SubchainInfo that = ((org.ovirt.engine.core.common.businessentities.SubchainInfo) (o)); return ((((java.util.Objects.equals(storageDomainId, that.storageDomainId)) && (java.util.Objects.equals(imageGroupId, that.imageGroupId))) && (java.util.Objects.equals(baseImageGeneration, that.baseImageGeneration))) && (java.util.Objects.equals(baseImage, that.baseImage))) && (java.util.Objects.equals(topImage, that.topImage)); }	@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass()) != (o.getClass()))) { return false; } org.ovirt.engine.core.common.businessentities.SubchainInfo that = ((org.ovirt.engine.core.common.businessentities.SubchainInfo) (o)); return (((java.util.Objects.equals(storageDomainId, that.storageDomainId)) && (java.util.Objects.equals(baseImageGeneration, that.baseImageGeneration))) && (java.util.Objects.equals(baseImage, that.baseImage))) && (java.util.Objects.equals(topImage, that.topImage)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(storageDomainId, imageGroupId, baseImageGeneration, baseImage, topImage); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(storageDomainId, baseImageGeneration, baseImage, topImage); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksListForStorageAllocations() { return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getSnapshotsDummiesForStorageAllocations(getSourceImages()); }	protected java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo> getAllDisksSnapshot(java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots) { java.util.Set<org.ovirt.engine.core.common.businessentities.storage.DiskImage> topSnapshots = diskImageDao.getAllSnapshotsForParents(snapshots.stream().map(DiskImage::getImageId).collect(java.util.stream.Collectors.toList())); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImage> baseSnapshotMap = snapshots.stream().collect(java.util.stream.Collectors.toMap(DiskImage::getImageId, java.util.function.Function.identity())); return topSnapshots.stream().map(( topSnapshot) -> { if ((!(isQemuimgCommitSupported())) && ((getSnapshotActionType()) == VdcActionType.RemoveSnapshotSingleDisk)) { return new org.ovirt.engine.core.common.businessentities.SubchainInfo(topSnapshot, baseSnapshotMap.get(topSnapshot.getParentId())); } else { return new org.ovirt.engine.core.common.businessentities.SubchainInfo(baseSnapshotMap.get(topSnapshot.getParentId()), topSnapshot); } }).collect(java.util.stream.Collectors.toList()); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId).append("imageGroupId", imageGroupId).append("baseImage", baseImage).append("topImage", topImage).append("baseImageGeneration", baseImageGeneration).build(); }	@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId).append("baseImage", baseImage).append("topImage", topImage).append("baseImageGeneration", baseImageGeneration).build(); }
private void updateVmDeviceWithDataReturnedFromHost(org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue) { if ((vdsReturnValue.getSucceeded()) && ((org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getAction()) == (org.ovirt.engine.core.common.action.PlugAction.PLUG))) { org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn vmInfoReturn = ((org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn) (vdsReturnValue.getReturnValue())); if ((vmInfoReturn.getVmInfo()) != null) { java.util.Map<java.lang.String, java.lang.Object> vmInfo = ((java.util.Map<java.lang.String, java.lang.Object>) (vmInfoReturn.getVmInfo())); for (java.lang.Object o : ((java.lang.Object[]) (vmInfo.get(VdsProperties.Devices)))) { java.util.Map<java.lang.String, java.lang.Object> vdsmDevice = ((java.util.Map<java.lang.String, java.lang.Object>) (o)); if (vmDevice.getId().getDeviceId().toString().equals(((java.lang.String) (vdsmDevice.get(VdsProperties.DeviceId))))) { vmDevice.setAddress(vdsmDevice.get(VdsProperties.Address).toString()); vmDevice.setAlias(org.apache.commons.lang.StringUtils.defaultString(((java.lang.String) (vdsmDevice.get(VdsProperties.Alias))))); } } } } }	private void updateVmDeviceWithDataReturnedFromHost(org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue) { if ((vdsReturnValue.getSucceeded()) && ((org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getAction()) == (org.ovirt.engine.core.common.action.PlugAction.PLUG))) { org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn vmInfoReturn = ((org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn) (vdsReturnValue.getReturnValue())); if ((vmInfoReturn.getVmInfo()) != null) { java.util.Map<java.lang.String, java.lang.Object> vmInfo = ((java.util.Map<java.lang.String, java.lang.Object>) (vmInfoReturn.getVmInfo())); for (java.lang.Object o : ((java.lang.Object[]) (vmInfo.get(VdsProperties.Devices)))) { java.util.Map<java.lang.String, java.lang.Object> vdsmDevice = ((java.util.Map<java.lang.String, java.lang.Object>) (o)); if (vmDevice.getId().getDeviceId().toString().equals(vdsmDevice.get(VdsProperties.DeviceId))) { vmDevice.setAddress(vdsmDevice.get(VdsProperties.Address).toString()); vmDevice.setAlias(org.apache.commons.lang.StringUtils.defaultString(((java.lang.String) (vdsmDevice.get(VdsProperties.Alias))))); } } } } }
private void updateVmDeviceWithDataReturnedFromHost(org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue) { if ((vdsReturnValue.getSucceeded()) && ((org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getAction()) == (org.ovirt.engine.core.common.action.PlugAction.PLUG))) { org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn vmInfoReturn = ((org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn) (vdsReturnValue.getReturnValue())); if ((vmInfoReturn.getVmInfo()) != null) { java.util.Map<java.lang.String, java.lang.Object> vmInfo = ((java.util.Map<java.lang.String, java.lang.Object>) (vmInfoReturn.getVmInfo())); for (java.lang.Object o : ((java.lang.Object[]) (vmInfo.get(VdsProperties.Devices)))) { java.util.Map<java.lang.String, java.lang.Object> vdsmDevice = ((java.util.Map<java.lang.String, java.lang.Object>) (o)); if (vmDevice.getId().getDeviceId().toString().equals(vdsmDevice.get(VdsProperties.DeviceId))) { vmDevice.setAddress(vdsmDevice.get(VdsProperties.Address).toString()); vmDevice.setAlias(org.apache.commons.lang.StringUtils.defaultString(((java.lang.String) (vdsmDevice.get(VdsProperties.Alias))))); } } } } }	private void updateVmDeviceWithDataReturnedFromHost(org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue) { if ((vdsReturnValue.getSucceeded()) && ((org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getAction()) == (org.ovirt.engine.core.common.action.PlugAction.PLUG))) { org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn vmInfoReturn = ((org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn) (vdsReturnValue.getReturnValue())); if ((vmInfoReturn.getVmInfo()) != null) { java.util.Map<java.lang.String, java.lang.Object> vmInfo = ((java.util.Map<java.lang.String, java.lang.Object>) (vmInfoReturn.getVmInfo())); for (java.lang.Object o : ((java.lang.Object[]) (vmInfo.get(VdsProperties.Devices)))) { java.util.Map<java.lang.String, java.lang.Object> vdsmDevice = ((java.util.Map<java.lang.String, java.lang.Object>) (o)); if (vmDevice.getId().getDeviceId().toString().equals(vdsmDevice.get(VdsProperties.DeviceId))) { vmDevice.setAddress(vdsmDevice.get(VdsProperties.Address).toString()); vmDevice.setAlias(org.apache.commons.lang.StringUtils.defaultString(((java.lang.String) (vdsmDevice.get(VdsProperties.Alias))))); break; } } } } }
@java.lang.Override protected boolean validateInputManagementNetwork() { if (!(org.ovirt.engine.core.bll.AddClusterCommand.findInputManagementNetwork())) return false; final org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase networkClusterValidator = createNetworkClusterValidator(); return ((validate(networkClusterValidator.networkBelongsToClusterDataCenter(org.ovirt.engine.core.bll.AddClusterCommand.getCluster(), managementNetwork))) && (validate(networkClusterValidator.managementNetworkRequired(managementNetwork)))) && (validate(networkClusterValidator.managementNetworkNotExternal(managementNetwork))); }	@java.lang.Override protected boolean validateInputManagementNetwork() { if (!(org.ovirt.engine.core.bll.AddClusterCommand.findInputManagementNetwork())) { return false; } final org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase networkClusterValidator = createNetworkClusterValidator(); return ((validate(networkClusterValidator.networkBelongsToClusterDataCenter(org.ovirt.engine.core.bll.AddClusterCommand.getCluster(), managementNetwork))) && (validate(networkClusterValidator.managementNetworkRequired(managementNetwork)))) && (validate(networkClusterValidator.managementNetworkNotExternal(managementNetwork))); }
protected boolean validateSpaceRequirements() { if (isUnregisteredDiskExistsForCopyTemplate()) { return true; } org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = createStorageDomainValidator(); if (validate(storageDomainValidator.isDomainWithinThresholds())) { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.TEMPLATE)) { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getSnapshots().add(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()); } else { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getSnapshots().addAll(diskImageDao.getAllSnapshotsForLeaf(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getImageId())); } return validate(storageDomainValidator.hasSpaceForDiskWithSnapshots(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage())); } return false; }	protected boolean validateSpaceRequirements() { if (isUnregisteredDiskExistsForCopyTemplate()) { return true; } org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = createStorageDomainValidator(); if (validate(storageDomainValidator.isDomainWithinThresholds())) { if ((getImage().getVmEntityType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.TEMPLATE)) { getImage().getSnapshots().add(getImage()); } else { getImage().getSnapshots().addAll(diskImageDao.getAllSnapshotsForLeaf(getImage().getImageId())); } return validate(storageDomainValidator.hasSpaceForDiskWithSnapshots(getImage())); } return false; }
protected java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> getVmsWithVmDeviceInfoForDiskId() { if ((cachedVmsDeviceInfo) == null) { cachedVmsDeviceInfo = vmDao.getVmsWithPlugInfo(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getId()); } return cachedVmsDeviceInfo; }	protected java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> getVmsWithVmDeviceInfoForDiskId() { if ((cachedVmsDeviceInfo) == null) { cachedVmsDeviceInfo = vmDao.getVmsWithPlugInfo(getImage().getId()); } return cachedVmsDeviceInfo; }
@java.lang.Override protected void init() { cachedParamsToDisks = org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getParametersList().stream().collect(java.util.stream.Collectors.toMap(java.util.function.Function.identity(), ( p) -> diskImageDao.get(p.getImageId()))); }	@java.lang.Override protected void init() { super.init(); cachedParamsToDisks = org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getParametersList().stream().collect(java.util.stream.Collectors.toMap(java.util.function.Function.identity(), ( p) -> diskImageDao.get(p.getImageId()))); }
private boolean isTemplate() { return !(((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType()) == null) || (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType().isTemplateType()))); }	private boolean isTemplate() { return !(((getImage().getVmEntityType()) == null) || (!(getImage().getVmEntityType().isTemplateType()))); }
protected boolean checkTemplateInDestStorageDomain() { if (((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getImageTemplateId())))) { org.ovirt.engine.core.common.businessentities.storage.DiskImage templateImage = diskImageDao.get(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getImageTemplateId()); if (!(templateImage.getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return true; }	protected boolean checkTemplateInDestStorageDomain() { if ((isMoveOperation()) && (!(Guid.Empty.equals(getImage().getImageTemplateId())))) { org.ovirt.engine.core.common.businessentities.storage.DiskImage templateImage = diskImageDao.get(getImage().getImageTemplateId()); if (!(templateImage.getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return true; }
protected boolean isImageExist() { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST); } return true; }	protected boolean isImageExist() { if ((getImage()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST); } return true; }
protected org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator createMultipleDiskVmElementValidator() { return new org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(), diskVmElementDao.getAllDiskVmElementsByDiskId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getImageGroupID())); }	protected org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator createMultipleDiskVmElementValidator() { return new org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator(getImage(), diskVmElementDao.getAllDiskVmElementsByDiskId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getImageGroupID())); }
private java.lang.String getDiskIsBeingMigratedMessage() { if ((cachedDiskIsBeingMigratedMessage) == null) { cachedDiskIsBeingMigratedMessage = new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_IS_BEING_MIGRATED).withOptional("DiskName", ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()) != null ? getDiskAlias() : null)).toString(); } return cachedDiskIsBeingMigratedMessage; }	private java.lang.String getDiskIsBeingMigratedMessage() { if ((cachedDiskIsBeingMigratedMessage) == null) { cachedDiskIsBeingMigratedMessage = new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_IS_BEING_MIGRATED).withOptional("DiskName", ((getImage()) != null ? getDiskAlias() : null)).toString(); } return cachedDiskIsBeingMigratedMessage; }
protected boolean checkOperationIsCorrect() { if ((((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType()) != null)) && (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType().isTemplateType())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_IS_NOT_VM_DISK, java.lang.String.format("$%1$s %2$s", "diskAliases", org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getDiskAlias())); } return true; }	protected boolean checkOperationIsCorrect() { if (((isMoveOperation()) && ((getImage().getVmEntityType()) != null)) && (getImage().getVmEntityType().isTemplateType())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_IS_NOT_VM_DISK, java.lang.String.format("$%1$s %2$s", "diskAliases", getImage().getDiskAlias())); } return true; }
protected org.ovirt.engine.core.bll.validator.storage.DiskValidator createDiskValidator() { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()); }	protected org.ovirt.engine.core.bll.validator.storage.DiskValidator createDiskValidator() { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator(getImage()); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()) != null ? org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getId() : org.ovirt.engine.core.compat.Guid.Empty).toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, getDiskIsBeingMigratedMessage())); }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(((getImage()) != null ? getImage().getId() : org.ovirt.engine.core.compat.Guid.Empty).toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, getDiskIsBeingMigratedMessage())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() { java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> list = new java.util.ArrayList<>(); list.add(new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter(getDestinationQuotaId(), null, QuotaConsumptionParameter.QuotaAction.CONSUME, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), ((double) (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getSizeInGigabytes())))); if ((org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move) == (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation())) { if (((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getQuotaId()) != null) && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getQuotaId())))) { list.add(new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getQuotaId(), null, QuotaConsumptionParameter.QuotaAction.RELEASE, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(), ((double) (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getSizeInGigabytes())))); } } return list; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() { java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> list = new java.util.ArrayList<>(); list.add(new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter(getDestinationQuotaId(), null, QuotaConsumptionParameter.QuotaAction.CONSUME, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), ((double) (getImage().getSizeInGigabytes())))); if (isMoveOperation()) { if (((getImage().getQuotaId()) != null) && (!(Guid.Empty.equals(getImage().getQuotaId())))) { list.add(new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter(getImage().getQuotaId(), null, QuotaConsumptionParameter.QuotaAction.RELEASE, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(), ((double) (getImage().getSizeInGigabytes())))); } } return list; }
protected boolean setAndValidateDiskProfiles() { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().setDiskProfileId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getDiskProfileId()); return validate(diskProfileHelper.setAndValidateDiskProfiles(java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getCurrentUser())); }	protected boolean setAndValidateDiskProfiles() { getImage().setDiskProfileId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getDiskProfileId()); return validate(diskProfileHelper.setAndValidateDiskProfiles(java.util.Collections.singletonMap(getImage(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getCurrentUser())); }
protected boolean isImageNotLocked() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(); if ((diskImage.getImageStatus()) == (org.ovirt.engine.core.common.businessentities.storage.ImageStatus.LOCKED)) { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED, java.lang.String.format("$%1$s %2$s", "diskAliases", diskImage.getDiskAlias())); } else { return failValidation(EngineMessage.VM_TEMPLATE_IMAGE_IS_LOCKED); } } return true; }	protected boolean isImageNotLocked() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getImage(); if ((diskImage.getImageStatus()) == (org.ovirt.engine.core.common.businessentities.storage.ImageStatus.LOCKED)) { if (isMoveOperation()) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED, java.lang.String.format("$%1$s %2$s", "diskAliases", diskImage.getDiskAlias())); } else { return failValidation(EngineMessage.VM_TEMPLATE_IMAGE_IS_LOCKED); } } return true; }
protected boolean validateDestStorage() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain()); if ((!(validate(validator.isDomainExistAndActive()))) || (!(validate(validator.domainIsValidDestination())))) { return false; } boolean moveOrCopy = ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) || ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy)); if ((moveOrCopy && (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().isShareable())) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLUSTERFS))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS, java.lang.String.format("$%1$s %2$s", "diskAlias", org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getDiskAlias())); } return true; }	protected boolean validateDestStorage() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain()); if ((!(validate(validator.isDomainExistAndActive()))) || (!(validate(validator.domainIsValidDestination())))) { return false; } boolean moveOrCopy = (isMoveOperation()) || (isCopyOperation()); if ((moveOrCopy && (getImage().isShareable())) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLUSTERFS))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS, java.lang.String.format("$%1$s %2$s", "diskAlias", getImage().getDiskAlias())); } return true; }
@java.lang.Override protected void executeCommand() { if (isUnregisteredDiskExistsForCopyTemplate()) { addDiskMapping(); return; } org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters p = prepareChildParameters(); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = runInternalActionWithTasksContext(getImagesActionType(), p); if (!(vdcRetValue.getSucceeded())) { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.setSucceeded(false); org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getReturnValue().setFault(vdcRetValue.getFault()); } else { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.setSucceeded(true); if (((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy)) && (!(isTemplate()))) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.addDiskImageWithNoVmDevice(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()); } } }	@java.lang.Override protected void executeCommand() { if (isUnregisteredDiskExistsForCopyTemplate()) { addDiskMapping(); return; } org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters p = prepareChildParameters(); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = runInternalActionWithTasksContext(getImagesActionType(), p); if (!(vdcRetValue.getSucceeded())) { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.setSucceeded(false); org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getReturnValue().setFault(vdcRetValue.getFault()); } else { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.setSucceeded(true); if ((isCopyOperation()) && (!(isTemplate()))) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.addDiskImageWithNoVmDevice(getImage()); } } }
protected org.ovirt.engine.core.common.businessentities.VmTemplate getTemplateForImage() { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()) == null) { return null; } java.util.Collection<org.ovirt.engine.core.common.businessentities.VmTemplate> templates = vmTemplateDao.getAllForImage(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getImageId()).values(); return !(templates.isEmpty()) ? templates.iterator().next() : null; }	protected org.ovirt.engine.core.common.businessentities.VmTemplate getTemplateForImage() { if ((getImage()) == null) { return null; } return vmTemplateDao.getAllForImage(getImage().getImageId()).values().stream().findAny().orElse(null); }
protected boolean checkIfNeedToBeOverride() { if ((((isTemplate()) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy))) && (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getForceOverride()))) && (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_ALREADY_EXISTS); } return true; }	protected boolean checkIfNeedToBeOverride() { if ((((isTemplate()) && (isCopyOperation())) && (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getForceOverride()))) && (getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_ALREADY_EXISTS); } return true; }
protected boolean validateSourceStorageDomain() { org.ovirt.engine.core.compat.Guid sourceDomainId = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(); if ((sourceDomainId == null) || (Guid.Empty.equals(sourceDomainId))) { sourceDomainId = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getStorageIds().get(0); org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().setSourceDomainId(sourceDomainId); } org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(storageDomainDao.getForStoragePool(sourceDomainId, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getStoragePoolId())); return validate(validator.isDomainExistAndActive()); }	protected boolean validateSourceStorageDomain() { org.ovirt.engine.core.compat.Guid sourceDomainId = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(); if ((sourceDomainId == null) || (Guid.Empty.equals(sourceDomainId))) { sourceDomainId = getImage().getStorageIds().get(0); org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().setSourceDomainId(sourceDomainId); } org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(storageDomainDao.getForStoragePool(sourceDomainId, getImage().getStoragePoolId())); return validate(validator.isDomainExistAndActive()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { if ((cachedPermsList) == null) { cachedPermsList = new java.util.ArrayList(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(); org.ovirt.engine.core.compat.Guid diskId = (image == null) ? org.ovirt.engine.core.compat.Guid.Empty : image.getId(); cachedPermsList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(diskId, org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_DISK_STORAGE)); cachedPermsList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return cachedPermsList; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { if ((cachedPermsList) == null) { cachedPermsList = new java.util.ArrayList(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = getImage(); org.ovirt.engine.core.compat.Guid diskId = (image == null) ? org.ovirt.engine.core.compat.Guid.Empty : image.getId(); cachedPermsList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(diskId, org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_DISK_STORAGE)); cachedPermsList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return cachedPermsList; }
protected boolean isUnregisteredDiskExistsForCopyTemplate() { if ((isTemplate()) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy))) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk> unregisteredDisks = unregisteredDisksDao.getByDiskIdAndStorageDomainId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()); if (!(unregisteredDisks.isEmpty())) { return true; } } return false; }	protected boolean isUnregisteredDiskExistsForCopyTemplate() { if ((isTemplate()) && (isCopyOperation())) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk> unregisteredDisks = unregisteredDisksDao.getByDiskIdAndStorageDomainId(getImage().getId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()); if (!(unregisteredDisks.isEmpty())) { return true; } } return false; }
private void prepareCopyNotTemplate(org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters parameters) { parameters.setAddImageDomainMapping(false); org.ovirt.engine.core.compat.Guid newImageId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.compat.Guid newId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(); image.setId(newId); image.setImageId(newImageId); image.setDiskAlias(getDiskAlias()); image.setStorageIds(new java.util.ArrayList()); image.getStorageIds().add(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()); image.setQuotaId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getQuotaId()); image.setDiskProfileId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getDiskProfileId()); image.setImageStatus(ImageStatus.LOCKED); image.setVmSnapshotId(null); image.setParentId(Guid.Empty); image.setImageTemplateId(Guid.Empty); parameters.setDestinationImageId(newImageId); parameters.setDestImageGroupId(newId); }	private void prepareCopyNotTemplate(org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters parameters) { parameters.setAddImageDomainMapping(false); org.ovirt.engine.core.compat.Guid newImageId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.compat.Guid newId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = getImage(); image.setId(newId); image.setImageId(newImageId); image.setDiskAlias(getDiskAlias()); image.setStorageIds(new java.util.ArrayList()); image.getStorageIds().add(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()); image.setQuotaId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getQuotaId()); image.setDiskProfileId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getDiskProfileId()); image.setImageStatus(ImageStatus.LOCKED); image.setVmSnapshotId(null); image.setParentId(Guid.Empty); image.setImageTemplateId(Guid.Empty); parameters.setDestinationImageId(newImageId); parameters.setDestImageGroupId(newId); }
private void addStorageDomainMapForCopiedTemplateDisk() { imageStorageDomainMapDao.save(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getImageId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getQuotaId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getDiskProfileId())); }	private void addStorageDomainMapForCopiedTemplateDisk() { imageStorageDomainMapDao.save(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getImageId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getQuotaId(), getImage().getDiskProfileId())); }
protected void log() { final javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); try { try { auditLogDirector.log(this, org.ovirt.engine.core.bll.CommandBase.getAuditLogTypeValue()); } catch (final java.lang.RuntimeException ex) { log.error("Error during log command: {}. Exception {}", getClass().getName(), ex.getMessage()); log.debug("Exception", ex); } } finally { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); } }	protected void log() { final javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); try { auditLogDirector.log(this, org.ovirt.engine.core.bll.CommandBase.getAuditLogTypeValue()); } catch (final java.lang.RuntimeException ex) { log.error("Error during log command: {}. Exception {}", getClass().getName(), ex.getMessage()); log.debug("Exception", ex); } finally { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); } }
java.lang.String message() default "BAD_IPV4_OR_IPV6_ADDRESS_FORMAT";	java.lang.String message() default "";
protected static org.dbunit.database.IDatabaseConnection getConnection() throws java.lang.Exception { java.sql.Connection con = org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource.getConnection(); org.dbunit.database.IDatabaseConnection connection = new org.dbunit.database.DatabaseConnection(con); connection.getConfig().setProperty(DatabaseConfig.FEATURE_ALLOW_EMPTY_FIELDS, true); connection.getConfig().setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY, org.ovirt.engine.core.dao.BaseDaoTestCase.dataFactory); if (org.ovirt.engine.core.dao.BaseDaoTestCase.needInitializationSql) { try (java.sql.Statement stmt = con.createStatement()) { stmt.executeUpdate(org.ovirt.engine.core.dao.BaseDaoTestCase.initSql); } } return connection; }	protected static org.dbunit.database.IDatabaseConnection getConnection() throws java.lang.Exception { java.sql.Connection con = org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource.getConnection(); org.dbunit.database.IDatabaseConnection connection = new org.dbunit.database.DatabaseConnection(con); connection.getConfig().setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY, org.ovirt.engine.core.dao.BaseDaoTestCase.dataFactory); connection.getConfig().setProperty(DatabaseConfig.FEATURE_ALLOW_EMPTY_FIELDS, true); if (org.ovirt.engine.core.dao.BaseDaoTestCase.needInitializationSql) { try (java.sql.Statement stmt = con.createStatement()) { stmt.executeUpdate(org.ovirt.engine.core.dao.BaseDaoTestCase.initSql); } } return connection; }
@java.lang.Override public void setComment(java.lang.String value) { comment = value; }	public void setComment(java.lang.String value) { comment = value; }
@java.lang.Override public T mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { T entity = createNetworkEntity(); entity.setId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuidDefaultEmpty(rs, "id")); entity.setName(rs.getString("name")); entity.setDescription(rs.getString("description")); entity.setComment(rs.getString("free_text_comment")); entity.setType(((java.lang.Integer) (rs.getObject("type")))); entity.setAddr(rs.getString("addr")); entity.setSubnet(rs.getString("subnet")); entity.setGateway(rs.getString("gateway")); entity.setVlanId(((java.lang.Integer) (rs.getObject("vlan_id")))); entity.setStp(rs.getBoolean("stp")); entity.setDataCenterId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuidDefaultEmpty(rs, "storage_pool_id")); entity.setMtu(rs.getInt("mtu")); entity.setVmNetwork(rs.getBoolean("vm_network")); org.ovirt.engine.core.compat.Guid providerId = org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuid(rs, "provider_network_provider_id"); if (providerId != null) { entity.setProvidedBy(new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(providerId, rs.getString("provider_network_external_id"))); } entity.setQosId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuid(rs, "qos_id")); entity.setLabel(rs.getString("label")); entity.setDnsResolverConfiguration(new org.ovirt.engine.core.dao.DnsResolverConfigurationMapper().parseNameServersString(rs.getString("name_servers"))); return entity; }	@java.lang.Override public T mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { T entity = createNetworkEntity(); entity.setId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuidDefaultEmpty(rs, "id")); entity.setName(rs.getString("name")); entity.setDescription(rs.getString("description")); entity.setComment(rs.getString("free_text_comment")); entity.setType(((java.lang.Integer) (rs.getObject("type")))); entity.setAddr(rs.getString("addr")); entity.setSubnet(rs.getString("subnet")); entity.setGateway(rs.getString("gateway")); entity.setVlanId(((java.lang.Integer) (rs.getObject("vlan_id")))); entity.setStp(rs.getBoolean("stp")); entity.setDataCenterId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuidDefaultEmpty(rs, "storage_pool_id")); entity.setMtu(rs.getInt("mtu")); entity.setVmNetwork(rs.getBoolean("vm_network")); org.ovirt.engine.core.compat.Guid providerId = org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuid(rs, "provider_network_provider_id"); if (providerId != null) { entity.setProvidedBy(new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(providerId, rs.getString("provider_network_external_id"))); } entity.setQosId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuid(rs, "qos_id")); entity.setLabel(rs.getString("label")); org.ovirt.engine.core.compat.Guid dnsResolverConfigurationId = org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuid(rs, "dns_resolver_configuration_id"); entity.setDnsResolverConfiguration(dnsResolverConfigurationDao.get(dnsResolverConfigurationId)); return entity; }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper = createIdParameterMapper(networkAttachment.getId()).addValue("network_id", networkAttachment.getNetworkId()).addValue("nic_id", networkAttachment.getNicId()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(networkAttachment.getProperties())); mapIpConfiguration(networkAttachment, mapper); mapper.addValue("name_servers", new org.ovirt.engine.core.dao.DnsResolverConfigurationMapper().getNameServersString(networkAttachment.getDnsResolverConfiguration())); return mapper; }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper = createIdParameterMapper(networkAttachment.getId()).addValue("network_id", networkAttachment.getNetworkId()).addValue("nic_id", networkAttachment.getNicId()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(networkAttachment.getProperties())); mapIpConfiguration(networkAttachment, mapper); mapper.addValue("dns_resolver_configuration_id", getDnsResolverConfigurationId(networkAttachment)); return mapper; }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.Network network) { return getCustomMapSqlParameterSource().addValue("addr", network.getAddr()).addValue("description", network.getDescription()).addValue("free_text_comment", network.getComment()).addValue("id", network.getId()).addValue("name", network.getName()).addValue("subnet", network.getSubnet()).addValue("gateway", network.getGateway()).addValue("type", network.getType()).addValue("vlan_id", network.getVlanId()).addValue("stp", network.getStp()).addValue("storage_pool_id", network.getDataCenterId()).addValue("mtu", network.getMtu()).addValue("vm_network", network.isVmNetwork()).addValue("provider_network_provider_id", ((network.getProvidedBy()) == null ? null : network.getProvidedBy().getProviderId())).addValue("provider_network_external_id", ((network.getProvidedBy()) == null ? null : network.getProvidedBy().getExternalId())).addValue("qos_id", network.getQosId()).addValue("label", network.getLabel()).addValue("name_servers", new org.ovirt.engine.core.dao.DnsResolverConfigurationMapper().getNameServersString(network.getDnsResolverConfiguration())); }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.Network network) { return getCustomMapSqlParameterSource().addValue("addr", network.getAddr()).addValue("description", network.getDescription()).addValue("free_text_comment", network.getComment()).addValue("id", network.getId()).addValue("name", network.getName()).addValue("subnet", network.getSubnet()).addValue("gateway", network.getGateway()).addValue("type", network.getType()).addValue("vlan_id", network.getVlanId()).addValue("stp", network.getStp()).addValue("storage_pool_id", network.getDataCenterId()).addValue("mtu", network.getMtu()).addValue("vm_network", network.isVmNetwork()).addValue("provider_network_provider_id", ((network.getProvidedBy()) == null ? null : network.getProvidedBy().getProviderId())).addValue("provider_network_external_id", ((network.getProvidedBy()) == null ? null : network.getProvidedBy().getExternalId())).addValue("qos_id", network.getQosId()).addValue("label", network.getLabel()).addValue("dns_resolver_configuration_id", getDnsResolverConfigurationId(network)); }
org.ovirt.engine.core.vdsbroker.vdsbroker.VmDevicesListReturn listVmDevices(java.util.List<java.lang.String> vmIds);	org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlListReturn dumpxmls(java.util.List<java.lang.String> vmIds);
@java.lang.Override protected void executeVdsBrokerCommand() { vmDevicesListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVmDevicesVDSCommand.getBroker().listVmDevices(org.ovirt.engine.core.vdsbroker.vdsbroker.ListVmDevicesVDSCommand.getParameters().getVmIds()); org.ovirt.engine.core.vdsbroker.vdsbroker.ListVmDevicesVDSCommand.proceedProxyReturnValue(); setReturnValue(vmDevicesListReturn.getDevicesList()); }	@java.lang.Override protected void executeVdsBrokerCommand() { vmDevicesListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.DumpXmlsVDSCommand.getBroker().dumpxmls(org.ovirt.engine.core.vdsbroker.vdsbroker.DumpXmlsVDSCommand.getParameters().getVmIds()); org.ovirt.engine.core.vdsbroker.vdsbroker.DumpXmlsVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VmDevicesListReturn listVmDevices(java.util.List<java.lang.String> vmIds) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.getVMDevices").withOptionalParameterAsList("vmList", vmIds).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("vmDevices").withResponseType(java.lang.Object[].class); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmDevicesListReturn(response); }	public org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlListReturn dumpxmls(java.util.List<java.lang.String> vmIds) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.dumpxmls").withOptionalParameterAsList("vmList", vmIds).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("domxmls").withResponseType(java.lang.Object[].class); return new org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlListReturn(response); }
org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.VmStatic, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageLeaseListModel> getSubTabStorageLeaseModelProvider();	org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.VmBase, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageLeaseListModel> getSubTabStorageLeaseModelProvider();
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmStatic getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmBase getValue(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return vmBase; }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.VmStatic, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageLeaseListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageLeasePresenter.constants.storageLeaseSubTabLabel(), 8, modelProvider); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.VmBase, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageLeaseListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageLeasePresenter.constants.storageLeaseSubTabLabel(), 10, modelProvider); }
void initTable(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { if (storageDomain == null) { return; } getTable().enableColumnResizing(); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.typeColumn, "", true, "30px"); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.aliasColumn, org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.aliasDisk(), true, "120px"); }	void initTable(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { if (storageDomain == null) { return; } getTable().enableColumnResizing(); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.typeColumn, org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.empty(), true, "30px"); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.aliasColumn, org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.aliasDisk(), true, "120px"); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString((vmBase instanceof org.ovirt.engine.core.common.businessentities.VmStatic ? org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.vm() : org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.template())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic.getName(); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return vmBase.getName(); }
void initTableColumns() { getTable().enableColumnResizing(); org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.typeColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractColumn<org.ovirt.engine.core.common.businessentities.VmStatic, org.ovirt.engine.core.common.businessentities.VmStatic>(new org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.VmTypeCell()) { @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmStatic getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic; } @java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { } }; org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.aliasColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmStatic>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic.getName(); } }; }	void initTableColumns() { getTable().enableColumnResizing(); org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.typeColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractColumn<org.ovirt.engine.core.common.businessentities.VmBase, org.ovirt.engine.core.common.businessentities.VmBase>(new org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.VmTypeCell()) { @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmBase getValue(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return vmBase; } @java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString((vmBase instanceof org.ovirt.engine.core.common.businessentities.VmStatic ? org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.vm() : org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.template())); } }; org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.aliasColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmBase>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return vmBase.getName(); } }; }
@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.Context context, org.ovirt.engine.core.common.businessentities.VmStatic vm, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { com.google.gwt.resources.client.ImageResource image = (Guid.Empty.equals(vm.getVmtGuid())) ? org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.resources.vmImage() : org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.resources.templatesImage(); sb.append(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(image).getHTML())); }	@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.Context context, org.ovirt.engine.core.common.businessentities.VmBase vmBase, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { com.google.gwt.resources.client.ImageResource image = (vmBase instanceof org.ovirt.engine.core.common.businessentities.VmStatic) ? org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.resources.vmImage() : org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.resources.templatesImage(); sb.append(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(image).getHTML())); }
@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { setItems(null); return; } super.syncSearch(); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getEntity(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVmsWithLeaseByStorageId, new org.ovirt.engine.core.common.queries.IdQueryParameters(storageDomain.getId()), new org.ovirt.engine.ui.uicommonweb.models.storage.SetItemsAsyncQuery()); }	@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { setItems(null); return; } super.syncSearch(); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getEntity(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetEntitiesWithLeaseByStorageId, new org.ovirt.engine.core.common.queries.IdQueryParameters(storageDomain.getId()), new org.ovirt.engine.ui.uicommonweb.models.storage.SetItemsAsyncQuery()); }
private boolean isManagementNetworkChanged(org.ovirt.engine.core.common.businessentities.network.Network managementNetwork, java.util.List<org.ovirt.engine.core.common.vdscommands.HostNetwork> networksToConfigure) { java.lang.String mgmtNetworkName = managementNetwork.getName(); for (org.ovirt.engine.core.common.vdscommands.HostNetwork network : networksToConfigure) { if (mgmtNetworkName.equals(network.getNetworkName())) { return true; } } for (org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond : org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateOrUpdateBonds()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bondNic = getExistingNicsBusinessEntityMap().get(createOrUpdateBond.getId()); if ((bondNic != null) && (mgmtNetworkName.equals(bondNic.getNetworkName()))) { return true; } } return false; }	private boolean isManagementNetworkChanged(java.util.List<org.ovirt.engine.core.common.vdscommands.HostNetwork> networksToConfigure) { org.ovirt.engine.core.common.businessentities.network.Network managementNetwork = managementNetworkUtil.getManagementNetwork(getClusterNetworks(), org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getClusterId()); java.lang.String managementNetworkName = managementNetwork.getName(); for (org.ovirt.engine.core.common.vdscommands.HostNetwork network : networksToConfigure) { if (managementNetworkName.equals(network.getNetworkName())) { return true; } } for (org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond : org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateOrUpdateBonds()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bondNic = getExistingNicsBusinessEntityMap().get(createOrUpdateBond.getId()); if ((bondNic != null) && (managementNetworkName.equals(bondNic.getNetworkName()))) { return true; } } return false; }
private org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters createSetupNetworksParameters(int timeout) { org.ovirt.engine.core.common.network.SwitchType clusterSwitchType = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getCluster().getRequiredSwitchTypeForCluster(); org.ovirt.engine.core.common.businessentities.network.Network managementNetworkOfThisCluster = managementNetworkUtil.getManagementNetwork(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterId()); java.util.List<org.ovirt.engine.core.common.vdscommands.HostNetwork> networksToConfigure = calculateNetworksToConfigure(managementNetworkOfThisCluster); boolean managementNetworkChanged = isManagementNetworkChanged(managementNetworkOfThisCluster, networksToConfigure); final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters hostCmdParams = new org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds(), networksToConfigure, getAllNetworksToRemove(), org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateOrUpdateBonds(), getRemovedBondNames(), clusterSwitchType); hostCmdParams.setRollbackOnFailure(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().rollbackOnFailure()); hostCmdParams.setConnectivityTimeout(timeout); hostCmdParams.setManagementNetworkChanged(managementNetworkChanged); return hostCmdParams; }	private org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters createSetupNetworksParameters(int timeout) { org.ovirt.engine.core.common.network.SwitchType clusterSwitchType = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getCluster().getRequiredSwitchTypeForCluster(); java.util.List<org.ovirt.engine.core.common.vdscommands.HostNetwork> networksToConfigure = calculateNetworksToConfigure(); final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters hostCmdParams = new org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds(), networksToConfigure, getAllNetworksToRemove(), org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateOrUpdateBonds(), getRemovedBondNames(), clusterSwitchType); hostCmdParams.setRollbackOnFailure(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().rollbackOnFailure()); hostCmdParams.setConnectivityTimeout(timeout); hostCmdParams.setManagementNetworkChanged(isManagementNetworkChanged(networksToConfigure)); return hostCmdParams; }
private void testFillReportedConfiguration(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.HostNetworkQos networkQos) { nic.setNetworkName(network.getName()); when(interfaceDao.getAllInterfacesForVds(eq(hostId))).thenReturn(java.util.Arrays.asList(baseNic, vlanNic)); when(networkDao.getAllForCluster(eq(clusterId))).thenReturn(java.util.Collections.singletonList(network)); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); networkAttachment.setNicId(baseNic.getId()); networkAttachment.setNicName(baseNic.getName()); networkAttachment.setNetworkId(network.getId()); when(effectiveHostNetworkQos.getQos(networkAttachment, network)).thenReturn(networkQos); filler.fillReportedConfiguration(networkAttachment, hostId); verify(filler).createNetworkInSyncWithVdsNetworkInterface(networkAttachment, nic, network, vds, cluster); }	private void testFillReportedConfiguration(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.HostNetworkQos networkQos) { nic.setNetworkName(network.getName()); when(interfaceDao.getAllInterfacesForVds(eq(hostId))).thenReturn(java.util.Arrays.asList(baseNic, vlanNic)); when(networkDao.getAllForCluster(eq(clusterId))).thenReturn(java.util.Collections.singletonList(network)); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); networkAttachment.setNicId(baseNic.getId()); networkAttachment.setNicName(baseNic.getName()); networkAttachment.setNetworkId(network.getId()); when(effectiveHostNetworkQos.getQos(networkAttachment, network)).thenReturn(networkQos); filler.fillReportedConfiguration(networkAttachment, hostId); verify(filler).createNetworkInSyncWithVdsNetworkInterface(networkAttachment, nic, network, reportedDnsResolverConfiguration, cluster); }
java.lang.String setDnsConfigurationLabel();	java.lang.String shouldSetDnsConfigurationLabel();
private void initValues() { if ((networkAttachment) == null) { return; } boolean newAttachment = (networkAttachment.getId()) == null; boolean attachmentNotReportedByTheEngine = (networkAttachment.getReportedConfigurations()) == null; boolean syncedNetwork = attachmentNotReportedByTheEngine || (networkAttachment.getReportedConfigurations().isNetworkInSync()); boolean syncRequestedByUser = (!syncedNetwork) && (java.lang.Boolean.TRUE.equals(getIsToSync().getEntity())); if ((newAttachment || syncedNetwork) || syncRequestedByUser) { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNetworkAttachmentForModel(networkAttachment, networkQos, nic)); } else { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNic(nic)); } if ((networkAttachment.getDnsResolverConfiguration()) == null) { networkAttachment.setDnsResolverConfiguration(new org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration()); } this.getDnsConfigurationModel().setEntity(networkAttachment.getDnsResolverConfiguration()); }	private void initValues() { if ((networkAttachment) == null) { return; } boolean newAttachment = (networkAttachment.getId()) == null; boolean attachmentNotReportedByTheEngine = (networkAttachment.getReportedConfigurations()) == null; boolean syncedNetwork = attachmentNotReportedByTheEngine || (networkAttachment.getReportedConfigurations().isNetworkInSync()); boolean syncRequestedByUser = (!syncedNetwork) && (java.lang.Boolean.TRUE.equals(getIsToSync().getEntity())); if ((newAttachment || syncedNetwork) || syncRequestedByUser) { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNetworkAttachmentForModel(networkAttachment, networkQos, nic)); } else { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNic(nic, reportedDnsResolverConfiguration)); } }
@java.lang.Override public void edit(T model) { profilesEditor.edit(model.getProfiles()); subnetWidget.edit(model.getSubnetModel()); nameServerWidget.edit(model.getDnsConfigurationModel().getNameServerModelListModel()); }	@java.lang.Override public void edit(T model) { profilesEditor.edit(model.getProfiles()); subnetWidget.edit(model.getSubnetModel()); dnsServersWidget.edit(model.getDnsConfigurationModel().getNameServerModelListModel()); }
@java.lang.Override public T flush() { profilesEditor.flush(); subnetWidget.flush(); nameServerWidget.flush(); return null; }	@java.lang.Override public T flush() { profilesEditor.flush(); subnetWidget.flush(); dnsServersWidget.flush(); return null; }
@java.lang.Override protected void populateTabMap() { getTabNameMapping().put(TabName.IPV4_TAB, this.ipv4Tab); getTabNameMapping().put(TabName.IPV6_TAB, this.ipv6Tab); getTabNameMapping().put(TabName.QOS_TAB, this.qosTab); getTabNameMapping().put(TabName.CUSTOM_PROPERTIES_TAB, this.customPropertiesTab); getTabNameMapping().put(TabName.DNS_CONFIGURATION_TAB, this.dnsConfigurationTab); }	@java.lang.Override protected void populateTabMap() { getTabNameMapping().put(TabName.IPV4_TAB, this.ipv4Tab.getTabListItem()); getTabNameMapping().put(TabName.IPV6_TAB, this.ipv6Tab.getTabListItem()); getTabNameMapping().put(TabName.QOS_TAB, this.qosTab.getTabListItem()); getTabNameMapping().put(TabName.CUSTOM_PROPERTIES_TAB, this.customPropertiesTab.getTabListItem()); getTabNameMapping().put(TabName.DNS_CONFIGURATION_TAB, this.dnsConfigurationTab.getTabListItem()); }
public void init() { listenToSetDnsConfigurationCheckboxChanges(); boolean shouldSetDnsConfiguration = shouldSetDnsConfiguration(); setDnsConfiguration.setEntity(shouldSetDnsConfiguration); java.util.List<org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel> nameServerModels = new java.util.ArrayList<>(); if (shouldSetDnsConfiguration) { for (org.ovirt.engine.core.common.businessentities.network.NameServer nameServer : getEntity().getNameServers()) { nameServerModels.add(new org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel(nameServer)); } } nameServerModelListModel.setItems(nameServerModels); }	public void init() { boolean shouldSetDnsConfiguration = shouldSetDnsConfiguration(); this.shouldSetDnsConfiguration.setEntity(shouldSetDnsConfiguration); java.util.List<org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel> nameServerModels = new java.util.ArrayList<>(); if (shouldSetDnsConfiguration) { for (org.ovirt.engine.core.common.businessentities.network.NameServer nameServer : getEntity().getNameServers()) { nameServerModels.add(new org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel(nameServer.getAddress())); } } nameServerModelListModel.setItems(nameServerModels); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel object) { driver.edit(object); qosWidget.edit(object.getQosModel()); enableDisableByBootProtocol(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel) (sender)); java.lang.String propertyName = args.propertyName; if ("BootProtocolsAvailable".equals(propertyName)) { enableDisableByBootProtocol(model); } } }); if (object.getIsToSync().getIsChangable()) { isToSyncInfo.setVisible(true); } customPropertiesTab.setVisible(object.getCustomPropertiesModel().getIsAvailable()); customPropertiesWidget.edit(object.getCustomPropertiesModel()); customPropertiesLabel.setEnabled(object.getCustomPropertiesModel().getIsChangable()); dnsConfigurationTab.setVisible(true); dnsConfigurationWidget.edit(object.getDnsConfigurationModel()); }	@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel object) { driver.edit(object); qosWidget.edit(object.getQosModel()); enableDisableByBootProtocol(object); object.getPropertyChangedEvent().addListener(( ev, sender, args) -> { org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel) (sender)); java.lang.String propertyName = args.propertyName; if ("BootProtocolsAvailable".equals(propertyName)) { enableDisableByBootProtocol(model); } }); if (object.getIsToSync().getIsChangable()) { isToSyncInfo.setVisible(true); } customPropertiesTab.setVisible(object.getCustomPropertiesModel().getIsAvailable()); customPropertiesWidget.edit(object.getCustomPropertiesModel()); customPropertiesLabel.setEnabled(object.getCustomPropertiesModel().getIsChangable()); dnsServersWidget.edit(object.getDnsConfigurationModel().getNameServerModelListModel()); }
private void listenToSetDnsConfigurationCheckboxChanges() { org.ovirt.engine.ui.uicompat.Event<org.ovirt.engine.ui.uicompat.EventArgs> entityChangedEvent = setDnsConfiguration.getEntityChangedEvent(); entityChangedEvent.clearListeners(); entityChangedEvent.addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { nameServerModelListModel.setIsChangeable(setDnsConfiguration.getEntity()); } }); }	private void listenToSetDnsConfigurationCheckboxChanges() { org.ovirt.engine.ui.uicompat.Event<org.ovirt.engine.ui.uicompat.EventArgs> entityChangedEvent = shouldSetDnsConfiguration.getEntityChangedEvent(); entityChangedEvent.addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { nameServerModelListModel.setIsChangeable(shouldSetDnsConfiguration.getEntity()); } }); }
public boolean validate() { if (!(this.getSetDnsConfiguration().getEntity())) { setIsValid(true); return true; } boolean isValid = true; for (org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel nameServerModel : this.nameServerModelListModel.getItems()) { if (!(nameServerModel.validate())) { isValid = false; } } setIsValid(isValid); return isValid; }	public boolean validate() { if (!(this.getShouldSetDnsConfiguration().getEntity())) { setIsValid(true); return true; } java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel> items = this.nameServerModelListModel.getItems(); boolean exceedingNumberOfAddresses = (items.size()) > (org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.MAX_SUPPORTED_DNS_CONFIGURATIONS); boolean isValid = !exceedingNumberOfAddresses; for (org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel nameServerModel : items) { if (!(nameServerModel.validate())) { isValid = false; } } setIsValid(isValid); return isValid; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsChangable".equals(args.propertyName)) { boolean value = getIsChangable(); setDnsConfiguration.setIsChangeable(value); nameServerModelListModel.setIsChangeable(value); } }	@java.lang.Override public void setEntity(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration value) { super.setEntity(value); init(); }
public org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration flush() { java.lang.Boolean shouldSetDnsConfiguration = this.setDnsConfiguration.getEntity(); if (!shouldSetDnsConfiguration) { return null; } org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration dnsResolverConfiguration = new org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration(); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServers = new java.util.ArrayList<>(); dnsResolverConfiguration.setNameServers(nameServers); for (org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel nameServerModel : this.nameServerModelListModel.getItems()) { nameServers.add(nameServerModel.flush()); } return dnsResolverConfiguration; }	public org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration flush() { java.lang.Boolean shouldSetDnsConfiguration = this.shouldSetDnsConfiguration.getEntity(); if (!shouldSetDnsConfiguration) { return null; } java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServers = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel nameServerModel : this.nameServerModelListModel.getItems()) { nameServers.add(new org.ovirt.engine.core.common.businessentities.network.NameServer(nameServerModel.flush())); } org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration result = new org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration(); result.setNameServers(nameServers); if ((getEntity()) != null) { result.setId(getEntity().getId()); } return result; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { init(); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsChangable".equals(args.propertyName)) { boolean value = getIsChangable(); shouldSetDnsConfiguration.setIsChangeable(value); nameServerModelListModel.setIsChangeable(value); } }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getSetDnsConfiguration() { return setDnsConfiguration; }	public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getShouldSetDnsConfiguration() { return shouldSetDnsConfiguration; }
public boolean validate() { nameServerEntity.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.Ipv4OrIpv6AddressValidation() }); setIsValid(nameServerEntity.getIsValid()); return getIsValid(); }	public boolean validate() { validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.Ipv4OrIpv6AddressValidation() }); return getIsValid(); }
public org.ovirt.engine.core.common.businessentities.network.NameServer flush() { return new org.ovirt.engine.core.common.businessentities.network.NameServer(this.nameServerEntity.getEntity()); }	public java.lang.String flush() { return getEntity(); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { nameServerModelListModel.setIsChangeable(setDnsConfiguration.getEntity()); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { nameServerModelListModel.setIsChangeable(shouldSetDnsConfiguration.getEntity()); }
void initTable(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { if (storageDomain == null) { return; } getTable().enableColumnResizing(); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.typeColumn, org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.empty(), true, "30px"); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.aliasColumn, org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.aliasDisk(), true, "120px"); }	void initTable(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { if (storageDomain == null) { return; } getTable().enableColumnResizing(); getTable().ensureColumnVisible(typeColumn, org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.empty(), true, "30px"); getTable().ensureColumnVisible(aliasColumn, org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.aliasDisk(), true, "120px"); }
void initTableColumns() { getTable().enableColumnResizing(); org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.typeColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractColumn<org.ovirt.engine.core.common.businessentities.VmBase, org.ovirt.engine.core.common.businessentities.VmBase>(new org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.VmTypeCell()) { @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmBase getValue(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return vmBase; } @java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString((vmBase instanceof org.ovirt.engine.core.common.businessentities.VmStatic ? org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.vm() : org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.template())); } }; org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.aliasColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmBase>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return vmBase.getName(); } }; }	void initTableColumns() { getTable().enableColumnResizing(); typeColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractColumn<org.ovirt.engine.core.common.businessentities.VmBase, org.ovirt.engine.core.common.businessentities.VmBase>(new org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.VmTypeCell()) { @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmBase getValue(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return vmBase; } @java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString((vmBase instanceof org.ovirt.engine.core.common.businessentities.VmStatic ? org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.vm() : org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.template())); } }; aliasColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmBase>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return vmBase.getName(); } }; }
public org.ovirt.engine.core.bll.ValidationResult validateUsbDevices(org.ovirt.engine.core.common.businessentities.VmBase vm) { if ((vm.getUsbPolicy()) == (org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED)) { final java.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> usbControllers = getVmDeviceUtils().getUsbControllers(vm.getId()); final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> unmanagedControllers = usbControllers.stream().filter(( d) -> !(d.isManaged())).collect(java.util.stream.Collectors.toList()); if ((unmanagedControllers.size()) > 1) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_USB_UNMANAGED_DEV_EXCEEDED_LIMIT, java.lang.String.format("$VmName %1$s", vm.getName()), java.lang.String.format("$UnmanagedUsbDevices %1$s", unmanagedControllers)); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult validateUsbDevices(org.ovirt.engine.core.common.businessentities.VmBase vm) { if ((vm.getUsbPolicy()) == (org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED)) { final java.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> usbControllers = getVmDeviceUtils().getUsbControllers(vm.getId()); final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> unmanagedControllers = usbControllers.stream().filter(( d) -> !(d.isManaged())).collect(java.util.stream.Collectors.toList()); if ((unmanagedControllers.size()) > 1) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_USB_UNMANAGED_DEV_EXCEEDED_LIMIT); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void setVmLeasesAvailability() { TModel model = getModel(); org.ovirt.engine.core.compat.Version compVer = model.getSelectedCluster().getCompatibilityVersion(); if ((model.getCustomCompatibilityVersion().getSelectedItem()) != null) { compVer = model.getCustomCompatibilityVersion().getSelectedItem(); } vmLeasesSupported = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isVmLeasesFeatureSupported(compVer); if (!(vmLeasesSupported)) { model.getLease().setIsChangeable(false, constants.vmLeasesSupported()); } else { model.getLease().setIsChangeable(model.getIsHighlyAvailable().getEntity()); } }	private void setVmLeasesAvailability() { TModel model = getModel(); org.ovirt.engine.core.compat.Version compVer = model.getSelectedCluster().getCompatibilityVersion(); if ((model.getCustomCompatibilityVersion().getSelectedItem()) != null) { compVer = model.getCustomCompatibilityVersion().getSelectedItem(); } boolean vmLeasesSupported = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isVmLeasesFeatureSupported(compVer); if (!vmLeasesSupported) { model.getLease().setIsChangeable(false, constants.vmLeasesSupported()); } else { model.getLease().setIsChangeable(model.getIsHighlyAvailable().getEntity()); if (!(model.getIsHighlyAvailable().getEntity())) { model.getLease().setChangeProhibitionReason(constants.vmLeasesNotSupportedWithoutHA()); } } }
protected void commonInitialize() { priorityUtil = new org.ovirt.engine.ui.uicommonweb.models.vms.PriorityUtil(getModel()); virtioScsiUtil = new org.ovirt.engine.ui.uicommonweb.models.vms.VirtioScsiUtil(getModel()); getModel().getVmId().setIsAvailable(false); getModel().getLease().setIsChangeable(false); getModel().getIsHighlyAvailable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean ha = getModel().getIsHighlyAvailable().getEntity(); getModel().getLease().setIsChangeable(((vmLeasesSupported) && ha)); if (!ha) { getModel().getLease().setSelectedItem(null); } } }); getModel().getMigrationPolicies().setItems(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getMigrationPolicies(org.ovirt.engine.core.compat.Version.getLast())); }	protected void commonInitialize() { priorityUtil = new org.ovirt.engine.ui.uicommonweb.models.vms.PriorityUtil(getModel()); virtioScsiUtil = new org.ovirt.engine.ui.uicommonweb.models.vms.VirtioScsiUtil(getModel()); getModel().getVmId().setIsAvailable(false); getModel().getLease().setIsChangeable(false); getModel().getIsHighlyAvailable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean ha = getModel().getIsHighlyAvailable().getEntity(); setVmLeasesAvailability(); if (!ha) { getModel().getLease().setSelectedItem(null); } } }); getModel().getMigrationPolicies().setItems(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getMigrationPolicies(org.ovirt.engine.core.compat.Version.getLast())); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean ha = getModel().getIsHighlyAvailable().getEntity(); getModel().getLease().setIsChangeable(((vmLeasesSupported) && ha)); if (!ha) { getModel().getLease().setSelectedItem(null); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean ha = getModel().getIsHighlyAvailable().getEntity(); setVmLeasesAvailability(); if (!ha) { getModel().getLease().setSelectedItem(null); } }
private org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters createParameters() { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(diskId, vmId); dve.setReadOnly(true); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters parameters = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(); return parameters; }	private org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters createParameters() { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(diskId, vmId); dve.setReadOnly(true); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters parameters = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve); return parameters; }
@org.junit.Test public void testInactiveDomainInList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(StorageDomainStatus.Inactive); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLockedDomainList(domainsList); assertFalse(listReturned.isEmpty()); }	@org.junit.Test public void testInactiveDomainInList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(StorageDomainStatus.Inactive); domainsList.add(tempStorageDomains); assertFalse(cmd.validateDomainsInMaintenance(domainsList)); }
private void testBusyAndActiveDomainInList(org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(status); domainsList.add(tempStorageDomains); tempStorageDomains.setStatus(StorageDomainStatus.Active); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLockedDomainList(domainsList); assertEquals(2, listReturned.size()); }	private void testBusyAndActiveDomainInList(org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(status); domainsList.add(tempStorageDomains); tempStorageDomains.setStatus(StorageDomainStatus.Active); domainsList.add(tempStorageDomains); assertFalse(cmd.validateDomainsInMaintenance(domainsList)); }
@org.junit.Test public void testActiveDomainInList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(StorageDomainStatus.Active); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLockedDomainList(domainsList); assertTrue((!(listReturned.isEmpty()))); }	@org.junit.Test public void testActiveDomainInList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(StorageDomainStatus.Active); domainsList.add(tempStorageDomains); assertFalse(cmd.validateDomainsInMaintenance(domainsList)); }
protected boolean checkStorageDomainStatus(final org.ovirt.engine.core.common.businessentities.StorageDomainStatus... statuses) { return checkStorageDomainStatus(new java.util.HashSet(java.util.Arrays.asList(statuses))); }	protected boolean checkStorageDomainStatus(final org.ovirt.engine.core.common.businessentities.StorageDomainStatus... statuses) { return checkStorageDomainStatus(java.util.Arrays.stream(statuses).collect(java.util.stream.Collectors.toSet())); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> getMonitoredOrLockedDomainList(java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList) { return domainsList.stream().filter(( d) -> (StorageConstants.monitoredDomainStatuses.contains(d.getStatus())) || (d.getStatus().isStorageDomainInProcess())).collect(java.util.stream.Collectors.toList()); }	protected boolean validateDomainsInMaintenance(java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList) { if (domainsList.stream().anyMatch(( d) -> (d.getStatus()) != StorageDomainStatus.Maintenance)) { return failValidation(EngineMessage.ERROR_CANNOT_REMOVE_POOL_WITH_ACTIVE_DOMAINS); } return true; }
@org.junit.Test public void testEmptyDomainList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLockedDomainList(domainsList); assertTrue(listReturned.isEmpty()); }	@org.junit.Test public void testEmptyDomainList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); assertTrue(cmd.validateDomainsInMaintenance(domainsList)); }
private void testBusyDomainInList(org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(status); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLockedDomainList(domainsList); assertTrue((!(listReturned.isEmpty()))); }	private void testBusyDomainInList(org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(status); domainsList.add(tempStorageDomains); assertFalse(cmd.validateDomainsInMaintenance(domainsList)); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksList() { if ((cachedSelectedActiveDisks) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesAndCinderForVm = getDiskImagesForVm(); if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDisks()) == null) { cachedSelectedActiveDisks = imagesAndCinderForVm; } else { cachedSelectedActiveDisks = getDiskImagesForVm().stream().filter(( d) -> getParameters().getDisks().contains(d.getId())).collect(java.util.stream.Collectors.toList()); } } return cachedSelectedActiveDisks; }	protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksList() { if ((cachedSelectedActiveDisks) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesAndCinderForVm = getDiskImagesForVm(); if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDiskIds()) == null) { cachedSelectedActiveDisks = imagesAndCinderForVm; } else { cachedSelectedActiveDisks = getDiskImagesForVm().stream().filter(( d) -> getParameters().getDiskIds().contains(d.getId())).collect(java.util.stream.Collectors.toList()); } } return cachedSelectedActiveDisks; }
@org.junit.Test public void testImagesDoesNotExist() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage1 = org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getNewDiskImage(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage2 = org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getNewDiskImage(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImagesFromParams = new java.util.ArrayList<>(); diskImagesFromParams.addAll(java.util.Arrays.asList(diskImage1, diskImage2)); java.util.Set<org.ovirt.engine.core.compat.Guid> guidsForDiskImages = diskImagesFromParams.stream().map(DiskImage::getId).collect(java.util.stream.Collectors.toSet()); cmd.getParameters().setDisks(guidsForDiskImages); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST)).when(diskImagesValidator).diskImagesNotExist(guidsForDiskImages); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST); }	@org.junit.Test public void testImagesDoesNotExist() { java.util.Set<org.ovirt.engine.core.compat.Guid> guidsForDiskImages = new java.util.HashSet(java.util.Arrays.asList(org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid())); cmd.getParameters().setDiskIds(guidsForDiskImages); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST)).when(diskExistenceValidator).diskImagesNotExist(); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST); }
protected org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Set<org.ovirt.engine.core.compat.Guid> diskIds = vm.getDiskList().stream().map(BaseDisk::getId).collect(java.util.stream.Collectors.toSet()); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters params = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(vm.getId(), (((vm.getName()) + (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getStorageDomain().getName())) + (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.DR_SNAPSHOT_NAME_SUFFIX)), false); params.setParentCommand(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getActionType()); params.setSnapshotType(SnapshotType.REGULAR); params.setParentParameters(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters()); params.setDisks(diskIds); params.setNeedsLocking(false); params.setEndProcedure(EndProcedure.COMMAND_MANAGED); return params; }	protected org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Set<org.ovirt.engine.core.compat.Guid> diskIds = vm.getDiskList().stream().map(BaseDisk::getId).collect(java.util.stream.Collectors.toSet()); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters params = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(vm.getId(), (((vm.getName()) + (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getStorageDomain().getName())) + (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.DR_SNAPSHOT_NAME_SUFFIX)), false); params.setParentCommand(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getActionType()); params.setSnapshotType(SnapshotType.REGULAR); params.setParentParameters(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters()); params.setDiskIds(diskIds); params.setNeedsLocking(false); params.setEndProcedure(EndProcedure.COMMAND_MANAGED); return params; }
private void fastForwardDisksToActiveSnapshot() { if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDisks()) != null) { getDiskImagesForVm().stream().filter(( d) -> !(getParameters().getDisks().contains(d.getId()))).forEach(( d) -> org.ovirt.engine.core.bll.snapshots.imageDao.updateImageVmSnapshotId(d.getImageId(), newActiveSnapshotId)); } }	private void fastForwardDisksToActiveSnapshot() { if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDiskIds()) != null) { getDiskImagesForVm().stream().filter(( d) -> !(getParameters().getDiskIds().contains(d.getId()))).forEach(( d) -> imageDao.updateImageVmSnapshotId(d.getImageId(), newActiveSnapshotId)); } }
private boolean isSpecifiedDisksExist(java.util.Set<org.ovirt.engine.core.compat.Guid> disks) { if ((disks == null) || (disks.isEmpty())) { return true; } org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = createDiskImageValidator(new java.util.ArrayList<>()); if (!(validate(diskImagesValidator.diskImagesNotExist(disks)))) { return false; } return true; }	private boolean isSpecifiedDisksExist(java.util.Set<org.ovirt.engine.core.compat.Guid> disks) { if ((disks == null) || (disks.isEmpty())) { return true; } org.ovirt.engine.core.bll.validator.storage.DiskExistenceValidator diskExistenceValidator = createDiskExistenceValidator(disks); if (!(validate(diskExistenceValidator.diskImagesNotExist()))) { return false; } return true; }
@org.junit.Test public void validProviderType() { when(provider.getType()).thenReturn(ProviderType.OPENSTACK_NETWORK); assertThat(validator.providerTypeIsOpenstack(), isValid()); }	@org.junit.Test public void validOpenstackProviderType() { when(provider.getType()).thenReturn(ProviderType.OPENSTACK_NETWORK); assertThat(validator.providerTypeIsOpenstack(), isValid()); }
private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus fetchedStatus) { org.ovirt.engine.core.bll.gluster.GlusterSyncJob.log.debug("Detected that status of brick '{}' in volume '{}' changed from '{}' to '{}'", brick.getQualifiedName(), volume.getName(), brick.getStatus(), fetchedStatus); java.util.Map<java.lang.String, java.lang.String> customValues = new java.util.HashMap<>(); customValues.put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); customValues.put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); customValues.put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); logUtil.logAuditMessage(volume.getClusterId(), volume.getClusterName(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, customValues); if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN); } }	private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus fetchedStatus) { org.ovirt.engine.core.bll.gluster.GlusterSyncJob.log.debug("Detected that status of brick '{}' in volume '{}' changed from '{}' to '{}'", brick.getQualifiedName(), volume.getName(), brick.getStatus(), fetchedStatus); java.util.Map<java.lang.String, java.lang.String> customValues = new java.util.HashMap<>(); customValues.put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); customValues.put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); customValues.put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); logUtil.logAuditMessage(volume.getClusterId(), volume.getClusterName(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, customValues); if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { logUtil.logAuditMessage(volume, AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { alertDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN); } }
public void logServerMessage(final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType) { logAuditMessage((server == null ? org.ovirt.engine.core.compat.Guid.Empty : server.getClusterId()), (server == null ? null : server.getClusterName()), null, server, logType, java.util.Collections.emptyMap()); }	public void logServerMessage(final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType) { logAuditMessage(server.getClusterId(), server.getClusterName(), null, server, logType, java.util.Collections.emptyMap()); }
public void logAuditMessage(final org.ovirt.engine.core.compat.Guid clusterId, final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType, final org.ovirt.engine.core.compat.Guid brickId, final java.lang.String brickPath) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = createEvent(volume, server, clusterId, server.getClusterName()); logable.setBrickId(brickId); logable.setBrickPath(brickPath); auditLogDirector.log(logable, logType); }	public void logAuditMessage(final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.AuditLogType logType, final org.ovirt.engine.core.compat.Guid brickId, final java.lang.String brickPath) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = createEvent(volume, null, volume.getClusterId(), volume.getClusterName()); logable.setBrickId(brickId); logable.setBrickPath(brickPath); auditLogDirector.log(logable, logType); }
public void logAuditMessage(final org.ovirt.engine.core.compat.Guid clusterId, java.lang.String clusterName, final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType, final java.util.Map<java.lang.String, java.lang.String> customValues) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = createEvent(volume, server, clusterId, clusterName); if (customValues != null) { for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : customValues.entrySet()) { logable.addCustomValue(entry.getKey(), entry.getValue()); } } auditLogDirector.log(logable, logType); }	public void logAuditMessage(final org.ovirt.engine.core.compat.Guid clusterId, java.lang.String clusterName, final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType, final java.util.Map<java.lang.String, java.lang.String> customValues) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = createEvent(volume, server, clusterId, clusterName); if (customValues != null) { customValues.entrySet().forEach(( e) -> logable.addCustomValue(e.getKey(), e.getValue())); } auditLogDirector.log(logable, logType); }
private java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid lunFromVgLunId, org.ovirt.engine.core.compat.Guid lunFromDbLunId, org.ovirt.engine.core.compat.Guid lunFromVgPvId, org.ovirt.engine.core.compat.Guid lunFromDbPvId) { setLunsIds(lunFromVgLunId, lunFromDbLunId, lunFromVgPvId, lunFromDbPvId); return getLunsToUpdateInDb(); }	private java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid lunFromVgLunId, org.ovirt.engine.core.compat.Guid lunFromDbLunId, org.ovirt.engine.core.compat.Guid lunFromVgPvId, org.ovirt.engine.core.compat.Guid lunFromDbPvId) { setLunsIds(lunFromVgLunId, lunFromDbLunId, lunFromVgPvId, lunFromDbPvId); return getLunsToUpdateInDb(); }
private java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = java.util.Collections.singletonList(lunFromVg); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = java.util.Collections.singletonList(lunFromDb); return command.getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); }	private java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = java.util.Collections.singletonList(lunFromVg); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = java.util.Collections.singletonList(lunFromDb); return command.getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); }
@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDb = getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); boolean dbShouldBeUpdated = lunsToUpdateInDb.keySet().stream().anyMatch(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler::requiresDbUpdate); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { updateLunsInDb(lunsToUpdateInDb); refreshLunsConnections(lunsFromVgInfo); cleanupLunsFromDb(lunsFromVgInfo, lunsFromDb); return null; }); } org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDb = getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); boolean dbShouldBeUpdated = lunsToUpdateInDb.keySet().stream().anyMatch(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunHandler::requiresDbUpdate); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { updateLunsInDb(lunsToUpdateInDb); refreshLunsConnections(lunsFromVgInfo); cleanupLunsFromDb(lunsFromVgInfo, lunsFromDb); return null; }); } org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }
protected java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDbMap = lunsFromDb.stream().collect(java.util.stream.Collectors.toMap(LUNs::getLUNId, java.util.function.Function.identity())); return lunsFromVgInfo.stream().collect(java.util.stream.Collectors.groupingBy(( lunFromVgInfo) -> { org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDb = lunsFromDbMap.get(lunFromVgInfo.getLUNId()); if (lunFromDb == null) { return saveNewLuns; } boolean lunFromDbHasSamePvId = java.util.Objects.equals(lunFromDb.getPhysicalVolumeId(), lunFromVgInfo.getPhysicalVolumeId()); if (lunFromDbHasSamePvId) { if ((((lunFromDb.getDeviceSize()) != (lunFromVgInfo.getDeviceSize())) || (!(java.util.Objects.equals(lunFromDb.getDiscardMaxSize(), lunFromVgInfo.getDiscardMaxSize())))) || (!(java.util.Objects.equals(lunFromDb.getDiscardZeroesData(), lunFromVgInfo.getDiscardZeroesData())))) { return updateExistingLuns; } return noOp; } return updateExistingLuns; })); }	protected java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDbMap = lunsFromDb.stream().collect(java.util.stream.Collectors.toMap(LUNs::getLUNId, java.util.function.Function.identity())); return lunsFromVgInfo.stream().collect(java.util.stream.Collectors.groupingBy(( lunFromVgInfo) -> { org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDb = lunsFromDbMap.get(lunFromVgInfo.getLUNId()); if (lunFromDb == null) { return saveLunsHandler; } boolean lunFromDbHasSamePvId = java.util.Objects.equals(lunFromDb.getPhysicalVolumeId(), lunFromVgInfo.getPhysicalVolumeId()); if (lunFromDbHasSamePvId) { if ((((lunFromDb.getDeviceSize()) != (lunFromVgInfo.getDeviceSize())) || (!(java.util.Objects.equals(lunFromDb.getDiscardMaxSize(), lunFromVgInfo.getDiscardMaxSize())))) || (!(java.util.Objects.equals(lunFromDb.getDiscardZeroesData(), lunFromVgInfo.getDiscardZeroesData())))) { return updateLunsHandler; } return noOp; } return updateLunsHandler; })); }
protected void updateLunsInDb(java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDbMap) { lunsToUpdateInDbMap.entrySet().forEach(( entry) -> entry.getKey().accept(entry.getValue())); if (lunsToUpdateInDbMap.keySet().stream().anyMatch(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler::affectsDiscardFunctionality)) { java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToUpdateInDb = lunsToUpdateInDbMap.entrySet().stream().filter(( entry) -> entry.getKey().affectsDiscardFunctionality()).map(java.util.Map.Entry::getValue).flatMap(java.util.List::stream).collect(java.util.stream.Collectors.toList()); discardHelper.logIfLunsBreakStorageDomainDiscardFunctionality(lunsToUpdateInDb, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomainId()); } }	protected void updateLunsInDb(java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDbMap) { lunsToUpdateInDbMap.entrySet().forEach(( entry) -> entry.getKey().accept(entry.getValue())); if (lunsToUpdateInDbMap.keySet().stream().anyMatch(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunHandler::affectsDiscardFunctionality)) { java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToUpdateInDb = lunsToUpdateInDbMap.entrySet().stream().filter(( entry) -> entry.getKey().affectsDiscardFunctionality()).map(java.util.Map.Entry::getValue).flatMap(java.util.List::stream).collect(java.util.stream.Collectors.toList()); discardHelper.logIfLunsBreakStorageDomainDiscardFunctionality(lunsToUpdateInDb, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomainId()); } }
@org.junit.Test public void testGetLunsToUpdateInDbLunExistsInDbButNoInVgInfo() { org.ovirt.engine.core.compat.Guid lunFromDbId = org.ovirt.engine.core.compat.Guid.newGuid(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToRemoveFromDb = getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid.newGuid(), lunFromDbId, org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid()).get(command.removeLuns); assertLunIdInList(lunsToRemoveFromDb, lunFromDbId); }	@org.junit.Test public void testGetLunsToUpdateInDbLunExistsInDbButNotInVgInfo() { org.ovirt.engine.core.compat.Guid lunFromDbId = org.ovirt.engine.core.compat.Guid.newGuid(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToRemoveFromDb = getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid.newGuid(), lunFromDbId, org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid()).get(command.removeLunsHandler); assertLunIdInList(lunsToRemoveFromDb, lunFromDbId); }
@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDb = getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); boolean dbShouldBeUpdated = lunsToUpdateInDb.keySet().stream().anyMatch(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler::requiresDbUpdate); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { updateLunsInDb(lunsToUpdateInDb); refreshLunsConnections(lunsFromVgInfo); return null; }); } org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDb = getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); boolean dbShouldBeUpdated = lunsToUpdateInDb.keySet().stream().anyMatch(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunHandler::requiresDbUpdate); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { updateLunsInDb(lunsToUpdateInDb); refreshLunsConnections(lunsFromVgInfo); return null; }); } org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }
@org.junit.Test public void testGetLunsToRemoveFromDb() { lunFromVg.setLUNId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); lunFromDb.setLUNId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); org.ovirt.engine.core.common.businessentities.storage.LUNs dummyLun = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); dummyLun.setId(((org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.DUMMY_LUN_ID_PREFIX) + (org.ovirt.engine.core.compat.Guid.newGuid().toString()))); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = java.util.Collections.singletonList(lunFromVg); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = java.util.Arrays.asList(lunFromDb, dummyLun); assertTrue(isEqualCollection(command.getLunsToRemoveFromDb(lunsFromVgInfo, lunsFromDb), java.util.Collections.singletonList(lunFromDb))); }	@org.junit.Test public void testGetLunsToRemoveFromDb() { lunFromVg.setLUNId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); lunFromDb.setLUNId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); org.ovirt.engine.core.common.businessentities.storage.LUNs dummyLun = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); dummyLun.setId(((org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.DUMMY_LUN_ID_PREFIX) + (org.ovirt.engine.core.compat.Guid.newGuid().toString()))); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = java.util.Collections.singletonList(lunFromVg); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = java.util.Arrays.asList(lunFromDb, dummyLun); assertEquals(command.getLunsToRemoveFromDb(lunsFromVgInfo, lunsFromDb), java.util.Collections.singletonList(lunFromDb)); }
public org.ovirt.engine.core.bll.ValidationResult allDomainsHaveSpaceForMerge(java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo> snapshots, org.ovirt.engine.core.common.action.VdcActionType snapshotActionType) { final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.SubchainInfo> storageToSnapshots = getDomainsToSnapshotsMap(snapshots); return validOrFirstFailure(( entry) -> { org.ovirt.engine.core.compat.Guid sdId = entry.getKey(); org.ovirt.engine.core.common.businessentities.SubchainInfo subchain = storageToSnapshots.get(sdId); return getStorageDomainValidator(entry).hasSpaceForMerge(subchain, snapshotActionType); }); }	public org.ovirt.engine.core.bll.ValidationResult allDomainsHaveSpaceForMerge(java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo> snapshots, org.ovirt.engine.core.common.action.VdcActionType snapshotActionType) { final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo>> storageToSnapshots = getDomainsToSnapshotsMap(snapshots); return validOrFirstFailure(( entry) -> { org.ovirt.engine.core.compat.Guid sdId = entry.getKey(); java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo> subchain = storageToSnapshots.get(sdId); return getStorageDomainValidator(entry).hasSpaceForMerge(subchain, snapshotActionType); }); }
public org.ovirt.engine.core.bll.ValidationResult hasSpaceForMerge(org.ovirt.engine.core.common.businessentities.SubchainInfo subchain, org.ovirt.engine.core.common.action.VdcActionType snapshotActionType) { if (storageDomain.getStorageType().isCinderDomain()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.lang.Long availableSize = storageDomain.getAvailableDiskSizeInBytes(); double totalSizeForDisks = getRequiredSizeForMerge(subchain, snapshotActionType); return validateRequiredSpace(availableSize, totalSizeForDisks); }	public org.ovirt.engine.core.bll.ValidationResult hasSpaceForMerge(java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo> subchains, org.ovirt.engine.core.common.action.VdcActionType snapshotActionType) { if (storageDomain.getStorageType().isCinderDomain()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.lang.Long availableSize = storageDomain.getAvailableDiskSizeInBytes(); double totalSizeForDisks = getTotalSizeForMerge(subchains, snapshotActionType); return validateRequiredSpace(availableSize, totalSizeForDisks); }
private double getRequiredSizeForMerge(org.ovirt.engine.core.common.businessentities.SubchainInfo subchain, org.ovirt.engine.core.common.action.VdcActionType snapshotActionType) { org.ovirt.engine.core.common.businessentities.storage.DiskImage baseSnapshot = subchain.getBaseImage(); org.ovirt.engine.core.common.businessentities.storage.DiskImage topSnapshot = subchain.getTopImage(); if (snapshotActionType == (org.ovirt.engine.core.common.action.VdcActionType.RemoveSnapshotSingleDisk)) { return (java.lang.Math.min(((baseSnapshot.getActualSizeInBytes()) + (topSnapshot.getActualSizeInBytes())), baseSnapshot.getSize())) * (org.ovirt.engine.core.common.constants.StorageConstants.QCOW_OVERHEAD_FACTOR); } org.ovirt.engine.core.common.businessentities.storage.VolumeType volumeType = (snapshotActionType == (org.ovirt.engine.core.common.action.VdcActionType.ColdMergeSnapshotSingleDisk)) ? baseSnapshot.getVolumeType() : topSnapshot.getVolumeType(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(baseSnapshot.getParentId())) { if ((baseSnapshot.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.RAW)) { if (volumeType == (org.ovirt.engine.core.common.businessentities.storage.VolumeType.Preallocated)) { return 0.0; } return java.lang.Math.min(((topSnapshot.getActualSizeInBytes()) / (org.ovirt.engine.core.common.constants.StorageConstants.QCOW_OVERHEAD_FACTOR)), ((baseSnapshot.getSize()) - (baseSnapshot.getActualSizeInBytes()))); } } return java.lang.Math.min((((topSnapshot.getSize()) * (org.ovirt.engine.core.common.constants.StorageConstants.QCOW_OVERHEAD_FACTOR)) - (baseSnapshot.getActualSizeInBytes())), topSnapshot.getActualSizeInBytes()); }	private double getRequiredSizeForMerge(org.ovirt.engine.core.common.businessentities.SubchainInfo subchain, org.ovirt.engine.core.common.action.VdcActionType snapshotActionType) { org.ovirt.engine.core.common.businessentities.storage.DiskImage baseSnapshot = subchain.getBaseImage(); org.ovirt.engine.core.common.businessentities.storage.DiskImage topSnapshot = subchain.getTopImage(); if (snapshotActionType == (org.ovirt.engine.core.common.action.VdcActionType.RemoveSnapshotSingleDisk)) { return (java.lang.Math.min(((baseSnapshot.getActualSizeInBytes()) + (topSnapshot.getActualSizeInBytes())), baseSnapshot.getSize())) * (org.ovirt.engine.core.common.constants.StorageConstants.QCOW_OVERHEAD_FACTOR); } if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(baseSnapshot.getParentId())) { if ((baseSnapshot.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.RAW)) { if ((baseSnapshot.getVolumeType()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeType.Preallocated)) { return 0.0; } return java.lang.Math.min(((topSnapshot.getActualSizeInBytes()) / (org.ovirt.engine.core.common.constants.StorageConstants.QCOW_OVERHEAD_FACTOR)), ((baseSnapshot.getSize()) - (baseSnapshot.getActualSizeInBytes()))); } } return java.lang.Math.min((((topSnapshot.getSize()) * (org.ovirt.engine.core.common.constants.StorageConstants.QCOW_OVERHEAD_FACTOR)) - (baseSnapshot.getActualSizeInBytes())), topSnapshot.getActualSizeInBytes()); }
private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.SubchainInfo> getDomainsToSnapshotsMap(java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo> snapshots) { return snapshots.stream().collect(java.util.stream.Collectors.toMap(SubchainInfo::getStorageDomainId, java.util.function.Function.identity())); }	private java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo>> getDomainsToSnapshotsMap(java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo> snapshots) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo>> domainsDisksMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.SubchainInfo subchain : snapshots) { org.ovirt.engine.core.utils.collections.MultiValueMapUtils.addToMap(subchain.getStorageDomainId(), subchain, domainsDisksMap); } return domainsDisksMap; }
protected javax.ws.rs.core.Response doAction(final org.ovirt.engine.core.common.action.VdcActionType task, final org.ovirt.engine.core.common.action.VdcActionParametersBase params, final org.ovirt.engine.api.model.Action action, org.ovirt.engine.api.restapi.resource.AbstractBackendResource.PollingType pollingType) { awaitGrace(action); try { org.ovirt.engine.core.common.action.VdcReturnValueBase actionResult = doAction(task, params); if ((actionResult.getJobId()) != null) { setJobLink(action, actionResult); } if ((actionResult.getHasAsyncTasks()) || ((actionResult.getJobId()) != null)) { if (expectBlocking(action)) { org.ovirt.engine.api.model.CreationStatus status = awaitCompletion(actionResult, pollingType); return actionStatus(status, action, addLinks(newModel(id))); } else { return actionAsync(actionResult, action); } } else { return actionSuccess(action, addLinks(newModel(id))); } } catch (java.lang.Exception e) { return handleError(e, action); } }	protected javax.ws.rs.core.Response doAction(final org.ovirt.engine.core.common.action.VdcActionType task, final org.ovirt.engine.core.common.action.VdcActionParametersBase params, final org.ovirt.engine.api.model.Action action, org.ovirt.engine.api.restapi.resource.AbstractBackendResource.PollingType pollingType) { awaitGrace(action); try { org.ovirt.engine.core.common.action.VdcReturnValueBase actionResult = doAction(task, params); if ((actionResult.getJobId()) != null) { setJobLink(action, actionResult); } if (actionResult.getHasAsyncTasks()) { if (expectBlocking(action)) { org.ovirt.engine.api.model.CreationStatus status = awaitCompletion(actionResult, pollingType); return actionStatus(status, action, addLinks(newModel(id))); } else { return actionAsync(actionResult, action); } } else { return actionSuccess(action, addLinks(newModel(id))); } } catch (java.lang.Exception e) { return handleError(e, action); } }
private void cancel() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())); setWindow(null); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = windowModel.getCurrentProxies(); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> items = currentModels.getItems(); items.remove(this); currentModels.setItems(null); currentModels.setItems(items); }	private void cancel() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = windowModel.getCurrentProxies(); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> items = currentModels.getItems(); currentModels.setItems(null); items.remove(this); currentModels.setItems(items); setWindow(null); }
private void onOk() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())); setWindow(null); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = windowModel.getCurrentProxies(); org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel selectedModel = windowModel.getAvailableProxies().getSelectedItem(); setEntity(selectedModel.getEntity()); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> items = currentModels.getItems(); currentModels.setItems(null); currentModels.setItems(items); }	private void onOk() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = windowModel.getCurrentProxies(); org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel selectedModel = windowModel.getAvailableProxies().getSelectedItem(); setEntity(selectedModel.getEntity()); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> items = currentModels.getItems(); currentModels.setItems(null); currentModels.setItems(items); setWindow(null); }
public boolean checkDomainMetadataDevices(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable, org.ovirt.engine.core.common.businessentities.StorageDomain domain) { if (((domain.getVgMetadataDevice()) == null) || ((domain.getFirstMetadataDevice()) == null)) { auditLogDirector.log(logable, AuditLogType.FAILED_DETERMINE_STORAGE_DOMAIN_METADATA_DEVICES); return false; } return true; }	public boolean checkDomainMetadataDevices(org.ovirt.engine.core.common.businessentities.StorageDomain domain) { if (((domain.getVgMetadataDevice()) == null) || ((domain.getFirstMetadataDevice()) == null)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); logable.setStorageDomainName(domain.getName()); logable.setStorageDomainId(domain.getId()); auditLogDirector.log(logable, AuditLogType.FAILED_DETERMINE_STORAGE_DOMAIN_METADATA_DEVICES); return false; } return true; }
public void fillMetadataDevicesInfo(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic, org.ovirt.engine.core.compat.Guid vdsId) { try { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainFromIrs = ((org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid>) (resourceManager.runVdsCommand(VDSCommandType.HSMGetStorageDomainInfo, new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(vdsId, storageDomainStatic.getId())).getReturnValue())).getFirst(); storageDomainStatic.setFirstMetadataDevice(domainFromIrs.getFirstMetadataDevice()); storageDomainStatic.setVgMetadataDevice(domainFromIrs.getVgMetadataDevice()); } catch (java.lang.Exception e) { storageDomainStatic.setFirstMetadataDevice(null); storageDomainStatic.setVgMetadataDevice(null); org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info, ignoring"); } }	public void fillMetadataDevicesInfo(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic, org.ovirt.engine.core.compat.Guid vdsId) { try { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainFromIrs = ((org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid>) (resourceManager.runVdsCommand(VDSCommandType.HSMGetStorageDomainInfo, new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(vdsId, storageDomainStatic.getId())).getReturnValue())).getFirst(); storageDomainStatic.setFirstMetadataDevice(domainFromIrs.getFirstMetadataDevice()); storageDomainStatic.setVgMetadataDevice(domainFromIrs.getVgMetadataDevice()); } catch (java.lang.Exception e) { storageDomainStatic.setFirstMetadataDevice(null); storageDomainStatic.setVgMetadataDevice(null); org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info"); } }
private void validateRetrievedMetadataDevices() { if (!(blockStorageDomainHelper.checkDomainMetadataDevices(this, org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain()))) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GeneralException, "Couldn't determine the domain metadata devices"); } }	private void validateRetrievedMetadataDevices() { if (!(blockStorageDomainHelper.checkDomainMetadataDevices(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain()))) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GeneralException, "Couldn't determine the domain metadata devices"); } }
private void refreshMetadataDevicesInfo() { java.lang.String oldVgMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice(); java.lang.String oldFirstMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()); if ((!(java.util.Objects.equals(oldVgMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()))) || (!(java.util.Objects.equals(oldFirstMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice())))) { storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } blockStorageDomainHelper.checkDomainMetadataDevices(this, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain()); }	private void refreshMetadataDevicesInfo() { java.lang.String oldVgMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice(); java.lang.String oldFirstMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()); if ((!(java.util.Objects.equals(oldVgMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()))) || (!(java.util.Objects.equals(oldFirstMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice())))) { storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } blockStorageDomainHelper.checkDomainMetadataDevices(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain()); }
@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); java.util.Map<java.util.function.Consumer<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDb = getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); boolean dbShouldBeUpdated = (lunsToUpdateInDb.containsKey(updateExistingLuns)) || (lunsToUpdateInDb.containsKey(saveNewLuns)); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { updateLunsInDb(lunsToUpdateInDb); refreshLunsConnections(lunsFromVgInfo); cleanupLunsFromDb(lunsFromVgInfo, lunsFromDb); return null; }); } refreshMetadataDevicesInfo(); org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDb = getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); boolean dbShouldBeUpdated = lunsToUpdateInDb.keySet().stream().anyMatch(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunHandler::requiresDbUpdate); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { updateLunsInDb(lunsToUpdateInDb); refreshLunsConnections(lunsFromVgInfo); return null; }); } refreshMetadataDevicesInfo(); org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }
public boolean checkDomainMetadataDevices(org.ovirt.engine.core.common.businessentities.StorageDomain domain) { if (((domain.getVgMetadataDevice()) == null) || ((domain.getFirstMetadataDevice()) == null)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); logable.setStorageDomainName(domain.getName()); auditLogDirector.log(logable, AuditLogType.FAILED_DETERMINE_STORAGE_DOMAIN_METADATA_DEVICES); return false; } return true; }	public boolean checkDomainMetadataDevices(org.ovirt.engine.core.common.businessentities.StorageDomain domain) { if (((domain.getVgMetadataDevice()) == null) || ((domain.getFirstMetadataDevice()) == null)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase()); logable.addCustomValue("StorageDomainName", domain.getName()); logable.setStorageDomainId(domain.getId()); auditLogDirector.log(logable, AuditLogType.FAILED_DETERMINE_STORAGE_DOMAIN_METADATA_DEVICES); return false; } return true; }
@javax.validation.constraints.NotNull private static org.ovirt.engine.api.model.IpVersion getIpVersion(java.lang.String address) { if (address == null) { throw new java.lang.IllegalArgumentException(("Unable to figure out ip version for address: " + address)); } return address.contains(":") ? org.ovirt.engine.api.model.IpVersion.V4 : org.ovirt.engine.api.model.IpVersion.V6; }	public static org.ovirt.engine.api.model.DnsResolverConfiguration map(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity) { if (entity == null) { return null; } java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServers = entity.getNameServers(); if (nameServers == null) { return null; } java.util.List<java.lang.String> nameServerAddresses = nameServers.stream().map(NameServer::getAddress).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.api.model.DnsResolverConfiguration dnsResolverConfiguration = new org.ovirt.engine.api.model.DnsResolverConfiguration(); dnsResolverConfiguration.setNameServers(org.ovirt.engine.api.restapi.types.DnsResolverConfigurationMapper.mapAddressesToNameServerList(nameServerAddresses)); return dnsResolverConfiguration; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DnsResolverConfiguration.class, to = org.ovirt.engine.api.model.DnsResolverConfiguration.class) public static org.ovirt.engine.api.model.DnsResolverConfiguration map(org.ovirt.engine.api.model.DnsResolverConfiguration model, org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration template) { org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration target = new org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration(); if (model.isSetNameServers()) { org.ovirt.engine.api.model.DnsResolverConfiguration.NameServersList nameServersList = model.getNameServers(); if (nameServersList.isSetNameServers()) { java.util.List<java.lang.String> nameServers = nameServersList.getNameServers(); target.setNameServers(nameServers.stream().map(org.ovirt.engine.api.restapi.types.DnsResolverConfigurationMapper::mapNameServer).collect(java.util.stream.Collectors.toList())); } } return target; }	public static org.ovirt.engine.api.model.DnsResolverConfiguration map(org.ovirt.engine.api.model.DnsResolverConfiguration model) { org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration result = new org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration(); if (model.isSetNameServers()) { org.ovirt.engine.api.model.DnsResolverConfiguration.NameServersList nameServersList = model.getNameServers(); if (nameServersList.isSetNameServers()) { java.util.List<java.lang.String> nameServers = nameServersList.getNameServers(); result.setNameServers(org.ovirt.engine.api.restapi.types.DnsResolverConfigurationMapper.mapNameServers(nameServers)); return result; } } result.setNameServers(java.util.Collections.emptyList()); return result; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DnsResolverConfiguration.class, to = org.ovirt.engine.api.model.DnsResolverConfiguration.class) public static org.ovirt.engine.api.model.DnsResolverConfiguration map(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity, org.ovirt.engine.api.model.DnsResolverConfiguration template) { if (entity == null) { return null; } java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServers = entity.getNameServers(); if (nameServers == null) { return null; } java.util.List<java.lang.String> nameServerList = nameServers.stream().map(NameServer::getAddress).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.api.model.DnsResolverConfiguration.NameServersList nameServersList = new org.ovirt.engine.api.model.DnsResolverConfiguration.NameServersList(); nameServersList.getNameServers().addAll(nameServerList); org.ovirt.engine.api.model.DnsResolverConfiguration dnsResolverConfiguration = new org.ovirt.engine.api.model.DnsResolverConfiguration(); dnsResolverConfiguration.setNameServers(nameServersList); return dnsResolverConfiguration; }	private static DnsResolverConfiguration.NameServersList mapAddressesToNameServerList(java.util.List<java.lang.String> addresses) { org.ovirt.engine.api.model.DnsResolverConfiguration.NameServersList result = new org.ovirt.engine.api.model.DnsResolverConfiguration.NameServersList(); result.getNameServers().addAll(addresses); return result; }
private static org.ovirt.engine.core.common.businessentities.network.NameServer mapNameServer(java.lang.String address) { switch (org.ovirt.engine.api.restapi.types.DnsResolverConfigurationMapper.getIpVersion(address)) { case V4 : return new org.ovirt.engine.core.common.businessentities.network.NameServer.NameServerIpv4(address); case V6 : return new org.ovirt.engine.core.common.businessentities.network.NameServer.NameServerIpv6(address); default : throw new java.lang.RuntimeException("Coding error, this should be unreachable."); } }	private static java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> mapNameServers(java.util.List<java.lang.String> nameServers) { return nameServers.stream().filter(StringUtils::isNotEmpty).map(NameServer::new).collect(java.util.stream.Collectors.toList()); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.ImageTransfer filteredGet(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userId, boolean isFiltered) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource sqlParams = createIdParameterMapper(id); sqlParams.addValue("user_id", userId); sqlParams.addValue("is_filtered", isFiltered); return getCallsHandler().executeRead("GetImageUploadsByCommandId", createEntityRowMapper(), sqlParams); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.ImageTransfer get(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userId, boolean isFiltered) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource sqlParams = createIdParameterMapper(id); sqlParams.addValue("user_id", userId); sqlParams.addValue("is_filtered", isFiltered); return getCallsHandler().executeRead("GetImageUploadsByCommandId", createEntityRowMapper(), sqlParams); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getQueryReturnValue().setReturnValue(imageTransferDao.filteredGet(org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getUserID(), org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getParameters().isFiltered())); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getQueryReturnValue().setReturnValue(imageTransferDao.get(org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getUserID(), org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getParameters().isFiltered())); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.ImageTransfer get(org.ovirt.engine.core.compat.Guid id) { return filteredGet(id, null, false); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.ImageTransfer get(org.ovirt.engine.core.compat.Guid id) { return get(id, null, false); }
org.ovirt.engine.core.common.businessentities.storage.ImageTransfer filteredGet(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid userId, boolean isFiltered);	org.ovirt.engine.core.common.businessentities.storage.ImageTransfer get(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid userId, boolean isFiltered);
@org.junit.Test public void testDefaultRouteWhenOutOfSync() { iface.setIpv4DefaultRoute(false); network.setDnsResolverConfiguration(sampleDnsResolverConfiguration); assertThat(createTestedInstance(true, sampleDnsResolverConfiguration).isNetworkInSync(), is(true)); }	@org.junit.Test public void testDefaultRouteWhenOutOfSync() { iface.setIpv4DefaultRoute(false); network.setDnsResolverConfiguration(sampleDnsResolverConfiguration); assertThat(createTestedInstance(true, sampleDnsResolverConfiguration).isNetworkInSync(), is(false)); }
private void addDnsConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { boolean dnsResolverConfigurationSupported = org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.DnsResolverConfigurationSupported, this.cluster.getCompatibilityVersion()); if ((!(isDefaultRouteNetwork)) || (!dnsResolverConfigurationSupported)) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetworkAttachment = getNameServers(networkAttachment.getDnsResolverConfiguration()); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetwork = getNameServers(network.getDnsResolverConfiguration()); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfHost = getNameServers(reportedDnsResolverConfiguration); boolean shouldSetDefaultRoute = new org.ovirt.engine.core.bll.network.host.ShouldSetDefaultRouteFlagAndDnsData().test(true, networkAttachment); boolean engineDefineDnsConfiguration = shouldSetDefaultRoute && ((nameServersOfNetworkAttachment != null) || (nameServersOfNetwork != null)); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> expectedNameServers = (nameServersOfNetworkAttachment != null) ? nameServersOfNetworkAttachment : nameServersOfNetwork; result.add(org.ovirt.engine.core.utils.DNS_CONFIGURATION, addressesAsString(nameServersOfHost), (engineDefineDnsConfiguration ? addressesAsString(expectedNameServers) : ""), (!(engineDefineDnsConfiguration && (!(java.util.Objects.equals(nameServersOfHost, expectedNameServers)))))); result.add(org.ovirt.engine.core.utils.DEFAULT_ROUTE, iface.isIpv4DefaultRoute(), isDefaultRouteNetwork, (!(shouldSetDefaultRoute && (!(java.util.Objects.equals(iface.isIpv4DefaultRoute(), isDefaultRouteNetwork)))))); }	private void addDnsConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { boolean dnsResolverConfigurationSupported = org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.DnsResolverConfigurationSupported, this.cluster.getCompatibilityVersion()); if ((!(isDefaultRouteNetwork)) || (!dnsResolverConfigurationSupported)) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetworkAttachment = getNameServers(networkAttachment.getDnsResolverConfiguration()); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetwork = getNameServers(network.getDnsResolverConfiguration()); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfHost = getNameServers(reportedDnsResolverConfiguration); boolean engineDefineDnsConfiguration = (nameServersOfNetworkAttachment != null) || (nameServersOfNetwork != null); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> expectedNameServers = (nameServersOfNetworkAttachment != null) ? nameServersOfNetworkAttachment : nameServersOfNetwork; result.add(org.ovirt.engine.core.utils.DNS_CONFIGURATION, addressesAsString(nameServersOfHost), (engineDefineDnsConfiguration ? addressesAsString(expectedNameServers) : ""), (!(engineDefineDnsConfiguration && (!(java.util.Objects.equals(nameServersOfHost, expectedNameServers)))))); result.add(org.ovirt.engine.core.utils.DEFAULT_ROUTE, iface.isIpv4DefaultRoute(), isDefaultRouteNetwork); }
@java.lang.Override protected boolean isGhost(org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel value) { return (!(ghostsDisabled)) && (org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(value.getEntity())); }	@java.lang.Override protected boolean isGhost(org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel value) { return org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(value.getEntity()); }
private boolean canVmNumaPinnedToVds(java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes, org.ovirt.engine.core.common.businessentities.VDS vds) { java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> pNodes = vdsNumaNodeDao.getAllVdsNumaNodeByVdsId(vds.getId()); if ((pNodes == null) || (pNodes.isEmpty())) { return false; } java.util.Map<java.lang.Integer, org.ovirt.engine.core.common.businessentities.VdsNumaNode> indexMap = toMap(pNodes); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vNode : nodes) { for (java.lang.Integer pinnedIndex : vNode.getVdsNumaNodeList()) { if ((vNode.getMemTotal()) > (indexMap.get(pinnedIndex).getNumaNodeStatistics().getMemFree())) { return false; } } } return true; }	private boolean canVmNumaPinnedToVds(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes, org.ovirt.engine.core.common.businessentities.VDS vds) { java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> pNodes = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsNumaNodeDao().getAllVdsNumaNodeByVdsId(vds.getId()); if ((pNodes == null) || (pNodes.isEmpty())) { return false; } java.util.Map<java.lang.Integer, org.ovirt.engine.core.common.businessentities.VdsNumaNode> indexMap = toMap(pNodes); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vNode : nodes) { for (java.lang.Integer pinnedIndex : vNode.getVdsNumaNodeList()) { if ((vNode.getMemTotal()) > (indexMap.get(pinnedIndex).getNumaNodeStatistics().getMemFree())) { return false; } } } return true; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingResources(java.lang.Class<T> type) { java.util.List<T> list = new java.util.ArrayList<>(); synchronized(this) { for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : pendingResources.values()) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } } return list; }	public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingResources(java.lang.Class<T> type) { java.util.List<T> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : pendingResources.values()) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } return list; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingHostResources(org.ovirt.engine.core.compat.Guid host, java.lang.Class<T> type) { if (!(resourcesByHost.containsKey(host))) { return java.util.Collections.emptyList(); } java.util.List<T> list = new java.util.ArrayList<>(); synchronized(this) { for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : resourcesByHost.get(host)) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } } return list; }	public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingHostResources(org.ovirt.engine.core.compat.Guid host, java.lang.Class<T> type) { if (!(resourcesByHost.containsKey(host))) { return java.util.Collections.emptyList(); } java.util.List<T> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : resourcesByHost.get(host)) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } return list; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingVmResources(org.ovirt.engine.core.compat.Guid vm, java.lang.Class<T> type) { if (!(resourcesByVm.containsKey(vm))) { return java.util.Collections.emptyList(); } java.util.List<T> list = new java.util.ArrayList<>(); synchronized(this) { for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : resourcesByVm.get(vm)) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } } return list; }	public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingVmResources(org.ovirt.engine.core.compat.Guid vm, java.lang.Class<T> type) { if (!(resourcesByVm.containsKey(vm))) { return java.util.Collections.emptyList(); } java.util.List<T> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : resourcesByVm.get(vm)) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } return list; }
@java.lang.Override public void delay(java.util.List<org.ovirt.engine.core.compat.Guid> vdsIds) { if (vdsIds.isEmpty()) { return; } org.ovirt.engine.core.bll.RunVmCommandBase.log.debug("Try to wait for the engine update the hosts memory and cpu stats"); long maxUpdateElapsed = vdsIds.stream().mapToLong(( vdsId) -> resourceManager.getVdsManager(vdsId).getLastUpdateElapsed()).max().getAsLong(); long maxWaitTime = java.lang.Math.min(java.lang.Math.max(maxUpdateElapsed, java.util.concurrent.TimeUnit.SECONDS.toMillis(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(org.ovirt.engine.core.bll.VdsRefreshRate))), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ThrottlerMaxWaitForVdsUpdateInMillis)); long endTime = (java.lang.System.currentTimeMillis()) + maxWaitTime; for (org.ovirt.engine.core.compat.Guid vdsId : vdsIds) { long currentTime = java.lang.System.currentTimeMillis(); if (currentTime >= endTime) { break; } try { getBlockingQueue(vdsId).poll((endTime - currentTime), java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.InterruptedException e) { } } }	@java.lang.Override public void delay(java.util.List<org.ovirt.engine.core.compat.Guid> vdsIds) { if (vdsIds.isEmpty()) { return; } org.ovirt.engine.core.bll.RunVmCommandBase.log.debug("Try to wait for the engine to update memory and cpu stats"); long maxUpdateElapsed = vdsIds.stream().mapToLong(( vdsId) -> resourceManager.getVdsManager(vdsId).getLastUpdateElapsed()).max().getAsLong(); long maxWaitTime = java.lang.Math.min(java.lang.Math.max(maxUpdateElapsed, java.util.concurrent.TimeUnit.SECONDS.toMillis(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(org.ovirt.engine.core.bll.VdsRefreshRate))), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ThrottlerMaxWaitForVdsUpdateInMillis)); long endTime = (java.lang.System.currentTimeMillis()) + maxWaitTime; for (org.ovirt.engine.core.compat.Guid vdsId : vdsIds) { long currentTime = java.lang.System.currentTimeMillis(); if (currentTime >= endTime) { break; } try { getBlockingQueue(vdsId).poll((endTime - currentTime), java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.InterruptedException e) { } } }
@org.junit.Test public void testNoAffinityGroups() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); assertThat(policyUnit.filter(cluster, hosts, newVm, null, new org.ovirt.engine.core.common.scheduling.PerHostMessages())).containsExactlyElementsOf(hosts); }	@org.junit.Test public void testNoAffinityGroups() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); assertThat(policyUnit.filter(cluster, hosts, newVm, null, new org.ovirt.engine.core.common.scheduling.PerHostMessages())).containsOnlyElementsOf(hosts); }
private boolean isVmMigratable(org.ovirt.engine.core.common.businessentities.VM vm) { return ((vm.getMigrationSupport()) == (org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE)) && (!(vm.isHostedEngine())); }	private static boolean isVmMigratable(org.ovirt.engine.core.common.businessentities.VM vm) { return ((vm.getMigrationSupport()) == (org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE)) && (!(vm.isHostedEngine())); }
@org.junit.Test public void testFirstVm() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); org.ovirt.engine.core.common.businessentities.VM vm1 = createVMDown(cluster); org.ovirt.engine.core.common.businessentities.VM vm2 = createVMDown(cluster); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, true, vm1, vm2, newVm)); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); affinityGroups.clear(); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, false, vm1, vm2, newVm)); scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); }	@org.junit.Test public void testFirstVm() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); org.ovirt.engine.core.common.businessentities.VM vm1 = createVMDown(cluster); org.ovirt.engine.core.common.businessentities.VM vm2 = createVMDown(cluster); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, true, vm1, vm2, newVm)); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(scores.get(host1.getId()), scores.get(host2.getId())); affinityGroups.clear(); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, false, vm1, vm2, newVm)); scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(scores.get(host1.getId()), scores.get(host2.getId())); }
@org.junit.Test public void testPositiveAffinity() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); org.ovirt.engine.core.common.businessentities.VM vm1 = createVmRunning(host2); org.ovirt.engine.core.common.businessentities.VM vm2 = createVmRunning(host2); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, true, vm1, vm2, newVm)); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1000)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); affinityGroups.clear(); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, false, vm1, vm2, newVm)); scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1000)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); }	@org.junit.Test public void testPositiveAffinity() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2, host3); org.ovirt.engine.core.common.businessentities.VM vm1 = createVmRunning(host2); org.ovirt.engine.core.common.businessentities.VM vm2 = createVmRunning(host2); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, true, vm1, vm2, newVm)); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(scores.get(host1.getId()), scores.get(host3.getId())); assertThat(scores.get(host1.getId())).isGreaterThan(scores.get(host2.getId())); affinityGroups.clear(); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, false, vm1, vm2, newVm)); scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(scores.get(host1.getId()), scores.get(host3.getId())); assertThat(scores.get(host1.getId())).isGreaterThan(scores.get(host2.getId())); }
@org.junit.Test public void testNoAffinityGroups() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); }	@org.junit.Test public void testNoAffinityGroups() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(scores.get(host1.getId()), scores.get(host2.getId())); }
@org.junit.Test public void testNegativeAffinity() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2, host3); org.ovirt.engine.core.common.businessentities.VM vm1 = createVmRunning(host1); org.ovirt.engine.core.common.businessentities.VM vm2 = createVmRunning(host3); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.NEGATIVE, true, vm1, vm2, newVm)); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1000)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); assertEquals(((java.lang.Integer) (1000)), scores.get(host3.getId())); affinityGroups.clear(); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.NEGATIVE, false, vm1, vm2, newVm)); scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1000)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); assertEquals(((java.lang.Integer) (1000)), scores.get(host3.getId())); }	@org.junit.Test public void testNegativeAffinity() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2, host3); org.ovirt.engine.core.common.businessentities.VM vm1 = createVmRunning(host1); org.ovirt.engine.core.common.businessentities.VM vm2 = createVmRunning(host3); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.NEGATIVE, true, vm1, vm2, newVm)); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(scores.get(host1.getId()), scores.get(host3.getId())); assertThat(scores.get(host1.getId())).isGreaterThan(scores.get(host2.getId())); affinityGroups.clear(); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.NEGATIVE, false, vm1, vm2, newVm)); scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(scores.get(host1.getId()), scores.get(host3.getId())); assertThat(scores.get(host1.getId())).isGreaterThan(scores.get(host2.getId())); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.NetworkFilterParameter parameter) { validateParameters(parameter, "value"); org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter vmNicFilterParameter = map(parameter); vmNicFilterParameter.setVmInterfaceId(nicId); return performCreate(VdcActionType.AddVmNicFilterParameter, new org.ovirt.engine.core.common.action.VmNicFilterParameterParameters(vmId, vmNicFilterParameter), new org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParametersResource.NetworkFilterParameterResolver(parameter.getName())); }	@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.NetworkFilterParameter parameter) { validateParameters(parameter, "value"); org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter vmNicFilterParameter = map(parameter); vmNicFilterParameter.setVmInterfaceId(nicId); return performCreate(VdcActionType.AddVmNicFilterParameter, new org.ovirt.engine.core.common.action.VmNicFilterParameterParameters(vmId, vmNicFilterParameter), new org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParametersResource.NicNetworkFilterParameterResolver(parameter.getName())); }
@java.lang.Override public org.ovirt.engine.api.resource.NetworkFilterParameterResource getParameterResource(java.lang.String parameterId) { return inject(new org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParameterResource(vmId, nicId, parameterId)); }	@java.lang.Override public org.ovirt.engine.api.resource.NicNetworkFilterParameterResource getParameterResource(java.lang.String parameterId) { return inject(new org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParameterResource(vmId, nicId, parameterId)); }
private java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> getDirectoryUser(org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser) { java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> groups = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.Object> response = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.findPrincipalsByIds(org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getSessionDataContainer().getSsoAccessToken(org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getParameters().getSessionId()), dbUser.getDomain(), dbUser.getNamespace(), java.util.Arrays.asList(dbUser.getExternalId()), true, true); java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> principalRecords = java.util.Collections.emptyList(); if (response.containsKey("result")) { principalRecords = ((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (response.get("result"))); } if (!(principalRecords.isEmpty())) { org.ovirt.engine.api.extensions.ExtMap principalRecord = principalRecords.iterator().next(); directoryUtils.flatGroups(principalRecord); for (org.ovirt.engine.api.extensions.ExtMap group : principalRecord.<java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>>get(PrincipalRecord.GROUPS, java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>emptyList())) { groups.add(new org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup(dbUser.getDomain(), group.get(GroupRecord.NAMESPACE), group.get(GroupRecord.NAME), group.get(GroupRecord.ID))); } } return groups; }	private java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> getDirectoryUser(org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser) { java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> groups = new java.util.ArrayList<>(); if (dbUser != null) { java.util.Map<java.lang.String, java.lang.Object> response = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.findPrincipalsByIds(org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getSessionDataContainer().getSsoAccessToken(org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getParameters().getSessionId()), dbUser.getDomain(), dbUser.getNamespace(), java.util.Arrays.asList(dbUser.getExternalId()), true, true); java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> principalRecords = java.util.Collections.emptyList(); if (response.containsKey("result")) { principalRecords = ((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (response.get("result"))); } if (!(principalRecords.isEmpty())) { org.ovirt.engine.api.extensions.ExtMap principalRecord = principalRecords.iterator().next(); directoryUtils.flatGroups(principalRecord); for (org.ovirt.engine.api.extensions.ExtMap group : principalRecord.<java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>>get(PrincipalRecord.GROUPS, java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>emptyList())) { groups.add(new org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup(dbUser.getDomain(), group.get(GroupRecord.NAMESPACE), group.get(GroupRecord.NAME), group.get(GroupRecord.ID))); } } } return groups; }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().runInternalQuery(VdcQueryType.GetAuthzGroupsByUserId, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId())); java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> authzGroups = returnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> groupsIds = authzGroups.stream().map(( g) -> dbGroupDao.getByExternalId(g.getAuthz(), g.getId())).filter(java.util.Objects::nonNull).map(( g) -> g.getId()).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getQueryReturnValue().setReturnValue(permissionDao.getAllForAdElementAndGroups(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId(), groupsIds, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().isFiltered())); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().runInternalQuery(VdcQueryType.GetAuthzGroupsByUserId, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters()); java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> authzGroups = returnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> groupsIds = authzGroups.stream().map(( g) -> dbGroupDao.getByExternalId(g.getAuthz(), g.getId())).filter(java.util.Objects::nonNull).map(( g) -> g.getId()).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getQueryReturnValue().setReturnValue(permissionDao.getAllForAdElementAndGroups(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId(), groupsIds, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().isFiltered())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id, java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered) { int appMode = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ApplicationMode); org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("ad_element_id", id).addValue("user_groups", groupIds).addValue("is_filtered", isFiltered).addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetPermissionsByAdElementIdAndGroupIds", org.ovirt.engine.core.dao.PermissionDaoImpl.permissionRowMapper, parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id, java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered) { int appMode = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ApplicationMode); org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("ad_element_id", id).addValue("user_groups", createArrayOf("uuid", groupIds.toArray())).addValue("is_filtered", isFiltered).addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetPermissionsByAdElementIdAndGroupIds", org.ovirt.engine.core.dao.PermissionDaoImpl.permissionRowMapper, parameterSource); }
@org.junit.Test public void testDeallocateIfExternalThrowException() { nic.setName(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_NAME); nic.setId(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_ID); provider.setName(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_NAME); doThrow(new org.ovirt.engine.core.common.errors.EngineException()).when(networkProviderProxy).deallocate(nic); underTest.deallocateIfExternal(); verify(auditLogDirector).log(auditLogableCaptor.capture(), same(AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED)); final java.util.Map<java.lang.String, java.lang.String> capturedCustomValues = auditLogableCaptor.getValue().getCustomValues(); assertThat(capturedCustomValues, hasEntry("nicname", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_NAME)); assertThat(capturedCustomValues, hasEntry("nicid", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_ID.toString())); assertThat(capturedCustomValues, hasEntry("providername", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_NAME)); }	@org.junit.Test public void testDeallocateIfExternalThrowException() { nic.setName(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_NAME); nic.setId(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_ID); provider.setName(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_NAME); doThrow(new org.ovirt.engine.core.common.errors.EngineException()).when(networkProviderProxy).deallocate(nic); underTest.deallocateIfExternal(); verify(auditLogDirector).log(auditLogableBaseCaptor.capture(), same(AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED)); final java.util.Map<java.lang.String, java.lang.String> capturedCustomValues = auditLogableBaseCaptor.getValue().getCustomValues(); assertThat(capturedCustomValues, hasEntry("nicname", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_NAME)); assertThat(capturedCustomValues, hasEntry("nicid", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_ID.toString())); assertThat(capturedCustomValues, hasEntry("providername", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_NAME)); }
@java.lang.Override protected void endSuccessfully() { freeVmSnapshotsWithWait(); vmDeviceDao.remove(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getRemovedVolume().getId(), null)); baseDiskDao.remove(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getRemovedVolume().getId()); if (org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getShouldBeLogged()) { org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class).log(this, AuditLogType.USER_FINISHED_REMOVE_DISK); } org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.setSucceeded(true); }	@java.lang.Override protected void endSuccessfully() { freeVmSnapshotsWithWait(); vmDeviceDao.remove(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getRemovedVolume().getId(), null)); baseDiskDao.remove(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getRemovedVolume().getId()); if (org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getShouldBeLogged()) { auditLogDirector.log(this, AuditLogType.USER_FINISHED_REMOVE_DISK); } org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.setSucceeded(true); }
private void auditLogFailedToConnect() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class).log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); }	private void auditLogFailedToConnect() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); auditLogDirector.log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); }
private void updateAuditLog(org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand command, org.ovirt.engine.core.common.AuditLogType auditLogType, java.lang.Long imageSizeInGigabytes) { command.addCustomValue("DiskAlias", getDisk(command).getDiskAlias()); command.addCustomValue("NewSize", java.lang.String.valueOf(imageSizeInGigabytes)); org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class).log(command, auditLogType); }	private void updateAuditLog(org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand command, org.ovirt.engine.core.common.AuditLogType auditLogType, java.lang.Long imageSizeInGigabytes) { command.addCustomValue("DiskAlias", getDisk(command).getDiskAlias()); command.addCustomValue("NewSize", java.lang.String.valueOf(imageSizeInGigabytes)); auditLogDirector.log(command, auditLogType); }
public boolean discover() { boolean dbUpdated; java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("PolicyUnits updated for external broker."); dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class).log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Discovery returned empty result when talking to broker. Disabling external units"); java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit> failingPolicyUnits = policyUnitDao.getAll().stream().collect(java.util.stream.Collectors.toList()); markExternalPoliciesAsDisabled(failingPolicyUnits); dbUpdated = true; } return dbUpdated; }	public boolean discover() { boolean dbUpdated; java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("PolicyUnits updated for external broker."); dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); auditLogDirector.log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Discovery returned empty result when talking to broker. Disabling external units"); java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit> failingPolicyUnits = policyUnitDao.getAll().stream().collect(java.util.stream.Collectors.toList()); markExternalPoliciesAsDisabled(failingPolicyUnits); dbUpdated = true; } return dbUpdated; }
private void processSingleClusterChanges(org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param) { final java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> setupNetworksParams = new java.util.ArrayList(createNetworkClustersToSetupNetworksParametersTransformer().transform(param.getAttachments(), param.getDetachments())); org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, setupNetworksParams); }	private void processSingleClusterChanges(org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param) { final java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> setupNetworksParams = new java.util.ArrayList(createNetworkClustersToSetupNetworksParametersTransformer().transform(param.getAttachments(), param.getDetachments())); org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, setupNetworksParams); }
private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.action.ManageNetworkClustersParameters> mapParametersByClusterId() { final org.ovirt.engine.core.common.action.ManageNetworkClustersParameters parameters = getParameters(); final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> attachmentByClusterId = groupByClusterId(parameters.getAttachments()); final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> detachmentByClusterId = groupByClusterId(parameters.getDetachments()); final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> updatesByClusterId = groupByClusterId(parameters.getUpdates()); final java.util.Set<org.ovirt.engine.core.compat.Guid> clusterIds = java.util.stream.Stream.of(attachmentByClusterId, detachmentByClusterId, updatesByClusterId).flatMap(( e) -> e.keySet().stream()).collect(java.util.stream.Collectors.toSet()); return clusterIds.stream().collect(java.util.stream.Collectors.toMap(java.util.function.Function.identity(), ( clusterId) -> new org.ovirt.engine.core.common.action.ManageNetworkClustersParameters(nullToEmptyList(attachmentByClusterId.get(clusterId)), nullToEmptyList(detachmentByClusterId.get(clusterId)), nullToEmptyList(updatesByClusterId.get(clusterId))))); }	private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.action.ManageNetworkClustersParameters> mapParametersByClusterId() { org.ovirt.engine.core.common.action.ManageNetworkClustersParameters parameters = getParameters(); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> attachmentByClusterId = groupByClusterId(parameters.getAttachments()); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> detachmentByClusterId = groupByClusterId(parameters.getDetachments()); java.util.Set<org.ovirt.engine.core.compat.Guid> clusterIds = java.util.stream.Stream.of(attachmentByClusterId, detachmentByClusterId).flatMap(( e) -> e.keySet().stream()).collect(java.util.stream.Collectors.toSet()); return clusterIds.stream().collect(java.util.stream.Collectors.toMap(java.util.function.Function.identity(), ( clusterId) -> new org.ovirt.engine.core.common.action.ManageNetworkClustersParameters(nullToEmptyList(attachmentByClusterId.get(clusterId)), nullToEmptyList(detachmentByClusterId.get(clusterId))))); }
private void updateRngDeviceIfNecessary(org.ovirt.engine.core.compat.Guid vmBaseId, org.ovirt.engine.core.compat.Version customCompatibilityLevel, org.ovirt.engine.core.common.action.HasRngDevice updateParameters) { final org.ovirt.engine.core.compat.Version oldEffectiveVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(customCompatibilityLevel, () -> oldCluster.getCompatibilityVersion()); final org.ovirt.engine.core.compat.Version newEffectiveVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(customCompatibilityLevel, () -> getCluster().getCompatibilityVersion()); vmUpdateUtils.upgradeRngDevices(oldEffectiveVersion, newEffectiveVersion, vmBaseId, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContext(), updateParameters); }	private void updateRngDeviceIfNecessary(org.ovirt.engine.core.compat.Guid vmBaseId, org.ovirt.engine.core.compat.Version customCompatibilityLevel, org.ovirt.engine.core.common.action.HasRngDevice updateParameters) { final org.ovirt.engine.core.compat.Version oldEffectiveVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(customCompatibilityLevel, () -> oldCluster.getCompatibilityVersion()); final org.ovirt.engine.core.compat.Version newEffectiveVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(customCompatibilityLevel, () -> getCluster().getCompatibilityVersion()); final java.util.Optional<org.ovirt.engine.core.common.businessentities.VmRngDevice> updatedDeviceOptional = rngDeviceUtils.createUpdatedRngDeviceIfNecessary(oldEffectiveVersion, newEffectiveVersion, vmBaseId, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContext()); if (updatedDeviceOptional.isPresent()) { updateParameters.setUpdateRngDevice(true); updateParameters.setRngDevice(updatedDeviceOptional.get()); } }
private boolean updateVm(org.ovirt.engine.core.common.businessentities.VmStatic vm, org.ovirt.engine.core.compat.Version oldClusterVersion, boolean disableLock) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setClusterLevelChangeFromVersion(oldClusterVersion); return updateVm(updateParams, disableLock); }	private boolean updateVm(org.ovirt.engine.core.common.businessentities.VmStatic vm, org.ovirt.engine.core.compat.Version oldClusterVersion, boolean disableLock) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setClusterLevelChangeFromVersion(oldClusterVersion); org.ovirt.engine.core.bll.context.CommandContext context; if (disableLock) { updateParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); context = org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.cloneContextAndDetachFromParent(); } else { org.ovirt.engine.core.utils.lock.EngineLock updateVmLock = createUpdateVmLock(); lockManager.acquireLockWait(updateVmLock); context = org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(updateVmLock); } org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, context); if (!(result.getSucceeded())) { org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getReturnValue().setFault(result.getFault()); return false; } return true; }
private boolean updateClusterCompatibilityVersionToOldCluster(boolean disableLock) { org.ovirt.engine.core.compat.Version oldClusterVersion = org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getClusterCompatibilityVersionOrigin(); org.ovirt.engine.core.common.businessentities.VmStatic vmFromDb = vmStaticDao.get(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVmId()); if (((isRestoreMemory()) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCustomCompatibilityVersion()) == null)) && (oldClusterVersion.less(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getClusterCompatibilityVersion()))) { return updateVm(vmFromDb, oldClusterVersion, disableLock); } else if ((!(isRestoreMemory())) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCustomCompatibilityVersion()) == null)) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vmFromDb); boolean requiresRngUpdate = vmUpdateUtils.upgradeRngDevices(oldClusterVersion, org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCompatibilityVersion(), org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getId(), org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.cloneContext(), updateParams); boolean requiresGraphicsUpdate = vmUpdateUtils.upgradeGraphicsDevices(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getStaticData(), updateParams, oldClusterVersion); if (requiresRngUpdate || requiresGraphicsUpdate) { return updateVm(updateParams, disableLock); } } return true; }	private boolean updateClusterCompatibilityVersionToOldCluster(boolean disableLock) { org.ovirt.engine.core.compat.Version oldClusterVersion = org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getClusterCompatibilityVersionOrigin(); if (((isRestoreMemory()) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCustomCompatibilityVersion()) == null)) && (oldClusterVersion.less(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getClusterCompatibilityVersion()))) { org.ovirt.engine.core.common.businessentities.VmStatic vmFromDb = vmStaticDao.get(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVmId()); return updateVm(vmFromDb, oldClusterVersion, disableLock); } return true; }
private boolean updateVms() { for (org.ovirt.engine.core.common.businessentities.VmStatic vm : vmsLockedForUpdate) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); updateParams.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); vmUpdateUtils.upgradeGraphicsDevices(vm, updateParams, oldCluster.getCompatibilityVersion()); updateRngDeviceIfNecessary(vm.getId(), vm.getCustomCompatibilityVersion(), updateParams); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { java.util.List<java.lang.String> params = new java.util.ArrayList<>(); params.add("$action Update"); params.add("$type VM"); params.add(parseErrorMessage(result.getValidationMessages())); java.util.List<java.lang.String> messages = org.ovirt.engine.core.bll.Backend.getInstance().getErrorsTranslator().translateErrorText(params); failedUpgradeEntities.put(vm.getName(), getFailedMessage(messages)); } } return true; }	private boolean updateVms() { for (org.ovirt.engine.core.common.businessentities.VmStatic vm : vmsLockedForUpdate) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); updateParams.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); upgradeGraphicsDevices(vm, updateParams); updateRngDeviceIfNecessary(vm.getId(), vm.getCustomCompatibilityVersion(), updateParams); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { java.util.List<java.lang.String> params = new java.util.ArrayList<>(); params.add("$action Update"); params.add("$type VM"); params.add(parseErrorMessage(result.getValidationMessages())); java.util.List<java.lang.String> messages = org.ovirt.engine.core.bll.Backend.getInstance().getErrorsTranslator().translateErrorText(params); failedUpgradeEntities.put(vm.getName(), getFailedMessage(messages)); } } return true; }
@java.lang.Override protected void executeQueryCommand() { if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isAdminUser(org.ovirt.engine.core.bll.GetVmPayloadQuery.getUser())) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> disks = dao.getVmDeviceByVmIdAndType(org.ovirt.engine.core.bll.GetVmPayloadQuery.getParameters().getId(), VmDeviceGeneralType.DISK); for (org.ovirt.engine.core.common.businessentities.VmDevice disk : disks) { if ((disk.isManaged()) && (org.ovirt.engine.core.common.businessentities.VmPayload.isPayload(disk.getSpecParams()))) { org.ovirt.engine.core.common.businessentities.VmPayload payload = new org.ovirt.engine.core.common.businessentities.VmPayload(disk); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : payload.getFiles().entrySet()) { entry.setValue(new java.lang.String(org.apache.commons.codec.binary.Base64.decodeBase64(entry.getValue()))); } org.ovirt.engine.core.bll.GetVmPayloadQuery.getQueryReturnValue().setReturnValue(payload); } } } }	@java.lang.Override protected void executeQueryCommand() { if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isAdminUser(org.ovirt.engine.core.bll.GetVmPayloadQuery.getUser())) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> disks = dao.getVmDeviceByVmIdAndType(org.ovirt.engine.core.bll.GetVmPayloadQuery.getParameters().getId(), VmDeviceGeneralType.DISK); for (org.ovirt.engine.core.common.businessentities.VmDevice disk : disks) { if ((disk.getIsManaged()) && (org.ovirt.engine.core.common.businessentities.VmPayload.isPayload(disk.getSpecParams()))) { org.ovirt.engine.core.common.businessentities.VmPayload payload = new org.ovirt.engine.core.common.businessentities.VmPayload(disk); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : payload.getFiles().entrySet()) { entry.setValue(new java.lang.String(org.apache.commons.codec.binary.Base64.decodeBase64(entry.getValue()))); } org.ovirt.engine.core.bll.GetVmPayloadQuery.getQueryReturnValue().setReturnValue(payload); } } } }
@org.junit.runners.Parameterized.Parameters public static java.lang.Object[][] comparisonParameters() { return new java.lang.Object[][]{ new java.lang.Object[]{ null, false }, new java.lang.Object[]{ "", false }, new java.lang.Object[]{ "http://", false }, new java.lang.Object[]{ "www.redhat.com", false }, new java.lang.Object[]{ "192.168.0.1", false }, new java.lang.Object[]{ "ftp://www.redhat.com", false }, new java.lang.Object[]{ "ftp://192.168.0.1", false }, new java.lang.Object[]{ "http://www.redhat.com:/main", false }, new java.lang.Object[]{ "http://www.redhat.com:123456/main", false }, new java.lang.Object[]{ "http://www.redhat.com:9/main", false }, new java.lang.Object[]{ "http://1.2.3.4:666", true }, new java.lang.Object[]{ "http://1.2.3.4", true }, new java.lang.Object[]{ "http://[1:2:3:4:5:6:7:8]", true }, new java.lang.Object[]{ "http://[1:2:3:4:5:6:7:8]:666", true }, new java.lang.Object[]{ "http://www.redhat.com", true }, new java.lang.Object[]{ "http://www.redhat.com/main", true }, new java.lang.Object[]{ "http://www.redhat.com/main/index.html", true }, new java.lang.Object[]{ "http://www.redhat.com:80", true }, new java.lang.Object[]{ "http://www.redhat.com:80/main", true }, new java.lang.Object[]{ "http://www.redhat.com:80/main/index.html", true } }; }	@org.junit.runners.Parameterized.Parameters public static java.lang.Object[][] comparisonParameters() { return new java.lang.Object[][]{ new java.lang.Object[]{ null, false }, new java.lang.Object[]{ "", false }, new java.lang.Object[]{ "http://", false }, new java.lang.Object[]{ "www.redhat.com", false }, new java.lang.Object[]{ "192.168.0.1", false }, new java.lang.Object[]{ "ftp://www.redhat.com", false }, new java.lang.Object[]{ "ftp://192.168.0.1", false }, new java.lang.Object[]{ "http://www.redhat.com:/main", false }, new java.lang.Object[]{ "http://www.redhat.com:123456/main", false }, new java.lang.Object[]{ "http://1.2.3.4:666", true }, new java.lang.Object[]{ "http://1.2.3.4", true }, new java.lang.Object[]{ "http://[1:2:3:4:5:6:7:8]", true }, new java.lang.Object[]{ "http://[1:2:3:4:5:6:7:8]:666", true }, new java.lang.Object[]{ "http://www.redhat.com", true }, new java.lang.Object[]{ "http://www.redhat.com/main", true }, new java.lang.Object[]{ "http://www.redhat.com/main/index.html", true }, new java.lang.Object[]{ "http://www.redhat.com:80", true }, new java.lang.Object[]{ "http://www.redhat.com:80/main", true }, new java.lang.Object[]{ "http://www.redhat.com:80/main/index.html", true } }; }
@org.junit.Test public void testToBigPort() { final org.ovirt.engine.ui.uicommonweb.UriAuthority underTest = new org.ovirt.engine.ui.uicommonweb.UriAuthority((((org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.IPV6_ADDRESS) + (org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.COLON)) + (org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.TO_BIG_PORT))); assertThat(underTest.isValid(), is(false)); }	@org.junit.Test public void testTooBigPort() { final org.ovirt.engine.ui.uicommonweb.UriAuthority underTest = new org.ovirt.engine.ui.uicommonweb.UriAuthority((((org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.IPV6_ADDRESS) + (org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.COLON)) + (org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.TOO_BIG_PORT))); assertThat(underTest.isValid(), is(false)); }
@org.junit.Test public void validateDiskIsOvfStore() { initializeCommand(new org.ovirt.engine.core.common.businessentities.storage.DiskImage()); initVmDiskImage(false); command.getImage().setContentType(DiskContentType.OVF_STORE); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_DISK_CONTENT_TYPE_NOT_SUPPORTED_FOR_OPERATION); }	@org.junit.Test public void validateDiskIsOvfStore() { testMoveOrCopyForContentTypeFails(DiskContentType.OVF_STORE); }
@org.junit.Test public void testMoveOrCopyMemoryDiskFails() { initializeCommand(new org.ovirt.engine.core.common.businessentities.storage.DiskImage()); initVmDiskImage(false); command.getImage().setContentType(DiskContentType.MEMORY_DUMP_VOLUME); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_DISK_CONTENT_TYPE_NOT_SUPPORTED_FOR_OPERATION); }	@org.junit.Test public void testMoveOrCopyMemoryDiskFails() { testMoveOrCopyForContentTypeFails(DiskContentType.MEMORY_DUMP_VOLUME); }
private static boolean isExternalVM(java.lang.String ovfData) { org.ovirt.engine.core.common.businessentities.OriginType origin = org.ovirt.engine.core.utils.OvfUtils.getVmOrigin(ovfData); if (origin == (org.ovirt.engine.core.common.businessentities.OriginType.EXTERNAL)) { return true; } return false; }	public static boolean isExternalVM(org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument) { org.ovirt.engine.core.utils.ovf.xml.XmlNode content = xmlDocument.selectSingleNode("//*/Content"); org.w3c.dom.NodeList nodeList = content.getChildNodes(); for (int i = 0; i < (nodeList.getLength()); i++) { org.w3c.dom.Node node = nodeList.item(i); if ((node.getNodeName().equals(org.ovirt.engine.core.utils.OvfUtils.VM_ORIGIN)) && ((node.getChildNodes().item(0)) != null)) { java.lang.Integer originType = java.lang.Integer.valueOf(node.getChildNodes().item(0).getNodeValue()); return (org.ovirt.engine.core.common.businessentities.OriginType.EXTERNAL) == (org.ovirt.engine.core.common.businessentities.OriginType.forValue(originType)); } } return false; }
public org.ovirt.engine.core.common.businessentities.VDS refreshHost() { refreshHost(cachedVds); return cachedVds; }	public void refreshHost() { refreshHost(cachedVds); }
private void setQcowCompatForQcowImage() { org.ovirt.engine.core.common.businessentities.storage.Image image = imageDao.get(getDiskImage().getImageId()); if (((getDiskImage().getDiskStorageType()) == (DiskStorageType.IMAGE)) && (getDiskImage().getVolumeFormat().equals(VolumeFormat.COW))) { setQcowCompat(image, getDiskImage().getStoragePoolId(), getDiskImage().getId(), getDiskImage().getImageId(), getStorageDomainId(), null); imageDao.update(image); } }	private void setQcowCompatForQcowImage() { org.ovirt.engine.core.common.businessentities.storage.Image image = imageDao.get(getDiskImage().getImageId()); if (((getDiskImage().getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) && ((getDiskImage().getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW))) { image.setQcowCompat(getDiskImage().getQcowCompat()); imageDao.update(image); } }
@java.lang.Override public void endSuccessfully() { setQcowCompatForQcowImage(); if (org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImportAsTemplate()) { org.ovirt.engine.core.compat.Guid newTemplateId = createTemplate(); if (newTemplateId != null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.setSucceeded(true); }	@java.lang.Override public void endSuccessfully() { super.endSuccessfully(); setQcowCompatForQcowImage(); if (org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImportAsTemplate()) { org.ovirt.engine.core.compat.Guid newTemplateId = createTemplate(); if (newTemplateId != null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.setSucceeded(true); }
@org.junit.Before public void setUp() { nic = new org.ovirt.engine.core.common.businessentities.network.VmNic(); network = createNetwork(); underTest = spy(new org.ovirt.engine.core.bll.network.ExternalNetworkManager(nic, network)); injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); when(providerDao.get(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); when(providerProxyFactory.create(provider)).thenReturn(networkProviderProxy); }	@org.junit.Before public void setUp() { nic = new org.ovirt.engine.core.common.businessentities.network.VmNic(); network = createNetwork(); underTest = spy(new org.ovirt.engine.core.bll.network.ExternalNetworkManager(nic, network)); injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); when(providerDao.get(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); doReturn(providerProxyFactory).when(underTest).getProviderProxyFactory(); when(providerProxyFactory.create(provider)).thenReturn(networkProviderProxy); }
public static org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy getFromStorageDomainId(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getDbFacade().getStorageDomainDao().get(storageDomainId, userID, isFiltered); if (storageDomain != null) { org.ovirt.engine.core.common.businessentities.Provider provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomain.getStorage())); return org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy.providerProxyFactory.create(provider); } return null; }	public static org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy getFromStorageDomainId(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered, org.ovirt.engine.core.bll.provider.ProviderProxyFactory providerProxyFactory) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getDbFacade().getStorageDomainDao().get(storageDomainId, userID, isFiltered); if (storageDomain != null) { org.ovirt.engine.core.common.businessentities.Provider provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomain.getStorage())); return providerProxyFactory.create(provider); } return null; }
public static org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy getFromStorageDomainId(org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = getDbFacade().getStorageDomainStaticDao().get(storageDomainId); if (storageDomainStatic != null) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomainStatic.getStorage())); return org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy.providerProxyFactory.create(provider); } return null; }	public static org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy getFromStorageDomainId(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.bll.provider.ProviderProxyFactory providerProxyFactory) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = getDbFacade().getStorageDomainStaticDao().get(storageDomainId); if (storageDomainStatic != null) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomainStatic.getStorage())); return providerProxyFactory.create(provider); } return null; }
private static org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy getProviderFromStorageDomainStatic(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic) { org.ovirt.engine.core.common.businessentities.Provider provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomainStatic.getStorage())); return org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy.providerProxyFactory.create(provider); }	private static org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy getProviderFromStorageDomainStatic(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic, org.ovirt.engine.core.bll.provider.ProviderProxyFactory providerProxyFactory) { org.ovirt.engine.core.common.businessentities.Provider provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomainStatic.getStorage())); return providerProxyFactory.create(provider); }
public void deallocateIfExternal() { if (((getNetwork()) != null) && (getNetwork().isExternal())) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = getProviderDao().get(getNetwork().getProvidedBy().getProviderId()); org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy providerProxy = providerProxyFactory.create(provider); try { providerProxy.deallocate(nic); } catch (org.ovirt.engine.core.common.errors.EngineException e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase removePortFailureEvent = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); removePortFailureEvent.addCustomValue("NicName", nic.getName()); removePortFailureEvent.addCustomValue("NicId", nic.getId().toString()); removePortFailureEvent.addCustomValue("ProviderName", provider.getName()); getAuditLogDirector().log(removePortFailureEvent, AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED); } } }	public void deallocateIfExternal() { if (((getNetwork()) != null) && (getNetwork().isExternal())) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = getProviderDao().get(getNetwork().getProvidedBy().getProviderId()); org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy providerProxy = getProviderProxyFactory().create(provider); try { providerProxy.deallocate(nic); } catch (org.ovirt.engine.core.common.errors.EngineException e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable removePortFailureEvent = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); removePortFailureEvent.addCustomValue("NicName", nic.getName()); removePortFailureEvent.addCustomValue("NicId", nic.getId().toString()); removePortFailureEvent.addCustomValue("ProviderName", provider.getName()); getAuditLogDirector().log(removePortFailureEvent, AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED); } } }
@java.lang.Override protected void updateStorageDomainDiscardAfterDelete(org.ovirt.engine.core.compat.Version compatibilityVersion) { if ((org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommon.getStorageDomain().getDiscardAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommon.getStorageDomain().setDiscardAfterDelete(false); } }	@java.lang.Override protected boolean getDefaultDiscardAfterDelete(org.ovirt.engine.core.compat.Version compatibilityVersion) { return false; }
@java.lang.Override protected void updateStorageDomainDiscardAfterDelete(org.ovirt.engine.core.compat.Version compatibilityVersion) { if ((org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getDiscardAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setDiscardAfterDelete(org.ovirt.engine.core.common.FeatureSupported.discardAfterDeleteSupported(compatibilityVersion)); } }	@java.lang.Override protected boolean getDefaultDiscardAfterDelete(org.ovirt.engine.core.compat.Version compatibilityVersion) { return org.ovirt.engine.core.common.FeatureSupported.discardAfterDeleteSupported(compatibilityVersion); }
@java.lang.Override public void init() { super.init(); updateStorageDomainDiscardAfterDelete(getTargetStoragePool().getCompatibilityVersion()); }	@java.lang.Override public void init() { super.init(); initStorageDomainDiscardAfterDelete(getTargetStoragePool().getCompatibilityVersion()); }
protected abstract void updateStorageDomainDiscardAfterDelete(org.ovirt.engine.core.compat.Version compatibilityVersion);	private void initStorageDomainDiscardAfterDelete(org.ovirt.engine.core.compat.Version compatibilityVersion) { if ((org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().getDiscardAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().setDiscardAfterDelete(getDefaultDiscardAfterDelete(compatibilityVersion)); } }
protected boolean validateAttachedDirectLuns() { if ((org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getAttachedDirectLunsIds()) == null) { return true; } java.util.Set<java.lang.String> idsOfDirectLunsAttachedToVmsInPool = getIdsOfDirectLunsAttachedToVmsInPool(); java.util.Collection<java.lang.String> directLunsNotAttachedToVmInPool = org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getAttachedDirectLunsIds().stream().filter(( lunId) -> !(idsOfDirectLunsAttachedToVmsInPool.contains(lunId))).collect(java.util.stream.Collectors.toList()); return (directLunsNotAttachedToVmInPool.isEmpty()) || (failValidation(EngineMessage.ACTION_TYPE_FAILED_CANNOT_SYNC_DIRECT_LUNS_NOT_ATTACHED_TO_VM_IN_POOL, java.lang.String.format("$lunIds %s", directLunsNotAttachedToVmInPool.stream().sorted().collect(java.util.stream.Collectors.joining(","))), java.lang.String.format("$storagePoolId %s", org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getStoragePoolId()))); }	protected java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsToUpdateInDb() { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> diskToLunIds = getDiskToLunIdsOfDirectLunsAttachedToVmsInPool(); java.util.Map<java.lang.String, org.ovirt.engine.core.compat.Guid> lunToDiskIds = diskToLunIds.entrySet().stream().collect(java.util.stream.Collectors.toMap(java.util.Map.Entry::getValue, java.util.Map.Entry::getKey)); java.util.List<java.lang.String> lunsIds = java.util.Optional.ofNullable(org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getAttachedDirectLunDisksIds()).map(( set) -> set.stream().map(diskToLunIds::get).collect(java.util.stream.Collectors.toList())).orElse(null); return org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getDeviceList(lunsIds).stream().filter(( lun) -> lunToDiskIds.containsKey(lun.getLUNId())).peek(( lun) -> lun.setVolumeGroupId("")).peek(( lun) -> lun.setDiskId(lunToDiskIds.get(lun.getLUNId()))).collect(java.util.stream.Collectors.toList()); }
private void mockDirectLunsAttachedToVmsInPool(java.lang.String... LunsIds) { doReturn(new java.util.HashSet(java.util.Arrays.asList(LunsIds))).when(command).getIdsOfDirectLunsAttachedToVmsInPool(); }	private void mockDiskToLunIdsOfDirectLunsAttachedToVmsInPool(org.ovirt.engine.core.common.businessentities.storage.LUNs... luns) { doReturn(java.util.Arrays.asList(luns).stream().collect(java.util.stream.Collectors.toMap(LUNs::getDiskId, LUNs::getLUNId))).when(command).getDiskToLunIdsOfDirectLunsAttachedToVmsInPool(); }
@org.junit.Test public void testGetLunsToUpdateInDb() { command.getParameters().setDeviceList(java.util.Arrays.asList(lun1, lun2, lun3)); mockDirectLunsAttachedToVmsInPool("lun1", "lun2"); assertEquals(java.util.Arrays.asList(lun1, lun2), command.getLunsToUpdateInDb()); }	@org.junit.Test public void testGetLunsToUpdateInDb() { command.getParameters().setDeviceList(java.util.Arrays.asList(lun1, lun2, lun3)); mockDiskToLunIdsOfDirectLunsAttachedToVmsInPool(lun1, lun2); assertEquals(java.util.Arrays.asList(lun1, lun2), command.getLunsToUpdateInDb()); }
protected java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsToUpdateInDb() { java.util.Set<java.lang.String> idsOfDirectLunsAttachedToVmsInPool = getIdsOfDirectLunsAttachedToVmsInPool(); java.util.List<java.lang.String> lunsIds = java.util.Optional.ofNullable(org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getAttachedDirectLunsIds()).map(java.util.ArrayList::new).orElse(null); return org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getDeviceList(lunsIds).stream().filter(( lun) -> idsOfDirectLunsAttachedToVmsInPool.contains(lun.getId())).peek(( lun) -> lun.setVolumeGroupId("")).collect(java.util.stream.Collectors.toList()); }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { java.util.Set<org.ovirt.engine.core.compat.Guid> directLunsToLock = java.util.Optional.ofNullable(org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getAttachedDirectLunDisksIds()).orElse(getDiskToLunIdsOfDirectLunsAttachedToVmsInPool().keySet()); return directLunsToLock.stream().collect(java.util.stream.Collectors.toMap(Guid::toString, ( diskId) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED))); }
@org.junit.Test public void validateAttachedDirectLunsWithLunsThatAreNotAttachedToVmInPool() { command.getParameters().setAttachedDirectLunsIds(java.util.Arrays.asList("lun1", "lun3")); mockDirectLunsAttachedToVmsInPool("lun2", "lun3"); assertFalse(command.validateAttachedDirectLuns()); org.ovirt.engine.core.bll.ValidateTestUtils.assertValidationMessages("lun2 is not attached to a vm in the datacenter.", command, EngineMessage.ACTION_TYPE_FAILED_CANNOT_SYNC_DIRECT_LUNS_NOT_ATTACHED_TO_VM_IN_POOL); }	@org.junit.Test public void validateAttachedDirectLunsWithLunsThatAreNotAttachedToVmInPool() { command.getParameters().setAttachedDirectLunDisksIds(new java.util.HashSet(java.util.Arrays.asList(lun1.getDiskId(), lun3.getDiskId()))); mockDiskToLunIdsOfDirectLunsAttachedToVmsInPool(lun2, lun3); assertFalse(command.validateAttachedDirectLuns()); org.ovirt.engine.core.bll.ValidateTestUtils.assertValidationMessages("lun2 is not attached to a vm in the datacenter.", command, EngineMessage.ACTION_TYPE_FAILED_CANNOT_SYNC_DIRECT_LUN_DISKS_NOT_ATTACHED_TO_VM_IN_POOL); }
public java.util.Collection<java.lang.String> getAttachedDirectLunsIds() { return attachedDirectLunsIds; }	public java.util.Set<org.ovirt.engine.core.compat.Guid> getAttachedDirectLunDisksIds() { return attachedDirectLunDisksIds; }
public void setAttachedDirectLunsIds(java.util.Collection<java.lang.String> attachedDirectLunsIds) { this.attachedDirectLunsIds = attachedDirectLunsIds; }	public void setAttachedDirectLunDisksIds(java.util.Set<org.ovirt.engine.core.compat.Guid> attachedDirectLunDisksIds) { this.attachedDirectLunDisksIds = attachedDirectLunDisksIds; }
java.lang.String ACTION_TYPE_FAILED_CANNOT_SYNC_DIRECT_LUNS_NOT_ATTACHED_TO_VM_IN_POOL();	java.lang.String ACTION_TYPE_FAILED_CANNOT_SYNC_DIRECT_LUN_DISKS_NOT_ATTACHED_TO_VM_IN_POOL();
protected java.util.Set<java.lang.String> getIdsOfDirectLunsAttachedToVmsInPool() { if ((idsOfDirectLunsAttachedToVmsInPool) == null) { idsOfDirectLunsAttachedToVmsInPool = diskLunMapDao.getDiskLunMapsForVmsInPool(org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getStoragePoolId()).stream().map(DiskLunMap::getLunId).collect(java.util.stream.Collectors.toSet()); } return idsOfDirectLunsAttachedToVmsInPool; }	protected java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> getDiskToLunIdsOfDirectLunsAttachedToVmsInPool() { if ((diskToLunIdsOfDirectLunsAttachedToVmsInPool) == null) { diskToLunIdsOfDirectLunsAttachedToVmsInPool = diskLunMapDao.getDiskLunMapsForVmsInPool(org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getStoragePoolId()).stream().collect(java.util.stream.Collectors.toMap(DiskLunMap::getDiskId, DiskLunMap::getLunId)); } return diskToLunIdsOfDirectLunsAttachedToVmsInPool; }
@org.junit.Test public void validateAttachedDirectLunsAllLunsAttachedToVmInPool() { command.getParameters().setAttachedDirectLunsIds(java.util.Arrays.asList("lun1", "lun3")); mockDirectLunsAttachedToVmsInPool("lun1", "lun2", "lun3"); assertTrue(command.validateAttachedDirectLuns()); }	@org.junit.Test public void validateAttachedDirectLunsAllLunsAttachedToVmsInPool() { command.getParameters().setAttachedDirectLunDisksIds(new java.util.HashSet(java.util.Arrays.asList(lun1.getDiskId(), lun3.getDiskId()))); mockDiskToLunIdsOfDirectLunsAttachedToVmsInPool(lun1, lun2, lun3); assertTrue(command.validateAttachedDirectLuns()); }
@org.junit.Before public void setUp() { lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setId("lun1"); lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setId("lun2"); lun3 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun3.setId("lun3"); }	@org.junit.Before public void setUp() { lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUNId("lun1"); lun1.setDiskId(org.ovirt.engine.core.compat.Guid.newGuid()); lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUNId("lun2"); lun2.setDiskId(org.ovirt.engine.core.compat.Guid.newGuid()); lun3 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun3.setLUNId("lun3"); lun3.setDiskId(org.ovirt.engine.core.compat.Guid.newGuid()); }
@java.lang.SuppressWarnings("unchecked") private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { if ((SyncLunsInfoForBlockStorageDomainCommand.getParameters().getLunsFromVgInfo()) != null) { return SyncLunsInfoForBlockStorageDomainCommand.getParameters().getLunsFromVgInfo(); } org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId(), SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); if ((SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()) == null) { return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithoutFailover(VDSCommandType.GetVGInfo, params, SyncLunsInfoForBlockStorageDomainCommand.getStoragePoolId(), null).getReturnValue())); } return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params).getReturnValue())); }	@java.lang.SuppressWarnings("unchecked") private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getVgInfo() { if ((SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVgInfo()) != null) { log.debug(("Using the virtual group's information from the command's parameters rather " + "than calling getVgInfo and getting the information directly from vdsm.")); return SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVgInfo(); } org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId(), SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); if ((SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()) == null) { return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithoutFailover(VDSCommandType.GetVGInfo, params, SyncLunsInfoForBlockStorageDomainCommand.getStoragePoolId(), null).getReturnValue())); } return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params).getReturnValue())); }
public java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { return lunsFromVgInfo; }	public java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getVgInfo() { return vgInfo; }
@java.lang.Override protected void executeCommand() { lunDao.updateAll(getLunsToUpdateInDb()); org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToUpdateInDb = getLunsToUpdateInDb(); lunDao.updateAllInBatch(lunsToUpdateInDb); log.info(lunsToUpdateInDb.stream().map(LUNs::getLUNId).collect(java.util.stream.Collectors.joining(", ", "LUNs with IDs: [", "] were updated in the DB."))); org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.setSucceeded(true); }
public static int getSizeOfMemoryDeviceMb(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if ((memoryDevice.getType()) != (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) { throw new java.lang.RuntimeException(((("Memory device expected but device " + memoryDevice) + " passed of type ") + (memoryDevice.getType()))); } final java.lang.String sizeText = ((java.lang.String) (memoryDevice.getSpecParams().get(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE))); return java.lang.Integer.parseInt(sizeText); }	public static java.util.Optional<java.lang.Integer> getSizeOfMemoryDeviceMb(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isMemory(memoryDevice))) { throw new java.lang.RuntimeException(((("Memory device expected but device " + memoryDevice) + " passed of type ") + (memoryDevice.getType()))); } return org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSpecParamsIntValue(memoryDevice, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE); }
private void addImportedOtherDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDeviceToAdd) { boolean hasCd = false; for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmBase.getManagedDeviceMap().values()) { switch (vmDevice.getType()) { case DISK : if (VmDeviceType.CDROM.getName().equals(vmDevice.getDevice())) { hasCd = true; } else { continue; } break; case INTERFACE : continue; case VIDEO : vmDevice.setSpecParams(getVideoDeviceSpecParams(vmBase)); break; case HOSTDEV : continue; } vmDevice.setManaged(true); vmDeviceToAdd.add(vmDevice); } if (!hasCd) { addCdDevice(vmBase.getId()); } final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> unmanagedDevicesToAdd = vmBase.getUnmanagedDeviceList().stream().filter(org.ovirt.engine.core.bll.utils.VmDeviceUtils::removeMalformedMemoryDevices).collect(java.util.stream.Collectors.toList()); vmDeviceToAdd.addAll(unmanagedDevicesToAdd); }	public void addImportedDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, boolean isImportAsNewEntity, boolean withMemory) { if (isImportAsNewEntity) { setNewIdInImportedCollections(vmBase); } java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToAdd = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate = new java.util.ArrayList<>(); addImportedDiskDevices(vmBase, vmDevicesToUpdate); addImportedInterfaces(vmBase, vmDevicesToUpdate); addImportedOtherDevices(vmBase, vmDevicesToAdd, withMemory); vmDeviceDao.saveAll(vmDevicesToAdd); vmDeviceDao.updateAll(vmDevicesToUpdate); }
private static boolean removeMalformedMemoryDevices(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice) { if ((((vmDevice.getType()) == (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) && (VmDeviceType.MEMORY.getName().equals(vmDevice.getDevice()))) && (((vmDevice.getSpecParams().get(VmDeviceCommonUtils.SPEC_PARAM_SIZE)) == null) || ((vmDevice.getSpecParams().get(VmDeviceCommonUtils.SPEC_PARAM_NODE)) == null))) { return false; } return true; }	private void addImportedOtherDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDeviceToAdd, boolean withMemory) { boolean hasCd = false; for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmBase.getManagedDeviceMap().values()) { switch (vmDevice.getType()) { case DISK : if (VmDeviceType.CDROM.getName().equals(vmDevice.getDevice())) { hasCd = true; } else { continue; } break; case INTERFACE : continue; case VIDEO : vmDevice.setSpecParams(getVideoDeviceSpecParams(vmBase)); break; case HOSTDEV : continue; } vmDevice.setManaged(true); vmDeviceToAdd.add(vmDevice); } if (!hasCd) { addCdDevice(vmBase.getId()); } final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> unmanagedDevicesToAdd = vmBase.getUnmanagedDeviceList().stream().filter(( device) -> (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isMemory(device))) || withMemory).collect(java.util.stream.Collectors.toList()); vmDeviceToAdd.addAll(unmanagedDevicesToAdd); }
@java.lang.Override public javax.ws.rs.core.Response updateOvfStore(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters params = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters(); params.setStorageDomainId(guid); params.setProcessOvfUpdateForStoragePool(true); return performAction(VdcActionType.ProcessOvfUpdateForStorageDomain, params); }	@java.lang.Override public javax.ws.rs.core.Response updateOvfStore(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.StorageDomainParametersBase params = new org.ovirt.engine.core.common.action.StorageDomainParametersBase(guid); return performAction(VdcActionType.UpdateOvfStoreForStorageDomain, params); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Locked, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); if (shouldPerformOvfUpdate()) { org.ovirt.engine.core.common.action.ProcessOvfUpdateForStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStoragePoolParameters(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getStoragePoolId()); runInternalAction(VdcActionType.ProcessOvfUpdateForStoragePool, parameters, null); runInternalActionWithTasksContext(VdcActionType.ProcessOvfUpdateForStorageDomain, createProcessOvfUpdateForDomainParams(), null); } if (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.noAsyncOperations()) { executeDeactivateCommand(); } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Locked, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); if (shouldPerformOvfUpdate()) { org.ovirt.engine.core.common.action.StoragePoolParametersBase parameters = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getStoragePoolId()); runInternalAction(VdcActionType.ProcessOvfUpdateForStoragePool, parameters, null); runInternalActionWithTasksContext(VdcActionType.ProcessOvfUpdateForStorageDomain, createProcessOvfUpdateForDomainParams(), null); } if (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.noAsyncOperations()) { executeDeactivateCommand(); } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { if (org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getParameters().isProcessOvfUpdateForStoragePool()) { syncOvfForStoragePool(); } int missingDiskCount = getMissingDiskCount(); if (missingDiskCount == 0) { setOvfUpdateStep(OvfUpdateStep.OVF_UPLOAD); updateOvfStoreContent(); } else { setOvfUpdateStep(OvfUpdateStep.OVF_STORES_CREATION); createOvfStoreDisks(getMissingDiskCount()); } org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { int missingDiskCount = getMissingDiskCount(); if (missingDiskCount == 0) { setOvfUpdateStep(OvfUpdateStep.OVF_UPLOAD); updateOvfStoreContent(); } else { setOvfUpdateStep(OvfUpdateStep.OVF_STORES_CREATION); createOvfStoreDisks(getMissingDiskCount()); } org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.setSucceeded(true); }
private org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils mockVmPropertiesUtils() throws org.ovirt.engine.core.common.utils.exceptions.InitializationException { org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils utils = spy(new org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils()); doReturn(("sap_agent=^(true|false)$;sndbuf=^[0-9]+$;" + (("vhost=^(([a-zA-Z0-9_]*):(true|false))(,(([a-zA-Z0-9_]*):(true|false)))*$;" + "viodiskcache=^(none|writeback|writethrough)$") + "mdev_type=^.*$"))).when(utils).getPredefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn("").when(utils).getUserdefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn(new java.util.HashSet(java.util.Arrays.asList(Version.v3_6, Version.v4_0))).when(utils).getSupportedClusterLevels(); doReturn(utils).when(runVmValidator).getVmPropertiesUtils(); utils.init(); return utils; }	private org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils mockVmPropertiesUtils() throws org.ovirt.engine.core.common.utils.exceptions.InitializationException { org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils utils = spy(new org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils()); doReturn(("sap_agent=^(true|false)$;sndbuf=^[0-9]+$;" + (("vhost=^(([a-zA-Z0-9_]*):(true|false))(,(([a-zA-Z0-9_]*):(true|false)))*$;" + "viodiskcache=^(none|writeback|writethrough)$;") + "mdev_type=^.*$"))).when(utils).getPredefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn("").when(utils).getUserdefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn(new java.util.HashSet(java.util.Arrays.asList(Version.v3_6, Version.v4_0))).when(utils).getSupportedClusterLevels(); doReturn(utils).when(runVmValidator).getVmPropertiesUtils(); utils.init(); return utils; }
public void setSingleSelectionOnly() { singleSelectionOnly = true; }	public boolean isSingleSelectionOnly() { return false; }
public com.google.gwt.view.client.SelectionModel<T> getSelectionModel() { if ((selectionModel) == null) { if (singleSelectionOnly) { selectionModel = new com.google.gwt.view.client.SingleSelectionModel(new org.ovirt.engine.ui.uicommonweb.models.QueryableEntityKeyProvider()); } else { selectionModel = new org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel(new org.ovirt.engine.ui.uicommonweb.models.QueryableEntityKeyProvider()); } } return selectionModel; }	public com.google.gwt.view.client.SelectionModel<T> getSelectionModel() { if (isSingleSelectionOnly()) { return getSingleSelectionModel(); } else { return getOrderedMultiSelectionModel(); } }
protected com.google.gwt.view.client.AsyncDataProvider<T> getDataProvider() { if (null == (dataProvider)) { dataProvider = new com.google.gwt.view.client.AsyncDataProvider<T>(org.ovirt.engine.ui.common.uicommon.model.DataBoundTabModelProvider.getModel().getSelectionModel()) { @java.lang.Override protected void onRangeChanged(com.google.gwt.view.client.HasData<T> display) { updateData(); } }; } return dataProvider; }	protected com.google.gwt.view.client.AsyncDataProvider<T> getDataProvider() { if ((dataProvider) == null) { dataProvider = new com.google.gwt.view.client.AsyncDataProvider<T>(org.ovirt.engine.ui.common.uicommon.model.DataBoundTabModelProvider.getModel().getSelectionModel()) { @java.lang.Override protected void onRangeChanged(com.google.gwt.view.client.HasData<T> display) { updateData(); } }; } return dataProvider; }
@java.lang.Override public java.util.List<T> getSelectedItems() { com.google.gwt.view.client.SelectionModel<T> selectionModel = org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().getSelectionModel(); if (selectionModel instanceof org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel) { return ((org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel<T>) (selectionModel)).getSelectedList(); } else if (selectionModel instanceof com.google.gwt.view.client.SingleSelectionModel) { return java.util.Arrays.asList(((com.google.gwt.view.client.SingleSelectionModel<T>) (selectionModel)).getSelectedObject()); } return java.util.Collections.EMPTY_LIST; }	@java.lang.Override public java.util.List<T> getSelectedItems() { if (org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().isSingleSelectionOnly()) { return ((java.util.List<T>) (java.util.Collections.singletonList(org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().getSingleSelectionModel().getSelectedObject()))); } else { return org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().getOrderedMultiSelectionModel().getSelectedList(); } }
@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener(( ev, sender, args) -> clearSelection()); getModel().getSelectionModel().addSelectionChangeHandler(( event) -> { this.setSelectedItems(java.util.Arrays.asList(((SingleSelectionModel<org.ovirt.engine.core.common.businessentities.Bookmark>) (getModel().getSelectionModel())).getSelectedObject())); }); }	@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener(( ev, sender, args) -> clearSelection()); getModel().getSelectionModel().addSelectionChangeHandler(( event) -> { this.setSelectedItems(java.util.Collections.singletonList(((SingleSelectionModel<org.ovirt.engine.core.common.businessentities.Bookmark>) (getModel().getSelectionModel())).getSelectedObject())); }); }
@java.lang.Override public java.util.List<T> getSelectedItems() { if (org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().isSingleSelectionOnly()) { return ((java.util.List<T>) (java.util.Collections.singletonList(((com.google.gwt.view.client.SingleSelectionModel<T>) (org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().getSelectionModel())).getSelectedObject()))); } else { return ((org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel<T>) (org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().getSelectionModel())).getSelectedList(); } }	@java.lang.Override public java.util.List<T> getSelectedItems() { return org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().getSelectedObjects(); }
private org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils mockVmPropertiesUtils() throws org.ovirt.engine.core.common.utils.exceptions.InitializationException { org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils utils = spy(new org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils()); doReturn(("sap_agent=^(true|false)$;sndbuf=^[0-9]+$;" + (("vhost=^(([a-zA-Z0-9_]*):(true|false))(,(([a-zA-Z0-9_]*):(true|false)))*$;" + "viodiskcache=^(none|writeback|writethrough)$;") + "mdev_type=^.*$;hugepages=^(true|false)|([0-9]+)$;hugepagesz=^[0-9]+$"))).when(utils).getPredefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn("").when(utils).getUserdefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn(new java.util.HashSet(java.util.Arrays.asList(Version.v3_6, Version.v4_0))).when(utils).getSupportedClusterLevels(); doReturn(utils).when(runVmValidator).getVmPropertiesUtils(); utils.init(); return utils; }	private org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils mockVmPropertiesUtils() throws org.ovirt.engine.core.common.utils.exceptions.InitializationException { org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils utils = spy(new org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils()); doReturn(("sap_agent=^(true|false)$;sndbuf=^[0-9]+$;" + (("vhost=^(([a-zA-Z0-9_]*):(true|false))(,(([a-zA-Z0-9_]*):(true|false)))*$;" + "viodiskcache=^(none|writeback|writethrough)$;") + "mdev_type=^.*$;hugepages=^[0-9]+$"))).when(utils).getPredefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn("").when(utils).getUserdefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn(new java.util.HashSet(java.util.Arrays.asList(Version.v3_6, Version.v4_0))).when(utils).getSupportedClusterLevels(); doReturn(utils).when(runVmValidator).getVmPropertiesUtils(); utils.init(); return utils; }
public void setHeaderTitle(java.lang.String title) { this.title = title; this.myId = (title.replace(" ", "_").toLowerCase()) + 1234; }	public void setHeaderTitle(java.lang.String title) { this.title = title; this.thisWidgetId = title.replace(" ", "_").toLowerCase(); }
public void setDataToggleInfo(org.gwtbootstrap3.client.ui.constants.Toggle toggle, java.lang.String parentId) { this.toggle = toggle; this.parentId = parentId; }	public void setDataToggleInfo(org.gwtbootstrap3.client.ui.constants.Toggle toggle, java.lang.String parentId) { this.toggle = toggle; this.parentWidgetId = parentId; }
public void addNotificationListWidget(org.ovirt.engine.ui.webadmin.widget.alert.NotificationListWidget widget) { widget.setDataToggleInfo(Toggle.COLLAPSE, org.ovirt.engine.ui.webadmin.widget.alert.EventsListPopover.EVENT_ACCORDION); contentPanel.add(widget.content); }	public void addNotificationListWidget(org.ovirt.engine.ui.webadmin.widget.alert.NotificationListWidget widget) { widget.setDataToggleInfo(Toggle.COLLAPSE, org.ovirt.engine.ui.webadmin.widget.alert.EventsListPopover.EVENT_ACCORDION); contentPanel.add(widget.content); notificationWidgetList.add(widget); }
private boolean checkIfCollapsed() { boolean result = false; if ((titleAnchor) != null) { java.lang.String styleString = titleAnchor.getStyleName(); if (styleString != null) { java.lang.String[] styles = styleString.split(" "); for (java.lang.String style : styles) { if (style.equals(PatternflyConstants.COLLAPSED)) { result = true; break; } } } } else { result = startCollapsed; } return result; }	private boolean checkIfCollapsed() { boolean result = false; if ((titleAnchor) != null) { java.lang.String styleString = titleAnchor.getStyleName(); if (styleString != null) { java.lang.String[] styles = styleString.split(" "); java.util.Optional<java.lang.String> found = java.util.Arrays.asList(styles).stream().filter(( s) -> s.equals(PatternflyConstants.COLLAPSED)).findFirst(); result = found.isPresent(); } } else { result = startCollapsed; } return result; }
private void updatePermissionPanel() { final org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile = getModel().getSelectedItem(); final org.ovirt.engine.ui.common.widget.table.SimpleActionTable<org.ovirt.engine.core.common.businessentities.profiles.CpuProfile> table = getTable(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { if ((permissionPanelVisible) && (cpuProfile == null)) { tableContainer.clear(); tableContainer.add(getContainer()); permissionPanelVisible = false; } else if ((!(permissionPanelVisible)) && (cpuProfile != null)) { tableContainer.clear(); tableContainer.add(getContainer()); tableContainer.add(permissionContainer); permissionPanelVisible = true; } }); }	private void updatePermissionPanel() { final org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile = getModel().getSelectedItem(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { if ((permissionPanelVisible) && (cpuProfile == null)) { tableContainer.clear(); tableContainer.add(getContainer()); permissionPanelVisible = false; } else if ((!(permissionPanelVisible)) && (cpuProfile != null)) { tableContainer.clear(); tableContainer.add(getContainer()); tableContainer.add(permissionContainer); permissionPanelVisible = true; } }); }
public java.lang.String getSearchString(java.lang.String prefix) { java.lang.String result = null; if (prefix != null) { result = searchStringMap.get(prefix); searchStringMap.remove(prefix); } return result; }	public java.lang.String getSearchStringPrefix(java.lang.String prefix) { java.lang.String result = null; if (prefix != null) { result = searchStringMap.get(prefix); searchStringMap.remove(prefix); } return result; }
@java.lang.Override public void setSearchPanel(com.google.gwt.user.client.ui.IsWidget searchPanel) { actionPanel.setSearchPanel(searchPanel); if (searchPanel != null) { actionPanel.setVisible(true); } }	@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel)) { if (content != null) { actionPanel.setSearchPanel(content); actionPanel.setVisible(true); } } else { super.setInSlot(slot, content); } }
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler(( event) -> { org.ovirt.engine.ui.webadmin.section.main.presenter.modelProvider.setSelectedItems(getSelectedItems()); fireTableSelectionChangeEvent(); if (!(isVisible())) { handlePlaceTransition(); } })); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getEventBus().addHandler(org.ovirt.engine.ui.uicommonweb.models.ApplySearchStringEvent.getType(), ( event) -> { applySearchString(event.getSearchString()); })); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setDetailPlaceTransitionHandler(this); this.breadCrumbs.setSelectionModel(getTable().getSelectionModel()); searchStringCollector.markActivePrefix(modelProvider.getModel().getDefaultSearchString()); java.lang.String searchString = searchStringCollector.getSearchString(modelProvider.getModel().getSearchString()); if (searchString != null) { applySearchString(searchString); } }	@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler(( event) -> { org.ovirt.engine.ui.webadmin.section.main.presenter.modelProvider.setSelectedItems(getSelectedItems()); fireTableSelectionChangeEvent(); if (!(isVisible())) { handlePlaceTransition(); } })); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getEventBus().addHandler(org.ovirt.engine.ui.uicommonweb.models.ApplySearchStringEvent.getType(), ( event) -> { applySearchString(event.getSearchString()); })); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setDetailPlaceTransitionHandler(this); java.lang.String searchString = searchStringCollector.getSearchStringPrefix(modelProvider.getModel().getSearchString()); if (searchString != null) { applySearchString(searchString); } }
@org.junit.Test public void testCommandClassExistence() { org.ovirt.engine.core.bll.CommandEnumTestUtils.testCommandsExist(org.ovirt.engine.core.common.action.ActionType.class, ( vat) -> org.ovirt.engine.core.bll.CommandsFactory.getCommandClass(vat.name())); }	@org.junit.Test public void testCommandClassExistence() { org.ovirt.engine.core.bll.CommandEnumTestUtils.testCommandsExist(org.ovirt.engine.core.common.action.ActionType.class, ( at) -> org.ovirt.engine.core.bll.CommandsFactory.getCommandClass(at.name())); }
@org.junit.Test public void testAuditLogTypeValueUniqueness() { java.util.BitSet bitset = new java.util.BitSet(org.ovirt.engine.core.bll.ActionTypeTest.bitSetSize); java.util.Set<java.lang.Integer> nonUniqueValues = new java.util.TreeSet<>(); for (org.ovirt.engine.core.common.action.ActionType vat : org.ovirt.engine.core.common.action.ActionType.values()) { if (bitset.get(vat.getValue())) { nonUniqueValues.add(vat.getValue()); } else { bitset.set(vat.getValue()); } } assertTrue(("ActionType contains the following non unique values: " + nonUniqueValues), nonUniqueValues.isEmpty()); }	@org.junit.Test public void testAuditLogTypeValueUniqueness() { java.util.BitSet bitset = new java.util.BitSet(org.ovirt.engine.core.bll.ActionTypeTest.bitSetSize); java.util.Set<java.lang.Integer> nonUniqueValues = new java.util.TreeSet<>(); for (org.ovirt.engine.core.common.action.ActionType at : org.ovirt.engine.core.common.action.ActionType.values()) { if (bitset.get(at.getValue())) { nonUniqueValues.add(at.getValue()); } else { bitset.set(at.getValue()); } } assertTrue(("ActionType contains the following non unique values: " + nonUniqueValues), nonUniqueValues.isEmpty()); }
private java.util.Map<java.lang.String, java.lang.Object> parseBalloon(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( dev) -> (dev.getType()) == VmDeviceGeneralType.BALLOON).findFirst(); if (!(db.isPresent())) { return java.util.Collections.emptyMap(); } org.ovirt.engine.core.common.businessentities.VmDevice device = db.get(); org.ovirt.engine.core.utils.ovf.xml.XmlNode node = document.selectSingleNode("//*/memballoon"); java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.Device, "memballoon"); result.put(VdsProperties.DeviceId, device.getId().getDeviceId().toString()); result.put(VdsProperties.Address, parseAddress(node)); result.put(VdsProperties.Alias, parseAlias(node)); return result; }	private java.util.Map<java.lang.String, java.lang.Object> parseBalloon(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { org.ovirt.engine.core.common.businessentities.VmDevice dbDevice = filterDevice(devices, VmDeviceGeneralType.BALLOON); if (dbDevice == null) { return java.util.Collections.emptyMap(); } org.ovirt.engine.core.utils.ovf.xml.XmlNode node = document.selectSingleNode("//*/memballoon"); if (node == null) { return java.util.Collections.emptyMap(); } java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.Device, "memballoon"); result.put(VdsProperties.DeviceId, dbDevice.getId().getDeviceId().toString()); result.put(VdsProperties.Address, parseAddress(node)); result.put(VdsProperties.Alias, parseAlias(node)); result.put(VdsProperties.SpecParams, dbDevice.getSpecParams()); return result; }
private java.util.Map<java.lang.String, java.lang.Object> parseWatchdog(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( dev) -> (dev.getType()) == VmDeviceGeneralType.WATCHDOG).findFirst(); if (!(db.isPresent())) { return java.util.Collections.emptyMap(); } org.ovirt.engine.core.common.businessentities.VmDevice device = db.get(); org.ovirt.engine.core.utils.ovf.xml.XmlNode node = document.selectSingleNode("//*/watchdog"); java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.Device, "watchdog"); result.put(VdsProperties.DeviceId, device.getId().getDeviceId().toString()); result.put(VdsProperties.Address, parseAddress(node)); result.put(VdsProperties.Alias, parseAlias(node)); return result; }	private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parseDisks(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices, org.ovirt.engine.core.compat.Guid vmId) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> dbDevices = filterDevices(devices, VmDeviceGeneralType.DISK); java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.ArrayList<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : selectNodes(document, VmDeviceGeneralType.DISK)) { java.util.Map<java.lang.String, java.lang.Object> dev = new java.util.HashMap<>(); dev.put(VdsProperties.Type, VmDeviceGeneralType.DISK.getValue()); dev.put(VdsProperties.Device, parseAttribute(node, org.ovirt.engine.core.vdsbroker.libvirt.VmDevicesConverter.DEVICE)); dev.put(VdsProperties.Address, parseAddress(node)); dev.put(VdsProperties.Alias, parseAlias(node)); java.lang.String path = parseDiskPath(node); org.ovirt.engine.core.common.businessentities.VmDevice dbDev = dbDevices.stream().filter(( d) -> d.getDevice().equals(dev.get(VdsProperties.Device))).filter(( d) -> (path.isEmpty()) || (path.contains(d.getId().getDeviceId().toString()))).findFirst().orElse(null); if (dbDev == null) { log.warn("unmanaged disk with path '{}' is ignored", path); continue; } dbDevices.remove(dbDev); dev.put(VdsProperties.DeviceId, dbDev.getId().getDeviceId().toString()); dev.put(VdsProperties.SpecParams, dbDev.getSpecParams()); result.add(dev); } return result; }
private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parseVideos(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( d) -> (d.getType()) == VmDeviceGeneralType.VIDEO).collect(java.util.stream.Collectors.toList()); if (db.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.ArrayList<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : document.selectNodes("//*/video")) { java.util.Map<java.lang.String, java.lang.Object> dev = new java.util.HashMap<>(); dev.put(VdsProperties.Device, "video"); dev.put(VdsProperties.Address, parseAddress(node)); java.lang.String alias = parseAlias(node); dev.put(VdsProperties.Alias, alias); java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> dbDev = db.stream().filter(( d) -> d.getAlias().equals(alias)).findFirst(); if (dbDev.isPresent()) { dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } else { dbDev = db.stream().filter(( d) -> d.getAlias().isEmpty()).findFirst(); dbDev.get().setAlias(alias); dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } result.add(dev); } return result; }	private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parseVideos(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> dbDevices = filterDevices(devices, VmDeviceGeneralType.VIDEO); java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.ArrayList<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : selectNodes(document, VmDeviceGeneralType.VIDEO)) { java.util.Map<java.lang.String, java.lang.Object> dev = new java.util.HashMap<>(); dev.put(VdsProperties.Type, VmDeviceGeneralType.VIDEO.getValue()); dev.put(VdsProperties.Device, parseVideoType(node)); dev.put(VdsProperties.Address, parseAddress(node)); dev.put(VdsProperties.Alias, parseAlias(node)); org.ovirt.engine.core.common.businessentities.VmDevice dbDev = dbDevices.stream().filter(( d) -> d.getDevice().equals(dev.get(VdsProperties.Device))).findFirst().orElse(null); if (dbDev == null) { log.warn("unmanaged video device with address '{}' is ignored", dev.get(VdsProperties.Address)); continue; } dbDevices.remove(dbDev); dev.put(VdsProperties.DeviceId, dbDev.getId().getDeviceId().toString()); dev.put(VdsProperties.SpecParams, dbDev.getSpecParams()); result.add(dev); } return result; }
public java.util.Map<java.lang.String, java.lang.Object> convert(org.ovirt.engine.core.compat.Guid vmId, java.lang.String xml) { java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.vm_guid, vmId); result.put(VdsProperties.Devices, parseDevices(xml, vmDeviceDao.getVmDeviceByVmId(vmId))); return result; }	public java.util.Map<java.lang.String, java.lang.Object> convert(org.ovirt.engine.core.compat.Guid vmId, java.lang.String xml) throws java.lang.Exception { java.lang.String devicesXml = xml.substring(xml.indexOf(org.ovirt.engine.core.vdsbroker.libvirt.VmDevicesConverter.DEVICES_START_ELEMENT), ((xml.indexOf(org.ovirt.engine.core.vdsbroker.libvirt.VmDevicesConverter.DEVICES_END_ELEMENT)) + (org.ovirt.engine.core.vdsbroker.libvirt.VmDevicesConverter.DEVICES_END_ELEMENT.length()))); org.ovirt.engine.core.utils.ovf.xml.XmlDocument document = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument(devicesXml); java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.vm_guid, vmId.toString()); result.put(VdsProperties.Devices, parseDevices(vmId, document)); return result; }
private java.lang.String parseMacAddress(XmlNode node) { XmlNode aliasNode = node.selectSingleNode("mac"); return aliasNode.attributes.get("address").getValue(); }	private java.lang.String parseMacAddress(XmlNode node) { XmlNode macNode = node.selectSingleNode("mac"); return macNode.attributes.get("address").getValue(); }
private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parseInterfaces(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( d) -> (d.getType()) == VmDeviceGeneralType.INTERFACE).collect(java.util.stream.Collectors.toList()); if (db.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.ArrayList<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : document.selectNodes("//*/interface")) { java.util.Map<java.lang.String, java.lang.Object> dev = new java.util.HashMap<>(); dev.put(VdsProperties.Device, "interface"); java.lang.String mac = parseMacAddress(node); dev.put(VdsProperties.Address, parseAddress(node)); java.lang.String alias = parseAlias(node); dev.put(VdsProperties.Alias, alias); java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> dbDev = db.stream().filter(( d) -> d.getAlias().equals(alias)).findFirst(); if (dbDev.isPresent()) { dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } else { dbDev = db.stream().filter(( d) -> d.getAlias().isEmpty()).findFirst(); dbDev.get().setAlias(alias); dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } result.add(dev); } return result; }	private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parseRedirs(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> dbDevices = filterDevices(devices, VmDeviceGeneralType.REDIR); java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.ArrayList<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : document.selectNodes("//*/redirdev")) { java.util.Map<java.lang.String, java.lang.Object> dev = new java.util.HashMap<>(); dev.put(VdsProperties.Type, VmDeviceGeneralType.REDIR.getValue()); dev.put(VdsProperties.Device, parseAttribute(node, org.ovirt.engine.core.vdsbroker.libvirt.VmDevicesConverter.TYPE)); dev.put(VdsProperties.Address, parseAddress(node)); dev.put(VdsProperties.Alias, parseAlias(node)); org.ovirt.engine.core.common.businessentities.VmDevice dbDev = dbDevices.stream().filter(( d) -> d.getDevice().equals(dev.get(VdsProperties.Device))).findFirst().orElse(null); if (dbDev != null) { dbDevices.remove(dbDev); dev.put(VdsProperties.DeviceId, dbDev.getId().getDeviceId().toString()); dev.put(VdsProperties.SpecParams, dbDev.getSpecParams()); } else { dev.put(VdsProperties.DeviceId, org.ovirt.engine.core.compat.Guid.newGuid().toString()); } result.add(dev); } return result; }
private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parseChannels(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( d) -> (d.getType()) == VmDeviceGeneralType.CHANNEL).collect(java.util.stream.Collectors.toList()); if (db.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.ArrayList<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : document.selectNodes("//*/channel")) { java.util.Map<java.lang.String, java.lang.Object> dev = new java.util.HashMap<>(); dev.put(VdsProperties.Device, "channel"); dev.put(VdsProperties.Address, parseAddress(node)); java.lang.String alias = parseAlias(node); dev.put(VdsProperties.Alias, alias); java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> dbDev = db.stream().filter(( d) -> d.getAlias().equals(alias)).findFirst(); if (dbDev.isPresent()) { dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } else { dbDev = db.stream().filter(( d) -> d.getAlias().isEmpty()).findFirst(); dbDev.get().setAlias(alias); dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } result.add(dev); } return result; }	private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parseChannels(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> dbDevices = filterDevices(devices, VmDeviceGeneralType.CHANNEL); java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.ArrayList<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : selectNodes(document, VmDeviceGeneralType.CHANNEL)) { java.lang.String address = parseAddress(node); if (address.isEmpty()) { continue; } java.util.Map<java.lang.String, java.lang.Object> dev = new java.util.HashMap<>(); dev.put(VdsProperties.Type, VmDeviceGeneralType.CHANNEL.getValue()); dev.put(VdsProperties.Device, parseAttribute(node, org.ovirt.engine.core.vdsbroker.libvirt.VmDevicesConverter.TYPE)); dev.put(VdsProperties.Address, address); dev.put(VdsProperties.Alias, parseAlias(node)); org.ovirt.engine.core.common.businessentities.VmDevice dbDev = dbDevices.stream().filter(( d) -> d.getDevice().equals(dev.get(VdsProperties.Device))).findFirst().orElse(null); if (dbDev != null) { dbDevices.remove(dbDev); dev.put(VdsProperties.DeviceId, dbDev.getId().getDeviceId().toString()); dev.put(VdsProperties.SpecParams, dbDev.getSpecParams()); } else { dev.put(VdsProperties.DeviceId, org.ovirt.engine.core.compat.Guid.newGuid().toString()); } result.add(dev); } return result; }
private java.util.Map<java.lang.String, java.lang.Object>[] getVmInfo(org.ovirt.engine.core.compat.Guid vdsId, java.util.List<org.ovirt.engine.core.compat.Guid> vms) { if ((vdsId == null) || (vms.isEmpty())) { return null; } java.util.Map<java.lang.String, java.lang.Object>[] result = new java.util.Map[0]; java.util.List<java.lang.String> vmIds = vms.stream().map(Guid::toString).collect(java.util.stream.Collectors.toList()); getResourceManager().runVdsCommand(VDSCommandType.ListVmDevices, new org.ovirt.engine.core.vdsbroker.vdsbroker.ListVmDevicesVDSCommand.Params(vdsId, vms)); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = getResourceManager().runVdsCommand(VDSCommandType.FullList, new org.ovirt.engine.core.common.vdscommands.FullListVDSCommandParameters(vdsId, vmIds)); if (vdsReturnValue.getSucceeded()) { result = ((java.util.Map<java.lang.String, java.lang.Object>[]) (vdsReturnValue.getReturnValue())); } return result; }	private java.util.Map<java.lang.String, java.lang.Object>[] getVmInfo(org.ovirt.engine.core.compat.Guid vdsId, java.util.List<org.ovirt.engine.core.compat.Guid> vmIds) { if ((vdsId == null) || (vmIds.isEmpty())) { return null; } org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = (((boolean) (org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DomainXML)))) ? runVdsCommand(VDSCommandType.DumpXmls, new org.ovirt.engine.core.vdsbroker.vdsbroker.DumpXmlsVDSCommand.Params(vdsId, vmIds)) : runVdsCommand(VDSCommandType.FullList, new org.ovirt.engine.core.common.vdscommands.FullListVDSCommandParameters(vdsId, vmIds)); return vdsReturnValue.getSucceeded() ? ((java.util.Map<java.lang.String, java.lang.Object>[]) (vdsReturnValue.getReturnValue())) : new java.util.Map[0]; }
private java.util.Map<java.lang.String, java.lang.Object>[] parseDevices(java.lang.String xml, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { org.ovirt.engine.core.utils.ovf.xml.XmlDocument document; try { document = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument(xml); } catch (java.lang.Exception e) { return new java.util.Map[0]; } java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.ArrayList<>(); result.add(parseBalloon(document, devices)); result.add(parseRng(document, devices)); result.addAll(parseVideos(document, devices)); result.add(parseWatchdog(document, devices)); result.addAll(parseControllers(document, devices)); result.addAll(parseInterfaces(document, devices)); result.addAll(parseChannels(document, devices)); return result.toArray(new java.util.Map[0]); }	private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parseHostDevices(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { return java.util.Collections.emptyList(); }
private java.util.Map<java.lang.String, java.lang.Object> parseRng(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( dev) -> (dev.getType()) == VmDeviceGeneralType.RNG).findFirst(); if (!(db.isPresent())) { return java.util.Collections.emptyMap(); } org.ovirt.engine.core.common.businessentities.VmDevice device = db.get(); org.ovirt.engine.core.utils.ovf.xml.XmlNode node = document.selectSingleNode("//*/rng"); java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.Device, "rng"); result.put(VdsProperties.DeviceId, device.getId().getDeviceId().toString()); result.put(VdsProperties.Address, parseAddress(node)); result.put(VdsProperties.Alias, parseAlias(node)); return result; }	private java.util.Map<java.lang.String, java.lang.Object> parseDev(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType devType, org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { org.ovirt.engine.core.common.businessentities.VmDevice dbDevice = filterDevice(devices, devType); if (dbDevice == null) { return java.util.Collections.emptyMap(); } org.ovirt.engine.core.utils.ovf.xml.XmlNode node = selectSingleNode(document, devType); if (node == null) { return java.util.Collections.emptyMap(); } java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.Device, devType); result.put(VdsProperties.DeviceId, dbDevice.getId().getDeviceId().toString()); result.put(VdsProperties.Address, parseAddress(node)); result.put(VdsProperties.Alias, parseAlias(node)); result.put(VdsProperties.SpecParams, dbDevice.getSpecParams()); return result; }
private boolean updateVmLease() { if (java.util.Objects.equals(oldVm.getLeaseStorageDomainId(), newVmStatic.getLeaseStorageDomainId())) { return true; } if (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isDown()) { if (!(addVmLease(newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()))) { return false; } removeVmLease(oldVm.getLeaseStorageDomainId(), oldVm.getId()); } else { if ((oldVm.getLeaseStorageDomainId()) != null) { runVdsCommand(VDSCommandType.HotUnplugLease, new org.ovirt.engine.core.common.vdscommands.LeaseVDSParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds(), oldVm.getId(), oldVm.getLeaseStorageDomainId())); removeVmLease(oldVm.getLeaseStorageDomainId(), oldVm.getId()); } else { org.ovirt.engine.core.common.action.VmLeaseParameters params = new org.ovirt.engine.core.common.action.VmLeaseParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePoolId(), newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()); params.setVdsId(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds()); return runInternalAction(VdcActionType.HotPlugLease, params).getSucceeded(); } } return true; }	private boolean updateVmLease() { if (java.util.Objects.equals(oldVm.getLeaseStorageDomainId(), newVmStatic.getLeaseStorageDomainId())) { return true; } if (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isNotRunning()) { if (!(addVmLease(newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()))) { return false; } } else { if ((oldVm.getLeaseStorageDomainId()) == null) { org.ovirt.engine.core.common.action.VmLeaseParameters params = new org.ovirt.engine.core.common.action.VmLeaseParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePoolId(), newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()); params.setVdsId(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds()); params.setHotPlugLease(true); return runInternalAction(ActionType.AddVmLease, params).getSucceeded(); } boolean hotUnplugSucceeded = false; try { hotUnplugSucceeded = runVdsCommand(VDSCommandType.HotUnplugLease, new org.ovirt.engine.core.common.vdscommands.LeaseVDSParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds(), oldVm.getId(), oldVm.getLeaseStorageDomainId())).getSucceeded(); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Failure in hot unplugging a lease to VM {}, message: {}", oldVm.getId(), e.getMessage()); } if (!hotUnplugSucceeded) { auditLog(this, AuditLogType.HOT_UNPLUG_LEASE_FAILED); } } removeVmLease(oldVm.getLeaseStorageDomainId(), oldVm.getId()); return true; }
public boolean isFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(isFieldUpdatable(name))) { if (((fieldContainer != null) && ((container) != null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values != null) ? values.contains(name) : false; if ((!returnValue) && hotsetEnabled) { returnValue = isHotSetField(name); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn("field '{}' can not be updated when status is '{}'", name, status); } } return returnValue; }	public boolean isFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(isFieldUpdatable(name))) { if (((fieldContainer != null) && ((container) != null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values != null) ? values.contains(name) : false; if ((!returnValue) && hotsetEnabled) { returnValue = isHotSetField(name); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn("Field '{}' can not be updated when status is '{}'", name, status); } } return returnValue; }
private boolean updateVmLease() { if (java.util.Objects.equals(oldVm.getLeaseStorageDomainId(), newVmStatic.getLeaseStorageDomainId())) { return true; } if (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isNotRunning()) { if (!(addVmLease(newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()))) { return false; } } else { if ((oldVm.getLeaseStorageDomainId()) == null) { org.ovirt.engine.core.common.action.VmLeaseParameters params = new org.ovirt.engine.core.common.action.VmLeaseParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePoolId(), newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()); params.setVdsId(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds()); params.setHotPlugLease(true); return runInternalAction(ActionType.AddVmLease, params).getSucceeded(); } boolean hotUnplugSucceeded = false; try { hotUnplugSucceeded = runVdsCommand(VDSCommandType.HotUnplugLease, new org.ovirt.engine.core.common.vdscommands.LeaseVDSParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds(), oldVm.getId(), oldVm.getLeaseStorageDomainId())).getSucceeded(); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Failure in hot unplugging a lease to VM {}, message: {}", oldVm.getId(), e.getMessage()); } if (!hotUnplugSucceeded) { auditLog(this, AuditLogType.HOT_UNPLUG_LEASE_FAILED); } } removeVmLease(oldVm.getLeaseStorageDomainId(), oldVm.getId()); return true; }	private boolean updateVmLease() { if (java.util.Objects.equals(oldVm.getLeaseStorageDomainId(), newVmStatic.getLeaseStorageDomainId())) { return true; } if (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isNotRunning()) { if (!(addVmLease(newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()))) { return false; } } else { if ((oldVm.getLeaseStorageDomainId()) == null) { org.ovirt.engine.core.common.action.VmLeaseParameters params = new org.ovirt.engine.core.common.action.VmLeaseParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePoolId(), newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()); params.setVdsId(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds()); params.setHotPlugLease(true); return runInternalAction(VdcActionType.AddVmLease, params).getSucceeded(); } boolean hotUnplugSucceeded = false; try { hotUnplugSucceeded = runVdsCommand(VDSCommandType.HotUnplugLease, new org.ovirt.engine.core.common.vdscommands.LeaseVDSParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds(), oldVm.getId(), oldVm.getLeaseStorageDomainId())).getSucceeded(); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Failure in hot unplugging a lease to VM {}, message: {}", oldVm.getId(), e.getMessage()); } if (!hotUnplugSucceeded) { auditLog(this, AuditLogType.HOT_UNPLUG_LEASE_FAILED); } } removeVmLease(oldVm.getLeaseStorageDomainId(), oldVm.getId()); return true; }
@java.lang.Override public void endWithFailure() { org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.setSucceeded(true); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation(getMovedDiskIds(), ImageStatus.OK, ImageStatus.OK, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getCompensationContext()); }	@java.lang.Override public void endWithFailure() { org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.setSucceeded(true); if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getStage()) == (org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters.LiveMigrateStage.CREATE_SNAPSHOT)) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation(getMovedDiskIds(), ImageStatus.OK, ImageStatus.OK, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getCompensationContext()); } }
private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getAffinityLabels(); for (org.ovirt.engine.core.common.businessentities.Label label : affinityLabels) { label.addVm(org.ovirt.engine.core.bll.AddVmCommand.getVm()); labelDao.update(label); } }	private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.stream().map(Label::getId).collect(java.util.stream.Collectors.toList()); labelDao.addVmToLabels(org.ovirt.engine.core.bll.AddVmCommand.getVmId(), labelIds); }
private void updateAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.common.businessentities.Label> previouslySelectedLabels = labelDao.getAllByEntityIds(java.util.Collections.singletonList(org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getVdsId())); java.util.Set<org.ovirt.engine.core.common.businessentities.Label> labelsToAdd = new java.util.HashSet(selectedLabels); labelsToAdd.removeAll(previouslySelectedLabels); for (org.ovirt.engine.core.common.businessentities.Label label : labelsToAdd) { label.addHost(org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getVds()); labelDao.update(label); } java.util.Set<org.ovirt.engine.core.common.businessentities.Label> labelsToRemove = new java.util.HashSet(previouslySelectedLabels); labelsToRemove.removeAll(selectedLabels); for (org.ovirt.engine.core.common.businessentities.Label label : labelsToRemove) { label.removeHost(org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getVds()); labelDao.update(label); } }	private void updateAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.stream().map(Label::getId).collect(java.util.stream.Collectors.toList()); labelDao.updateLabelsForHost(org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getVdsId(), labelIds); }
@java.lang.Override protected void executeCommand() { if ((isGlusterEnabled()) && ((upServer) != null)) { glusterHostRemove(); if (!(org.ovirt.engine.core.bll.RemoveVdsCommand.getSucceeded())) { return; } } if (!(clusterHasMultipleHosts())) { removeGlusterVolumesFromDb(); removeGlusterHooksFromDb(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { removeVdsStatisticsFromDb(); removeVdsDynamicFromDb(); removeVdsStaticFromDb(); removeAffinityLabelsFromDb(); return null; }); removeVdsFromCollection(); org.ovirt.engine.core.bll.RemoveVdsCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { if ((isGlusterEnabled()) && ((upServer) != null)) { glusterHostRemove(); if (!(org.ovirt.engine.core.bll.RemoveVdsCommand.getSucceeded())) { return; } } if (!(clusterHasMultipleHosts())) { removeGlusterVolumesFromDb(); removeGlusterHooksFromDb(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { removeVdsStatisticsFromDb(); removeVdsDynamicFromDb(); removeVdsStaticFromDb(); return null; }); removeVdsFromCollection(); org.ovirt.engine.core.bll.RemoveVdsCommand.setSucceeded(true); }
private void addAffinityLabelsToDb() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getParameters().getAffinityLabels(); for (org.ovirt.engine.core.common.businessentities.Label label : affinityLabels) { label.addHost(org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getVds()); labelDao.update(label); } }	private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.stream().map(Label::getId).collect(java.util.stream.Collectors.toList()); labelDao.addHostToLabels(org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getVdsId(), labelIds); }
private void updateAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.common.businessentities.Label> previouslySelectedLabels = labelDao.getAllByEntityIds(java.util.Collections.singletonList(getVmId())); java.util.Set<org.ovirt.engine.core.common.businessentities.Label> labelsToAdd = new java.util.HashSet(selectedLabels); labelsToAdd.removeAll(previouslySelectedLabels); for (org.ovirt.engine.core.common.businessentities.Label label : labelsToAdd) { label.addVm(org.ovirt.engine.core.bll.UpdateVmCommand.getVm()); labelDao.update(label); } java.util.Set<org.ovirt.engine.core.common.businessentities.Label> labelsToRemove = new java.util.HashSet(previouslySelectedLabels); labelsToRemove.removeAll(selectedLabels); for (org.ovirt.engine.core.common.businessentities.Label label : labelsToRemove) { label.removeVm(org.ovirt.engine.core.bll.UpdateVmCommand.getVm()); labelDao.update(label); } }	private void updateAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.stream().map(Label::getId).collect(java.util.stream.Collectors.toList()); labelDao.updateLabelsForVm(getVmId(), labelIds); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel createNewLineModel(java.lang.String key) { org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyValueLineModel = super.createNewLineModel(key); keyValueLineModel.getValue().setIsAvailable(false); keyValueLineModel.getValues().setIsAvailable(false); return keyValueLineModel; }	private void populateHostMaps(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.VDS> allHostNamesMap, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> allHostIdsMap) { hosts.forEach(( host) -> { allHostNamesMap.put(host.getName(), host); allHostIdsMap.put(host.getId(), host); }); }
public void init() { startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmListByClusterName(new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.model.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.VM>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList) { java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityGroup().getVmIds(); getVmsSelectionModel().init(vmList, (vmIds != null ? vmIds : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); stopProgress(); } }), clusterName); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByClusterId(new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.model.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.VDS>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIds = getAffinityGroup().getVdsIds(); java.util.Collections.sort(hostList, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); getHostsSelectionModel().init(hostList, (hostIds != null ? hostIds : new java.util.ArrayList())); stopProgress(); } }), clusterId); }	public void init() { startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmListByClusterName(new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.model.AsyncQuery(( vmList) -> { List<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityGroup().getVmIds(); getVmsSelectionModel().init(vmList, (vmIds != null ? vmIds : new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.model.ArrayList<>())); stopProgressOnVmsAndHostsInit(); }), clusterName); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByClusterId(new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.model.AsyncQuery(( hostList) -> { List<org.ovirt.engine.core.compat.Guid> hostIds = getAffinityGroup().getVdsIds(); getHostsSelectionModel().init(hostList, (hostIds != null ? hostIds : new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.model.ArrayList<>())); stopProgressOnVmsAndHostsInit(); }), clusterId); }
void onSave() { if (!(validate())) { return; } if ((getProgress()) != null) { return; } org.ovirt.engine.core.common.scheduling.AffinityGroup group = getAffinityGroup(); group.setName(getName().getEntity()); group.setDescription(getDescription().getEntity()); group.setClusterId(clusterId); group.setVmEnforcing(getEnforcing().getEntity()); group.setVmAffinityRule(getVmAffinityRule().getSelectedItem()); group.setVmIds(getVmsSelectionModel().getSelectedVmIds()); group.setVdsEnforcing(getHostAffinityEnforcing().getEntity()); group.setVdsAffinityRule(getHostAffinityRule().getSelectedItem()); group.setVdsIds(getHostsSelectionModel().getSelectedHostIds()); startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(saveActionType, new org.ovirt.engine.core.common.scheduling.parameters.AffinityGroupCRUDParameters(group.getId(), group), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { stopProgress(); if (((result != null) && ((result.getReturnValue()) != null)) && (result.getReturnValue().getSucceeded())) { cancel(); } } }, this); }	void onSave() { if (!(validate())) { return; } if ((getProgress()) != null) { return; } org.ovirt.engine.core.common.scheduling.AffinityGroup group = getAffinityGroup(); group.setName(getName().getEntity()); group.setDescription(getDescription().getEntity()); group.setClusterId(clusterId); group.setVmEnforcing(getVmAffinityEnforcing().getEntity()); group.setVmAffinityRule(getVmAffinityRule().getSelectedItem()); group.setVmIds(getVmsSelectionModel().getSelectedVmIds()); group.setVdsEnforcing(getHostAffinityEnforcing().getEntity()); group.setVdsAffinityRule(getHostAffinityRule().getSelectedItem()); group.setVdsIds(getHostsSelectionModel().getSelectedHostIds()); startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(saveActionType, new org.ovirt.engine.core.common.scheduling.parameters.AffinityGroupCRUDParameters(group.getId(), group), ( result) -> { stopProgress(); if (((result != null) && ((result.getReturnValue()) != null)) && (result.getReturnValue().getSucceeded())) { cancel(); } }, this); }
@java.lang.Override protected void setValueByKey(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel lineModel, java.lang.String key) { }	@java.lang.Override protected void initLineModel(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyLineModel keyLineModel, java.lang.String key) { }
@java.lang.Override protected void initLineModel(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyValueLineModel, java.lang.String key) { }	private java.util.Set<java.lang.String> getUsedHostNamesFromIds(java.util.List<org.ovirt.engine.core.compat.Guid> usedHosts, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> allHostIdsMap) { return usedHosts.stream().map(( guid) -> allHostIdsMap.get(guid).getName()).sorted().collect(java.util.stream.Collectors.toCollection(java.util.LinkedHashSet::new)); }
@java.lang.Override protected boolean isGhost(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value) { return !(model.isKeyValid(value.getKeys().getSelectedItem())); }	@java.lang.Override protected boolean isGhost(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyLineModel value) { return !(model.isKeyValid(value.getKeys().getSelectedItem())); }
public java.util.List<org.ovirt.engine.core.compat.Guid> getSelectedVmIds() { java.util.List<org.ovirt.engine.core.compat.Guid> list = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyModel : getItems()) { java.lang.String selectedItem = keyModel.getKeys().getSelectedItem(); if (isKeyValid(selectedItem)) { list.add(allVmNamesMap.get(selectedItem).getId()); } } return list; }	public java.util.List<org.ovirt.engine.core.compat.Guid> getSelectedVmIds() { java.util.List<org.ovirt.engine.core.compat.Guid> list = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyLineModel keyModel : getItems()) { java.lang.String selectedItem = keyModel.getKeys().getSelectedItem(); if (isKeyValid(selectedItem)) { list.add(allVmNamesMap.get(selectedItem).getId()); } } return list; }
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel createGhostValue() { return model.createNewLineModel(); }	@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyLineModel createGhostValue() { return model.createNewLineModel(); }
public void init(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms, java.util.List<org.ovirt.engine.core.compat.Guid> usedVms) { if ((vms == null) || (usedVms == null)) { return; } allVmNamesMap = new java.util.HashMap(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vmsMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { allVmNamesMap.put(vm.getName(), vm); vmsMap.put(vm.getId(), vm); } java.util.Set<java.lang.String> usedVmNames = usedVms.stream().map(( guid) -> vmsMap.get(guid).getName()).sorted().collect(java.util.stream.Collectors.toSet()); init(allVmNamesMap.keySet(), usedVmNames); }	public void init(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms, java.util.List<org.ovirt.engine.core.compat.Guid> usedVms) { if (vms == null) { return; } java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> allVmIdsMap = new java.util.HashMap<>(); populateVmMaps(vms, allVmNamesMap, allVmIdsMap); java.util.Set<java.lang.String> usedVmNames = getUsedVmNamesFromIds(usedVms, allVmIdsMap); super.init(allVmNamesMap.keySet(), usedVmNames); setInitialized(); }
@java.lang.Override public T flush() { super.flush(); for (org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget lineWidget : widgets) { lineWidget.flush(); } return model; }	@java.lang.Override public T flush() { widgets.forEach(KeyLineWidget::flush); return super.flush(); }
java.lang.String hostsAffinityGroupSelectionLabel();	java.lang.String hostsAffinitySelectionLabel();
public java.util.List<org.ovirt.engine.core.compat.Guid> getSelectedHostIds() { java.util.List<org.ovirt.engine.core.compat.Guid> list = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyModel : getItems()) { java.lang.String selectedItem = keyModel.getKeys().getSelectedItem(); if (isKeyValid(selectedItem)) { list.add(allHostNamesMap.get(selectedItem).getId()); } } return list; }	public java.util.List<org.ovirt.engine.core.compat.Guid> getSelectedHostIds() { java.util.List<org.ovirt.engine.core.compat.Guid> list = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyLineModel keyModel : getItems()) { java.lang.String selectedItem = keyModel.getKeys().getSelectedItem(); if (isKeyValid(selectedItem)) { list.add(allHostNamesMap.get(selectedItem).getId()); } } return list; }
java.lang.String vmsAffinityGroupSelectionLabel();	java.lang.String vmsAffinitySelectionLabel();
@java.lang.Override public void setUsePatternFly(boolean use) { keyField.setUsePatternFly(use); valueField.setUsePatternFly(use); valuesField.setUsePatternFly(use); }	@java.lang.Override public void setUsePatternFly(boolean use) { super.setUsePatternFly(use); valueField.setUsePatternFly(use); valuesField.setUsePatternFly(use); }
@java.lang.Override protected void toggleGhost(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value, org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget widget, boolean becomingGhost) { if (!(widget.isEnabled())) { return; } super.toggleGhost(value, widget, becomingGhost); }	@java.lang.Override protected void toggleGhost(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyLineModel value, org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget widget, boolean becomingGhost) { if (!(widget.isEnabled())) { return; } super.toggleGhost(value, widget, becomingGhost); }
@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value, org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget widget) { super.onRemove(value, widget); model.updateKeys(); widgets.remove(widget); }	@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyLineModel value, org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget widget) { super.onRemove(value, widget); model.updateKeys(); widgets.remove(widget); }
@java.lang.Override protected org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget createWidget(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value) { org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget keyLineWidget = new org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget(); keyLineWidget.edit(value); keyLineWidget.setUsePatternFly(usePatternFly); widgets.add(keyLineWidget); return keyLineWidget; }	@java.lang.Override protected org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget createWidget(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyLineModel value) { org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget keyLineWidget = new org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget(); keyLineWidget.edit(value); keyLineWidget.setUsePatternFly(usePatternFly); widgets.add(keyLineWidget); return keyLineWidget; }
protected void init() { initWidget(org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget.WidgetUiBinder.uiBinder.createAndBindUi(this)); driver.initialize(this); hideLabels(); }	@java.lang.Override protected void init() { driver.initialize(this); hideLabels(); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) { updateKeyTitle(object); object.getKeys().getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget.this, object); updateKeyTitle(object); } }); driver.edit(object); }	@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyLineModel object) { super.doEdit(object); driver.edit(object); }
java.lang.String selectedAffinityLabels();	java.lang.String selectItemLabel();
private org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel getModel() { return hostModel; }	@java.lang.Override public com.google.gwt.event.dom.client.HasClickHandlers getAddAffinityLabelButton() { return affinityLabelSelectionWidget.getSelectionWidget().getAddSelectedItemButton(); }
public void showActiveLabels() { activeLabelList.addStyleName(Styles.LIST_INLINE); activeLabelDiv.add(activeLabelList); activeLabelList.clear(); java.util.List<org.ovirt.engine.core.common.businessentities.Label> labels = getModel().getLabelList().getSelectedItems(); java.util.Collections.sort(labels, ( l1, l2) -> l1.getName().compareTo(l2.getName())); for (org.ovirt.engine.core.common.businessentities.Label label : labels) { activeLabelList.add(createActiveLabelItem(label)); } }	public com.google.gwt.event.dom.client.HasClickHandlers getAddAffinityLabelButton() { return affinityLabelSelectionWidget.getSelectionWidget().getAddSelectedItemButton(); }
@java.lang.Override protected void init() { initWidget(org.ovirt.engine.ui.common.widget.form.key_value.KeyValueLineWidget.WidgetUiBinder.uiBinder.createAndBindUi(this)); driver.initialize(this); hideLabels(); }	@java.lang.Override protected void init() { driver.initialize(this); hideLabels(); }
public void init(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, java.util.List<org.ovirt.engine.core.compat.Guid> usedHosts) { if ((hosts == null) || (usedHosts == null)) { return; } allHostNamesMap = new java.util.HashMap(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hostsMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { allHostNamesMap.put(host.getName(), host); hostsMap.put(host.getId(), host); } java.util.Set<java.lang.String> usedHostNames = usedHosts.stream().map(( guid) -> hostsMap.get(guid).getName()).sorted().collect(java.util.stream.Collectors.toSet()); init(allHostNamesMap.keySet(), usedHostNames); }	public void init(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, java.util.List<org.ovirt.engine.core.compat.Guid> usedHosts) { if (hosts == null) { return; } java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> allHostIdsMap = new java.util.HashMap<>(); populateHostMaps(hosts, allHostNamesMap, allHostIdsMap); java.util.Set<java.lang.String> usedHostNames = getUsedHostNamesFromIds(usedHosts, allHostIdsMap); super.init(allHostNamesMap.keySet(), usedHostNames); setInitialized(); }
@java.lang.Override protected void updateDetailsAvailability() { super.updateDetailsAvailability(); org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.getSelectedItem(); getClusterVmListModel().setIsAvailable(((cluster != null) && (cluster.supportsVirtService()))); getClusterServiceModel().setIsAvailable(((cluster != null) && (cluster.supportsGlusterService()))); getClusterGlusterHookListModel().setIsAvailable(((cluster != null) && (cluster.supportsGlusterService()))); getAffinityGroupListModel().setIsAvailable(((cluster != null) && (cluster.supportsVirtService()))); getCpuProfileListModel().setIsAvailable(((cluster != null) && (cluster.supportsVirtService()))); getAffinityLabelListModel().setIsAvailable(((cluster != null) && (cluster.supportsVirtService()))); }	@java.lang.Override protected void updateDetailsAvailability() { super.updateDetailsAvailability(); org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.getSelectedItem(); boolean clusterSupportsVirtService = (cluster != null) && (cluster.supportsVirtService()); boolean clusterSupportsGlusterService = (cluster != null) && (cluster.supportsGlusterService()); getClusterVmListModel().setIsAvailable(clusterSupportsVirtService); getClusterServiceModel().setIsAvailable(clusterSupportsGlusterService); getClusterGlusterHookListModel().setIsAvailable(clusterSupportsGlusterService); getAffinityGroupListModel().setIsAvailable(clusterSupportsVirtService); getCpuProfileListModel().setIsAvailable(clusterSupportsVirtService); getAffinityLabelListModel().setIsAvailable(clusterSupportsVirtService); }
public void init() { startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmListByClusterName(new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.AsyncQuery(( vmList) -> { Set<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityLabel().getVms(); getVmsSelectionModel().init(vmList, (vmIds != null ? new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.ArrayList<>(vmIds) : new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.ArrayList<>())); stopProgress(); }), clusterName); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByClusterId(new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.AsyncQuery(( hostList) -> { Set<org.ovirt.engine.core.compat.Guid> hostIds = getAffinityLabel().getHosts(); java.util.Collections.sort(hostList, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); getHostsSelectionModel().init(hostList, (hostIds != null ? new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.ArrayList<>(hostIds) : new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.ArrayList<>())); stopProgress(); }), clusterId); }	public void init() { startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmListByClusterName(new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.AsyncQuery(( vmList) -> { Set<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityLabel().getVms(); getVmsSelectionModel().init(vmList, (vmIds != null ? new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.ArrayList<>(vmIds) : new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.ArrayList<>())); stopProgressOnVmsAndHostsInit(); }), clusterName); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByClusterId(new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.AsyncQuery(( hostList) -> { Set<org.ovirt.engine.core.compat.Guid> hostIds = getAffinityLabel().getHosts(); java.util.Collections.sort(hostList, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); getHostsSelectionModel().init(hostList, (hostIds != null ? new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.ArrayList<>(hostIds) : new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.ArrayList<>())); stopProgressOnVmsAndHostsInit(); }), clusterId); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label object) { java.lang.String join = join(getVmNames(object), ", "); if (join.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return join; }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label label) { java.lang.String vmNames = org.ovirt.engine.ui.uicompat.external.StringUtils.join(getVmNames(label), ", "); if (vmNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return vmNames; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label object) { return object.getName(); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label label) { return label.getName(); }
protected java.lang.String join(java.util.List<java.lang.String> strings, java.lang.String separator) { java.lang.StringBuilder result = new java.lang.StringBuilder(); if (strings == null) { return result.toString(); } for (java.lang.String s : strings) { if ((result.length()) != 0) { result.append(separator); } result.append(s); } return result.toString(); }	private void updateEntitiesNameMap() { entitiesNameMap.putAll(org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.getDetailModel().getEntitiesNameMap().getEntity()); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label object) { java.lang.String join = join(getHostNames(object), ", "); if (join.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return join; }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label label) { java.lang.String hostNames = org.ovirt.engine.ui.uicompat.external.StringUtils.join(getHostNames(label), ", "); if (hostNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return hostNames; }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.AffinityLabelModel flush() { return driver.flush(); }	@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.AffinityLabelModel flush() { addRemoveHostWidget.flush(); addRemoveVmWidget.flush(); return driver.flush(); }
protected java.util.List<java.lang.String> getVmNames(org.ovirt.engine.core.common.businessentities.Label label) { return new java.util.ArrayList(label.getVmNames()); }	protected java.util.List<java.lang.String> getVmNames(org.ovirt.engine.core.common.businessentities.Label label) { java.util.List<java.lang.String> vmNames = new java.util.ArrayList<>(); if ((!(entitiesNameMap.isEmpty())) && (!(label.getVms().isEmpty()))) { label.getVms().forEach(( id) -> { java.lang.String vmName = entitiesNameMap.get(id); if ((vmName != null) && (!(vmName.isEmpty()))) { vmNames.add(vmName); } }); java.util.Collections.sort(vmNames); } return vmNames; }
protected java.util.List<java.lang.String> getHostNames(org.ovirt.engine.core.common.businessentities.Label label) { return new java.util.ArrayList(label.getHostNames()); }	protected java.util.List<java.lang.String> getHostNames(org.ovirt.engine.core.common.businessentities.Label label) { java.util.List<java.lang.String> hostNames = new java.util.ArrayList<>(); if ((!(entitiesNameMap.isEmpty())) && (!(label.getHosts().isEmpty()))) { label.getHosts().forEach(( id) -> { java.lang.String hostName = entitiesNameMap.get(id); if ((hostName != null) && (!(hostName.isEmpty()))) { hostNames.add(hostName); } }); java.util.Collections.sort(hostNames); } return hostNames; }
private void updateActionAvailability() { getNewCommand().setIsExecutionAllowed(true); boolean hasSelectedItems = ((org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems()) != null) && ((org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems().size()) > 0); getEditCommand().setIsExecutionAllowed((hasSelectedItems && ((org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems().size()) == 1))); getRemoveCommand().setIsExecutionAllowed(hasSelectedItems); }	private void updateActionAvailability() { boolean hasSelectedItems = ((org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems()) != null) && ((org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems().size()) > 0); getEditCommand().setIsExecutionAllowed((hasSelectedItems && ((org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems().size()) == 1))); getRemoveCommand().setIsExecutionAllowed(hasSelectedItems); }
protected void addCommands() { org.ovirt.engine.ui.uicommonweb.UICommand command = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSave", this); getCommands().add(command); getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); }	protected void addCommands() { getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSave", this)); getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); }
@java.lang.Override protected void onEntityChanged() { super.onEntityChanged(); org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSearchCommand().execute(); }	@java.lang.Override protected void onEntityChanged() { super.onEntityChanged(); org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSearchCommand().execute(); loadEntitiesNameMap(); }
private void onRemove() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getConfirmWindow())); if ((model.getProgress()) != null) { return; } java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Label affinityLabel : org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems()) { parameters.add(new org.ovirt.engine.core.common.action.LabelActionParameters(affinityLabel)); } model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.RemoveLabel, parameters, ( result) -> { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); }, model); }	private void onRemove() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getConfirmWindow())); if ((model.getProgress()) != null) { return; } java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> parameters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Label affinityLabel : org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems()) { parameters.add(new org.ovirt.engine.core.common.action.LabelActionParameters(affinityLabel)); } model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.RemoveLabel, parameters, ( result) -> { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); }, model); }
private void remove() { if ((org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeAffinityLabelsTitle()); model.setHelpTag(HelpTag.remove_affinity_groups); model.setHashName("remove_affinity_labels"); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Label affinityLabel : org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems()) { list.add(affinityLabel.getName()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand command = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnRemove", this); model.getCommands().add(command); model.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); }	private void remove() { if ((org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeAffinityLabelsTitle()); model.setHelpTag(HelpTag.remove_affinity_groups); model.setHashName("remove_affinity_labels"); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Label affinityLabel : org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems()) { list.add(affinityLabel.getName()); } model.setItems(list); model.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnRemove", this)); model.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.VirtualMachineSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.AuditLog, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>, org.ovirt.engine.ui.uicommonweb.models.vms.VmEventListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineEventPresenter.constants.virtualMachineEventSubTabLabel(), 11, modelProvider, org.ovirt.engine.ui.common.widget.Align.RIGHT); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.VirtualMachineSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.AuditLog, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>, org.ovirt.engine.ui.uicommonweb.models.vms.VmEventListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineEventPresenter.constants.virtualMachineEventSubTabLabel(), 11, modelProvider); }
public void activateDetailModel() { getMainModel().addActiveDetailModel(org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider.getModel()); }	@java.lang.Override public void activateDetailModel() { getMainModel().addActiveDetailModel(org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider.getModel()); }
private void activeDetailModelChanging(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> newValue, boolean stopRefresh) { for (org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> oldValue : activeDetailModels) { if ((oldValue != null) && stopRefresh) { oldValue.setEntity(null); if (oldValue instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (oldValue)).stopRefresh(); } } } if (newValue != null) { newValue.setEntity(provideDetailModelEntity(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.getSelectedItem())); } }	private void activeDetailModelChanging(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> newValue, boolean stopRefresh) { if (stopRefresh) { for (org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> oldValue : activeDetailModels) { if (oldValue != null) { oldValue.setEntity(null); if (oldValue instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (oldValue)).stopRefresh(); } } } } if (newValue != null) { newValue.setEntity(provideDetailModelEntity(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.getSelectedItem())); } }
public void setActiveDetailModel(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> value) { if (!(activeDetailModels.contains(value))) { activeDetailModelChanging(value, true); activeDetailModels.clear(); activeDetailModels.add(value); activeDetailModelChanged(); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.ACTIVE_DETAIL_MODEL)); } }	public void setActiveDetailModel(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> value) { if (!(activeDetailModels.contains(value))) { activeDetailModelChanging(value, true); activeDetailModels.clear(); activeDetailModels.add(value); activeDetailModelChanged(); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.ACTIVE_DETAIL_MODELS)); } }
public void addActiveDetailModel(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> value) { if (!(activeDetailModels.contains(value))) { activeDetailModelChanging(value, false); activeDetailModels.add(value); activeDetailModelChanged(); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.ACTIVE_DETAIL_MODEL)); } }	public void addActiveDetailModel(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> value) { if (!(activeDetailModels.contains(value))) { activeDetailModelChanging(value, false); activeDetailModels.add(value); activeDetailModelChanged(); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.ACTIVE_DETAIL_MODELS)); } }
@org.ovirt.api.metamodel.annotations.In java.lang.Boolean volatile_();	@org.ovirt.api.metamodel.annotations.In java.lang.Boolean _volatile();
public static java.lang.String encrypt(javax.servlet.ServletContext ctx, java.lang.String rawText) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.SsoLocalConfig config = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoContext(ctx).getSsoLocalConfig(); try (java.io.InputStream in = new java.io.FileInputStream(config.getPKIEngineCert().getAbsoluteFile())) { return org.ovirt.engine.core.uutils.crypto.EnvelopeEncryptDecrypt.encrypt("AES/OFB/PKCS5Padding", 256, java.security.cert.CertificateFactory.getInstance("X.509").generateCertificate(in), 100, rawText.getBytes(java.nio.charset.StandardCharsets.UTF_8)); } }	public static java.lang.String encrypt(javax.servlet.ServletContext ctx, java.lang.String rawText) throws java.lang.Exception { return org.ovirt.engine.core.uutils.crypto.EnvelopeEncryptDecrypt.encrypt("AES/OFB/PKCS5Padding", 256, org.ovirt.engine.core.sso.utils.SsoUtils.getSsoContext(ctx).getEngineCertificate(), 100, rawText.getBytes(java.nio.charset.StandardCharsets.UTF_8)); }
protected java.util.Map<java.lang.String, java.lang.Object> buildResponse(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession, java.lang.String clientId, java.lang.String clientSecret) throws java.lang.Exception { java.util.Map<java.lang.String, java.lang.Object> payload = buildResponse(ssoSession); payload.put("id_token", org.ovirt.engine.core.sso.utils.SsoUtils.createJWT(request, ssoSession, clientId, clientSecret)); return payload; }	protected java.util.Map<java.lang.String, java.lang.Object> buildResponse(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession, java.lang.String clientId, java.lang.String clientSecret) throws java.lang.Exception { java.util.Map<java.lang.String, java.lang.Object> payload = buildResponse(ssoSession); payload.put("id_token", org.ovirt.engine.core.sso.servlets.OpenIdUtils.createJWT(request, ssoSession, clientId, clientSecret)); return payload; }
public static java.lang.String createJWT(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession, java.lang.String clientId, java.lang.String clientSecret) throws com.nimbusds.jose.JOSEException, java.security.NoSuchAlgorithmException { com.nimbusds.jose.JWSSigner signer = new com.nimbusds.jose.crypto.MACSigner(clientSecret); com.nimbusds.jwt.SignedJWT signedJWT = new com.nimbusds.jwt.SignedJWT(new com.nimbusds.jose.JWSHeader(com.nimbusds.jose.JWSAlgorithm.HS256), org.ovirt.engine.core.sso.utils.SsoUtils.createJWTClaimSet(request, ssoSession, clientId)); signedJWT.sign(signer); return signedJWT.serialize(); }	public static void sendJsonData(javax.servlet.http.HttpServletResponse response, java.lang.String jsonPayload, java.lang.String contentType) throws java.io.IOException { try (java.io.OutputStream os = response.getOutputStream()) { response.setContentType(contentType); byte[] jsonPayloadBytes = jsonPayload.getBytes(java.nio.charset.StandardCharsets.UTF_8.name()); response.setContentLength(jsonPayloadBytes.length); os.write(jsonPayloadBytes); org.ovirt.engine.core.sso.utils.SsoUtils.log.trace("Sending json data {}", jsonPayload); } }
public static void sendJsonData(javax.servlet.http.HttpServletResponse response, java.lang.String jsonPayload) throws java.io.IOException { try (java.io.OutputStream os = response.getOutputStream()) { response.setContentType("application/json"); byte[] jsonPayloadBytes = jsonPayload.getBytes(java.nio.charset.StandardCharsets.UTF_8.name()); response.setContentLength(jsonPayloadBytes.length); os.write(jsonPayloadBytes); org.ovirt.engine.core.sso.utils.SsoUtils.log.trace("Sending json data {}", jsonPayload); } }	public static void sendJsonData(javax.servlet.http.HttpServletResponse response, java.lang.String jsonPayload) throws java.io.IOException { org.ovirt.engine.core.sso.utils.SsoUtils.sendJsonData(response, jsonPayload, "application/json"); }
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { try { org.ovirt.engine.core.sso.servlets.OAuthAuthorizeServlet.log.debug("Entered AuthorizeServlet QueryString: {}, Parameters : {}", request.getQueryString(), org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameters(request)); java.lang.String responseType = org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameter(request, SsoConstants.JSON_RESPONSE_TYPE); if (!(responseType.equals("code"))) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SsoConstants.ERR_CODE_INVALID_REQUEST, java.lang.String.format(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_UNSUPPORTED_PARAMETER_IN_REQUEST, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE)))), responseType, SsoConstants.JSON_RESPONSE_TYPE)); } login(request, response, buildSsoSession(request)); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request, true); if ((ssoSession.isOpenIdScope()) || (org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList(org.ovirt.engine.core.sso.utils.SsoUtils.getScopeRequestParameter(request, "")).contains(SsoConstants.OPENID_SCOPE))) { ssoSession.setRedirectUri(request.getParameter(SsoConstants.HTTP_PARAM_REDIRECT_URI)); } org.ovirt.engine.core.sso.utils.SsoUtils.redirectToErrorPage(request, response, ex); } }	@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { try { org.ovirt.engine.core.sso.servlets.OAuthAuthorizeServlet.log.debug("Entered AuthorizeServlet QueryString: {}, Parameters : {}", request.getQueryString(), org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameters(request)); java.lang.String responseType = org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameter(request, SsoConstants.JSON_RESPONSE_TYPE); if (!(responseType.equals("code"))) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SsoConstants.ERR_CODE_INVALID_REQUEST, java.lang.String.format(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_UNSUPPORTED_PARAMETER_IN_REQUEST, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE)))), responseType, SsoConstants.JSON_RESPONSE_TYPE)); } login(request, response, buildSsoSession(request)); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request, true); java.lang.String scope = org.ovirt.engine.core.sso.utils.SsoUtils.getScopeRequestParameter(request, ""); if ((ssoSession.isOpenIdScope()) || (org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList(scope).contains(SsoConstants.OPENID_SCOPE))) { ssoSession.setRedirectUri(request.getParameter(SsoConstants.HTTP_PARAM_REDIRECT_URI)); } org.ovirt.engine.core.sso.utils.SsoUtils.redirectToErrorPage(request, response, ex); } }
private java.util.Map<java.lang.String, java.lang.Object> buildResponse(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession, java.lang.String clientId, java.lang.String clientSecret) throws java.lang.Exception { java.util.Map<java.lang.String, java.lang.Object> payload = buildResponse(ssoSession); if (org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList(ssoSession.getScope()).contains(SsoConstants.OPENID_SCOPE)) { payload.put("id_token", org.ovirt.engine.core.sso.utils.SsoUtils.createJWT(request, ssoSession, clientId, clientSecret)); } return payload; }	private java.util.Map<java.lang.String, java.lang.Object> buildResponse(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession, java.lang.String clientId, java.lang.String clientSecret) throws java.lang.Exception { java.util.Map<java.lang.String, java.lang.Object> payload = buildResponse(ssoSession); if (org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList(ssoSession.getScope()).contains(SsoConstants.OPENID_SCOPE)) { payload.put("id_token", org.ovirt.engine.core.sso.servlets.OpenIdUtils.createJWT(request, ssoSession, clientId, clientSecret)); } return payload; }
private java.lang.String getTokenFromHeader(javax.servlet.http.HttpServletRequest request) { java.lang.String token = null; java.lang.String headerValue = request.getHeader(SsoConstants.HEADER_AUTHORIZATION); if ((headerValue != null) && (headerValue.startsWith(org.ovirt.engine.core.sso.servlets.OpenIdUserInfoServlet.BEARER))) { token = headerValue.substring("Bearer".length()).trim(); } return token; }	private java.lang.String getTokenFromHeader(javax.servlet.http.HttpServletRequest request) { java.lang.String token = null; java.lang.String headerValue = request.getHeader(SsoConstants.HEADER_AUTHORIZATION); if ((headerValue != null) && (headerValue.startsWith(org.ovirt.engine.core.sso.servlets.OpenIdUserInfoServlet.BEARER))) { token = headerValue.substring(org.ovirt.engine.core.sso.servlets.OpenIdUserInfoServlet.BEARER.length()).trim(); } return token; }
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { try { org.ovirt.engine.core.sso.servlets.OpenIdUserInfoServlet.log.debug("Entered OpenIdUserInfoServlet Query String: {}, Parameters : {}", request.getQueryString(), org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameters(request)); java.lang.String token = request.getParameter(SsoConstants.HTTP_REQ_ATTR_ACCESS_TOKEN); if (token == null) { token = getTokenFromHeader(request); } if (token == null) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SsoConstants.ERROR_CODE, org.ovirt.engine.core.sso.utils.SsoConstants.ERR_CODE_INVALID_REQUEST); } org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSessionFromRequest(request, token); org.ovirt.engine.core.sso.servlets.OpenIdUserInfoServlet.sendJsonData(response, buildResponse(request, ssoSession)); } catch (org.ovirt.engine.core.sso.utils.OAuthException ex) { org.ovirt.engine.core.sso.utils.SsoUtils.sendJsonDataWithMessage(response, ex); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { org.ovirt.engine.core.sso.utils.SsoUtils.sendJsonDataWithMessage(response, SsoConstants.ERR_CODE_ACCESS_DENIED, ex); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.SsoUtils.sendJsonDataWithMessage(response, SsoConstants.ERR_CODE_SERVER_ERROR, ex); } }	@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { try { org.ovirt.engine.core.sso.servlets.OpenIdUserInfoServlet.log.debug("Entered OpenIdUserInfoServlet Query String: {}, Parameters : {}", request.getQueryString(), org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameters(request)); java.lang.String token = request.getParameter(SsoConstants.HTTP_REQ_ATTR_ACCESS_TOKEN); if (token == null) { token = getTokenFromHeader(request); } if (token == null) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SsoConstants.ERROR_CODE, org.ovirt.engine.core.sso.utils.SsoConstants.ERR_CODE_INVALID_REQUEST); } org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSessionFromRequest(request, token); org.ovirt.engine.core.sso.utils.SsoUtils.sendJsonData(response, buildResponse(request, ssoSession), "application/jwt"); } catch (org.ovirt.engine.core.sso.utils.OAuthException ex) { org.ovirt.engine.core.sso.utils.SsoUtils.sendJsonDataWithMessage(response, ex); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { org.ovirt.engine.core.sso.utils.SsoUtils.sendJsonDataWithMessage(response, SsoConstants.ERR_CODE_ACCESS_DENIED, ex); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.SsoUtils.sendJsonDataWithMessage(response, SsoConstants.ERR_CODE_SERVER_ERROR, ex); } }
private java.lang.String buildResponse(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession) throws java.lang.Exception { return org.ovirt.engine.core.sso.utils.SsoUtils.createJWT(request, ssoSession, ssoSession.getClientId()).toString(); }	private java.lang.String buildResponse(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession) throws java.lang.Exception { return org.ovirt.engine.core.sso.servlets.OpenIdUtils.createJWT(request, ssoSession, ssoSession.getClientId()).toString(); }
protected org.ovirt.engine.core.sso.utils.SsoSession handleIssueTokenForAuthCode(javax.servlet.http.HttpServletRequest request, java.lang.String clientId, java.lang.String scope) throws java.lang.Exception { org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug("Entered issueTokenForAuthCode"); java.lang.String authCode = org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameter(request, SsoConstants.HTTP_PARAM_AUTHORIZATION_CODE, SsoConstants.HTTP_PARAM_AUTHORIZATION_CODE); java.lang.String accessToken = getTokenForAuthCode(authCode); if (org.apache.commons.lang.StringUtils.isEmpty(accessToken)) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SsoConstants.ERR_CODE_INVALID_GRANT, org.ovirt.engine.core.sso.utils.SsoConstants.ERR_CODE_INVALID_CODE_MSG); } org.ovirt.engine.core.sso.utils.SsoUtils.validateRequestScope(request, accessToken, scope); org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request, clientId, accessToken, true); validateClientAcceptHeader(ssoSession, request); return ssoSession; }	protected org.ovirt.engine.core.sso.utils.SsoSession handleIssueTokenForAuthCode(javax.servlet.http.HttpServletRequest request, java.lang.String clientId, java.lang.String scope) throws java.lang.Exception { org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug("Entered issueTokenForAuthCode"); java.lang.String authCode = org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameter(request, SsoConstants.HTTP_PARAM_AUTHORIZATION_CODE, SsoConstants.HTTP_PARAM_AUTHORIZATION_CODE); java.lang.String accessToken = getTokenForAuthCode(authCode); org.ovirt.engine.core.sso.utils.SsoUtils.validateRequestScope(request, accessToken, scope); org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request, clientId, accessToken, true); validateClientAcceptHeader(ssoSession, request); return ssoSession; }
@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener(( ev, sender, args) -> clearSelection()); getModel().getSelectionModel().addSelectionChangeHandler(( event) -> { if (!(getModel().getSelectedObjects().isEmpty())) { this.getModel().setSelectedItem(getModel().getSelectedObjects().get(0)); } else { this.getModel().setSelectedItem(null); } }); }	@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener(( ev, sender, args) -> clearSelection()); getModel().getSelectionModel().addSelectionChangeHandler(( event) -> { org.ovirt.engine.core.common.businessentities.Bookmark bookmark = (getModel().getSelectedObjects().isEmpty()) ? null : ((org.ovirt.engine.core.common.businessentities.Bookmark) (getModel().getSelectedObjects().get(0))); this.getModel().setSelectedItem(bookmark); }); }
private static void extractInterfaceStatistics(java.util.Map<java.lang.String, java.lang.Object> dict, org.ovirt.engine.core.common.businessentities.network.NetworkInterface<?> iface) { org.ovirt.engine.core.common.businessentities.network.NetworkStatistics stats = iface.getStatistics(); stats.setReceiveDropRate(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValueWithNullProtection(dict, VdsProperties.rx_dropped)); stats.setReceivedBytes(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignLongValue(dict, VdsProperties.rx_total)); stats.setTransmitDropRate(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValueWithNullProtection(dict, VdsProperties.tx_dropped)); stats.setTransmittedBytes(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignLongValue(dict, VdsProperties.tx_total)); stats.setSampleTime(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValue(dict, VdsProperties.sample_time)); if (dict.containsKey(VdsProperties.INTERFACE_SPEED)) { iface.setSpeed(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignIntValue(dict, VdsProperties.INTERFACE_SPEED)); } }	private static void extractInterfaceStatistics(java.util.Map<java.lang.String, java.lang.Object> dict, org.ovirt.engine.core.common.businessentities.network.NetworkInterface<?> iface) { org.ovirt.engine.core.common.businessentities.network.NetworkStatistics stats = iface.getStatistics(); stats.setReceiveDropRate(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValueWithNullProtection(dict, VdsProperties.rx_dropped)); stats.setReceivedBytes(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignLongValue(dict, VdsProperties.rx_total)); stats.setTransmitDropRate(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValueWithNullProtection(dict, VdsProperties.tx_dropped)); stats.setTransmittedBytes(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignLongValue(dict, VdsProperties.tx_total)); stats.setSampleTime(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValue(dict, VdsProperties.sample_time)); iface.setSpeed(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignIntValue(dict, VdsProperties.INTERFACE_SPEED)); }
private void writeVmMetadata() { writer.setPrefix(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI); writer.writeStartElement(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI, "vm"); writer.writeNamespace(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI); if (vm.isRunOnce()) { writer.writeStartElement(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI, "destroy_on_reboot"); writer.writeAttributeString("type", "bool"); writer.writeRaw("True"); writer.writeEndElement(); } writer.writeEndElement(); }	private void writeVmMetadata() { writer.setPrefix(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI); writer.writeStartElement(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI, "vm"); writer.writeNamespace(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI); writer.writeEndElement(); }
java.lang.String CANNOT_REMOVE_STORAGE_HOST_IN_MAINTENANCE();	java.lang.String CANNOT_REMOVE_STORAGE_DOMAIN_HOST_NOT_UP();
@java.lang.Override public void setHasSelectedTags(boolean hasSelectedTags) { }	@java.lang.Override public void setHasSelectedTags(boolean hasSelectedTags) { if (hasSelectedTags) { searchStringPrefixLabel.addStyleName(style.hasSelectedTags()); searchStringInput.addStyleName(style.hasSelectedTags()); searchBoxClear.addStyleName(style.hasSelectedTags()); } else { searchStringPrefixLabel.removeStyleName(style.hasSelectedTags()); searchStringInput.removeStyleName(style.hasSelectedTags()); searchBoxClear.removeStyleName(style.hasSelectedTags()); } }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override protected void showSuggestions(final com.google.gwt.user.client.ui.SuggestBox suggestBox, java.util.Collection<? extends com.google.gwt.user.client.ui.SuggestOracle.Suggestion> suggestions, boolean isDisplayStringHTML, boolean isAutoSelectEnabled, org.ovirt.engine.ui.webadmin.widget.autocomplete.SuggestionCallback callback) { boolean anySuggestions = (suggestions != null) && ((suggestions.size()) > 0); if (!anySuggestions) { hideSuggestions(); return; } if ((suggestionPopup) == null) { suggestionPopup = createPopup(); } if (suggestionPopup.isAttached()) { suggestionPopup.hide(); } if (suggestBox != null) { suggestionPopup.removeAutoHidePartner(suggestBox.getElement()); suggestionPopup.addAutoHidePartner(suggestBox.getElement()); } suggestionsTable = getSuggestionCellList(((java.util.Collection<org.ovirt.engine.ui.webadmin.widget.autocomplete.SearchSuggestion>) (suggestions)), suggestBox, suggestionPopup); suggestionPopup.setWidget(suggestionsTable); suggestionPopup.showRelativeTo(suggestBox); }	@java.lang.SuppressWarnings("unchecked") @java.lang.Override protected void showSuggestions(final com.google.gwt.user.client.ui.SuggestBox suggestBox, java.util.Collection<? extends com.google.gwt.user.client.ui.SuggestOracle.Suggestion> suggestions, boolean isDisplayStringHTML, boolean isAutoSelectEnabled, org.ovirt.engine.ui.webadmin.widget.autocomplete.SuggestionCallback callback) { boolean anySuggestions = (suggestions != null) && ((suggestions.size()) > 0); if (!anySuggestions) { hideSuggestions(); return; } if ((suggestionPopup) == null) { suggestionPopup = createPopup(); } if (suggestionPopup.isAttached()) { suggestionPopup.hide(); } if (suggestBox != null) { suggestionPopup.removeAutoHidePartner(suggestBox.getElement()); suggestionPopup.addAutoHidePartner(suggestBox.getElement()); } suggestionsTable = getSuggestionCellList(((java.util.Collection<org.ovirt.engine.ui.webadmin.widget.autocomplete.SearchSuggestion>) (suggestions)), suggestBox, suggestionPopup); suggestionPopup.setWidget(suggestionsTable); suggestionPopup.showRelativeTo(suggestBox); if (suggestBox != null) { int suggestBoxInputWidth = suggestBox.getValueBox().getElement().getOffsetWidth(); suggestionPopup.setWidth((suggestBoxInputWidth + "px")); } }
private java.lang.String[] getSearchObjectFilter() { java.util.List<java.lang.String> filter = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?, ?> list : commonModel.getItems()) { if ((list != null) && (!(list.getIsAvailable()))) { java.lang.String[] searchObjects = list.getSearchObjects(); if (searchObjects != null) { filter.addAll(java.util.Arrays.asList(searchObjects)); } } } return filter.toArray(new java.lang.String[0]); }	private java.lang.String[] getSearchObjectFilter() { java.util.List<java.lang.String> filter = new java.util.ArrayList<>(); if (((model) != null) && (!(model.getIsAvailable()))) { java.lang.String[] searchObjects = model.getSearchObjects(); if (searchObjects != null) { filter.addAll(java.util.Arrays.asList(searchObjects)); } } return filter.toArray(new java.lang.String[0]); }
private void syncDirectLunsAttachedToVmsInPool(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> deviceList) { org.ovirt.engine.core.common.action.SyncDirectLunsParameters parameters = new org.ovirt.engine.core.common.action.SyncDirectLunsParameters(org.ovirt.engine.core.bll.storage.pool.SyncAllUsedLunsCommand.getParameters().getStoragePoolId()); parameters.setDeviceList(deviceList); runInternalAction(VdcActionType.SyncDirectLuns, parameters); }	private void syncDirectLunsAttachedToVmsInPool(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> deviceList) { org.ovirt.engine.core.common.action.SyncDirectLunsParameters parameters = new org.ovirt.engine.core.common.action.SyncDirectLunsParameters(org.ovirt.engine.core.bll.storage.pool.SyncAllUsedLunsCommand.getParameters().getStoragePoolId()); parameters.setDeviceList(deviceList); runInternalAction(ActionType.SyncDirectLuns, parameters); }
@java.lang.Override protected boolean validate() { return org.ovirt.engine.core.bll.storage.pool.AbstractSyncLunsCommand.checkStoragePool(); }	@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.storage.pool.AbstractSyncLunsCommand.checkStoragePool())) { return false; } return super.validate(); }
private void validateRemove() { if (((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getVds().getStoragePoolId()); validateRetrievedMetadataDevices(); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageStaticData()); java.util.List<java.lang.String> metadataDevices = blockStorageDomainHelper.findMetadataDevices(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce()); if (!(metadataDevices.isEmpty())) { org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.setCustomCommaSeparatedValues("deviceIds", metadataDevices); auditLogDirector.log(this, AuditLogType.USER_REDUCE_DOMAIN_DEVICES_FAILED_METADATA_DEVICES); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GeneralException, "Cannot perform on metadata devices"); } } validateFreeSpace(); }	private void validateRemove() { if (((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getVdsId()); validateRetrievedMetadataDevices(); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageStaticData()); java.util.List<java.lang.String> metadataDevices = blockStorageDomainHelper.findMetadataDevices(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce()); if (!(metadataDevices.isEmpty())) { org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.setCustomCommaSeparatedValues("deviceIds", metadataDevices); auditLogDirector.log(this, AuditLogType.USER_REDUCE_DOMAIN_DEVICES_FAILED_METADATA_DEVICES); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GeneralException, "Cannot perform on metadata devices"); } } validateFreeSpace(); }
public void fillMetadataDevicesInfo(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic, org.ovirt.engine.core.compat.Guid storagePoolId) { try { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainFromIrs = ((org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid>) (org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithoutFailover(VDSCommandType.HSMGetStorageDomainInfo, new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(null, storageDomainStatic.getId()), storagePoolId, null).getReturnValue())).getFirst(); storageDomainStatic.setFirstMetadataDevice(domainFromIrs.getFirstMetadataDevice()); storageDomainStatic.setVgMetadataDevice(domainFromIrs.getVgMetadataDevice()); } catch (java.lang.Exception e) { storageDomainStatic.setFirstMetadataDevice(null); storageDomainStatic.setVgMetadataDevice(null); org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info"); } }	public void fillMetadataDevicesInfo(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic, org.ovirt.engine.core.compat.Guid vdsId) { try { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainFromIrs = ((org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid>) (resourceManager.runVdsCommand(VDSCommandType.HSMGetStorageDomainInfo, new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(vdsId, storageDomainStatic.getId())).getReturnValue())).getFirst(); storageDomainStatic.setFirstMetadataDevice(domainFromIrs.getFirstMetadataDevice()); storageDomainStatic.setVgMetadataDevice(domainFromIrs.getVgMetadataDevice()); } catch (java.lang.Exception e) { storageDomainStatic.setFirstMetadataDevice(null); storageDomainStatic.setVgMetadataDevice(null); org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info"); } }
protected void updateMetadataDevices() { if (((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getVds().getStoragePoolId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } }	protected void updateMetadataDevices() { if (((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getVds().getId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } }
private void refreshMetadataDevicesInfoIfNeeded() { java.lang.String oldVgMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice(); java.lang.String oldFirstMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStoragePoolId()); if ((!(java.util.Objects.equals(oldVgMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()))) || (!(java.util.Objects.equals(oldFirstMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice())))) { storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } blockStorageDomainHelper.checkDomainMetadataDevices(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain()); }	private void refreshMetadataDevicesInfoIfNeeded() { java.lang.String oldVgMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice(); java.lang.String oldFirstMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()); if ((!(java.util.Objects.equals(oldVgMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()))) || (!(java.util.Objects.equals(oldFirstMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice())))) { storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } blockStorageDomainHelper.checkDomainMetadataDevices(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain()); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.initializeStorageDomain(); java.lang.String storage = ((org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage()) != null) ? org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage() : ""; org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(""); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInDb(); if (org.apache.commons.lang.StringUtils.isEmpty(storage)) { storage = createVG(); } org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(storage); if ((org.apache.commons.lang.StringUtils.isNotEmpty(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage())) && (org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInIrs())) { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.updateStorageDomainDynamicFromIrs(); proceedVGLunsInDb(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getVds().getStoragePoolId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData()); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.setSucceeded(true); } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.initializeStorageDomain(); java.lang.String storage = ((org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage()) != null) ? org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage() : ""; org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(""); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInDb(); if (org.apache.commons.lang.StringUtils.isEmpty(storage)) { storage = createVG(); } org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(storage); if ((org.apache.commons.lang.StringUtils.isNotEmpty(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage())) && (org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInIrs())) { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.updateStorageDomainDynamicFromIrs(); proceedVGLunsInDb(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getVds().getId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData()); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.setSucceeded(true); } }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getDeviceList(java.util.Set<java.lang.String> lunsIds) { if ((AbstractSyncLunsCommand.getParameters().getDeviceList()) == null) { return runGetDeviceList(lunsIds); } if (lunsIds == null) { return AbstractSyncLunsCommand.getParameters().getDeviceList(); } java.util.Set<java.lang.String> lunsIdsSet = new java.util.HashSet<>(lunsIds); return AbstractSyncLunsCommand.getParameters().getDeviceList().stream().filter(( lun) -> lunsIdsSet.contains(lun.getId())).collect(java.util.stream.Collectors.toList()); }	protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getDeviceList(java.util.Set<java.lang.String> lunsIds) { if ((AbstractSyncLunsCommand.getParameters().getDeviceList()) == null) { return runGetDeviceList(lunsIds); } if (lunsIds == null) { return AbstractSyncLunsCommand.getParameters().getDeviceList(); } return AbstractSyncLunsCommand.getParameters().getDeviceList().stream().filter(( lun) -> lunsIds.contains(lun.getId())).collect(java.util.stream.Collectors.toList()); }
private org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters createParameters(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.api.model.LogicalUnit> newLuns, boolean force) { org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters params = new org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters(); params.setStorageDomainId(storageDomainId); java.util.Set<java.lang.String> lunIds = newLuns.stream().map(LogicalUnit::getId).collect(java.util.stream.Collectors.toCollection(java.util.HashSet::new)); params.setLunIds(lunIds); params.setForce(force); return params; }	private org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters createParameters(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.api.model.LogicalUnit> newLuns, boolean force) { org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters params = new org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters(); params.setStorageDomainId(storageDomainId); java.util.Set<java.lang.String> lunIds = newLuns.stream().map(LogicalUnit::getId).collect(java.util.stream.Collectors.toSet()); params.setLunIds(lunIds); params.setForce(force); return params; }
@java.lang.Override protected void writeGeneralData() { super.writeGeneralData(); _writer.writeElement(OvfProperties.TEMPLATE_ID, _vmTemplate.getId().toString()); org.ovirt.engine.core.common.businessentities.OriginType originType = _vmTemplate.getOrigin(); _writer.writeElement(OvfProperties.ORIGIN, (originType == null ? "" : java.lang.String.valueOf(originType.getValue()))); _writer.writeElement(OvfProperties.TEMPLATE_DEFAULT_DISPLAY_TYPE, java.lang.String.valueOf(_vmTemplate.getDefaultDisplayType().getValue())); _writer.writeElement(OvfProperties.IS_DISABLED, java.lang.String.valueOf(_vmTemplate.isDisabled())); _writer.writeElement(OvfProperties.TRUSTED_SERVICE, java.lang.String.valueOf(_vmTemplate.isTrustedService())); _writer.writeElement(OvfProperties.TEMPLATE_TYPE, _vmTemplate.getTemplateType().name()); _writer.writeElement(OvfProperties.BASE_TEMPLATE_ID, _vmTemplate.getBaseTemplateId().toString()); _writer.writeElement(OvfProperties.TEMPLATE_VERSION_NUMBER, java.lang.String.valueOf(_vmTemplate.getTemplateVersionNumber())); _writer.writeElement(OvfProperties.TEMPLATE_VERSION_NAME, _vmTemplate.getTemplateVersionName()); _writer.writeEndElement(); }	@java.lang.Override protected void writeGeneralData() { super.writeGeneralData(); _writer.writeElement(OvfProperties.TEMPLATE_ID, vmTemplate.getId().toString()); org.ovirt.engine.core.common.businessentities.OriginType originType = vmTemplate.getOrigin(); _writer.writeElement(OvfProperties.ORIGIN, (originType == null ? "" : java.lang.String.valueOf(originType.getValue()))); _writer.writeElement(OvfProperties.TEMPLATE_DEFAULT_DISPLAY_TYPE, java.lang.String.valueOf(vmTemplate.getDefaultDisplayType().getValue())); _writer.writeElement(OvfProperties.IS_DISABLED, java.lang.String.valueOf(vmTemplate.isDisabled())); _writer.writeElement(OvfProperties.TRUSTED_SERVICE, java.lang.String.valueOf(vmTemplate.isTrustedService())); _writer.writeElement(OvfProperties.TEMPLATE_TYPE, vmTemplate.getTemplateType().name()); _writer.writeElement(OvfProperties.BASE_TEMPLATE_ID, vmTemplate.getBaseTemplateId().toString()); _writer.writeElement(OvfProperties.TEMPLATE_VERSION_NUMBER, java.lang.String.valueOf(vmTemplate.getTemplateVersionNumber())); _writer.writeElement(OvfProperties.TEMPLATE_VERSION_NAME, vmTemplate.getTemplateVersionName()); }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getSelectedItems())) : null; boolean shouldAllowEdit = true; if (disk != null) { shouldAllowEdit = (!(disk.isOvfStore())) && (!(isDiskLocked(disk))); } getNewCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk != null) && (disks != null)) && ((disks.size()) == 1)) && shouldAllowEdit)); getRemoveCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isRemoveCommandAvailable()))); getScanAlignmentCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isScanAlignmentCommandAvailable()))); getExportCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveCommandAvailability(disks); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems()) != null ? getItems() : null), ((getSelectedItems()) != null ? getSelectedItems() : null), getChangeQuotaCommand()); getCancelUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isCancelAllowed(disks)); getPauseUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isPauseAllowed(disks)); getResumeUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isResumeAllowed(disks)); }	private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getSelectedItems())) : null; boolean shouldAllowEdit = true; if (disk != null) { shouldAllowEdit = (!(disk.isOvfStore())) && (!(isDiskLocked(disk))); } getNewCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk != null) && (disks != null)) && ((disks.size()) == 1)) && shouldAllowEdit)); getRemoveCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isRemoveCommandAvailable()))); getScanAlignmentCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isScanAlignmentCommandAvailable()))); getExportCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveCommandAvailability(disks); getCancelUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isCancelAllowed(disks)); getPauseUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isPauseAllowed(disks)); getResumeUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isResumeAllowed(disks)); }
protected void updateDefaultHost() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getModel().getSelectedCluster(); final org.ovirt.engine.ui.uicompat.UIConstants constants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants(); if (cluster == null) { getModel().getDefaultHost().setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); getModel().getDefaultHost().setSelectedItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); return; } getHostListByCluster(cluster, asyncQuery(( hosts) -> { List<org.ovirt.engine.core.common.businessentities.VDS> oldDefaultHosts = getModel().getDefaultHost().getSelectedItems(); getModel().getDefaultHost().setItems(hosts); if ((oldDefaultHosts != null) && (!(oldDefaultHosts.isEmpty()))) { Set<org.ovirt.engine.core.common.businessentities.VDS> oldSelectedIntersectionNewHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.HashSet<>(oldDefaultHosts); oldSelectedIntersectionNewHosts.retainAll(hosts); oldDefaultHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.ArrayList<>(oldSelectedIntersectionNewHosts); } List<org.ovirt.engine.core.common.businessentities.VDS> hostsToSelect = ((oldDefaultHosts != null) && (!(oldDefaultHosts.isEmpty()))) ? oldDefaultHosts : !(hosts.isEmpty()) ? java.util.Collections.singletonList(hosts.get(0)) : java.util.Collections.<org.ovirt.engine.core.common.businessentities.VDS>emptyList(); getModel().getDefaultHost().setSelectedItems(hostsToSelect); changeDefaultHost(); })); }	protected void updateDefaultHost() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getModel().getSelectedCluster(); if (cluster == null) { getModel().getDefaultHost().setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); getModel().getDefaultHost().setSelectedItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); return; } getHostListByCluster(cluster, asyncQuery(( hosts) -> { List<org.ovirt.engine.core.common.businessentities.VDS> oldDefaultHosts = getModel().getDefaultHost().getSelectedItems(); getModel().getDefaultHost().setItems(hosts); if ((oldDefaultHosts != null) && (!(oldDefaultHosts.isEmpty()))) { Set<org.ovirt.engine.core.common.businessentities.VDS> oldSelectedIntersectionNewHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.HashSet<>(oldDefaultHosts); oldSelectedIntersectionNewHosts.retainAll(hosts); oldDefaultHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.ArrayList<>(oldSelectedIntersectionNewHosts); } List<org.ovirt.engine.core.common.businessentities.VDS> hostsToSelect = ((oldDefaultHosts != null) && (!(oldDefaultHosts.isEmpty()))) ? oldDefaultHosts : !(hosts.isEmpty()) ? java.util.Collections.singletonList(hosts.get(0)) : java.util.Collections.<org.ovirt.engine.core.common.businessentities.VDS>emptyList(); getModel().getDefaultHost().setSelectedItems(hostsToSelect); changeDefaultHost(); })); }
private void updateActionAvailability() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> items = ((getSelectedItems()) != null) ? getSelectedItems() : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(); org.ovirt.engine.core.common.businessentities.StorageDomain item = getSelectedItem(); getNewDomainCommand().setIsAvailable(true); getEditCommand().setIsExecutionAllowed((((items.size()) == 1) && (isEditAvailable(item)))); getRemoveCommand().setIsExecutionAllowed(((((items.size()) == 1) && (!(items.get(0).getStorageType().isOpenStackDomain()))) && ((items.get(0).getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)))); getDestroyCommand().setIsExecutionAllowed(((((item != null) && ((items.size()) == 1)) && (!(items.get(0).getStorageType().isOpenStackDomain()))) && ((item.getStatus()) != (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)))); getScanDisksCommand().setIsExecutionAllowed((((((item != null) && ((items.size()) == 1)) && (!(items.get(0).getStorageType().isOpenStackDomain()))) && ((item.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active))) && (item.getStorageDomainType().isDataDomain()))); getUpdateOvfsCommand().setIsExecutionAllowed(((((item != null) && ((items.size()) == 1)) && (item.getStorageDomainType().isDataDomain())) && ((item.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)))); }	private void updateActionAvailability() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> items = ((getSelectedItems()) != null) ? getSelectedItems() : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(); org.ovirt.engine.core.common.businessentities.StorageDomain item = getSelectedItem(); getNewDomainCommand().setIsAvailable(true); getEditCommand().setIsExecutionAllowed((((items.size()) == 1) && (isEditAvailable(item)))); getRemoveCommand().setIsExecutionAllowed(((((items.size()) == 1) && (!(items.get(0).getStorageType().isOpenStackDomain()))) && ((items.get(0).getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)))); getDestroyCommand().setIsExecutionAllowed(((((item != null) && ((items.size()) == 1)) && (!(items.get(0).getStorageType().isOpenStackDomain()))) && ((item.getStatus()) != (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)))); getScanDisksCommand().setIsExecutionAllowed((((((item != null) && ((items.size()) == 1)) && (!(items.get(0).getStorageType().isOpenStackDomain()))) && ((item.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active))) && (item.getStorageDomainType().isDataDomain()))); getUpdateOvfsCommand().setIsExecutionAllowed(((((item != null) && ((items.size()) == 1)) && (item.getStorageDomainType().isDataDomain())) && ((item.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)))); getNewDomainCommand().setIsAvailable(true); getRemoveCommand().setIsAvailable(true); getDestroyCommand().setIsAvailable(true); getScanDisksCommand().setIsAvailable(true); getUpdateOvfsCommand().setIsAvailable(true); }
private void updateActionAvailability() { getCopyCommand().setIsExecutionAllowed(((((getSelectedItems()) != null) && ((getSelectedItems().size()) > 0)) && (isCopyCommandAvailable()))); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems()) != null ? getItems() : null), ((getSelectedItems()) != null ? getSelectedItems() : null), getChangeQuotaCommand()); }	private void updateActionAvailability() { getCopyCommand().setIsExecutionAllowed(((((getSelectedItems()) != null) && ((getSelectedItems().size()) > 0)) && (isCopyCommandAvailable()))); }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); getNewCommand().setIsExecutionAllowed(true); getAttachCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk != null) && (isSingleDiskSelected())) && (!(isDiskLocked(disk)))) && (((isVmDown()) || (!(disk.getPlugged()))) || (isExtendImageSizeEnabled())))); getRemoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isRemoveCommandAvailable()))); getSparsifyCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isSparsifyCommandAvailable()))); getMoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && ((isMoveCommandAvailable()) || (isLiveMoveCommandAvailable())))); updateScanAlignmentCommandAvailability(); getPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(true)); getUnPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(false)); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems()) != null ? ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getItems())) : null), ((getSelectedItems()) != null ? getSelectedItems() : null), getChangeQuotaCommand()); }	private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); getNewCommand().setIsExecutionAllowed(true); getAttachCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk != null) && (isSingleDiskSelected())) && (!(isDiskLocked(disk)))) && (((isVmDown()) || (!(disk.getPlugged()))) || (isExtendImageSizeEnabled())))); getRemoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isRemoveCommandAvailable()))); getSparsifyCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isSparsifyCommandAvailable()))); getMoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && ((isMoveCommandAvailable()) || (isLiveMoveCommandAvailable())))); updateScanAlignmentCommandAvailability(); getPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(true)); getUnPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(false)); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainSectionPresenter.TYPE_SetHeader)) { setPanelContent(headerPanel, content); } else if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainSectionPresenter.TYPE_SetMainContent)) { if (!(placeholderRemoved)) { removeHostPagePlaceholder(); placeholderRemoved = true; } setPanelContent(mainContentPanel, content); } else { super.setInSlot(slot, content); } }	@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainSectionPresenter.TYPE_SetHeader)) { setPanelContent(headerPanel, content); } else if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainSectionPresenter.TYPE_SetMainContent)) { setPanelContent(mainContentPanel, content); } else { super.setInSlot(slot, content); } }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLogicalUnits() { boolean reportStatus = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendHostStorageResource.REPORT_STATUS, true, true); org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters params = new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(asGuid(hostId), org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN, reportStatus, null); params.setValidateHostStatus(true); return getBackendCollection(VdcQueryType.GetDeviceList, params); }	protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLogicalUnits() { boolean reportStatus = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendHostStorageResource.REPORT_STATUS, true, true); org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters params = new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(asGuid(hostId), org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN, reportStatus, null, true); return getBackendCollection(VdcQueryType.GetDeviceList, params); }
private void getMenuLayout(org.ovirt.engine.ui.webadmin.widget.tab.PrimaryMenuItem[] items, org.ovirt.engine.ui.webadmin.widget.tab.SecondaryMenuItem[] secondaryItems) { layoutMap.clear(); for (org.ovirt.engine.ui.webadmin.widget.tab.PrimaryMenuItem layout : items) { if ((layout.getHref()) != null) { org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails details = new org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails(); details.setPrimaryPriority(layout.getIndex()); details.setSecondaryTitle(layout.getTitle()); details.setIcon(layout.getIcon()); layoutMap.put(layout.getHref(), details); } } for (org.ovirt.engine.ui.webadmin.widget.tab.SecondaryMenuItem subMenu : secondaryItems) { org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails details = new org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails(); details.setPrimaryPriority(subMenu.getPrimaryMenu().getIndex()); details.setPrimaryTitle(subMenu.getPrimaryMenu().getTitle()); details.setSecondaryPriority(subMenu.getPriority()); details.setSecondaryTitle(subMenu.getTitle()); details.setIcon(subMenu.getIcon()); layoutMap.put(subMenu.getHref(), details); } }	private void getMenuLayout(org.ovirt.engine.ui.webadmin.widget.tab.PrimaryMenuItem[] items, org.ovirt.engine.ui.webadmin.widget.tab.SecondaryMenuItem[] secondaryItems) { for (org.ovirt.engine.ui.webadmin.widget.tab.PrimaryMenuItem layout : items) { if ((layout.getHref()) != null) { org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails details = new org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails(); details.setPrimaryPriority(layout.getIndex()); details.setSecondaryTitle(layout.getTitle()); details.setIcon(layout.getIcon()); layoutMap.put(layout.getHref(), details); } } for (org.ovirt.engine.ui.webadmin.widget.tab.SecondaryMenuItem subMenu : secondaryItems) { org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails details = new org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails(); details.setPrimaryPriority(subMenu.getPrimaryMenu().getIndex()); details.setPrimaryTitle(subMenu.getPrimaryMenu().getTitle()); details.setSecondaryPriority(subMenu.getIndex()); details.setSecondaryTitle(subMenu.getTitle()); details.setIcon(subMenu.getIcon()); layoutMap.put(subMenu.getHref(), details); } }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, final java.util.Comparator<? super T> comparator) { if ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity()) == null) { return; } org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity().getId()); parameters.setRefresh(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, parameters, new org.ovirt.engine.ui.uicommonweb.models.storage.SetSortedItemsAsyncQuery(comparator)); }	protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType queryType, final java.util.Comparator<? super T> comparator) { if ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity()) == null) { return; } org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity().getId()); parameters.setRefresh(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(queryType, parameters, new org.ovirt.engine.ui.uicommonweb.models.storage.SetSortedItemsAsyncQuery(comparator)); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase, org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, vdcQueryParametersBase, asyncCallback); setIsQueryFirstTime(false); }	protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType queryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase, org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(queryType, vdcQueryParametersBase, asyncCallback); setIsQueryFirstTime(false); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase) { syncSearch(vdcQueryType, vdcQueryParametersBase, new SetItemsAsyncQuery()); }	protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType queryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase) { syncSearch(queryType, vdcQueryParametersBase, new SetItemsAsyncQuery()); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.QueryParametersBase queryParametersBase, org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { queryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, queryParametersBase, asyncCallback); setIsQueryFirstTime(false); }	protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType queryType, org.ovirt.engine.core.common.queries.QueryParametersBase queryParametersBase, org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { queryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(queryType, queryParametersBase, asyncCallback); setIsQueryFirstTime(false); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.QueryParametersBase queryParametersBase) { syncSearch(vdcQueryType, queryParametersBase, new SetItemsAsyncQuery()); }	protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType queryType, org.ovirt.engine.core.common.queries.QueryParametersBase queryParametersBase) { syncSearch(queryType, queryParametersBase, new SetItemsAsyncQuery()); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLogicalUnits() { boolean reportStatus = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendHostStorageResource.REPORT_STATUS, true, true); return getBackendCollection(QueryType.GetDeviceList, new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(asGuid(hostId), org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN, reportStatus, null)); }	protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLogicalUnits() { boolean reportStatus = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendHostStorageResource.REPORT_STATUS, true, true); org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters params = new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(asGuid(hostId), org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN, reportStatus, null, true); return getBackendCollection(QueryType.GetDeviceList, params); }
java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> runMultipleQueries(java.util.ArrayList<org.ovirt.engine.core.common.queries.QueryType> vdcQueryTypeList, java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryParametersBase> paramsList);	java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> runMultipleQueries(java.util.ArrayList<org.ovirt.engine.core.common.queries.QueryType> queryTypeList, java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryParametersBase> paramsList);
protected org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer initializeVdsBroker(org.ovirt.engine.core.compat.Guid vdsId) { org.ovirt.engine.core.vdsbroker.VdsManager vdsmanager = org.ovirt.engine.core.vdsbroker.vdsbroker.Injector.get(org.ovirt.engine.core.vdsbroker.ResourceManager.class).getVdsManager(vdsId); if (vdsmanager == null) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.RESOURCE_MANAGER_VDS_NOT_FOUND, java.lang.String.format("Vds with id: %1$s was not found", vdsId)); } setVdsAndVdsStatic(vdsmanager.getCopyVds()); return vdsmanager.getVdsProxy(); }	protected org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer initializeVdsBroker(org.ovirt.engine.core.compat.Guid vdsId) { org.ovirt.engine.core.vdsbroker.VdsManager vdsmanager = org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.vdsbroker.ResourceManager.class).getVdsManager(vdsId); if (vdsmanager == null) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.RESOURCE_MANAGER_VDS_NOT_FOUND, java.lang.String.format("Vds with id: %1$s was not found", vdsId)); } setVdsAndVdsStatic(vdsmanager.getCopyVds()); return vdsmanager.getVdsProxy(); }
@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener(( ev, sender, args) -> clearSelection()); getModel().getSelectionModel().addSelectionChangeHandler(( event) -> { this.setSelectedItems(getModel().getSelectionModel().getSelectedObjects()); }); }	@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener(( ev, sender, args) -> clearSelection()); getModel().getSelectionModel().addSelectionChangeHandler(( event) -> { this.getModel().setSelectedItem(getModel().getSelectionModel().getFirstSelectedObject()); }); }
private void writeHostDevice(org.ovirt.engine.core.common.businessentities.VmHostDevice device) { java.lang.String deviceName = device.getDevice(); java.lang.String type = deviceName.substring(0, deviceName.indexOf('_')); switch (type) { case "pci" : writePciHostDevice(device); break; } }	private void writeHostDevice(org.ovirt.engine.core.common.businessentities.VmHostDevice device, org.ovirt.engine.core.common.businessentities.HostDevice hostDevice) { switch (hostDevice.getCapability()) { case "pci" : writePciHostDevice(device, hostDevice); break; case "usb" : case "usb_device" : writeUsbHostDevice(device, hostDevice); break; case "scsi" : writeScsiHostDevice(device, hostDevice); break; default : org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.log.warn("Skipping host device: {}", device.getDevice()); } }
private void writePciHostDevice(org.ovirt.engine.core.common.businessentities.VmHostDevice device) { if (device.isIommuPlaceholder()) { return; } writer.writeStartElement("hostdev"); writer.writeAttributeString("managed", "no"); writer.writeAttributeString("mode", "subsystem"); writer.writeAttributeString("type", "pci"); java.lang.String[] nameElements = device.getDevice().split("_"); writer.writeStartElement("source"); writer.writeStartElement("address"); writer.writeAttributeString("domain", java.lang.String.format("0x%s", nameElements[1])); writer.writeAttributeString("bus", java.lang.String.format("0x%s", nameElements[2])); writer.writeAttributeString("slot", java.lang.String.format("0x%s", nameElements[3])); writer.writeAttributeString("function", java.lang.String.format("0x%s", nameElements[4])); writer.writeEndElement(); writer.writeEndElement(); writeAddress(device); writer.writeEndElement(); }	private void writePciHostDevice(org.ovirt.engine.core.common.businessentities.VmHostDevice device, org.ovirt.engine.core.common.businessentities.HostDevice hostDevice) { if (device.isIommuPlaceholder()) { return; } writer.writeStartElement("hostdev"); writer.writeAttributeString("managed", "no"); writer.writeAttributeString("mode", "subsystem"); writer.writeAttributeString("type", "pci"); writer.writeStartElement("source"); writer.writeStartElement("address"); writer.writeAttributeString("domain", hostDevice.getAddress().get("domain")); writer.writeAttributeString("bus", hostDevice.getAddress().get("bus")); writer.writeAttributeString("slot", hostDevice.getAddress().get("slot")); writer.writeAttributeString("function", hostDevice.getAddress().get("function")); writer.writeEndElement(); writer.writeEndElement(); writeAddress(device); writer.writeEndElement(); }
private void initStorageDomainDiscardAfterDelete() { if ((org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().getDiscardAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().setDiscardAfterDelete(getDefaultDiscardAfterDelete()); } }	private void initStorageDomainDiscardAfterDeleteIfNeeded() { if ((org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().getDiscardAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().setDiscardAfterDelete(getDefaultDiscardAfterDelete()); } }
protected boolean validateVmNotDuringSnapshot() { java.util.Set<org.ovirt.engine.core.compat.Guid> mergedSnapshotDisks = getSnapshotDisks(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getParameters().getSnapshotId()); java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> vmLockedSnapshots = getAllVmLockedSnapshots(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVmId()); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : vmLockedSnapshots) { java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotDisks = getSnapshotDisks(snapshot.getId()); if (snapshotDisks.stream().anyMatch(mergedSnapshotDisks::contains)) { return validate(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT)); } } return validate(ValidationResult.VALID); }	protected boolean validateVmSnapshotDisksNotDuringMerge() { return validate(snapshotsValidator.vmSnapshotDisksNotDuringMerge(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVmId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getParameters().getSnapshotId())); }
private static boolean isRestApiScope(javax.servlet.http.HttpServletRequest request) { boolean isRestApiScope; try { isRestApiScope = SsoUtils.getSsoSession(request).isRestApiScope(); } catch (org.ovirt.engine.core.sso.utils.OAuthException ex) { isRestApiScope = false; } return isRestApiScope || (SsoUtils.isRestApiScope(SsoUtils.scopeAsList(SsoUtils.getScopeRequestParameter(request, "")))); }	private static boolean isRestApiScope(javax.servlet.http.HttpServletRequest request) { boolean restApiScope; try { restApiScope = SsoUtils.getSsoSession(request).isRestApiScope(); } catch (org.ovirt.engine.core.sso.utils.OAuthException ex) { restApiScope = false; } return restApiScope || (SsoUtils.isRestApiScope(SsoUtils.scopeAsList(SsoUtils.getScopeRequestParameter(request, "")))); }
private void convertCustomPropertiesStrToMaps(org.ovirt.engine.core.compat.Version version, java.lang.String propertiesValue, java.util.Map<java.lang.String, java.lang.String> predefinedPropertiesMap, java.util.Map<java.lang.String, java.lang.String> userDefinedPropertiesMap) { java.util.Map<java.lang.String, java.lang.String> propertiesMap = convertProperties(propertiesValue, allVmProperties.get(version)); java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.String>> propertiesEntries = propertiesMap.entrySet(); java.util.Set<java.lang.String> predefinedPropertiesKeys = predefinedProperties.get(version).keySet(); java.util.Set<java.lang.String> userdefinedPropertiesKeys = userdefinedProperties.get(version).keySet(); for (java.util.Map.Entry<java.lang.String, java.lang.String> propertiesEntry : propertiesEntries) { java.lang.String propertyKey = propertiesEntry.getKey(); java.lang.String propertyValue = java.util.Optional.ofNullable(propertiesEntry.getValue()).orElse(""); if (predefinedPropertiesKeys.contains(propertyKey)) { predefinedPropertiesMap.put(propertyKey, propertyValue); } if (userdefinedPropertiesKeys.contains(propertyKey)) { userDefinedPropertiesMap.put(propertyKey, propertyValue); } } }	private void convertCustomPropertiesStrToMaps(org.ovirt.engine.core.compat.Version version, java.lang.String propertiesValue, java.util.Map<java.lang.String, java.lang.String> predefinedPropertiesMap, java.util.Map<java.lang.String, java.lang.String> userDefinedPropertiesMap) { java.util.Map<java.lang.String, java.lang.String> propertiesMap = convertProperties(propertiesValue, allVmProperties.get(version)); java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.String>> propertiesEntries = propertiesMap.entrySet(); java.util.Set<java.lang.String> predefinedPropertiesKeys = predefinedProperties.get(version).keySet(); java.util.Set<java.lang.String> userdefinedPropertiesKeys = userdefinedProperties.get(version).keySet(); for (java.util.Map.Entry<java.lang.String, java.lang.String> propertiesEntry : propertiesEntries) { java.lang.String propertyKey = propertiesEntry.getKey(); java.lang.String propertyValue = java.util.Objects.toString(propertiesEntry.getValue(), ""); if (predefinedPropertiesKeys.contains(propertyKey)) { predefinedPropertiesMap.put(propertyKey, propertyValue); } if (userdefinedPropertiesKeys.contains(propertyKey)) { userDefinedPropertiesMap.put(propertyKey, propertyValue); } } }
public boolean syntaxErrorInProperties(java.util.Map<java.lang.String, java.lang.String> properties) { boolean error = false; if ((properties != null) && (!(properties.isEmpty()))) { for (java.util.Map.Entry<java.lang.String, java.lang.String> e : properties.entrySet()) { java.lang.String key = e.getKey(); if ((key == null) || (!(key.matches(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.KEY_REGEX)))) { error = true; break; } if (!(java.util.Optional.ofNullable(e.getValue()).orElse("").matches(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.VALUE_REGEX))) { error = true; break; } } } return error; }	public boolean syntaxErrorInProperties(java.util.Map<java.lang.String, java.lang.String> properties) { boolean error = false; if ((properties != null) && (!(properties.isEmpty()))) { for (java.util.Map.Entry<java.lang.String, java.lang.String> e : properties.entrySet()) { java.lang.String key = e.getKey(); if ((key == null) || (!(key.matches(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.KEY_REGEX)))) { error = true; break; } if (!(java.util.Objects.toString(e.getValue(), "").matches(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.VALUE_REGEX))) { error = true; break; } } } return error; }
public java.lang.String convertProperties(java.util.Map<java.lang.String, java.lang.String> properties) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); if ((properties != null) && (!(properties.isEmpty()))) { for (java.util.Map.Entry<java.lang.String, java.lang.String> e : properties.entrySet()) { sb.append(e.getKey()); sb.append(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.KEY_VALUE_DELIMETER); sb.append(java.util.Optional.ofNullable(e.getValue()).orElse("")); sb.append(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.PROPERTIES_DELIMETER); } sb.deleteCharAt(((sb.length()) - 1)); } return sb.toString(); }	public java.lang.String convertProperties(java.util.Map<java.lang.String, java.lang.String> properties) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); if ((properties != null) && (!(properties.isEmpty()))) { for (java.util.Map.Entry<java.lang.String, java.lang.String> e : properties.entrySet()) { sb.append(e.getKey()); sb.append(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.KEY_VALUE_DELIMETER); sb.append(java.util.Objects.toString(e.getValue(), "")); sb.append(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.PROPERTIES_DELIMETER); } sb.deleteCharAt(((sb.length()) - 1)); } return sb.toString(); }
public void validateWithDirectLunIdAndInvalidVds() { command.getParameters().setDirectLunId(org.ovirt.engine.core.compat.Guid.newGuid()); doReturn(false).when(command).validateVds(); assertFalse(command.validate()); }	@org.junit.Test public void validateWithDirectLunIdAndInvalidVds() { command.getParameters().setDirectLunId(org.ovirt.engine.core.compat.Guid.newGuid()); doReturn(false).when(command).validateVds(); assertFalse(command.validate()); }
public boolean validatePMAgentPort() { java.lang.Integer port = getParameters().getAgent().getPort(); java.lang.String portStr = null; if (port == null) { if (getParameters().getAgent().getOptionsMap().containsKey(PORT)) { portStr = getParameters().getAgent().getOptionsMap().get(PORT); } else { return true; } } portStr = (portStr == null) ? port.toString() : portStr; return (portStr.equals("")) || (portStr.matches("\\d+")); }	protected boolean validatePMAgentPort() { java.lang.Integer port = getParameters().getAgent().getPort(); if (port == null) { if (getParameters().getAgent().getOptionsMap().containsKey(org.ovirt.engine.core.bll.FenceAgentCommandBase.PORT)) { java.lang.String portStr = getParameters().getAgent().getOptionsMap().get(org.ovirt.engine.core.bll.FenceAgentCommandBase.PORT); if (org.apache.commons.lang.StringUtils.isNumeric(portStr)) { port = java.lang.Integer.valueOf(portStr); } else { return false; } } else { return true; } } return (port == null) || (org.ovirt.engine.core.common.utils.ValidationUtils.validatePort(port)); }
@java.lang.Override protected void createItems() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = getModel().getSelectedItems(); boolean noLabelsSelected = (selectedLabels == null) || (selectedLabels.isEmpty()); if (noLabelsSelected) { addNoLabelsMessage(); return; } itemList.clear(); java.util.Collections.sort(selectedLabels, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); for (org.ovirt.engine.core.common.businessentities.Label label : selectedLabels) { final org.ovirt.engine.core.common.businessentities.Label selectedLabel = label; org.ovirt.engine.ui.common.widget.ItemListItem labelListItem = new org.ovirt.engine.ui.common.widget.ItemListItem(); labelListItem.init(selectedLabel.getName()); labelListItem.getDeactivationAnchor().addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { org.ovirt.engine.ui.common.widget.AffinityLabelListWidget.this.getModel().getSelectedItems().remove(selectedLabel); org.ovirt.engine.ui.common.widget.AffinityLabelListWidget.this.refreshItems(); } }); itemList.add(labelListItem); } itemListPanel.add(itemList); }	@java.lang.Override protected void createItems() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = getModel().getSelectedItems(); boolean noLabelsSelected = (selectedLabels == null) || (selectedLabels.isEmpty()); if (noLabelsSelected) { addNoLabelsMessage(); return; } itemList.clear(); java.util.Collections.sort(selectedLabels, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); for (org.ovirt.engine.core.common.businessentities.Label label : selectedLabels) { final org.ovirt.engine.core.common.businessentities.Label selectedLabel = label; org.ovirt.engine.ui.common.widget.ItemListItem labelListItem = new org.ovirt.engine.ui.common.widget.ItemListItem(); labelListItem.init(selectedLabel.getName()); labelListItem.getDeactivationAnchor().addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { getModel().getSelectedItems().remove(selectedLabel); refreshItems(); } }); itemList.add(labelListItem); } itemListPanel.add(itemList); }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { this.getModel().getSelectedItems().remove(selectedLabel); this.refreshItems(); }	@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { getModel().getSelectedItems().remove(selectedLabel); refreshItems(); }
private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.stream().map(Label::getId).collect(java.util.stream.Collectors.toList()); labelDao.addVmToLabels(org.ovirt.engine.core.bll.AddVmCommand.getVmId(), labelIds); }	private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getAffinityLabels(); if (affinityLabels.isEmpty()) { return; } java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.stream().map(Label::getId).collect(java.util.stream.Collectors.toList()); labelDao.addVmToLabels(org.ovirt.engine.core.bll.AddVmCommand.getVmId(), labelIds); }
java.lang.String affinityLabelsSubTabDeleteButton();	java.lang.String affinityLabelsSubTabRemoveButton();
@java.lang.Override protected void initTable() { super.initTable(); getTable().addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.core.common.businessentities.Label>(constants.affinityLabelsSubTabDeleteButton()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getRemoveCommand(); } }); }	@java.lang.Override protected void initTable() { super.initTable(); getTable().addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.core.common.businessentities.Label>(constants.affinityLabelsSubTabRemoveButton()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getRemoveCommand(); } }); }
@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList) { java.util.Set<org.ovirt.engine.core.compat.Guid> hostIds = this.getAffinityLabel().getHosts(); java.util.Collections.sort(hostList, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); this.getHostsSelectionModel().init(hostList, (hostIds != null ? new java.util.ArrayList(hostIds) : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); this.stopProgressOnVmsAndHostsInit(); }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList) { java.util.Set<org.ovirt.engine.core.compat.Guid> hostIds = getAffinityLabel().getHosts(); java.util.Collections.sort(hostList, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); getHostsSelectionModel().init(hostList, (hostIds != null ? new java.util.ArrayList(hostIds) : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); stopProgressOnVmsAndHostsInit(); }
public void loadEntitiesNameMap() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getEntitiesNameMap(new org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String>>() { @java.lang.Override public void onSuccess(java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> nameMap) { entitiesNameMap.getEntity().clear(); entitiesNameMap.getEntity().putAll(nameMap); entitiesNameMap.getEntityChangedEvent().raise(org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.this, EventArgs.EMPTY); } })); }	public void loadEntitiesNameMap() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getEntitiesNameMap(new org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String>>() { @java.lang.Override public void onSuccess(java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> nameMap) { entitiesNameMap.getEntity().clear(); entitiesNameMap.getEntity().putAll(nameMap); entitiesNameMap.getEntityChangedEvent().raise(this, EventArgs.EMPTY); } })); }
@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIds = this.getAffinityGroup().getVdsIds(); this.getHostsSelectionModel().init(hostList, (hostIds != null ? hostIds : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); this.stopProgressOnVmsAndHostsInit(); }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIds = getAffinityGroup().getVdsIds(); getHostsSelectionModel().init(hostList, (hostIds != null ? hostIds : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); stopProgressOnVmsAndHostsInit(); }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { this.stopProgress(); if (((result != null) && ((result.getReturnValue()) != null)) && (result.getReturnValue().getSucceeded())) { this.cancel(); } }	@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { stopProgress(); if (((result != null) && ((result.getReturnValue()) != null)) && (result.getReturnValue().getSucceeded())) { cancel(); } }
@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList) { java.util.Set<org.ovirt.engine.core.compat.Guid> vmIds = this.getAffinityLabel().getVms(); this.getVmsSelectionModel().init(vmList, (vmIds != null ? new java.util.ArrayList(vmIds) : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); this.stopProgressOnVmsAndHostsInit(); }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList) { java.util.Set<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityLabel().getVms(); getVmsSelectionModel().init(vmList, (vmIds != null ? new java.util.ArrayList(vmIds) : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); stopProgressOnVmsAndHostsInit(); }
private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.stream().map(Label::getId).collect(java.util.stream.Collectors.toList()); labelDao.addHostToLabels(org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getVdsId(), labelIds); }	private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getParameters().getAffinityLabels(); if (affinityLabels.isEmpty()) { return; } java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.stream().map(Label::getId).collect(java.util.stream.Collectors.toList()); labelDao.addHostToLabels(org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getVdsId(), labelIds); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.VirtualMachineSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.AuditLog, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>, org.ovirt.engine.ui.uicommonweb.models.vms.VmEventListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineEventPresenter.constants.virtualMachineEventSubTabLabel(), 11, modelProvider); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.VirtualMachineSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.AuditLog, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>, org.ovirt.engine.ui.uicommonweb.models.vms.VmEventListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineEventPresenter.constants.virtualMachineEventSubTabLabel(), 11, modelProvider, org.ovirt.engine.ui.common.widget.Align.RIGHT); }
void onSave() { if ((!(validate())) || ((getProgress()) != null)) { return; } org.ovirt.engine.core.common.businessentities.Label label = getAffinityLabel(); label.setName(getName().getEntity()); label.setVms(new java.util.HashSet(getVmsSelectionModel().getSelectedVmIds())); label.setHosts(new java.util.HashSet(getHostsSelectionModel().getSelectedHostIds())); startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(saveActionType, new org.ovirt.engine.core.common.action.LabelActionParameters(label), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.AffinityLabelModel.this.stopProgress(); if (((result != null) && ((result.getReturnValue()) != null)) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.AffinityLabelModel.this.cancel(); } } }, this); }	void onSave() { if ((!(validate())) || ((getProgress()) != null)) { return; } org.ovirt.engine.core.common.businessentities.Label label = getAffinityLabel(); label.setName(getName().getEntity()); label.setVms(new java.util.HashSet(getVmsSelectionModel().getSelectedVmIds())); label.setHosts(new java.util.HashSet(getHostsSelectionModel().getSelectedHostIds())); startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(saveActionType, new org.ovirt.engine.core.common.action.LabelActionParameters(label), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { stopProgress(); if (((result != null) && ((result.getReturnValue()) != null)) && (result.getReturnValue().getSucceeded())) { cancel(); } } }, this); }
@java.lang.Override protected void executeCommand() { imagesHandler.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation(getMovedDiskIds(), ImageStatus.LOCKED, ImageStatus.OK, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getCompensationContext()); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = runInternalAction(ActionType.CreateAllSnapshotsFromVm, getCreateSnapshotParameters(), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getContext())); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().setAutoGeneratedSnapshotId(vdcReturnValue.getActionReturnValue()); persistCommand(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getParentCommand(), ((getCallback()) != null)); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { imagesHandler.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation(getMovedDiskIds(), ImageStatus.LOCKED, ImageStatus.OK, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getCompensationContext()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValueurnValue = runInternalAction(ActionType.CreateAllSnapshotsFromVm, getCreateSnapshotParameters(), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getContext())); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().setAutoGeneratedSnapshotId(actionReturnValueurnValue.getActionReturnValue()); persistCommand(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getParentCommand(), ((getCallback()) != null)); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.setSucceeded(true); }
protected boolean checkCanBeMoveInVm() { return validate(new org.ovirt.engine.core.bll.validator.storage.DiskValidator(getImage()).isDiskPluggedToAnyNonDownVm(false)); }	protected boolean checkCanBeMoveInVm() { return validate(createDiskValidator(getImage()).isDiskPluggedToAnyNonDownVm(false)); }
protected void initializeCommand(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { when(diskDao.get(any())).thenReturn(disk); org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(VMStatus.Down); when(vmDao.get(any())).thenReturn(vm); doReturn(storageDomainValidator).when(command).createStorageDomainValidator(); doReturn(multipleDiskVmElementValidator).when(command).createMultipleDiskVmElementValidator(); doReturn(diskValidator).when(command).createDiskValidator(disk); doReturn(true).when(command).setAndValidateDiskProfiles(); doReturn(disk.getId()).when(command).getImageGroupId(); doReturn(ActionType.MoveOrCopyDisk).when(command).getActionType(); command.init(); }	protected void initializeCommand(org.ovirt.engine.core.common.businessentities.storage.DiskImage disk, org.ovirt.engine.core.common.businessentities.VmEntityType vmEntityType) { disk.setVmEntityType(vmEntityType); when(diskDao.get(any())).thenReturn(disk); when(diskImageDao.get(any())).thenReturn(disk); org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(VMStatus.Down); when(vmDao.get(any())).thenReturn(vm); doReturn(storageDomainValidator).when(command).createStorageDomainValidator(); doReturn(multipleDiskVmElementValidator).when(command).createMultipleDiskVmElementValidator(); doReturn(diskValidator).when(command).createDiskValidator(disk); doReturn(true).when(command).setAndValidateDiskProfiles(); doReturn(disk.getId()).when(command).getImageGroupId(); doReturn(ActionType.MoveOrCopyDisk).when(command).getActionType(); command.init(); }
@java.lang.Override protected void executeVmCommand() { this.setVmName(vmStaticDao.get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getVmId()).getName()); org.ovirt.engine.core.common.businessentities.network.VmNic iface = vmNicDao.get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getInterfaceId()); if (iface != null) { interfaceName = iface.getName(); java.lang.String interType = org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(iface.getType()).getDescription(); if (interType != null) { org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.addCustomValue("InterfaceType", interType); } org.ovirt.engine.core.bll.network.ExternalNetworkManager.create(iface).deallocateIfExternal(); org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getMacPool().freeMac(iface.getMacAddress()); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.bll.network.vm.vmStaticDao.incrementDbGeneration(getParameters().getVmId()); org.ovirt.engine.core.bll.network.vm.vmNicDao.remove(getParameters().getInterfaceId()); org.ovirt.engine.core.bll.network.vm.vmNetworkStatisticsDao.remove(getParameters().getInterfaceId()); org.ovirt.engine.core.bll.network.vm.vmDeviceDao.remove(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getParameters().getInterfaceId(), getParameters().getVmId())); setSucceeded(true); return null; }); }	@java.lang.Override protected void executeVmCommand() { this.setVmName(vmStaticDao.get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getVmId()).getName()); org.ovirt.engine.core.common.businessentities.network.VmNic iface = vmNicDao.get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getInterfaceId()); if (iface != null) { interfaceName = iface.getName(); java.lang.String interType = org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(iface.getType()).getDescription(); if (interType != null) { org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.addCustomValue("InterfaceType", interType); } externalNetworkManagerFactory.create(iface).deallocateIfExternal(); org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getMacPool().freeMac(iface.getMacAddress()); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { vmStaticDao.incrementDbGeneration(getParameters().getVmId()); vmNicDao.remove(getParameters().getInterfaceId()); vmNetworkStatisticsDao.remove(getParameters().getInterfaceId()); vmDeviceDao.remove(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getParameters().getInterfaceId(), getParameters().getVmId())); setSucceeded(true); return null; }); }
private void removeNetworks() { final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = networkDao.getAllForDataCenter(org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { if (network.isExternal()) { for (org.ovirt.engine.core.common.businessentities.network.VmNic nic : vmNicDao.getAllForNetwork(network.getId())) { org.ovirt.engine.core.bll.network.ExternalNetworkManager.create(nic, network).deallocateIfExternal(); } } } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { for (final org.ovirt.engine.core.common.businessentities.network.Network net : networks) { List<org.ovirt.engine.core.common.businessentities.network.VnicProfile> profiles = org.ovirt.engine.core.bll.storage.pool.vnicProfileDao.getAllForNetwork(net.getId()); for (org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile : profiles) { getCompensationContext().snapshotEntity(vnicProfile); org.ovirt.engine.core.bll.storage.pool.vnicProfileDao.remove(vnicProfile.getId()); } getCompensationContext().snapshotEntity(net); org.ovirt.engine.core.bll.storage.pool.networkDao.remove(net.getId()); } getCompensationContext().stateChanged(); return null; }); }	private void removeNetworks() { final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = networkDao.getAllForDataCenter(org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { if (network.isExternal()) { for (org.ovirt.engine.core.common.businessentities.network.VmNic nic : vmNicDao.getAllForNetwork(network.getId())) { externalNetworkManagerFactory.create(nic, network).deallocateIfExternal(); } } } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { for (final org.ovirt.engine.core.common.businessentities.network.Network net : networks) { List<org.ovirt.engine.core.common.businessentities.network.VnicProfile> profiles = vnicProfileDao.getAllForNetwork(net.getId()); for (org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile : profiles) { getCompensationContext().snapshotEntity(vnicProfile); vnicProfileDao.remove(vnicProfile.getId()); } getCompensationContext().snapshotEntity(net); networkDao.remove(net.getId()); } getCompensationContext().stateChanged(); return null; }); }
private void unplugFromExternalNetwork() { org.ovirt.engine.core.bll.network.ExternalNetworkManager.create(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic(), getNetwork()).deallocateIfExternal(); }	private void unplugFromExternalNetwork() { externalNetworkManagerFactory.create(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic(), getNetwork()).deallocateIfExternal(); }
protected void removeFromExternalNetworks(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { org.ovirt.engine.core.bll.network.ExternalNetworkManager.create(iface).deallocateIfExternal(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); }	protected void removeFromExternalNetworks(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { getExternalNetworkManagerFactory().create(iface).deallocateIfExternal(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); }
@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); when(providerDao.get(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); doReturn(providerProxyFactory).when(underTest).getProviderProxyFactory(); when(providerProxyFactory.create(provider)).thenReturn(networkProviderProxy); }	@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); when(providerDao.get(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); when(providerProxyFactory.create(provider)).thenReturn(networkProviderProxy); }
public org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid vdsId, boolean shouldPrepareAndTeardown) { if (vdsId == null) { vdsId = vdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldPrepareAndTeardown) { prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } try { qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (resourceManager.runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.error("Unable to get qemu image info from storage", e); } finally { if (shouldPrepareAndTeardown) { teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } } return qemuImageInfo; }	public org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid vdsId, boolean shouldPrepareAndTeardown) { if (vdsId == null) { vdsId = vdsCommandsHelper.getHostForExecution(storagePoolId); } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldPrepareAndTeardown) { prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } try { qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (resourceManager.runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.error("Unable to get qemu image info from storage", e); } finally { if (shouldPrepareAndTeardown) { try { teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.warn("Unable to tear down image", e); } } } return qemuImageInfo; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.bll.network.dc.networkDao.save(getNetwork()); if ((getNetwork().isVmNetwork()) && (getParameters().isVnicProfileRequired())) { org.ovirt.engine.core.bll.network.dc.vnicProfileDao.save(org.ovirt.engine.core.bll.network.dc.networkHelper.createVnicProfile(getNetwork())); } org.ovirt.engine.core.bll.network.dc.networkHelper.addPermissionsOnNetwork(getCurrentUser().getId(), getNetwork().getId()); return null; }); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getId()); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { networkDao.save(getNetwork()); if ((getNetwork().isVmNetwork()) && (getParameters().isVnicProfileRequired())) { vnicProfileDao.save(org.ovirt.engine.core.bll.network.dc.networkHelper.createVnicProfile(getNetwork())); } org.ovirt.engine.core.bll.network.dc.networkHelper.addPermissionsOnNetwork(getCurrentUser().getId(), getNetwork().getId()); return null; }); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getId()); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.setSucceeded(true); }
private void chooseHostForExecution(org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase parametersBase, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.bll.CommandBase<?> cmd, java.util.Collection<org.ovirt.engine.core.compat.Guid> executedHosts) { org.ovirt.engine.core.compat.Guid vdsForExecution = getHostForExecution(storagePoolId, executedHosts); parametersBase.setVdsId(vdsForExecution); if (cmd != null) { if (((cmd.getCommandStep()) != null) && ((cmd.getExecutionContext().getStep()) != null)) { org.ovirt.engine.core.compat.Guid stepId = cmd.getExecutionContext().getStep().getId(); if ((cmd.getParameters().getVdsRunningOn()) != null) { stepSubjectEntityDao.remove(cmd.getParameters().getVdsRunningOn(), stepId); } if (vdsForExecution != null) { stepSubjectEntityDao.saveAll(java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(stepId, org.ovirt.engine.core.common.VdcObjectType.EXECUTION_HOST, vdsForExecution))); } } cmd.getParameters().setVdsRunningOn(vdsForExecution); cmd.persistCommand(cmd.getParameters().getParentCommand(), ((cmd.getCallback()) != null)); } }	private void chooseHostForExecution(org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase parametersBase, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.bll.CommandBase<?> cmd, java.util.Collection<org.ovirt.engine.core.compat.Guid> executedHosts) { org.ovirt.engine.core.compat.Guid vdsForExecution = getHostForExecution(storagePoolId, executedHosts); parametersBase.setVdsId(vdsForExecution); if (cmd != null) { if (((cmd.getCommandStep()) != null) && ((cmd.getExecutionContext().getStep()) != null)) { org.ovirt.engine.core.compat.Guid stepId = cmd.getExecutionContext().getStep().getId(); if ((cmd.getParameters().getVdsRunningOn()) != null) { stepSubjectEntityDao.remove(cmd.getParameters().getVdsRunningOn(), stepId); } if (vdsForExecution != null) { stepSubjectEntityDao.saveAll(java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(stepId, org.ovirt.engine.core.common.VdcObjectType.EXECUTION_HOST, vdsForExecution))); updateStepMessage(cmd, vdsForExecution); } } cmd.getParameters().setVdsRunningOn(vdsForExecution); cmd.persistCommand(cmd.getParameters().getParentCommand(), ((cmd.getCallback()) != null)); } }
private void removeNetworkFromHosts(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.bll.context.CommandContext context, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = removeNetworkParametersBuilder.buildParameters(network, nics); if (!(parameters.isEmpty())) { org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(parameters); backend.runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, parameters, context); } }	private void removeNetworkFromHosts(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.bll.context.CommandContext context, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> parameters = removeNetworkParametersBuilder.buildParameters(network, nics); if (!(parameters.isEmpty())) { org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(parameters); backend.runInternalMultipleActions(ActionType.PersistentHostSetupNetworks, parameters, context); } }
@java.lang.SuppressWarnings("unchecked") private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); if ((org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()) == null) { return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (vdsCommandsHelper.runVdsCommandWithoutFailover(VDSCommandType.GetVGInfo, params, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStoragePoolId(), null).getReturnValue())); } return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params).getReturnValue())); }	@java.lang.SuppressWarnings("unchecked") private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getVgInfo() { if ((SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVgInfo()) != null) { log.debug(("Using the virtual group's information from the command's parameters rather " + "than calling getVgInfo and getting the information directly from vdsm.")); return SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVgInfo(); } org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId(), SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params).getReturnValue())); }
public void deallocateIfExternal() { if (((getNetwork()) != null) && (getNetwork().isExternal())) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = providerDao.get(getNetwork().getProvidedBy().getProviderId()); org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy providerProxy = getProviderProxyFactory().create(provider); try { providerProxy.deallocate(nic); } catch (org.ovirt.engine.core.common.errors.EngineException e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase removePortFailureEvent = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); removePortFailureEvent.addCustomValue("NicName", nic.getName()); removePortFailureEvent.addCustomValue("NicId", nic.getId().toString()); removePortFailureEvent.addCustomValue("ProviderName", provider.getName()); auditLogDirector.log(removePortFailureEvent, AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED); } } }	public void deallocateIfExternal() { if (((getNetwork()) != null) && (getNetwork().isExternal())) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = providerDao.get(getNetwork().getProvidedBy().getProviderId()); org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy providerProxy = providerProxyFactory.create(provider); try { providerProxy.deallocate(nic); } catch (org.ovirt.engine.core.common.errors.EngineException e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable removePortFailureEvent = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); removePortFailureEvent.addCustomValue("NicName", nic.getName()); removePortFailureEvent.addCustomValue("NicId", nic.getId().toString()); removePortFailureEvent.addCustomValue("ProviderName", provider.getName()); auditLogDirector.log(removePortFailureEvent, AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED); } } }
protected boolean validatePMAgentPort() { java.lang.Integer port = getParameters().getAgent().getPort(); if (port == null) { java.util.HashMap<java.lang.String, java.lang.String> optionsMap = getParameters().getAgent().getOptionsMap(); if ((optionsMap != null) && (optionsMap.containsKey(org.ovirt.engine.core.bll.FenceAgentCommandBase.PORT))) { java.lang.String portStr = getParameters().getAgent().getOptionsMap().get(org.ovirt.engine.core.bll.FenceAgentCommandBase.PORT); if (org.apache.commons.lang.StringUtils.isNumeric(portStr)) { port = java.lang.Integer.valueOf(portStr); } else { return false; } } else { return true; } } return (port == null) || (org.ovirt.engine.core.common.utils.ValidationUtils.validatePort(port)); }	protected boolean validatePMAgentPort() { java.lang.Integer port = getParameters().getAgent().getPort(); if (port == null) { java.util.HashMap<java.lang.String, java.lang.String> optionsMap = getParameters().getAgent().getOptionsMap(); if ((optionsMap != null) && (optionsMap.containsKey(org.ovirt.engine.core.bll.FenceAgentCommandBase.PORT))) { java.lang.String portStr = optionsMap.get(org.ovirt.engine.core.bll.FenceAgentCommandBase.PORT); if (org.apache.commons.lang.StringUtils.isNumeric(portStr)) { port = java.lang.Integer.valueOf(portStr); } else { return false; } } else { return true; } } return (port == null) || (org.ovirt.engine.core.common.utils.ValidationUtils.validatePort(port)); }
private void addDnsConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { boolean dnsResolverConfigurationSupported = org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.DnsResolverConfigurationSupported, this.cluster.getCompatibilityVersion()); if (!dnsResolverConfigurationSupported) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetworkAttachment = getNameServers(networkAttachment.getDnsResolverConfiguration()); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetwork = getNameServers(network.getDnsResolverConfiguration()); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfHost = getNameServers(reportedDnsResolverConfiguration); boolean engineDefineDnsConfiguration = (nameServersOfNetworkAttachment != null) || (nameServersOfNetwork != null); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> expectedNameServers = (nameServersOfNetworkAttachment != null) ? nameServersOfNetworkAttachment : nameServersOfNetwork; result.add(org.ovirt.engine.core.utils.DNS_CONFIGURATION, addressesAsString(nameServersOfHost), (engineDefineDnsConfiguration ? addressesAsString(expectedNameServers) : ""), (!(engineDefineDnsConfiguration && (!(java.util.Objects.equals(nameServersOfHost, expectedNameServers)))))); boolean inSync = (!(isDefaultRouteNetwork)) || (iface.isIpv4DefaultRoute()); java.lang.String expected = (isDefaultRouteNetwork) ? java.lang.Boolean.toString(isDefaultRouteNetwork) : ""; result.add(org.ovirt.engine.core.utils.DEFAULT_ROUTE, java.lang.Boolean.toString(iface.isIpv4DefaultRoute()), expected, inSync); }	private void addDnsConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfHost = getNameServers(reportedDnsResolverConfiguration); if (isDefaultRouteNetwork) { java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> expectedNameServers = getExpectedNameServers(); boolean engineDefineDnsConfiguration = expectedNameServers != null; if (engineDefineDnsConfiguration) { result.add(org.ovirt.engine.core.utils.DNS_CONFIGURATION, addressesAsString(nameServersOfHost), addressesAsString(expectedNameServers), java.util.Objects.equals(nameServersOfHost, expectedNameServers)); } } }
private void processSingleClusterChanges(org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param) { final java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> setupNetworksParams = new java.util.ArrayList(createNetworkClustersToSetupNetworksParametersTransformer().transform(param.getAttachments(), param.getDetachments(), param.getUpdates())); org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, setupNetworksParams); }	private void processSingleClusterChanges(org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param) { final java.util.List<org.ovirt.engine.core.common.action.ActionParametersBase> setupNetworksParams = new java.util.ArrayList(createNetworkClustersToSetupNetworksParametersTransformer().transform(param.getAttachments(), param.getDetachments(), param.getUpdates())); org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); runInternalMultipleActions(ActionType.PersistentHostSetupNetworks, setupNetworksParams); }
org.ovirt.engine.core.common.action.PersistentHostSetupNetworksParameters buildParameters(org.ovirt.engine.core.compat.Guid vdsId, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> labeledNetworksToBeAdded, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> labeledNetworksToBeRemoved, java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsByLabel, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, org.ovirt.engine.core.common.businessentities.network.Network>> updatedNetworks);	org.ovirt.engine.core.common.action.PersistentHostSetupNetworksParameters buildParameters(org.ovirt.engine.core.compat.Guid vdsId, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> labeledNetworksToBeAdded, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> labeledNetworksToBeRemoved, java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsByLabel, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> updatedNetworks);
@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getUserProfileDao(); existingProfile = dao.get(new org.ovirt.engine.core.compat.Guid("38cb5663-96bc-485c-834a-cbbc03acc820")); deletableProfile = dao.get(new org.ovirt.engine.core.compat.Guid("38cb5663-96bc-485c-834a-cbbc03acc821")); newProfile = new org.ovirt.engine.core.common.businessentities.UserProfile(); newProfile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newProfile.setUserId(new org.ovirt.engine.core.compat.Guid("81940459-2ec4-4afa-bbaa-22549555293c")); newProfile.setSshPublicKeyId(new org.ovirt.engine.core.compat.Guid("67bc5484-d4eb-47ce-8b6a-e9624b70b676")); newProfile.setSshPublicKey("key3"); newProfile.setLoginName("user4@testportal.redhat.com@testportal.redhat.com"); }	@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getUserProfileDao(); existingProfile = dao.get(new org.ovirt.engine.core.compat.Guid("38cb5663-96bc-485c-834a-cbbc03acc820")); deletableProfile = dao.get(new org.ovirt.engine.core.compat.Guid("38cb5663-96bc-485c-834a-cbbc03acc821")); newProfile = new org.ovirt.engine.core.common.businessentities.UserProfile(); newProfile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newProfile.setUserId(new org.ovirt.engine.core.compat.Guid("81940459-2ec4-4afa-bbaa-22549555293c")); newProfile.setSshPublicKeyId(new org.ovirt.engine.core.compat.Guid("67bc5484-d4eb-47ce-8b6a-e9624b70b676")); newProfile.setSshPublicKey("key3"); newProfile.setLoginName("userportal4@testportal.redhat.com@testportal.redhat.com"); }
@org.junit.Test public void testUpdateLastAdminCheckStatus() { org.ovirt.engine.core.common.businessentities.aaa.DbUser nonAdminUser = dbFacade.getDbUserDao().getByUsernameAndDomain("user2@testportal.redhat.com", "testportal.redhat.com"); assertNotNull(nonAdminUser); assertFalse(nonAdminUser.isAdmin()); dao.updateLastAdminCheckStatus(nonAdminUser.getId()); nonAdminUser = dbFacade.getDbUserDao().get(nonAdminUser.getId()); assertFalse(nonAdminUser.isAdmin()); org.ovirt.engine.core.common.businessentities.Permission perms = new org.ovirt.engine.core.common.businessentities.Permission(); perms.setRoleType(RoleType.ADMIN); perms.setRoleId(org.ovirt.engine.core.dao.DbUserDaoTest.ADMIN_ROLE_TYPE_FROM_FIXTURE_ID); perms.setAdElementId(nonAdminUser.getId()); perms.setObjectId(org.ovirt.engine.core.dao.DbUserDaoTest.SYSTEM_OBJECT_ID); perms.setObjectType(VdcObjectType.System); dbFacade.getPermissionDao().save(perms); assertNotNull(dbFacade.getPermissionDao().get(perms.getId())); dao.updateLastAdminCheckStatus(nonAdminUser.getId()); nonAdminUser = dbFacade.getDbUserDao().get(nonAdminUser.getId()); assertTrue(nonAdminUser.isAdmin()); }	@org.junit.Test public void testUpdateLastAdminCheckStatus() { org.ovirt.engine.core.common.businessentities.aaa.DbUser nonAdminUser = dbFacade.getDbUserDao().getByUsernameAndDomain("userportal2@testportal.redhat.com", "testportal.redhat.com"); assertNotNull(nonAdminUser); assertFalse(nonAdminUser.isAdmin()); dao.updateLastAdminCheckStatus(nonAdminUser.getId()); nonAdminUser = dbFacade.getDbUserDao().get(nonAdminUser.getId()); assertFalse(nonAdminUser.isAdmin()); org.ovirt.engine.core.common.businessentities.Permission perms = new org.ovirt.engine.core.common.businessentities.Permission(); perms.setRoleType(RoleType.ADMIN); perms.setRoleId(org.ovirt.engine.core.dao.DbUserDaoTest.ADMIN_ROLE_TYPE_FROM_FIXTURE_ID); perms.setAdElementId(nonAdminUser.getId()); perms.setObjectId(org.ovirt.engine.core.dao.DbUserDaoTest.SYSTEM_OBJECT_ID); perms.setObjectType(VdcObjectType.System); dbFacade.getPermissionDao().save(perms); assertNotNull(dbFacade.getPermissionDao().get(perms.getId())); dao.updateLastAdminCheckStatus(nonAdminUser.getId()); nonAdminUser = dbFacade.getDbUserDao().get(nonAdminUser.getId()); assertTrue(nonAdminUser.isAdmin()); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); javax.servlet.http.HttpServletResponse res = ((javax.servlet.http.HttpServletResponse) (response)); if (org.ovirt.engine.core.aaa.filters.FiltersHelper.isAuthenticated(req)) { chain.doFilter(request, response); } else { @java.lang.SuppressWarnings("unchecked") java.util.List<java.lang.String> schemes = ((java.util.List<java.lang.String>) (req.getAttribute(FiltersHelper.Constants.REQUEST_SCHEMES_KEY))); if (schemes == null) { schemes = java.util.Collections.emptyList(); } java.util.Set<java.lang.String> allSchemes = new java.util.HashSet<>(schemes); if ((additionalSchemes) != null) { allSchemes.addAll(additionalSchemes); } for (java.lang.String scheme : allSchemes) { res.setHeader(FiltersHelper.Constants.HEADER_WWW_AUTHENTICATE, scheme); } if (req.getContextPath().endsWith("/api")) { req.getRequestDispatcher(java.lang.String.format(ERROR_URL_FORMAT, defaultVersion, req.getAttribute(SessionConstants.SSO_AUTHENTICATION_ERR_MSG))).forward(req, res); } else { res.sendError(HttpServletResponse.SC_UNAUTHORIZED); } } }	@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); javax.servlet.http.HttpServletResponse res = ((javax.servlet.http.HttpServletResponse) (response)); if (org.ovirt.engine.core.aaa.filters.FiltersHelper.isAuthenticated(req)) { chain.doFilter(request, response); } else { @java.lang.SuppressWarnings("unchecked") java.util.List<java.lang.String> schemes = ((java.util.List<java.lang.String>) (req.getAttribute(FiltersHelper.Constants.REQUEST_SCHEMES_KEY))); if (schemes == null) { schemes = java.util.Collections.emptyList(); } java.util.Set<java.lang.String> allSchemes = new java.util.HashSet<>(schemes); if ((additionalSchemes) != null) { allSchemes.addAll(additionalSchemes); } for (java.lang.String scheme : allSchemes) { res.setHeader(FiltersHelper.Constants.HEADER_WWW_AUTHENTICATE, scheme); } java.lang.String errMsg = ((java.lang.String) (req.getAttribute(SessionConstants.SSO_AUTHENTICATION_ERR_MSG))); if (org.apache.commons.lang.StringUtils.isEmpty(errMsg)) { res.sendError(HttpServletResponse.SC_UNAUTHORIZED); } else { res.sendError(HttpServletResponse.SC_UNAUTHORIZED, errMsg); } } }
@java.lang.Override public void init(javax.servlet.FilterConfig filterConfig) throws javax.servlet.ServletException { for (java.lang.String paramName : java.util.Collections.list(filterConfig.getInitParameterNames())) { if (paramName.startsWith("scheme")) { additionalSchemes.add(filterConfig.getInitParameter(paramName)); } } defaultVersion = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_API_DEFAULT_VERSION"); }	@java.lang.Override public void init(javax.servlet.FilterConfig filterConfig) throws javax.servlet.ServletException { for (java.lang.String paramName : java.util.Collections.list(filterConfig.getInitParameterNames())) { if (paramName.startsWith("scheme")) { additionalSchemes.add(filterConfig.getInitParameter(paramName)); } } }
public static boolean isBackedByHugepages(org.ovirt.engine.core.common.businessentities.VmBase vm) { if (((vm.getCustomProperties()) == null) || (vm.getCustomProperties().isEmpty())) { return false; } java.lang.String hugePage = org.ovirt.engine.core.common.utils.HugePageUtils.getHugePageSize(vm); if (hugePage == null) { return false; } try { java.lang.Integer.parseInt(hugePage); return true; } catch (java.lang.NumberFormatException e) { return false; } }	public static boolean isBackedByHugepages(org.ovirt.engine.core.common.businessentities.VmBase vm) { if (((vm.getCustomProperties()) == null) || (vm.getCustomProperties().isEmpty())) { return false; } java.lang.String hugePage = org.ovirt.engine.core.common.utils.HugePageUtils.getHugePageSize(vm); if (hugePage == null) { return false; } try { return (java.lang.Integer.parseInt(hugePage)) > 0; } catch (java.lang.NumberFormatException e) { return false; } }
public static java.util.Map<java.lang.Integer, java.lang.Integer> getHugePages(org.ovirt.engine.core.common.businessentities.VmBase vm) { if (!(org.ovirt.engine.core.common.utils.HugePageUtils.isBackedByHugepages(vm))) { return java.util.Collections.emptyMap(); } int hugePageSize = java.lang.Integer.parseInt(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePageSize(vm)); int fullPages = (vm.getMemSizeMb()) / hugePageSize; int lastPage = java.lang.Math.min(1, ((vm.getMemSizeMb()) % hugePageSize)); return java.util.Collections.singletonMap(hugePageSize, (fullPages + lastPage)); }	public static java.util.Map<java.lang.Integer, java.lang.Integer> getHugePages(org.ovirt.engine.core.common.businessentities.VmBase vm) { if (!(org.ovirt.engine.core.common.utils.HugePageUtils.isBackedByHugepages(vm))) { return java.util.Collections.emptyMap(); } int hugePageSize = java.lang.Integer.parseInt(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePageSize(vm)); int fullPages = ((int) (((((org.ovirt.engine.core.common.utils.HugePageUtils.KIB_IN_MIB) * (vm.getMemSizeMb())) + hugePageSize) - 1) / hugePageSize)); return java.util.Collections.singletonMap(hugePageSize, fullPages); }
@org.junit.Test public void getHugeMemoryFitsIntoOneHugePage() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setCustomProperties("hugepages=1024"); base.setMemSizeMb(1024); assertThat(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(base).size(), is(1)); assertThat(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(base).get(1024), is(1)); }	@org.junit.Test public void getHugeMemoryFitsIntoOneHugePage() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setCustomProperties("hugepages=1048576"); base.setMemSizeMb(1024); assertThat(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(base).size(), is(1)); assertThat(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(base).get(1048576), is(1)); }
@org.junit.Test public void getHugePagesNoHugePagesDefined() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setMemSizeMb(1025); assertThat(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(base).size(), is(0)); }	@org.junit.Test public void getHugePagesNoHugePagesDefined() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setMemSizeMb(1); assertThat(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(base).size(), is(0)); }
@org.junit.Test public void getHugePagesMemoryDoesNotFitIntoOne() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setCustomProperties("hugepages=1024"); base.setMemSizeMb(1025); assertThat(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(base).size(), is(1)); assertThat(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(base).get(1024), is(2)); }	@org.junit.Test public void getHugePagesMemoryDoesNotFitIntoOne() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setCustomProperties("hugepages=1048576"); base.setMemSizeMb(1025); assertThat(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(base).size(), is(1)); assertThat(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(base).get(1048576), is(2)); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.SubTabVolumePermissionPresenter.constants.volumePermissionSubTabLabel(), 3); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData() { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.SubTabVolumePermissionPresenter.constants.volumePermissionSubTabLabel(), 3); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.disk.DiskSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.disks.DiskListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.storage.Disk>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.disk.SubTabDiskPermissionPresenter.constants.diskPermissionSubTabLabel(), 4); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.disk.DiskSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData() { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.disk.SubTabDiskPermissionPresenter.constants.diskPermissionSubTabLabel(), 4); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.errata.ErrataSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider<org.ovirt.engine.ui.uicommonweb.models.EngineErrataListModel, org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.Erratum>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.errata.SubTabEngineErrataDetailsPresenter.constants.errataDetailsSubTabLabel(), 1); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.errata.ErrataSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData() { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.errata.SubTabEngineErrataDetailsPresenter.constants.errataDetailsSubTabLabel(), 1); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.pool.PoolSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.pools.PoolListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.VmPool>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.pool.SubTabPoolPermissionPresenter.constants.poolPermissionSubTabLabel(), 2); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.pool.PoolSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData() { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.pool.SubTabPoolPermissionPresenter.constants.poolPermissionSubTabLabel(), 2); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession, org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel, org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.SubTabVolumeGeoRepPresenter.constants.volumeGeoRepSubTabLabel(), 4); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData() { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.SubTabVolumeGeoRepPresenter.constants.volumeGeoRepSubTabLabel(), 4); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.VmTemplate, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterTemplateListModel> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageRegisterTemplatePresenter.constants.storageTemplateBackupSubTabLabel(), 3); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData() { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageRegisterTemplatePresenter.constants.storageTemplateBackupSubTabLabel(), 3); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.StorageDomain>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStoragePermissionPresenter.constants.storagePermissionSubTabLabel(), 13); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData() { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStoragePermissionPresenter.constants.storagePermissionSubTabLabel(), 13); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.StorageDomainDR, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageDRPresenter.constants.storageDRSubTabLabel(), 12); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData() { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageDRPresenter.constants.storageDRSubTabLabel(), 12); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.DataCenterSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.StoragePool>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.SubTabDataCenterPermissionPresenter.constants.dataCenterPermissionSubTabLabel(), 5); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.DataCenterSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData() { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.SubTabDataCenterPermissionPresenter.constants.dataCenterPermissionSubTabLabel(), 5); }
java.lang.String getPrefixedKey(java.lang.String key) { return ((org.ovirt.engine.ui.common.system.ClientStorageImpl.CLIENT_STORAGE_KEY_PREFIX) + "_") + key; }	java.lang.String getPrefixedKey(java.lang.String key) { return (org.ovirt.engine.ui.common.system.ClientStorageImpl.CLIENT_STORAGE_KEY_PREFIX) + key; }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.template.TemplateSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.VmTemplate>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.template.SubTabTemplatePermissionPresenter.constants.templatePermissionSubTabLabel(), 5); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.template.TemplateSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData() { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.template.SubTabTemplatePermissionPresenter.constants.templatePermissionSubTabLabel(), 5); }
private java.util.Map<java.lang.Integer, java.lang.Integer> substractMaps(java.util.Map<java.lang.Integer, java.lang.Integer> from, java.util.Map<java.lang.Integer, java.lang.Integer> amount) { java.util.Map<java.lang.Integer, java.lang.Integer> result = new java.util.HashMap<>(from); for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> subs : amount.entrySet()) { result.compute(subs.getKey(), ( key, val) -> (val == null ? 0 : val) - (subs.getValue())); } return java.util.Collections.unmodifiableMap(result); }	private java.util.Map<java.lang.Integer, java.lang.Integer> subtractMaps(java.util.Map<java.lang.Integer, java.lang.Integer> from, java.util.Map<java.lang.Integer, java.lang.Integer> amount) { java.util.Map<java.lang.Integer, java.lang.Integer> result = new java.util.HashMap<>(from); for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> subs : amount.entrySet()) { result.compute(subs.getKey(), ( key, val) -> (val == null ? 0 : val) - (subs.getValue())); } return java.util.Collections.unmodifiableMap(result); }
public static java.util.Map<java.lang.Integer, java.lang.Integer> collectForHost(org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager manager, org.ovirt.engine.core.compat.Guid host) { java.util.Map<java.lang.Integer, java.lang.Integer> pageCount = new java.util.HashMap<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages resource : manager.pendingHostResources(host, org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages.class)) { pageCount.compute(resource.getPageSize(), ( hpsize, count) -> (count == null ? 0 : resource.getCount()) + (resource.getCount())); } return java.util.Collections.unmodifiableMap(pageCount); }	public static java.util.Map<java.lang.Integer, java.lang.Integer> collectForHost(org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager manager, org.ovirt.engine.core.compat.Guid host) { java.util.Map<java.lang.Integer, java.lang.Integer> pageCount = new java.util.HashMap<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages resource : manager.pendingHostResources(host, org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages.class)) { pageCount.compute(resource.getPageSize(), ( hpsize, count) -> (count == null ? 0 : count) + (resource.getCount())); } return java.util.Collections.unmodifiableMap(pageCount); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(getHost(), pageSize); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(getVm(), getHost(), pageSize); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if (!(org.ovirt.engine.core.common.utils.HugePageUtils.isBackedByHugepages(vm.getStaticData()))) { return new java.util.ArrayList(hosts); } java.util.Map<java.lang.Integer, java.lang.Integer> requiredPages = org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(vm.getStaticData()); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> newHosts = new java.util.ArrayList(hosts.size()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { java.util.Map<java.lang.Integer, java.lang.Integer> availablePages = substractMaps(prepareHugePageMap(host), org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages.collectForHost(getPendingResourceManager(), host.getId())); if (!(requiredPages.entrySet().stream().allMatch(( pg) -> (availablePages.getOrDefault(pg.getKey(), 0)) >= (pg.getValue())))) { org.ovirt.engine.core.bll.scheduling.policyunits.HugePagesFilterPolicyUnit.log.debug("Host {} does not have enough free hugepages for VM {}", host.getId(), vm.getId()); messages.addMessage(host.getId(), EngineMessage.VAR__DETAIL__NOT_ENOUGH_HUGE_PAGES.name()); } else { newHosts.add(host); } } return newHosts; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if (!(org.ovirt.engine.core.common.utils.HugePageUtils.isBackedByHugepages(vm.getStaticData()))) { return new java.util.ArrayList(hosts); } java.util.Map<java.lang.Integer, java.lang.Integer> requiredPages = org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(vm.getStaticData()); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> newHosts = new java.util.ArrayList(hosts.size()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { java.util.Map<java.lang.Integer, java.lang.Integer> availablePages = subtractMaps(prepareHugePageMap(host), org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages.collectForHost(getPendingResourceManager(), host.getId())); if (!(requiredPages.entrySet().stream().allMatch(( pg) -> (availablePages.getOrDefault(pg.getKey(), 0)) >= (pg.getValue())))) { org.ovirt.engine.core.bll.scheduling.policyunits.HugePagesFilterPolicyUnit.log.debug("Host {} does not have enough free hugepages for VM {}", host.getId(), vm.getId()); messages.addMessage(host.getId(), EngineMessage.VAR__DETAIL__NOT_ENOUGH_HUGE_PAGES.name()); } else { newHosts.add(host); } } return newHosts; }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass()) != (o.getClass()))) { return false; } org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages that = ((org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages) (o)); return ((pageSize) == (that.pageSize)) && (java.util.Objects.equals(getHost(), that.getHost())); }	@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass()) != (o.getClass()))) { return false; } org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages that = ((org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages) (o)); return (((pageSize) == (that.pageSize)) && (java.util.Objects.equals(getHost(), that.getHost()))) && (java.util.Objects.equals(getVm(), that.getVm())); }
private org.gwtbootstrap3.client.ui.AnchorListItem createSelectionDropDown(com.google.gwt.safehtml.shared.SafeHtml currentName) { org.ovirt.engine.ui.common.view.OvirtBreadCrumbsView.OvirtAnchorListItem dropDown = new org.ovirt.engine.ui.common.view.OvirtBreadCrumbsView.OvirtAnchorListItem(); org.gwtbootstrap3.client.ui.Button exchangeButton = new org.gwtbootstrap3.client.ui.Button(); exchangeButton.setIcon(IconType.EXCHANGE); exchangeButton.addStyleName(org.ovirt.engine.ui.common.view.OvirtBreadCrumbsView.QUICK_SWITCH); org.gwtbootstrap3.client.ui.Anchor anchor = dropDown.getAnchor(); anchor.setText(currentName.asString()); anchor.getElement().getStyle().setFontSize(28, Unit.PX); anchor.addClickHandler(( e) -> { if (popover.isVisible()) { popover.hide(); } else { popover.show(); } }); anchor.add(exchangeButton); createPopover(anchor); dropDown.add(anchor); return dropDown; }	private org.gwtbootstrap3.client.ui.AnchorListItem createSelectionDropDown(com.google.gwt.safehtml.shared.SafeHtml currentName) { org.ovirt.engine.ui.common.view.OvirtBreadCrumbsView.OvirtAnchorListItem dropDown = new org.ovirt.engine.ui.common.view.OvirtBreadCrumbsView.OvirtAnchorListItem(); org.gwtbootstrap3.client.ui.Button exchangeButton = new org.gwtbootstrap3.client.ui.Button(); exchangeButton.setIcon(IconType.EXCHANGE); exchangeButton.addStyleName(org.ovirt.engine.ui.common.view.OvirtBreadCrumbsView.QUICK_SWITCH); exchangeButton.getElement().getStyle().setMarginLeft(10, Unit.PX); exchangeButton.getElement().getStyle().setMarginTop((-5), Unit.PX); org.gwtbootstrap3.client.ui.Anchor anchor = dropDown.getAnchor(); anchor.setText(currentName.asString()); anchor.getElement().getStyle().setFontSize(28, Unit.PX); anchor.addClickHandler(( e) -> { if (popover.isVisible()) { popover.hide(); } else { popover.show(); } }); anchor.add(exchangeButton); createPopover(anchor); dropDown.add(anchor); return dropDown; }
public void setCurrentSelectedName(com.google.gwt.safehtml.shared.SafeHtml name) { currentSelectedItemWidget = createSelectionDropDown(name); }	public void setCurrentSelectedNameForItem(T item) { currentSelectedItemWidget = createSelectionDropDown(getName(item)); }
void setCurrentSelectedName(com.google.gwt.safehtml.shared.SafeHtml name);	void setCurrentSelectedNameForItem(T item);
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getName(T item) { java.lang.String result = ""; if (item instanceof org.ovirt.engine.core.common.businessentities.Nameable) { result = ((org.ovirt.engine.core.common.businessentities.Nameable) (item)).getName(); } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(result); }	public com.google.gwt.safehtml.shared.SafeHtml getName(T item) { java.lang.String result = ""; if (item instanceof org.ovirt.engine.core.common.businessentities.Nameable) { result = ((org.ovirt.engine.core.common.businessentities.Nameable) (item)).getName(); } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(result); }
private java.util.List<T> getItemsAsList(M searchableListModel) { return new java.util.ArrayList(searchableListModel.getItems()); }	private java.util.List<T> getItemsAsList(M searchableListModel) { java.util.Collection<T> items = searchableListModel.getItems(); return items != null ? new java.util.ArrayList(searchableListModel.getItems()) : java.util.Collections.EMPTY_LIST; }
public void previousEntity() { M searchableListModel = listModelProvider.getModel(); T entity = ((T) (searchableListModel.getSelectedItem())); java.util.List<T> itemsAsList = getItemsAsList(searchableListModel); int currentIndex = itemsAsList.indexOf(entity); int newIndex = currentIndex - 1; if (newIndex < 0) { if ((searchableListModel.getSearchPreviousPageCommand().getIsExecutionAllowed()) && (searchableListModel.getSearchPreviousPageCommand().getIsAvailable())) { searchableListModel.executeCommand(searchableListModel.getSearchPreviousPageCommand()); updateToLastRow = true; } } else { selectionModel.setSelected(itemsAsList.get(newIndex), true); } }	public void previousEntity() { M searchableListModel = getModel(); T entity = ((T) (searchableListModel.getSelectedItem())); java.util.List<T> itemsAsList = getItemsAsList(searchableListModel); int currentIndex = itemsAsList.indexOf(entity); int newIndex = currentIndex - 1; if (newIndex < 0) { if ((searchableListModel.getSearchPreviousPageCommand().getIsExecutionAllowed()) && (searchableListModel.getSearchPreviousPageCommand().getIsAvailable())) { searchableListModel.executeCommand(searchableListModel.getSearchPreviousPageCommand()); updateToLastRow = true; } } else { getSelectionModel().setSelected(itemsAsList.get(newIndex), true); } }
public void nextEntity() { M searchableListModel = listModelProvider.getModel(); T entity = ((T) (searchableListModel.getSelectedItem())); java.util.List<T> itemsAsList = getItemsAsList(searchableListModel); int currentIndex = itemsAsList.indexOf(entity); int newIndex = currentIndex + 1; if (newIndex >= (itemsAsList.size())) { if ((searchableListModel.getSearchNextPageCommand().getIsExecutionAllowed()) && (searchableListModel.getSearchNextPageCommand().getIsAvailable())) { searchableListModel.executeCommand(searchableListModel.getSearchNextPageCommand()); updateToFirstRow = true; } } else { selectionModel.setSelected(itemsAsList.get(newIndex), true); } }	public void nextEntity() { M searchableListModel = getModel(); T entity = ((T) (searchableListModel.getSelectedItem())); java.util.List<T> itemsAsList = getItemsAsList(searchableListModel); int currentIndex = itemsAsList.indexOf(entity); int newIndex = currentIndex + 1; if (newIndex >= (itemsAsList.size())) { if ((searchableListModel.getSearchNextPageCommand().getIsExecutionAllowed()) && (searchableListModel.getSearchNextPageCommand().getIsAvailable())) { searchableListModel.executeCommand(searchableListModel.getSearchNextPageCommand()); updateToFirstRow = true; } } else { getSelectionModel().setSelected(itemsAsList.get(newIndex), true); } }
@java.lang.Override public void modelSelected(T model) { org.ovirt.engine.ui.common.presenter.OvirtBreadCrumbsPresenterWidget.getView().hidePopover(); selectionModel.setSelected(model, true); }	@java.lang.Override public void modelSelected(T model) { org.ovirt.engine.ui.common.presenter.OvirtBreadCrumbsPresenterWidget.getView().hidePopover(); getSelectionModel().setSelected(model, true); }
private void updateSelectedRows() { if (updateToFirstRow) { updateToFirstRow = false; java.util.Collection<T> items = listModelProvider.getModel().getItems(); if (items instanceof java.util.List) { final java.util.List<T> itemsAsList = ((java.util.List<T>) (items)); if (!(itemsAsList.isEmpty())) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { org.ovirt.engine.ui.common.presenter.T firstItem = itemsAsList.get(0); selectionModel.setSelected(firstItem, true); listModelProvider.getModel().setSelectedItem(firstItem); getView().setCurrentSelectedName(getView().getName(firstItem)); }); } } } else if (updateToLastRow) { updateToLastRow = false; java.util.Collection<T> items = listModelProvider.getModel().getItems(); if (items instanceof java.util.List) { final java.util.List<T> itemsAsList = ((java.util.List<T>) (items)); if (!(itemsAsList.isEmpty())) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { org.ovirt.engine.ui.common.presenter.T lastItem = itemsAsList.get(((itemsAsList.size()) - 1)); selectionModel.setSelected(lastItem, true); listModelProvider.getModel().setSelectedItem(lastItem); getView().setCurrentSelectedName(getView().getName(lastItem)); }); } } } if (((listModelProvider.getModel().getSelectedItem()) != null) && (showSelectedName)) { org.ovirt.engine.ui.common.presenter.OvirtBreadCrumbsPresenterWidget.getView().setCurrentSelectedName(org.ovirt.engine.ui.common.presenter.OvirtBreadCrumbsPresenterWidget.getView().getName(((T) (listModelProvider.getModel().getSelectedItem())))); } org.ovirt.engine.ui.common.presenter.OvirtBreadCrumbsPresenterWidget.getView().buildCrumbs(listModelProvider.getModel().getTitle(), listModelProvider.getModel().getApplicationPlace()); }	private void updateSelectedRows() { if (updateToFirstRow) { updateToFirstRow = false; final java.util.List<T> itemsAsList = getItemsAsList(getModel()); if (!(itemsAsList.isEmpty())) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { org.ovirt.engine.ui.common.presenter.T firstItem = itemsAsList.get(0); getSelectionModel().setSelected(firstItem, true); getModel().setSelectedItem(firstItem); getView().setCurrentSelectedNameForItem(firstItem); }); } } else if (updateToLastRow) { updateToLastRow = false; final java.util.List<T> itemsAsList = getItemsAsList(getModel()); if (!(itemsAsList.isEmpty())) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { org.ovirt.engine.ui.common.presenter.T lastItem = itemsAsList.get(((itemsAsList.size()) - 1)); getSelectionModel().setSelected(lastItem, true); getModel().setSelectedItem(lastItem); getView().setCurrentSelectedNameForItem(lastItem); }); } } if (((getModel().getSelectedItem()) != null) && (showSelectedName)) { org.ovirt.engine.ui.common.presenter.OvirtBreadCrumbsPresenterWidget.getView().setCurrentSelectedNameForItem(((T) (getModel().getSelectedItem()))); } org.ovirt.engine.ui.common.presenter.OvirtBreadCrumbsPresenterWidget.getView().buildCrumbs(getModel().getTitle(), getModel().getApplicationPlace()); }
@java.lang.Override protected void onBind() { super.onBind(); M listModel = listModelProvider.getModel(); listModel.getSelectedItemChangedEvent().addListener(( ev, sender, args) -> updateSelectedRows()); listModel.getSelectedItemsChangedEvent().addListener(( ev, sender, args) -> updateSelectedRows()); }	@java.lang.Override protected void onBind() { super.onBind(); M listModel = getModel(); listModel.getSelectedItemChangedEvent().addListener(( ev, sender, args) -> updateSelectedRows()); listModel.getSelectedItemsChangedEvent().addListener(( ev, sender, args) -> updateSelectedRows()); }
private void createPopover(org.gwtbootstrap3.client.ui.Anchor anchor) { popover = new org.ovirt.engine.ui.common.widget.tooltip.OvirtPopover(anchor); popover.setTrigger(Trigger.MANUAL); popover.setPlacement(Placement.BOTTOM); popover.setContainer(anchor); if ((searchBox) == null) { searchBox = createSearchBox(); searchBox.addModelSelectedCallback(selectionCallback); } popover.addContent(searchBox, "searchPanel"); }	private void createPopover(org.gwtbootstrap3.client.ui.Anchor anchor) { if ((popover) != null) { popover.destroy(); } popover = new org.ovirt.engine.ui.common.widget.tooltip.OvirtPopover(anchor); popover.setTrigger(Trigger.MANUAL); popover.setPlacement(Placement.BOTTOM); popover.setContainer(anchor); if ((searchBox) == null) { searchBox = createSearchBox(); searchBox.addModelSelectedCallback(selectionCallback); } popover.addContent(searchBox, org.ovirt.engine.ui.common.view.OvirtBreadCrumbsView.SEARCH_PANEL_CONTENT_ID); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel)) { if (content != null) { actionPanel.setSearchPanel(content); actionPanel.setVisible(true); } } else if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetBreadCrumbs)) { if (content != null) { breadCrumbsColumn.clear(); breadCrumbsColumn.add(content); } } else { super.setInSlot(slot, content); } }	@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel)) { if (content != null) { actionPanel.setSearchPanel(content); actionPanel.setVisible(true); } else { actionPanel.setVisible(false); } } else if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetBreadCrumbs)) { breadCrumbsColumn.clear(); if (content != null) { breadCrumbsColumn.add(content); } } else { super.setInSlot(slot, content); } }
@java.lang.Override public void onLoad() { super.onLoad(); keyHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(( event) -> { com.google.gwt.dom.client.NativeEvent nativeEvent = event.getNativeEvent(); if ((breadCrumbs) != null) { if ((event.getTypeInt()) == Event.ONKEYDOWN) { if (((nativeEvent.getCharCode()) == 's') || ((nativeEvent.getKeyCode()) == KeyCodes.KEY_S)) { if ((nativeEvent.getCtrlKey()) && (nativeEvent.getAltKey())) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.getView().toggleSearchWidget(); event.cancel(); } } else if ((!(this.breadCrumbs.getView().isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_DOWN)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.nextEntity(); event.cancel(); } else if ((!(this.breadCrumbs.getView().isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_UP)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.previousEntity(); event.cancel(); } } } }); if ((breadCrumbs) != null) { if ((breadCrumbsContainer.getWidgetCount()) == 0) { breadCrumbsContainer.add(breadCrumbs); } } }	@java.lang.Override public void onLoad() { super.onLoad(); keyHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(( event) -> { com.google.gwt.dom.client.NativeEvent nativeEvent = event.getNativeEvent(); if ((breadCrumbs) != null) { if ((event.getTypeInt()) == Event.ONKEYDOWN) { if (((nativeEvent.getCharCode()) == 's') || ((nativeEvent.getKeyCode()) == KeyCodes.KEY_S)) { if ((nativeEvent.getCtrlKey()) && (nativeEvent.getAltKey())) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.toggleSearch(); event.cancel(); } } else if ((!(this.breadCrumbs.isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_DOWN)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.nextEntity(); event.cancel(); } else if ((!(this.breadCrumbs.isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_UP)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.previousEntity(); event.cancel(); } } } }); if ((breadCrumbs) != null) { if ((breadCrumbsContainer.getWidgetCount()) == 0) { breadCrumbsContainer.add(breadCrumbs); } } }
public void buildCrumbs(java.lang.String modelTitle, java.lang.String modelHref) { breadCrumbs.clear(); breadCrumbs.add(new org.gwtbootstrap3.client.ui.AnchorListItem("")); java.lang.String primaryLabel = menuLayout.getPrimaryGroupTitle(modelTitle); if (primaryLabel != null) { breadCrumbs.add(new org.gwtbootstrap3.client.ui.ListItem(primaryLabel)); } org.gwtbootstrap3.client.ui.AnchorListItem mainModelAnchor = new org.gwtbootstrap3.client.ui.AnchorListItem(modelTitle); mainModelAnchor.setHref(("#" + modelHref)); breadCrumbs.add(mainModelAnchor); if ((currentSelectedItemWidget) != null) { breadCrumbs.add(currentSelectedItemWidget); } }	@java.lang.Override public void buildCrumbs(java.lang.String modelTitle, java.lang.String modelHref) { breadCrumbs.clear(); breadCrumbs.add(new org.gwtbootstrap3.client.ui.AnchorListItem()); java.lang.String primaryLabel = menuLayout.getPrimaryGroupTitle(modelTitle); if (primaryLabel != null) { breadCrumbs.add(new org.gwtbootstrap3.client.ui.ListItem(primaryLabel)); } org.gwtbootstrap3.client.ui.AnchorListItem mainModelAnchor = new org.gwtbootstrap3.client.ui.AnchorListItem(modelTitle); mainModelAnchor.setHref(("#" + modelHref)); breadCrumbs.add(mainModelAnchor); if ((currentSelectedItemWidget) != null) { breadCrumbs.add(currentSelectedItemWidget); } }
public boolean hasActionPanelPresenterWidget() { return (getActionPanelPresenterWidget()) != null; }	public boolean hasActionPanelPresenterWidget() { return (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getActionPanelPresenterWidget()) != null; }
@java.lang.Override protected void onReveal() { super.onReveal(); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.setSubTabPanelVisible(false); getBreadCrumbs().clearActiveSubTab(); getTable().resetScrollPosition(); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setBreadCrumbs(getBreadCrumbs()); }	@java.lang.Override protected void onReveal() { super.onReveal(); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.setSubTabPanelVisible(false); getTable().resetScrollPosition(); setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel, searchPanelPresenterWidget); setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetBreadCrumbs, breadCrumbsPresenterWidget); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel)) { if (content != null) { if ((actionPanel) == null) { searchPanel = content; } else { actionPanel.setSearchPanel(((com.gwtplatform.mvp.client.PresenterWidget<?>) (content))); } } } else if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetActionPanel)) { if (content != null) { actionSearchPanel.add(content); this.actionPanel = ((org.ovirt.engine.ui.common.presenter.ActionPanelPresenterWidget<T, M>) (content)); if ((searchPanel) != null) { actionPanel.setSearchPanel(((com.gwtplatform.mvp.client.PresenterWidget<?>) (searchPanel))); } addResultPanel(actionPanel); } } else { super.setInSlot(slot, content); } }	@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel)) { if (content != null) { if ((actionPanel) == null) { searchPanel = content; } else { actionPanel.setSearchPanel(((com.gwtplatform.mvp.client.PresenterWidget<?>) (content))); } } else { searchPanel = null; if ((actionPanel) != null) { actionPanel.setSearchPanel(null); } } } else if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetActionPanel)) { if (content != null) { actionSearchPanel.add(content); this.actionPanel = ((org.ovirt.engine.ui.common.presenter.ActionPanelPresenterWidget<T, M>) (content)); if ((searchPanel) != null) { actionPanel.setSearchPanel(((com.gwtplatform.mvp.client.PresenterWidget<?>) (searchPanel))); } addResultPanel(actionPanel); } else { actionSearchPanel.clear(); this.actionPanel = null; resultRow.clear(); resultRow = null; } } else if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetBreadCrumbs)) { breadCrumbsColumn.clear(); if (content != null) { breadCrumbsColumn.add(content); } } else { super.setInSlot(slot, content); } }
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { }	private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { if ((getActionPanelPresenterWidget()) != null) { for (org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> buttonDef : pluginActionButtonList) { getActionPanelPresenterWidget().addActionButton(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition) (buttonDef))); } } }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainContentPresenter.TYPE_SetMainTabPanelContent)) { actionPanelContainer.add(content); } else if (slot == (org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel)) { if (content != null) { actionPanelContainer.add(content); } } else { super.setInSlot(slot, content); } }	@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainContentPresenter.TYPE_SetMainTabPanelContent)) { actionPanelContainer.add(content); } else if (slot == (org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel)) { if (content != null) { actionPanelContainer.add(content); } else { actionPanelContainer.clear(); } } else { super.setInSlot(slot, content); } }
@java.lang.Override protected void onBind() { super.onBind(); org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel<?> tableSelectionModel = ((getTable()) != null) ? getTable().getSelectionModel() : null; if (tableSelectionModel != null) { registerHandler(tableSelectionModel.addSelectionChangeHandler(( event) -> { updateDetailModelSelection(); })); } initializeHandlers(); getSelectedMainItems().registerListener(this); itemChanged(getSelectedMainItems().getSelectedItem()); setInSlot(org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel, actionPanelPresenterWidget); }	@java.lang.Override protected void onBind() { super.onBind(); org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel<?> tableSelectionModel = ((getTable()) != null) ? getTable().getSelectionModel() : null; if (tableSelectionModel != null) { registerHandler(tableSelectionModel.addSelectionChangeHandler(( event) -> { updateDetailModelSelection(); })); } initializeHandlers(); getSelectedMainItems().registerListener(this); itemChanged(getSelectedMainItems().getSelectedItem()); setInSlot(org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel, org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.getActionPanelPresenterWidget()); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainContentPresenter.TYPE_SetMainTabPanelContent)) { container.insert(content, 0); } else if (slot == (org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel)) { if (content != null) { container.insert(content, 0); } } else { super.setInSlot(slot, content); } }	@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainContentPresenter.TYPE_SetMainTabPanelContent)) { container.insert(content, 0); } else if (slot == (org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel)) { if (content != null) { container.insert(content, 0); this.actionPanel = content; } else if ((this.actionPanel) != null) { container.remove(this.actionPanel); } } else { super.setInSlot(slot, content); } }
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler(( event) -> { org.ovirt.engine.ui.webadmin.section.main.presenter.modelProvider.setSelectedItems(getSelectedItems()); fireTableSelectionChangeEvent(); if (!(isVisible())) { handlePlaceTransition(); } })); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getEventBus().addHandler(org.ovirt.engine.ui.uicommonweb.models.ApplySearchStringEvent.getType(), ( event) -> { applySearchString(event.getSearchString()); })); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setDetailPlaceTransitionHandler(this); java.lang.String searchString = searchStringCollector.getSearchStringPrefix(modelProvider.getModel().getSearchString()); if (searchString != null) { applySearchString(searchString); } if (hasSearchPanelPresenterWidget()) { setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel, searchPanelPresenterWidget); } if (hasActionPanelPresenterWidget()) { setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetActionPanel, actionPanelPresenterWidget); } }	@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler(( event) -> { org.ovirt.engine.ui.webadmin.section.main.presenter.modelProvider.setSelectedItems(getSelectedItems()); fireTableSelectionChangeEvent(); if (isVisible()) { handlePlaceTransition(false); } })); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getEventBus().addHandler(org.ovirt.engine.ui.uicommonweb.models.ApplySearchStringEvent.getType(), ( event) -> { applySearchString(event.getSearchString()); })); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setDetailPlaceTransitionHandler(this); java.lang.String searchString = searchStringCollector.getSearchStringPrefix(modelProvider.getModel().getSearchString()); if (searchString != null) { applySearchString(searchString); } if (hasSearchPanelPresenterWidget()) { setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel, searchPanelPresenterWidget); } if (hasActionPanelPresenterWidget()) { setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetActionPanel, org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getActionPanelPresenterWidget()); } }
@java.lang.Override protected void initializeButtons() { org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.addActionButton(new org.ovirt.engine.ui.common.widget.action.UiCommandButtonDefinition<org.ovirt.engine.core.common.businessentities.Permission>(org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.getSharedEventBus(), org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.constants.addPermission()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getModel().getAddCommand(); } }); org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.addActionButton(new org.ovirt.engine.ui.common.widget.action.UiCommandButtonDefinition<org.ovirt.engine.core.common.businessentities.Permission>(org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.getSharedEventBus(), org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.constants.removePermission()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getModel().getRemoveCommand(); } }); }	@java.lang.Override protected void initializeButtons() { org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenterWidget.addActionButton(new org.ovirt.engine.ui.common.widget.action.UiCommandButtonDefinition<org.ovirt.engine.core.common.businessentities.Permission>(org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenterWidget.getSharedEventBus(), org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenterWidget.constants.addPermission()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getModel().getAddCommand(); } }); org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenterWidget.addActionButton(new org.ovirt.engine.ui.common.widget.action.UiCommandButtonDefinition<org.ovirt.engine.core.common.businessentities.Permission>(org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenterWidget.getSharedEventBus(), org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenterWidget.constants.removePermission()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getModel().getRemoveCommand(); } }); }
@org.junit.Test public void testUpdate() { existingDomain.setStorageName("UpdatedName"); existingDomain.setWipeAfterDelete(true); existingDomain.setWarningLowSpaceIndicator(4); existingDomain.setCriticalSpaceActionBlocker(8); existingDomain.setFirstMetadataDevice(FixturesTool.LUN_ID1); existingDomain.setVgMetadataDevice(FixturesTool.LUN_ID1); existingDomain.setUseForBackup(true); dao.update(existingDomain); org.ovirt.engine.core.common.businessentities.StorageDomainStatic after = dao.get(existingDomain.getId()); assertEquals(after, existingDomain); }	@org.junit.Test public void testUpdate() { existingDomain.setStorageName("UpdatedName"); existingDomain.setWipeAfterDelete(true); existingDomain.setWarningLowSpaceIndicator(4); existingDomain.setCriticalSpaceActionBlocker(8); existingDomain.setFirstMetadataDevice(FixturesTool.LUN_ID1); existingDomain.setVgMetadataDevice(FixturesTool.LUN_ID1); existingDomain.setBackup(true); dao.update(existingDomain); org.ovirt.engine.core.common.businessentities.StorageDomainStatic after = dao.get(existingDomain.getId()); assertEquals(after, existingDomain); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getStorageDomainStaticDao(); dynamicDao = dbFacade.getStorageDomainDynamicDao(); diskImageDao = dbFacade.getDiskImageDao(); imageDao = dbFacade.getImageDao(); existingDomain = dao.get(new org.ovirt.engine.core.compat.Guid("72e3a666-89e1-4005-a7ca-f7548004a9ab")); newStaticDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); newStaticDomain.setStorageName("NewStorageDomain"); newStaticDomain.setStorage("fDMzhE-wx3s-zo3q-Qcxd-T0li-yoYU-QvVePl"); newStaticDomain.setStorageFormat(StorageFormatType.V1); newStaticDomain.setWipeAfterDelete(true); newStaticDomain.setWarningLowSpaceIndicator(3); newStaticDomain.setCriticalSpaceActionBlocker(9); newStaticDomain.setFirstMetadataDevice(FixturesTool.LUN_ID2); newStaticDomain.setVgMetadataDevice(FixturesTool.LUN_ID2); newStaticDomain.setUseForBackup(FixturesTool.USE_FOR_BACKUP_FLAG); }	@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getStorageDomainStaticDao(); dynamicDao = dbFacade.getStorageDomainDynamicDao(); diskImageDao = dbFacade.getDiskImageDao(); imageDao = dbFacade.getImageDao(); existingDomain = dao.get(new org.ovirt.engine.core.compat.Guid("72e3a666-89e1-4005-a7ca-f7548004a9ab")); newStaticDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); newStaticDomain.setStorageName("NewStorageDomain"); newStaticDomain.setStorage("fDMzhE-wx3s-zo3q-Qcxd-T0li-yoYU-QvVePl"); newStaticDomain.setStorageFormat(StorageFormatType.V1); newStaticDomain.setWipeAfterDelete(true); newStaticDomain.setDiscardAfterDelete(false); newStaticDomain.setWarningLowSpaceIndicator(3); newStaticDomain.setCriticalSpaceActionBlocker(9); newStaticDomain.setFirstMetadataDevice(FixturesTool.LUN_ID2); newStaticDomain.setVgMetadataDevice(FixturesTool.LUN_ID2); newStaticDomain.setBackup(false); }
public void setUseForBackup(java.lang.Boolean useForBackup) { getStorageStaticData().setUseForBackup(useForBackup); }	public void setBackup(boolean backup) { getStorageStaticData().setBackup(backup); }
public java.lang.Boolean getUseForBackup() { return getStorageStaticData().getUseForBackup(); }	public boolean isBackup() { return getStorageStaticData().isBackup(); }
private static org.ovirt.engine.core.common.businessentities.StorageDomainStatic cloneStorageDomainStatic(org.ovirt.engine.core.common.businessentities.StorageDomainStatic instance) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic obj = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); obj.setConnection(instance.getConnection()); obj.setId(instance.getId()); obj.setStorage(instance.getStorage()); obj.setStorageDomainType(instance.getStorageDomainType()); obj.setStorageType(instance.getStorageType()); obj.setStorageName(instance.getStorageName()); obj.setFirstMetadataDevice(instance.getFirstMetadataDevice()); obj.setVgMetadataDevice(instance.getVgMetadataDevice()); obj.setDescription(instance.getDescription()); obj.setComment(instance.getComment()); obj.setStorageFormat(instance.getStorageFormat()); obj.setWipeAfterDelete(instance.getWipeAfterDelete()); obj.setDiscardAfterDelete(instance.isDiscardAfterDelete()); obj.setWarningLowSpaceIndicator(instance.getWarningLowSpaceIndicator()); obj.setCriticalSpaceActionBlocker(instance.getCriticalSpaceActionBlocker()); obj.setUseForBackup(instance.getUseForBackup()); return obj; }	private static org.ovirt.engine.core.common.businessentities.StorageDomainStatic cloneStorageDomainStatic(org.ovirt.engine.core.common.businessentities.StorageDomainStatic instance) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic obj = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); obj.setConnection(instance.getConnection()); obj.setId(instance.getId()); obj.setStorage(instance.getStorage()); obj.setStorageDomainType(instance.getStorageDomainType()); obj.setStorageType(instance.getStorageType()); obj.setStorageName(instance.getStorageName()); obj.setFirstMetadataDevice(instance.getFirstMetadataDevice()); obj.setVgMetadataDevice(instance.getVgMetadataDevice()); obj.setDescription(instance.getDescription()); obj.setComment(instance.getComment()); obj.setStorageFormat(instance.getStorageFormat()); obj.setWipeAfterDelete(instance.getWipeAfterDelete()); obj.setDiscardAfterDelete(instance.getDiscardAfterDelete()); obj.setWarningLowSpaceIndicator(instance.getWarningLowSpaceIndicator()); obj.setCriticalSpaceActionBlocker(instance.getCriticalSpaceActionBlocker()); obj.setBackup(instance.isBackup()); return obj; }
private void assertGetResult(org.ovirt.engine.core.common.businessentities.StorageDomain result) { assertNotNull(result); assertEquals(existingDomain, result); assertEquals("Wrong committed disk size", 8, result.getCommittedDiskSize()); assertEquals("Wrong actual disk size", 4, result.getActualImagesSize()); assertEquals("Wrong first metadata device", FixturesTool.LUN_ID_OF_DOMAIN_METADATA, result.getFirstMetadataDevice()); assertEquals("Wrong vg metadata device", FixturesTool.LUN_ID_OF_DOMAIN_VG_METADATA, result.getVgMetadataDevice()); assertEquals("Wrong shared status", StorageDomainSharedStatus.Active, result.getStorageDomainSharedStatus()); assertEquals("Wrong backup flag status", FixturesTool.USE_FOR_BACKUP_FLAG, result.getUseForBackup()); }	private void assertGetResult(org.ovirt.engine.core.common.businessentities.StorageDomain result) { assertNotNull(result); assertEquals(existingDomain, result); assertEquals("Wrong committed disk size", 8, result.getCommittedDiskSize()); assertEquals("Wrong actual disk size", 4, result.getActualImagesSize()); assertEquals("Wrong first metadata device", FixturesTool.LUN_ID_OF_DOMAIN_METADATA, result.getFirstMetadataDevice()); assertEquals("Wrong vg metadata device", FixturesTool.LUN_ID_OF_DOMAIN_VG_METADATA, result.getVgMetadataDevice()); assertEquals("Wrong shared status", StorageDomainSharedStatus.Active, result.getStorageDomainSharedStatus()); assertEquals("Wrong backup flag status", false, result.isBackup()); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain) { return getCustomMapSqlParameterSource().addValue("id", domain.getId()).addValue("storage", domain.getStorage()).addValue("storage_name", domain.getStorageName()).addValue("storage_description", domain.getDescription()).addValue("storage_comment", domain.getComment()).addValue("storage_type", domain.getStorageType()).addValue("storage_domain_type", domain.getStorageDomainType()).addValue("storage_domain_format_type", domain.getStorageFormat()).addValue("last_time_used_as_master", domain.getLastTimeUsedAsMaster()).addValue("wipe_after_delete", domain.getWipeAfterDelete()).addValue("discard_after_delete", domain.isDiscardAfterDelete()).addValue("first_metadata_device", domain.getFirstMetadataDevice()).addValue("vg_metadata_device", domain.getVgMetadataDevice()).addValue("warning_low_space_indicator", domain.getWarningLowSpaceIndicator()).addValue("critical_space_action_blocker", domain.getCriticalSpaceActionBlocker()).addValue("use_for_backup", domain.getUseForBackup()); }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain) { return getCustomMapSqlParameterSource().addValue("id", domain.getId()).addValue("storage", domain.getStorage()).addValue("storage_name", domain.getStorageName()).addValue("storage_description", domain.getDescription()).addValue("storage_comment", domain.getComment()).addValue("storage_type", domain.getStorageType()).addValue("storage_domain_type", domain.getStorageDomainType()).addValue("storage_domain_format_type", domain.getStorageFormat()).addValue("last_time_used_as_master", domain.getLastTimeUsedAsMaster()).addValue("wipe_after_delete", domain.getWipeAfterDelete()).addValue("discard_after_delete", domain.getDiscardAfterDelete()).addValue("first_metadata_device", domain.getFirstMetadataDevice()).addValue("vg_metadata_device", domain.getVgMetadataDevice()).addValue("warning_low_space_indicator", domain.getWarningLowSpaceIndicator()).addValue("critical_space_action_blocker", domain.getCriticalSpaceActionBlocker()).addValue("backup", domain.isBackup()); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, autoRecoverable, connection, name, storage, storageFormat, storagePoolType, storageType, description, sanState, wipeAfterDelete, discardAfterDelete, firstMetadataDevice, vgMetadataDevice, warningLowSpaceIndicator, criticalSpaceActionBlocker, useForBackup); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, autoRecoverable, connection, name, storage, storageFormat, storagePoolType, storageType, description, sanState, wipeAfterDelete, discardAfterDelete, firstMetadataDevice, vgMetadataDevice, warningLowSpaceIndicator, criticalSpaceActionBlocker, backup); }
public void setUseForBackup(java.lang.Boolean useForBackup) { this.useForBackup = useForBackup; }	public void setBackup(boolean backup) { this.backup = backup; }
public java.lang.Boolean getUseForBackup() { return useForBackup; }	public boolean isBackup() { return backup; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.StorageDomainStatic)) { return false; } org.ovirt.engine.core.common.businessentities.StorageDomainStatic other = ((org.ovirt.engine.core.common.businessentities.StorageDomainStatic) (obj)); return ((((((((((((((((java.util.Objects.equals(id, other.id)) && ((autoRecoverable) == (other.autoRecoverable))) && (java.util.Objects.equals(connection, other.connection))) && (java.util.Objects.equals(name, other.name))) && (java.util.Objects.equals(storage, other.storage))) && ((storageFormat) == (other.storageFormat))) && ((storagePoolType) == (other.storagePoolType))) && ((storageType) == (other.storageType))) && ((sanState) == (other.sanState))) && (java.util.Objects.equals(wipeAfterDelete, other.wipeAfterDelete))) && ((discardAfterDelete) == (other.discardAfterDelete))) && (java.util.Objects.equals(firstMetadataDevice, other.firstMetadataDevice))) && (java.util.Objects.equals(vgMetadataDevice, other.vgMetadataDevice))) && (java.util.Objects.equals(description, other.description))) && (java.util.Objects.equals(warningLowSpaceIndicator, other.warningLowSpaceIndicator))) && (java.util.Objects.equals(criticalSpaceActionBlocker, other.criticalSpaceActionBlocker))) && (java.util.Objects.equals(useForBackup, other.useForBackup)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.StorageDomainStatic)) { return false; } org.ovirt.engine.core.common.businessentities.StorageDomainStatic other = ((org.ovirt.engine.core.common.businessentities.StorageDomainStatic) (obj)); return ((((((((((((((((java.util.Objects.equals(id, other.id)) && ((autoRecoverable) == (other.autoRecoverable))) && (java.util.Objects.equals(connection, other.connection))) && (java.util.Objects.equals(name, other.name))) && (java.util.Objects.equals(storage, other.storage))) && ((storageFormat) == (other.storageFormat))) && ((storagePoolType) == (other.storagePoolType))) && ((storageType) == (other.storageType))) && ((sanState) == (other.sanState))) && (java.util.Objects.equals(wipeAfterDelete, other.wipeAfterDelete))) && (java.util.Objects.equals(discardAfterDelete, other.discardAfterDelete))) && (java.util.Objects.equals(firstMetadataDevice, other.firstMetadataDevice))) && (java.util.Objects.equals(vgMetadataDevice, other.vgMetadataDevice))) && (java.util.Objects.equals(description, other.description))) && (java.util.Objects.equals(warningLowSpaceIndicator, other.warningLowSpaceIndicator))) && (java.util.Objects.equals(criticalSpaceActionBlocker, other.criticalSpaceActionBlocker))) && (java.util.Objects.equals(backup, other.backup)); }
private boolean isFeatureSupportedAsAdditionalFeature(org.ovirt.engine.core.compat.Guid clusterId, java.lang.String featureName) { java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> addtionalFeaturesSupported = clusterFeatureDao.getSupportedFeaturesByClusterId(clusterId); for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature supportedFeature : addtionalFeaturesSupported) { if (supportedFeature.getFeature().getName().equalsIgnoreCase(featureName)) { return supportedFeature.isEnabled(); } } return false; }	private boolean isFeatureSupportedAsAdditionalFeature(org.ovirt.engine.core.compat.Guid clusterId, java.lang.String featureName) { return clusterFeatureDao.getSupportedFeaturesByClusterId(clusterId).stream().filter(SupportedAdditionalClusterFeature::isEnabled).filter(( f) -> f.getFeature().getName().equals(featureName)).findAny().isPresent(); }
@java.lang.Override public org.ovirt.engine.api.rsdl.ServiceTreeNode next() { currentPathSegment = pathIterator.next(); if (isID(currentPathSegment, node)) { node = node.getSubService("{id}"); } else if (node.containsSubService(currentPathSegment)) { node = node.getSubService(currentPathSegment); } else { throw new java.lang.IllegalArgumentException((("segment '" + (currentPathSegment)) + "' of path does not exist")); } return node; }	@java.lang.Override public org.ovirt.engine.api.rsdl.ServiceTreeNode next() { currentPathSegment = pathIterator.next(); if (isID(currentPathSegment, node)) { node = node.getSubService("{id}"); } else if (node.containsSubService(currentPathSegment)) { node = node.getSubService(currentPathSegment); } else { throw new java.lang.IllegalArgumentException((("Segment '" + (currentPathSegment)) + "' of path does not exist")); } return node; }
public org.ovirt.engine.api.restapi.resource.BaseBackendResource locateResource(java.lang.String href) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.NoSuchMethodException, java.lang.SecurityException, java.lang.reflect.InvocationTargetException { href = removePrefix(href); org.ovirt.engine.api.rsdl.ServiceTreeCrawler crawler = new org.ovirt.engine.api.rsdl.ServiceTreeCrawler(java.util.Arrays.asList(href.split("/"))); org.ovirt.engine.api.restapi.resource.BaseBackendResource resource = org.ovirt.engine.api.restapi.resource.BackendApiResource.getInstance(); org.ovirt.engine.api.rsdl.ServiceTreeNode node = null; while (crawler.hasNext()) { node = crawler.next(); if (node.isCollection()) { java.lang.reflect.Method method = resource.getClass().getMethod(node.getGetter()); resource = ((org.ovirt.engine.api.restapi.resource.BaseBackendResource) (method.invoke(resource))); } else { java.lang.reflect.Method method = resource.getClass().getMethod(node.getGetter(), java.lang.String.class); resource = ((org.ovirt.engine.api.restapi.resource.BaseBackendResource) (method.invoke(resource, crawler.getCurrentPathSegment()))); } } return resource; }	public org.ovirt.engine.api.restapi.resource.BaseBackendResource locateResource(java.lang.String href) throws java.lang.Exception { href = removePrefix(href); org.ovirt.engine.api.rsdl.ServiceTreeCrawler crawler = new org.ovirt.engine.api.rsdl.ServiceTreeCrawler(java.util.Arrays.asList(href.split("/"))); org.ovirt.engine.api.restapi.resource.BaseBackendResource resource = org.ovirt.engine.api.restapi.resource.BackendApiResource.getInstance(); org.ovirt.engine.api.rsdl.ServiceTreeNode node = null; while (crawler.hasNext()) { node = crawler.next(); if (node.isCollection()) { java.lang.reflect.Method method = resource.getClass().getMethod(node.getGetter()); resource = ((org.ovirt.engine.api.restapi.resource.BaseBackendResource) (method.invoke(resource))); } else { java.lang.reflect.Method method = resource.getClass().getMethod(node.getGetter(), java.lang.String.class); resource = ((org.ovirt.engine.api.restapi.resource.BaseBackendResource) (method.invoke(resource, crawler.getCurrentPathSegment()))); } } return resource; }
org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlListReturn getVmLeaseInfo(java.lang.String leaseUUID, java.lang.String sdUUID);	org.ovirt.engine.core.vdsbroker.vdsbroker.LeaseInfoReturn getVmLeaseInfo(java.lang.String leaseUUID, java.lang.String sdUUID);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlListReturn getVmLeaseInfo(java.lang.String leaseUUID, java.lang.String sdUUID) { java.util.HashMap<java.lang.String, java.lang.Object> leaseDict = new java.util.HashMap<>(); leaseDict.put("lease_id", leaseUUID); leaseDict.put("sd_id", sdUUID); org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.info").withParameter("lease", leaseDict).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlListReturn(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.LeaseInfoReturn getVmLeaseInfo(java.lang.String leaseUUID, java.lang.String sdUUID) { java.util.HashMap<java.lang.String, java.lang.Object> leaseDict = new java.util.HashMap<>(); leaseDict.put("lease_id", leaseUUID); leaseDict.put("sd_id", sdUUID); org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.info").withParameter("lease", leaseDict).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.LeaseInfoReturn(response); }
@java.lang.Override public java.lang.Object getReturnValue() { return domainXmlListReturn; }	@java.lang.Override protected java.lang.Object getReturnValueFromBroker() { return result; }
@java.lang.Override protected org.ovirt.engine.core.vdsbroker.vdsbroker.Status getReturnStatus() { return domainXmlListReturn.getStatus(); }	@java.lang.Override protected org.ovirt.engine.core.vdsbroker.vdsbroker.Status getReturnStatus() { return result.getStatus(); }
@java.lang.Override protected void executeIrsBrokerCommand() { domainXmlListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.getIrsProxy().getVmLeaseInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.getParameters().getLeaseId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.getParameters().getStorageDomainId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.proceedProxyReturnValue(); }	@java.lang.Override protected void executeIrsBrokerCommand() { result = org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.getIrsProxy().getVmLeaseInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.getParameters().getLeaseId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.getParameters().getStorageDomainId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.proceedProxyReturnValue(); java.util.Map<java.lang.String, java.lang.String> leaseInfo = result.getLeaseInfo(); leaseInfo.remove(VdsProperties.VmLeaseId); leaseInfo.remove(VdsProperties.VmLeaseSdId); org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.setReturnValue(leaseInfo); }
public static void cleanupSsoSession(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, org.ovirt.engine.core.sso.utils.SsoSession ssoSession, java.util.Set<java.lang.String> associateClientIds) { try { ssoContext.removeSsoSession(ssoSession.getAccessToken()); javax.servlet.http.HttpSession existingSession = ssoSession.getHttpSession(); if (existingSession == null) { org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.debug("No existing Session found for token: {}, cannot invalidate session", ssoSession.getAccessToken()); } else { org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.debug("Existing Session found for token: {}, invalidating session", ssoSession.getAccessToken()); existingSession.invalidate(); } org.ovirt.engine.core.sso.utils.TokenCleanupUtility.invokeAuthnLogout(ssoContext, ssoSession); org.ovirt.engine.core.sso.utils.SsoUtils.notifyClientsOfLogoutEvent(ssoContext, associateClientIds, ssoSession.getAccessToken()); } catch (java.lang.IllegalStateException ex) { org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.debug("Unable to cleanup SsoSession: {}", ex.getMessage()); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.error("Unable to cleanup SsoSession: {}", ex.getMessage()); org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.debug("Exception", ex); } }	public static void cleanupSsoSession(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, org.ovirt.engine.core.sso.utils.SsoSession ssoSession, java.util.Set<java.lang.String> associateClientIds) { try { ssoContext.removeSsoSession(ssoSession.getAccessToken()); javax.servlet.http.HttpSession existingSession = ssoSession.getHttpSession(); if (existingSession == null) { org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.debug("No existing Session found for token: {}, cannot invalidate session", ssoSession.getAccessToken()); } else { org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.debug("Existing Session found for token: {}, invalidating session", ssoSession.getAccessToken()); try { existingSession.invalidate(); } catch (java.lang.IllegalStateException ex) { org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.debug("Unable to cleanup SsoSession: {}", ex.getMessage()); } } org.ovirt.engine.core.sso.utils.TokenCleanupUtility.invokeAuthnLogout(ssoContext, ssoSession); org.ovirt.engine.core.sso.utils.SsoUtils.notifyClientsOfLogoutEvent(ssoContext, associateClientIds, ssoSession.getAccessToken()); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.error("Unable to cleanup SsoSession: {}", ex.getMessage()); org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.debug("Exception", ex); } }
public static void setNetworkVdsmName(org.ovirt.engine.core.common.businessentities.network.Network network) { java.lang.String networkName = network.getName(); org.ovirt.engine.core.compat.Guid networkId = network.getId(); if (((networkName.length()) <= (org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.HOST_NIC_NAME_LENGTH)) || (networkId == null)) { network.setVdsmName(networkName); } network.setVdsmName(("on" + (networkId.toString().replaceAll("[^a-zA-Z0-9]+", "").substring(0, ((org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.HOST_NIC_NAME_LENGTH) - 2))))); }	public static void setNetworkVdsmName(org.ovirt.engine.core.common.businessentities.network.Network network) { java.lang.String networkName = network.getName(); if (org.ovirt.engine.core.utils.NetworkUtils.VALID_VDS_NAME_PATTERN.matcher(networkName).matches()) { network.setVdsmName(networkName); } else { network.setVdsmName(("on" + (network.getId().toString().replaceAll("[^a-zA-Z0-9]+", "").substring(0, ((org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.HOST_NIC_NAME_LENGTH) - 2))))); } }
public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("label", getLabel()).append("priority", getPriority()).append("groupTitle", groupTitle).append("groupPriority", groupPriority).toString(); }	public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("label", getLabel()).append("priority", getPriority()).append("groupTitle", groupTitle).append("groupPriority", groupPriority).build(); }
@java.lang.Override public com.gwtplatform.mvp.client.Tab addTab(com.gwtplatform.mvp.client.TabData tabData, java.lang.String historyToken) { com.gwtplatform.mvp.client.Tab tab = addTabImpl(tabData, historyToken); allTabs.put(tabData, tab); return tab; }	protected java.lang.String getActiveTabHistoryToken() { return activeTabHistoryToken; }
@java.lang.Override public com.gwtplatform.mvp.client.Tab addTabImpl(com.gwtplatform.mvp.client.TabData tabData, java.lang.String historyToken) { org.ovirt.engine.ui.common.widget.tab.TabDefinition newTab = createNewTab(tabData); if (tabData instanceof org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) { menuLayout.addMenuItem(((org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) (tabData))); newTab.setTargetHistoryToken(historyToken); newTab.setId(((TabDefinition.TAB_ID_PREFIX) + historyToken)); newTab.setText(tabData.getLabel()); addTabDefinition(newTab, menuLayout.getMenuIndex(((org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) (tabData)))); } else { throw new java.lang.RuntimeException("Adding non GroupedTabData"); } updateTab(newTab); if (((getActiveTabHistoryToken()) != null) && (getActiveTabHistoryToken().equals(historyToken))) { setActiveTab(newTab); } return newTab; }	@java.lang.Override public com.gwtplatform.mvp.client.Tab addTab(com.gwtplatform.mvp.client.TabData tabData, java.lang.String historyToken) { org.ovirt.engine.ui.common.widget.tab.TabDefinition newTab = createNewTab(tabData); if (tabData instanceof org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) { menuLayout.addMenuItem(((org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) (tabData))); newTab.setTargetHistoryToken(historyToken); newTab.setId(((TabDefinition.TAB_ID_PREFIX) + historyToken)); newTab.setText(tabData.getLabel()); addTabDefinition(newTab, menuLayout.getMenuIndex(((org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) (tabData)))); } else { throw new java.lang.RuntimeException("Adding non GroupedTabData"); } updateTab(newTab); if (((getActiveTabHistoryToken()) != null) && (getActiveTabHistoryToken().equals(historyToken))) { setActiveTab(newTab); } return newTab; }
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractSubTabPanelPresenter.getEventBus().addHandler(org.ovirt.engine.ui.common.presenter.SetTabVisibleEvent.getType(), ( event) -> { getView().setTabVisible(event.getTabData(), event.isTabVisible()); })); }	@java.lang.Override protected void onBind() { super.onBind(); initDetailTabToModelMapping(detailTabToModelMapping); for (java.util.Map.Entry<com.gwtplatform.mvp.client.TabData, org.ovirt.engine.ui.uicommonweb.models.Model> entry : detailTabToModelMapping.entrySet()) { com.gwtplatform.mvp.client.TabData tabData = entry.getKey(); org.ovirt.engine.ui.uicommonweb.models.Model detailModel = entry.getValue(); detailModel.getPropertyChangedEvent().addListener(( ev, sender, args) -> { if ("IsAvailable".equals(args.propertyName)) { updateTabVisibility(tabData, detailModel); } }); } }
@java.lang.Override public com.gwtplatform.mvp.client.Tab addTabImpl(com.gwtplatform.mvp.client.TabData tabData, java.lang.String historyToken) { org.ovirt.engine.ui.common.widget.tab.TabDefinition newTab = createNewTab(tabData); newTab.setTargetHistoryToken(historyToken); newTab.setText(tabData.getLabel()); int index = tabLayout.addGroupedTabData(tabData); addTabDefinition(newTab, index); updateTab(newTab); return newTab; }	@java.lang.Override public com.gwtplatform.mvp.client.Tab addTab(com.gwtplatform.mvp.client.TabData tabData, java.lang.String historyToken) { org.ovirt.engine.ui.common.widget.tab.TabDefinition newTab = createNewTab(tabData); newTab.setTargetHistoryToken(historyToken); newTab.setText(tabData.getLabel()); int index = tabLayout.addGroupedTabData(tabData); addTabDefinition(newTab, index); actualTabWidgets.put(tabData, navTabs.getWidget(index)); tabHistoryTokens.put(tabData, historyToken); updateTab(newTab); return newTab; }
@java.lang.Override public void setTabVisible(com.gwtplatform.mvp.client.TabData tabData, boolean visible) { getTabPanel().getTabWidget(tabData).asWidget().setVisible(visible); }	@java.lang.Override public void setTabVisible(com.gwtplatform.mvp.client.TabData tabData, boolean visible) { getTabPanel().setTabVisible(tabData, visible); }
public void initializeHandlers() { modelProvider.getModel().getEntityChangedEvent().addListener(( ev, sender, args) -> { java.lang.Object entity = modelProvider.getModel().getEntity(); if (entity != null) { onDetailModelEntityChange(entity); } }); modelProvider.getModel().getPropertyChangedEvent().addListener(( ev, sender, args) -> { if (PropertyChangedEventArgs.PROGRESS.equals(args.propertyName)) { if ((modelProvider.getModel().getProgress()) != null) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { if ((getTable()) != null) { getTable().setLoadingState(LoadingState.LOADING); } }); } } else if ("IsAvailable".equals(args.propertyName)) { org.ovirt.engine.ui.common.presenter.D detailModel = modelProvider.getModel(); org.ovirt.engine.ui.common.presenter.SetTabVisibleEvent.fire(this, resolveTabData(), detailModel.getIsAvailable()); } }); }	public void initializeHandlers() { modelProvider.getModel().getEntityChangedEvent().addListener(( ev, sender, args) -> { java.lang.Object entity = modelProvider.getModel().getEntity(); if (entity != null) { onDetailModelEntityChange(entity); } }); modelProvider.getModel().getPropertyChangedEvent().addListener(( ev, sender, args) -> { if (PropertyChangedEventArgs.PROGRESS.equals(args.propertyName)) { if ((modelProvider.getModel().getProgress()) != null) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { if ((getTable()) != null) { getTable().setLoadingState(LoadingState.LOADING); } }); } } }); }
protected abstract com.gwtplatform.mvp.client.Tab addTabImpl(com.gwtplatform.mvp.client.TabData tabData, java.lang.String historyToken);	public void setTabVisible(com.gwtplatform.mvp.client.TabData tabData, boolean visible) { }
private void initSelectedSpiceImpl() { org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel spiceModel = model.getVmConsoles().getConsoleModel(org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel.class); if (spiceModel == null) { return; } spiceModel.initConsole(); spiceModel.initConsole(); }	private void initSelectedSpiceImpl() { org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel spiceModel = model.getVmConsoles().getConsoleModel(org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel.class); if (spiceModel == null) { return; } spiceModel.initConsole(); }
@java.lang.Override protected void executeVdsBrokerCommand() { buildVmData(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.log.info("VM {}", createInfo); if (((boolean) (org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DomainXML, vm.getCompatibilityVersion().getValue())))) { org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder builder = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(createInfo, vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getVds().getId(), getRunOncePayload(), org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getParameters().isVolatileRun())); java.lang.String libvirtXml = builder.build(); java.lang.String prettyLibvirtXml = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.prettify(libvirtXml); if (prettyLibvirtXml != null) { org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.log.info("VM {}", prettyLibvirtXml); } createInfo.put("xml", libvirtXml); } vmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getBroker().create(createInfo); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(vm.getDynamicData(), vmReturn.vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getVds()); }	@java.lang.Override protected void executeVdsBrokerCommand() { buildVmData(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.log.info("VM {}", createInfo); if (((boolean) (org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DomainXML, vm.getClusterCompatibilityVersion().getValue())))) { org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder builder = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(createInfo, vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getVds().getId(), getRunOncePayload(), org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getParameters().isVolatileRun())); java.lang.String libvirtXml = builder.build(); java.lang.String prettyLibvirtXml = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.prettify(libvirtXml); if (prettyLibvirtXml != null) { org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.log.info("VM {}", prettyLibvirtXml); } createInfo.put("xml", libvirtXml); } vmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getBroker().create(createInfo); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(vm.getDynamicData(), vmReturn.vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getVds()); }
@org.ovirt.engine.ui.common.widget.table.cell.Template("<div style='overflow: hidden; text-overflow: ellipsis; white-space: nowrap;' class='{0}' id='{1}'>" + ("<a id='{2}' href='javascript:;'>{3}</a>" + "</div>")) com.google.gwt.safehtml.shared.SafeHtml containerAndLink(java.lang.String cellStyle, java.lang.String cellId, java.lang.String linkId, com.google.gwt.safehtml.shared.SafeHtml text);	@org.ovirt.engine.ui.common.widget.table.cell.Template("<a style='overflow: hidden; text-overflow: ellipsis; white-space: nowrap;' class='{0}' id='{1}' href='javascript:;'>{2}</a>") com.google.gwt.safehtml.shared.SafeHtml containerAndLink(java.lang.String cellStyle, java.lang.String id, com.google.gwt.safehtml.shared.SafeHtml text);
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, java.lang.String value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { if (value != null) { com.google.gwt.safehtml.shared.SafeHtml safeValue = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(value); sb.append(template.containerAndLink(getStyleClass(), getRenderElementId(context), id, safeValue)); } }	@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, java.lang.String value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { if (value != null) { com.google.gwt.safehtml.shared.SafeHtml safeValue = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(value); sb.append(template.containerAndLink(getStyleClass(), getRenderElementId(context), safeValue)); } }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(cluster().name()); or(mandatory(cluster().dataCenter().id()), mandatory(cluster().dataCenter().name())); optional(cluster().cpu().type()); optional(cluster().ballooningEnabled()); optional(cluster().comment()); optional(cluster().cpu().architecture()); optional(cluster().description()); optional(cluster().display().proxy()); optional(cluster().errorHandling().onError()); optional(cluster().fencingPolicy().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().threshold()); optional(cluster().fencingPolicy().skipIfSdActive().enabled()); optional(cluster().glusterService()); optional(cluster().haReservation()); optional(cluster().ksm().enabled()); optional(cluster().ksm().mergeAcrossNodes()); optional(cluster().maintenanceReasonRequired()); optional(cluster().memoryPolicy().overCommit().percent()); optional(cluster().memoryPolicy().transparentHugePages().enabled()); optional(cluster().threadsAsCores()); optional(cluster().trustedService()); optional(cluster().tunnelMigration()); optional(cluster().virtService()); or(optional(cluster().managementNetwork().id()), optional(cluster().managementNetwork().name())); or(optional(cluster().schedulingPolicy().id()), optional(cluster().schedulingPolicy().name())); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(cluster().name()); or(mandatory(cluster().dataCenter().id()), mandatory(cluster().dataCenter().name())); optional(cluster().version().major()); optional(cluster().version().minor()); optional(cluster().cpu().type()); optional(cluster().ballooningEnabled()); optional(cluster().comment()); optional(cluster().cpu().architecture()); optional(cluster().description()); optional(cluster().display().proxy()); optional(cluster().errorHandling().onError()); optional(cluster().fencingPolicy().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().threshold()); optional(cluster().fencingPolicy().skipIfSdActive().enabled()); optional(cluster().glusterService()); optional(cluster().haReservation()); optional(cluster().ksm().enabled()); optional(cluster().ksm().mergeAcrossNodes()); optional(cluster().maintenanceReasonRequired()); optional(cluster().memoryPolicy().overCommit().percent()); optional(cluster().memoryPolicy().transparentHugePages().enabled()); optional(cluster().threadsAsCores()); optional(cluster().trustedService()); optional(cluster().tunnelMigration()); optional(cluster().virtService()); or(optional(cluster().managementNetwork().id()), optional(cluster().managementNetwork().name())); or(optional(cluster().schedulingPolicy().id()), optional(cluster().schedulingPolicy().name())); }
@java.lang.Override public void onLoad() { super.onLoad(); keyHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(( event) -> { com.google.gwt.dom.client.NativeEvent nativeEvent = event.getNativeEvent(); if ((breadCrumbs) != null) { if ((event.getTypeInt()) == Event.ONKEYDOWN) { if (((nativeEvent.getCharCode()) == 's') || ((nativeEvent.getKeyCode()) == KeyCodes.KEY_S)) { if ((nativeEvent.getCtrlKey()) && (nativeEvent.getAltKey())) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.toggleSearch(); event.cancel(); } } else if ((!(this.breadCrumbs.isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_DOWN)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.nextEntity(); event.cancel(); } else if ((!(this.breadCrumbs.isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_UP)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.previousEntity(); event.cancel(); } } } }); if (((breadCrumbs) != null) && ((breadCrumbsContainer.getWidgetCount()) == 0)) { breadCrumbs.asWidget().getElement().getStyle().setHeight(83, Unit.PX); breadCrumbsContainer.add(breadCrumbs); } if (((actionPanel) != null) && ((mainActionPanel.getWidgetCount()) == 0)) { mainActionPanel.add(actionPanel); } }	@java.lang.Override public void onLoad() { super.onLoad(); keyHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(( event) -> { com.google.gwt.dom.client.NativeEvent nativeEvent = event.getNativeEvent(); if ((breadCrumbs) != null) { if ((event.getTypeInt()) == Event.ONKEYDOWN) { if (((nativeEvent.getCharCode()) == 's') || ((nativeEvent.getKeyCode()) == KeyCodes.KEY_S)) { if ((nativeEvent.getCtrlKey()) && (nativeEvent.getAltKey())) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.toggleSearch(); event.cancel(); } } else if ((!(this.breadCrumbs.isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_DOWN)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.nextEntity(); event.cancel(); } else if ((!(this.breadCrumbs.isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_UP)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.previousEntity(); event.cancel(); } } } }); if (((breadCrumbs) != null) && ((breadCrumbsContainer.getWidgetCount()) == 0)) { breadCrumbsContainer.add(breadCrumbs); } if (((actionPanel) != null) && ((mainActionPanel.getWidgetCount()) == 0)) { mainActionPanel.add(actionPanel); } }
private void refreshReposIfNeeded(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType, java.lang.Boolean forceRefresh) { org.apache.commons.lang.mutable.MutableLong lastRefreshed = domainsLastRefreshedTime.computeIfAbsent(storageDomainId, ( k) -> new org.apache.commons.lang.mutable.MutableLong((-1))); if ((shouldForceRefresh(forceRefresh)) || (shouldInvalidateCache(lastRefreshed.longValue()))) { synchronized(lastRefreshed) { if (forceRefresh || (shouldInvalidateCache(lastRefreshed.longValue()))) { boolean refreshSucceeded = refreshRepos(storageDomainId, imageType); lastRefreshed.setValue(java.lang.System.currentTimeMillis()); if (!refreshSucceeded) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IMAGES_NOT_SUPPORTED_ERROR); } } } } }	private void refreshReposIfNeeded(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType, java.lang.Boolean forceRefresh) { org.apache.commons.lang.mutable.MutableLong lastRefreshed = domainsLastRefreshedTime.computeIfAbsent(storageDomainId, ( k) -> new org.apache.commons.lang.mutable.MutableLong((-1))); if ((shouldForceRefresh(forceRefresh)) || (shouldInvalidateCache(lastRefreshed.longValue()))) { synchronized(lastRefreshed) { if ((shouldForceRefresh(forceRefresh)) || (shouldInvalidateCache(lastRefreshed.longValue()))) { boolean refreshSucceeded = refreshRepos(storageDomainId, imageType); lastRefreshed.setValue(java.lang.System.currentTimeMillis()); if (!refreshSucceeded) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IMAGES_NOT_SUPPORTED_ERROR); } } } } }
@java.lang.Override public int compare(java.lang.Comparable a, java.lang.Comparable b) { if (a == null) { return b == null ? 0 : nullFirst ? -1 : 1; } else if (b == null) { return nullFirst ? 1 : -1; } else { return a.compareTo(b); } }	@java.lang.Override public int compare(java.lang.Comparable a, java.lang.Comparable b) { if (a == null) { return b == null ? 0 : 1; } else if (b == null) { return -1; } else { return a.compareTo(b); } }
private void updateMoveWarning(java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> disks) { java.util.List<java.lang.String> liveMigrateDisks = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : disks) { if (diskModel.isPluggedToRunningVm()) { liveMigrateDisks.add(diskModel.getAlias().getEntity()); } } if (!(liveMigrateDisks.isEmpty())) { setMessage(messages.moveDisksWhileVmRunning(liveMigrateDisks.stream().collect(java.util.stream.Collectors.joining(", ")))); } }	private void updateMoveWarning(java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> disks) { java.util.List<java.lang.String> liveMigrateDisks = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : disks) { if (diskModel.isPluggedToRunningVm()) { liveMigrateDisks.add(diskModel.getAlias().getEntity()); } } if (!(liveMigrateDisks.isEmpty())) { setMessage(messages.moveDisksWhileVmRunning(java.lang.String.join(", ", liveMigrateDisks))); } }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel model) { driver.edit(model); if ((model.isShowMemorySnapshotWarning()) && (!(model.isShowPartialSnapshotWarning()))) { com.google.gwt.dom.client.Style dialogStyle = getParent().getParent().getParent().getElement().getStyle(); dialogStyle.setWidth(450, Style.Unit.PX); dialogStyle.setHeight(240, Style.Unit.PX); } partialSnapshotWarningPanel.setVisible(model.isShowPartialSnapshotWarning()); memoryWarningPanel.setVisible(model.isShowMemorySnapshotWarning()); if ((model.getOldClusterVersionOfSnapshotWithMemory()) != null) { messageLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotPreviewPopupWidget.messages.snapshotContainsMemoryIncompatibleCluster(model.getOldClusterVersionOfSnapshotWithMemory().toString())); model.getMemory().setEntity(false); } horizontalSeparator.setVisible(((model.isShowPartialSnapshotWarning()) && (model.isShowMemorySnapshotWarning()))); vmDisksLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotPreviewPopupWidget.messages.vmDisksLabel(model.getVmDisks().size(), org.ovirt.engine.ui.uicommonweb.Linq.getDiskAliases(model.getVmDisks()).stream().collect(java.util.stream.Collectors.joining(", ")))); snapshotDisksLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotPreviewPopupWidget.messages.snapshotDisksLabel(model.getDisks().size(), org.ovirt.engine.ui.uicommonweb.Linq.getDiskAliases(model.getDisks()).stream().collect(java.util.stream.Collectors.joining(", ")))); }	@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel model) { driver.edit(model); if ((model.isShowMemorySnapshotWarning()) && (!(model.isShowPartialSnapshotWarning()))) { com.google.gwt.dom.client.Style dialogStyle = getParent().getParent().getParent().getElement().getStyle(); dialogStyle.setWidth(450, Style.Unit.PX); dialogStyle.setHeight(240, Style.Unit.PX); } partialSnapshotWarningPanel.setVisible(model.isShowPartialSnapshotWarning()); memoryWarningPanel.setVisible(model.isShowMemorySnapshotWarning()); if ((model.getOldClusterVersionOfSnapshotWithMemory()) != null) { messageLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotPreviewPopupWidget.messages.snapshotContainsMemoryIncompatibleCluster(model.getOldClusterVersionOfSnapshotWithMemory().toString())); model.getMemory().setEntity(false); } horizontalSeparator.setVisible(((model.isShowPartialSnapshotWarning()) && (model.isShowMemorySnapshotWarning()))); vmDisksLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotPreviewPopupWidget.messages.vmDisksLabel(model.getVmDisks().size(), java.lang.String.join(", ", org.ovirt.engine.ui.uicommonweb.Linq.getDiskAliases(model.getVmDisks())))); snapshotDisksLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotPreviewPopupWidget.messages.snapshotDisksLabel(model.getDisks().size(), java.lang.String.join(", ", org.ovirt.engine.ui.uicommonweb.Linq.getDiskAliases(model.getDisks())))); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.storage.Disk object) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(diskImage.getStoragesNames().stream().collect(java.util.stream.Collectors.joining(", "))); }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.storage.Disk object) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(java.lang.String.join(", ", diskImage.getStoragesNames())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label label) { java.lang.String hostNames = getHostNames(label).stream().collect(java.util.stream.Collectors.joining(", ")); if (hostNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return hostNames; }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label label) { java.lang.String hostNames = java.lang.String.join(", ", getHostNames(label)); if (hostNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return hostNames; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label label) { java.lang.String vmNames = getVmNames(label).stream().collect(java.util.stream.Collectors.joining(", ")); if (vmNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return vmNames; }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label label) { java.lang.String vmNames = java.lang.String.join(", ", getVmNames(label)); if (vmNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return vmNames; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.storage.Disk object) { if ((object.getNumberOfVms()) < 2) { return null; } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(object.getVmNames().stream().collect(java.util.stream.Collectors.joining(", "))); }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.storage.Disk object) { if ((object.getNumberOfVms()) < 2) { return null; } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(java.lang.String.join(", ", object.getVmNames())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.scheduling.AffinityGroup group) { java.lang.String vmNames = getVmNames(group).stream().collect(java.util.stream.Collectors.joining(", ")); if (vmNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityGroupsView.constants.noMembersAffinityGroup(); } return vmNames; }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.scheduling.AffinityGroup group) { java.lang.String vmNames = java.lang.String.join(", ", getVmNames(group)); if (vmNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityGroupsView.constants.noMembersAffinityGroup(); } return vmNames; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.scheduling.AffinityGroup group) { java.lang.String hostNames = getHostNames(group).stream().collect(java.util.stream.Collectors.joining(", ")); if (hostNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityGroupsView.constants.noMembersAffinityGroup(); } return hostNames; }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.scheduling.AffinityGroup group) { java.lang.String hostNames = java.lang.String.join(", ", getHostNames(group)); if (hostNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityGroupsView.constants.noMembersAffinityGroup(); } return hostNames; }
private void volumeSelectedItemChanged() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolumes().getSelectedItem(); java.lang.Boolean useLinkGlusterVolume = getLinkGlusterVolume().getEntity(); java.lang.String mountOptions = ""; if ((volume == null) || (!useLinkGlusterVolume)) { return; } java.util.Set<java.lang.String> addressSet = new java.util.LinkedHashSet<>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : volume.getBricks()) { addressSet.add((((brick.getNetworkId()) != null) && (!(brick.getNetworkAddress().isEmpty())) ? brick.getNetworkAddress() : brick.getServerName())); } java.util.List<java.lang.String> addressList = new java.util.ArrayList<>(); addressList.addAll(addressSet); if ((addressList.size()) >= 1) { addressList.remove(0); } if ((addressList.size()) > 0) { mountOptions = ((org.ovirt.engine.core.common.constants.StorageConstants.GLUSTER_BACKUP_SERVERS_MNT_OPTION) + "=") + (addressList.stream().collect(java.util.stream.Collectors.joining(":"))); } getMountOptions().setEntity(mountOptions); }	private void volumeSelectedItemChanged() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolumes().getSelectedItem(); java.lang.Boolean useLinkGlusterVolume = getLinkGlusterVolume().getEntity(); java.lang.String mountOptions = ""; if ((volume == null) || (!useLinkGlusterVolume)) { return; } java.util.Set<java.lang.String> addressSet = new java.util.LinkedHashSet<>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : volume.getBricks()) { addressSet.add((((brick.getNetworkId()) != null) && (!(brick.getNetworkAddress().isEmpty())) ? brick.getNetworkAddress() : brick.getServerName())); } java.util.List<java.lang.String> addressList = new java.util.ArrayList<>(); addressList.addAll(addressSet); if ((addressList.size()) >= 1) { addressList.remove(0); } if ((addressList.size()) > 0) { mountOptions = ((org.ovirt.engine.core.common.constants.StorageConstants.GLUSTER_BACKUP_SERVERS_MNT_OPTION) + "=") + (java.lang.String.join(":", addressList)); } getMountOptions().setEntity(mountOptions); }
private java.lang.String createActiveBondTooltipMessage(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { java.util.List<java.lang.String> bondProperties = new java.util.ArrayList<>(); java.lang.String adPartnerMac = java.util.Objects.toString(bond.getAdPartnerMac(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondAdPartnerMac(adPartnerMac)); java.lang.String adAggregatorId = java.util.Objects.toString(bond.getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondAdAggregatorId(adAggregatorId)); for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface nic : lineModel.getInterfaces()) { java.lang.String nicName = nic.getName(); java.lang.String nicAggregatorId = java.util.Objects.toString(nic.getInterface().getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondSlaveAdAggregatorId(nicName, nicAggregatorId)); } return bondProperties.stream().collect(java.util.stream.Collectors.joining("\n")); }	private java.lang.String createActiveBondTooltipMessage(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { java.util.List<java.lang.String> bondProperties = new java.util.ArrayList<>(); java.lang.String adPartnerMac = java.util.Objects.toString(bond.getAdPartnerMac(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondAdPartnerMac(adPartnerMac)); java.lang.String adAggregatorId = java.util.Objects.toString(bond.getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondAdAggregatorId(adAggregatorId)); for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface nic : lineModel.getInterfaces()) { java.lang.String nicName = nic.getName(); java.lang.String nicAggregatorId = java.util.Objects.toString(nic.getInterface().getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondSlaveAdAggregatorId(nicName, nicAggregatorId)); } return java.lang.String.join("\n", bondProperties); }
@java.lang.Override protected java.lang.String getWarning(java.util.List<java.lang.String> disks) { return messages.cannotMoveDisks(disks.stream().collect(java.util.stream.Collectors.joining(", "))); }	@java.lang.Override protected java.lang.String getWarning(java.util.List<java.lang.String> disks) { return messages.cannotMoveDisks(java.lang.String.join(", ", disks)); }
public static org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk> getQoutaColumn(java.lang.String sortBy) { org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk> column = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) { java.lang.String value = ""; if ((object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); java.util.ArrayList<java.lang.String> quotaNamesArr = diskImage.getQuotaNames(); if (quotaNamesArr != null) { value = quotaNamesArr.stream().collect(java.util.stream.Collectors.joining(", ")); } } return value; } }; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable(column, sortBy); }	public static org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk> getQoutaColumn(java.lang.String sortBy) { org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk> column = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) { java.lang.String value = ""; if ((object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); java.util.ArrayList<java.lang.String> quotaNamesArr = diskImage.getQuotaNames(); if (quotaNamesArr != null) { value = java.lang.String.join(", ", quotaNamesArr); } } return value; } }; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable(column, sortBy); }
private void showRemoveTemplateWithDependentVMConfirmationWindow(java.util.Map<java.lang.String, java.util.List<java.lang.String>> problematicVmNames) { java.util.List<java.lang.String> missingTemplatesFromVms = problematicVmNames.entrySet().stream().map(( e) -> org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.messages.templatesWithDependentVMs(e.getKey(), e.getValue().stream().collect(java.util.stream.Collectors.joining(", ")))).collect(java.util.stream.Collectors.toList()); setConfirmWindow(null); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.constants.removeBackedUpTemplatesWithDependentsVMTitle()); confirmModel.setHelpTag(HelpTag.remove_backed_up_template); confirmModel.setHashName("remove_backed_up_template"); confirmModel.setMessage(org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.constants.theFollowingTemplatesHaveDependentVmsBackupOnExportDomainMsg()); confirmModel.setItems(missingTemplatesFromVms); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("RemoveVmTemplates", this)); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand(org.ovirt.engine.ui.uicommonweb.models.storage.CANCEL_CONFIRMATION_COMMAND, this)); }	private void showRemoveTemplateWithDependentVMConfirmationWindow(java.util.Map<java.lang.String, java.util.List<java.lang.String>> problematicVmNames) { java.util.List<java.lang.String> missingTemplatesFromVms = problematicVmNames.entrySet().stream().map(( e) -> org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.messages.templatesWithDependentVMs(e.getKey(), java.lang.String.join(", ", e.getValue()))).collect(java.util.stream.Collectors.toList()); setConfirmWindow(null); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.constants.removeBackedUpTemplatesWithDependentsVMTitle()); confirmModel.setHelpTag(HelpTag.remove_backed_up_template); confirmModel.setHashName("remove_backed_up_template"); confirmModel.setMessage(org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.constants.theFollowingTemplatesHaveDependentVmsBackupOnExportDomainMsg()); confirmModel.setItems(missingTemplatesFromVms); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("RemoveVmTemplates", this)); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand(org.ovirt.engine.ui.uicommonweb.models.storage.CANCEL_CONFIRMATION_COMMAND, this)); }
public static java.lang.String getDiskLabelList(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { if (disks.isEmpty()) { return null; } final java.util.List<java.lang.String> labels = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { labels.add(disk.getDiskAlias()); } return labels.stream().collect(java.util.stream.Collectors.joining(", ")); }	public static java.lang.String getDiskLabelList(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { if (disks.isEmpty()) { return null; } final java.util.List<java.lang.String> labels = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { labels.add(disk.getDiskAlias()); } return java.lang.String.join(", ", labels); }
private void updateProperties() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getEntity(); setImage(disk.getDiskStorageType().isInternal()); setLun(((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN))); setAlias(disk.getDiskAlias()); setDescription(disk.getDiskDescription()); setDiskId(disk.getId().toString()); if ((disk.getLastAlignmentScan()) != null) { java.lang.String lastScanDate = com.google.gwt.i18n.client.DateTimeFormat.getFormat("yyyy-MM-dd, HH:mm").format(disk.getLastAlignmentScan()); setAlignment(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().diskAlignment(disk.getAlignment().toString(), lastScanDate)); } else { setAlignment(disk.getAlignment().toString()); } setWipeAfterDelete(disk.isWipeAfterDelete()); if (isImage()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); setDiskProfileName(diskImage.getDiskProfileNames().stream().collect(java.util.stream.Collectors.joining(", "))); setQuotaName(diskImage.getQuotaNames().stream().collect(java.util.stream.Collectors.joining(", "))); setQuotaAvailable((!(diskImage.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)))); } else if (isLun()) { org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk = ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (disk)); setLunId(lunDisk.getLun().getLUNId()); } }	private void updateProperties() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getEntity(); setImage(disk.getDiskStorageType().isInternal()); setLun(((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN))); setAlias(disk.getDiskAlias()); setDescription(disk.getDiskDescription()); setDiskId(disk.getId().toString()); if ((disk.getLastAlignmentScan()) != null) { java.lang.String lastScanDate = com.google.gwt.i18n.client.DateTimeFormat.getFormat("yyyy-MM-dd, HH:mm").format(disk.getLastAlignmentScan()); setAlignment(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().diskAlignment(disk.getAlignment().toString(), lastScanDate)); } else { setAlignment(disk.getAlignment().toString()); } setWipeAfterDelete(disk.isWipeAfterDelete()); if (isImage()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); setDiskProfileName(java.lang.String.join(", ", diskImage.getDiskProfileNames())); setQuotaName(java.lang.String.join(", ", diskImage.getQuotaNames())); setQuotaAvailable((!(diskImage.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)))); } else if (isLun()) { org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk = ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (disk)); setLunId(lunDisk.getLun().getLUNId()); } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) { java.lang.String value = ""; if ((object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); java.util.ArrayList<java.lang.String> quotaNamesArr = diskImage.getQuotaNames(); if (quotaNamesArr != null) { value = quotaNamesArr.stream().collect(java.util.stream.Collectors.joining(", ")); } } return value; }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) { java.lang.String value = ""; if ((object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); java.util.ArrayList<java.lang.String> quotaNamesArr = diskImage.getQuotaNames(); if (quotaNamesArr != null) { value = java.lang.String.join(", ", quotaNamesArr); } } return value; }
private void updateCurrentValue(final java.util.List<T> value, boolean fireEvents) { lastValues = value; java.util.List<java.lang.String> renderedValues = new java.util.ArrayList<>(); for (T val : value) { renderedValues.add(org.ovirt.engine.ui.common.widget.editor.ListModelMultipleSelectListBox.getRenderer().render(java.util.Arrays.asList(val))); } java.lang.String renderedValue = renderedValues.stream().collect(java.util.stream.Collectors.joining(",")); if (org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(renderedValue)) { renderedValue = NBSP; } else { renderedValue = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(renderedValue); } ((com.google.gwt.dom.client.Element) (dropdownButton.getElement().getChild(0))).setInnerHTML(renderedValue); dropdownButton.setTitle(renderedValue); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> org.ovirt.engine.ui.common.widget.editor.listPanel.setSelected(value)); if (fireEvents) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, selectedItems()); lastValues = null; }); } else { lastValues = null; } }	private void updateCurrentValue(final java.util.List<T> value, boolean fireEvents) { lastValues = value; java.util.List<java.lang.String> renderedValues = new java.util.ArrayList<>(); for (T val : value) { renderedValues.add(org.ovirt.engine.ui.common.widget.editor.ListModelMultipleSelectListBox.getRenderer().render(java.util.Arrays.asList(val))); } java.lang.String renderedValue = java.lang.String.join(",", renderedValues); if (org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(renderedValue)) { renderedValue = NBSP; } else { renderedValue = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(renderedValue); } ((com.google.gwt.dom.client.Element) (dropdownButton.getElement().getChild(0))).setInnerHTML(renderedValue); dropdownButton.setTitle(renderedValue); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> org.ovirt.engine.ui.common.widget.editor.listPanel.setSelected(value)); if (fireEvents) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, selectedItems()); lastValues = null; }); } else { lastValues = null; } }
protected void handleSetMessageQueryResult(org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult result) { setHelpTag(getRemoveQosHelpTag()); setHashName(getRemoveQosHashName()); int index = 0; int numberOfTimesUsedByDiskProfiles = 0; java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.queries.QueryReturnValue returnValue : result.getReturnValues()) { java.util.List<org.ovirt.engine.core.common.businessentities.Nameable> diskProfileEntities = returnValue.getReturnValue(); java.lang.String qosName = sourceListModel.getSelectedItems().get(index).getName(); if ((diskProfileEntities.size()) == 0) { list.add(qosName); } else { numberOfTimesUsedByDiskProfiles += diskProfileEntities.size(); java.util.List<java.lang.String> diskProfileNames = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Nameable diskProfileEntity : diskProfileEntities) { java.lang.String diskProfileName = diskProfileEntity.getName(); diskProfileNames.add(diskProfileName); } java.lang.String diskProfileNamesAsString = diskProfileNames.stream().collect(java.util.stream.Collectors.joining(", ")); list.add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().removeStorageQoSItem(qosName, diskProfileNamesAsString)); } index++; } setMessage(getRemoveQosMessage(numberOfTimesUsedByDiskProfiles)); setItems(list); }	protected void handleSetMessageQueryResult(org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult result) { setHelpTag(getRemoveQosHelpTag()); setHashName(getRemoveQosHashName()); int index = 0; int numberOfTimesUsedByDiskProfiles = 0; java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.queries.QueryReturnValue returnValue : result.getReturnValues()) { java.util.List<org.ovirt.engine.core.common.businessentities.Nameable> diskProfileEntities = returnValue.getReturnValue(); java.lang.String qosName = sourceListModel.getSelectedItems().get(index).getName(); if ((diskProfileEntities.size()) == 0) { list.add(qosName); } else { numberOfTimesUsedByDiskProfiles += diskProfileEntities.size(); java.util.List<java.lang.String> diskProfileNames = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Nameable diskProfileEntity : diskProfileEntities) { java.lang.String diskProfileName = diskProfileEntity.getName(); diskProfileNames.add(diskProfileName); } java.lang.String diskProfileNamesAsString = java.lang.String.join(", ", diskProfileNames); list.add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().removeStorageQoSItem(qosName, diskProfileNamesAsString)); } index++; } setMessage(getRemoveQosMessage(numberOfTimesUsedByDiskProfiles)); setItems(list); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if (!(org.ovirt.engine.core.compat.Regex.isMatch(((java.lang.String) (value)), org.ovirt.engine.ui.uicommonweb.validation.EmailValidation.pattern, RegexOptions.IgnoreCase))) { result.setSuccess(false); result.getReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().invalidEmailAddressInvalidReason()); } return result; }	@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { if (!(org.ovirt.engine.core.compat.Regex.isMatch(((java.lang.String) (value)), org.ovirt.engine.ui.uicommonweb.validation.EmailValidation.pattern, RegexOptions.IgnoreCase))) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); result.setSuccess(false); result.getReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().invalidEmailAddressInvalidReason()); return result; } return org.ovirt.engine.ui.uicommonweb.validation.ValidationResult.ok(); }
@java.lang.Override protected java.lang.String getWarning(java.util.List<java.lang.String> disks) { return messages.cannotCopyDisks(disks.stream().collect(java.util.stream.Collectors.joining(", "))); }	@java.lang.Override protected java.lang.String getWarning(java.util.List<java.lang.String> disks) { return messages.cannotCopyDisks(java.lang.String.join(", ", disks)); }
private java.lang.String getOuterClassNames() { java.util.Set<java.lang.String> classNames = new java.util.LinkedHashSet<>(); classNames.add(org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.Defaults.TEMPLATE_CLASS_OUTER); classNames.addAll(extraTooltipClassNames); return classNames.stream().collect(java.util.stream.Collectors.joining(" ")); }	private java.lang.String getOuterClassNames() { java.util.Set<java.lang.String> classNames = new java.util.LinkedHashSet<>(); classNames.add(org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.Defaults.TEMPLATE_CLASS_OUTER); classNames.addAll(extraTooltipClassNames); return java.lang.String.join(" ", classNames); }
private void updateDisksWarningByImageStatus(java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> disks, org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus) { java.util.ArrayList<java.lang.String> disksAliases = getDisksAliasesByImageStatus(disks, imageStatus); if (!(disksAliases.isEmpty())) { generalWarningMessage.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget.messages.disksStatusWarning(org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance().translate(imageStatus), disksAliases.stream().collect(java.util.stream.Collectors.joining(", ")))); generalWarningMessage.setVisible(true); } }	private void updateDisksWarningByImageStatus(java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> disks, org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus) { java.util.ArrayList<java.lang.String> disksAliases = getDisksAliasesByImageStatus(disks, imageStatus); if (!(disksAliases.isEmpty())) { generalWarningMessage.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget.messages.disksStatusWarning(org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance().translate(imageStatus), java.lang.String.join(", ", disksAliases))); generalWarningMessage.setVisible(true); } }
private void updateProblematicDisk(org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = diskModel.getStorageDomain().getSelectedItem(); if (storageDomain == null) { return; } java.lang.String diskAlias = diskModel.getDisk().getDiskAlias(); if (storageDomain.getStorageType().isBlockDomain()) { if (!(problematicDisksForWarning.contains(diskAlias))) { problematicDisksForWarning.add(diskAlias); } } else { problematicDisksForWarning.remove(diskAlias); } if (!(problematicDisksForWarning.isEmpty())) { getDynamicWarning().setEntity(messages.moveDisksPreallocatedWarning(problematicDisksForWarning.stream().collect(java.util.stream.Collectors.joining(", ")))); getDynamicWarning().setIsAvailable(true); } else { getDynamicWarning().setIsAvailable(false); } }	private void updateProblematicDisk(org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = diskModel.getStorageDomain().getSelectedItem(); if (storageDomain == null) { return; } java.lang.String diskAlias = diskModel.getDisk().getDiskAlias(); if (storageDomain.getStorageType().isBlockDomain()) { if (!(problematicDisksForWarning.contains(diskAlias))) { problematicDisksForWarning.add(diskAlias); } } else { problematicDisksForWarning.remove(diskAlias); } if (!(problematicDisksForWarning.isEmpty())) { getDynamicWarning().setEntity(messages.moveDisksPreallocatedWarning(java.lang.String.join(", ", problematicDisksForWarning))); getDynamicWarning().setIsAvailable(true); } else { getDynamicWarning().setIsAvailable(false); } }
public java.lang.String translateErrorTextSingle(java.lang.String errorMsg, java.lang.Boolean changeIfNotFound) { java.lang.String ret = ""; try { if ((errorMsg != null) && ((errorMsg.length()) > 0)) { java.lang.String errMsgCopy = errorMsg; if (!(isDynamicVariable(errorMsg))) { errorMsg = errorMsg.replace('.', '_'); } java.lang.String errorsString = errors.getString(errorMsg); if (errorsString != null) { ret = errorsString.replace("\n", "<br/>"); } else { if ((isDynamicVariable(errorMsg)) || (!changeIfNotFound)) { ret = errorMsg; } else { errorMsg = errMsgCopy; java.lang.String[] splitted = errorMsg.toLowerCase().split("_"); ret = java.util.Arrays.stream(splitted).collect(java.util.stream.Collectors.joining(" ")); } } } } catch (java.util.MissingResourceException e) { ret = errorMsg; } return ret; }	public java.lang.String translateErrorTextSingle(java.lang.String errorMsg, java.lang.Boolean changeIfNotFound) { java.lang.String ret = ""; try { if ((errorMsg != null) && ((errorMsg.length()) > 0)) { java.lang.String errMsgCopy = errorMsg; if (!(isDynamicVariable(errorMsg))) { errorMsg = errorMsg.replace('.', '_'); } java.lang.String errorsString = errors.getString(errorMsg); if (errorsString != null) { ret = errorsString.replace("\n", "<br/>"); } else { if ((isDynamicVariable(errorMsg)) || (!changeIfNotFound)) { ret = errorMsg; } else { errorMsg = errMsgCopy; java.lang.String[] splitted = errorMsg.toLowerCase().split("_"); ret = java.lang.String.join(" ", splitted); } } } } catch (java.util.MissingResourceException e) { ret = errorMsg; } return ret; }
private java.lang.String composeExistingVmsWarningMessage(java.util.List<T> existingVms) { final java.util.List<java.lang.String> list = new java.util.ArrayList<>(); for (T t : existingVms) { list.add(extractNameFromEntity(t)); } return list.stream().collect(java.util.stream.Collectors.joining(", ")); }	private java.lang.String composeExistingVmsWarningMessage(java.util.List<T> existingVms) { final java.util.List<java.lang.String> list = new java.util.ArrayList<>(); for (T t : existingVms) { list.add(extractNameFromEntity(t)); } return java.lang.String.join(", ", list); }
public static java.lang.String renderVmNamesList(java.util.List<java.lang.String> names) { return names.stream().collect(java.util.stream.Collectors.joining(", ")); }	public static java.lang.String renderVmNamesList(java.util.List<java.lang.String> names) { return java.lang.String.join(", ", names); }
@java.lang.Override protected void onSelectedItemChanged() { super.onSelectedItemChanged(); java.util.List selectedItem = ((java.util.List) (getSelectedItem())); if (selectedItem != null) { java.util.ArrayList<java.lang.String> items = new java.util.ArrayList<>(); for (java.lang.Object item : selectedItem) { org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel i = ((org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel) (item)); items.add(i.getPartString()); } java.lang.String searchString = items.stream().collect(java.util.stream.Collectors.joining()); if ((getPrefix()) != null) { searchString = searchString.substring(getPrefix().length()); } setSearchString(searchString); } }	@java.lang.Override protected void onSelectedItemChanged() { super.onSelectedItemChanged(); java.util.List selectedItem = ((java.util.List) (getSelectedItem())); if (selectedItem != null) { java.util.ArrayList<java.lang.String> items = new java.util.ArrayList<>(); for (java.lang.Object item : selectedItem) { org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel i = ((org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel) (item)); items.add(i.getPartString()); } java.lang.String searchString = java.lang.String.join("", items); if ((getPrefix()) != null) { searchString = searchString.substring(getPrefix().length()); } setSearchString(searchString); } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet object) { return object.getDnsServers().stream().collect(java.util.stream.Collectors.joining(", ")); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet object) { return java.lang.String.join(", ", object.getDnsServers()); }
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); final boolean shouldSetNewMacPoolOnAllClusters = newMacPoolId != null; if (shouldSetNewMacPoolOnAllClusters) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if (moveMacs.migrateMacsToAnotherMacPoolIfNeeded(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext())) { cluster.setMacPoolId(newMacPoolId); clusterDao.update(cluster); } } } }	private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); final boolean shouldSetNewMacPoolOnAllClusters = newMacPoolId != null; if (shouldSetNewMacPoolOnAllClusters) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { boolean macPoolChanged = !(newMacPoolId.equals(cluster.getMacPoolId())); if (macPoolChanged) { moveMacs.migrateMacsToAnotherMacPool(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()); cluster.setMacPoolId(newMacPoolId); clusterDao.update(cluster); } } } }
public boolean migrateMacsToAnotherMacPoolIfNeeded(org.ovirt.engine.core.common.businessentities.Cluster sourceCluster, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceCluster); java.util.Objects.requireNonNull(targetMacPoolId); java.util.Objects.requireNonNull(commandContext); org.ovirt.engine.core.compat.Guid sourceMacPoolId = java.util.Objects.requireNonNull(sourceCluster.getMacPoolId()); org.ovirt.engine.core.compat.Guid clusterId = java.util.Objects.requireNonNull(sourceCluster.getId()); boolean macPoolChanged = !(sourceMacPoolId.equals(targetMacPoolId)); if (macPoolChanged) { java.util.List<java.lang.String> macsToMigrate = vmNicDao.getAllMacsByClusterId(clusterId); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macsToMigrate, false, commandContext); } return macPoolChanged; }	public void migrateMacsToAnotherMacPool(org.ovirt.engine.core.common.businessentities.Cluster sourceCluster, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceCluster); java.util.Objects.requireNonNull(targetMacPoolId); java.util.Objects.requireNonNull(commandContext); org.ovirt.engine.core.compat.Guid sourceMacPoolId = java.util.Objects.requireNonNull(sourceCluster.getMacPoolId()); org.ovirt.engine.core.compat.Guid clusterId = java.util.Objects.requireNonNull(sourceCluster.getId()); boolean macPoolChanged = !(sourceMacPoolId.equals(targetMacPoolId)); if (macPoolChanged) { java.util.List<java.lang.String> macsToMigrate = vmNicDao.getAllMacsByClusterId(clusterId); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macsToMigrate, false, commandContext); } }
private org.ovirt.engine.core.bll.ValidationResult canMigrateMacsToAnotherMacPool(org.ovirt.engine.core.compat.Guid targetMacPoolId, java.util.List<java.lang.String> macsToMigrate) { java.util.Objects.requireNonNull(targetMacPoolId); java.util.Objects.requireNonNull(macsToMigrate); org.ovirt.engine.core.bll.network.macpool.MacPool targetPool = poolPerCluster.getMacPoolById(targetMacPoolId); if (targetPool.isDuplicateMacAddressesAllowed()) { return ValidationResult.VALID; } java.util.Map<java.lang.String, java.lang.Long> occurrenceCount = macsToMigrate.stream().collect(java.util.stream.Collectors.groupingBy(java.util.function.Function.identity(), java.util.stream.Collectors.counting())); java.util.List<java.lang.String> problematicMacs = macsToMigrate.stream().distinct().filter(( mac) -> (targetPool.isMacInUse(mac)) || ((occurrenceCount.get(mac)) > 1)).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = ACTION_TYPE_FAILED_CANNOT_MIGRATE_MACS_DUE_TO_DUPLICATES; java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, problematicMacs); return org.ovirt.engine.core.bll.ValidationResult.failWith(engineMessage, replacements).when((!(problematicMacs.isEmpty()))); }	private org.ovirt.engine.core.bll.ValidationResult canMigrateMacsToAnotherMacPool(org.ovirt.engine.core.compat.Guid targetMacPoolId, java.util.List<java.lang.String> macsToMigrate) { java.util.Objects.requireNonNull(targetMacPoolId); java.util.Objects.requireNonNull(macsToMigrate); return canMigrateMacsToAnotherMacPool(poolPerCluster.getMacPoolById(targetMacPoolId), macsToMigrate); }
@org.junit.Test public void canMigrateMacsToAnotherMacPoolWhenThereAreThereWontBeDuplicates() { when(vmNicDao.getAllMacsByClusterId(cluster.getId())).thenReturn(macsToMigrate); assertThat(underTest.canMigrateMacsToAnotherMacPool(cluster, targetMacPoolId), isValid()); }	@org.junit.Test public void canMigrateMacsToAnotherMacPoolWhenThereAreNoDuplicates() { when(vmNicDao.getAllMacsByClusterId(cluster.getId())).thenReturn(macsToMigrate); assertThat(underTest.canMigrateMacsToAnotherMacPool(cluster, targetMacPoolId), isValid()); }
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = getNewMacPoolId(); if (shouldSetNewMacPoolOnAllClusters(newMacPoolId)) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { moveMacs.migrateMacsToAnotherMacPoolIfNeeded(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()); cluster.setMacPoolId(newMacPoolId); clusterDao.update(cluster); } } }	private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = getNewMacPoolId(); if (shouldSetNewMacPoolOnAllClusters(newMacPoolId)) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { boolean macPoolChanged = !(newMacPoolId.equals(cluster.getMacPoolId())); if (macPoolChanged) { moveMacs.migrateMacsToAnotherMacPool(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()); cluster.setMacPoolId(newMacPoolId); clusterDao.update(cluster); } } } }
public void migrateMacsToAnotherMacPoolIfNeeded(org.ovirt.engine.core.common.businessentities.Cluster sourceCluster, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceCluster); java.util.Objects.requireNonNull(targetMacPoolId); java.util.Objects.requireNonNull(commandContext); org.ovirt.engine.core.compat.Guid sourceMacPoolId = java.util.Objects.requireNonNull(sourceCluster.getMacPoolId()); org.ovirt.engine.core.compat.Guid clusterId = java.util.Objects.requireNonNull(sourceCluster.getId()); boolean macPoolChanged = !(sourceMacPoolId.equals(targetMacPoolId)); if (macPoolChanged) { java.util.List<java.lang.String> macsToMigrate = getMacsForClusterId(clusterId); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macsToMigrate, commandContext); } }	public void migrateMacsToAnotherMacPool(org.ovirt.engine.core.common.businessentities.Cluster sourceCluster, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceCluster); java.util.Objects.requireNonNull(targetMacPoolId); java.util.Objects.requireNonNull(commandContext); org.ovirt.engine.core.compat.Guid sourceMacPoolId = java.util.Objects.requireNonNull(sourceCluster.getMacPoolId()); org.ovirt.engine.core.compat.Guid clusterId = java.util.Objects.requireNonNull(sourceCluster.getId()); boolean macPoolChanged = !(sourceMacPoolId.equals(targetMacPoolId)); if (macPoolChanged) { java.util.List<java.lang.String> macsToMigrate = getMacsForClusterId(clusterId); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macsToMigrate, commandContext); } }
@org.junit.Test public void testGetMacsFromAllClusters() { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = java.util.Arrays.asList(createClusterAndMockMacs(sourceMacPoolId, java.util.Collections.singletonList("mac1")), createClusterAndMockMacs(targetMacPoolId, java.util.Collections.singletonList("mac2")), createClusterAndMockMacs(sourceMacPoolId, java.util.Collections.singletonList("mac1")), createClusterAndMockMacs(targetMacPoolId, java.util.Collections.singletonList("mac2"))); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = ACTION_TYPE_FAILED_CANNOT_MIGRATE_MACS_DUE_TO_DUPLICATES; java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, java.util.Collections.singleton("mac1")); assertThat(underTest.canMigrateMacsToAnotherMacPool(clusters, targetMacPoolId), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(engineMessage, replacements)); }	@org.junit.Test public void canMigrateMacsToAnotherMacPoolWithMultipleClusters() { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = java.util.Arrays.asList(createClusterAndMockMacs(sourceMacPoolId, java.util.Collections.singletonList("mac1")), createClusterAndMockMacs(targetMacPoolId, java.util.Collections.singletonList("mac2")), createClusterAndMockMacs(sourceMacPoolId, java.util.Collections.singletonList("mac1")), createClusterAndMockMacs(targetMacPoolId, java.util.Collections.singletonList("mac2"))); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = ACTION_TYPE_FAILED_CANNOT_MIGRATE_MACS_DUE_TO_DUPLICATES; java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, java.util.Collections.singleton("mac1")); assertThat(underTest.canMigrateMacsToAnotherMacPool(clusters, targetMacPoolId), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(engineMessage, replacements)); }
private void initNetworkList(org.ovirt.engine.core.compat.Guid dataCenterId) { startProgress(); org.ovirt.engine.core.common.queries.IdQueryParameters queryParams = new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(QueryType.GetAllNetworks, queryParams, new org.ovirt.engine.ui.uicommonweb.models.profiles.AsyncQuery<org.ovirt.engine.core.common.queries.QueryReturnValue>(( returnValue) -> { Collection<org.ovirt.engine.core.common.businessentities.network.Network> networks = returnValue.getReturnValue(); org.ovirt.engine.core.common.businessentities.network.Network oldSelectedNetwork = getNetwork().getSelectedItem(); getNetwork().setItems(networks); updateNetworks(networks); if (oldSelectedNetwork != null) { org.ovirt.engine.core.common.businessentities.network.Network newSelectedNetwork = networks.stream().filter(( network) -> java.util.Objects.equals(network.getId(), oldSelectedNetwork.getId())).findFirst().get(); if (!(getNetwork().getSelectedItem().getId().equals(newSelectedNetwork.getId()))) { getNetwork().setSelectedItem(newSelectedNetwork); } } stopProgress(); })); }	private void initNetworkList(org.ovirt.engine.core.compat.Guid dataCenterId) { startProgress(); org.ovirt.engine.core.common.queries.IdQueryParameters queryParams = new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(QueryType.GetAllNetworks, queryParams, new org.ovirt.engine.ui.uicommonweb.models.profiles.AsyncQuery<org.ovirt.engine.core.common.queries.QueryReturnValue>(( returnValue) -> { Collection<org.ovirt.engine.core.common.businessentities.network.Network> networks = returnValue.getReturnValue(); getNetwork().setItems(networks); updateNetworks(networks); stopProgress(); })); }
protected void createAdditionalInfoPanel() { additionalInfoPanel.add(createDetailAdditionalInfo()); additionalInfoPanel.add(createStatisticsAdditionalInfo()); }	protected void createAdditionalInfoPanel() { detailedInfoContainer = new org.gwtbootstrap3.client.ui.Container(); detailedInfoContainer.add(createLogicalNetworkInfo(getEntity().getInterfaces().get(0))); additionalInfoPanel.add(this.detailedInfoContainer); }
@java.lang.Override public void restoreStateFromViewItem(org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel> originalViewItem) { org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListViewItem original = ((org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListViewItem) (originalViewItem)); setVlanExpanded(original.getVlanState()); setStatisticsExpanded(original.getStatisticsState()); }	@java.lang.Override public void restoreStateFromViewItem(org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel> originalViewItem) { if (originalViewItem instanceof org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListViewItem) { setLogicalNetworkExpanded(((org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListViewItem) (originalViewItem)).getLogicalNetworkState()); } }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createBodyPanel(java.lang.String header, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel entity) { descriptionHeaderPanel.getElement().setInnerHTML(header); descriptionHeaderPanel.add(createLinkStatusPanel(isInterfaceUp())); createAdditionalInfoPanel(); return bodyPanel; }	@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createBodyPanel(java.lang.String header, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel entity) { checkBoxPanel.add(createInterfaceStatusPanel(isInterfaceUp())); descriptionHeaderPanel.getElement().setInnerHTML(header); interfaceIconSpan = new org.gwtbootstrap3.client.ui.html.Span(); descriptionHeaderPanel.add(interfaceIconSpan); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface networkInterface = getNetworkInterface(); if (((networkInterface.getLabels()) != null) && (!(networkInterface.getLabels().isEmpty()))) { interfaceIconSpan.add(createHasLabelStatusPanel()); } createAdditionalInfoPanel(); return bodyPanel; }
@java.lang.Override protected void hideAllDetails() { detailExpand.toggleExpanded(false); statisticsExpand.toggleExpanded(false); }	@java.lang.Override protected void hideAllDetails() { logicalNetworkExpand.toggleExpanded(false); }
public boolean getStatisticsState() { return statisticsExpand.isActive(); }	@java.lang.Override protected void toggleExpanded() { if (!(logicalNetworkExpand.isActive())) { listGroupItem.removeStyleName(PatternflyConstants.PF_LIST_VIEW_EXPAND_ACTIVE); } else { listGroupItem.addStyleName(PatternflyConstants.PF_LIST_VIEW_EXPAND_ACTIVE); } }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createBodyPanel(java.lang.String header, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel entity) { com.google.gwt.user.client.ui.IsWidget result = super.createBodyPanel(header, entity); statusPanel.add(getInterfaceNamesPanel(entity.getInterfaces())); return result; }	@java.lang.Override protected void cycleExpanded() { super.cycleExpanded(); setSlavesExpanded((!(getLogicalNetworkState()))); }
private com.google.gwt.user.client.ui.IsWidget createStatisticsAdditionalInfo() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); panel.addStyleName(PatternflyConstants.PF_LIST_VIEW_ADDITIONAL_INFO_ITEM); statisticsExpand = new org.ovirt.engine.ui.common.widget.listgroup.ExpandableListViewItem(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListViewItem.constants.statistics(), null); getClickHandlerRegistrations().add(statisticsExpand.addClickHandler(this)); panel.add(statisticsExpand); return panel; }	private com.google.gwt.user.client.ui.IsWidget createDetailAdditionalInfo() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.HostVLan> logicalNetworks = calculateLogicalNetworks(getEntity()); java.util.List<com.google.gwt.user.client.ui.IsWidget> icons = new java.util.ArrayList<>(); if (containsManagement(logicalNetworks)) { icons.add(createManagementStatusPanel()); } if (containsOutOfSync(logicalNetworks)) { icons.add(createNeedsSyncStatusPanel()); } java.lang.String logicalNetworksText = ((logicalNetworks.size()) == 1) ? org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListViewItem.constants.logicalNetwork() : org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListViewItem.messages.logicalNetworks(logicalNetworks.size()); logicalNetworkExpand = new org.ovirt.engine.ui.common.widget.listgroup.ExpandableListViewItem(logicalNetworksText, icons); getClickHandlerRegistrations().add(logicalNetworkExpand.addClickHandler(this)); panel.add(logicalNetworkExpand); return panel; }
private java.lang.String createActiveBondTooltipMessage(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { java.util.List<java.lang.String> bondProperties = new java.util.ArrayList<>(); java.lang.String adPartnerMac = java.util.Objects.toString(bond.getAdPartnerMac(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.messages.bondAdPartnerMac(adPartnerMac)); java.lang.String adAggregatorId = java.util.Objects.toString(bond.getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.messages.bondAdAggregatorId(adAggregatorId)); for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface nic : lineModel.getInterfaces()) { java.lang.String nicName = nic.getName(); java.lang.String nicAggregatorId = java.util.Objects.toString(nic.getInterface().getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.messages.bondSlaveAdAggregatorId(nicName, nicAggregatorId)); } return org.ovirt.engine.ui.uicompat.external.StringUtils.join(bondProperties, "\n"); }	private java.lang.String createActiveBondTooltipMessage(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { java.util.List<java.lang.String> bondProperties = new java.util.ArrayList<>(); java.lang.String adPartnerMac = java.util.Objects.toString(bond.getAdPartnerMac(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.messages.bondAdPartnerMac(adPartnerMac)); java.lang.String adAggregatorId = java.util.Objects.toString(bond.getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.messages.bondAdAggregatorId(adAggregatorId)); for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface nic : lineModel.getInterfaces()) { java.lang.String nicName = nic.getName(); java.lang.String nicAggregatorId = java.util.Objects.toString(nic.getInterface().getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.messages.bondSlaveAdAggregatorId(nicName, nicAggregatorId)); } return java.lang.String.join("\n", bondProperties); }
private boolean isAdPartnerMacValid(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.core.common.businessentities.VDS vds) { java.lang.String partnerMac = bond.getAdPartnerMac(); boolean isAdPartnerMacEmpty = ((partnerMac == null) || (partnerMac.isEmpty())) || (partnerMac.equals(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.INVALID_AD_PARTNER_MAC)); boolean isIfcUp = InterfaceStatus.UP.equals(bond.getStatistics().getStatus()); boolean isBond4 = BondMode.BOND4.equals(org.ovirt.engine.core.common.businessentities.network.BondMode.parseBondMode(bond.getBondOptions())); boolean isAdPartnerSupportedForCluster = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.AdPartnerMacSupported, vds.getClusterCompatibilityVersion().getValue()))); return (((!isAdPartnerMacEmpty) || (!isIfcUp)) || (!isBond4)) || (!isAdPartnerSupportedForCluster); }	private boolean isAdPartnerMacValid(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.core.common.businessentities.VDS vds) { java.lang.String partnerMac = bond.getAdPartnerMac(); boolean isAdPartnerMacEmpty = ((partnerMac == null) || (partnerMac.isEmpty())) || (partnerMac.equals(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.INVALID_AD_PARTNER_MAC)); boolean isIfcUp = InterfaceStatus.UP.equals(bond.getStatistics().getStatus()); boolean isBond4 = BondMode.BOND4.equals(org.ovirt.engine.core.common.businessentities.network.BondMode.parseBondMode(bond.getBondOptions())); boolean isAdPartnerSupportedForCluster = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigValues.AdPartnerMacSupported, vds.getClusterCompatibilityVersion().getValue()))); return (((!isAdPartnerMacEmpty) || (!isIfcUp)) || (!isBond4)) || (!isAdPartnerSupportedForCluster); }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createIcon() { org.ovirt.engine.core.common.businessentities.network.InterfaceStatus interfaceStatus = getEntity().getInterface().getStatistics().getStatus(); com.google.gwt.safehtml.shared.SafeHtml bondPropertiesMessage = createBondTooltipMessage(getEntity(), interfaceStatus); com.google.gwt.safehtml.shared.SafeHtml bondMessage = org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.templates.italicWordWrapMaxWidthWithBoldTitle(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.constants.bondProperties(), bondPropertiesMessage); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip iconTooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(new org.ovirt.engine.ui.common.widget.uicommon.network.BondedNetworkIcon(getEntity())); iconTooltip.setHtml(bondMessage); iconPanel.add(iconTooltip); return iconPanel; }	@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createIcon() { org.ovirt.engine.core.common.businessentities.network.InterfaceStatus interfaceStatus = getEntity().getInterface().getStatistics().getStatus(); com.google.gwt.safehtml.shared.SafeHtml bondPropertiesMessage = createBondTooltipMessage(getEntity(), interfaceStatus); com.google.gwt.safehtml.shared.SafeHtml bondMessage = org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.templates.italicWordWrapMaxWidthWithBoldTitle(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.constants.bondProperties(), bondPropertiesMessage); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip iconTooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(new org.ovirt.engine.ui.common.widget.uicommon.network.BondedNetworkIcon()); iconTooltip.setHtml(bondMessage); iconPanel.add(iconTooltip); return iconPanel; }
protected org.gwtbootstrap3.client.ui.constants.ColumnSize calculateColSize(int itemCount) { if ((itemCount % 4) == 3) { return org.gwtbootstrap3.client.ui.constants.ColumnSize.MD_2; } return org.gwtbootstrap3.client.ui.constants.ColumnSize.MD_2; }	protected org.gwtbootstrap3.client.ui.constants.ColumnSize calculateColSize(int index) { if (index == 3) { return org.gwtbootstrap3.client.ui.constants.ColumnSize.MD_2; } return org.gwtbootstrap3.client.ui.constants.ColumnSize.MD_3; }
void initTable() { pfActionPanel.addButtonToActionGroup(table.addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel>(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.setupHostNetworksInterface()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getSetupNetworksCommand(); } })); pfActionPanel.addButtonToActionGroup(table.addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel>(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.saveNetConfigInterface()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getSaveNetworkConfigCommand(); } })); pfActionPanel.addButtonToActionGroup(table.addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel>(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.syncAllHostNetworks()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getSyncAllHostNetworksCommand(); } })); }	@java.lang.Override public void expandAll() { hostInterfaceListView.expandAll(); }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createBodyPanel(java.lang.String header, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { descriptionHeaderPanel.getElement().setInnerHTML(header); statusPanel.add(createLinkStatusPanel((networkInterface != null ? networkInterface.isLinked() : false))); statusPanel.add(createCardPluggedStatusPanel((networkInterface != null ? networkInterface.isPlugged() : false))); createAdditionalInfoPanel(); return bodyPanel; }	@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createBodyPanel(java.lang.String header, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { checkBoxPanel.add(createLinkStatusPanel(isInterfaceUp(networkInterface))); checkBoxPanel.add(createCardPluggedStatusPanel(isCardPlugged(networkInterface))); descriptionHeaderPanel.getElement().setInnerText(header); createAdditionalInfoPanel(); return bodyPanel; }
private void updateInfoPanel() { if ((getModel().getItems()) instanceof java.util.List) { clearClickHandlers(); selectionModel.clear(); org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.clear(); int i = 0; java.util.List<org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T>> newCurrentState = new java.util.ArrayList<>(); for (T item : getModel().getItems()) { org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T> newItem = creator.createListViewItem(item); handlerRegistrations.add(newItem.addClickHandler(this)); if (i < (currentState.size())) { restoreState(currentState.get(i), newItem); if (i == (selectedIndex)) { newItem.addStyleName(Styles.ACTIVE); } } newCurrentState.add(newItem); add(newItem.asListGroupItem()); i++; } currentState.clear(); currentState = newCurrentState; if ((org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.getWidgetCount()) == 0) { org.gwtbootstrap3.client.ui.ListGroupItem noItems = new org.gwtbootstrap3.client.ui.ListGroupItem(); noItems.addStyleName(Styles.LIST_GROUP_ITEM_HEADING); noItems.setText(org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.constants.noItemsToDisplay()); add(noItems); } restoreSelection(selectedIndex); } }	private void updateInfoPanel() { if ((getModel().getItems()) instanceof java.util.List) { clearClickHandlers(); selectionModel.clear(); org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.clear(); int i = 0; java.util.List<org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T>> newCurrentState = new java.util.ArrayList<>(); for (T item : getModel().getItems()) { org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T> newItem = creator.createListViewItem(item); handlerRegistrations.add(newItem.addClickHandler(this)); if (i < (currentState.size())) { restoreState(currentState.get(i), newItem); if (i == (selectedIndex)) { newItem.asListGroupItem().addStyleName(Styles.ACTIVE); } } newCurrentState.add(newItem); add(newItem.asListGroupItem()); i++; } currentState.clear(); currentState = newCurrentState; if ((org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.getWidgetCount()) == 0) { org.gwtbootstrap3.client.ui.ListGroupItem noItems = new org.gwtbootstrap3.client.ui.ListGroupItem(); noItems.addStyleName(Styles.LIST_GROUP_ITEM_HEADING); noItems.setText(org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.constants.noItemsToDisplay()); add(noItems); } restoreSelection(selectedIndex); } }
public void setStatisticsExpanded(boolean value) { statisticsExpand.toggleExpanded(value); toggleExpanded(); }	@java.lang.Override protected void toggleExpanded(boolean expand) { setLogicalNetworkExpanded(expand); }
private boolean isInSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails) { boolean managed = false; boolean sync = false; if (networkImplementationDetails != null) { managed = networkImplementationDetails.isManaged(); sync = networkImplementationDetails.isInSync(); } return managed && (!sync); }	private boolean isOutOfSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails) { boolean managed = false; boolean sync = false; if (networkImplementationDetails != null) { managed = networkImplementationDetails.isManaged(); sync = networkImplementationDetails.isInSync(); } return managed && (!sync); }
public boolean getVlanState() { return detailExpand.isActive(); }	public boolean getLogicalNetworkState() { return logicalNetworkExpand.isActive(); }
protected com.google.gwt.user.client.ui.IsWidget createLinkStatusPanel(boolean isLinked) { return new org.ovirt.engine.ui.common.widget.uicommon.vm.LinkStatusPanel(isLinked); }	protected com.google.gwt.user.client.ui.IsWidget createInterfaceStatusPanel(boolean isUp) { org.ovirt.engine.ui.common.widget.uicommon.vm.IconStatusPanel iconStatusPanel = new org.ovirt.engine.ui.common.widget.uicommon.vm.IconStatusPanel((isUp ? org.gwtbootstrap3.client.ui.constants.IconType.ARROW_CIRCLE_O_UP : org.gwtbootstrap3.client.ui.constants.IconType.ARROW_CIRCLE_O_DOWN)); iconStatusPanel.addStyleName(org.ovirt.engine.ui.webadmin.widget.host.DOUBLE_SIZE); iconStatusPanel.getElement().getStyle().setColor((isUp ? GREEN : RED)); return iconStatusPanel; }
private com.google.gwt.user.client.ui.IsWidget createDetailAdditionalInfo() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); panel.addStyleName(PatternflyConstants.PF_LIST_VIEW_ADDITIONAL_INFO_ITEM); detailExpand = new org.ovirt.engine.ui.common.widget.listgroup.ExpandableListViewItem(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListViewItem.constants.details(), null); getClickHandlerRegistrations().add(detailExpand.addClickHandler(this)); panel.add(detailExpand); return panel; }	private com.google.gwt.user.client.ui.IsWidget createLogicalNetworkInfo(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = getNetworkInterface(); org.gwtbootstrap3.client.ui.Row networkRow = new org.gwtbootstrap3.client.ui.Row(); networkRow.addStyleName(PatternflyConstants.PF_LIST_VIEW_ADDITIONAL_INFO_ITEM); networkRow.add(createMacColumn(vdsNetworkInterface)); networkRow.add(createRxColumn(hostInterface)); networkRow.add(createTxColumn(hostInterface)); networkRow.add(createSpeedColumn(vdsNetworkInterface)); networkRow.add(createDropRateColumn(hostInterface)); return networkRow; }
private void setIcon(java.lang.String iconCss) { if (!(org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(iconCss))) { org.gwtbootstrap3.client.ui.html.Span iconPanel = new org.gwtbootstrap3.client.ui.html.Span(); iconPanel.addStyleName(getBaseStyle(iconCss)); iconPanel.addStyleName(iconCss); add(iconPanel); } }	private void addIcon(java.lang.String iconCss) { if ((iconCss != null) && (!(iconCss.isEmpty()))) { org.gwtbootstrap3.client.ui.html.Span iconPanel = new org.gwtbootstrap3.client.ui.html.Span(); iconPanel.addStyleName(getBaseStyle(iconCss)); iconPanel.addStyleName(iconCss); iconPanel.addStyleName(PatternflyConstants.LIST_VIEW_ICON_PANEL); add(iconPanel); } }
public void setVlanExpanded(boolean value) { detailExpand.toggleExpanded(value); toggleExpanded(); }	public void setLogicalNetworkExpanded(boolean value) { logicalNetworkExpand.toggleExpanded(value); toggleExpanded(); }
private com.google.gwt.user.client.ui.IsWidget createLinkStatusPanel(boolean isLinked) { return new org.ovirt.engine.ui.common.widget.uicommon.vm.LinkStatusPanel(isLinked); }	private com.google.gwt.user.client.ui.IsWidget createLinkStatusPanel(boolean isLinked) { org.ovirt.engine.ui.common.widget.uicommon.vm.IconStatusPanel iconStatusPanel = new org.ovirt.engine.ui.common.widget.uicommon.vm.IconStatusPanel((isLinked ? org.gwtbootstrap3.client.ui.constants.IconType.ARROW_CIRCLE_O_UP : org.gwtbootstrap3.client.ui.constants.IconType.ARROW_CIRCLE_O_DOWN)); iconStatusPanel.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.DOUBLE_SIZE); iconStatusPanel.getElement().getStyle().setColor((isLinked ? GREEN : RED)); return iconStatusPanel; }
private com.google.gwt.user.client.ui.IsWidget getInterfaceNamesPanel(java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface> bondInterfaces) { com.google.gwt.user.client.ui.FlowPanel interfaceNamesPanel = new com.google.gwt.user.client.ui.FlowPanel(); interfaceNamesPanel.addStyleName(PatternflyConstants.PF_LIST_VIEW_DESCRIPTION); for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface : bondInterfaces) { com.google.gwt.user.client.ui.FlowPanel hostInterfacePanel = new com.google.gwt.user.client.ui.FlowPanel(); hostInterfacePanel.getElement().setInnerSafeHtml(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(hostInterface.getName())); hostInterfacePanel.add(createLinkStatusPanel(((hostInterface.getStatus()) == (org.ovirt.engine.core.common.businessentities.network.InterfaceStatus.UP)))); interfaceNamesPanel.add(hostInterfacePanel); } return interfaceNamesPanel; }	@java.lang.Override public void restoreStateFromViewItem(org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel> originalViewItem) { super.restoreStateFromViewItem(originalViewItem); if (originalViewItem instanceof org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem) { setSlavesExpanded(((org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem) (originalViewItem)).getSlavesState()); } }
private void updateProperties() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getEntity(); setImage(disk.getDiskStorageType().isInternal()); setLun(((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN))); setAlias(disk.getDiskAlias()); setDescription(disk.getDiskDescription()); setDiskId(disk.getId().toString()); if ((disk.getLastAlignmentScan()) != null) { java.lang.String lastScanDate = com.google.gwt.i18n.client.DateTimeFormat.getFormat("yyyy-MM-dd, HH:mm").format(disk.getLastAlignmentScan()); setAlignment(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().diskAlignment(disk.getAlignment().toString(), lastScanDate)); } else { setAlignment(disk.getAlignment().toString()); } setWipeAfterDelete(disk.isWipeAfterDelete()); if (isImage()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); setDiskProfileName(safeJoin(diskImage.getDiskProfileNames())); setQuotaName(safeJoin(diskImage.getQuotaNames())); setQuotaAvailable((!(diskImage.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)))); } else if (isLun()) { org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk = ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (disk)); setLunId(lunDisk.getLun().getLUNId()); } }	private void updateProperties() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getEntity(); setImage(disk.getDiskStorageType().isInternal()); setLun(((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN))); setAlias(disk.getDiskAlias()); setDescription(disk.getDiskDescription()); setDiskId(disk.getId().toString()); if ((disk.getLastAlignmentScan()) != null) { java.lang.String lastScanDate = com.google.gwt.i18n.client.DateTimeFormat.getFormat("yyyy-MM-dd, HH:mm").format(disk.getLastAlignmentScan()); setAlignment(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().diskAlignment(disk.getAlignment().toString(), lastScanDate)); } else { setAlignment(disk.getAlignment().toString()); } setWipeAfterDelete(disk.isWipeAfterDelete()); if (isImage()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); setDiskProfileName(org.ovirt.engine.core.compat.StringHelper.nullSafeJoin(",", diskImage.getDiskProfileNames())); setQuotaName(org.ovirt.engine.core.compat.StringHelper.nullSafeJoin(",", diskImage.getQuotaNames())); setQuotaAvailable((!(diskImage.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)))); } else if (isLun()) { org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk = ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (disk)); setLunId(lunDisk.getLun().getLUNId()); } }
@java.lang.Override public java.util.Map<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.Model> getWindowProperties() { java.util.Map<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.Model> map = super.getWindowProperties(); map.put(org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.DISK_WINDOW, getDiskWindow()); return map; }	private void getAttachedTagsToSelectedVMs(final org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel model) { java.util.ArrayList<org.ovirt.engine.core.compat.Guid> vmIds = new java.util.ArrayList<>(); for (java.lang.Object item : org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (item)); vmIds.add(vm.getId()); } attachedTagsToEntities = new java.util.HashMap(); allAttachedTags = new java.util.ArrayList(); selectedItemsCounter = 0; for (org.ovirt.engine.core.compat.Guid id : vmIds) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getAttachedTagsToVm(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { allAttachedTags.addAll(returnValue); (selectedItemsCounter)++; if ((selectedItemsCounter) == (getSelectedItems().size())) { postGetAttachedTags(model); } }), id); } }
private void registerHandlers() { model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ((Model.PROP_WINDOW.equals(propName)) && ((model.getWindow()) == null)) { if (model.getSpecificClusterQuota().getEntity()) { quotaClusterTable.asEditor().edit(model.getAllDataCenterClusters()); } else { quotaClusterTable.asEditor().edit(model.getQuotaClusters()); } if (model.getSpecificStorageQuota().getEntity()) { quotaStorageTable.asEditor().edit(model.getAllDataCenterStorages()); } else { quotaStorageTable.asEditor().edit(model.getQuotaStorages()); } } } }); model.getSpecificClusterQuota().getEntityChangedEvent().addListener(clusterListener); model.getSpecificStorageQuota().getEntityChangedEvent().addListener(storageListener); }	private void registerHandlers() { model.getPropertyChangedEvent().addListener(( ev, sender, args) -> { java.lang.String propName = args.propertyName; if ((Model.PROP_WINDOW.equals(propName)) && ((model.getWindow()) == null)) { if (model.getSpecificClusterQuota().getEntity()) { quotaClusterTable.asEditor().edit(model.getAllDataCenterClusters()); } else { quotaClusterTable.asEditor().edit(model.getQuotaClusters()); } if (model.getSpecificStorageQuota().getEntity()) { quotaStorageTable.asEditor().edit(model.getAllDataCenterStorages()); } else { quotaStorageTable.asEditor().edit(model.getQuotaStorages()); } } }); model.getSpecificClusterQuota().getEntityChangedEvent().addListener(clusterListener); model.getSpecificStorageQuota().getEntityChangedEvent().addListener(storageListener); }
@java.lang.Override public void setWindowProperty(java.lang.String propName, org.ovirt.engine.ui.uicommonweb.models.Model value) { if (org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.DISK_WINDOW.equals(propName)) { setDiskWindow(value); } else { super.setWindowProperty(propName, value); } }	private boolean isHeadlessModeChanged(org.ovirt.engine.core.common.businessentities.VM source, org.ovirt.engine.core.common.action.VmManagementParametersBase updateVmParameters) { return ((source.getDefaultDisplayType()) != (updateVmParameters.getVmStaticData().getDefaultDisplayType())) && (((source.getDefaultDisplayType()) == (org.ovirt.engine.core.common.businessentities.DisplayType.none)) || ((updateVmParameters.getVmStaticData().getDefaultDisplayType()) == (org.ovirt.engine.core.common.businessentities.DisplayType.none))); }
public void addDialogModelListener(final M model) { init(model); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(model, propName, windowPopupInstances.get(propName), false); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(model, propName, confirmWindowPopupInstances.get(propName), true); } } }); }	public void initDialogModelListener(M model) { assert !(initialized) : "Trying to re-initialize dialog model listener"; windowPropertyNames.clear(); windowPropertyNames.addAll(model.getWindowProperties().keySet()); confirmWindowPropertyNames.clear(); confirmWindowPropertyNames.addAll(model.getConfirmWindowProperties().keySet()); windowPopupInstances.clear(); for (java.lang.String propName : windowPropertyNames) { windowPopupInstances.put(propName, null); } confirmWindowPopupInstances.clear(); for (java.lang.String propName : confirmWindowPropertyNames) { confirmWindowPopupInstances.put(propName, null); } model.getPropertyChangedEvent().addListener(( ev, sender, args) -> { java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(model, propName, windowPopupInstances.get(propName), false); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(model, propName, confirmWindowPopupInstances.get(propName), true); } }); initialized = true; }
@java.lang.Override protected void onReveal() { org.ovirt.engine.ui.uicompat.Event<org.ovirt.engine.ui.uicompat.EventArgs> entityChangedEvent = getModel().getDiskViewType().getEntityChangedEvent(); if (!(entityChangedEvent.getListeners().contains(getView().getDiskTypeChangedEventListener()))) { entityChangedEvent.addListener(getView().getDiskTypeChangedEventListener()); } org.ovirt.engine.ui.uicompat.Event<org.ovirt.engine.ui.uicompat.EventArgs> diskContentTypeEntityChangedEvent = getModel().getDiskContentType().getEntityChangedEvent(); if (!(diskContentTypeEntityChangedEvent.getListeners().contains(getView().getDiskTypeChangedEventListener()))) { diskContentTypeEntityChangedEvent.addListener(getView().getDiskContentTypeChangedEventListener()); } super.onReveal(); getView().handleQuotaColumnVisibility(); }	@java.lang.Override protected void onReveal() { super.onReveal(); getView().handleQuotaColumnVisibility(); }
void initTableOverhead() { disksViewRadioGroup = new org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewRadioGroup(); disksViewRadioGroup.setClickHandler(clickHandler); disksContentTypeRadioGroup = new org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup(); disksContentTypeRadioGroup.setClickHandler(( event) -> { if (((com.google.gwt.user.client.ui.RadioButton) (event.getSource())).getValue()) { getMainModel().getDiskContentType().setEntity(disksContentTypeRadioGroup.getDiskContentType()); } }); com.google.gwt.user.client.ui.HorizontalPanel overheadPanel = new com.google.gwt.user.client.ui.HorizontalPanel(); overheadPanel.add(disksViewRadioGroup); overheadPanel.add(disksContentTypeRadioGroup); getTable().setTableOverhead(overheadPanel); }	void initTableOverhead() { disksViewRadioGroup = new org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewRadioGroup(); disksViewRadioGroup.addChangeHandler(diskViewTypeChange); disksContentTypeRadioGroup = new org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup(); disksContentTypeRadioGroup.addChangeHandler(diskContentViewTypeChange); com.google.gwt.user.client.ui.FlowPanel overheadPanel = new com.google.gwt.user.client.ui.FlowPanel(); overheadPanel.add(disksViewRadioGroup); overheadPanel.add(disksContentTypeRadioGroup); getTable().setTableOverhead(overheadPanel); }
public void setClickHandler(com.google.gwt.event.dom.client.ClickHandler clickHandler) { for (com.google.gwt.user.client.ui.RadioButton button : buttonToType.keySet()) { button.addClickHandler(clickHandler); } }	public void addChangeHandler(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.DisksContentViewChangeHandler handler) { if (!(changeHandlers.contains(handler))) { changeHandlers.add(handler); } }
private com.google.gwt.user.client.ui.Widget getRadioGroupPanel() { buttonToType = new java.util.LinkedHashMap(); com.google.gwt.user.client.ui.RadioButton allButton = new com.google.gwt.user.client.ui.RadioButton("diskContentTypeView"); buttonToType.put(allButton, null); allButton.setText(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.constants.allDisksLabel()); for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { com.google.gwt.user.client.ui.RadioButton button = new com.google.gwt.user.client.ui.RadioButton("diskContentTypeView"); buttonToType.put(button, contentType); } com.google.gwt.user.client.ui.FlowPanel buttonsPanel = new com.google.gwt.user.client.ui.FlowPanel(); buttonsPanel.getElement().getStyle().setProperty("marginLeft", "auto"); buttonsPanel.getElement().getStyle().setProperty("marginRight", "auto"); for (com.google.gwt.user.client.ui.RadioButton button : buttonToType.keySet()) { button.getElement().getStyle().setMarginRight(20, Style.Unit.PX); buttonsPanel.add(button); } setDiskContentType(null); localize(); return buttonsPanel; }	private com.google.gwt.user.client.ui.Widget getRadioGroupPanel() { buttonToType = new java.util.LinkedHashMap(); org.gwtbootstrap3.client.ui.RadioButton allButton = new org.gwtbootstrap3.client.ui.RadioButton(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.BUTTON_GROUP_NAME); buttonToType.put(allButton, null); allButton.setText(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.constants.allDisksLabel()); for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { org.gwtbootstrap3.client.ui.RadioButton button = new org.gwtbootstrap3.client.ui.RadioButton(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.BUTTON_GROUP_NAME); buttonToType.put(button, contentType); } org.gwtbootstrap3.client.ui.ButtonGroup buttonGroup = new org.gwtbootstrap3.client.ui.ButtonGroup(); buttonGroup.setDataToggle(Toggle.BUTTONS); buttonToType.entrySet().forEach(( e) -> { buttonGroup.add(e.getKey()); e.getKey().addClickHandler(( event) -> fireChangeHandlers(e.getValue())); }); setDiskContentType(null); localize(); buttonGroup.addStyleName("disk-type-buttons-group"); return buttonGroup; }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getSelectedItems())) : null; boolean shouldAllowEdit = true; if (disk != null) { shouldAllowEdit = (!(disk.isOvfStore())) && (!(isDiskLocked(disk))); } getNewCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk != null) && (disks != null)) && ((disks.size()) == 1)) && shouldAllowEdit)); getRemoveCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isRemoveCommandAvailable()))); getScanAlignmentCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isScanAlignmentCommandAvailable()))); getExportCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveCommandAvailability(disks); getCancelUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isCancelAllowed(disks)); getPauseUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isPauseAllowed(disks)); getResumeUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isResumeAllowed(disks)); getDownloadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.DownloadImageModel.isDownloadAllowed(disks)); }	private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getSelectedItems())) : null; boolean shouldAllowEdit = true; if (disk != null) { shouldAllowEdit = (!(disk.isOvfStore())) && (!(isDiskLocked(disk))); } getNewCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk != null) && (disks != null)) && ((disks.size()) == 1)) && shouldAllowEdit)); getRemoveCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isRemoveCommandAvailable()))); getScanAlignmentCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isScanAlignmentCommandAvailable()))); getExportCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveCommandAvailability(disks); getCancelUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isCancelAllowed(disks)); getPauseUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isPauseAllowed(disks)); getResumeUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isResumeAllowed(disks)); getDownloadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.DownloadImageHandler.isDownloadAllowed(disks)); getStopDownloadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.DownloadImageHandler.isStopDownloadAllowed(disks)); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getNewCommand())) { newEntity(); } else if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getMoveCommand())) { move(); } else if (command == (getCopyCommand())) { copy(); } else if (command == (getScanAlignmentCommand())) { scanAlignment(); } else if (command == (getExportCommand())) { export(); } else if ((RemoveDiskModel.CANCEL_REMOVE.equals(command.getName())) || ("Cancel".equals(command.getName()))) { cancel(); } else if ("CancelConfirm".equals(command.getName())) { cancelConfirm(); } else if (RemoveDiskModel.ON_REMOVE.equals(command.getName())) { onRemove(); } else if (command == (getChangeQuotaCommand())) { changeQuota(); } else if (command.getName().equals("onChangeQuota")) { onChangeQuota(); } else if (command == (getUploadCommand())) { upload(); } else if (command == (getCancelUploadCommand())) { cancelUpload(); } else if ("OnCancelUpload".equals(command.getName())) { onCancelUpload(); } else if (command == (getPauseUploadCommand())) { pauseUpload(); } else if (command == (getResumeUploadCommand())) { resumeUpload(); } else if (command == (getDownloadCommand())) { download(); } }	@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getNewCommand())) { newEntity(); } else if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getMoveCommand())) { move(); } else if (command == (getCopyCommand())) { copy(); } else if (command == (getScanAlignmentCommand())) { scanAlignment(); } else if (command == (getExportCommand())) { export(); } else if ((RemoveDiskModel.CANCEL_REMOVE.equals(command.getName())) || ("Cancel".equals(command.getName()))) { cancel(); } else if ("CancelConfirm".equals(command.getName())) { cancelConfirm(); } else if (RemoveDiskModel.ON_REMOVE.equals(command.getName())) { onRemove(); } else if (command == (getChangeQuotaCommand())) { changeQuota(); } else if (command.getName().equals("onChangeQuota")) { onChangeQuota(); } else if (command == (getUploadCommand())) { upload(); } else if (command == (getCancelUploadCommand())) { cancelUpload(); } else if ("OnCancelUpload".equals(command.getName())) { onCancelUpload(); } else if (command == (getPauseUploadCommand())) { pauseUpload(); } else if (command == (getResumeUploadCommand())) { resumeUpload(); } else if (command == (getDownloadCommand())) { download(); } else if (command == (getStopDownloadCommand())) { stopDownload(); } }
private void download() { if (((getSelectedItem()) == null) || (!((getSelectedItem()) instanceof org.ovirt.engine.core.common.businessentities.storage.DiskImage))) { return; } org.ovirt.engine.ui.uicommonweb.models.storage.DownloadImageModel model = new org.ovirt.engine.ui.uicommonweb.models.storage.DownloadImageModel(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getSelectedItem()))); model.start(); }	private void download() { org.ovirt.engine.ui.uicommonweb.models.storage.DownloadImageManager.getInstance().startDownload(getSelectedDiskImages()); }
@java.lang.Override public javax.ws.rs.core.Response remove() { org.ovirt.engine.core.common.businessentities.Provider provider = org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.getProvider(this, id); org.ovirt.engine.core.common.action.ProviderParameters parameters = new org.ovirt.engine.core.common.action.ProviderParameters(provider); parameters.setForce(isForce()); return performAction(ActionType.RemoveProvider, parameters); }	@java.lang.Override public javax.ws.rs.core.Response remove() { org.ovirt.engine.core.common.businessentities.Provider provider = org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.getProvider(this, id); org.ovirt.engine.core.common.action.ProviderParameters parameters = new org.ovirt.engine.core.common.action.ProviderParameters(provider); return performAction(ActionType.RemoveProvider, parameters); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBricks(org.ovirt.engine.core.compat.Guid volumeId) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricks = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick1 = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick1.setVolumeId(volumeId); brick1.setId(FixturesTool.GLUSTER_BRICK_UUID1); brick1.setBrickDirectory("/tmp/test-vol0"); brick1.setServerId(SERVER_ID); brick1.setStatus(GlusterStatus.UP); bricks.add(brick1); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick2 = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick2.setVolumeId(volumeId); brick2.setId(FixturesTool.GLUSTER_BRICK_UUID1); brick2.setBrickDirectory("/tmp/test-vol1"); brick2.setServerId(SERVER_ID); brick2.setStatus(GlusterStatus.UP); bricks.add(brick2); return bricks; }	protected java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBricks(org.ovirt.engine.core.compat.Guid volumeId) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricks = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick1 = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick1.setVolumeId(volumeId); brick1.setId(org.ovirt.engine.core.bll.gluster.AbstractRemoveGlusterVolumeBricksCommandTest.BRICK_UUID1); brick1.setBrickDirectory("/tmp/test-vol0"); brick1.setServerId(SERVER_ID); brick1.setStatus(GlusterStatus.UP); bricks.add(brick1); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick2 = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick2.setVolumeId(volumeId); brick2.setId(org.ovirt.engine.core.bll.gluster.AbstractRemoveGlusterVolumeBricksCommandTest.BRICK_UUID1); brick2.setBrickDirectory("/tmp/test-vol1"); brick2.setServerId(SERVER_ID); brick2.setStatus(GlusterStatus.UP); bricks.add(brick2); return bricks; }
private void onRemove(boolean force) { java.util.List<org.ovirt.engine.core.common.action.ActionParametersBase> parameterList = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.Provider provider : providers) { org.ovirt.engine.core.common.action.ProviderParameters providerParameters = new org.ovirt.engine.core.common.action.ProviderParameters(provider); providerParameters.setForce(force); parameterList.add(providerParameters); } sourceListModel.selectNextItem(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleActions(ActionType.RemoveProvider, parameterList, ( result) -> sourceListModel.getSearchCommand().execute()); cancel(); }	private void onRemove(boolean force) { java.util.List<org.ovirt.engine.core.common.action.ActionParametersBase> parameterList = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.Provider provider : providers) { parameterList.add(new org.ovirt.engine.core.common.action.ProviderParameters(provider, force)); } sourceListModel.selectNextItem(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleActions(ActionType.RemoveProvider, parameterList, ( result) -> sourceListModel.getSearchCommand().execute()); cancel(); }
private void updateActionAvailability() { java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> tempVar = getSelectedItems(); java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> selectedItems = (tempVar != null) ? tempVar : new java.util.ArrayList(); getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getForceRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getAddCommand().setIsAvailable(true); getRemoveCommand().setIsAvailable(true); getForceRemoveCommand().setIsAvailable(isSelectedProvidersOfType(ProviderType.OPENSTACK_VOLUME)); }	private void updateActionAvailability() { java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> tempVar = getSelectedItems(); java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> selectedItems = (tempVar != null) ? tempVar : new java.util.ArrayList(); getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getForceRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getAddCommand().setIsAvailable(true); getRemoveCommand().setIsAvailable(true); getForceRemoveCommand().setIsAvailable(isSelectedProviderOfType(ProviderType.OPENSTACK_VOLUME)); }
private boolean isSelectedProvidersOfType(org.ovirt.engine.core.common.businessentities.ProviderType providerType) { return ((getSelectedItems()) != null) && (getSelectedItems().stream().allMatch(( provider) -> (provider.getType()) == providerType)); }	private boolean isSelectedProviderOfType(org.ovirt.engine.core.common.businessentities.ProviderType providerType) { return (((getSelectedItems()) != null) && ((getSelectedItems().size()) == 1)) && ((getSelectedItems().get(0).getType()) == providerType); }
@java.lang.Override protected void executeCommand() { setStoragePoolId(getNetwork().getDataCenterId()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { removeVnicProfiles(); removeFromClusters(); setVdsmNamesInVdsInterfaces(); getCompensationContext().snapshotEntity(getNetwork()); networkDao.remove(getNetwork().getId()); getCompensationContext().stateChanged(); return null; }); if (getNetwork().isExternal()) { if (org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getParameters().isRemoveFromNetworkProvider()) { removeExternalNetwork(); } } if (org.ovirt.engine.core.bll.network.cluster.NetworkHelper.shouldRemoveNetworkFromHostUponNetworkRemoval(getNetwork())) { removeNetworkFromHosts(); } org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { setStoragePoolId(getNetwork().getDataCenterId()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { removeVnicProfiles(); removeFromClusters(); org.ovirt.engine.core.bll.network.dc.networkHelper.setVdsmNamesInVdsInterfaces(getNetwork()); getCompensationContext().snapshotEntity(getNetwork()); networkDao.remove(getNetwork().getId()); getCompensationContext().stateChanged(); return null; }); if (getNetwork().isExternal()) { if (org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getParameters().isRemoveFromNetworkProvider()) { removeExternalNetwork(); } } if (org.ovirt.engine.core.bll.network.cluster.NetworkHelper.shouldRemoveNetworkFromHostUponNetworkRemoval(getNetwork())) { removeNetworkFromHosts(); } org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.setSucceeded(true); }
private void setVdsmNamesInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfacesToUpdate = new java.util.LinkedList<>(); interfaces.stream().filter(( iface) -> java.util.Objects.equals(iface.getNetworkName(), network.getName())).forEach(( iface) -> { iface.setNetworkName(network.getVdsmName()); interfacesToUpdate.add(iface); }); interfaceDao.massUpdateInterfacesForVds(interfacesToUpdate); }	private void setVdsmNamesInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfacesToUpdate = new java.util.LinkedList<>(); interfaces.stream().filter(( iface) -> java.util.Objects.equals(iface.getNetworkName(), network.getName())).forEach(( iface) -> { iface.setNetworkName(network.getVdsmName()); interfacesToUpdate.add(iface); }); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getInterfaceDao().massUpdateInterfacesForVds(interfacesToUpdate); }
public void setVdsmNamesInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.compat.Guid clusterId) { setVdsmNamesInVdsInterfaces(network, interfaceDao.getAllInterfacesByClusterId(clusterId)); }	public void setVdsmNamesInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.compat.Guid clusterId) { setVdsmNamesInVdsInterfaces(network, org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getInterfaceDao().getAllInterfacesByClusterId(clusterId)); }
public void setVdsmNamesInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network) { setVdsmNamesInVdsInterfaces(network, interfaceDao.getAllInterfacesByDataCenterId(network.getDataCenterId())); }	public void setVdsmNamesInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network) { setVdsmNamesInVdsInterfaces(network, org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getInterfaceDao().getAllInterfacesByDataCenterId(network.getDataCenterId())); }
private java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVmsOnlyOnStorageDomain() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> allVmsRelatedToSD = vmDao.getAllForStorageDomain(getStorageDomainId()); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsWithDisksOnMultipleStorageDomain = vmDao.getAllVMsWithDisksOnOtherStorageDomain(getStorageDomainId()); allVmsRelatedToSD.removeAll(vmsWithDisksOnMultipleStorageDomain); return allVmsRelatedToSD; }	protected java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVmsOnlyOnStorageDomain() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> allVmsRelatedToSD = vmDao.getAllForStorageDomain(getStorageDomainId()); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsWithDisksOnMultipleStorageDomain = vmDao.getAllVMsWithDisksOnOtherStorageDomain(getStorageDomainId()); allVmsRelatedToSD.removeAll(vmsWithDisksOnMultipleStorageDomain); return allVmsRelatedToSD; }
private java.util.Set<org.ovirt.engine.core.compat.Guid> findNonResponsiveHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts) { final java.util.Set<org.ovirt.engine.core.compat.Guid> nonResponsiveHosts = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if ((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive)) { nonResponsiveHosts.add(host.getId()); } if ((((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Down)) || ((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Reboot))) && (host.isInFenceFlow())) { host.setStatus(VDSStatus.NonResponsive); nonResponsiveHosts.add(host.getId()); } } return nonResponsiveHosts; }	private java.util.Set<org.ovirt.engine.core.compat.Guid> findNonResponsiveHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts) { final java.util.Set<org.ovirt.engine.core.compat.Guid> nonResponsiveHosts = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if ((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive)) { nonResponsiveHosts.add(host.getId()); } if ((host.isInFenceFlow()) && (((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Down)) || ((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Reboot)))) { host.setStatus(VDSStatus.NonResponsive); nonResponsiveHosts.add(host.getId()); } } return nonResponsiveHosts; }
public void setInFenceFlow(boolean isInFenceFlow) { this.isInFenceFlow = isInFenceFlow; }	public void setInFenceFlow(boolean isInFenceFlow) { this.inFenceFlow = isInFenceFlow; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured, reportedDnsResolverConfiguration, isInFenceFlow); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured, reportedDnsResolverConfiguration, inFenceFlow); }
public boolean isInFenceFlow() { return isInFenceFlow; }	public boolean isInFenceFlow() { return inFenceFlow; }
private void setInFenceFlow(org.ovirt.engine.core.compat.Guid hostId, boolean isInFenceFlow) { org.ovirt.engine.core.common.businessentities.VdsDynamic vdsDynamic = vdsDynamicDao.get(hostId); vdsDynamic.setInFenceFlow(isInFenceFlow); vdsDynamicDao.update(vdsDynamic); }	private void updateHostInFenceFlow(org.ovirt.engine.core.compat.Guid hostId, boolean isInFenceFlow) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.common.businessentities.VdsDynamic vdsDynamic = vdsDynamicDao.get(hostId); vdsDynamic.setInFenceFlow(isInFenceFlow); vdsDynamicDao.update(vdsDynamic); return null; }); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.AuditLog auditLog = getAuditLog(); auditLogDao.remove(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); setAuditLogDetails(auditLog); auditLog.setUserId(Guid.Empty); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logableToClear = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(auditLog)); org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator eventFloodRegulator = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator(logableToClear, auditLog.getLogType()); eventFloodRegulator.evict(); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.AuditLog auditLog = getAuditLog(); auditLogDao.remove(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); setAuditLogDetails(auditLog); auditLog.setUserId(Guid.Empty); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logableToClear = createAuditLogableImpl(auditLog); org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator eventFloodRegulator = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator(logableToClear, auditLog.getLogType()); eventFloodRegulator.evict(); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.setSucceeded(true); }
public static org.ovirt.engine.core.common.network.FirewallType getDefaultFirewallType(org.ovirt.engine.core.compat.Version clusterCompatibilityVersion) { return clusterCompatibilityVersion.less(Version.v4_2) ? FirewallType.IPTABLES : FirewallType.FIREWALLD; }	public static org.ovirt.engine.core.common.network.FirewallType getDefaultFirewallType(org.ovirt.engine.core.compat.Version clusterCompatibilityVersion) { return clusterCompatibilityVersion.greater(Version.v3_6) ? FirewallType.FIREWALLD : FirewallType.IPTABLES; }
public static org.ovirt.engine.core.common.network.FirewallType valueOf(int value) { return org.ovirt.engine.core.common.network.FirewallType.map.get(value); }	public static org.ovirt.engine.core.common.network.FirewallType valueOf(int value) { org.ovirt.engine.core.common.network.FirewallType firewallType = org.ovirt.engine.core.common.network.FirewallType.valuesById.get(value); if (firewallType != null) { return firewallType; } throw new java.lang.IllegalArgumentException(("FirewallType does not have any mapping for value: " + value)); }
@org.ovirt.api.metamodel.annotations.Link types.DiskSnapshot diskSnapshot();	@org.ovirt.api.metamodel.annotations.Link types.DiskSnapshot snapshot();
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(imageTransfer().diskSnapshot().id()); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(imageTransfer().snapshot().id()); }
protected boolean checkDisksNotInBackupStorage() { for (org.ovirt.engine.core.bll.Disk disk : org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic destDomain = storageDomainStaticDao.get(((org.ovirt.engine.core.bll.DiskImage) (disk)).getStorageIds().get(0)); if (org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values().stream().anyMatch(destDomain.isBackup())) { return false; } } } return true; }	protected boolean checkDisksInBackupStorage() { return org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values().stream().map(( disk) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))).anyMatch(( vmDisk) -> ((vmDisk.getDiskStorageType()) == DiskStorageType.IMAGE) && (storageDomainStaticDao.get(vmDisk.getStorageIds().get(0)).isBackup())); }
protected void updateStaticDataDefaults() { updateStorageDomainWipeAfterDelete(); updateSpaceThresholds(); updateStorageDomainBackup(); }	protected void updateStaticDataDefaults() { updateStorageDomainWipeAfterDelete(); updateSpaceThresholds(); }
private void warnIfNotAllDisksPermitSnapshots() { for (org.ovirt.engine.core.bll.Disk disk : org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values()) { if (!(disk.isAllowSnapshot())) { auditLogDirector.log(this, AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT); break; } } }	private void warnIfNotAllDisksPermitSnapshots() { for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values()) { if (!(disk.isAllowSnapshot())) { auditLogDirector.log(this, AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT); break; } } }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.AuditLog)) { return false; } org.ovirt.engine.core.common.businessentities.AuditLog other = ((org.ovirt.engine.core.common.businessentities.AuditLog) (obj)); return (((((((((((((((((((((((auditLogId) == (other.auditLogId)) && (java.util.Objects.equals(logTime, other.logTime))) && ((logType) == (other.logType))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(storageDomainId, other.storageDomainId))) && (java.util.Objects.equals(storagePoolId, other.storagePoolId))) && ((severity) == (other.severity))) && (java.util.Objects.equals(userId, other.userId))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(quotaId, other.quotaId))) && (java.util.Objects.equals(vmId, other.vmId))) && (java.util.Objects.equals(vmTemplateId, other.vmTemplateId))) && ((processed) == (other.processed))) && (java.util.Objects.equals(correlationId, other.correlationId))) && (java.util.Objects.equals(jobId, other.jobId))) && (java.util.Objects.equals(origin, other.origin))) && ((customId) == (other.customId))) && ((customEventId) == (other.customEventId))) && ((eventFloodInSec) == (other.eventFloodInSec))) && (java.util.Objects.equals(customData, other.customData))) && ((external) == (other.external))) && ((deleted) == (other.deleted))) && (java.util.Objects.equals(callStack, other.callStack)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.AuditLog)) { return false; } org.ovirt.engine.core.common.businessentities.AuditLog other = ((org.ovirt.engine.core.common.businessentities.AuditLog) (obj)); return (((((((((((((((((((((((auditLogId) == (other.auditLogId)) && (java.util.Objects.equals(logTime, other.logTime))) && ((logType) == (other.logType))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(storageDomainId, other.storageDomainId))) && (java.util.Objects.equals(storagePoolId, other.storagePoolId))) && ((severity) == (other.severity))) && (java.util.Objects.equals(userId, other.userId))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(quotaId, other.quotaId))) && (java.util.Objects.equals(vmId, other.vmId))) && (java.util.Objects.equals(vmTemplateId, other.vmTemplateId))) && ((processed) == (other.processed))) && (java.util.Objects.equals(correlationId, other.correlationId))) && (java.util.Objects.equals(jobId, other.jobId))) && (java.util.Objects.equals(origin, other.origin))) && (java.util.Objects.equals(customId, other.customId))) && ((customEventId) == (other.customEventId))) && ((eventFloodInSec) == (other.eventFloodInSec))) && (java.util.Objects.equals(customData, other.customData))) && ((external) == (other.external))) && ((deleted) == (other.deleted))) && (java.util.Objects.equals(callStack, other.callStack)); }
@java.lang.Override public org.ovirt.engine.api.resource.HostNicNeighborResource getNeighborResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendHostNicNeighborServiceResource(guid, parent.getHostId())); }	@java.lang.Override public org.ovirt.engine.api.resource.LinkLayerDiscoveryProtocolResource getLinkLayerDiscoveryProtocolElementsResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendLinkLayerDiscoveryProtocolResource(guid)); }
@org.junit.Before public void setupEnvironment() { org.ovirt.engine.core.utils.CorrelationIdTracker.clean(); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); when(engineSessionDao.remove(anyLong())).thenReturn(1); org.ovirt.engine.core.bll.CommandBaseTest.mcr.mockConfigValue(ConfigValues.UserSessionTimeOutInterval, 30); sessionDataContainer.setUser(session, user); }	@org.junit.Before public void setupEnvironment() { org.ovirt.engine.core.utils.CorrelationIdTracker.clean(); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); when(engineSessionDao.remove(anyLong())).thenReturn(1); sessionDataContainer.setUser(session, user); }
@org.junit.Test public void testBlockUseHostCpuWithPPCArch() { when(cpuFlagsManagerHandler.getCpuId(anyString(), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(org.ovirt.engine.core.bll.CPU_ID); when(osRepository.isCpuSupported(anyInt(), any(org.ovirt.engine.core.compat.Version.class), anyString())).thenReturn(true); doNothing().when(cmd).initTemplateDisks(); setupCanAddPpcTest(); cmd.setEffectiveCompatibilityVersion(Version.v4_0); doReturn(java.util.Collections.emptyList()).when(cmd).getImagesToCheckDestinationStorageDomains(); initPpcCluster(); doReturn(true).when(cmd).validateAddVmCommand(); doReturn(true).when(cmd).isVmNameValidLength(any(org.ovirt.engine.core.common.businessentities.VM.class)); when(osRepository.getArchitectureFromOS(anyInt())).thenReturn(ArchitectureType.ppc64); cmd.getParameters().getVm().setClusterArch(ArchitectureType.ppc64); cmd.getParameters().getVm().setUseHostCpuFlags(true); cmd.getParameters().getVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST); cmd.getParameters().getVm().setClusterId(cluster.getId()); cmd.getParameters().getVm().setVmOs(OsType.Other.ordinal()); cmd.init(); java.util.Map<java.lang.String, java.lang.String> migrationMap = new java.util.HashMap<java.lang.String, java.lang.String>() { { put("undefined", "true"); put("x86", "true"); put("ppc", "true"); } }; mcr.mockConfigValue(ConfigValues.IsMigrationSupported, cmd.getEffectiveCompatibilityVersion(), migrationMap); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.USE_HOST_CPU_REQUESTED_ON_UNSUPPORTED_ARCH); }	@org.junit.Test public void testBlockUseHostCpuWithPPCArch() { when(cpuFlagsManagerHandler.getCpuId(anyString(), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(org.ovirt.engine.core.bll.CPU_ID); when(osRepository.isCpuSupported(anyInt(), any(org.ovirt.engine.core.compat.Version.class), anyString())).thenReturn(true); doNothing().when(cmd).initTemplateDisks(); setupCanAddPpcTest(); cmd.setEffectiveCompatibilityVersion(Version.v4_0); doReturn(java.util.Collections.emptyList()).when(cmd).getImagesToCheckDestinationStorageDomains(); initPpcCluster(); doReturn(true).when(cmd).validateAddVmCommand(); doReturn(true).when(cmd).isVmNameValidLength(any(org.ovirt.engine.core.common.businessentities.VM.class)); when(osRepository.getArchitectureFromOS(anyInt())).thenReturn(ArchitectureType.ppc64); cmd.getParameters().getVm().setClusterArch(ArchitectureType.ppc64); cmd.getParameters().getVm().setUseHostCpuFlags(true); cmd.getParameters().getVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST); cmd.getParameters().getVm().setClusterId(cluster.getId()); cmd.getParameters().getVm().setVmOs(OsType.Other.ordinal()); cmd.init(); java.util.Map<java.lang.String, java.lang.String> migrationMap = new java.util.HashMap<>(); migrationMap.put("undefined", "true"); migrationMap.put("x86", "true"); migrationMap.put("ppc", "true"); mcr.mockConfigValue(ConfigValues.IsMigrationSupported, cmd.getEffectiveCompatibilityVersion(), migrationMap); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.USE_HOST_CPU_REQUESTED_ON_UNSUPPORTED_ARCH); }
@java.lang.Override public void setUp() { super.setUp(); generateStorageToDisksMap(); initDestSDs(); mcr.mockConfigValue(ConfigValues.MaxIoThreadsPerVm, 127); mcr.mockConfigValue(ConfigValues.MaxVmNameLength, 64); mcr.mockConfigValue(ConfigValues.SupportedClusterLevels, new java.util.HashSet(java.util.Arrays.asList(new org.ovirt.engine.core.compat.Version(2, 2), new org.ovirt.engine.core.compat.Version(3, 0)))); mcr.mockConfigValue(ConfigValues.ValidNumOfMonitors, java.util.Arrays.asList("1", "2", "4")); }	@java.lang.Override public void setUp() { super.setUp(); generateStorageToDisksMap(); initDestSDs(); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mcr.mockConfigValue(ConfigValues.ConsoleToggleFullScreenKeys, "shift+f11"); mcr.mockConfigValue(ConfigValues.ConsoleReleaseCursorKeys, "shift+f12"); mcr.mockConfigValue(ConfigValues.RemapCtrlAltDelDefault, true); mcr.mockConfigValue(ConfigValues.FullScreenWebadminDefault, false); mcr.mockConfigValue(ConfigValues.EnableSpiceRootCertificateValidation, true); }	@java.lang.Override protected java.util.Set<org.ovirt.engine.core.utils.MockConfigRule.MockConfigDescriptor<java.lang.Object>> getExtraConfigDescriptors() { return new java.util.HashSet(java.util.Arrays.asList(mockConfig(ConfigValues.ConsoleToggleFullScreenKeys, "shift+f11"), mockConfig(ConfigValues.ConsoleReleaseCursorKeys, "shift+f12"), mockConfig(ConfigValues.RemapCtrlAltDelDefault, true), mockConfig(ConfigValues.FullScreenWebadminDefault, false), mockConfig(ConfigValues.EnableSpiceRootCertificateValidation, true))); }
@org.junit.Test public void testNameNotChanged() { prepareVmToPassValidate(); vm.setName("vm1"); mockSameNameQuery(true); mockVmValidator(); command.initEffectiveCompatibilityVersion(); java.util.Map<java.lang.String, java.lang.String> migrationMap = new java.util.HashMap<java.lang.String, java.lang.String>() { { put("undefined", "true"); put("x86", "true"); put("ppc", "true"); } }; org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.IsMigrationSupported, command.getEffectiveCompatibilityVersion(), migrationMap); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.MaxNumOfCpuPerSocket, command.getEffectiveCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.MaxNumOfThreadsPerCpu, command.getEffectiveCompatibilityVersion(), 8); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.MaxNumOfVmCpus, command.getEffectiveCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.MaxNumOfVmSockets, command.getEffectiveCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.VM32BitMaxMemorySizeInMB, command.getEffectiveCompatibilityVersion(), 20480); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.VM64BitMaxMemorySizeInMB, command.getEffectiveCompatibilityVersion(), 4194304); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.VMPpc64BitMaxMemorySizeInMB, command.getEffectiveCompatibilityVersion(), 1048576); assertTrue("validate should have passed.", command.validate()); }	@org.junit.Test public void testNameNotChanged() { prepareVmToPassValidate(); vm.setName("vm1"); mockSameNameQuery(true); mockVmValidator(); command.initEffectiveCompatibilityVersion(); java.util.Map<java.lang.String, java.lang.String> migrationMap = new java.util.HashMap<>(); migrationMap.put("undefined", "true"); migrationMap.put("x86", "true"); migrationMap.put("ppc", "true"); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.IsMigrationSupported, command.getEffectiveCompatibilityVersion(), migrationMap); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.MaxNumOfCpuPerSocket, command.getEffectiveCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.MaxNumOfThreadsPerCpu, command.getEffectiveCompatibilityVersion(), 8); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.MaxNumOfVmCpus, command.getEffectiveCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.MaxNumOfVmSockets, command.getEffectiveCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.VM32BitMaxMemorySizeInMB, command.getEffectiveCompatibilityVersion(), 20480); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.VM64BitMaxMemorySizeInMB, command.getEffectiveCompatibilityVersion(), 4194304); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.VMPpc64BitMaxMemorySizeInMB, command.getEffectiveCompatibilityVersion(), 1048576); assertTrue("validate should have passed.", command.validate()); }
@org.junit.Before public void setUp() { when(vmDao.get(vm.getId())).thenReturn(vm); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); cluster.setCpuName("Intel Conroe Family"); cluster.setArchitecture(ArchitectureType.x86_64); cluster.setId(vm.getClusterId()); cluster.setStoragePoolId(vm.getStoragePoolId()); cluster.setCompatibilityVersion(org.ovirt.engine.core.compat.Version.getLast()); when(clusterDao.get(vm.getClusterId())).thenReturn(cluster); mockOsRepository(); doNothing().when(cmd).separateCustomProperties(any(org.ovirt.engine.core.common.businessentities.VmStatic.class)); doReturn(getDisksList(vm.getStoragePoolId())).when(cmd).getVmDisksFromDB(); doReturn(vmDeviceUtils).when(cmd).getVmDeviceUtils(); org.ovirt.engine.core.bll.AddVmTemplateCommandTest.mcr.mockConfigValue(ConfigValues.VmPriorityMaxValue, 100); cmd.init(); }	@org.junit.Before public void setUp() { when(vmDao.get(vm.getId())).thenReturn(vm); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); cluster.setCpuName("Intel Conroe Family"); cluster.setArchitecture(ArchitectureType.x86_64); cluster.setId(vm.getClusterId()); cluster.setStoragePoolId(vm.getStoragePoolId()); cluster.setCompatibilityVersion(org.ovirt.engine.core.compat.Version.getLast()); when(clusterDao.get(vm.getClusterId())).thenReturn(cluster); mockOsRepository(); doNothing().when(cmd).separateCustomProperties(any(org.ovirt.engine.core.common.businessentities.VmStatic.class)); doReturn(getDisksList(vm.getStoragePoolId())).when(cmd).getVmDisksFromDB(); doReturn(vmDeviceUtils).when(cmd).getVmDeviceUtils(); cmd.init(); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mcr.mockConfigValue(ConfigValues.OvirtInitialSupportedIsoVersion, "5.8"); mcr.mockConfigValue(ConfigValues.OvirtIsoPrefix, "rhevh"); mcr.mockConfigValue(ConfigValues.OvirtNodeOS, "^ovirt.*$"); mcr.mockConfigValue(ConfigValues.DataDir, "/usr/share/ovirt-engine"); mcr.mockConfigValue(ConfigValues.oVirtISOsRepositoryPath, "/usr/share/rhev-hypervisor"); }	@java.lang.Override protected java.util.Set<org.ovirt.engine.core.utils.MockConfigRule.MockConfigDescriptor<java.lang.Object>> getExtraConfigDescriptors() { return new java.util.HashSet(java.util.Arrays.asList(mockConfig(ConfigValues.OvirtInitialSupportedIsoVersion, "2.5.5:5.8"), mockConfig(ConfigValues.OvirtIsoPrefix, "^ovirt-node-iso-([0-9].*)\\.iso$:^rhevh-([0-9].*)\\.iso$"), mockConfig(ConfigValues.OvirtNodeOS, "^ovirt.*$:^rhev.*$"), mockConfig(ConfigValues.DataDir, "/usr/share/engine"), mockConfig(ConfigValues.oVirtISOsRepositoryPath, "/usr/share/ovirt-node-iso:/usr/share/rhev-hypervisor"))); }
private java.lang.String renderPortMirroring(boolean portMirroring) { if (portMirroring) { return org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.yes(); } else { return org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.no(); } }	private java.lang.String renderPortMirroring(boolean portMirroring) { if (portMirroring) { return org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.portMirroringEnabled(); } else { return org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.portMirroringDisabled(); } }
@java.lang.Override public void setEnabled(boolean enabled) { this.enabled = enabled; nameEditor.setEnabled(enabled); valueEditor.setEnabled(enabled); }	@java.lang.Override public void setEnabled(boolean enabled) { nameEditor.setEnabled(enabled); valueEditor.setEnabled(enabled); }
@java.lang.Override protected void init() { setNetworkFilterParameterWidgetVisible(true); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getNicTypeList(getVm().getOsId(), getClusterCompatibilityVersion(), new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { setSupportedVnicTypes(returnValue); postNicInit(); })); }	@java.lang.Override protected void init() { getNetworkFilterParameterListModel().setIsAvailable(true); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getNicTypeList(getVm().getOsId(), getClusterCompatibilityVersion(), new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { setSupportedVnicTypes(returnValue); postNicInit(); })); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel iface) { driver.edit(iface); networkFilterParameterWidget.edit(iface.getNetworkFilterParameterListModel()); networkFilterParameterWidget.setEnabled(iface.isNetworkFilterParameterWidgetVisible()); networkFilterParameterWidget.setVisible(iface.isNetworkFilterParameterWidgetVisible()); hideMacWhenNotEnabled(iface); iface.getMAC().getPropertyChangedEvent().addListener(( ev, sender, args) -> { if ("IsAvailable".equals(args.propertyName)) { hideMacWhenNotEnabled(iface); } }); }	@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel iface) { driver.edit(iface); networkFilterParameterWidget.edit(iface.getNetworkFilterParameterListModel()); networkFilterParameterWidget.setEnabled(iface.getNetworkFilterParameterListModel().getIsAvailable()); networkFilterParameterWidget.setVisible(iface.getNetworkFilterParameterListModel().getIsAvailable()); hideMacWhenNotEnabled(iface); iface.getMAC().getPropertyChangedEvent().addListener(( ev, sender, args) -> { if ("IsAvailable".equals(args.propertyName)) { hideMacWhenNotEnabled(iface); } }); }
protected void postOnSave() { stopProgress(); if (saveSuceeded) { cancel(); } }	protected void postOnSave() { }
protected void onSave() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic = createBaseNic(); if ((getProgress()) != null) { return; } if (!(validate())) { return; } nic.setName(getName().getEntity()); org.ovirt.engine.core.common.businessentities.network.VnicProfileView profile = getProfile().getSelectedItem(); nic.setVnicProfileId(profile.getId()); nic.setNetworkName(profile.getNetworkName()); nic.setLinked(getLinked().getEntity()); if ((getNicType().getSelectedItem()) == null) { nic.setType(null); } else { nic.setType(getNicType().getSelectedItem().getValue()); } onSaveMAC(nic); nic.setPlugged(getPlugged().getEntity()); startProgress(); saveSuceeded = false; org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(getActionType(), createVdcActionParameters(nic), ( result) -> { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue(); if ((returnValue != null) && (returnValue.getSucceeded())) { java.lang.Object actionReturnValue = returnValue.getActionReturnValue(); saveSuceeded = true; if ((actionReturnValue != null) && (actionReturnValue instanceof org.ovirt.engine.core.compat.Guid)) { saveNicFilterParameters(((org.ovirt.engine.core.compat.Guid) (actionReturnValue))); } else { postOnSave(); } } }, this); }	protected void onSave() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic = createBaseNic(); if ((getProgress()) != null) { return; } if (!(validate())) { return; } nic.setName(getName().getEntity()); org.ovirt.engine.core.common.businessentities.network.VnicProfileView profile = getProfile().getSelectedItem(); nic.setVnicProfileId(profile.getId()); nic.setNetworkName(profile.getNetworkName()); nic.setLinked(getLinked().getEntity()); if ((getNicType().getSelectedItem()) == null) { nic.setType(null); } else { nic.setType(getNicType().getSelectedItem().getValue()); } onSaveMAC(nic); nic.setPlugged(getPlugged().getEntity()); startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(getActionType(), createVdcActionParameters(nic), ( result) -> { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = result.getReturnValue(); stopProgress(); if ((returnValue != null) && (returnValue.getSucceeded())) { cancel(); postOnSave(); } }, this); }
@java.lang.Override protected void init() { setNetworkFilterParameterWidgetVisible(true); super.init(); }	@java.lang.Override protected void init() { getNetworkFilterParameterListModel().setIsAvailable(true); super.init(); }
private void postNicInit() { getName().setEntity(getNic().getName()); initMAC(); initLinked(); initNetworkFilterParameters(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { if (returnValue != null) { getNetworkFilterParameterListModel().setItems(returnValue); } })); initProfiles(); getPlugged().setEntity(getNic().isPlugged()); if (!(allowPlug())) { getPlugged().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().nicHotPlugNotSupported(getClusterCompatibilityVersion().toString())); } getPlugged().setIsChangeable(allowPlug()); initCommands(); }	private void postNicInit() { getName().setEntity(getNic().getName()); initMAC(); initLinked(); initNetworkFilterParameters(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { getNetworkFilterParameterListModel().setItems(returnValue); })); initProfiles(); getPlugged().setEntity(getNic().isPlugged()); if (!(allowPlug())) { getPlugged().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().nicHotPlugNotSupported(getClusterCompatibilityVersion().toString())); } getPlugged().setIsChangeable(allowPlug()); initCommands(); }
public org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter flush() { getEntity().setName(name.getEntity()); getEntity().setValue(value.getEntity()); return getEntity(); }	public org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter flush() { getEntity().setName(name.getEntity()); getEntity().setValue(value.getEntity()); if ((getEntity().getVmInterfaceId()) == null) { getEntity().setVmInterfaceId(Guid.Empty); } return getEntity(); }
protected java.util.Map<java.lang.String, java.lang.String> createPortAllocationRuntimeProperties(com.woorea.openstack.quantum.model.Port port) { java.util.Map<java.lang.String, java.lang.String> runtimeProperties = new java.util.HashMap<>(); runtimeProperties.put("vnic_id", port.getId()); java.lang.String providerType = getProvider().getType().name(); runtimeProperties.put("provider_type", providerType); if (((port.getSecurityGroups()) != null) && (!(port.getSecurityGroups().isEmpty()))) { runtimeProperties.put("security_groups", org.apache.commons.lang.StringUtils.join(port.getSecurityGroups(), ',')); } java.lang.String pluginType = getProvider().getAdditionalProperties().getPluginType(); if (pluginType == null) { pluginType = ""; } runtimeProperties.put("plugin_type", pluginType); return runtimeProperties; }	protected java.util.Map<java.lang.String, java.lang.String> createPortAllocationRuntimeProperties(com.woorea.openstack.quantum.model.Port port) { java.util.Map<java.lang.String, java.lang.String> runtimeProperties = new java.util.HashMap<>(); runtimeProperties.put("vnic_id", port.getId()); java.lang.String providerType = getProvider().getType().name(); runtimeProperties.put("provider_type", providerType); if (((port.getSecurityGroups()) != null) && (!(port.getSecurityGroups().isEmpty()))) { runtimeProperties.put("security_groups", org.apache.commons.lang.StringUtils.join(port.getSecurityGroups(), ',')); } runtimeProperties.put("plugin_type", org.apache.commons.lang.StringUtils.defaultString(getProvider().getAdditionalProperties().getPluginType())); return runtimeProperties; }
@java.lang.Override public javax.ws.rs.core.Response remove() { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.api.restapi.resource.BackendClusterFeatureHelper.getClusterWithFeatureDisabled(this, clusterId, guid); org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters param = new org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters(cluster); return performAction(ActionType.UpdateCluster, param); }	@java.lang.Override public javax.ws.rs.core.Response remove() { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.api.restapi.resource.BackendClusterFeatureHelper.getClusterWithFeatureDisabled(this, clusterId, guid); org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters param = new org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters(cluster); return performAction(VdcActionType.UpdateCluster, param); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.ClusterFeature feature) { validateParameters(feature); org.ovirt.engine.core.common.businessentities.AdditionalFeature featureEntity = map(feature, null); org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.api.restapi.resource.BackendClusterFeatureHelper.getClusterEntity(this, clusterId); org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature supportedFeature = new org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature(); supportedFeature.setFeature(featureEntity); supportedFeature.setEnabled(true); supportedFeature.setClusterId(clusterId); cluster.getAddtionalFeaturesSupported().add(supportedFeature); org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters param = new org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters(cluster); return performCreate(ActionType.UpdateCluster, param, new org.ovirt.engine.api.restapi.resource.BackendClusterEnabledFeaturesResource.ClusterFeatureIdResolver(clusterId, featureEntity.getId())); }	@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.ClusterFeature feature) { validateParameters(feature); org.ovirt.engine.core.common.businessentities.AdditionalFeature featureEntity = map(feature, null); org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.api.restapi.resource.BackendClusterFeatureHelper.getClusterEntity(this, clusterId); org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature supportedFeature = new org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature(); supportedFeature.setFeature(featureEntity); supportedFeature.setEnabled(true); supportedFeature.setClusterId(clusterId); cluster.getAddtionalFeaturesSupported().add(supportedFeature); org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters param = new org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters(cluster); return performCreate(VdcActionType.UpdateCluster, param, new org.ovirt.engine.api.restapi.resource.BackendClusterEnabledFeaturesResource.ClusterFeatureIdResolver(clusterId, featureEntity.getId())); }
@java.lang.Override public org.ovirt.engine.api.model.ClusterFeatures list() { org.ovirt.engine.api.model.ClusterFeatures features = new org.ovirt.engine.api.model.ClusterFeatures(); java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> addlFeatures = getOptionalEntity(java.util.Set.class, QueryType.GetClusterFeaturesByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), clusterId.toString(), false); if (addlFeatures != null) { for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature entity : addlFeatures) { if (entity.isEnabled()) { features.getClusterFeatures().add(addLinks(map(entity.getFeature(), null))); } } } return features; }	@java.lang.Override public org.ovirt.engine.api.model.ClusterFeatures list() { org.ovirt.engine.api.model.ClusterFeatures features = new org.ovirt.engine.api.model.ClusterFeatures(); java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> addlFeatures = getOptionalEntity(java.util.Set.class, VdcQueryType.GetClusterFeaturesByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), clusterId.toString(), false); if (addlFeatures != null) { for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature entity : addlFeatures) { if (entity.isEnabled()) { features.getClusterFeatures().add(addLinks(map(entity.getFeature(), null))); } } } return features; }
public static org.ovirt.engine.core.common.businessentities.Cluster getClusterEntity(org.ovirt.engine.api.restapi.resource.BackendResource resource, org.ovirt.engine.core.compat.Guid clusterId) { org.ovirt.engine.core.common.businessentities.Cluster cluster = resource.getEntity(org.ovirt.engine.core.common.businessentities.Cluster.class, QueryType.GetClusterById, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), null, true); return cluster; }	public static org.ovirt.engine.core.common.businessentities.Cluster getClusterEntity(org.ovirt.engine.api.restapi.resource.BackendResource resource, org.ovirt.engine.core.compat.Guid clusterId) { org.ovirt.engine.core.common.businessentities.Cluster cluster = resource.getEntity(org.ovirt.engine.core.common.businessentities.Cluster.class, VdcQueryType.GetClusterById, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), null, true); return cluster; }
public static org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature getEnabledFeature(org.ovirt.engine.api.restapi.resource.BackendResource resource, org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.compat.Guid id) { java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> addlFeatures = resource.getOptionalEntity(java.util.Set.class, QueryType.GetClusterFeaturesByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), clusterId.toString(), false); org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature = addlFeatures.stream().filter(( f) -> (f.getFeature().getId().equals(id)) && (f.isEnabled())).findFirst().orElse(null); return feature; }	public static org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature getEnabledFeature(org.ovirt.engine.api.restapi.resource.BackendResource resource, org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.compat.Guid id) { java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> addlFeatures = resource.getOptionalEntity(java.util.Set.class, VdcQueryType.GetClusterFeaturesByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), clusterId.toString(), false); org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature = addlFeatures.stream().filter(( f) -> (f.getFeature().getId().equals(id)) && (f.isEnabled())).findFirst().orElse(null); return feature; }
public static java.util.Set<org.ovirt.engine.core.common.businessentities.AdditionalFeature> getClusterFeatures(org.ovirt.engine.api.restapi.resource.BackendResource resource, java.lang.String version) { java.util.Set<org.ovirt.engine.core.common.businessentities.AdditionalFeature> addlFeatures = new java.util.HashSet<>(); addlFeatures = resource.getEntity(java.util.Set.class, QueryType.GetClusterFeaturesByVersionAndCategory, new org.ovirt.engine.core.common.queries.GetClusterFeaturesByVersionAndCategoryParameters(new org.ovirt.engine.core.compat.Version(version), resource.getCurrent().getApplicationMode()), ("features for version:" + version)); return addlFeatures; }	public static java.util.Set<org.ovirt.engine.core.common.businessentities.AdditionalFeature> getClusterFeatures(org.ovirt.engine.api.restapi.resource.BackendResource resource, java.lang.String version) { java.util.Set<org.ovirt.engine.core.common.businessentities.AdditionalFeature> addlFeatures = resource.getEntity(java.util.Set.class, VdcQueryType.GetClusterFeaturesByVersionAndCategory, new org.ovirt.engine.core.common.queries.GetClusterFeaturesByVersionAndCategoryParameters(new org.ovirt.engine.core.compat.Version(version), resource.getCurrent().getApplicationMode()), ("features for version:" + version)); return addlFeatures; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.ImageFileType.class, to = org.ovirt.engine.api.model.ImageFileType.class) public static org.ovirt.engine.api.model.ImageFileType map(org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType, org.ovirt.engine.api.model.ImageFileType template) { switch (imageFileType) { case Unknown : return org.ovirt.engine.api.model.ImageFileType.UNKNOWN; case ISO : return org.ovirt.engine.api.model.ImageFileType.ISO; case Floppy : return org.ovirt.engine.api.model.ImageFileType.FLOPPY; case Disk : return org.ovirt.engine.api.model.ImageFileType.DISK; case All : return org.ovirt.engine.api.model.ImageFileType.ALL; default : return null; } }	public static org.ovirt.engine.api.model.ImageFileType mapImageType(org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType) { switch (imageFileType) { case ISO : return org.ovirt.engine.api.model.ImageFileType.ISO; case Floppy : return org.ovirt.engine.api.model.ImageFileType.FLOPPY; case Disk : return org.ovirt.engine.api.model.ImageFileType.DISK; case Unknown : return null; default : org.ovirt.engine.api.restapi.types.ImageMapper.log.warn("Don't know how to map image type '{}', will return null.", imageFileType); return null; } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.storage.RepoImage.class, to = org.ovirt.engine.api.model.Image.class) public static org.ovirt.engine.api.model.Image map(org.ovirt.engine.core.common.businessentities.storage.RepoImage entity, org.ovirt.engine.api.model.Image template) { org.ovirt.engine.api.model.Image model = (template != null) ? template : new org.ovirt.engine.api.model.Image(); model.setId(entity.getRepoImageId()); model.setName(entity.getRepoImageName()); if ((entity.getSize()) != null) { model.setSize(entity.getSize().intValue()); } if ((entity.getFileType()) != null) { model.setFileType(org.ovirt.engine.api.restapi.types.ImageMapper.map(entity.getFileType(), null)); } return model; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.storage.RepoImage.class, to = org.ovirt.engine.api.model.Image.class) public static org.ovirt.engine.api.model.Image map(org.ovirt.engine.core.common.businessentities.storage.RepoImage entity, org.ovirt.engine.api.model.Image template) { org.ovirt.engine.api.model.Image model = (template != null) ? template : new org.ovirt.engine.api.model.Image(); model.setId(entity.getRepoImageId()); model.setName(entity.getRepoImageName()); model.setSize(entity.getSize()); model.setType(org.ovirt.engine.api.restapi.types.ImageMapper.mapImageType(entity.getFileType())); return model; }
@java.lang.Override protected boolean validateImageTransfer() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getDiskImage(); org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = getDiskValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = getDiskImagesValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(storageDomainDao.getForStoragePool(diskImage.getStorageIds().get(0), diskImage.getStoragePoolId())); return ((((validate(diskValidator.isDiskExists())) && (validate(diskValidator.isDiskPluggedToAnyNonDownVm(false)))) && (validate(diskImagesValidator.diskImagesNotIllegal()))) && (validate(diskImagesValidator.diskImagesNotLocked()))) && (validate(storageDomainValidator.isDomainExistAndActive())); }	@java.lang.Override protected boolean validateImageTransfer() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getDiskImage(); org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = getDiskValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = getDiskImagesValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(storageDomainDao.getForStoragePool(diskImage.getStorageIds().get(0), diskImage.getStoragePoolId())); return ((((validate(diskValidator.isDiskExists())) && (validateActiveDiskPluggedToAnyNonDownVm(diskImage, diskValidator))) && (validate(diskImagesValidator.diskImagesNotIllegal()))) && (validate(diskImagesValidator.diskImagesNotLocked()))) && (validate(storageDomainValidator.isDomainExistAndActive())); }
protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImage() { if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId()))) { return super.getDiskImage(); } return ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageGroupID()))); }	protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImage() { if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId()))) { setImageId(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId()); return super.getDiskImage(); } return ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageGroupID()))); }
@java.lang.Override public void init() { super.init(); setImageId(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); setImageGroupId(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageGroupID()); }	@java.lang.Override protected void endSuccessfully() { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Upload)) { super.endSuccessfully(); } org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true); }
public void proceedCommandExecution(org.ovirt.engine.core.compat.Guid childCmdId) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = imageTransferDao.get(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); if ((entity == null) || ((entity.getPhase()) == null)) { log.error(("Image transfer status entity corrupt or missing from database" + " for image transfer command '{}'"), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); setCommandStatus(CommandStatus.FAILED); return; } if ((entity.getDiskId()) != null) { setImageId(entity.getDiskId()); } long ts = (java.lang.System.currentTimeMillis()) / 1000; if (pauseTransferIfNecessary(entity, ts)) { return; } executeStateHandler(entity, ts, childCmdId); }	public void proceedCommandExecution(org.ovirt.engine.core.compat.Guid childCmdId) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = imageTransferDao.get(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); if ((entity == null) || ((entity.getPhase()) == null)) { log.error(("Image transfer status entity corrupt or missing from database" + " for image transfer command '{}'"), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); setCommandStatus(CommandStatus.FAILED); return; } if ((entity.getDiskId()) != null) { setImageGroupId(entity.getDiskId()); } long ts = (java.lang.System.currentTimeMillis()) / 1000; if (pauseTransferIfNecessary(entity, ts)) { return; } executeStateHandler(entity, ts, childCmdId); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> listPermissionSubjects = new java.util.ArrayList<>(); if (org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.isImageProvided()) { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getImageGroupId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_DISK_PROPERTIES)); } else { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return listPermissionSubjects; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> listPermissionSubjects = new java.util.ArrayList<>(); if (org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.isImageProvided()) { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_DISK_PROPERTIES)); } else { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return listPermissionSubjects; }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> locks = new java.util.HashMap<>(); locks.put(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getImageGroupId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, EngineMessage.ACTION_TYPE_FAILED_DISK_IS_LOCKED)); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId()))) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = vmDao.getVmsListForDisk(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getImageGroupId(), true); vms.forEach(( vm) -> locks.put(vm.getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, EngineMessage.ACTION_TYPE_FAILED_VM_IS_LOCKED))); } return locks; }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> locks = new java.util.HashMap<>(); if ((org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { locks.put(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageGroupID().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, EngineMessage.ACTION_TYPE_FAILED_DISK_IS_LOCKED)); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId()))) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = vmDao.getVmsListForDisk(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageGroupID(), true); vms.forEach(( vm) -> locks.put(vm.getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, EngineMessage.ACTION_TYPE_FAILED_VM_IS_LOCKED))); } } return locks; }
@java.lang.Override public javax.ws.rs.core.Response addForSnapshot(org.ovirt.engine.api.model.ImageTransfer imageTransfer) { org.ovirt.engine.core.common.action.TransferDiskImageParameters params = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(); params.setImageId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(imageTransfer.getDiskSnapshot().getId())); return performCreate(imageTransfer, params); }	@java.lang.Override public javax.ws.rs.core.Response addForSnapshot(org.ovirt.engine.api.model.ImageTransfer imageTransfer) { org.ovirt.engine.core.common.action.TransferDiskImageParameters params = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(); params.setImageId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(imageTransfer.getSnapshot().getId())); return performCreate(imageTransfer, params); }
@java.lang.Override public javax.ws.rs.core.Response toResponse(org.ovirt.engine.api.restapi.utils.MalformedIdException exception) { org.ovirt.engine.api.restapi.resource.validation.MalformedIdExceptionMapper.log.error("Malformed id detected while processing \"{}\" request for path \"{}\"", request.getMethod(), uriInfo.getPath()); org.ovirt.engine.api.restapi.resource.validation.MalformedIdExceptionMapper.log.error("Exception", exception); final org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("Operation Failed"); fault.setDetail(exception.getCause().getMessage()); return javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fault).build(); }	@java.lang.Override public javax.ws.rs.core.Response toResponse(org.ovirt.engine.api.restapi.utils.MalformedIdException exception) { org.ovirt.engine.api.restapi.resource.validation.MalformedIdExceptionMapper.log.error("Malformed id detected while processing \"{}\" request for path \"{}\"", request.getMethod(), uriInfo.getPath()); org.ovirt.engine.api.restapi.resource.validation.MalformedIdExceptionMapper.log.error("Exception", exception); final org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("Operation failed"); fault.setDetail(exception.getCause().getMessage()); return javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fault).build(); }
private void disableAnyUsb(org.ovirt.engine.core.common.businessentities.VmBase oldVm, org.ovirt.engine.core.common.businessentities.VmBase newVm) { final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> usbControllers; if ((((((org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED) == (oldVm.getUsbPolicy())) && ((org.ovirt.engine.core.common.businessentities.VmType.HighPerformance) == (oldVm.getVmType()))) && ((usbControllers = getUsbControllers(newVm.getId())) != null)) && ((usbControllers.size()) == 1)) && (UsbControllerModel.NONE.libvirtName.equals(getUsbControllerModelName(usbControllers.get(0))))) { return; } if ((org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE) == (oldVm.getUsbPolicy())) { disableSpiceUsb(newVm.getId()); } else if ((org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED) == (oldVm.getUsbPolicy())) { disableNormalUsb(newVm.getId()); } addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), newVm.getId()), VmDeviceGeneralType.CONTROLLER, VmDeviceType.USB, createUsbControllerSpecParams(UsbControllerModel.NONE.libvirtName, 0), true, false); }	private void disableAnyUsb(org.ovirt.engine.core.common.businessentities.VmBase oldVm, org.ovirt.engine.core.common.businessentities.VmBase newVm) { final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> usbControllers; if ((((((org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED) == (oldVm.getUsbPolicy())) && ((org.ovirt.engine.core.common.businessentities.VmType.HighPerformance) == (oldVm.getVmType()))) && ((usbControllers = getUsbControllers(newVm.getId())) != null)) && ((usbControllers.size()) == 1)) && (UsbControllerModel.NONE.libvirtName.equals(getUsbControllerModelName(usbControllers.get(0))))) { return; } switch (oldVm.getUsbPolicy()) { case ENABLED_NATIVE : disableSpiceUsb(newVm.getId()); break; case DISABLED : disableNormalUsb(newVm.getId()); break; } addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), newVm.getId()), VmDeviceGeneralType.CONTROLLER, VmDeviceType.USB, createUsbControllerSpecParams(UsbControllerModel.NONE.libvirtName, 0), true, false); }
public org.ovirt.engine.core.common.businessentities.VmDevice getVmDevice() { java.util.Map<java.lang.String, java.lang.Object> specParams = new java.util.HashMap<>(); specParams.put("action", action.name()); specParams.put("model", model.name()); return new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), id), VmDeviceGeneralType.WATCHDOG, VmDeviceType.WATCHDOG.getName(), "", specParams, true, true, false, "", null, null, null); }	public org.ovirt.engine.core.common.businessentities.VmDevice getVmDevice() { java.util.Map<java.lang.String, java.lang.Object> specParams = getSpecParams(); return new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), id), VmDeviceGeneralType.WATCHDOG, VmDeviceType.WATCHDOG.getName(), "", specParams, true, true, false, "", null, null, null); }
public void vmTypeChanged(org.ovirt.engine.core.common.businessentities.VmType vmType) { if (basedOnCustomInstanceType()) { getModel().getIsSoundcardEnabled().setEntity((vmType == (org.ovirt.engine.core.common.businessentities.VmType.Desktop))); } getModel().getAllowConsoleReconnect().setEntity((vmType == (org.ovirt.engine.core.common.businessentities.VmType.Server))); if (vmType == (org.ovirt.engine.core.common.businessentities.VmType.HighPerformance)) { getModel().getIsHeadlessModeEnabled().setEntity(true); getModel().getIsConsoleDeviceEnabled().setEntity(true); getModel().getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED); getModel().getWatchdogModel().setSelectedItem(null); getModel().getWatchdogAction().setSelectedItem(getModel().getWatchdogAction().getItems().iterator().next()); getModel().getIsHighlyAvailable().setEntity(false); } }	public void vmTypeChanged(org.ovirt.engine.core.common.businessentities.VmType vmType) { if (basedOnCustomInstanceType()) { getModel().getIsSoundcardEnabled().setEntity((vmType == (org.ovirt.engine.core.common.businessentities.VmType.Desktop))); } getModel().getAllowConsoleReconnect().setEntity((vmType == (org.ovirt.engine.core.common.businessentities.VmType.Server))); if (vmType == (org.ovirt.engine.core.common.businessentities.VmType.HighPerformance)) { getModel().getIsHeadlessModeEnabled().setEntity(true); getModel().getIsConsoleDeviceEnabled().setEntity(true); getModel().getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED); getModel().getWatchdogModel().setSelectedItem(null); getModel().getWatchdogAction().setSelectedItem(getModel().getWatchdogAction().getItems().iterator().next()); getModel().getIsHighlyAvailable().setEntity(false); getModel().getIsRngEnabled().setEntity(true); getModel().getMigrationMode().setSelectedItem(MigrationSupport.PINNED_TO_HOST); getModel().getHostCpu().setEntity(true); getModel().getMemoryBalloonDeviceEnabled().setEntity(false); } }
private void onDestroy() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); if ((model.getProgress()) != null) { return; } if (!(model.validate())) { return; } org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getSelectedItem(); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.ForceRemoveStorageDomain, new java.util.ArrayList(java.util.Arrays.asList(new org.ovirt.engine.core.common.action.ActionParametersBase[]{ new org.ovirt.engine.core.common.action.ForceRemoveStorageDomainParameters(storageDomain.getId()) })), ( result) -> { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); }, model); }	private void onDestroy() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); if ((model.getProgress()) != null) { return; } if (!(model.validate())) { return; } org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getSelectedItem(); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.ForceRemoveStorageDomain, new java.util.ArrayList(java.util.Arrays.asList(new org.ovirt.engine.core.common.action.ActionParametersBase[]{ new org.ovirt.engine.core.common.action.StorageDomainParametersBase(storageDomain.getId()) })), ( result) -> { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); }, model); }
@org.junit.Test public void testRemoveWithDestroy() throws java.lang.Exception { setUpGetEntityExpectations(); javax.ws.rs.core.UriInfo uriInfo = setUpActionExpectations(ActionType.ForceRemoveStorageDomain, org.ovirt.engine.core.common.action.ForceRemoveStorageDomainParameters.class, new java.lang.String[]{ "StorageDomainId", "VdsId" }, new java.lang.Object[]{ GUIDS[0], GUIDS[1] }, true, true, false); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(BackendStorageDomainResource.HOST, GUIDS[1].toString()); parameters.put(BackendStorageDomainResource.DESTROY, java.lang.Boolean.TRUE.toString()); uriInfo = addMatrixParameterExpectations(uriInfo, parameters); setUriInfo(uriInfo); verifyRemove(resource.remove()); }	@org.junit.Test public void testRemoveWithDestroy() throws java.lang.Exception { setUpGetEntityExpectations(); javax.ws.rs.core.UriInfo uriInfo = setUpActionExpectations(ActionType.ForceRemoveStorageDomain, org.ovirt.engine.core.common.action.StorageDomainParametersBase.class, new java.lang.String[]{ "StorageDomainId", "VdsId" }, new java.lang.Object[]{ GUIDS[0], GUIDS[1] }, true, true, false); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(BackendStorageDomainResource.HOST, GUIDS[1].toString()); parameters.put(BackendStorageDomainResource.DESTROY, java.lang.Boolean.TRUE.toString()); uriInfo = addMatrixParameterExpectations(uriInfo, parameters); setUriInfo(uriInfo); verifyRemove(resource.remove()); }
@java.lang.Override protected boolean validate() { boolean returnValue = ((super.validate()) && (org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.checkStorageDomain())) && (((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)) || (checkStorageDomainStatusNotEqual(StorageDomainStatus.Active))); if ((returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master))) && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStoragePool()) != null)) { if (((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.electNewMaster()) == null) && (!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getParameters().isForceRemoveLastMaster()))) { returnValue = false; addValidationMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN); } else if ((!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.initializeVds())) && (!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getParameters().isForceRemoveLastMaster()))) { returnValue = false; addValidationMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN_HOST_NOT_ACTIVE); } } if (returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLANCE))) { addValidationMessage(EngineMessage.ERROR_CANNOT_MANAGE_STORAGE_DOMAIN); returnValue = false; } return returnValue; }	@java.lang.Override protected boolean validate() { boolean returnValue = ((super.validate()) && (org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.checkStorageDomain())) && (checkStorageDomainStatusNotEqual(StorageDomainStatus.Active)); if (((returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master))) && (isAttachedStorageDomain())) && (!(isLastStorageInPool()))) { if ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.electNewMaster()) == null) { returnValue = false; addValidationMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN); } else if (!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.initializeVds())) { returnValue = false; addValidationMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN_HOST_NOT_ACTIVE); } } if (returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLANCE))) { addValidationMessage(EngineMessage.ERROR_CANNOT_MANAGE_STORAGE_DOMAIN); returnValue = false; } return returnValue; }
@java.lang.Override public javax.ws.rs.core.Response remove() { java.lang.String host = org.ovirt.engine.api.restapi.util.ParametersHelper.getParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.HOST); if (host == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("host parameter is missing"); throw new javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fault).build()); } get(); org.ovirt.engine.core.compat.Guid hostId = getHostId(host); boolean destroy = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.DESTROY, true, false); boolean format = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.FORMAT, true, false); if (destroy) { org.ovirt.engine.core.common.action.ForceRemoveStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.ForceRemoveStorageDomainParameters(guid); parameters.setVdsId(hostId); return performAction(ActionType.ForceRemoveStorageDomain, parameters); } else { org.ovirt.engine.core.common.action.RemoveStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.RemoveStorageDomainParameters(guid); parameters.setVdsId(hostId); parameters.setDoFormat(format); return performAction(ActionType.RemoveStorageDomain, parameters); } }	@java.lang.Override public javax.ws.rs.core.Response remove() { java.lang.String host = org.ovirt.engine.api.restapi.util.ParametersHelper.getParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.HOST); if (host == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("host parameter is missing"); throw new javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fault).build()); } get(); org.ovirt.engine.core.compat.Guid hostId = getHostId(host); boolean destroy = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.DESTROY, true, false); boolean format = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.FORMAT, true, false); if (destroy) { org.ovirt.engine.core.common.action.StorageDomainParametersBase parameters = new org.ovirt.engine.core.common.action.StorageDomainParametersBase(guid); parameters.setVdsId(hostId); return performAction(ActionType.ForceRemoveStorageDomain, parameters); } else { org.ovirt.engine.core.common.action.RemoveStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.RemoveStorageDomainParameters(guid); parameters.setVdsId(hostId); parameters.setDoFormat(format); return performAction(ActionType.RemoveStorageDomain, parameters); } }
protected boolean isDetachAllowed() { if ((getStoragePoolIsoMap()) == null) { return failValidation(EngineMessage.STORAGE_DOMAIN_NOT_ATTACHED_TO_STORAGE_POOL); } java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = storageDomainDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.getStoragePool().getId()); if (((storageDomains.size()) > 1) && (isMaster())) { return failValidation(EngineMessage.ERROR_CANNOT_DETACH_LAST_STORAGE_DOMAIN); } return true; }	protected boolean isDetachAllowed() { if ((getStoragePoolIsoMap()) == null) { return failValidation(EngineMessage.STORAGE_DOMAIN_NOT_ATTACHED_TO_STORAGE_POOL); } if ((isMaster()) && ((storageDomainDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.getStoragePoolId()).size()) > 1)) { return failValidation(EngineMessage.ERROR_CANNOT_DETACH_LAST_STORAGE_DOMAIN); } return true; }
private void detachStorageDomain(org.ovirt.engine.core.compat.Guid storageDomainId) { log.info("Domain '{}' is already attached to a different storage pool, clean the storage domain metadata.", storageDomainId); org.ovirt.engine.core.common.vdscommands.StorageDomainVdsCommandParameters params = new org.ovirt.engine.core.common.vdscommands.StorageDomainVdsCommandParameters(storageDomainId, org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getVds().getId()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = runVdsCommand(VDSCommandType.CleanStorageDomainMetaData, params); if (ret.getSucceeded()) { log.info("Successfully cleaned metadata for storage domain '{}'.", storageDomainId); } else { log.warn("Failed to clean metadata for storage domain '{}'.", storageDomainId); } }	private boolean detachStorageDomainSucceeded(org.ovirt.engine.core.compat.Guid storageDomainId) { log.info("Domain '{}' is already attached to a different storage pool, clean the storage domain metadata.", storageDomainId); org.ovirt.engine.core.common.vdscommands.StorageDomainVdsCommandParameters params = new org.ovirt.engine.core.common.vdscommands.StorageDomainVdsCommandParameters(storageDomainId, org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getVds().getId()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = runVdsCommand(VDSCommandType.CleanStorageDomainMetaData, params); if (!(ret.getSucceeded())) { log.error("Failed to clean metadata for storage domain '{}'.", storageDomainId); return false; } log.info("Successfully cleaned metadata for storage domain '{}'.", storageDomainId); return true; }
private void cleanDirtyMetaDataIfNeeded() { if ((org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getStoragePool().getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Maintenance)) { for (org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getStorages()) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.get(storageDomainId); if ((domain.getStorageDomainType().isDataDomain()) && (isStorageDomainAttachedToStoragePool(domain))) { detachStorageDomain(storageDomainId); } } } }	private boolean cleanDirtyMetaDataIfNeeded() { if ((org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getStoragePool().getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Maintenance)) { for (org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getStorages()) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.get(storageDomainId); if (((domain.getStorageDomainType().isDataDomain()) && (isStorageDomainAttachedToStoragePool(domain))) && (!(detachStorageDomainSucceeded(storageDomainId)))) { return false; } } } return true; }
@java.lang.Override public javax.ws.rs.core.Response remove() { boolean destroy = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.DESTROY, true, false); if (destroy) { org.ovirt.engine.core.common.action.StorageDomainParametersBase parameters = new org.ovirt.engine.core.common.action.StorageDomainParametersBase(guid); return performAction(ActionType.ForceRemoveStorageDomain, parameters); } else { java.lang.String host = org.ovirt.engine.api.restapi.util.ParametersHelper.getParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.HOST); if (host == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("host parameter is missing"); throw new javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fault).build()); } get(); boolean format = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.FORMAT, true, false); org.ovirt.engine.core.compat.Guid hostId = getHostId(host); org.ovirt.engine.core.common.action.RemoveStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.RemoveStorageDomainParameters(guid); parameters.setVdsId(hostId); parameters.setDoFormat(format); return performAction(ActionType.RemoveStorageDomain, parameters); } }	@java.lang.Override public javax.ws.rs.core.Response remove() { boolean destroy = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.DESTROY, true, false); get(); if (destroy) { org.ovirt.engine.core.common.action.StorageDomainParametersBase parameters = new org.ovirt.engine.core.common.action.StorageDomainParametersBase(guid); return performAction(ActionType.ForceRemoveStorageDomain, parameters); } else { java.lang.String host = org.ovirt.engine.api.restapi.util.ParametersHelper.getParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.HOST); if (host == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("host parameter is missing"); throw new javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fault).build()); } boolean format = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.FORMAT, true, false); org.ovirt.engine.core.compat.Guid hostId = getHostId(host); org.ovirt.engine.core.common.action.RemoveStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.RemoveStorageDomainParameters(guid); parameters.setVdsId(hostId); parameters.setDoFormat(format); return performAction(ActionType.RemoveStorageDomain, parameters); } }
public void setWidgetColSize(org.gwtbootstrap3.client.ui.constants.ColumnSize size) { if ((sizeContainer) != null) { sizeContainer.addStyleName(size.getCssName()); } else { sizeContainer.removeStyleName(widgetColSize.getCssName()); sizeContainer.addStyleName(size.getCssName()); } widgetColSize = size; }	public void setWidgetColSize(org.gwtbootstrap3.client.ui.constants.ColumnSize size) { if ((sizeContainer) != null) { sizeContainer.addStyleName(size.getCssName()); } }
public void setLabelColSize(org.gwtbootstrap3.client.ui.constants.ColumnSize size) { if ((labelColSize) == null) { getFormLabel().setAddStyleNames(size.getCssName()); } else { getFormLabel().removeStyleName(labelColSize.getCssName()); getFormLabel().setAddStyleNames(size.getCssName()); } labelColSize = size; }	public void setLabelColSize(org.gwtbootstrap3.client.ui.constants.ColumnSize size) { getFormLabel().addStyleName(size.getCssName()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(storageDomain().id()), mandatory(storageDomain().name())); optional(storageDomain().force()); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(storageDomain().id()), mandatory(storageDomain().name())); }
@javax.annotation.PostConstruct private void init() { int quotaCacheIntervalInMinutes = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.QuotaCacheIntervalInMinutes); executor.scheduleWithFixedDelay(() -> updateQuotaCache(), 1, quotaCacheIntervalInMinutes, java.util.concurrent.TimeUnit.MINUTES); }	@javax.annotation.PostConstruct private void init() { int quotaCacheIntervalInMinutes = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.QuotaCacheIntervalInMinutes); executor.scheduleWithFixedDelay(this::updateQuotaCache, 1, quotaCacheIntervalInMinutes, java.util.concurrent.TimeUnit.MINUTES); }
public void performLoadBalancing() { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.debug("Load Balancer timer entered."); java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = getClusterDao().getAll(); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { org.ovirt.engine.core.common.scheduling.ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId()); org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnit = policyUnits.get(policy.getBalance()); java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> balanceResult = java.util.Optional.empty(); if (policyUnit.getPolicyUnit().isEnabled()) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = getVdsDao().getAllForClusterWithoutMigrating(cluster.getId()); if (policyUnit.getPolicyUnit().isInternal()) { balanceResult = internalRunBalance(policyUnit, cluster, hosts); } else if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.ExternalSchedulerEnabled)) { balanceResult = externalRunBalance(policyUnit, cluster, hosts); } } if ((balanceResult.isPresent()) && (balanceResult.get().isValid())) { migrationHandler.migrateVM(balanceResult.get().getCandidateHosts(), balanceResult.get().getVmToMigrate(), org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getMessage(AuditLogType.MIGRATION_REASON_LOAD_BALANCING)); } } }	private void performLoadBalancingImpl() { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.debug("Load Balancer timer entered."); java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAll(); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { org.ovirt.engine.core.common.scheduling.ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId()); org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnit = policyUnits.get(policy.getBalance()); java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> balanceResult = java.util.Optional.empty(); if (policyUnit.getPolicyUnit().isEnabled()) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = vdsDao.getAllForClusterWithoutMigrating(cluster.getId()); if (policyUnit.getPolicyUnit().isInternal()) { balanceResult = internalRunBalance(policyUnit, cluster, hosts); } else if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.ExternalSchedulerEnabled)) { balanceResult = externalRunBalance(policyUnit, cluster, hosts); } } if ((balanceResult.isPresent()) && (balanceResult.get().isValid())) { migrationHandler.migrateVM(balanceResult.get().getCandidateHosts(), balanceResult.get().getVmToMigrate(), org.ovirt.engine.core.dal.dbbroker.auditloghandling.MessageBundler.getMessage(AuditLogType.MIGRATION_REASON_LOAD_BALANCING)); } } }
private void enableLoadBalancer() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableVdsLoadBalancing)) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Start scheduling to enable vds load balancer"); executor.scheduleWithFixedDelay(() -> performLoadBalancing(), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsLoadBalancingIntervalInMinutes), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsLoadBalancingIntervalInMinutes), java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Finished scheduling to enable vds load balancer"); } }	private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable createEventForCluster(org.ovirt.engine.core.common.businessentities.Cluster cluster) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); logable.setClusterName(cluster.getName()); logable.setClusterId(cluster.getId()); return logable; }
private void updateVmVersion() { for (org.ovirt.engine.core.compat.Guid vmId : vmDao.getVmIdsForVersionUpdate(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId())) { if (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobMap.containsKey(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId()))) { break; } org.ovirt.engine.core.common.action.UpdateVmVersionParameters params = new org.ovirt.engine.core.common.action.UpdateVmVersionParameters(vmId); params.setSessionId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getSessionId()); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(ActionType.UpdateVmVersion, params, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); } org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobMap.remove(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId()); }	private void updateVmVersion() { for (org.ovirt.engine.core.compat.Guid vmId : vmDao.getVmIdsForVersionUpdate(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId())) { if (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobHashMap.containsKey(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId()))) { break; } org.ovirt.engine.core.common.action.UpdateVmVersionParameters params = new org.ovirt.engine.core.common.action.UpdateVmVersionParameters(vmId); params.setSessionId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getSessionId()); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(ActionType.UpdateVmVersion, params, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); } org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobHashMap.remove(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId()); org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobMap.remove(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId()); }
public void scheduleJobs() { int refreshRate = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsRefreshRate)) * 1000; registeredJobs.add(executor.scheduleWithFixedDelay(this::refresh, refreshRate, refreshRate, java.util.concurrent.TimeUnit.MILLISECONDS)); vmsRefresher = getRefresherFactory().create(this); vmsRefresher.startMonitoring(); hostRefresher = new org.ovirt.engine.core.vdsbroker.HostConnectionRefresher(this, resourceManager); hostRefresher.start(); }	public void scheduleJobs() { int refreshRate = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsRefreshRate)) * 1000; registeredJobs.add(executor.scheduleWithFixedDelay(this::refresh, refreshRate, refreshRate, java.util.concurrent.TimeUnit.MILLISECONDS)); vmsRefresher = getRefresherFactory().create(this, resourceManager); vmsRefresher.startMonitoring(); hostRefresher = new org.ovirt.engine.core.vdsbroker.HostConnectionRefresher(this, resourceManager); hostRefresher.start(); }
public void refresh() { log.debug("Affinity Rules Enforcement Manager interval reached."); final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmCandidates = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusterDao.getWithoutMigratingVms()) { if (!(cluster.isInUpgradeMode())) { final org.ovirt.engine.core.common.businessentities.VM candidate = rulesEnforcer.chooseNextVmToMigrate(cluster); if (candidate != null) { vmCandidates.add(candidate); } } } for (org.ovirt.engine.core.common.businessentities.VM vm : vmCandidates) { migrateVM(vm); } }	public void refresh() { try { log.debug("Affinity Rules Enforcement Manager interval reached."); final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmCandidates = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusterDao.getWithoutMigratingVms()) { if (!(cluster.isInUpgradeMode())) { final org.ovirt.engine.core.common.businessentities.VM candidate = rulesEnforcer.chooseNextVmToMigrate(cluster); if (candidate != null) { vmCandidates.add(candidate); } } } for (org.ovirt.engine.core.common.businessentities.VM vm : vmCandidates) { migrateVM(vm); } } catch (java.lang.Throwable t) { log.error("Exception in refreshing affinity rules: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); log.debug("Exception", t); } }
public void backupCheck() { if (lock.tryLock()) { try { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Backup check started."); doBackupCheck(); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Backup check completed."); } finally { lock.unlock(); } } }	private void backupCheck() { try { if (lock.tryLock()) { try { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Backup check started."); doBackupCheck(); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Backup check completed."); } finally { lock.unlock(); } } } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.error("Exception in backupCheck: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.debug("Exception", t); } }
@org.junit.Before public void setup() { cluster1 = createCluster(); cluster2 = createCluster(); when(clusterDao.getWithoutMigratingVms()).thenReturn(java.util.Arrays.asList(cluster1, cluster2)); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster1))).thenReturn(vm1); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster2))).thenReturn(vm2); when(arem.getExecutor()).thenReturn(java.util.concurrent.Executors.newScheduledThreadPool(1)); arem.wakeup(); }	@org.junit.Before public void setup() { cluster1 = createCluster(); cluster2 = createCluster(); when(clusterDao.getWithoutMigratingVms()).thenReturn(java.util.Arrays.asList(cluster1, cluster2)); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster1))).thenReturn(vm1); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster2))).thenReturn(vm2); arem.wakeup(); }
@javax.annotation.PostConstruct private void initialize() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.PMHealthCheckEnabled)) { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Start initializing {}", getClass().getSimpleName()); java.lang.Integer pmHealthCheckInterval = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PMHealthCheckIntervalInSec); executor.scheduleWithFixedDelay(() -> pmHealthCheck(), pmHealthCheckInterval, pmHealthCheckInterval, java.util.concurrent.TimeUnit.SECONDS); } recover(vdsDao.getAll()); org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Finished initializing {}", getClass().getSimpleName()); }	@javax.annotation.PostConstruct private void initialize() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.PMHealthCheckEnabled)) { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Start initializing {}", getClass().getSimpleName()); java.lang.Integer pmHealthCheckInterval = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PMHealthCheckIntervalInSec); executor.scheduleWithFixedDelay(this::pmHealthCheck, pmHealthCheckInterval, pmHealthCheckInterval, java.util.concurrent.TimeUnit.SECONDS); } recover(vdsDao.getAll()); org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Finished initializing {}", getClass().getSimpleName()); }
public void pmHealthCheck() { if (lock.tryLock()) { try { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Power Management Health Check started."); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().getAll(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.isPmEnabled()) { pmHealthCheck(host); } } org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Power Management Health Check completed."); } finally { lock.unlock(); } } }	private void pmHealthCheck() { try { if (lock.tryLock()) { try { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Power Management Health Check started."); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().getAll(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.isPmEnabled()) { pmHealthCheck(host); } } org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Power Management Health Check completed."); } finally { lock.unlock(); } } } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.error("Exception in checking PM health: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.debug("Exception", t); } }
private void endDefaultOperations() { endUnlockOps(); if (isTemplateVersion()) { java.util.concurrent.ScheduledFuture job = schedulerService.schedule(this::updateVmVersion, 0, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobMap.put(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId(), job); } }	private void endDefaultOperations() { endUnlockOps(); if (isTemplateVersion()) { org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobHashMap.put(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId(), StringUtils.EMPTY); java.util.concurrent.ScheduledFuture job = schedulerService.schedule(this::updateVmVersion, 0, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobMap.put(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId(), job); org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobHashMap.put(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId(), java.lang.Integer.toString(job.hashCode())); } }
public void triggerPoolMonitoringJob() { try { poolMonitoringJob.cancel(true); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.VmPoolMonitor.log.debug("Exception cancelling existing job: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); } poolMonitoringJob = schedulerService.scheduleWithFixedDelay(this::managePrestartedVmsInAllVmPools, 0, vmPoolMonitorIntervalInMinutes, java.util.concurrent.TimeUnit.MINUTES); }	public void triggerPoolMonitoringJob() { try { poolMonitoringJob.cancel(false); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.VmPoolMonitor.log.debug("Exception cancelling existing job: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); } poolMonitoringJob = schedulerService.scheduleWithFixedDelay(this::managePrestartedVmsInAllVmPools, 0, vmPoolMonitorIntervalInMinutes, java.util.concurrent.TimeUnit.MINUTES); }
@javax.annotation.PostConstruct public void scheduleJob() { double interval = org.ovirt.engine.core.common.config.Config.<java.lang.Double>getValue(ConfigValues.CertificationValidityCheckTimeInHours); final int HOURS_TO_MINUTES = 60; long intervalInMinutes = java.lang.Math.round((interval * HOURS_TO_MINUTES)); executor.scheduleWithFixedDelay(() -> checkCertificationValidity(), 10, intervalInMinutes, java.util.concurrent.TimeUnit.MINUTES); }	@javax.annotation.PostConstruct public void scheduleJob() { double interval = org.ovirt.engine.core.common.config.Config.<java.lang.Double>getValue(ConfigValues.CertificationValidityCheckTimeInHours); final int HOURS_TO_MINUTES = 60; long intervalInMinutes = java.lang.Math.round((interval * HOURS_TO_MINUTES)); executor.scheduleWithFixedDelay(this::checkCertificationValidity, 10, intervalInMinutes, java.util.concurrent.TimeUnit.MINUTES); }
public void checkCertificationValidity() { try { if ((!(checkCertificate(org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.getCertificate(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKICACert()), AuditLogType.ENGINE_CA_CERTIFICATION_HAS_EXPIRED, AuditLogType.ENGINE_CA_CERTIFICATION_IS_ABOUT_TO_EXPIRE_ALERT, AuditLogType.ENGINE_CA_CERTIFICATION_IS_ABOUT_TO_EXPIRE, null))) ^ (!(checkCertificate(((java.security.cert.X509Certificate) (org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.getCertificate())), AuditLogType.ENGINE_CERTIFICATION_HAS_EXPIRED, AuditLogType.ENGINE_CERTIFICATION_IS_ABOUT_TO_EXPIRE_ALERT, AuditLogType.ENGINE_CERTIFICATION_IS_ABOUT_TO_EXPIRE, null)))) { return; } if (!(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EncryptHostCommunication))) { return; } hostDao.getAll().stream().filter(( host) -> ((host.getStatus()) == VDSStatus.Up) || ((host.getStatus()) == VDSStatus.NonOperational)).forEach(this::checkHostCertificateValidity); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.CertificationValidityChecker.log.error("Failed to check certification validity: {}", e.getMessage()); org.ovirt.engine.core.bll.CertificationValidityChecker.log.error("Exception", e); } }	private void checkCertificationValidity() { try { if ((!(checkCertificate(org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.getCertificate(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKICACert()), AuditLogType.ENGINE_CA_CERTIFICATION_HAS_EXPIRED, AuditLogType.ENGINE_CA_CERTIFICATION_IS_ABOUT_TO_EXPIRE_ALERT, AuditLogType.ENGINE_CA_CERTIFICATION_IS_ABOUT_TO_EXPIRE, null))) ^ (!(checkCertificate(((java.security.cert.X509Certificate) (org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.getCertificate())), AuditLogType.ENGINE_CERTIFICATION_HAS_EXPIRED, AuditLogType.ENGINE_CERTIFICATION_IS_ABOUT_TO_EXPIRE_ALERT, AuditLogType.ENGINE_CERTIFICATION_IS_ABOUT_TO_EXPIRE, null)))) { return; } if (!(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EncryptHostCommunication))) { return; } hostDao.getAll().stream().filter(( host) -> ((host.getStatus()) == VDSStatus.Up) || ((host.getStatus()) == VDSStatus.NonOperational)).forEach(this::checkHostCertificateValidity); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.CertificationValidityChecker.log.error("Failed to check certification validity: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.CertificationValidityChecker.log.debug("Exception", t); } }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.info("Initializing DWH Heart Beat"); heartBeatVar = new org.ovirt.engine.core.common.businessentities.DwhHistoryTimekeeping(); heartBeatVar.setVariable(DwhHistoryTimekeepingVariable.HEART_BEAT); executor.scheduleWithFixedDelay(() -> engineIsRunningNotification(), 0, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.DwhHeartBeatInterval), java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.info("DWH Heart Beat initialized"); }	@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.info("Initializing DWH Heart Beat"); heartBeatVar = new org.ovirt.engine.core.common.businessentities.DwhHistoryTimekeeping(); heartBeatVar.setVariable(DwhHistoryTimekeepingVariable.HEART_BEAT); executor.scheduleWithFixedDelay(this::engineIsRunningNotification, 0, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.DwhHeartBeatInterval), java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.info("DWH Heart Beat initialized"); }
public synchronized void fetchIsoDomains() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> repofileList = repoFileMetaDataDao.getAllRepoFilesForAllStoragePools(StorageDomainType.ISO, StoragePoolStatus.Up, StorageDomainStatus.Active, VDSStatus.Up); resetProblematicList(); java.util.List<java.util.concurrent.Callable<java.lang.Void>> tasks = new java.util.ArrayList<>(); for (final org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage : repofileList) { if (shouldRefreshIsoDomain(repoImage.getLastRefreshed())) { tasks.add(() -> { updateCachedIsoFileListFromVdsm(repoImage); return null; }); } else { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.debug(("Automatic refresh process for '{}' file type in storage domain id '{}' was not performed" + " since refresh time out did not passed yet."), repoImage.getFileType(), repoImage.getRepoDomainId()); } } org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.invokeAll(tasks); handleErrorLog(new java.util.ArrayList(problematicRepoFileList)); }	private boolean getShouldForceRefreshByDefault() { return org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.ForceRefreshDomainFilesListByDefault); }
@javax.annotation.PostConstruct public void scheduleJob() { double availableUpdatesRefreshRate = org.ovirt.engine.core.common.config.Config.<java.lang.Double>getValue(ConfigValues.HostPackagesUpdateTimeInHours); if (availableUpdatesRefreshRate > 0) { final int HOURS_TO_MINUTES = 60; long rateInMinutes = java.lang.Math.round((availableUpdatesRefreshRate * HOURS_TO_MINUTES)); scheduledExecutor.scheduleWithFixedDelay(() -> availableUpdates(), 15, rateInMinutes, java.util.concurrent.TimeUnit.MINUTES); } }	@javax.annotation.PostConstruct public void scheduleJob() { double availableUpdatesRefreshRate = org.ovirt.engine.core.common.config.Config.<java.lang.Double>getValue(ConfigValues.HostPackagesUpdateTimeInHours); if (availableUpdatesRefreshRate > 0) { final int HOURS_TO_MINUTES = 60; long rateInMinutes = java.lang.Math.round((availableUpdatesRefreshRate * HOURS_TO_MINUTES)); scheduledExecutor.scheduleWithFixedDelay(this::availableUpdates, 15, rateInMinutes, java.util.concurrent.TimeUnit.MINUTES); } }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.info("Start initializing {}", getClass().getSimpleName()); isoDomainRefreshRate = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AutoRepoDomainRefreshTime)) * (org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.MIN_TO_MILLISECONDS); executor.scheduleWithFixedDelay(() -> fetchIsoDomains(), 300000, isoDomainRefreshRate, java.util.concurrent.TimeUnit.MILLISECONDS); org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.info("Finished initializing {}", getClass().getSimpleName()); }	private int getInvalidateCachePeriodFromConfig() { return ((org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.RepoDomainInvalidateCacheTimeInMinutes)) * 60) * 1000; }
private void scheduleJobs(long regularInterval, long initialInterval) { getExecutor().scheduleWithFixedDelay(() -> refresh(), initialInterval, regularInterval, java.util.concurrent.TimeUnit.MINUTES); }	private void scheduleJobs(long regularInterval, long initialInterval) { executor.scheduleWithFixedDelay(this::refresh, initialInterval, regularInterval, java.util.concurrent.TimeUnit.MINUTES); }
@javax.annotation.PostConstruct private void initialize() { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Start initializing {}", getClass().getSimpleName()); java.lang.Integer backupCheckPeriodInHours = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BackupCheckPeriodInHours); if (backupCheckPeriodInHours > 0) { executor.scheduleWithFixedDelay(() -> backupCheck(), backupCheckPeriodInHours, backupCheckPeriodInHours, java.util.concurrent.TimeUnit.HOURS); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Finished initializing {}", getClass().getSimpleName()); } }	@javax.annotation.PostConstruct private void initialize() { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Start initializing {}", getClass().getSimpleName()); java.lang.Integer backupCheckPeriodInHours = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BackupCheckPeriodInHours); if (backupCheckPeriodInHours > 0) { executor.scheduleWithFixedDelay(this::backupCheck, backupCheckPeriodInHours, backupCheckPeriodInHours, java.util.concurrent.TimeUnit.HOURS); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Finished initializing {}", getClass().getSimpleName()); } }
public synchronized void updateQuotaCache() { if (!(isCacheUpdateNeeded())) { return; } log.debug("Updating Quota Cache..."); long timeStart = java.lang.System.currentTimeMillis(); java.util.List<org.ovirt.engine.core.common.businessentities.Quota> allQuotaIncludingConsumption = getQuotaDao().getAllQuotaIncludingConsumption(); if (allQuotaIncludingConsumption.isEmpty()) { return; } java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.Quota>> newStoragePoolQuotaMap = new java.util.HashMap<>(); java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> newDefaultQuotaIdMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.Quota quota : allQuotaIncludingConsumption) { if (!(newStoragePoolQuotaMap.containsKey(quota.getStoragePoolId()))) { newStoragePoolQuotaMap.put(quota.getStoragePoolId(), new java.util.HashMap()); } newStoragePoolQuotaMap.get(quota.getStoragePoolId()).put(quota.getId(), quota); if (quota.isDefault()) { newDefaultQuotaIdMap.put(quota.getStoragePoolId(), quota.getId()); } } lock.writeLock().lock(); try { storagePoolQuotaMap = newStoragePoolQuotaMap; storagePoolDefaultQuotaIdMap = newDefaultQuotaIdMap; } finally { lock.writeLock().unlock(); } long timeEnd = java.lang.System.currentTimeMillis(); log.info("Quota Cache updated. ({} msec)", (timeEnd - timeStart)); }	private synchronized void updateQuotaCache() { try { updateQuotaCacheImpl(); } catch (java.lang.Throwable t) { log.error("Exception in updating quota cache: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); log.debug("Exception", t); } }
public void availableUpdates() { hostDao.getAll().stream().filter(( h) -> h.getStatus().isEligibleForCheckUpdates()).forEach(this::submitCheckUpdatesForHost); }	private void availableUpdates() { try { hostDao.getAll().stream().filter(( h) -> h.getStatus().isEligibleForCheckUpdates()).forEach(this::submitCheckUpdatesForHost); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.hostdeploy.HostUpdatesCheckerService.log.error("Exception in checking for available updates: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.hostdeploy.HostUpdatesCheckerService.log.debug("Exception", t); } }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Start initializing {}", getClass().getSimpleName()); executor.scheduleWithFixedDelay(() -> onTimer(), 0, 7, java.util.concurrent.TimeUnit.DAYS); org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Finished initializing {}", getClass().getSimpleName()); }	@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Start initializing {}", getClass().getSimpleName()); executor.scheduleWithFixedDelay(this::checkCompatibility, 0, 7, java.util.concurrent.TimeUnit.DAYS); org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Finished initializing {}", getClass().getSimpleName()); }
public void triggerNow() { if ((updateTimerJob) != null) { try { updateTimerJob.cancel(true); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.storage.ovfstore.OvfDataUpdater.log.debug("Exception cancelling existing job: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); } } updateTimerJob = schedulerService.scheduleWithFixedDelay(this::ovfUpdate, 0, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.OvfUpdateIntervalInMinutes), java.util.concurrent.TimeUnit.MINUTES); }	public void triggerNow() { if ((updateTimerJob) != null) { try { updateTimerJob.cancel(false); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.storage.ovfstore.OvfDataUpdater.log.debug("Exception cancelling existing job: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); } } updateTimerJob = schedulerService.scheduleWithFixedDelay(this::ovfUpdate, 0, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.OvfUpdateIntervalInMinutes), java.util.concurrent.TimeUnit.MINUTES); }
public void onTimer() { java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(java.util.Comparator.naturalOrder()); if (retVal.isPresent()) { org.ovirt.engine.core.compat.Version version = retVal.get(); storagePoolDao.getAll().stream().filter(( storagePool) -> (version.compareTo(storagePool.getCompatibilityVersion())) > 0).forEach(( storagePool) -> logAlert(version, storagePool)); } }	private void checkCompatibility() { try { java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(java.util.Comparator.naturalOrder()); if (retVal.isPresent()) { org.ovirt.engine.core.compat.Version version = retVal.get(); storagePoolDao.getAll().stream().filter(( storagePool) -> (version.compareTo(storagePool.getCompatibilityVersion())) > 0).forEach(( storagePool) -> logAlert(version, storagePool)); } } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.error("Failed to check certification validity: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.debug("Exception", t); } }
@java.lang.Override public java.util.Date getNextRunTime(javax.enterprise.concurrent.LastExecution lastExecution, java.util.Date date) { java.util.Date nextExecutionDate = generator.next(new java.util.Date()); return nextExecutionDate; }	@java.lang.Override public java.util.Date getNextRunTime(javax.enterprise.concurrent.LastExecution lastExecution, java.util.Date date) { return generator.next(new java.util.Date()); }
@javax.annotation.PostConstruct public void initialize() { org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info("Start initializing {}", getClass().getSimpleName()); succeededJobTime = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SucceededJobCleanupTimeInMinutes); failedJobTime = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.FailedJobCleanupTimeInMinutes); java.lang.Integer cleanupFrequency = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.JobCleanupRateInMinutes); executor.scheduleWithFixedDelay(() -> cleanCompletedJob(), cleanupFrequency, cleanupFrequency, java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info("Finished initializing {}", getClass().getSimpleName()); }	@javax.annotation.PostConstruct public void initialize() { org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info("Start initializing {}", getClass().getSimpleName()); succeededJobTime = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SucceededJobCleanupTimeInMinutes); failedJobTime = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.FailedJobCleanupTimeInMinutes); java.lang.Integer cleanupFrequency = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.JobCleanupRateInMinutes); executor.scheduleWithFixedDelay(this::cleanCompletedJob, cleanupFrequency, cleanupFrequency, java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info("Finished initializing {}", getClass().getSimpleName()); }
private void managePrestartedVmsInAllVmPools() { try { vmPoolDao.getAll().stream().filter(( pool) -> (pool.getPrestartedVms()) > 0).forEach(this::managePrestartedVmsInPool); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.VmPoolMonitor.log.error("Exception managing prestarted VMs in all VM pools: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.VmPoolMonitor.log.debug("Exception", t); } }	private void managePrestartedVmsInAllVmPools() { lock.lock(); try { vmPoolDao.getAll().stream().filter(( pool) -> (pool.getPrestartedVms()) > 0).forEach(this::managePrestartedVmsInPool); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.VmPoolMonitor.log.error("Exception managing prestarted VMs in all VM pools: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.VmPoolMonitor.log.debug("Exception", t); } finally { lock.unlock(); } }
public void engineIsRunningNotification() { try { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("DWH Heart Beat - Start"); heartBeatVar.setDateTime(new java.util.Date()); dwhHistoryTimekeepingDao.save(heartBeatVar); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("DWH Heart Beat - End"); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.error("Error updating DWH Heart Beat: {}", ex.getMessage()); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Exception", ex); } }	private void engineIsRunningNotification() { try { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("DWH Heart Beat - Start"); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew, () -> { heartBeatVar.setDateTime(new java.util.Date()); dwhHistoryTimekeepingDao.save(heartBeatVar); return null; }); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("DWH Heart Beat - End"); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.error("Error updating DWH Heart Beat: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Exception", t); } }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Start initializing {}", getClass().getSimpleName()); java.util.Calendar calendar = new java.util.GregorianCalendar(); java.util.Date commandEntityCleanupTime = org.ovirt.engine.core.common.config.Config.<org.ovirt.engine.core.compat.DateTime>getValue(ConfigValues.CommandEntityCleanupTime); calendar.setTimeInMillis(commandEntityCleanupTime.getTime()); java.lang.String cronExpression = java.lang.String.format("%d %d %d * * ?", calendar.get(java.util.Calendar.SECOND), calendar.get(java.util.Calendar.MINUTE), calendar.get(java.util.Calendar.HOUR_OF_DAY)); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Setting command entity cleanup manager to run at: {}", cronExpression); executor.schedule(() -> doCleanup(), new org.ovirt.engine.core.common.utils.EngineCronTrigger(cronExpression)); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Finished initializing {}", getClass().getSimpleName()); }	@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Start initializing {}", getClass().getSimpleName()); java.util.Calendar calendar = new java.util.GregorianCalendar(); java.util.Date commandEntityCleanupTime = org.ovirt.engine.core.common.config.Config.<org.ovirt.engine.core.compat.DateTime>getValue(ConfigValues.CommandEntityCleanupTime); calendar.setTimeInMillis(commandEntityCleanupTime.getTime()); java.lang.String cronExpression = java.lang.String.format("%d %d %d * * ?", calendar.get(java.util.Calendar.SECOND), calendar.get(java.util.Calendar.MINUTE), calendar.get(java.util.Calendar.HOUR_OF_DAY)); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Setting command entity cleanup manager to run at: {}", cronExpression); executor.schedule(this::cleanup, new org.ovirt.engine.core.common.utils.EngineCronTrigger(cronExpression)); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Finished initializing {}", getClass().getSimpleName()); }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("Start initializing {}", getClass().getSimpleName()); pollingRate = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AsyncCommandPollingLoopInSeconds); initCommandExecutor(); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.executor.scheduleWithFixedDelay(() -> invokeCallbackMethods(), pollingRate, pollingRate, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("Finished initializing {}", getClass().getSimpleName()); }	@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("Start initializing {}", getClass().getSimpleName()); pollingRate = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AsyncCommandPollingLoopInSeconds); initCommandExecutor(); executor.scheduleWithFixedDelay(this::invokeCallbackMethods, pollingRate, pollingRate, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("Finished initializing {}", getClass().getSimpleName()); }
public void ovfUpdate() { try { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> storagePools = storagePoolDao.getAllByStatus(StoragePoolStatus.Up); updateOvfData(storagePools); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.storage.ovfstore.OvfDataUpdater.log.error("Exception updating ovf data: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.storage.ovfstore.OvfDataUpdater.log.debug("Exception", t); } }	public void ovfUpdate() { lock.lock(); try { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> storagePools = storagePoolDao.getAllByStatus(StoragePoolStatus.Up); updateOvfData(storagePools); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.storage.ovfstore.OvfDataUpdater.log.error("Exception updating ovf data: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.storage.ovfstore.OvfDataUpdater.log.debug("Exception", t); } finally { lock.unlock(); } }
private void doCleanup() { try { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Start deleteAgedOutCommandEntities"); org.ovirt.engine.core.compat.DateTime latestTimeToKeep = org.ovirt.engine.core.compat.DateTime.getNow().addDays(((org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.CommandEntityAgingThreshold)) * (-1))); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsBeforeDate(latestTimeToKeep); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Finished deleteAgedOutCommandEntities"); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.error("deleteAgedOutCommandEntities failed with exception", e); } }	private void cleanup() { try { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.debug("Start cleanup"); org.ovirt.engine.core.compat.DateTime latestTimeToKeep = org.ovirt.engine.core.compat.DateTime.getNow().addDays(((org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.CommandEntityAgingThreshold)) * (-1))); commandCoordinatorUtil.removeAllCommandsBeforeDate(latestTimeToKeep); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.debug("Finished cleanup"); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.error("Exception in performing command entity cleanup: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.debug("Exception", t); } }
public void cleanCompletedJob() { java.util.Date succeededJobsDeleteTime = new java.util.Date(((java.lang.System.currentTimeMillis()) - (java.util.concurrent.TimeUnit.MILLISECONDS.convert(succeededJobTime, java.util.concurrent.TimeUnit.MINUTES)))); java.util.Date failedJobsDeleteTime = new java.util.Date(((java.lang.System.currentTimeMillis()) - (java.util.concurrent.TimeUnit.MILLISECONDS.convert(failedJobTime, java.util.concurrent.TimeUnit.MINUTES)))); try { jobDao.deleteCompletedJobs(succeededJobsDeleteTime, failedJobsDeleteTime); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.error("Failed to delete completed jobs: {}", e.getMessage()); org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.debug("Exception", e); } }	private void cleanCompletedJob() { java.util.Date succeededJobsDeleteTime = new java.util.Date(((java.lang.System.currentTimeMillis()) - (java.util.concurrent.TimeUnit.MILLISECONDS.convert(succeededJobTime, java.util.concurrent.TimeUnit.MINUTES)))); java.util.Date failedJobsDeleteTime = new java.util.Date(((java.lang.System.currentTimeMillis()) - (java.util.concurrent.TimeUnit.MILLISECONDS.convert(failedJobTime, java.util.concurrent.TimeUnit.MINUTES)))); try { jobDao.deleteCompletedJobs(succeededJobsDeleteTime, failedJobsDeleteTime); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.error("Failed to delete completed jobs: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.debug("Exception", t); } }
@javax.annotation.PostConstruct private void init() { autoStartVmsToRestart = new java.util.concurrent.CopyOnWriteArraySet<>(getInitialVmsToStart()); int autoStartVmsRunnerIntervalInSeconds = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AutoStartVmsRunnerIntervalInSeconds); executor.scheduleWithFixedDelay(() -> startFailedAutoStartVms(), autoStartVmsRunnerIntervalInSeconds, autoStartVmsRunnerIntervalInSeconds, java.util.concurrent.TimeUnit.SECONDS); }	@javax.annotation.PostConstruct private void init() { autoStartVmsToRestart = new java.util.concurrent.CopyOnWriteArraySet<>(getInitialVmsToStart()); int autoStartVmsRunnerIntervalInSeconds = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AutoStartVmsRunnerIntervalInSeconds); executor.scheduleWithFixedDelay(this::startFailedAutoStartVms, autoStartVmsRunnerIntervalInSeconds, autoStartVmsRunnerIntervalInSeconds, java.util.concurrent.TimeUnit.SECONDS); }
public org.ovirt.api.metamodel.concepts.Method createMethod(com.thoughtworks.qdox.model.JavaClass javaClass, org.ovirt.api.metamodel.concepts.Service service) { org.ovirt.api.metamodel.concepts.Method method = new org.ovirt.api.metamodel.concepts.Method(); analyzeName(javaClass, method); if ((org.ovirt.api.metamodel.analyzer.ModelAnalyzer.GET_METHOD_NAME.equals(method.getName())) || (org.ovirt.api.metamodel.analyzer.ModelAnalyzer.LIST_METHOD_NAME.equals(method.getName()))) { addFollowParameter(method); } analyzeAnnotations(javaClass, method); analyzeDocumentation(javaClass, method); javaClass.getMethods().forEach(( x) -> analyzeMethodMember(x, method)); method.setDeclaringService(service); createSignatures(javaClass, service, method); return method; }	public org.ovirt.api.metamodel.concepts.Method createMethod(com.thoughtworks.qdox.model.JavaClass javaClass, org.ovirt.api.metamodel.concepts.Service service) { org.ovirt.api.metamodel.concepts.Method method = new org.ovirt.api.metamodel.concepts.Method(); analyzeName(javaClass, method); analyzeAnnotations(javaClass, method); analyzeDocumentation(javaClass, method); javaClass.getMethods().forEach(( x) -> analyzeMethodMember(x, method)); method.setDeclaringService(service); createSignatures(javaClass, service, method); return method; }
private void registerIfaceInMacPool(org.ovirt.engine.core.common.businessentities.network.VmNic iface, boolean reassignMac) { if (reassignMac) { iface.setMacAddress(macPool.allocateNewMac()); } else { if (!(macPool.addMac(iface.getMacAddress()))) { auditLogMacInUse(iface); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.MAC_ADDRESS_IS_IN_USE); } } }	private void registerIfaceInMacPool(org.ovirt.engine.core.common.businessentities.network.VmNic iface, boolean reassignMac) { if (reassignMac) { iface.setMacAddress(macPool.allocateNewMac()); } else if (!(macPool.addMac(iface.getMacAddress()))) { auditLogMacInUse(iface); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.MAC_ADDRESS_IS_IN_USE); } }
@org.junit.Test public void add() { runAddAndVerify(org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(), false, times(0)); }	@org.junit.Test public void add() { runAddAndVerify(org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(), true); }
@org.junit.Test public void addWithExistingMacAddressSucceed() { org.ovirt.engine.core.common.businessentities.network.VmNic iface = org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(); runAddAndVerify(iface, true, times(1)); }	@org.junit.Test public void addWithExistingMacAddressSucceed() { runAddAndVerify(org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(), false); }
@org.junit.Test public void removeAll() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces = java.util.Arrays.asList(org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(), org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface()); when(vmNicDao.getAllForVm(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(interfaces); vmInterfaceManager.removeAllAndReleaseMacAddresses(org.ovirt.engine.core.compat.Guid.newGuid()); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { verifyRemoveAllDelegatedCorrectly(iface); } }	@org.junit.Test public void removeAll() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces = java.util.Arrays.asList(org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(), org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface()); when(vmNicDao.getAllForVm(any())).thenReturn(interfaces); vmInterfaceManager.removeAllAndReleaseMacAddresses(org.ovirt.engine.core.compat.Guid.newGuid()); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { verify(vmNicDao).remove(iface.getId()); verify(vmNetworkStatisticsDao).remove(iface.getId()); } verify(macPool).freeMacs(interfaces.stream().map(VmNic::getMacAddress).collect(java.util.stream.Collectors.toList())); }
public org.ovirt.engine.core.bll.network.macpool.MacPool createMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool, boolean engineStartup) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges macPoolUsingRanges = new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges(macPool.getId(), org.ovirt.engine.core.utils.MacAddressRangeUtils.macPoolToRanges(macPool), macPool.isAllowDuplicateMacAddresses(), auditLogDirector); macPoolUsingRanges.initialize(engineStartup, macsToAllocate(macPool.getId())); return macPoolUsingRanges; }	public org.ovirt.engine.core.bll.network.macpool.MacPool createMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool, boolean engineStartup) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges macPoolUsingRanges = new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges(macPool.getId(), org.ovirt.engine.core.utils.MacAddressRangeUtils.macPoolToRanges(macPool), macPool.isAllowDuplicateMacAddresses(), auditLogDirector); macPoolUsingRanges.initialize(engineStartup, macsUsedAcrossWholeSystem.getMacsForMacPool(macPool.getId())); return macPoolUsingRanges; }
protected void removeFromExternalNetworks(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { new org.ovirt.engine.core.bll.network.ExternalNetworkManager(iface).deallocateIfExternal(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); }	protected void removeFromExternalNetworks(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { getExternalNetworkManagerFactory().create(iface).deallocateIfExternal(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); }
protected void addVmInterfaces() { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(macPool); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getClusterId(), org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getStoragePoolId(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_IMPORT_VM_INVALID_INTERFACES); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = getVm().getInterfaces(); vmInterfaceManager.sortVmNics(nics, getVm().getStaticData().getManagedDeviceMap()); if ((!(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().isImportAsNewEntity())) && (isExternalMacsToBeReported())) { reportExternalMacs(); } for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : getVm().getInterfaces()) { initInterface(iface); vnicProfileHelper.updateNicWithVnicProfileForUser(iface, org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCurrentUser()); boolean reassignMac = (shouldMacBeReassigned(iface)) || (org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().isImportAsNewEntity()); vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCompensationContext(), reassignMac); macsAdded.add(iface.getMacAddress()); } vnicProfileHelper.auditInvalidInterfaces(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getVmName()); }	protected void addVmInterfaces() { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(macPool); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getClusterId(), org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getStoragePoolId(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_IMPORT_VM_INVALID_INTERFACES); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = getVm().getInterfaces(); vmInterfaceManager.sortVmNics(nics, getVm().getStaticData().getManagedDeviceMap()); if ((!(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().isImportAsNewEntity())) && (isExternalMacsToBeReported())) { reportExternalMacs(); } for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : getVm().getInterfaces()) { initInterface(iface); vnicProfileHelper.updateNicWithVnicProfileForUser(iface, org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCurrentUser()); vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCompensationContext(), shouldReassignMac(iface)); macsAdded.add(iface.getMacAddress()); } vnicProfileHelper.auditInvalidInterfaces(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getVmName()); }
private void allocateMacsMissingInMacPool(org.ovirt.engine.core.bll.network.macpool.MacPool macPool, java.util.Map<java.lang.String, java.lang.Long> preexistingMacsUsageFrequency, java.util.Map<java.lang.String, java.lang.Long> macsFromRequestUsageFrequency) { java.util.List<java.lang.String> macsToAcquire = new java.util.LinkedList<>(); for (java.util.Map.Entry<java.lang.String, java.lang.Long> entry : macsFromRequestUsageFrequency.entrySet()) { java.lang.String mac = entry.getKey(); java.lang.Long targetUsage = entry.getValue(); java.lang.Long currentUsage = preexistingMacsUsageFrequency.get(mac); long macToAcquire = (currentUsage == null) ? targetUsage : targetUsage - currentUsage; java.util.stream.LongStream.range(0, macToAcquire).forEach(( e) -> macsToAcquire.add(mac)); } macPool.addMacs(macsToAcquire); }	public java.util.stream.Stream<java.lang.String> macsInStatelessSnapshot(org.ovirt.engine.core.compat.Guid vmId) { java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> originalSnapshot = getVmConfigurationInStatelessSnapshotOfVm(vmId); java.util.Optional<java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>> originalSnapshotNetworkInterfaces = originalSnapshot.map(VM::getInterfaces); return originalSnapshotNetworkInterfaces.orElse(java.util.Collections.emptyList()).stream().map(VmNic::getMacAddress); }
protected void runAddAndVerify(org.ovirt.engine.core.common.businessentities.network.VmNic iface, boolean reserveExistingMac, org.mockito.verification.VerificationMode addMacVerification) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = mock(org.ovirt.engine.core.common.osinfo.OsRepository.class); when(vmInterfaceManager.getOsRepository()).thenReturn(osRepository); when(osRepository.hasNicHotplugSupport(anyInt(), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(true); vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.context.NoOpCompensationContext.getInstance(), reserveExistingMac); if (reserveExistingMac) { verify(macPool, times(1)).forceAddMac(iface.getMacAddress()); } else { verifyZeroInteractions(macPool); } verifyAddDelegatedCorrectly(iface, addMacVerification); }	protected void runAddAndVerify(org.ovirt.engine.core.common.businessentities.network.VmNic iface, boolean reassignMac) { if (!reassignMac) { when(macPool.addMac(eq(iface.getMacAddress()))).thenReturn(true); } vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.context.NoOpCompensationContext.getInstance(), reassignMac); if (reassignMac) { verify(macPool).allocateNewMac(); } else { verify(macPool).addMac(iface.getMacAddress()); } verify(vmNicDao).save(iface); verify(vmNetworkStatisticsDao).save(iface.getStatistics()); }
@javax.interceptor.AroundInvoke public java.lang.Object manageTransaction(javax.interceptor.InvocationContext ctx) throws java.lang.Exception { long start = java.lang.System.currentTimeMillis(); try { return ctx.proceed(); } catch (java.lang.Exception e) { throw e; } finally { org.ovirt.engine.core.common.di.interceptor.LoggingInterceptor.logger.debug("method: {}, params: {}, elapsed: {}ms", ctx.getMethod().getName(), ctx.getParameters(), ((java.lang.System.currentTimeMillis()) - start)); } }	@javax.interceptor.AroundInvoke java.lang.Object apply(javax.interceptor.InvocationContext ctx) throws java.lang.Exception { long start = java.lang.System.currentTimeMillis(); try { return ctx.proceed(); } finally { log("method: {}, params: {}, timeElapsed: {}ms", ctx.getMethod().getName(), ctx.getParameters(), ((java.lang.System.currentTimeMillis()) - start)); } }
@org.ovirt.engine.core.common.di.interceptor.Loggable @java.lang.Override public org.ovirt.engine.core.common.queries.QueryReturnValue runQuery(org.ovirt.engine.core.common.queries.QueryType actionType, org.ovirt.engine.core.common.queries.QueryParametersBase parameters) { return runQueryImpl(actionType, parameters, true, null); }	@org.ovirt.engine.core.common.di.interceptor.InvocationLogger @java.lang.Override public org.ovirt.engine.core.common.queries.QueryReturnValue runQuery(org.ovirt.engine.core.common.queries.QueryType actionType, org.ovirt.engine.core.common.queries.QueryParametersBase parameters) { return runQueryImpl(actionType, parameters, true, null); }
@org.ovirt.engine.core.common.di.interceptor.Loggable @java.lang.Override public org.ovirt.engine.core.common.action.ActionReturnValue runAction(org.ovirt.engine.core.common.action.ActionType actionType, org.ovirt.engine.core.common.action.ActionParametersBase parameters) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = notAllowToRunAction(actionType); if (returnValue != null) { return returnValue; } return runActionImpl(actionType, parameters, false, null); }	@java.lang.Override @org.ovirt.engine.core.common.di.interceptor.InvocationLogger public org.ovirt.engine.core.common.action.ActionReturnValue runAction(org.ovirt.engine.core.common.action.ActionType actionType, org.ovirt.engine.core.common.action.ActionParametersBase parameters) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = notAllowToRunAction(actionType); if (returnValue != null) { return returnValue; } return runActionImpl(actionType, parameters, false, null); }
private void changeScsiDeviceToVirtioScsi(java.util.Map<java.lang.String, java.lang.Object> vmStruct) { @java.lang.SuppressWarnings("unchecked") java.util.Map<java.lang.String, java.lang.Object>[] devices = ((java.util.Map<java.lang.String, java.lang.Object>[]) (vmStruct.get(VdsProperties.Devices))); java.util.Arrays.stream(devices).filter(( device) -> VdsProperties.Controller.equals(device.get(VdsProperties.Type))).filter(( device) -> VdsProperties.Scsi.equals(device.get(VdsProperties.Device))).filter(( device) -> VdsProperties.VirtioScsi.equals(device.get(VdsProperties.Model))).forEach(( device) -> { device.put(VdsProperties.Device, VdsProperties.VirtioScsi); device.remove(VdsProperties.Model); }); }	private void changeScsiDeviceToVirtioScsi(java.util.Map<java.lang.String, java.lang.Object> vmStruct) { java.util.Arrays.stream(((java.lang.Object[]) (vmStruct.get(VdsProperties.Devices)))).map(( o) -> ((java.util.Map<java.lang.String, java.lang.Object>) (o))).filter(( device) -> VdsProperties.Controller.equals(device.get(VdsProperties.Type))).filter(( device) -> VdsProperties.Scsi.equals(device.get(VdsProperties.Device))).filter(( device) -> VdsProperties.VirtioScsi.equals(device.get(VdsProperties.Model))).forEach(( device) -> { device.put(VdsProperties.Device, VdsProperties.VirtioScsi); device.remove(VdsProperties.Model); }); }
protected void initAppsTable() { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, true); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String> appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String>() { @java.lang.Override public java.lang.String getValue(java.lang.String appName) { return appName; } }; appsTable.addColumn(appNameColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterEntityInfoPanel.constants.nameSnapshot()); appsTable.setRowData(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); appsTable.setSelectionModel(new com.google.gwt.view.client.NoSelectionModel()); }	protected void initAppsTable() { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, true); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String> appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String>() { @java.lang.Override public java.lang.String getValue(java.lang.String appName) { return appName; } }; appsTable.addColumn(appNameColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterEntityInfoPanel.constants.nameSnapshot()); appsTable.setRowData(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); appsTable.setWidth("100%"); appsTable.setSelectionModel(new com.google.gwt.view.client.NoSelectionModel()); }
private void resizeToFullHeight() { scrollPanel.setHeight(((calculateTotalAvailableSpace()) + (Unit.PX.getType()))); }	@java.lang.Override public void resizeToFullHeight() { scrollPanel.setHeight(((calculateTotalAvailableSpace()) + (Unit.PX.getType()))); }
private void resizeGridToFullHeight() { int top = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getAbsoluteTop(); int windowHeight = com.google.gwt.user.client.Window.getClientHeight(); int contentHeight = this.getTableBodyElement().getOffsetHeight(); if (contentHeight == 0) { contentHeight = org.ovirt.engine.ui.common.widget.table.ActionCellTable.NO_ITEMS_HEIGHT; } else { contentHeight += getGridHeaderHeight(); } if (isHorizontalScrollbarVisible()) { contentHeight += scrollbarThickness; } contentHeight += 3; int maxGridHeight = windowHeight - top; maxGridHeight -= org.ovirt.engine.ui.common.widget.table.ActionCellTable.GRID_SUBTRACT; if ((top > 0) && (top < windowHeight)) { super.setHeight(((java.lang.Math.min(maxGridHeight, contentHeight)) + (Unit.PX.getType()))); } org.ovirt.engine.ui.common.widget.table.ActionCellTable.redraw(); }	private void resizeGridToFullHeight() { int top = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getAbsoluteTop(); int windowHeight = com.google.gwt.user.client.Window.getClientHeight(); int contentHeight = this.getTableBodyElement().getOffsetHeight(); if (contentHeight == 0) { contentHeight = org.ovirt.engine.ui.common.widget.table.ActionCellTable.NO_ITEMS_HEIGHT; } else { contentHeight += getGridHeaderHeight(); } if (isHorizontalScrollbarVisible()) { contentHeight += org.ovirt.engine.ui.common.widget.table.ActionCellTable.scrollbarThickness; } contentHeight += 3; int maxGridHeight = windowHeight - top; maxGridHeight -= org.ovirt.engine.ui.common.widget.table.ActionCellTable.GRID_SUBTRACT; if ((top > 0) && (top < windowHeight)) { super.setHeight(((java.lang.Math.min(maxGridHeight, contentHeight)) + (Unit.PX.getType()))); } org.ovirt.engine.ui.common.widget.table.ActionCellTable.redraw(); }
public static int determineScrollbarThickness() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); panel.getElement().getStyle().setWidth(100, Unit.PX); panel.getElement().getStyle().setHeight(100, Unit.PX); panel.getElement().getStyle().setOverflow(Overflow.SCROLL); com.google.gwt.dom.client.Document.get().getBody().appendChild(panel.getElement()); int scrollbarHeight = (panel.getOffsetHeight()) - (panel.getElement().getClientHeight()); com.google.gwt.dom.client.Document.get().getBody().removeChild(panel.getElement()); return scrollbarHeight; }	public static int determineScrollbarThickness() { com.google.gwt.dom.client.Element panel = com.google.gwt.user.client.DOM.createDiv(); panel.getStyle().setWidth(100, Unit.PX); panel.getStyle().setHeight(100, Unit.PX); panel.getStyle().setOverflow(Overflow.SCROLL); com.google.gwt.dom.client.Document.get().getBody().appendChild(panel); int scrollbarHeight = (panel.getOffsetHeight()) - (panel.getClientHeight()); com.google.gwt.dom.client.Document.get().getBody().removeChild(panel); return scrollbarHeight; }
private void initAppsTable() { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, true); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String> appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String>() { @java.lang.Override public java.lang.String getValue(java.lang.String appName) { return appName; } }; appsTable.addColumn(appNameColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotInfoPanel.constants.nameSnapshot()); appsTable.setRowData(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); appsTable.setSelectionModel(new com.google.gwt.view.client.NoSelectionModel()); }	private void initAppsTable() { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, true); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String> appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String>() { @java.lang.Override public java.lang.String getValue(java.lang.String appName) { return appName; } }; appsTable.addColumn(appNameColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotInfoPanel.constants.nameSnapshot()); appsTable.setRowData(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); appsTable.setWidth("100%"); appsTable.setSelectionModel(new com.google.gwt.view.client.NoSelectionModel()); }
protected static com.google.gwt.user.client.ui.Widget createDefaultLoadingIndicator(org.ovirt.engine.ui.common.widget.table.Resources resources) { com.google.gwt.resources.client.ImageResource loadingImg = resources.dataGridLoading(); if (loadingImg == null) { return null; } com.google.gwt.user.client.ui.Image image = new com.google.gwt.user.client.ui.Image(loadingImg); image.getElement().getStyle().setMarginTop(30.0, Unit.PX); return image; }	protected static com.google.gwt.user.client.ui.Widget createDefaultLoadingIndicator(org.ovirt.engine.ui.common.widget.table.Resources resources) { com.google.gwt.resources.client.ImageResource loadingImg = resources.dataGridLoading(); com.google.gwt.user.client.ui.Image image; if (loadingImg == null) { image = new com.google.gwt.user.client.ui.Image(); } else { image = new com.google.gwt.user.client.ui.Image(loadingImg); } image.getElement().getStyle().setMarginTop(30.0, Unit.PX); return image; }
public void switchTab(org.gwtbootstrap3.client.ui.TabListItem tabItem) { boolean found = false; for (int i = 0; i < (navTabs.getWidgetCount()); i++) { org.gwtbootstrap3.client.ui.TabListItem tabListItem = ((org.gwtbootstrap3.client.ui.TabListItem) (navTabs.getWidget(i))); if (tabItem.getText().equals(tabListItem.getText())) { tabListItem.showTab(); org.gwtbootstrap3.client.ui.TabPane tabPane = ((org.gwtbootstrap3.client.ui.TabPane) (tabContent.getWidget(i))); tabContent.remove(tabPane); tabContent.insert(tabPane, i); ((com.google.gwt.user.client.ui.FlowPanel) (tabPane.getWidget(0))).insert(tabHeaderContainer, 0); tabPane.getWidget(0).setHeight(height); tabPane.setActive(true); activeTab = ((org.gwtbootstrap3.client.ui.TabListItem) (navTabs.getWidget(i))); found = true; } else { org.gwtbootstrap3.client.ui.TabPane tabPane = ((org.gwtbootstrap3.client.ui.TabPane) (tabContent.getWidget(i))); ((com.google.gwt.user.client.ui.FlowPanel) (tabPane.getWidget(0))).remove(tabHeaderContainer); tabPane.setActive(false); } } if ((!found) && ((navTabs.getWidgetCount()) > 0)) { ((org.gwtbootstrap3.client.ui.TabListItem) (navTabs.getWidget(0))).showTab(); org.gwtbootstrap3.client.ui.TabPane tabPane = ((org.gwtbootstrap3.client.ui.TabPane) (tabContent.getWidget(0))); ((com.google.gwt.user.client.ui.FlowPanel) (tabPane.getWidget(0))).insert(tabHeaderContainer, 0); tabPane.setActive(true); } }	public void switchTab(org.gwtbootstrap3.client.ui.TabListItem tabItem) { boolean found = false; for (int i = 0; i < (navTabs.getWidgetCount()); i++) { org.gwtbootstrap3.client.ui.TabListItem currentTabItem = ((org.gwtbootstrap3.client.ui.TabListItem) (navTabs.getWidget(i))); if (tabItem.getText().equals(currentTabItem.getText())) { currentTabItem.showTab(); org.gwtbootstrap3.client.ui.TabPane tabPane = ((org.gwtbootstrap3.client.ui.TabPane) (tabContent.getWidget(i))); tabContent.remove(tabPane); tabContent.insert(tabPane, i); ((com.google.gwt.user.client.ui.FlowPanel) (tabPane.getWidget(0))).insert(tabHeaderContainer, 0); tabPane.getWidget(0).setHeight(height); tabPane.setActive(true); activeTab = ((org.gwtbootstrap3.client.ui.TabListItem) (navTabs.getWidget(i))); found = true; } else { org.gwtbootstrap3.client.ui.TabPane tabPane = ((org.gwtbootstrap3.client.ui.TabPane) (tabContent.getWidget(i))); ((com.google.gwt.user.client.ui.FlowPanel) (tabPane.getWidget(0))).remove(tabHeaderContainer); tabPane.setActive(false); } } if ((!found) && ((navTabs.getWidgetCount()) > 0)) { ((org.gwtbootstrap3.client.ui.TabListItem) (navTabs.getWidget(0))).showTab(); org.gwtbootstrap3.client.ui.TabPane tabPane = ((org.gwtbootstrap3.client.ui.TabPane) (tabContent.getWidget(0))); ((com.google.gwt.user.client.ui.FlowPanel) (tabPane.getWidget(0))).insert(tabHeaderContainer, 0); tabPane.setActive(true); } }
private void initNetworksTable() { networksTable.enableColumnResizing(); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network> nameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.Network network) { return network.getName(); } }; networksTable.addColumn(nameColumn, org.ovirt.engine.ui.common.widget.uicommon.popup.pool.IscsiBondPopupWidget.constants.name(), "40%"); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network> descriptionColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.Network network) { return network.getDescription(); } }; networksTable.addColumn(descriptionColumn, org.ovirt.engine.ui.common.widget.uicommon.popup.pool.IscsiBondPopupWidget.constants.description(), "60%"); }	private void initNetworksTable() { networksTable.enableColumnResizing(); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network> nameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.Network network) { return network.getName(); } }; networksTable.addColumn(nameColumn, org.ovirt.engine.ui.common.widget.uicommon.popup.pool.IscsiBondPopupWidget.constants.name(), "40%"); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network> descriptionColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.Network network) { return network.getDescription(); } }; networksTable.addColumn(descriptionColumn, org.ovirt.engine.ui.common.widget.uicommon.popup.pool.IscsiBondPopupWidget.constants.description(), "60%"); networksTable.setWidth("100%"); }
public void enableColumnResizing() { if (isTableHeaderVisible()) { table.enableColumnResizing(); } }	public void enableColumnResizing() { table.enableColumnResizing(); }
void updateListHeader(org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel model) { java.lang.String width = "100px"; listHeader = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, ((com.google.gwt.user.cellview.client.DataGrid.Resources) (com.google.gwt.core.client.GWT.create(org.ovirt.engine.ui.common.PopupSimpleTableResources.class))), true); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.elementName(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.storageDomainDisk(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.currentQuota(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.quotaDisk(), width); listHeader.setRowData(new java.util.ArrayList()); listHeaderPanel.setWidget(listHeader); }	void updateListHeader(org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel model) { java.lang.String width = "100px"; listHeader = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, ((com.google.gwt.user.cellview.client.DataGrid.Resources) (com.google.gwt.core.client.GWT.create(org.ovirt.engine.ui.common.PopupSimpleTableResources.class))), true); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.elementName(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.storageDomainDisk(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.currentQuota(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.quotaDisk(), width); listHeader.setRowData(new java.util.ArrayList()); listHeader.setWidth("100%"); listHeaderPanel.setWidget(listHeader); }
@java.lang.SuppressWarnings("unchecked") private static java.util.List<org.ovirt.engine.api.model.BaseResource> getInlineResources(java.lang.Object obj) { java.util.ArrayList<org.ovirt.engine.api.model.BaseResource> ret = new java.util.ArrayList<>(); for (java.lang.reflect.Method method : org.ovirt.engine.api.restapi.util.LinkHelper.getRelevantMethods(obj.getClass())) { java.lang.Object inline = null; try { inline = method.invoke(obj); } catch (java.lang.Exception e) { } if (inline != null) { if (inline instanceof org.ovirt.engine.api.model.BaseResource) { ret.add(((org.ovirt.engine.api.model.BaseResource) (inline))); } else if (inline instanceof org.ovirt.engine.api.model.BaseResources) { org.ovirt.engine.api.model.BaseResources entities = ((org.ovirt.engine.api.model.BaseResources) (inline)); java.lang.reflect.Method getter = org.ovirt.engine.api.utils.EntityHelper.getCollectionGetter(entities); try { java.util.List<org.ovirt.engine.api.model.BaseResource> entitiesList = ((java.util.List<org.ovirt.engine.api.model.BaseResource>) (getter.invoke(entities))); for (org.ovirt.engine.api.model.BaseResource entity : entitiesList) { ret.add(entity); } } catch (java.lang.Exception e) { } } else { ret.addAll(org.ovirt.engine.api.restapi.util.LinkHelper.getInlineResources(inline)); } } } return ret; }	@java.lang.SuppressWarnings("unchecked") private static java.util.List<org.ovirt.engine.api.model.BaseResource> getInlineResources(java.lang.Object obj) { java.util.ArrayList<org.ovirt.engine.api.model.BaseResource> ret = new java.util.ArrayList<>(); for (java.lang.reflect.Method method : org.ovirt.engine.api.restapi.util.LinkHelper.getRelevantMethods(obj.getClass())) { java.lang.Object inline = null; try { inline = method.invoke(obj); } catch (java.lang.Exception e) { } if (inline != null) { if (inline instanceof org.ovirt.engine.api.model.BaseResource) { ret.add(((org.ovirt.engine.api.model.BaseResource) (inline))); } else if (inline instanceof org.ovirt.engine.api.model.BaseResources) { org.ovirt.engine.api.model.BaseResources entities = ((org.ovirt.engine.api.model.BaseResources) (inline)); java.lang.reflect.Method getter = org.ovirt.engine.api.utils.EntityHelper.getCollectionGetter(entities); try { java.util.List<org.ovirt.engine.api.model.BaseResource> entitiesList = ((java.util.List<org.ovirt.engine.api.model.BaseResource>) (getter.invoke(entities))); for (org.ovirt.engine.api.model.BaseResource entity : entitiesList) { ret.add(entity); } } catch (java.lang.Exception e) { org.ovirt.engine.api.restapi.util.LinkHelper.log.error("Error invoking method '{}' on class '{}'.", method.getName(), entities.getClass().getSimpleName()); org.ovirt.engine.api.restapi.util.LinkHelper.log.error("Exception", e); } } else { ret.addAll(org.ovirt.engine.api.restapi.util.LinkHelper.getInlineResources(inline)); } } } return ret; }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public <T> T getValue(org.ovirt.engine.core.common.config.ConfigValues name, java.lang.String version) { java.util.Map<java.lang.String, java.lang.Object> values = org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.get(name.toString()); if ((values != null) && (values.containsKey(version))) { return ((T) (values.get(version))); } throw new java.lang.IllegalArgumentException((((name.toString()) + " has no value for version: ") + version)); }	@java.lang.Override public <T> T getValue(org.ovirt.engine.core.common.config.ConfigValues name, java.lang.String version) { java.util.Map<java.lang.String, T> values = getValuesForAllVersions(name); if ((values != null) && (values.containsKey(version))) { return values.get(version); } throw new java.lang.IllegalArgumentException((((name.toString()) + " has no value for version: ") + version)); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = diskDao.getAllFromDisksIncludingSnapshotsByDiskId(org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getUserID(), org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getParameters().isFiltered()); if (((disks.size()) == 1) && ((disks.get(0)) instanceof org.ovirt.engine.core.common.businessentities.storage.LunDisk)) { org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getQueryReturnValue().setReturnValue(disks.get(0)); return; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = new java.util.ArrayList<>(); disks.stream().filter(( disk) -> !(disk instanceof org.ovirt.engine.core.common.businessentities.storage.LunDisk)).map(( disk) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))).forEach(( disk) -> { if (disk.getActive()) { disk.getSnapshots().add(org.ovirt.engine.core.common.businessentities.storage.DiskImage.copyOf(disk)); activeDisk = disk; activeDisk.getSnapshots().addAll(snapshots); } else { if ((activeDisk) != null) { activeDisk.getSnapshots().add(disk); } else { snapshots.add(disk); } } }); org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getQueryReturnValue().setReturnValue(activeDisk); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getQueryReturnValue().setReturnValue(diskDao.get(org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getUserID(), org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getParameters().isFiltered())); }
@java.lang.Override protected void setUpQueryExpectations(java.lang.String query, java.lang.Object failure) throws java.lang.Exception { setUpEntityQueryExpectations(1, failure); }	@java.lang.Override protected void setUpQueryExpectations(java.lang.String query, java.lang.Object failure) throws java.lang.Exception { setUpEntityQueryExpectations(failure); }
@java.lang.Override protected void setUpQueryExpectations(java.lang.String query) throws java.lang.Exception { setUpEntityQueryExpectations(1); }	@java.lang.Override protected void setUpQueryExpectations(java.lang.String query) throws java.lang.Exception { setUpEntityQueryExpectations(null); }
protected void setUpEntityQueryExpectations(int times, java.lang.Object failure) throws java.lang.Exception { while ((times--) > 0) { setUpEntityQueryExpectations(QueryType.GetAllDisks, org.ovirt.engine.core.common.queries.QueryParametersBase.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, getEntityList(), failure); } }	private void setUpEntityQueryExpectations(java.lang.Object failure) throws java.lang.Exception { setUpEntityQueryExpectations(QueryType.GetAllDisksWithSnapshots, org.ovirt.engine.core.common.queries.QueryParametersBase.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, getEntityList(), failure); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> getEntityList() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> entities = new java.util.ArrayList<>(); for (int i = 0; i < (NAMES.length); i++) { entities.add(getEntity(i)); } return entities; }	private java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> getEntityList() { return java.util.stream.IntStream.range(0, NAMES.length).mapToObj(this::getEntity).collect(java.util.stream.Collectors.toList()); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = storageDomainDao.get(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); if (storageDomain.getStorageType().isCinderDomain()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = diskImageDao.getAllForStorageDomain(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getQueryReturnValue().setReturnValue(diskImages); } else { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = diskImageDao.getAllSnapshotsForStorageDomain(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getQueryReturnValue().setReturnValue(imagesHandler.fillSnapshotsToDiskImages(diskImages)); } }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = storageDomainDao.get(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); if (storageDomain.getStorageType().isCinderDomain()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = diskImageDao.getAllForStorageDomain(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getQueryReturnValue().setReturnValue(diskImages); } else { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = diskImageDao.getAllSnapshotsForStorageDomain(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getQueryReturnValue().setReturnValue(new java.util.ArrayList(imagesHandler.aggregateDiskImagesSnapshots(diskImages))); } }
@java.lang.Override public org.ovirt.engine.api.model.Disks list() { return mapCollection(getBackendCollection(QueryType.GetAllDisks, new org.ovirt.engine.core.common.queries.QueryParametersBase())); }	@java.lang.Override public org.ovirt.engine.api.model.Disks list() { return mapCollection(getBackendCollection(QueryType.GetAllDisksWithSnapshots, new org.ovirt.engine.core.common.queries.QueryParametersBase())); }
@java.lang.Override public void onBind() { super.onBind(); registerHandler(((org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractOverlayPresenterWidget.ViewDef) (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractOverlayPresenterWidget.getView())).getCloseButton().addClickHandler(( e) -> org.ovirt.engine.ui.webadmin.section.main.presenter.RevealOverlayContentEvent.fire(this, new org.ovirt.engine.ui.webadmin.section.main.presenter.RevealOverlayContentEvent(null)))); }	@java.lang.Override public void onBind() { super.onBind(); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractOverlayPresenterWidget.getView().getCloseButton().addClickHandler(( e) -> org.ovirt.engine.ui.webadmin.section.main.presenter.RevealOverlayContentEvent.fire(this, new org.ovirt.engine.ui.webadmin.section.main.presenter.RevealOverlayContentEvent(null)))); }
private void activateDataCenter() { org.ovirt.engine.core.common.businessentities.StorageDomain masterDomain = storageDomainDao.getStorageDomains(org.ovirt.engine.core.bll.storage.FenceVdsManualyCommand.getStoragePool().getId(), StorageDomainType.Master).stream().findFirst().orElse(null); org.ovirt.engine.core.bll.storage.FenceVdsManualyCommand.calcStoragePoolStatusByDomainsStatus(); log.info("Master domain id:'{}' Master domain status:'{}'", (masterDomain != null ? masterDomain.getId() : null), (masterDomain != null ? masterDomain.getStatus() : null)); if ((masterDomain != null) && ((((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)) || ((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Unknown))) || ((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Inactive)))) { resetSPM(); } }	private void activateDataCenter() { org.ovirt.engine.core.common.businessentities.StorageDomain masterDomain = storageDomainDao.getStorageDomains(org.ovirt.engine.core.bll.storage.FenceVdsManualyCommand.getStoragePool().getId(), StorageDomainType.Master).stream().findFirst().orElse(null); org.ovirt.engine.core.bll.storage.FenceVdsManualyCommand.calcStoragePoolStatusByDomainsStatus(); if (masterDomain == null) { log.info("no master domain found"); } else { log.info("Master domain id:'{}' has status:'{}'", masterDomain.getId(), masterDomain.getStatus()); if ((((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)) || ((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Unknown))) || ((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Inactive))) { resetSPM(); } } }
public void refresh() { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.clear(); java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list = org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.getVdcOptionDao().getAll(); list = moveDependentToEnd(list); for (org.ovirt.engine.core.common.businessentities.VdcOption option : list) { try { if (((!(org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.containsKey(option.getOptionName()))) || (!(org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.get(option.getOptionName()).containsKey(option.getVersion())))) || (org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.isReloadable(option.getOptionName()))) { updateOption(option); } } catch (java.lang.NoSuchFieldException e) { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.log.error("Not refreshing field '{}': does not exist in class {}.", option.getOptionName(), org.ovirt.engine.core.common.config.ConfigValues.class.getSimpleName()); } } }	public void refresh() { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.clear(); java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list = moveDependentToEnd(org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.getVdcOptionDao().getAll()); for (org.ovirt.engine.core.common.businessentities.VdcOption option : list) { try { if (((!(org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.containsKey(option.getOptionName()))) || (!(org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.get(option.getOptionName()).containsKey(option.getVersion())))) || (org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.isReloadable(option.getOptionName()))) { updateOption(option); } } catch (java.lang.NoSuchFieldException e) { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.log.error("Not refreshing field '{}': does not exist in class {}.", option.getOptionName(), org.ovirt.engine.core.common.config.ConfigValues.class.getSimpleName()); } } }
private java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> moveDependentToEnd(java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list) { java.util.function.Predicate<org.ovirt.engine.core.common.businessentities.VdcOption> isDependent = ( o) -> { org.ovirt.engine.core.dal.dbbroker.generic.EnumValue parsed = parseEnumValue(o.getOptionName()); if (parsed != null) { org.ovirt.engine.core.common.config.OptionBehaviourAttribute behaviour = parsed.getOptionBehaviour(); if (behaviour == null) { return false; } return (behaviour.behaviour()) == (ValueDependent); } return false; }; java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> optionsList = list.stream().filter(isDependent.negate()).collect(java.util.stream.Collectors.toList()); optionsList.addAll(list.stream().filter(isDependent).collect(java.util.stream.Collectors.toList())); return optionsList; }	private java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> moveDependentToEnd(java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list) { java.util.function.Predicate<org.ovirt.engine.core.common.businessentities.VdcOption> isDependent = ( o) -> { org.ovirt.engine.core.dal.dbbroker.generic.EnumValue parsed = parseEnumValue(o.getOptionName()); if (parsed != null) { org.ovirt.engine.core.common.config.OptionBehaviourAttribute behaviour = parsed.getOptionBehaviour(); return (behaviour != null) && ((behaviour.behaviour()) == (ValueDependent)); } return false; }; java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> optionsList = list.stream().filter(isDependent.negate()).collect(java.util.stream.Collectors.toList()); optionsList.addAll(list.stream().filter(isDependent).collect(java.util.stream.Collectors.toList())); return optionsList; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { addCustomValue("SourceIP", (org.apache.commons.lang.StringUtils.isEmpty(sourceIp) ? UNKNOWN : sourceIp)); return org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_VDC_LOGOUT : org.ovirt.engine.core.common.AuditLogType.USER_VDC_LOGOUT_FAILED; }	@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { addCustomValue("SessionID", (org.apache.commons.lang.StringUtils.isEmpty(sessionId) ? org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.UNKNOWN : sessionId)); addCustomValue("SourceIP", (org.apache.commons.lang.StringUtils.isEmpty(sourceIp) ? org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.UNKNOWN : sourceIp)); return org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_VDC_LOGOUT : org.ovirt.engine.core.common.AuditLogType.USER_VDC_LOGOUT_FAILED; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.aaa.AuthenticationProfile profile = sessionDataContainer.getProfile(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId()); if (profile == null) { org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.setSucceeded(false); } else { sourceIp = sessionDataContainer.getSourceIp(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId()); sessionDataContainer.setSessionValid(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId(), false); org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.setSucceeded(true); } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.aaa.AuthenticationProfile profile = sessionDataContainer.getProfile(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId()); sessionId = org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId(); sourceIp = sessionDataContainer.getSourceIp(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId()); if (profile == null) { org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.setSucceeded(false); } else { sessionDataContainer.setSessionValid(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId(), false); org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.setSucceeded(true); } }
public int getTotalNumberOfMacs() { return totalNumberOfMacs; }	public int getNumberOfMacsInRange() { return numberOfMacsInRange; }
public int getTotalNumberOfMacs() { int count = 0; for (org.ovirt.engine.core.bll.network.macpool.Range range : ranges) { count += range.getTotalNumberOfMacs(); } return count; }	public int getTotalNumberOfMacs() { int count = 0; for (org.ovirt.engine.core.bll.network.macpool.Range range : ranges) { count += range.getNumberOfMacsInRange(); } return count; }
private void updateBackup() { if (((getCurrentStorageItem().getRole()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) || ((getCurrentStorageItem().getRole()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport))) { isBackup().setIsAvailable(false); isBackup().setEntity(false); return; } boolean backupSupported = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.BackupSupported, getDataCenter().getSelectedItem().getCompatibilityVersion().toString()))); isBackup().setIsAvailable(backupSupported); if (isBackup().getIsAvailable()) { if (isNewStorage()) { isBackup().setEntity(false); } else { isBackup().setEntity(getStorage().isBackup()); } } }	private void updateBackup() { if (((getCurrentStorageItem().getRole()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) || ((getCurrentStorageItem().getRole()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport))) { getBackup().setIsAvailable(false); getBackup().setEntity(false); return; } boolean backupSupported = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigValues.BackupSupported, getDataCenter().getSelectedItem().getCompatibilityVersion().toString()))); getBackup().setIsAvailable(backupSupported); getBackup().setEntity((isNewStorage() ? false : getStorage().isBackup())); }
private void saveDefaultedStorageProperties(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model, org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic) { storageDomainStatic.setWipeAfterDelete(model.getWipeAfterDelete().getEntity()); storageDomainStatic.setDiscardAfterDelete(model.getDiscardAfterDelete().getEntity()); storageDomainStatic.setWarningLowSpaceIndicator(model.getWarningLowSpaceIndicator().getEntity()); storageDomainStatic.setCriticalSpaceActionBlocker(model.getCriticalSpaceActionBlocker().getEntity()); storageDomainStatic.setBackup(model.isBackup().getEntity()); }	private void saveDefaultedStorageProperties(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model, org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic) { storageDomainStatic.setWipeAfterDelete(model.getWipeAfterDelete().getEntity()); storageDomainStatic.setDiscardAfterDelete(model.getDiscardAfterDelete().getEntity()); storageDomainStatic.setWarningLowSpaceIndicator(model.getWarningLowSpaceIndicator().getEntity()); storageDomainStatic.setCriticalSpaceActionBlocker(model.getCriticalSpaceActionBlocker().getEntity()); storageDomainStatic.setBackup(model.getBackup().getEntity()); }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> isBackup() { return backup; }	public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getBackup() { return backup; }
private void writeMemoryBacking() { if (!(org.ovirt.engine.core.common.utils.HugePageUtils.isBackedByHugepages(vm.getStaticData()))) { return; } writer.writeStartElement("memoryBacking"); writer.writeStartElement("hugepages"); writer.writeStartElement("page"); int hugepageSize = java.lang.Integer.parseInt(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePageSize(vm.getStaticData())); java.util.List<java.lang.Integer> hugepageSizes = hostStatisticsSupplier.get().getHugePages().stream().map(HugePage::getSizeKB).collect(java.util.stream.Collectors.toList()); if (!(hugepageSizes.contains(hugepageSizes))) { switch (vm.getClusterArch().getFamily()) { case x86 : hugepageSize = 2048; break; case ppc : hugepageSize = 16384; break; } } writer.writeAttributeString("size", java.lang.String.valueOf(hugepageSize)); writer.writeEndElement(); writer.writeEndElement(); writer.writeEndElement(); }	private void writeMemoryBacking() { if (!(org.ovirt.engine.core.common.utils.HugePageUtils.isBackedByHugepages(vm.getStaticData()))) { return; } writer.writeStartElement("memoryBacking"); writer.writeStartElement("hugepages"); writer.writeStartElement("page"); int hugepageSize = java.lang.Integer.parseInt(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePageSize(vm.getStaticData())); java.util.List<java.lang.Integer> hugepageSizes = hostStatisticsSupplier.get().getHugePages().stream().map(HugePage::getSizeKB).collect(java.util.stream.Collectors.toList()); if (!(hugepageSizes.contains(hugepageSizes))) { switch (vm.getClusterArch().getFamily()) { case x86 : hugepageSize = org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.DEFAULT_HUGEPAGESIZE_X86_64; break; case ppc : hugepageSize = org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.DEFAULT_HUGEPAGESIZE_PPC64LE; break; } } writer.writeAttributeString("size", java.lang.String.valueOf(hugepageSize)); writer.writeEndElement(); writer.writeEndElement(); writer.writeEndElement(); }
public java.util.concurrent.Future<org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse> call(org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest req, org.ovirt.vdsm.jsonrpc.client.BrokerCommandCallback callback) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { final org.ovirt.vdsm.jsonrpc.client.internal.Call call = new org.ovirt.vdsm.jsonrpc.client.internal.Call(req, executorService, callback); this.tracker.registerCall(req, call); retryCall(req, call); try { this.getClient().sendMessage(jsonToByteArray(req.toJson())); } finally { retryCall(req, call); } return call; }	public java.util.concurrent.Future<org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse> call(org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest req, org.ovirt.vdsm.jsonrpc.client.BrokerCommandCallback callback) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { final org.ovirt.vdsm.jsonrpc.client.internal.Call call = new org.ovirt.vdsm.jsonrpc.client.internal.Call(req, callback); this.tracker.registerCall(req, call); retryCall(req, call); try { this.getClient().sendMessage(jsonToByteArray(req.toJson())); } finally { retryCall(req, call); } return call; }
public void setExecutorService(java.util.concurrent.ExecutorService executorService) { this.executorService = executorService; }	public void setExecutorService(java.util.concurrent.ScheduledExecutorService executorService) { this.executorService = executorService; this.tracker.setExecutorService(executorService); }
public void processResponse(org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse response) { org.codehaus.jackson.JsonNode id = response.getId(); if ((org.codehaus.jackson.node.NullNode.class.isInstance(id)) || (id == null)) { this.tracker.processIssue(response); return; } org.ovirt.vdsm.jsonrpc.client.internal.JsonRpcCall call = this.tracker.removeCall(response.getId()); if (call == null) { this.log.error("Not able to update response for {}", response.getId()); return; } call.addResponse(response); if (((call.getCallback()) != null) && ((call.getExecutor()) != null)) { call.getExecutor().submit(() -> call.getCallback().onResponse(java.util.Collections.emptyMap())); } }	public void processResponse(org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse response) { org.codehaus.jackson.JsonNode id = response.getId(); if ((org.codehaus.jackson.node.NullNode.class.isInstance(id)) || (id == null)) { this.tracker.processIssue(response); return; } org.ovirt.vdsm.jsonrpc.client.internal.JsonRpcCall call = this.tracker.removeCall(response.getId()); if (call == null) { this.log.error("Not able to update response for {}", response.getId()); return; } call.addResponse(response); if (((call.getCallback()) != null) && ((executorService) != null)) { if ((response.getError()) != null) { executorService.schedule(() -> call.getCallback().onFailure(mapValues(response.getError())), 0, java.util.concurrent.TimeUnit.SECONDS); } else { executorService.schedule(() -> call.getCallback().onResponse(new org.ovirt.vdsm.jsonrpc.client.utils.JsonResponseUtil().populate(response)), 0, java.util.concurrent.TimeUnit.SECONDS); } } }
void onFailure(java.lang.Throwable t);	void onFailure(java.util.Map<java.lang.String, java.lang.Object> response);
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("Start initializing {}", getClass().getSimpleName()); pollingRate = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AsyncCommandPollingLoopInSeconds); repeatEndMethodsOnFailMaxRetries = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.RepeatEndMethodsOnFailMaxRetries); initCommandExecutor(); schedulerUtil.scheduleAFixedDelayJob(this, "invokeCallbackMethods", new java.lang.Class[]{ }, new java.lang.Object[]{ }, pollingRate, pollingRate, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("Finished initializing {}", getClass().getSimpleName()); }	@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("Start initializing {}", getClass().getSimpleName()); pollingRate = org.ovirt.engine.core.common.config.Config.<java.lang.Long>getValue(ConfigValues.AsyncCommandPollingLoopInSeconds); repeatEndMethodsOnFailMaxRetries = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.RepeatEndMethodsOnFailMaxRetries); initCommandExecutor(); executor.scheduleWithFixedDelay(this::invokeCallbackMethods, pollingRate, pollingRate, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("Finished initializing {}", getClass().getSimpleName()); }
@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); provider.setId(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID); provider.setUrl(java.lang.String.format("https://%s/", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_IP)); when(providerDao.get(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); when(providerDao.getAllByTypes(ProviderType.EXTERNAL_NETWORK)).thenReturn(java.util.Arrays.asList(provider)); when(providerProxyFactory.create(provider)).thenReturn(networkProviderProxy); when(networkDao.getAllForCluster(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.CLUSTER_ID)).thenReturn(java.util.Arrays.asList(createNetwork())); }	@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); when(providerDao.get(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); when(providerProxyFactory.create(provider)).thenReturn(networkProviderProxy); }
public boolean isGraphicsAndDisplaySupported(int osId, java.util.Collection<org.ovirt.engine.core.common.businessentities.GraphicsType> graphics, org.ovirt.engine.core.common.businessentities.DisplayType displayType, java.util.List<java.lang.String> reasons, org.ovirt.engine.core.compat.Version clusterVersion) { boolean result = vmValidationUtils.isGraphicsAndDisplaySupported(osId, clusterVersion, graphics, displayType); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_VM_DISPLAY_TYPE_IS_NOT_SUPPORTED_BY_OS.name()); } return result; }	public org.ovirt.engine.core.bll.ValidationResult isGraphicsAndDisplaySupported(int osId, java.util.Collection<org.ovirt.engine.core.common.businessentities.GraphicsType> graphics, org.ovirt.engine.core.common.businessentities.DisplayType displayType, org.ovirt.engine.core.compat.Version clusterVersion) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_VM_DISPLAY_TYPE_IS_NOT_SUPPORTED_BY_OS).unless(vmValidationUtils.isGraphicsAndDisplaySupported(osId, clusterVersion, graphics, displayType)); }
public boolean isOsTypeSupportedForVirtioScsi(int osId, org.ovirt.engine.core.compat.Version clusterVersion, java.util.List<java.lang.String> reasons) { boolean result = vmValidationUtils.isDiskInterfaceSupportedByOs(osId, clusterVersion, DiskInterface.VirtIO_SCSI); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI.name()); } return result; }	public org.ovirt.engine.core.bll.ValidationResult isOsTypeSupportedForVirtioScsi(int osId, org.ovirt.engine.core.compat.Version clusterVersion) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI).unless(vmValidationUtils.isDiskInterfaceSupportedByOs(osId, clusterVersion, DiskInterface.VirtIO_SCSI)); }
public java.util.Set<org.ovirt.engine.core.compat.Guid> fetchVmDisks(org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument) { java.util.Set<org.ovirt.engine.core.compat.Guid> disksIds = new java.util.HashSet<>(); XmlNode references = xmlDocument.selectSingleNode("//*/References"); for (XmlNode file : references.selectNodes("File")) { disksIds.add(org.ovirt.engine.core.compat.Guid.createGuidFromString(file.attributes.get("ovf:href").getValue().substring(0, org.ovirt.engine.core.utils.OvfUtils.GUID_LENGTH))); } return disksIds; }	public java.util.Set<org.ovirt.engine.core.compat.Guid> fetchVmDisks(org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument) { java.util.Set<org.ovirt.engine.core.compat.Guid> disksIds = new java.util.HashSet<>(); XmlNode references = xmlDocument.selectSingleNode("//*/References"); for (XmlNode file : references.selectNodes("File")) { disksIds.add(org.ovirt.engine.core.compat.Guid.createGuidFromString(file.attributes.get("ovf:href").getValue().substring(0, org.ovirt.engine.core.utils.OvfUtils.GUID_LENGTH))); } disksIds.addAll(fetchMemoryDisks(xmlDocument)); return disksIds; }
public boolean isOsTypeSupported(int osId, org.ovirt.engine.core.common.businessentities.ArchitectureType architectureType, java.util.List<java.lang.String> reasons) { boolean result = vmValidationUtils.isOsTypeSupported(osId, architectureType); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_IS_NOT_SUPPORTED_BY_ARCHITECTURE_TYPE.toString()); } return result; }	public org.ovirt.engine.core.bll.ValidationResult isOsTypeSupported(int osId, org.ovirt.engine.core.common.businessentities.ArchitectureType architectureType) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_IS_NOT_SUPPORTED_BY_ARCHITECTURE_TYPE).unless(vmValidationUtils.isOsTypeSupported(osId, architectureType)); }
@java.lang.Override public void onLoad() { super.onLoad(); int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getLoadingIndicator()) != null) ? LOADING_HEIGHT : NO_ITEMS_HEIGHT; if (rowCount > 0) { height = rowCount * (ROW_HEIGHT); } updateGridSize(height); }	@java.lang.Override public void onLoad() { super.onLoad(); int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getLoadingIndicator()) != null) ? LOADING_HEIGHT : ROW_HEIGHT; if (rowCount > 0) { height = rowCount * (ROW_HEIGHT); } org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.updateGridSize(height); }
@java.lang.Override public void onLoad() { super.onLoad(); int rowCount = org.ovirt.engine.ui.common.widget.editor.ListModelObjectCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.editor.ListModelObjectCellTable.getLoadingIndicator()) != null) ? LOADING_HEIGHT : NO_ITEMS_HEIGHT; if (rowCount > 0) { height = rowCount * (ROW_HEIGHT); } updateGridSize(height); }	@java.lang.Override public void onLoad() { super.onLoad(); int rowCount = org.ovirt.engine.ui.common.widget.editor.ListModelObjectCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.editor.ListModelObjectCellTable.getLoadingIndicator()) != null) ? LOADING_HEIGHT : ROW_HEIGHT; if (rowCount > 0) { height = rowCount * (ROW_HEIGHT); } org.ovirt.engine.ui.common.widget.editor.ListModelObjectCellTable.updateGridSize(height); }
private void resizeGridToContentHeight(int height) { int top = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getAbsoluteTop(); int maxGridHeight = ((com.google.gwt.user.client.Window.getClientHeight()) - top) - (org.ovirt.engine.ui.common.widget.table.ActionCellTable.GRID_SUBTRACT); int contentHeight = org.ovirt.engine.ui.common.widget.table.ActionCellTable.determineBrowserHeightAdjustment(height); if (org.ovirt.engine.ui.common.widget.table.ActionCellTable.isHorizontalScrollbarVisible()) { contentHeight += scrollbarThickness; } if (contentHeight > maxGridHeight) { contentHeight = maxGridHeight; } if (contentHeight > 0) { super.setHeight((contentHeight + (Unit.PX.getType()))); } org.ovirt.engine.ui.common.widget.table.ActionCellTable.redraw(); }	protected void resizeGridToContentHeight(int height) { int top = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getAbsoluteTop(); int maxGridHeight = ((com.google.gwt.user.client.Window.getClientHeight()) - top) - (org.ovirt.engine.ui.common.widget.table.ActionCellTable.GRID_SUBTRACT); int contentHeight = org.ovirt.engine.ui.common.widget.table.ActionCellTable.determineBrowserHeightAdjustment(height); if (org.ovirt.engine.ui.common.widget.table.ActionCellTable.isHorizontalScrollbarVisible()) { contentHeight += scrollbarThickness; } if (contentHeight > maxGridHeight) { contentHeight = maxGridHeight; } if (contentHeight > 0) { super.setHeight((contentHeight + (Unit.PX.getType()))); } org.ovirt.engine.ui.common.widget.table.ActionCellTable.redraw(); }
public void updateGridSize() { int rowCount = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.table.ActionCellTable.getLoadingIndicator()) != null) ? LOADING_HEIGHT : NO_ITEMS_HEIGHT; if (rowCount > 0) { height = rowCount * (ROW_HEIGHT); } updateGridSize(height); }	public void updateGridSize() { int rowCount = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.table.ActionCellTable.getLoadingIndicator()) != null) ? LOADING_HEIGHT : ROW_HEIGHT; if (rowCount > 0) { height = rowCount * (ROW_HEIGHT); } updateGridSize(height); }
public static boolean isHighPerformanceTypeSupported(org.ovirt.engine.core.compat.Version version) { return java.lang.Boolean.parseBoolean(org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.isHighPerformanceTypeSupported, version.getValue())); }	public static boolean isHighPerformanceTypeSupported(org.ovirt.engine.core.compat.Version version) { return org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.IsHighPerformanceTypeSupported, version); }
@org.junit.Test public void testGetAllClustersByDefaultNetworkProviderId() { assertThat(dao.getAllClustersByDefaultNetworkProviderId(FixturesTool.DEFAULT_NETWORK_PROVIDER_ID).size(), is(3)); }	@org.junit.Test public void testGetAllClustersByDefaultNetworkProviderId() { assertThat(dao.getAllClustersByDefaultNetworkProviderId(FixturesTool.OVN_NETWORK_PROVIDER_ID).size(), is(3)); }
public void setExpires(long expires) { this.expires = expires; }	public void setFileName(java.lang.String fileName) { this.fileName = fileName; }
public long getExpires() { return expires; }	public java.lang.String getFileName() { return fileName; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.ImageTicketInformationReturn getImageTicket(java.lang.String ticketId) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.get_image_ticket").withParameter("uuid", ticketId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("ticketInfo"); return new org.ovirt.engine.core.vdsbroker.vdsbroker.ImageTicketInformationReturn(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.ImageTicketInformationReturn getImageTicket(java.lang.String ticketId) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.get_image_ticket").withParameter("uuid", ticketId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("result"); return new org.ovirt.engine.core.vdsbroker.vdsbroker.ImageTicketInformationReturn(response); }
private boolean isReduceVolumeSupported() { return org.ovirt.engine.core.common.FeatureSupported.isReduceVolumeSupported(org.ovirt.engine.core.bll.ReduceImageCommand.getStoragePool().getCompatibilityVersion()); }	private boolean isReduceVolumeSupported() { setStoragePoolId(org.ovirt.engine.core.bll.ReduceImageCommand.getParameters().getStoragePoolId()); return org.ovirt.engine.core.common.FeatureSupported.isReduceVolumeSupported(org.ovirt.engine.core.bll.ReduceImageCommand.getStoragePool().getCompatibilityVersion()); }
@java.lang.Override public void cleaningCompensationDataAfterSuccess() { macPool.freeMacs(macsToReleaseOnCommit); log.debug(("Command successfully executed, releasing macs: {}" + (macsToReleaseOnCommit))); }	@java.lang.Override public void cleaningCompensationDataAfterSuccess() { log.debug(("Command successfully executed, releasing macs: {}" + (macsToReleaseOnCommit))); macPool.freeMacs(macsToReleaseOnCommit); }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { macPool.freeMacs(macs); log.debug("Non-tx, non-compensation state, immediately releasing macs {}.", macs); }	@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { log.debug("Non-tx, non-compensation state, immediately releasing macs {}.", macs); macPool.freeMacs(macs); }
@org.junit.Test public void testReactionToDuplicatesWhenDuplicatesDuringStartup() throws java.lang.Exception { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges macPoolUsingRanges = createMacPoolDisallowingDuplicates(); macPoolUsingRanges.initialize(true, java.util.Arrays.asList(org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRangesTest.MAC_ADDRESS, org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRangesTest.MAC_ADDRESS)); verify(auditLogDirector).log(any(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl.class), eq(AuditLogType.MAC_ADDRESS_VIOLATES_NO_DUPLICATES_SETTING), anyString()); }	@org.junit.Test public void testReactionToDuplicatesWhenDuplicatesDuringStartup() throws java.lang.Exception { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges macPoolUsingRanges = createMacPoolDisallowingDuplicates(); macPoolUsingRanges.initialize(true, java.util.Arrays.asList(org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRangesTest.MAC_ADDRESS, org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRangesTest.MAC_ADDRESS)); verify(auditLogDirector).log(any(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase.class), eq(AuditLogType.MAC_ADDRESS_VIOLATES_NO_DUPLICATES_SETTING), anyString()); }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Snapshot s1, org.ovirt.engine.core.common.businessentities.Snapshot s2) { if (((s1.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE)) || ((s1.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.PREVIEW))) { return -1; } if (((s2.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE)) || ((s2.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.PREVIEW))) { return 1; } return s2.getCreationDate().compareTo(s1.getCreationDate()); }	@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Snapshot s1, org.ovirt.engine.core.common.businessentities.Snapshot s2) { int typeCompare = java.lang.Boolean.compare((((s1.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE)) || ((s1.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.PREVIEW))), (((s2.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE)) || ((s2.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.PREVIEW)))); if (typeCompare != 0) { return (-1) * typeCompare; } return s2.getCreationDate().compareTo(s1.getCreationDate()); }
@java.lang.Override public void setItems(java.util.Collection value) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots = (value != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.Snapshot>cast(value) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot>(); java.util.Collections.sort(snapshots, comparator); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot> sortedSnapshots = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = snapshotsMap.get(snapshot.getId()); if (snapshotModel == null) { snapshotModel = new org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel(); snapshotsMap.put(snapshot.getId(), snapshotModel); } snapshotModel.setEntity(snapshot); if (((snapshot.getType()) != (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE)) || ((getInType(SnapshotType.PREVIEW, snapshots)) == null)) { sortedSnapshots.add(snapshot); } } if ((getInPreview(sortedSnapshots)) != null) { updatePreviewedDiskSnapshots(sortedSnapshots); } else { updateItems(sortedSnapshots); } }	@java.lang.Override public void setItems(java.util.Collection value) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots = (value != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.Snapshot>cast(value) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot>(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot> sortedSnapshots = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = snapshotsMap.get(snapshot.getId()); if (snapshotModel == null) { snapshotModel = new org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel(); snapshotsMap.put(snapshot.getId(), snapshotModel); } snapshotModel.setEntity(snapshot); if (((snapshot.getType()) != (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE)) || ((getInType(SnapshotType.PREVIEW, snapshots)) == null)) { sortedSnapshots.add(snapshot); } } java.util.Collections.sort(sortedSnapshots, comparator); if ((getInPreview(sortedSnapshots)) != null) { updatePreviewedDiskSnapshots(sortedSnapshots); } else { updateItems(sortedSnapshots); } }
public static org.ovirt.engine.api.model.VmType mapVmType(org.ovirt.engine.api.model.VmType type) { if (type == null) { return null; } switch (type) { case DESKTOP : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.VmType; case SERVER : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.VmType; default : throw new java.lang.IllegalArgumentException((("Unknown virtual machine type \"" + type) + "\"")); } }	public static org.ovirt.engine.api.model.VmType mapVmType(org.ovirt.engine.api.model.VmType type) { if (type == null) { return null; } switch (type) { case DESKTOP : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.VmType; case SERVER : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.VmType; case HIGH_PERFORMANCE : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.VmType; default : throw new java.lang.IllegalArgumentException((("Unknown virtual machine type \"" + type) + "\"")); } }
public static org.ovirt.engine.api.model.VmType mapVmType(org.ovirt.engine.core.common.businessentities.VmType type) { if (type == null) { return null; } switch (type) { case Desktop : return org.ovirt.engine.api.model.VmType.DESKTOP; case Server : return org.ovirt.engine.api.model.VmType.SERVER; default : throw new java.lang.IllegalArgumentException((("Unknown virtual machine type \"" + type) + "\"")); } }	public static org.ovirt.engine.api.model.VmType mapVmType(org.ovirt.engine.core.common.businessentities.VmType type) { if (type == null) { return null; } switch (type) { case Desktop : return org.ovirt.engine.api.model.VmType.DESKTOP; case Server : return org.ovirt.engine.api.model.VmType.SERVER; case HighPerformance : return org.ovirt.engine.api.model.VmType.HIGH_PERFORMANCE; default : throw new java.lang.IllegalArgumentException((("Unknown virtual machine type \"" + type) + "\"")); } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.VmType.class, to = org.ovirt.engine.api.model.VmType.class) public static org.ovirt.engine.api.model.VmType map(org.ovirt.engine.core.common.businessentities.VmType type, org.ovirt.engine.api.model.VmType incoming) { switch (type) { case Desktop : return org.ovirt.engine.api.model.VmType.DESKTOP; case Server : return org.ovirt.engine.api.model.VmType.SERVER; case HighPerformance : return org.ovirt.engine.api.model.VmType.HIGH_PERFORMANCE; default : return null; } }	public static org.ovirt.engine.api.model.VmType mapVmType(org.ovirt.engine.api.model.VmType type) { if (type == null) { return null; } switch (type) { case DESKTOP : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.VmType; case SERVER : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.VmType; case HIGH_PERFORMANCE : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.VmType; default : throw new java.lang.IllegalArgumentException((("Unknown virtual machine type \"" + type) + "\"")); } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.VmType.class, to = org.ovirt.engine.api.model.VmType.class) public static org.ovirt.engine.api.model.VmType map(org.ovirt.engine.api.model.VmType type, org.ovirt.engine.core.common.businessentities.VmType incoming) { switch (type) { case DESKTOP : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.VmType; case SERVER : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.VmType; case HIGH_PERFORMANCE : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.VmType; default : return null; } }	public static org.ovirt.engine.api.model.VmType mapVmType(org.ovirt.engine.core.common.businessentities.VmType type) { if (type == null) { return null; } switch (type) { case Desktop : return org.ovirt.engine.api.model.VmType.DESKTOP; case Server : return org.ovirt.engine.api.model.VmType.SERVER; case HighPerformance : return org.ovirt.engine.api.model.VmType.HIGH_PERFORMANCE; default : throw new java.lang.IllegalArgumentException((("Unknown virtual machine type \"" + type) + "\"")); } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getVmtGuid())) { return failValidation(EngineMessage.VM_POOL_CANNOT_CREATE_FROM_BLANK_TEMPLATE); } if (((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getVmType()) == (org.ovirt.engine.core.common.businessentities.VmType.HighPerformance)) && (!(org.ovirt.engine.core.common.FeatureSupported.isHighPerformanceTypeSupported(org.ovirt.engine.core.bll.AddVmPoolCommand.getEffectiveCompatibilityVersion())))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_HIGH_PERFORMANCE_IS_NOT_SUPPORTED, java.lang.String.format("$Version %s", org.ovirt.engine.core.bll.AddVmPoolCommand.getEffectiveCompatibilityVersion())); } if (((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmLargeIcon()) != null) && (!(validate(org.ovirt.engine.core.bll.validator.IconValidator.validate(IconValidator.DimensionsType.LARGE_CUSTOM_ICON, org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmLargeIcon()))))) { return false; } if ((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getNumOfIoThreads()) > 1) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_NUM_OF_IO_THREADS_CANNOT_EXCEED_ONE_VALUE); } return true; }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getVmtGuid())) { return failValidation(EngineMessage.VM_POOL_CANNOT_CREATE_FROM_BLANK_TEMPLATE); } if (((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getVmType()) == (org.ovirt.engine.core.common.businessentities.VmType.HighPerformance)) && (!(org.ovirt.engine.core.common.FeatureSupported.isHighPerformanceTypeSupported(org.ovirt.engine.core.bll.AddVmPoolCommand.getEffectiveCompatibilityVersion())))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_HIGH_PERFORMANCE_IS_NOT_SUPPORTED, java.lang.String.format("$Version %s", org.ovirt.engine.core.bll.AddVmPoolCommand.getEffectiveCompatibilityVersion())); } if (((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmLargeIcon()) != null) && (!(validate(org.ovirt.engine.core.bll.validator.IconValidator.validate(IconValidator.DimensionsType.LARGE_CUSTOM_ICON, org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmLargeIcon()))))) { return false; } return true; }
@java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVds().isPmEnabled()) { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents = fenceAgentDao.getFenceAgentsForHost(org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVdsId()); if ((fenceAgents.size()) == 1) { return failValidation(EngineMessage.VDS_REMOVE_LAST_FENCE_AGENT_PM_ENABLED); } } if ((((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getId()) == null)) { return failValidation(EngineMessage.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } return super.validate(); }	@java.lang.Override protected boolean validate() { if ((((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getId()) == null)) { return failValidation(EngineMessage.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVds(); if ((host != null) && (host.isPmEnabled())) { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents = fenceAgentDao.getFenceAgentsForHost(org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVdsId()); if ((fenceAgents.size()) == 1) { return failValidation(EngineMessage.VDS_REMOVE_LAST_FENCE_AGENT_PM_ENABLED); } } return super.validate(); }
@java.lang.Override protected void executeCommand() { createSnapshots(); }	@java.lang.Override protected void executeCommand() { imagesHandler.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation(getImageGroupIds(), ImageStatus.LOCKED, ImageStatus.OK, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getCompensationContext()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValueurnValue = runInternalAction(ActionType.CreateAllSnapshotsFromVm, getCreateSnapshotParameters(), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getContext())); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().setAutoGeneratedSnapshotId(actionReturnValueurnValue.getActionReturnValue()); persistCommand(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getParentCommand(), ((getCallback()) != null)); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.setSucceeded(true); }
protected org.ovirt.engine.core.utils.lock.EngineLock lockVmWithWait() { org.ovirt.engine.core.utils.lock.EngineLock liveStorageMigrationEngineLock = new org.ovirt.engine.core.utils.lock.EngineLock(); liveStorageMigrationEngineLock.setExclusiveLocks(java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.LIVE_STORAGE_MIGRATION, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED))); lockManager.acquireLockWait(liveStorageMigrationEngineLock); return liveStorageMigrationEngineLock; }	@java.lang.Override protected boolean validate() { boolean validate = super.validate(); if (!validate) { auditLogDirector.log(this, AuditLogType.USER_MOVED_DISK_FINISHED_FAILURE); } setStoragePoolId(getVm().getStoragePoolId()); if (!(validateDestDomainsSpaceRequirements())) { return false; } org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getReturnValue().setValid(((isDiskNotShareable(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageId())))); if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getReturnValue().isValid())) { return false; } if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.setAndValidateDiskProfiles())) { return false; } return (validateCreateAllSnapshotsFromVmCommand()) && validate; }
@java.lang.Override public javax.ws.rs.core.Response move(org.ovirt.engine.api.model.Action action) { validateParameters(action, "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid storageDomainId = getStorageDomainId(action); org.ovirt.engine.api.model.Disk disk = get(); org.ovirt.engine.core.compat.Guid imageId = getDiskImageId(disk.getImageId()); org.ovirt.engine.core.compat.Guid sourceStorageDomainId = getSourceStorageDomainId(disk); org.ovirt.engine.core.common.action.MoveDiskParameters params = new org.ovirt.engine.core.common.action.MoveDiskParameters(imageId, sourceStorageDomainId, storageDomainId); params.setImageGroupID(asGuid(disk.getId())); return doAction(ActionType.MoveDisks, params, action); }	@java.lang.Override public javax.ws.rs.core.Response move(org.ovirt.engine.api.model.Action action) { validateParameters(action, "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid storageDomainId = getStorageDomainId(action); org.ovirt.engine.api.model.Disk disk = get(); org.ovirt.engine.core.compat.Guid imageId = getDiskImageId(disk.getImageId()); org.ovirt.engine.core.compat.Guid sourceStorageDomainId = getSourceStorageDomainId(disk); org.ovirt.engine.core.common.action.MoveDiskParameters params = new org.ovirt.engine.core.common.action.MoveDiskParameters(imageId, sourceStorageDomainId, storageDomainId); params.setImageGroupID(asGuid(disk.getId())); return doAction(ActionType.MoveDisk, params, action); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionList = new java.util.ArrayList<>(); permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_DISK_STORAGE)); return permissionList; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionList = new java.util.ArrayList<>(); permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_DISK_STORAGE)); return permissionList; }
@org.junit.Test public void testMoveById() throws java.lang.Exception { setUpEntityQueryExpectations(QueryType.GetDiskByDiskId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest.DISK_ID }, getEntity(1)); setUriInfo(setUpActionExpectations(ActionType.MoveDisks, org.ovirt.engine.core.common.action.MoveDiskParameters.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, true, true, null, null, true)); verifyActionResponse(resource.move(setUpParams(false)), ("disks/" + (org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest.DISK_ID)), false); }	@org.junit.Test public void testMoveById() throws java.lang.Exception { setUpEntityQueryExpectations(QueryType.GetDiskAndSnapshotsByDiskId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest.DISK_ID }, getEntity(1)); setUriInfo(setUpActionExpectations(ActionType.MoveDisk, org.ovirt.engine.core.common.action.MoveDiskParameters.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, true, true, null, null, true)); verifyActionResponse(resource.move(setUpParams(false)), ("disks/" + (org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest.DISK_ID)), false); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = diskImageDao.get(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getImageId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements = diskVmElementDao.getAllDiskVmElementsByDiskId(diskImage.getImage().getDiskId()); org.ovirt.engine.core.common.action.ActionType actionType = getMoveActionType(diskVmElements); if (actionType == (org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk)) { org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters = org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters(); moveDiskParameters.setCommandId(null); actionReturnValues.add(org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(actionType, moveDiskParameters, org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.cloneContextAndDetachFromParent())); } else { org.ovirt.engine.core.compat.Guid vmId = diskVmElements.get(0).getVmId(); engineLock = lockVmWithWait(vmId); actionReturnValues.add(org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(actionType, createLiveMigrateDiskParameters(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters(), vmId), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getContext(), engineLock))); } handleChildReturnValue(); org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements = diskVmElementDao.getAllDiskVmElementsByDiskId(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters().getImageGroupID()); org.ovirt.engine.core.common.action.ActionType actionType = getMoveActionType(diskVmElements); if (actionType == (org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk)) { org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters = org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters(); moveDiskParameters.setCommandId(null); actionReturnValues.add(runInternalAction(actionType, moveDiskParameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getContext(), org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getLock()))); } else { org.ovirt.engine.core.compat.Guid vmId = diskVmElements.get(0).getVmId(); engineLock = lockVmWithWait(vmId); actionReturnValues.add(runInternalAction(actionType, createLiveMigrateDiskParameters(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters(), vmId), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getContext(), engineLock))); } handleChildReturnValue(); org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.setSucceeded(true); }
protected org.ovirt.engine.core.common.action.ActionType getMoveActionType(java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElement) { if (diskVmElement.isEmpty()) { return org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk; } org.ovirt.engine.core.common.businessentities.VM vm = vmDao.get(diskVmElement.get(0).getVmId()); if ((vm.isDown()) || (!(diskVmElement.get(0).isPlugged()))) { return org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk; } return org.ovirt.engine.core.common.action.ActionType.LiveMigrateDisk; }	protected org.ovirt.engine.core.common.action.ActionType getMoveActionType(java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements) { if (diskVmElements.isEmpty()) { return org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk; } org.ovirt.engine.core.common.businessentities.storage.DiskVmElement diskVmElement = diskVmElements.get(0); org.ovirt.engine.core.common.businessentities.VM vm = vmDao.get(diskVmElement.getVmId()); if ((vm.isDown()) || (!(diskVmElement.isPlugged()))) { return org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk; } return org.ovirt.engine.core.common.action.ActionType.LiveMigrateDisk; }
private org.ovirt.engine.core.common.action.LiveMigrateDiskParameters createLiveMigrateDiskParameters(org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters, org.ovirt.engine.core.compat.Guid vmId) { return new org.ovirt.engine.core.common.action.LiveMigrateDiskParameters(moveDiskParameters.getImageId(), moveDiskParameters.getSourceDomainId(), moveDiskParameters.getStorageDomainId(), vmId, moveDiskParameters.getQuotaId(), moveDiskParameters.getDiskProfileId(), org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getImageGroupID()); }	private org.ovirt.engine.core.common.action.LiveMigrateDiskParameters createLiveMigrateDiskParameters(org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters, org.ovirt.engine.core.compat.Guid vmId) { return new org.ovirt.engine.core.common.action.LiveMigrateDiskParameters(moveDiskParameters.getImageId(), moveDiskParameters.getSourceDomainId(), moveDiskParameters.getStorageDomainId(), vmId, moveDiskParameters.getQuotaId(), moveDiskParameters.getDiskProfileId(), org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters().getImageGroupID()); }
@java.lang.Override public java.lang.String toString() { java.util.StringJoiner info = new java.util.StringJoiner(", ", java.lang.String.format("Thread pool: %s has ", poolName), ""); threadStateMap.entrySet().stream().forEach(( entry) -> info.add(java.lang.String.format("%s threads in state %s", entry.getValue(), entry.getKey().name()))); return info.toString(); }	@java.lang.Override public java.lang.String toString() { int usedThreads = ((threadStateMap.getOrDefault(java.lang.Thread.State.NEW, org.ovirt.engine.core.bll.utils.ThreadPoolInfo.ZERO).get()) + (threadStateMap.getOrDefault(java.lang.Thread.State.RUNNABLE, org.ovirt.engine.core.bll.utils.ThreadPoolInfo.ZERO).get())) + (threadStateMap.getOrDefault(java.lang.Thread.State.BLOCKED, org.ovirt.engine.core.bll.utils.ThreadPoolInfo.ZERO).get()); int waitingThreads = (threadStateMap.getOrDefault(java.lang.Thread.State.TIMED_WAITING, org.ovirt.engine.core.bll.utils.ThreadPoolInfo.ZERO).get()) + (threadStateMap.getOrDefault(java.lang.Thread.State.WAITING, org.ovirt.engine.core.bll.utils.ThreadPoolInfo.ZERO).get()); return java.lang.String.format(org.ovirt.engine.core.bll.utils.ThreadPoolInfo.msg, poolName, usedThreads, maxThreads, waitingThreads); }
private void processThread(java.lang.management.ThreadInfo[] threadInfo) { java.util.Arrays.asList(threadInfo).stream().forEach(( tInfo) -> processThread(tInfo)); }	private void processThread(java.lang.management.ThreadInfo[] threadInfo) { java.util.Arrays.asList(threadInfo).stream().filter(( tInfo) -> tInfo.getThreadName().startsWith("EE")).filter(( tInfo) -> (tInfo.getThreadName().split("-").length) > 2).forEach(( tInfo) -> processThread(tInfo)); }
private void processThread(java.lang.management.ThreadInfo threadInfo) { if (threadInfo.getThreadName().startsWith("EE")) { java.lang.String[] threadName = threadInfo.getThreadName().split("-"); if ((threadName.length) > 2) { threadPoolInfoMap.putIfAbsent(threadName[2], new org.ovirt.engine.core.bll.utils.ThreadPoolInfo(threadName[2])); threadPoolInfoMap.get(threadName[2]).processThreadInfo(threadInfo); } } }	private void processThread(java.lang.management.ThreadInfo threadInfo) { java.lang.String[] threadName = threadInfo.getThreadName().split("-"); threadPoolInfoMap.putIfAbsent(threadName[2], new org.ovirt.engine.core.bll.utils.ThreadPoolInfo(threadName[2])); threadPoolInfoMap.get(threadName[2]).processThreadInfo(threadInfo); }
@javax.annotation.PostConstruct public void init() { try { threadMXBean = java.lang.management.ManagementFactory.getThreadMXBean(); } catch (java.lang.Exception e) { throw new java.lang.IllegalStateException(("Problem getting ThreadMXBean:" + e)); } org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Initializing Thread Monitoring Service"); executor.scheduleWithFixedDelay(this::monitorEngineThreadPools, 0, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ThreadPoolMonitoringIntervalInMinutes), java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Thread Monitoring Service initialized"); }	@javax.annotation.PostConstruct public void init() { try { threadMXBean = java.lang.management.ManagementFactory.getThreadMXBean(); } catch (java.lang.Exception e) { throw new java.lang.IllegalStateException(("Problem getting ThreadMXBean:" + e)); } org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Initializing Thread Monitoring Service"); int threadPoolMonitoringIntervalInSeconds = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("THREAD_POOL_MONITORING_INTERVAL_IN_SECONDS"); if (threadPoolMonitoringIntervalInSeconds <= 0) { org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Thread Monitoring Service is disabled."); } else { executor.scheduleWithFixedDelay(this::monitorEngineThreadPools, 0, threadPoolMonitoringIntervalInSeconds, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Thread Monitoring Service initialized"); } }
private void monitorEngineThreadPools() { try { threadPoolInfoMap.clear(); java.util.Arrays.asList(threadMXBean.getAllThreadIds()).stream().forEach(( threadId) -> processThread(threadMXBean.getThreadInfo(threadId))); java.util.StringJoiner info = new java.util.StringJoiner("\n", "ThreadPools Info\n", ""); threadPoolInfoMap.entrySet().stream().forEach(( entry) -> info.add(entry.getValue().toString())); org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info(info.toString()); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Exception", ex); } }	private void monitorEngineThreadPools() { try { threadPoolInfoMap.clear(); java.util.Arrays.asList(threadMXBean.getAllThreadIds()).stream().forEach(( threadId) -> processThread(threadMXBean.getThreadInfo(threadId))); threadPoolInfoMap.entrySet().stream().forEach(( entry) -> org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info(entry.getValue().toString())); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Error fetching thread pools data: {}", ex.getMessage()); org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.debug("Exception", ex); } }
@java.lang.Override protected void writeHeader() { super.writeHeader(); _writer.setPrefix("ovirt", "http://www.ovirt.org/ovf"); _writer.writeNamespace("ovirt", "http://www.ovirt.org/ovf"); }	@java.lang.Override protected void writeHeader() { super.writeHeader(); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.OVIRT_PREFIX, org.ovirt.engine.core.utils.ovf.OVIRT_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.OVIRT_PREFIX, org.ovirt.engine.core.utils.ovf.OVIRT_URI); }
@java.lang.Override public org.ovirt.engine.api.model.SystemOption get() { try { org.ovirt.engine.core.common.config.ConfigValues config = org.ovirt.engine.core.common.config.ConfigValues.valueOf(id); org.ovirt.engine.core.common.queries.GetSystemOptionParameters parameters = new org.ovirt.engine.core.common.queries.GetSystemOptionParameters(config); java.lang.String version = org.ovirt.engine.api.restapi.util.ParametersHelper.getParameter(httpHeaders, uriInfo, "version"); if ((version != null) && (!(version.isEmpty()))) { parameters.setOptionVersion(version); } org.ovirt.engine.core.common.queries.QueryReturnValue result = runQuery(QueryType.GetSystemOption, parameters); if ((result.getReturnValue()) == null) { return handleError(new org.ovirt.engine.api.restapi.resource.EntityNotFoundException(id), true); } return org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(org.ovirt.engine.api.restapi.types.SystemOptionsMapper.map(result.getReturnValue(), id)); } catch (java.lang.IllegalArgumentException ex) { return handleError(new org.ovirt.engine.api.restapi.resource.EntityNotFoundException(id), true); } }	@java.lang.Override public org.ovirt.engine.api.model.SystemOption get() { org.ovirt.engine.core.common.config.ConfigValues config; try { config = org.ovirt.engine.core.common.config.ConfigValues.valueOf(id); } catch (java.lang.IllegalArgumentException ex) { throw new javax.ws.rs.WebApplicationException(Response.Status.NOT_FOUND); } org.ovirt.engine.core.common.queries.GetSystemOptionParameters parameters = new org.ovirt.engine.core.common.queries.GetSystemOptionParameters(config); java.lang.String version = org.ovirt.engine.api.restapi.util.ParametersHelper.getParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendSystemOptionResource.VERSION); if ((version != null) && (!(version.isEmpty()))) { parameters.setOptionVersion(version); } org.ovirt.engine.core.common.queries.QueryReturnValue result = runQuery(QueryType.GetSystemOption, parameters); if ((result.getReturnValue()) == null) { throw new javax.ws.rs.WebApplicationException(Response.Status.NOT_FOUND); } return org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(org.ovirt.engine.api.restapi.types.SystemOptionsMapper.map(result.getReturnValue(), id)); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsHostTooSmall() { vds.setMemFree(8835L); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, false); }	@org.junit.Test public void validateVmMemoryCantStartOnVdsHostTooSmall() { vds.setMemFree(8835L); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertFalse(vmPassedMemoryRequirement); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsHostTooSmallButLowOverhead() { vds.setMemFree(8835L); doReturn(0).when(vmOverheadCalculator).getEnsuredOverhead(any()); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, true); }	@org.junit.Test public void validateVmMemoryCanStartOnVdsHostTooSmallButLowOverhead() { vds.setMemFree(8835L); doReturn(0).when(vmOverheadCalculator).getStaticOverheadInMb(any()); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertTrue(vmPassedMemoryRequirement); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsHighPendingButSwapHelps() { vds.setSwapFree(80L); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, true); }	@org.junit.Test public void validateVmMemoryCanStartOnVdsHighPendingButSwapHelps() { vds.setSwapFree(80L); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 65); assertTrue(vmPassedMemoryRequirement); }
@org.junit.Before public void prepareTest() { vds = basicHost(); vm = basicVm(); doReturn(65).when(vmOverheadCalculator).getEnsuredOverhead(any()); doReturn(0).when(vmOverheadCalculator).getPossibleOverhead(any()); when(vmOverheadCalculator.getTotalRequiredMemoryInMb(vm)).thenCallRealMethod(); when(vmOverheadCalculator.getOverheadMb(vm)).thenCallRealMethod(); }	@org.junit.Before public void prepareTest() { vds = basicHost(); vm = basicVm(); doReturn(65).when(vmOverheadCalculator).getStaticOverheadInMb(any()); doReturn(0).when(vmOverheadCalculator).getPossibleOverheadInMb(any()); when(vmOverheadCalculator.getTotalRequiredMemoryInMb(vm)).thenCallRealMethod(); when(vmOverheadCalculator.getOverheadInMb(vm)).thenCallRealMethod(); }
@org.junit.Test public void validateVmMemoryCantRunOnVdsSmallHost() { vds.setPhysicalMemMb(5000); boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, false); }	@org.junit.Test public void validateVmMemoryCantRunOnVdsSmallHost() { vds.setPhysicalMemMb(5000); boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertFalse(vmPassedMemoryRequirement); }
@org.junit.Test public void validateVmMemoryCanStartOnVds() { boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, true); }	@org.junit.Test public void validateVmMemoryCanStartOnVds() { boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertTrue(vmPassedMemoryRequirement); }
@org.junit.Test public void validateVmMemoryCanRunOnVdsHighMem() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); vds.setPhysicalMemMb(15000); boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, true); }	@org.junit.Test public void validateVmMemoryCanRunOnVdsHighMem() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); vds.setPhysicalMemMb(15000); boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertTrue(vmPassedMemoryRequirement); }
@org.junit.Test public void testBalanceCpuLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_hosts_cpu_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "900"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "512"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assertNotNull(result); assertNotNull(result.getSecond()); assertEquals(result.getFirst().size(), 1); assertEquals(result.getFirst().get(0), org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnitTest.DESTINATION_HOST); }	@org.junit.Test public void testBalanceCpuLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_hosts_cpu_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "900"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "512"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assertNotNull(result); assertTrue(result.isPresent()); assertTrue(result.get().isValid()); assertNotNull(result.get().getVmToMigrate()); assertEquals(2, result.get().getCandidateHosts().size()); assertEquals(org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnitTest.DESTINATION_HOST, result.get().getCandidateHosts().get(0)); }
@org.junit.Test public void validateVmMemoryCanRunOnVdsHighMemLowOverhead() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); doReturn((-1200)).when(vmOverheadCalculator).getEnsuredOverhead(any()); boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, true); }	@org.junit.Test public void validateVmMemoryCanRunOnVdsHighMemLowOverhead() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); doReturn((-1200)).when(vmOverheadCalculator).getStaticOverheadInMb(any()); boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertTrue(vmPassedMemoryRequirement); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsVmTooBigButLowOverhead() { vm.setMinAllocatedMem(8865); vm.setVmMemSizeMb(8865); doReturn(0).when(vmOverheadCalculator).getEnsuredOverhead(any()); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, true); }	@org.junit.Test public void validateVmMemoryCanStartOnVdsVmTooBigButLowOverhead() { vm.setMinAllocatedMem(8865); vm.setVmMemSizeMb(8865); doReturn(0).when(vmOverheadCalculator).getStaticOverheadInMb(any()); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertTrue(vmPassedMemoryRequirement); }
public boolean hasPhysMemoryToRunVM(org.ovirt.engine.core.common.businessentities.VDS curVds, org.ovirt.engine.core.common.businessentities.VM vm, int pendingMemory) { if ((curVds.getMemFree()) != null) { double vmMemRequired = (vm.getVmMemSizeMb()) + (vmOverheadCalculator.getEnsuredOverhead(vm)); double vdsMemLimit = (curVds.getMemFree()) - pendingMemory; org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("hasPhysMemoryToRunVM: host '{}'; free memory is : {} MB (+ {} MB pending); free swap is: {} MB, required memory is {} MB; Guest overhead {} MB", curVds.getName(), vdsMemLimit, pendingMemory, curVds.getSwapFree(), vmMemRequired, vmOverheadCalculator.getEnsuredOverhead(vm)); if ((curVds.getSwapFree()) != null) { vdsMemLimit += curVds.getSwapFree(); } org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("{} <= ??? {}", vmMemRequired, vdsMemLimit); return vmMemRequired <= vdsMemLimit; } else { return false; } }	public boolean hasPhysMemoryToRunVM(org.ovirt.engine.core.common.businessentities.VDS curVds, org.ovirt.engine.core.common.businessentities.VM vm, int pendingMemory) { if ((curVds.getMemFree()) != null) { double vmMemRequired = (org.ovirt.engine.core.common.utils.HugePageUtils.getRequiredMemoryWithoutHugePages(vm.getStaticData())) + (vmOverheadCalculator.getStaticOverheadInMb(vm)); if (org.ovirt.engine.core.common.utils.HugePageUtils.isBackedByHugepages(vm.getStaticData())) { org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("VM uses HugePages - ignore its memory size"); } double vdsMemLimit = (curVds.getMemFree()) - pendingMemory; org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("hasPhysMemoryToRunVM: host '{}'; free memory is : {} MB (+ {} MB pending); free swap is: {} MB, required memory is {} MB; Guest overhead {} MB", curVds.getName(), vdsMemLimit, pendingMemory, curVds.getSwapFree(), vmMemRequired, vmOverheadCalculator.getStaticOverheadInMb(vm)); if ((curVds.getSwapFree()) != null) { vdsMemLimit += curVds.getSwapFree(); } org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("{} <= ??? {}", vmMemRequired, vdsMemLimit); return vmMemRequired <= vdsMemLimit; } else { return false; } }
public boolean hasOvercommitMemoryToRunVM(org.ovirt.engine.core.common.businessentities.VDS curVds, org.ovirt.engine.core.common.businessentities.VM vm) { double vmMemRequired = vmOverheadCalculator.getTotalRequiredMemoryInMb(vm); double vdsMemLimit = curVds.getMaxSchedulingMemory(); org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("hasOvercommitMemoryToRunVM: host '{}'; max scheduling memory : {} MB; required memory is {} MB; Guest overhead {} MB", curVds.getName(), vdsMemLimit, vmMemRequired, vmOverheadCalculator.getOverheadMb(vm)); org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("{} <= ??? {}", vmMemRequired, vdsMemLimit); return vmMemRequired <= vdsMemLimit; }	public boolean hasOvercommitMemoryToRunVM(org.ovirt.engine.core.common.businessentities.VDS curVds, org.ovirt.engine.core.common.businessentities.VM vm) { double vmMemRequired = vmOverheadCalculator.getTotalRequiredMemoryInMb(vm); if (org.ovirt.engine.core.common.utils.HugePageUtils.isBackedByHugepages(vm.getStaticData())) { org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("VM uses HugePages - ignore its memory size"); } double vdsMemLimit = curVds.getMaxSchedulingMemory(); org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("hasOvercommitMemoryToRunVM: host '{}'; max scheduling memory : {} MB; required memory is {} MB; Guest overhead {} MB", curVds.getName(), vdsMemLimit, vmMemRequired, vmOverheadCalculator.getOverheadInMb(vm)); org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("{} <= ??? {}", vmMemRequired, vdsMemLimit); return vmMemRequired <= vdsMemLimit; }
@org.junit.Test public void validateVmMemoryCantStartOnVdsBecauseOfPending() { boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, false); }	@org.junit.Test public void validateVmMemoryCantStartOnVdsBecauseOfPending() { boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 65); assertFalse(vmPassedMemoryRequirement); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsBecauseOfGuestOverhead() { doReturn(256).when(vmOverheadCalculator).getEnsuredOverhead(any()); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, false); }	@org.junit.Test public void validateVmMemoryCantStartOnVdsBecauseOfGuestOverhead() { doReturn(256).when(vmOverheadCalculator).getStaticOverheadInMb(any()); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertFalse(vmPassedMemoryRequirement); }
@org.junit.Test public void testBalanceCpuAndMemoryLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_hosts_cpumem_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "900"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "512"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assert result == null; }	@org.junit.Test public void testBalanceCpuAndMemoryLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_hosts_cpumem_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "900"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "512"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assert !(result.isPresent()); }
@org.junit.Test public void validateVmMemoryCantRunOnVdsHighOverhead() { doReturn(1024).when(vmOverheadCalculator).getEnsuredOverhead(any()); boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, false); }	@org.junit.Test public void validateVmMemoryCantRunOnVdsHighOverhead() { doReturn(1024).when(vmOverheadCalculator).getStaticOverheadInMb(any()); boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertFalse(vmPassedMemoryRequirement); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsBecauseOfLowGuestOverhead() { doReturn(0).when(vmOverheadCalculator).getEnsuredOverhead(any()); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, true); }	@org.junit.Test public void validateVmMemoryCanStartOnVdsBecauseOfLowGuestOverhead() { doReturn(0).when(vmOverheadCalculator).getStaticOverheadInMb(any()); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 65); assertTrue(vmPassedMemoryRequirement); }
@org.junit.Test public void validateVmMemoryCantRunOnVdsNotEnoughMem() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, false); }	@org.junit.Test public void validateVmMemoryCantRunOnVdsNotEnoughMem() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertFalse(vmPassedMemoryRequirement); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsVmTooBig() { vm.setMinAllocatedMem(8865); vm.setVmMemSizeMb(8865); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, false); }	@org.junit.Test public void validateVmMemoryCantStartOnVdsVmTooBig() { vm.setMinAllocatedMem(8865); vm.setVmMemSizeMb(8865); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertFalse(vmPassedMemoryRequirement); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsHighPendingSwapSmall() { vds.setSwapFree(60L); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, true); }	@org.junit.Test public void validateVmMemoryCantStartOnVdsHighPendingSwapSmall() { vds.setSwapFree(60L); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 65); assertTrue(vmPassedMemoryRequirement); }
public void setVmOverheadCalculator(org.ovirt.engine.core.bll.utils.VmOverheadCalculator vmOverheadCalculator) { this.vmOverheadCalculator = vmOverheadCalculator; }	private boolean snapshotWithMemory(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { return (org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().isSaveMemory()) && (snapshot.containsMemory()); }
private org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getSnapshotType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.StatelessSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm()); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().isSaveMemory()) && (isLiveSnapshotApplicable())) { return new org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getStoragePool(), this, vmOverheadCalculator); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }	private org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getSnapshotType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.StatelessSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm()); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().isSaveMemory()) && (isLiveSnapshotApplicable())) { return new org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getStoragePool(), this, vmOverheadCalculator, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDescription()); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }
protected boolean initVdss() { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); org.ovirt.engine.core.compat.Guid vdsToRunOn = schedulingManager.schedule(org.ovirt.engine.core.bll.MigrateVmCommand.getCluster(), org.ovirt.engine.core.bll.MigrateVmCommand.getVm(), getVdsBlackList(), getVdsWhiteList(), getDestinationHostList(), new java.util.ArrayList(), new org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker(this, slaValidator), org.ovirt.engine.core.bll.MigrateVmCommand.getCorrelationId()); setDestinationVdsId(vdsToRunOn); if ((vdsToRunOn != null) && (!(Guid.Empty.equals(vdsToRunOn)))) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn); } org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); if ((vdsToRunOn != null) && (vdsToRunOn.equals(Guid.Empty))) { return false; } if (((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } return true; }	private boolean initVdss() { try { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); java.util.Optional<org.ovirt.engine.core.compat.Guid> vdsToRunOn = getVdsToRunOn(); setDestinationVdsId(vdsToRunOn.orElse(null)); if (vdsToRunOn.isPresent()) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn.get()); } vmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); if (!(vdsToRunOn.isPresent())) { return false; } if (((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } return true; } catch (java.lang.Exception e) { cleanupPassthroughVnics(getDestinationVdsId()); throw e; } }
@org.junit.Test public void validateVmMemoryCanRunOnVds() { boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, true); }	@org.junit.Test public void validateVmMemoryCanRunOnVds() { boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertTrue(vmPassedMemoryRequirement); }
protected boolean getVdsToRunOn() { org.ovirt.engine.core.compat.Guid vdsToRunOn = schedulingManager.schedule(org.ovirt.engine.core.bll.RunVmCommand.getCluster(), org.ovirt.engine.core.bll.RunVmCommand.getVm(), org.ovirt.engine.core.bll.RunVmCommand.getRunVdssList(), getVdsWhiteList(), getPredefinedVdsIdListToRunOn(), new java.util.ArrayList(), new org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker(this, slaValidator), org.ovirt.engine.core.bll.RunVmCommand.getCorrelationId()); setVdsId(vdsToRunOn); if ((vdsToRunOn != null) && (!(Guid.Empty.equals(vdsToRunOn)))) { org.ovirt.engine.core.bll.RunVmCommand.getRunVdssList().add(vdsToRunOn); } org.ovirt.engine.core.bll.RunVmCommand.setVds(null); org.ovirt.engine.core.bll.RunVmCommand.setVdsName(null); if (org.ovirt.engine.core.bll.RunVmCommand.getVdsId().equals(Guid.Empty)) { org.ovirt.engine.core.bll.RunVmCommand.log.error("Can't find VDS to run the VM '{}' on, so this VM will not be run.", org.ovirt.engine.core.bll.RunVmCommand.getVmId()); return false; } if ((org.ovirt.engine.core.bll.RunVmCommand.getVds()) == null) { org.ovirt.engine.core.common.errors.EngineException outEx = new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.RESOURCE_MANAGER_VDS_NOT_FOUND); org.ovirt.engine.core.bll.RunVmCommand.log.error("VmHandler::{}: {}", getClass().getName(), outEx.getMessage()); return false; } return true; }	protected boolean getVdsToRunOn() { java.util.Optional<org.ovirt.engine.core.compat.Guid> vdsToRunOn = schedulingManager.schedule(org.ovirt.engine.core.bll.RunVmCommand.getCluster(), org.ovirt.engine.core.bll.RunVmCommand.getVm(), org.ovirt.engine.core.bll.RunVmCommand.getRunVdssList(), getVdsWhiteList(), getPredefinedVdsIdListToRunOn(), new java.util.ArrayList(), this, org.ovirt.engine.core.bll.RunVmCommand.getCorrelationId()); setVdsId(vdsToRunOn.orElse(null)); if (vdsToRunOn.isPresent()) { org.ovirt.engine.core.bll.RunVmCommand.getRunVdssList().add(vdsToRunOn.get()); } org.ovirt.engine.core.bll.RunVmCommand.setVds(null); org.ovirt.engine.core.bll.RunVmCommand.setVdsName(null); if (org.ovirt.engine.core.bll.RunVmCommand.getVdsId().equals(Guid.Empty)) { org.ovirt.engine.core.bll.RunVmCommand.log.error("Can't find VDS to run the VM '{}' on, so this VM will not be run.", org.ovirt.engine.core.bll.RunVmCommand.getVmId()); return false; } if ((org.ovirt.engine.core.bll.RunVmCommand.getVds()) == null) { org.ovirt.engine.core.common.errors.EngineException outEx = new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.RESOURCE_MANAGER_VDS_NOT_FOUND); org.ovirt.engine.core.bll.RunVmCommand.log.error("VmHandler::{}: {}", getClass().getName(), outEx.getMessage()); return false; } return true; }
@org.junit.Test public void testBalanceNoLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_saving_hosts_no_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_power_saving_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "768"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "128"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(org.ovirt.engine.core.common.businessentities.Cluster.class), anyList(), anyList(), anyList(), anyMap()); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assert result == null; }	@org.junit.Test public void testBalanceNoLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_saving_hosts_no_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_power_saving_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "768"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "128"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(), any(), any(), any(), any()); java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assert !(result.isPresent()); }
@org.junit.Test public void testBalanceCpuAndMemLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_saving_hosts_cpumem_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_power_saving_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "768"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "128"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(org.ovirt.engine.core.common.businessentities.Cluster.class), anyList(), anyList(), anyList(), anyMap()); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assert result == null; }	@org.junit.Test public void testBalanceCpuAndMemLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_saving_hosts_cpumem_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_power_saving_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "768"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "128"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(), any(), any(), any(), any()); java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assert !(result.isPresent()); }
@org.junit.Test public void testBalanceMediumLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_saving_hosts_medium_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_power_saving_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "768"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "128"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(org.ovirt.engine.core.common.businessentities.Cluster.class), anyList(), anyList(), anyList(), anyMap()); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assert result == null; }	@org.junit.Test public void testBalanceMediumLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_saving_hosts_medium_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_power_saving_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "768"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "128"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(), any(), any(), any(), any()); java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assert !(result.isPresent()); }
protected int calcEvenDistributionScore(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm, boolean countThreadsAsCores) { int score = (MaxSchedulerWeight) - 1; java.lang.Integer effectiveCpuCores = slaValidator.getEffectiveCpuCores(vds, countThreadsAsCores); if ((effectiveCpuCores != null) && ((vds.getUsageCpuPercent()) != null)) { score = java.lang.Math.min((((int) (java.lang.Math.round(calcDistributeMetric(vds, vm, effectiveCpuCores)))) + 1), org.ovirt.engine.core.bll.scheduling.policyunits.MaxSchedulerWeight); } score -= (vds.getMaxSchedulingMemory()) / 100; return score; }	protected abstract int calcEvenDistributionScore(float maxMemoryOfVdsInCluster, org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm, boolean countThreadsAsCores);
@org.junit.Test public void testBalanceCpuAndHighMemoryLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_hosts_cpumem_medium_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "900"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "512"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assert result == null; }	@org.junit.Test public void testBalanceCpuAndHighMemoryLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_hosts_cpumem_medium_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "900"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "512"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assert !(result.isPresent()); }
public void updatePendingData(int pendingMemory, int pendingCpuCount) { synchronized(this) { cachedVds.setPendingVcpusCount(pendingCpuCount); cachedVds.setPendingVmemSize(pendingMemory); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.refreshCommitedMemory(cachedVds, vmDao.getAllRunningForVds(getVdsId()), resourceManager); updateDynamicData(cachedVds.getDynamicData()); } }	public void updatePendingData(int pendingMemory, int pendingCpuCount) { synchronized(this) { cachedVds.setPendingVcpusCount(pendingCpuCount); cachedVds.setPendingVmemSize(pendingMemory); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.refreshCommitedMemory(cachedVds, getVmDynamicDao().getAllRunningForVds(getVdsId()), resourceManager); updateDynamicData(cachedVds.getDynamicData()); } }
public void setLastVmsList(java.util.List<org.ovirt.engine.core.common.businessentities.VM> lastVmsList) { this.lastVmsList = lastVmsList; }	public void setLastVmsList(java.util.List<org.ovirt.engine.core.common.businessentities.VmDynamic> lastVmsList) { this.lastVmsList = lastVmsList; }
@java.lang.Override protected void gatherChangedVms(org.ovirt.engine.core.common.businessentities.VM dbVm, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, vdsmVm)); if (org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher.log.isDebugEnabled()) { logBuilder.append(java.lang.String.format("%s:%s ", vdsmVm.getVmDynamic().getId().toString().substring(0, 8), vdsmVm.getVmDynamic().getStatus())); } }	@java.lang.Override protected void gatherChangedVms(org.ovirt.engine.core.common.businessentities.VmDynamic dbVm, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, vdsmVm)); if (org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher.log.isDebugEnabled()) { logBuilder.append(java.lang.String.format("%s:%s ", vdsmVm.getVmDynamic().getId().toString().substring(0, 8), vdsmVm.getVmDynamic().getStatus())); } }
public static boolean refreshCommitedMemory(org.ovirt.engine.core.common.businessentities.VDS host, java.util.Collection<org.ovirt.engine.core.common.businessentities.VM> vms, org.ovirt.engine.core.vdsbroker.ResourceManager resourceManager) { boolean memoryUpdated = false; int memCommited = host.getGuestOverhead(); int vmsCoresCount = 0; for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (((vm != null) && ((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.WaitForLaunch))) && ((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { final org.ovirt.engine.core.vdsbroker.VmManager vmManager = resourceManager.getVmManager(vm.getId()); memCommited += resourceManager.computeCommitedMemoryInMb(vm); vmsCoresCount += vmManager.getNumOfCpus(); } } if (memCommited != (host.getMemCommited())) { host.setMemCommited(memCommited); memoryUpdated = true; } if (vmsCoresCount != (host.getVmsCoresCount())) { host.setVmsCoresCount(vmsCoresCount); memoryUpdated = true; } return memoryUpdated; }	public static boolean refreshCommitedMemory(org.ovirt.engine.core.common.businessentities.VDS host, java.util.List<org.ovirt.engine.core.common.businessentities.VmDynamic> vms, org.ovirt.engine.core.vdsbroker.ResourceManager resourceManager) { boolean memoryUpdated = false; int memCommited = host.getGuestOverhead(); int vmsCoresCount = 0; for (org.ovirt.engine.core.common.businessentities.VmDynamic vm : vms) { if (((vm != null) && ((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.WaitForLaunch))) && ((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { final org.ovirt.engine.core.vdsbroker.VmManager vmManager = resourceManager.getVmManager(vm.getId()); memCommited += vmManager.getVmMemoryWithOverheadInMB(); vmsCoresCount += vmManager.getNumOfCpus(); } } if (memCommited != (host.getMemCommited())) { host.setMemCommited(memCommited); memoryUpdated = true; } if (vmsCoresCount != (host.getVmsCoresCount())) { host.setVmsCoresCount(vmsCoresCount); memoryUpdated = true; } return memoryUpdated; }
private void gatherNonRunningVms(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> dbVms) { for (org.ovirt.engine.core.common.businessentities.VM dbVm : dbVms.values()) { if (!(vdsmVms.containsKey(dbVm.getId()))) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, null)); } } }	private void gatherNonRunningVms(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDynamic> dbVms) { for (org.ovirt.engine.core.common.businessentities.VmDynamic dbVm : dbVms.values()) { if (!(vdsmVms.containsKey(dbVm.getId()))) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, null)); } } }
protected void gatherChangedVms(org.ovirt.engine.core.common.businessentities.VM dbVm, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm) { if (statusChanged(dbVm, vdsmVm.getVmDynamic())) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vmStats = getResourceManager().runVdsCommand(VDSCommandType.GetVmStats, new org.ovirt.engine.core.common.vdscommands.GetVmStatsVDSCommandParameters(vdsManager.getVdsId(), vdsmVm.getVmDynamic().getId())); if (vmStats.getSucceeded()) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, ((org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm) (vmStats.getReturnValue())))); } else { if (dbVm != null) { org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher.log.error("failed to fetch VM '{}' stats. status remain unchanged ({})", dbVm.getId(), dbVm.getStatus()); } } } }	protected void gatherChangedVms(org.ovirt.engine.core.common.businessentities.VmDynamic dbVm, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm) { if (statusChanged(dbVm, vdsmVm.getVmDynamic())) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vmStats = getResourceManager().runVdsCommand(VDSCommandType.GetVmStats, new org.ovirt.engine.core.common.vdscommands.GetVmStatsVDSCommandParameters(vdsManager.getVdsId(), vdsmVm.getVmDynamic().getId())); if (vmStats.getSucceeded()) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, ((org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm) (vmStats.getReturnValue())))); } else { if (dbVm != null) { org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher.log.error("failed to fetch VM '{}' stats. status remain unchanged ({})", dbVm.getId(), dbVm.getStatus()); } } } }
public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getLastVmsList() { return lastVmsList; }	public java.util.List<org.ovirt.engine.core.common.businessentities.VmDynamic> getLastVmsList() { return lastVmsList; }
@org.junit.Before public void setup() { org.mockito.MockitoAnnotations.initMocks(this); when(dbFacade.getVdsDao()).thenReturn(vdsDao); when(dbFacade.getVmDao()).thenReturn(vmDao); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(VmTestPairs.SRC_HOST_ID); when(vdsManager.getCopyVds()).thenReturn(vds); when(vdsManager.getVdsId()).thenReturn(vds.getId()); vmsListFetcher = new org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher(vdsManager, dbFacade, resourceManager); }	@org.junit.Before public void setup() { org.mockito.MockitoAnnotations.initMocks(this); when(dbFacade.getVdsDao()).thenReturn(vdsDao); when(dbFacade.getVmDynamicDao()).thenReturn(vmDynamicDao); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(VmTestPairs.SRC_HOST_ID); when(vdsManager.getCopyVds()).thenReturn(vds); when(vdsManager.getVdsId()).thenReturn(vds.getId()); vmsListFetcher = new org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher(vdsManager, dbFacade, resourceManager); }
private boolean statusChanged(org.ovirt.engine.core.common.businessentities.VM dbVm, org.ovirt.engine.core.common.businessentities.VmDynamic vdsmVm) { return ((dbVm == null) || ((dbVm.getDynamicData()) == null)) || ((dbVm.getStatus()) != (vdsmVm.getStatus())); }	private boolean statusChanged(org.ovirt.engine.core.common.businessentities.VmDynamic dbVm, org.ovirt.engine.core.common.businessentities.VmDynamic vdsmVm) { return (dbVm == null) || ((dbVm.getStatus()) != (vdsmVm.getStatus())); }
@org.junit.experimental.theories.Theory public void changedVms(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { stubCalls(data); org.ovirt.engine.core.common.businessentities.VM oldVm = ((data.dbVm()) == null) ? null : new org.ovirt.engine.core.common.businessentities.VM(data.dbVm().getStaticData(), data.dbVm().getDynamicData(), data.dbVm().getStatisticsData()); assertTrue(vmsListFetcher.fetch()); assumeTrue(((data.dbVm()) != null)); assumeTrue(((data.vdsmVm()) != null)); assumeTrue(((oldVm.getStatus()) != (data.vdsmVm().getVmDynamic().getStatus()))); assertEquals(1, vmsListFetcher.getChangedVms().size()); assertSame(vmsListFetcher.getChangedVms().get(0).getFirst(), data.dbVm().getDynamicData()); }	@org.junit.experimental.theories.Theory public void changedVms(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { stubCalls(data); assertTrue(vmsListFetcher.fetch()); assumeTrue(((data.dbVm()) != null)); assumeTrue(((data.vdsmVm()) != null)); assumeTrue(((data.dbVm().getStatus()) != (data.vdsmVm().getVmDynamic().getStatus()))); assertEquals(1, vmsListFetcher.getChangedVms().size()); assertSame(vmsListFetcher.getChangedVms().get(0).getFirst(), data.dbVm().getDynamicData()); }
protected void filterVms() { for (org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm : vdsmVms.values()) { org.ovirt.engine.core.common.businessentities.VM dbVm = dbVms.get(vdsmVm.getVmDynamic().getId()); gatherChangedVms(dbVm, vdsmVm); } }	protected void filterVms() { for (org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm : vdsmVms.values()) { org.ovirt.engine.core.common.businessentities.VmDynamic dbVm = dbVms.get(vdsmVm.getVmDynamic().getId()); gatherChangedVms(dbVm, vdsmVm); } }
@org.junit.experimental.theories.Theory public void lastVmListNotIncludingExternalVm(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { stubCalls(data); assertTrue(vmsListFetcher.fetch()); assumeTrue(((data.vdsmVm()) != null)); assumeTrue(((data.dbVm()) != null)); verify(vdsManager).setLastVmsList(vdsManagerArgumentCaptor.capture()); assertEquals(data.vdsmVm().getVmDynamic(), vdsManagerArgumentCaptor.getValue().get(0).getDynamicData()); }	@org.junit.experimental.theories.Theory public void lastVmListNotIncludingExternalVm(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { stubCalls(data); assertTrue(vmsListFetcher.fetch()); assumeTrue(((data.vdsmVm()) != null)); assumeTrue(((data.dbVm()) != null)); verify(vdsManager).setLastVmsList(vdsManagerArgumentCaptor.capture()); assertEquals(data.vdsmVm().getVmDynamic(), vdsManagerArgumentCaptor.getValue().get(0)); }
private void saveLastVmsList(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> vdsmVms) { vdsManager.setLastVmsList(vdsmVms.values().stream().map(VdsmVm::getVmDynamic).filter(( dynamicData) -> dbVms.containsKey(dynamicData.getId())).map(this::mergeDbAndMonitoring).collect(java.util.stream.Collectors.toList())); }	private void saveLastVmsList(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> vdsmVms) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDynamic> vms = new java.util.ArrayList(vdsmVms.size()); for (org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vmInternalData : this.vdsmVms.values()) { if (dbVms.containsKey(vmInternalData.getVmDynamic().getId())) { vms.add(vmInternalData.getVmDynamic()); } } vdsManager.setLastVmsList(vms); }
public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmDynamic, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm>> getChangedVms() { return changedVms.stream().map(( r) -> new org.ovirt.engine.core.vdsbroker.monitoring.Pair<>(r.getFirst().getDynamicData(), r.getSecond())).collect(java.util.stream.Collectors.toList()); }	public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmDynamic, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm>> getChangedVms() { return changedVms; }
protected void onFetchVms() { dbVms = getVmDao().getAllRunningForVds(vdsManager.getVdsId()).stream().collect(java.util.stream.Collectors.toMap(VM::getId, java.util.function.Function.identity())); changedVms = new java.util.ArrayList(); filterVms(); gatherNonRunningVms(dbVms); saveLastVmsList(vdsmVms); }	protected void onFetchVms() { dbVms = getVmDynamicDao().getAllRunningForVds(vdsManager.getVdsId()).stream().collect(java.util.stream.Collectors.toMap(VmDynamic::getId, java.util.function.Function.identity())); changedVms = new java.util.ArrayList(); filterVms(); gatherNonRunningVms(dbVms); saveLastVmsList(vdsmVms); }
public org.ovirt.engine.core.dao.VmDao getVmDao() { return dbFacade.getVmDao(); }	public org.ovirt.engine.core.dao.VmDynamicDao getVmDynamicDao() { return dbFacade.getVmDynamicDao(); }
private void stubCalls(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { when(resourceManager.runVdsCommand(eq(VDSCommandType.List), any(org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase.class))).thenReturn(getVdsReturnValue(data.vdsmVm())); if ((data.dbVm()) != null) { when(vmDao.getAllRunningForVds(VmTestPairs.SRC_HOST_ID)).thenReturn(java.util.Collections.singletonList(data.dbVm())); } if ((data.vdsmVm()) != null) { when(resourceManager.runVdsCommand(eq(VDSCommandType.GetVmStats), any(org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase.class))).thenReturn(getStatsReturnValue(data.vdsmVm())); } }	private void stubCalls(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { when(resourceManager.runVdsCommand(eq(VDSCommandType.List), any())).thenReturn(getVdsReturnValue(data.vdsmVm())); if ((data.dbVm()) != null) { when(vmDynamicDao.getAllRunningForVds(VmTestPairs.SRC_HOST_ID)).thenReturn(java.util.Collections.singletonList(data.dbVm().getDynamicData())); } if ((data.vdsmVm()) != null) { when(resourceManager.runVdsCommand(eq(VDSCommandType.GetVmStats), any())).thenReturn(getStatsReturnValue(data.vdsmVm())); } }
void updateVdsNeedsReinstall(org.ovirt.engine.core.compat.Guid vdsStaticId, boolean vdsNeedsReinstall);	void updateReinstallRequired(org.ovirt.engine.core.compat.Guid vdsStaticId, boolean reinstallRequired);
private boolean needToReinstallVds() { org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getParameters().getVdsStaticData(); org.ovirt.engine.core.common.businessentities.VdsStatic oldVdsStatic = oldHost.getStaticData(); return ((vdsStatic.isVdsNeedsReinstall()) || ((vdsStatic.isPmKdumpDetection()) && (!(oldVdsStatic.isPmKdumpDetection())))) || (!(java.util.Objects.equals(vdsStatic.getCurrentKernelCmdline(), oldVdsStatic.getCurrentKernelCmdline()))); }	private boolean shouldVdsBeReinstalled() { org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getParameters().getVdsStaticData(); org.ovirt.engine.core.common.businessentities.VdsStatic oldVdsStatic = oldHost.getStaticData(); return ((vdsStatic.isReinstallRequired()) || ((vdsStatic.isPmKdumpDetection()) && (!(oldVdsStatic.isPmKdumpDetection())))) || (!(java.util.Objects.equals(vdsStatic.getCurrentKernelCmdline(), oldVdsStatic.getCurrentKernelCmdline()))); }
private void updateHosts() { for (org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic : vdsStaticDao.getAllForCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId())) { vdsStaticDao.updateVdsNeedsReinstall(vdsStatic.getId(), true); } }	private void markHostsForReinstall() { for (org.ovirt.engine.core.common.businessentities.VDS vds : allForCluster) { vdsStaticDao.updateReinstallRequired(vds.getId(), true); } }
protected void markVdsReinstalled() { vdsStaticDao.updateVdsNeedsReinstall(org.ovirt.engine.core.bll.VdsCommand.getVds().getStaticData().getId(), false); }	protected void markVdsReinstalled() { vdsStaticDao.updateReinstallRequired(org.ovirt.engine.core.bll.VdsCommand.getVds().getStaticData().getId(), false); }
public void setVdsNeedsReinstall(boolean vdsNeedsReinstall) { vdsStatic.setVdsNeedsReinstall(vdsNeedsReinstall); }	public void setReinstallRequired(boolean reinstallRequired) { vdsStatic.setReinstallRequired(reinstallRequired); }
@java.lang.Override public void updateVdsNeedsReinstall(org.ovirt.engine.core.compat.Guid vdsStaticId, boolean vdsNeedsReinstall) { getCallsHandler().executeModification("UpdateVdsNeedsReinstall", getCustomMapSqlParameterSource().addValue("vds_id", vdsStaticId).addValue("vds_needs_reinstall", vdsNeedsReinstall)); }	@java.lang.Override public void updateReinstallRequired(org.ovirt.engine.core.compat.Guid vdsStaticId, boolean reinstallRequired) { getCallsHandler().executeModification("UpdateVdsReinstallRequired", getCustomMapSqlParameterSource().addValue("vds_id", vdsStaticId).addValue("reinstall_required", reinstallRequired)); }
public boolean isVdsNeedsReinstall() { return vdsNeedsReinstall; }	public boolean isReinstallRequired() { return reinstallRequired; }
public void setVdsNeedsReinstall(boolean vdsNeedsReinstall) { this.vdsNeedsReinstall = vdsNeedsReinstall; }	public void setReinstallRequired(boolean reinstallRequired) { this.reinstallRequired = reinstallRequired; }
private void readCpuItem(org.ovirt.engine.core.utils.ovf.xml.XmlNode node) { org.ovirt.engine.core.utils.ovf.xml.XmlNode virtualQuantity = selectSingleNode(node, "rasd:VirtualQuantity", _xmlNS); if (virtualQuantity != null) { vmBase.setNumOfSockets(java.lang.Integer.parseInt(virtualQuantity.innerText)); vmBase.setCpuPerSocket(1); vmBase.setThreadsPerCpu(1); } else { vmBase.setNumOfSockets(java.lang.Integer.parseInt(selectSingleNode(node, "rasd:num_of_sockets", _xmlNS).innerText)); vmBase.setCpuPerSocket(java.lang.Integer.parseInt(selectSingleNode(node, "rasd:cpu_per_socket", _xmlNS).innerText)); vmBase.setThreadsPerCpu(parseNodeInteger(node, "rasd:threads_per_cpu", 1)); } }	protected void readCpuItem(org.ovirt.engine.core.utils.ovf.xml.XmlNode node) { vmBase.setNumOfSockets(java.lang.Integer.parseInt(selectSingleNode(node, "rasd:num_of_sockets", _xmlNS).innerText)); vmBase.setCpuPerSocket(java.lang.Integer.parseInt(selectSingleNode(node, "rasd:cpu_per_socket", _xmlNS).innerText)); vmBase.setThreadsPerCpu(parseNodeInteger(node, "rasd:threads_per_cpu", 1)); }
@java.lang.Override protected void executeCommand() { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_VM_NAME, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_MEMORY_SIZE_MB, java.lang.String.valueOf(getUnpluggedDeviceSize())); addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_DEVICE_ID, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getDeviceId().toString()); final org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.HotUnplugMemory, new org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.Params(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getRunOnVds(), getDeviceToHotUnplug(), org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMinAllocatedMem())); if (!(vdsReturnValue.getSucceeded())) { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_ERROR_MESSAGE, vdsReturnValue.getVdsError().getMessage()); setReturnValueFailure(vdsReturnValue); return; } if (((org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMemSizeMb()) - (getUnpluggedDeviceSize())) >= (org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMinAllocatedMem())) { updateVm(); } org.ovirt.engine.core.bll.HotUnplugMemoryCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_VM_NAME, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_MEMORY_SIZE_MB, java.lang.String.valueOf(getUnpluggedDeviceSize())); addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_DEVICE_ID, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getDeviceId().toString()); final org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.HotUnplugMemory, new org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.Params(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getRunOnVds(), getDeviceToHotUnplug())); if (!(vdsReturnValue.getSucceeded())) { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_ERROR_MESSAGE, vdsReturnValue.getVdsError().getMessage()); setReturnValueFailure(vdsReturnValue); return; } if (((org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMemSizeMb()) - (getUnpluggedDeviceSize())) >= (org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMinAllocatedMem())) { updateVm(); } org.ovirt.engine.core.bll.HotUnplugMemoryCommand.setSucceeded(true); }
@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getBroker().hotUnplugMemory(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createHotplugMemoryParamsMap(org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getParameters().getMemoryDeviceToUnplug(), true, org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getParameters().getMinAllocatedMem())); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.setVdsRuntimeErrorAndReport(e); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getVDSReturnValue().setExceptionString(null); } }	@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getBroker().hotUnplugMemory(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createHotplugMemoryParamsMap(org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getParameters().getMemoryDeviceToUnplug(), true)); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.setVdsRuntimeErrorAndReport(e); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getVDSReturnValue().setExceptionString(null); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.SetAmountOfMemory, new org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.Params(org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getId(), createMemoryDevice(), org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getMinAllocatedMem())); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.setSucceeded(true); } else { org.ovirt.engine.core.common.errors.EngineFault fault = new org.ovirt.engine.core.common.errors.EngineFault(); fault.setError(vdsReturnValue.getVdsError().getCode()); fault.setMessage(vdsReturnValue.getVdsError().getMessage()); org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getReturnValue().setFault(fault); } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.SetAmountOfMemory, new org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.Params(org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getId(), createMemoryDevice(), org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getParameters().getVmStaticData().getMinAllocatedMem())); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.setSucceeded(true); } else { org.ovirt.engine.core.common.errors.EngineFault fault = new org.ovirt.engine.core.common.errors.EngineFault(); fault.setError(vdsReturnValue.getVdsError().getCode()); fault.setMessage(vdsReturnValue.getVdsError().getMessage()); org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getReturnValue().setFault(fault); } }
public static java.util.Map<java.lang.String, java.lang.Object> createHotplugMemoryParamsMap(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, boolean copyAlias, int minAllocatedMem) { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); data.put("vmId", vmDevice.getVmId().toString()); data.put("memGuaranteedSize", minAllocatedMem); data.put("memory", org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createVmMemoryDeviceMap(vmDevice, copyAlias)); return data; }	public static java.util.Map<java.lang.String, java.lang.Object> createHotplugMemoryParamsMap(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, boolean copyAlias, int minAllocatedMem) { java.util.Map<java.lang.String, java.lang.Object> data = org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createHotplugMemoryParamsMap(vmDevice, copyAlias); data.put("memGuaranteedSize", minAllocatedMem); return data; }
@org.ovirt.api.metamodel.annotations.Link types.HostExternalNetworkProvider[] externalNetworkProviders();	@org.ovirt.api.metamodel.annotations.Link types.ExternalNetworkProviderConfiguration[] externalNetworkProviderConfigurations();
@org.ovirt.api.metamodel.annotations.Link types.OpenStackNetworkProvider defaultNetworkProvider();	@org.ovirt.api.metamodel.annotations.Link types.ExternalProvider[] externalNetworkProviders();
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(cluster().name()); or(mandatory(cluster().dataCenter().id()), mandatory(cluster().dataCenter().name())); optional(cluster().version().major()); optional(cluster().version().minor()); optional(cluster().cpu().type()); optional(cluster().ballooningEnabled()); optional(cluster().comment()); optional(cluster().cpu().architecture()); optional(cluster().description()); optional(cluster().display().proxy()); optional(cluster().errorHandling().onError()); optional(cluster().fencingPolicy().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().threshold()); optional(cluster().fencingPolicy().skipIfSdActive().enabled()); optional(cluster().glusterService()); optional(cluster().haReservation()); optional(cluster().ksm().enabled()); optional(cluster().ksm().mergeAcrossNodes()); optional(cluster().maintenanceReasonRequired()); optional(cluster().memoryPolicy().overCommit().percent()); optional(cluster().memoryPolicy().transparentHugePages().enabled()); optional(cluster().threadsAsCores()); optional(cluster().trustedService()); optional(cluster().tunnelMigration()); optional(cluster().virtService()); or(optional(cluster().managementNetwork().id()), optional(cluster().managementNetwork().name())); or(optional(cluster().schedulingPolicy().id()), optional(cluster().schedulingPolicy().name())); optional(cluster().defaultNetworkProvider()); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(cluster().name()); or(mandatory(cluster().dataCenter().id()), mandatory(cluster().dataCenter().name())); optional(cluster().version().major()); optional(cluster().version().minor()); optional(cluster().cpu().type()); optional(cluster().ballooningEnabled()); optional(cluster().comment()); optional(cluster().cpu().architecture()); optional(cluster().description()); optional(cluster().display().proxy()); optional(cluster().errorHandling().onError()); optional(cluster().fencingPolicy().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().threshold()); optional(cluster().fencingPolicy().skipIfSdActive().enabled()); optional(cluster().glusterService()); optional(cluster().haReservation()); optional(cluster().ksm().enabled()); optional(cluster().ksm().mergeAcrossNodes()); optional(cluster().maintenanceReasonRequired()); optional(cluster().memoryPolicy().overCommit().percent()); optional(cluster().memoryPolicy().transparentHugePages().enabled()); optional(cluster().threadsAsCores()); optional(cluster().trustedService()); optional(cluster().tunnelMigration()); optional(cluster().virtService()); or(optional(cluster().managementNetwork().id()), optional(cluster().managementNetwork().name())); or(optional(cluster().schedulingPolicy().id()), optional(cluster().schedulingPolicy().name())); optional(cluster().externalNetworkProviders()[COLLECTION].id()); }
@java.lang.Override public org.ovirt.engine.api.resource.HostExternalNetworkProvidersResource getExternalNetworkProvidersResource() { return null; }	@java.lang.Override public org.ovirt.engine.api.resource.ExternalNetworkProviderConfigurationsResource getExternalNetworkProviderConfigurationsResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendHostExternalNetworkProviderConfigurationsResource(guid)); }
protected void syncChildCommandList(org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters) { java.util.List<org.ovirt.engine.core.compat.Guid> childCommandIds = commandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommandBase.getCommandId()); if ((childCommandIds.size()) != (parameters.getChildCommands().size())) { for (org.ovirt.engine.core.compat.Guid id : childCommandIds) { if (!(parameters.getChildCommands().containsValue(id))) { parameters.getChildCommands().put(parameters.getCommandStep(), id); } } } }	protected void syncChildCommandList(org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters) { java.util.List<org.ovirt.engine.core.compat.Guid> childCommandIds = commandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommandBase.getCommandId()); if ((childCommandIds.size()) != (parameters.getChildCommands().size())) { parameters.getChildCommands().put(parameters.getCommandStep(), childCommandIds.get(((childCommandIds.size()) - 1))); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getImageGroupId())); java.util.List<org.ovirt.engine.core.compat.Guid> failedGuids = getFailedVolumeIds(); if (failedGuids.isEmpty()) { log.info("Requested images were successfully removed"); persistCommand(org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getParentCommand()); } else { log.error("The following images were not removed: {}", failedGuids); ((org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters) (org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getParentParameters())).setNextCommandStep(RemoveSnapshotSingleDiskStep.DESTROY_IMAGE_CHECK); } setCommandStatus(CommandStatus.SUCCEEDED); org.ovirt.engine.core.bll.DestroyImageCheckCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getImageGroupId())); java.util.List<org.ovirt.engine.core.compat.Guid> failedGuids = getFailedVolumeIds(); if (failedGuids.isEmpty()) { log.info("Requested images were successfully removed"); persistCommand(org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getParentCommand()); } else { log.error("The following images were not removed: {}", failedGuids); if (org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().isLiveMerge()) { ((org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters) (org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getParentParameters())).setNextCommandStep(RemoveSnapshotSingleDiskStep.DESTROY_IMAGE_CHECK); } } setCommandStatus(CommandStatus.SUCCEEDED); org.ovirt.engine.core.bll.DestroyImageCheckCommand.setSucceeded(true); }
protected void logException(java.lang.RuntimeException ex) { if (((ex.getMessage()) == null) || (!(ex.getMessage().contains("Policy reset")))) { log.error("Command '{}' execution failed: {}", this, ex.getMessage()); log.debug("Exception", ex); } }	private void logException(java.lang.RuntimeException ex) { if (((ex.getMessage()) == null) || (!(ex.getMessage().contains("Policy reset")))) { log.error("Command '{}' execution failed: {}", this, ex.getMessage()); log.debug("Exception", ex); } }
protected void logTimeoutException(java.util.concurrent.TimeoutException e, org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ex) { logException(ex); log.error("Timeout waiting for VDSM response: {}", e.getMessage()); log.debug("Exception", e); }	protected void logTimeoutException(java.util.concurrent.TimeoutException e, org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ex) { log.error("Timeout waiting for VDSM response: {}", e.getMessage()); log.debug("Exception", e); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.HostDevice entity) { return createIdParameterMapper(entity.getId()).addValue("parent_device_name", entity.getParentDeviceName()).addValue("capability", entity.getCapability()).addValue("iommu_group", entity.getIommuGroup()).addValue("mdev_types", org.apache.commons.lang.StringUtils.join(entity.getMdevTypes(), ",")).addValue("product_name", entity.getProductName()).addValue("product_id", entity.getProductId()).addValue("vendor_name", entity.getVendorName()).addValue("vendor_id", entity.getVendorId()).addValue("physfn", entity.getParentPhysicalFunction()).addValue("total_vfs", entity.getTotalVirtualFunctions()).addValue("net_iface_name", entity.getNetworkInterfaceName()).addValue("driver", entity.getDriver()).addValue("is_assignable", entity.isAssignable()).addValue("address", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(entity.getAddress())); }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.HostDevice entity) { return createIdParameterMapper(entity.getId()).addValue("parent_device_name", entity.getParentDeviceName()).addValue("capability", entity.getCapability()).addValue("iommu_group", entity.getIommuGroup()).addValue("mdev_types", java.lang.String.join(",", entity.getMdevTypes())).addValue("product_name", entity.getProductName()).addValue("product_id", entity.getProductId()).addValue("vendor_name", entity.getVendorName()).addValue("vendor_id", entity.getVendorId()).addValue("physfn", entity.getParentPhysicalFunction()).addValue("total_vfs", entity.getTotalVirtualFunctions()).addValue("net_iface_name", entity.getNetworkInterfaceName()).addValue("driver", entity.getDriver()).addValue("is_assignable", entity.isAssignable()).addValue("address", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(entity.getAddress())); }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.setExecutorService(new org.ovirt.engine.core.common.utils.EngineThreadPools.InternalThreadExecutor(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_MIN_SIZE"), org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_MAX_SIZE"), org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_QUEUE_SIZE"))); }	@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.setExecutorService(new org.ovirt.engine.core.common.utils.EngineThreadPools.InternalThreadExecutor("EngineThreadPool", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_MIN_SIZE"), org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_MAX_SIZE"), org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_QUEUE_SIZE"))); }
protected void markImagesIllegalIfNotInDb(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.compat.Guid snapshotId) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesInDb = diskImageDao.getAllSnapshotsForVmSnapshot(snapshotId); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesInDbMap = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDiskImagesByIdMap(imagesInDb); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage fromConfigImg : vm.getImages()) { if ((((fromConfigImg.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) || ((fromConfigImg.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.CINDER))) && (!(imagesInDbMap.containsKey(fromConfigImg.getImageId())))) { org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper.log.debug("Image '{}' of Disk '{}' cannot be found in database. This image will be returned as ILLEGAL from the query", fromConfigImg.getImageId(), fromConfigImg.getId()); fromConfigImg.setImageStatus(ImageStatus.ILLEGAL); } else { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInDb = imagesInDbMap.get(fromConfigImg.getImageId()); fromConfigImg.setImageStatus(imageInDb.getImageStatus()); } } }	protected void markImagesIllegalIfNotInDb(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.compat.Guid snapshotId) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesInDb = diskImageDao.getAllSnapshotsForVmSnapshot(snapshotId); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesInDbMap = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDiskImagesByIdMap(imagesInDb); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage fromConfigImg : vm.getImages()) { if (!(imagesInDbMap.containsKey(fromConfigImg.getImageId()))) { org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper.log.debug("Image '{}' of Disk '{}' cannot be found in database. This image will be returned as ILLEGAL from the query", fromConfigImg.getImageId(), fromConfigImg.getId()); fromConfigImg.setImageStatus(ImageStatus.ILLEGAL); } else { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInDb = imagesInDbMap.get(fromConfigImg.getImageId()); fromConfigImg.setImageStatus(imageInDb.getImageStatus()); } } }
private org.ovirt.engine.core.common.AuditLogType attemptToAttachDisksToImportedVm(java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { java.util.List<java.lang.String> failedDisks = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = disk.getDiskVmElements().iterator().next(); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve, disk.getPlugged()); org.ovirt.engine.core.common.action.ActionReturnValue returnVal = runInternalAction(ActionType.AttachDiskToVm, params, org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.cloneContextAndDetachFromParent()); if (!(returnVal.getSucceeded())) { failedDisks.add(disk.getDiskAlias()); } } if (!(failedDisks.isEmpty())) { this.addCustomValue("DiskAliases", org.apache.commons.lang.StringUtils.join(failedDisks, ",")); return org.ovirt.engine.core.common.AuditLogType.VM_IMPORT_FROM_CONFIGURATION_ATTACH_DISKS_FAILED; } return org.ovirt.engine.core.common.AuditLogType.VM_IMPORT_FROM_CONFIGURATION_EXECUTED_SUCCESSFULLY; }	private org.ovirt.engine.core.common.AuditLogType attemptToAttachDisksToImportedVm(java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { java.util.List<java.lang.String> failedDisks = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = disk.getDiskVmElements().iterator().next(); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve, dve.isPlugged()); org.ovirt.engine.core.common.action.ActionReturnValue returnVal = runInternalAction(ActionType.AttachDiskToVm, params, org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.cloneContextAndDetachFromParent()); if (!(returnVal.getSucceeded())) { failedDisks.add(disk.getDiskAlias()); } } if (!(failedDisks.isEmpty())) { this.addCustomValue("DiskAliases", org.apache.commons.lang.StringUtils.join(failedDisks, ",")); return org.ovirt.engine.core.common.AuditLogType.VM_IMPORT_FROM_CONFIGURATION_ATTACH_DISKS_FAILED; } return org.ovirt.engine.core.common.AuditLogType.VM_IMPORT_FROM_CONFIGURATION_EXECUTED_SUCCESSFULLY; }
private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> mapDisks(org.ovirt.engine.api.model.DiskAttachments diskAttachments) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskToImageIds = null; if (diskAttachments.isSetDiskAttachments()) { diskToImageIds = diskAttachments.getDiskAttachments().stream().map(DiskAttachment::getDisk).filter(java.util.Objects::nonNull).map(( d) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (org.ovirt.engine.api.restapi.types.DiskMapper.map(d, null)))).collect(java.util.stream.Collectors.toMap(BaseDisk::getId, DiskImage::getImageId)); } return diskToImageIds; }	private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> mapDisks(org.ovirt.engine.api.model.DiskAttachments diskAttachments) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskToImageIds = null; if (diskAttachments.isSetDiskAttachments()) { diskToImageIds = diskAttachments.getDiskAttachments().stream().map(DiskAttachment::getDisk).filter(java.util.Objects::nonNull).map(( disk) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (org.ovirt.engine.api.restapi.types.DiskMapper.map(disk, null)))).collect(java.util.stream.Collectors.toMap(BaseDisk::getId, DiskImage::getImageId)); } return diskToImageIds; }
private java.lang.String maskPassword(java.lang.String queryString) { return queryString.replaceAll("password=[^&]+", "password=****"); }	private java.lang.String maskPassword(java.lang.String queryString) { return org.apache.commons.lang.StringUtils.isNotEmpty(queryString) ? queryString.replaceAll("password=[^&]+", "password=***") : queryString; }
types.ResumeBehavior resumeBehavior();	types.VmStorageErrorResumeBehaviour storageErrorResumeBehaviour();
private void onUpgrade() { if ((getProgress()) != null) { return; } org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(host.getId(), getLatch().getEntity().booleanValue()); invokeHostUpgrade(params); }	private void onUpgrade() { if ((getProgress()) != null) { return; } org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(host.getId(), getReboot().getEntity().booleanValue()); invokeHostUpgrade(params); }
@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { try { org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command = new org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder().hostnames(host.getHostName()).logFileDirectory(VdsDeployBase.HOST_DEPLOY_LOG_DIRECTORY).logFilePrefix("ovirt-host-mgmt-ansible").logFileName(host.getHostName()).logFileSuffix(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()).playbook(AnsibleConstants.HOST_UPGRADE_PLAYBOOK); if ((new org.ovirt.engine.core.common.utils.ansible.AnsibleExecutor().runCommand(command).getAnsibleReturnCode()) != (org.ovirt.engine.core.common.utils.ansible.AnsibleReturnCode.OK)) { org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error("Failed to update host '{}'.", host.getName()); throw new java.lang.RuntimeException("Failed to update host '{}'."); } } catch (java.lang.InterruptedException | java.io.IOException ex) { throw new java.lang.RuntimeException(ex); } }	@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { try { org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command = new org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder().hostnames(host.getHostName()).verboseLevel(AnsibleVerbosity.LEVEL1).logFileDirectory(VdsDeployBase.HOST_DEPLOY_LOG_DIRECTORY).logFilePrefix("ovirt-host-mgmt-ansible").logFileName(host.getHostName()).logFileSuffix(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()).playbook(AnsibleConstants.HOST_UPGRADE_PLAYBOOK); if ((ansibleExecutor.runCommand(command).getAnsibleReturnCode()) != (org.ovirt.engine.core.common.utils.ansible.AnsibleReturnCode.OK)) { java.lang.String error = java.lang.String.format("Failed to update host '%1$s'.", host.getHostName()); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error(error); throw new java.lang.RuntimeException(error); } } catch (java.lang.InterruptedException | java.io.IOException ex) { throw new java.lang.RuntimeException(ex); } }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(cluster().id()), mandatory(cluster().name())); optional(configuration()); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(cluster().id()), mandatory(cluster().name())); optional(registrationConfiguration()); }
@org.ovirt.api.metamodel.annotations.In services.RegistrationConfiguration registrationConfiguration();	@org.ovirt.api.metamodel.annotations.In types.RegistrationConfiguration registrationConfiguration();
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(cluster().id()), mandatory(cluster().name())); optional(clone()); optional(exclusive()); optional(template().name()); optional(configuration()); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(cluster().id()), mandatory(cluster().name())); optional(clone()); optional(exclusive()); optional(template().name()); optional(registrationConfiguration()); }
protected boolean validateNetworkProviderConfiguration(org.ovirt.engine.core.compat.Guid providerId, java.lang.String networkMappings) { if (providerId == null) { return true; } else { org.ovirt.engine.core.common.businessentities.Provider provider = providerDao.get(providerId); if (provider == null) { return false; } if (!(((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK)) || ((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.EXTERNAL_NETWORK)))) { return false; } if (((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK)) && (!(validateOpenstackNetworkProviderProperties(providerId, networkMappings)))) { return false; } return true; } }	protected boolean validateNetworkProviderConfiguration(org.ovirt.engine.core.compat.Guid providerId, java.lang.String networkMappings) { if (providerId == null) { return true; } else { org.ovirt.engine.core.common.businessentities.Provider provider = providerDao.get(providerId); org.ovirt.engine.core.bll.provider.NetworkProviderValidator validator = new org.ovirt.engine.core.bll.provider.NetworkProviderValidator(provider); if (!((validate(validator.providerIsSet())) && (validate(validator.providerTypeIsNetwork())))) { return false; } if (((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK)) && (!(validateOpenstackNetworkProviderProperties(validator, networkMappings)))) { return false; } return true; } }
private boolean validateOpenstackNetworkProviderProperties(org.ovirt.engine.core.compat.Guid providerId, java.lang.String networkMappings) { org.ovirt.engine.core.bll.provider.NetworkProviderValidator validator = new org.ovirt.engine.core.bll.provider.NetworkProviderValidator(providerDao.get(providerId)); return (((validate(validator.providerIsSet())) && (validate(validator.providerTypeIsOpenstack()))) && (validate(validator.networkMappingsProvided(networkMappings)))) && (validate(validator.messagingBrokerProvided())); }	private boolean validateOpenstackNetworkProviderProperties(org.ovirt.engine.core.bll.provider.NetworkProviderValidator validator, java.lang.String networkMappings) { return (validate(validator.networkMappingsProvided(networkMappings))) && (validate(validator.messagingBrokerProvided())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface) { return (hostInterface.getTxTotal()) != null ? totalRenderer.render(hostInterface.getTxTotal()) : org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.constants.notAvailableLabel(); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface) { return totalRenderer.render(hostInterface.getTxTotal()); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface) { return (hostInterface.getRxTotal()) != null ? totalRenderer.render(hostInterface.getRxTotal()) : org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.constants.notAvailableLabel(); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface) { return totalRenderer.render(hostInterface.getRxTotal()); }
@java.lang.Override public javax.ws.rs.core.Response upgrade(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(guid); if (action.isSetImage()) { params.setoVirtIsoFile(action.getImage()); } if ((action.isReboot()) != null) { params.setReboot(action.isReboot()); } return doAction(ActionType.UpgradeHost, params, action); }	@java.lang.Override public javax.ws.rs.core.Response upgrade(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(guid); if (action.isSetImage()) { params.setoVirtIsoFile(action.getImage()); } if (action.isSetReboot()) { params.setReboot(action.isReboot()); } return doAction(ActionType.UpgradeHost, params, action); }
private org.ovirt.engine.core.common.businessentities.VM readVmFromOvf(java.lang.String ovf) { try { return ovfHelper.readVmFromOvf(ovf).getFirst(); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { org.ovirt.engine.core.bll.exportimport.ConvertVmCommand.log.debug(("failed to parse a given ovf configuration: \n " + ovf), e); auditLog(this, AuditLogType.IMPORTEXPORT_INVALID_OVF); throw new org.ovirt.engine.core.common.errors.EngineException(); } }	private org.ovirt.engine.core.common.businessentities.VM readVmFromOvf(java.lang.String ovf) { try { return ovfHelper.readVmFromOvf(ovf).getVm(); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { org.ovirt.engine.core.bll.exportimport.ConvertVmCommand.log.debug(("failed to parse a given ovf configuration: \n " + ovf), e); auditLog(this, AuditLogType.IMPORTEXPORT_INVALID_OVF); throw new org.ovirt.engine.core.common.errors.EngineException(); } }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.VM); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { org.ovirt.engine.core.common.businessentities.VM vm = ovfHelper.readVmFromOvf(ovf.getOvfData()).getFirst(); vm.setClusterCompatibilityVersion(ovf.getLowestCompVersion()); vm.setClusterArch(ovf.getArchitecture()); vmList.add(vm); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("failed to parse a given ovf configuration: \n" + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setReturnValue(vmList); }	@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.VM); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { org.ovirt.engine.core.common.businessentities.VM vm = ovfHelper.readVmFromOvf(ovf.getOvfData()).getVm(); vm.setClusterCompatibilityVersion(ovf.getLowestCompVersion()); vm.setClusterArch(ovf.getArchitecture()); vmList.add(vm); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("failed to parse a given ovf configuration: \n" + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setReturnValue(vmList); }
@java.lang.Override protected void executeQueryCommand() { if (ConfigurationType.OVF.equals(org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getConfigurationType())) { try { org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setReturnValue(ovfHelper.readVmFromOvf(org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getVmConfiguration()).getFirst()); org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setSucceeded(true); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("failed to parse a given ovf configuration: \n" + (org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getVmConfiguration())), e); org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); } } }	@java.lang.Override protected void executeQueryCommand() { if (ConfigurationType.OVF.equals(org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getConfigurationType())) { try { org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setReturnValue(ovfHelper.readVmFromOvf(org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getVmConfiguration()).getVm()); org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setSucceeded(true); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("failed to parse a given ovf configuration: \n" + (org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getVmConfiguration())), e); org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); } } }
public org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmTemplate, org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData> readVmTemplateFromOvf(java.lang.String ovf) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate(); org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(template); ovfManager.importTemplate(ovf, fullEntityOvfData); template.setInterfaces(fullEntityOvfData.getInterfaces()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : fullEntityOvfData.getDiskImages()) { template.getDiskTemplateMap().put(disk.getId(), disk); } return new org.ovirt.engine.core.common.utils.Pair(template, fullEntityOvfData); }	public org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData readVmTemplateFromOvf(java.lang.String ovf) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate(); org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(template); ovfManager.importTemplate(ovf, fullEntityOvfData); template.setInterfaces(fullEntityOvfData.getInterfaces()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : fullEntityOvfData.getDiskImages()) { template.getDiskTemplateMap().put(disk.getId(), disk); } return fullEntityOvfData; }
public java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> getVmConfigurationInStatelessSnapshotOfVm(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = snapshotDao.get(vmId, SnapshotType.STATELESS); if (snapshot == null) { return java.util.Optional.empty(); } try { return java.util.Optional.of(ovfHelper.readVmFromOvf(snapshot.getVmConfiguration()).getFirst()); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { throw new java.lang.RuntimeException(e); } }	public java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> getVmConfigurationInStatelessSnapshotOfVm(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = snapshotDao.get(vmId, SnapshotType.STATELESS); if (snapshot == null) { return java.util.Optional.empty(); } try { return java.util.Optional.of(ovfHelper.readVmFromOvf(snapshot.getVmConfiguration()).getVm()); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { throw new java.lang.RuntimeException(e); } }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.TEMPLATE); java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> vmTemplates = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { vmTemplates.add(ovfHelper.readVmTemplateFromOvf(ovf.getOvfData()).getFirst()); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("failed to parse a given ovf configuration: \n" + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setReturnValue(vmTemplates); }	@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.TEMPLATE); java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> vmTemplates = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { vmTemplates.add(ovfHelper.readVmTemplateFromOvf(ovf.getOvfData()).getVmTemplate()); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("failed to parse a given ovf configuration: \n" + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setReturnValue(vmTemplates); }
@java.lang.Override protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> buildFromOVFs(java.util.List<java.lang.String> ovfList) { java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> templateDisksMap = new java.util.HashMap<>(); for (java.lang.String ovf : ovfList) { try { if (ovfHelper.isOvfTemplate(ovf)) { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = ovfHelper.readVmTemplateFromOvf(ovf).getFirst(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDisks = new java.util.ArrayList(vmTemplate.getDiskTemplateMap().values()); templateDisksMap.put(vmTemplate, templateDisks); } } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException ex) { auditLogOvfLoadError(ex.getName(), ex.getMessage()); } } return templateDisksMap; }	@java.lang.Override protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> buildFromOVFs(java.util.List<java.lang.String> ovfList) { java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> templateDisksMap = new java.util.HashMap<>(); for (java.lang.String ovf : ovfList) { try { if (ovfHelper.isOvfTemplate(ovf)) { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = ovfHelper.readVmTemplateFromOvf(ovf).getVmTemplate(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDisks = new java.util.ArrayList(vmTemplate.getDiskTemplateMap().values()); templateDisksMap.put(vmTemplate, templateDisks); } } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException ex) { auditLogOvfLoadError(ex.getName(), ex.getMessage()); } } return templateDisksMap; }
private boolean validateMemoryTakenInSupportedVersion() { org.ovirt.engine.core.common.businessentities.VM vmFromSnapshot = null; try { vmFromSnapshot = ovfHelper.readVmFromOvf(getDstSnapshot().getVmConfiguration()).getFirst(); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.error("Failed to parse a given ovf configuration: {}", e.getMessage()); return false; } org.ovirt.engine.core.compat.Version originalClusterVersion = vmFromSnapshot.getClusterCompatibilityVersionOrigin(); if (org.ovirt.engine.core.compat.Version.getLowest().greater(originalClusterVersion)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_MEMORY_TOO_OLD, java.lang.String.format("$Cv %s", (originalClusterVersion != null ? originalClusterVersion : "N/A"))); } return true; }	private boolean validateMemoryTakenInSupportedVersion() { org.ovirt.engine.core.common.businessentities.VM vmFromSnapshot = null; try { vmFromSnapshot = ovfHelper.readVmFromOvf(getDstSnapshot().getVmConfiguration()).getVm(); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.error("Failed to parse a given ovf configuration: {}", e.getMessage()); return false; } org.ovirt.engine.core.compat.Version originalClusterVersion = vmFromSnapshot.getClusterCompatibilityVersionOrigin(); if (org.ovirt.engine.core.compat.Version.getLowest().greater(originalClusterVersion)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_MEMORY_TOO_OLD, java.lang.String.format("$Cv %s", (originalClusterVersion != null ? originalClusterVersion : "N/A"))); } return true; }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VM> buildFromOVFs(java.util.List<java.lang.String> ovfList) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<>(); for (java.lang.String ovf : ovfList) { try { if (!(ovfHelper.isOvfTemplate(ovf))) { vms.add(ovfHelper.readVmFromOvf(ovf).getFirst()); } } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException ex) { auditLogOvfLoadError(ex.getName(), ex.getMessage()); } } return vms; }	@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VM> buildFromOVFs(java.util.List<java.lang.String> ovfList) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<>(); for (java.lang.String ovf : ovfList) { try { if (!(ovfHelper.isOvfTemplate(ovf))) { vms.add(ovfHelper.readVmFromOvf(ovf).getVm()); } } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException ex) { auditLogOvfLoadError(ex.getName(), ex.getMessage()); } } return vms; }
private void removeDiskImages() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getVm().getDiskMap().values(), org.ovirt.engine.core.bll.exportimport.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.exportimport.ONLY_ACTIVE); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images) { image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); image.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); } java.util.Set<java.lang.String> allMemoryVolumes = org.ovirt.engine.core.bll.memory.MemoryUtils.getMemoryVolumesFromSnapshots(getVm().getSnapshots()); for (java.lang.String memoryVolumes : allMemoryVolumes) { if (!(org.apache.commons.lang.StringUtils.isEmpty(memoryVolumes))) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(memoryVolumes); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = createMemoryDisk(guids.get(2), guids.get(3)); images.add(memoryDisk); org.ovirt.engine.core.common.businessentities.storage.DiskImage metadataDisk = createMemoryDisk(guids.get(4), guids.get(5)); images.add(metadataDisk); } } removeVmImages(images); }	private void removeDiskImages() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getVm().getDiskMap().values(), org.ovirt.engine.core.bll.exportimport.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.exportimport.ONLY_ACTIVE); boolean shouldWipe = false; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images) { image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); image.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); shouldWipe |= image.isWipeAfterDelete(); } java.util.Set<java.lang.String> allMemoryVolumes = org.ovirt.engine.core.bll.memory.MemoryUtils.getMemoryVolumesFromSnapshots(getVm().getSnapshots()); for (java.lang.String memoryVolumes : allMemoryVolumes) { if (!(org.apache.commons.lang.StringUtils.isEmpty(memoryVolumes))) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(memoryVolumes); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = createMemoryDisk(guids.get(2), guids.get(3), shouldWipe); images.add(memoryDisk); org.ovirt.engine.core.common.businessentities.storage.DiskImage metadataDisk = createMemoryDisk(guids.get(4), guids.get(5), shouldWipe); images.add(metadataDisk); } } removeVmImages(images); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid imageId) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); disk.setId(diskId); disk.setImageId(imageId); disk.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); disk.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); disk.setWipeAfterDelete(false); disk.setActive(true); return disk; }	private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid imageId, boolean shouldWipe) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); disk.setId(diskId); disk.setImageId(imageId); disk.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); disk.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); disk.setWipeAfterDelete(shouldWipe); disk.setActive(true); return disk; }
public void setRoleMap(java.util.Map<java.lang.String, java.lang.Object> roleMap);	void setRoleMap(java.util.Map<java.lang.String, java.lang.Object> roleMap);
public java.util.Map<java.lang.String, java.lang.Object> getAffinityGroupMap();	java.util.Map<java.lang.String, java.lang.String> getAffinityGroupMap();
public java.util.Map<java.lang.String, java.lang.Object> getRoleMap();	java.util.Map<java.lang.String, java.lang.Object> getRoleMap();
public java.util.Map<java.lang.String, java.lang.Object> getAffinityLabelMap();	java.util.Map<java.lang.String, java.lang.String> getAffinityLabelMap();
@java.lang.Override public javax.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); java.util.Map<java.lang.String, java.util.Map> registrationMap = getRegistrationMappings(action); params.setClusterMap(registrationMap.get(ExternalRegistrationConfigurationMapper.CLUSTER_KEY)); params.setDomainMap(registrationMap.get(ExternalRegistrationConfigurationMapper.DOMAIN_KEY)); params.setRoleMap(registrationMap.get(ExternalRegistrationConfigurationMapper.ROLE_KEY)); params.setContainerId(guid); params.setStorageDomainId(parent.getStorageDomainId()); params.setClusterId(getClusterId(action)); params.setImagesExistOnTargetStorageDomain(true); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmTemplateFromConfiguration, params, action); }	@java.lang.Override public javax.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); org.ovirt.engine.api.restapi.types.ExternalRegistrationConfigurationMapper.mapFromModel(action.getRegistrationConfiguration(), params); params.setContainerId(guid); params.setStorageDomainId(parent.getStorageDomainId()); params.setClusterId(getClusterId(action)); params.setImagesExistOnTargetStorageDomain(true); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmTemplateFromConfiguration, params, action); }
public void setAffinityLabelMap(java.util.Map<java.lang.String, java.lang.Object> affinityLabelMap);	void setAffinityLabelMap(java.util.Map<java.lang.String, java.lang.String> affinityLabelMap);
@java.lang.Override public java.util.Map<java.lang.String, java.lang.Object> getDomainMap() { return domainMap; }	@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getDomainMap() { return domainMap; }
@java.lang.Override public void setAffinityGroupMap(java.util.Map<java.lang.String, java.lang.Object> affinityGroupMap) { }	@java.lang.Override public void setAffinityGroupMap(java.util.Map<java.lang.String, java.lang.String> affinityGroupMap) { }
public void setDomainMap(java.util.Map<java.lang.String, java.lang.Object> domainMap);	void setDomainMap(java.util.Map<java.lang.String, java.lang.String> domainMap);
@java.lang.Override public void setClusterMap(java.util.Map<java.lang.String, java.lang.Object> clusterMap) { this.clusterMap = clusterMap; }	@java.lang.Override public void setClusterMap(java.util.Map<java.lang.String, java.lang.String> clusterMap) { this.clusterMap = clusterMap; }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.Object> getAffinityLabelMap() { return null; }	@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getAffinityLabelMap() { return null; }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.Object> getClusterMap() { return clusterMap; }	@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getClusterMap() { return clusterMap; }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.Object> getAffinityGroupMap() { return null; }	@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getAffinityGroupMap() { return null; }
@java.lang.Override public void setDomainMap(java.util.Map<java.lang.String, java.lang.Object> domainMap) { this.domainMap = domainMap; }	@java.lang.Override public void setDomainMap(java.util.Map<java.lang.String, java.lang.String> domainMap) { this.domainMap = domainMap; }
@java.lang.Override public void setAffinityLabelMap(java.util.Map<java.lang.String, java.lang.Object> affinityLabelMap) { }	@java.lang.Override public void setAffinityLabelMap(java.util.Map<java.lang.String, java.lang.String> affinityLabelMap) { }
public java.util.Map<java.lang.String, java.lang.Object> getDomainMap();	java.util.Map<java.lang.String, java.lang.String> getDomainMap();
public void setAffinityGroupMap(java.util.Map<java.lang.String, java.lang.Object> affinityGroupMap);	void setAffinityGroupMap(java.util.Map<java.lang.String, java.lang.String> affinityGroupMap);
public java.util.Map<java.lang.String, java.lang.Object> getExternalLunMap();	java.util.Map<java.lang.String, java.lang.Object> getExternalLunMap();
public void setClusterMap(java.util.Map<java.lang.String, java.lang.Object> clusterMap);	void setClusterMap(java.util.Map<java.lang.String, java.lang.String> clusterMap);
public void setExternalLunMap(java.util.Map<java.lang.String, java.lang.Object> externalLunMap);	void setExternalLunMap(java.util.Map<java.lang.String, java.lang.Object> externalLunMap);
public java.util.Map<java.lang.String, java.lang.Object> getClusterMap();	java.util.Map<java.lang.String, java.lang.String> getClusterMap();
private void mapCluster(java.lang.String clusterName) { if ((org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterMap()) != null) { java.lang.String clusterDest = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterMap().get(clusterName); org.ovirt.engine.core.common.businessentities.Cluster cluster; if (clusterDest != null) { cluster = clusterDao.getByName(clusterDest); } else { cluster = clusterDao.getByName(clusterName); } org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setClusterId(cluster.getId()); } }	private void mapCluster(java.lang.String clusterName) { if ((org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterMap()) != null) { java.lang.String clusterDest = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterMap().get(clusterName); org.ovirt.engine.core.common.businessentities.Cluster cluster = clusterDao.getByName(clusterDest); if (cluster == null) { cluster = clusterDao.getByName(clusterName); } if (cluster != null) { org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setClusterId(cluster.getId()); } } }
private java.lang.String generateMetaDataFile(java.util.List<org.ovirt.engine.core.compat.Guid> vmAndTemplatesIds) { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); addStorageDomainStatus(data); addVmsStatus(vmAndTemplatesIds, data); return buildJson(data, true); }	private java.lang.String generateMetaDataFile(java.util.List<org.ovirt.engine.core.compat.Guid> vmAndTemplatesIds) { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); addVmsStatus(vmAndTemplatesIds, data); return buildJson(data, true); }
@java.lang.Override public javax.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); validateVnicMappings(action); validateClusterMappings(action); validateRoleMappings(action); validateDomainMappings(action); validateAffinityGroupMappings(action); validateAffinityLabelMappings(action); validateLunMappings(action); org.ovirt.engine.core.common.action.ImportVmFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmFromConfParameters(getVnicProfileMappings(action), getReassignBadMacs(action)); org.ovirt.engine.api.restapi.types.ExternalRegistrationConfigurationMapper.mapFromModel(action.getRegistrationConfiguration(), params); params.setContainerId(guid); params.setStorageDomainId(parent.getStorageDomainId()); params.setClusterId(getClusterId(action)); params.setImagesExistOnTargetStorageDomain(true); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmFromConfiguration, params, action); }	@java.lang.Override public javax.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); if (action.isSetRegistrationConfiguration()) { validateVnicMappings(action); validateClusterMappings(action); validateRoleMappings(action); validateDomainMappings(action); validateAffinityGroupMappings(action); validateAffinityLabelMappings(action); validateLunMappings(action); } org.ovirt.engine.core.common.action.ImportVmFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmFromConfParameters(getVnicProfileMappings(action), getReassignBadMacs(action)); org.ovirt.engine.api.restapi.types.ExternalRegistrationConfigurationMapper.mapFromModel(action.getRegistrationConfiguration(), params); params.setContainerId(guid); params.setStorageDomainId(parent.getStorageDomainId()); params.setClusterId(getClusterId(action)); params.setImagesExistOnTargetStorageDomain(true); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmFromConfiguration, params, action); }
private void validateRoleMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetRoleMappings())) && (action.getRegistrationConfiguration().getRoleMappings().isSetRegistrationRoleMappings())) { action.getRegistrationConfiguration().getRoleMappings().getRegistrationRoleMappings().forEach(this::validateRoleMapping); } }	private void validateRoleMappings(org.ovirt.engine.api.model.Action action) { if ((action.getRegistrationConfiguration().isSetRoleMappings()) && (action.getRegistrationConfiguration().getRoleMappings().isSetRegistrationRoleMappings())) { action.getRegistrationConfiguration().getRoleMappings().getRegistrationRoleMappings().forEach(this::validateRoleMapping); } }
private void validateRoleMapping(org.ovirt.engine.api.model.RegistrationRoleMapping mapping) { if (!(mapping.isSetFrom())) { badRequest("Role name is missing from source."); } if (!(mapping.isSetTo())) { badRequest("Role name is missing from destination."); } }	private void validateRoleMapping(org.ovirt.engine.api.model.RegistrationRoleMapping mapping) { if (!(mapping.isSetFrom())) { badRequest("Role name is missing from source."); } if (!(mapping.isSetTo())) { badRequest("Role is missing from destination."); } }
private void validateDomainMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetDomainMappings())) && (action.getRegistrationConfiguration().getDomainMappings().isSetRegistrationDomainMappings())) { action.getRegistrationConfiguration().getDomainMappings().getRegistrationDomainMappings().forEach(this::validateDomainMapping); } }	private void validateDomainMappings(org.ovirt.engine.api.model.Action action) { if ((action.getRegistrationConfiguration().isSetDomainMappings()) && (action.getRegistrationConfiguration().getDomainMappings().isSetRegistrationDomainMappings())) { action.getRegistrationConfiguration().getDomainMappings().getRegistrationDomainMappings().forEach(this::validateDomainMapping); } }
private void validateAffinityGroupMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetAffinityGroupMappings())) && (action.getRegistrationConfiguration().getAffinityGroupMappings().isSetRegistrationAffinityGroupMappings())) { action.getRegistrationConfiguration().getAffinityGroupMappings().getRegistrationAffinityGroupMappings().forEach(this::validateAffinityGroupMapping); } }	private void validateAffinityGroupMappings(org.ovirt.engine.api.model.Action action) { if ((action.getRegistrationConfiguration().isSetAffinityGroupMappings()) && (action.getRegistrationConfiguration().getAffinityGroupMappings().isSetRegistrationAffinityGroupMappings())) { action.getRegistrationConfiguration().getAffinityGroupMappings().getRegistrationAffinityGroupMappings().forEach(this::validateAffinityGroupMapping); } }
private void validateLunMapping(org.ovirt.engine.api.model.RegistrationLunMapping mapping) { if (!(mapping.isSetFrom())) { badRequest("Lun name is missing from source."); } if (!(mapping.isSetTo())) { badRequest("Lun name is missing from destination."); } }	private void validateLunMapping(org.ovirt.engine.api.model.RegistrationLunMapping mapping) { if (!(mapping.isSetFrom())) { badRequest("Lun id is missing from source."); } if (!(mapping.isSetTo())) { badRequest("Lun is missing from destination."); } }
private void validateAffinityLabelMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetAffinityLabelMappings())) && (action.getRegistrationConfiguration().getAffinityLabelMappings().isSetRegistrationAffinityLabelMappings())) { action.getRegistrationConfiguration().getAffinityLabelMappings().getRegistrationAffinityLabelMappings().forEach(this::validateAffinityLabelMapping); } }	private void validateAffinityLabelMappings(org.ovirt.engine.api.model.Action action) { if ((action.getRegistrationConfiguration().isSetAffinityLabelMappings()) && (action.getRegistrationConfiguration().getAffinityLabelMappings().isSetRegistrationAffinityLabelMappings())) { action.getRegistrationConfiguration().getAffinityLabelMappings().getRegistrationAffinityLabelMappings().forEach(this::validateAffinityLabelMapping); } }
private void validateClusterMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetClusterMappings())) && (action.getRegistrationConfiguration().getClusterMappings().isSetRegistrationClusterMappings())) { action.getRegistrationConfiguration().getClusterMappings().getRegistrationClusterMappings().forEach(this::validateClusterMapping); } }	private void validateClusterMappings(org.ovirt.engine.api.model.Action action) { if ((action.getRegistrationConfiguration().isSetClusterMappings()) && (action.getRegistrationConfiguration().getClusterMappings().isSetRegistrationClusterMappings())) { action.getRegistrationConfiguration().getClusterMappings().getRegistrationClusterMappings().forEach(this::validateClusterMapping); } }
private void validateLunMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetLunMappings())) && (action.getRegistrationConfiguration().getLunMappings().isSetRegistrationLunMappings())) { action.getRegistrationConfiguration().getLunMappings().getRegistrationLunMappings().forEach(this::validateLunMapping); } }	private void validateLunMappings(org.ovirt.engine.api.model.Action action) { if ((action.getRegistrationConfiguration().isSetLunMappings()) && (action.getRegistrationConfiguration().getLunMappings().isSetRegistrationLunMappings())) { action.getRegistrationConfiguration().getLunMappings().getRegistrationLunMappings().forEach(this::validateLunMapping); } }
private void writeCpuTune() { writer.writeStartElement("cputune"); @java.lang.SuppressWarnings("unchecked") java.util.Map<java.lang.String, java.lang.Object> cpuPinning = ((java.util.Map<java.lang.String, java.lang.Object>) (createInfo.get(VdsProperties.cpuPinning))); if (cpuPinning != null) { cpuPinning.forEach(( vcpu, cpuset) -> { writer.writeStartElement("vcpupin"); writer.writeAttributeString("vcpu", vcpu); writer.writeAttributeString("cpuset", ((java.lang.String) (cpuset))); writer.writeEndElement(); }); } if ((vm.getCpuShares()) > 0) { writer.writeElement("shares", java.lang.String.valueOf(vm.getCpuShares())); } java.lang.String ioCpus = ((java.lang.String) (createInfo.get(VdsProperties.ioThreadsPinnning))); if (ioCpus != null) { for (int i = 0; i < (vm.getNumOfIoThreads()); i++) { writer.writeStartElement("iothreadpin"); writer.writeAttributeString("iothread", java.lang.String.valueOf((i + 1))); writer.writeAttributeString("cpuset", ioCpus); writer.writeEndElement(); } } java.lang.String emulatorCpus = ((java.lang.String) (createInfo.get(VdsProperties.emulatorThreadsPinnning))); if (emulatorCpus != null) { writer.writeStartElement("emulatorpin"); writer.writeAttributeString("cpuset", emulatorCpus); writer.writeEndElement(); } writer.writeEndElement(); }	private void writeCpuTune() { writer.writeStartElement("cputune"); @java.lang.SuppressWarnings("unchecked") java.util.Map<java.lang.String, java.lang.Object> cpuPinning = ((java.util.Map<java.lang.String, java.lang.Object>) (createInfo.get(VdsProperties.cpuPinning))); if (cpuPinning != null) { cpuPinning.forEach(( vcpu, cpuset) -> { writer.writeStartElement("vcpupin"); writer.writeAttributeString("vcpu", vcpu); writer.writeAttributeString("cpuset", ((java.lang.String) (cpuset))); writer.writeEndElement(); }); } if ((vm.getCpuShares()) > 0) { writer.writeElement("shares", java.lang.String.valueOf(vm.getCpuShares())); } java.lang.String ioEmulatorCpus = vmInfoBuildUtils.getIoThreadsAndEmulatorPinningCpus(vm, hostNumaNodesSupplier, vdsCpuThreads); if (ioEmulatorCpus != null) { for (int i = 0; i < (vm.getNumOfIoThreads()); i++) { writer.writeStartElement("iothreadpin"); writer.writeAttributeString("iothread", java.lang.String.valueOf((i + 1))); writer.writeAttributeString("cpuset", ioEmulatorCpus); writer.writeEndElement(); } writer.writeStartElement("emulatorpin"); writer.writeAttributeString("cpuset", ioEmulatorCpus); writer.writeEndElement(); } writer.writeEndElement(); }
@java.lang.Override public void search() { if ((getEntity()) != null) { boolean getRunningVms = (viewFilterType.equals(HostVmFilter.all)) || (viewFilterType.equals(HostVmFilter.runningOnHost)); boolean getPinnedVms = (viewFilterType.equals(HostVmFilter.all)) || (viewFilterType.equals(HostVmFilter.pinnedToHost)); new org.ovirt.engine.ui.uicommonweb.models.hosts.HostVmListModel.SearchQuery(getRunningVms, getPinnedVms, new org.ovirt.engine.ui.uicommonweb.models.hosts.SetRawItemsAsyncQuery()).execute(); } else { setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>()); } startGridTimer(); }	@java.lang.Override public void search() { if ((getEntity()) != null) { viewFilterType.executeQuery(getEntity().getId(), new org.ovirt.engine.ui.uicommonweb.models.hosts.SetRawItemsAsyncQuery()); } else { setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>()); } startGridTimer(); }
private void cancel() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())); setWindow(null); java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = currentProxies.getItemsAsList(); currentModels.remove(this); currentProxies.setItems(java.util.Collections.emptyList()); currentProxies.setItems(currentModels); }	private void cancel() { setWindow(null); java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = currentProxies.getItemsAsList(); currentModels.remove(this); currentProxies.setItems(java.util.Collections.emptyList()); currentProxies.setItems(currentModels); }
public static org.ovirt.engine.core.common.businessentities.storage.DiskContentType forStorageValue(int value) { return org.ovirt.engine.core.common.businessentities.storage.DiskContentType.storageMappings.get(value); }	public static org.ovirt.engine.core.common.businessentities.storage.DiskContentType forStorageValue(java.lang.String value) { return org.ovirt.engine.core.common.businessentities.storage.DiskContentType.storageMappings.get(value); }
@org.junit.Test public void testStorageNameLength() { for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType d : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { if (d != (DiskContentType.LEGACY)) { assertEquals(4, d.getStorageValue().length()); } } }	@org.junit.Test public void testStorageNameLength() { for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType d : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { assertEquals(4, d.getStorageValue().length()); } }
private com.google.gwt.user.client.ui.Widget getRadioGroupPanel() { buttonToType = new java.util.LinkedHashMap(); org.gwtbootstrap3.client.ui.RadioButton allButton = new org.gwtbootstrap3.client.ui.RadioButton(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.BUTTON_GROUP_NAME); buttonToType.put(allButton, null); allButton.setText(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.constants.allDisksLabel()); for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { if (contentType != (org.ovirt.engine.core.common.businessentities.storage.DiskContentType.LEGACY)) { org.gwtbootstrap3.client.ui.RadioButton button = new org.gwtbootstrap3.client.ui.RadioButton(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.BUTTON_GROUP_NAME); buttonToType.put(button, contentType); } } org.gwtbootstrap3.client.ui.ButtonGroup buttonGroup = new org.gwtbootstrap3.client.ui.ButtonGroup(); buttonGroup.setDataToggle(Toggle.BUTTONS); buttonToType.entrySet().forEach(( e) -> { buttonGroup.add(e.getKey()); e.getKey().addClickHandler(( event) -> fireChangeHandlers(e.getValue())); }); setDiskContentType(null); localize(); buttonGroup.addStyleName("disk-type-buttons-group"); return buttonGroup; }	private com.google.gwt.user.client.ui.Widget getRadioGroupPanel() { buttonToType = new java.util.LinkedHashMap(); org.gwtbootstrap3.client.ui.RadioButton allButton = new org.gwtbootstrap3.client.ui.RadioButton(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.BUTTON_GROUP_NAME); buttonToType.put(allButton, null); allButton.setText(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.constants.allDisksLabel()); for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { org.gwtbootstrap3.client.ui.RadioButton button = new org.gwtbootstrap3.client.ui.RadioButton(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.BUTTON_GROUP_NAME); buttonToType.put(button, contentType); } org.gwtbootstrap3.client.ui.ButtonGroup buttonGroup = new org.gwtbootstrap3.client.ui.ButtonGroup(); buttonGroup.setDataToggle(Toggle.BUTTONS); buttonToType.entrySet().forEach(( e) -> { buttonGroup.add(e.getKey()); e.getKey().addClickHandler(( event) -> fireChangeHandlers(e.getValue())); }); setDiskContentType(null); localize(); buttonGroup.addStyleName("disk-type-buttons-group"); return buttonGroup; }
private void addVmsStatus(java.util.List<org.ovirt.engine.core.compat.Guid> vmAndTemplatesIds, java.util.Map<java.lang.String, java.lang.Object> data) { java.util.Map<java.lang.String, java.lang.Object> vmsStatus = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid vmId : vmAndTemplatesIds) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vmDynamicDao.get(vmId); if ((vmDynamic != null) && ((vmDynamic.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { vmsStatus.put(vmId.toString(), vmDynamic.getStatus().getValue()); log.debug("OVF_STORE - Add vm id '{}' with status: '{}'", vmId, vmDynamic.getStatus()); } else { log.debug("OVF_STORE - Skip entity id '{}' with status: '{}'", vmId, vmDynamic.getStatus()); } } data.put(OvfInfoFileConstants.VmStatus, vmsStatus); }	private void addVmsStatus(java.util.List<org.ovirt.engine.core.compat.Guid> vmAndTemplatesIds, java.util.Map<java.lang.String, java.lang.Object> data) { java.util.Map<java.lang.String, java.lang.Object> vmsStatus = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid vmId : vmAndTemplatesIds) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vmDynamicDao.get(vmId); if ((vmDynamic != null) && ((vmDynamic.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { vmsStatus.put(vmId.toString(), vmDynamic.getStatus().getValue()); log.debug("OVF_STORE - Add vm id '{}' with status: '{}'", vmId, vmDynamic.getStatus()); } else { log.debug("OVF_STORE - Skip entity id '{}' with status: '{}'", vmId, (vmDynamic != null ? vmDynamic.getStatus() : "N/A")); } } data.put(OvfInfoFileConstants.VmStatus, vmsStatus); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.VM); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { org.ovirt.engine.core.common.businessentities.VM vm = ovfHelper.readVmFromOvf(ovf.getOvfData()).getVm(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageOvfExtraData = storageOvfExtraDataDao.get(org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getParameters().getId(), vm.getId()); if (!(storageOvfExtraData.isEmpty())) { vm.setStatus(org.ovirt.engine.core.common.businessentities.VMStatus.valueOf(storageOvfExtraData.get(0).getEntityValue())); } vm.setClusterCompatibilityVersion(ovf.getLowestCompVersion()); vm.setClusterArch(ovf.getArchitecture()); vmList.add(vm); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("failed to parse a given ovf configuration: \n" + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setReturnValue(vmList); }	@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.VM); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { org.ovirt.engine.core.common.businessentities.VM vm = ovfHelper.readVmFromOvf(ovf.getOvfData()).getVm(); vm.setClusterCompatibilityVersion(ovf.getLowestCompVersion()); vm.setClusterArch(ovf.getArchitecture()); vm.setStatus(ovf.getStatus()); vmList.add(vm); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("failed to parse a given ovf configuration: \n" + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setReturnValue(vmList); }
private static void initStorageOvfExtraData(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageExtraData, java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> fileEntry) { java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap = new java.util.HashMap<>(); org.ovirt.engine.core.utils.OvfUtils.log.info("Start to analyze metadata File '{}'.", fileEntry.getKey()); java.lang.String storageMetaData = new java.lang.String(fileEntry.getValue().array()); try { diskDescriptionMap = org.ovirt.engine.core.utils.JsonHelper.jsonToMap(storageMetaData); } catch (java.io.IOException e) { org.ovirt.engine.core.utils.OvfUtils.log.error("Failed to convert storage ovf extra data from json to map: '{}'.", storageMetaData); e.printStackTrace(); return; } org.ovirt.engine.core.utils.OvfUtils.fetchStorageStatus(storageDomainId, storageExtraData, diskDescriptionMap); org.ovirt.engine.core.utils.OvfUtils.fetchVmsStatus(storageDomainId, storageExtraData, diskDescriptionMap); org.ovirt.engine.core.utils.OvfUtils.log.info("Finish to analyze metadata File '{}'.", fileEntry.getKey()); }	private void analyzeOvfMetaDataFile(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> ovfEntityDataFromTar, java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> metaDataFileEntry) { if (metaDataFileEntry != null) { org.ovirt.engine.core.utils.OvfUtils.log.info("Start to analyze metadata file '{}'.", metaDataFileEntry.getKey()); initStorageOvfExtraData(storageDomainId, ovfEntityDataFromTar, metaDataFileEntry.getValue()); org.ovirt.engine.core.utils.OvfUtils.log.info("Finish to analyze metadata File '{}'.", metaDataFileEntry.getKey()); } else { org.ovirt.engine.core.utils.OvfUtils.log.debug("No metadata file found in tar file"); } }
private void registerOvfStoreDisks() { for (final org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getStorages()) { if (storageDomainStaticDao.get(storageDomainId).getStorageDomainType().isDataDomain()) { org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.resetOvfStoreAndUnregisteredDisks(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> ovfStoreDiskImages = getAllOVFDisks(storageDomainId, getStoragePool().getId()); registerAllOvfDisks(ovfStoreDiskImages, storageDomainId); List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entitiesFromStorageOvfDisk = getEntitiesFromStorageOvfDisk(storageDomainId, getStoragePool().getId()); for (java.lang.Object ovf : entitiesFromStorageOvfDisk) { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntityData = ((org.ovirt.engine.core.common.businessentities.OvfEntityData) (ovf)); unregisteredOVFDataDao.removeEntity(ovfEntityData.getEntityId(), storageDomainId); unregisteredOVFDataDao.saveOVFData(ovfEntityData); org.ovirt.engine.core.bll.storage.pool.log.info("Adding OVF data of entity id '{}' and entity name '{}'", ovfEntityData.getEntityId(), ovfEntityData.getEntityName()); } initUnregisteredDisksToDB(storageDomainId); initStorageOvfExtraDataToDB(storageDomainId); return null; }); } } }	private void registerOvfStoreDisks() { for (final org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getStorages()) { if (storageDomainStaticDao.get(storageDomainId).getStorageDomainType().isDataDomain()) { org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.resetOvfStoreAndUnregisteredDisks(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> ovfStoreDiskImages = getAllOVFDisks(storageDomainId, getStoragePool().getId()); registerAllOvfDisks(ovfStoreDiskImages, storageDomainId); List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entitiesFromStorageOvfDisk = getEntitiesFromStorageOvfDisk(storageDomainId, getStoragePool().getId()); for (java.lang.Object ovf : entitiesFromStorageOvfDisk) { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntityData = ((org.ovirt.engine.core.common.businessentities.OvfEntityData) (ovf)); unregisteredOVFDataDao.removeEntity(ovfEntityData.getEntityId(), storageDomainId); unregisteredOVFDataDao.saveOVFData(ovfEntityData); org.ovirt.engine.core.bll.storage.pool.log.info("Adding OVF data of entity id '{}' and entity name '{}'", ovfEntityData.getEntityId(), ovfEntityData.getEntityName()); } initUnregisteredDisksToDB(storageDomainId); return null; }); } } }
private void removeEntitiesFromStorageDomain(final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsForStorageDomain, final java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> vmTemplatesForStorageDomain, final java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksForStorageDomain, final org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { if (((!(vmsForStorageDomain.isEmpty())) || (!(vmTemplatesForStorageDomain.isEmpty()))) || (!(disksForStorageDomain.isEmpty()))) { for (org.ovirt.engine.core.common.businessentities.VM vm : vmsForStorageDomain) { removeEntityLeftOver(vm.getId(), vm.getName(), storageDomainId); unregisteredOVFDataDao.saveOVFData(new org.ovirt.engine.core.common.businessentities.OvfEntityData(vm.getId(), vm.getName(), VmEntityType.VM, vm.getClusterArch(), vm.getCompatibilityVersion(), storageDomainId, null, null)); } for (org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate : vmTemplatesForStorageDomain) { removeEntityLeftOver(vmTemplate.getId(), vmTemplate.getName(), storageDomainId); unregisteredOVFDataDao.saveOVFData(new org.ovirt.engine.core.common.businessentities.OvfEntityData(vmTemplate.getId(), vmTemplate.getName(), VmEntityType.TEMPLATE, vmTemplate.getClusterArch(), clusterDao.get(vmTemplate.getClusterId()).getCompatibilityVersion(), storageDomainId, null, null)); } storageDomainDao.removeEntitesFromStorageDomain(storageDomainId); } storageOvfExtraDataDao.remove(storageDomainId, null); return null; }); }	private void removeEntitiesFromStorageDomain(final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsForStorageDomain, final java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> vmTemplatesForStorageDomain, final java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksForStorageDomain, final org.ovirt.engine.core.compat.Guid storageDomainId) { if (((!(vmsForStorageDomain.isEmpty())) || (!(vmTemplatesForStorageDomain.isEmpty()))) || (!(disksForStorageDomain.isEmpty()))) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { for (org.ovirt.engine.core.common.businessentities.VM vm : vmsForStorageDomain) { removeEntityLeftOver(vm.getId(), vm.getName(), storageDomainId); unregisteredOVFDataDao.saveOVFData(new org.ovirt.engine.core.common.businessentities.OvfEntityData(vm.getId(), vm.getName(), VmEntityType.VM, vm.getClusterArch(), vm.getCompatibilityVersion(), storageDomainId, null, null)); } for (org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate : vmTemplatesForStorageDomain) { removeEntityLeftOver(vmTemplate.getId(), vmTemplate.getName(), storageDomainId); unregisteredOVFDataDao.saveOVFData(new org.ovirt.engine.core.common.businessentities.OvfEntityData(vmTemplate.getId(), vmTemplate.getName(), VmEntityType.TEMPLATE, vmTemplate.getClusterArch(), clusterDao.get(vmTemplate.getClusterId()).getCompatibilityVersion(), storageDomainId, null, null)); } storageDomainDao.removeEntitesFromStorageDomain(storageDomainId); return null; }); } }
protected void resetOvfStoreAndUnregisteredDisks() { ovfDisks = null; unregisteredDisks = new java.util.ArrayList(); storageOvfExtraData = new java.util.ArrayList(); }	protected void resetOvfStoreAndUnregisteredDisks() { ovfDisks = null; unregisteredDisks = new java.util.ArrayList(); }
private static void fetchStorageStatus(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageExtraData, java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap) { org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus storageStatus = ((org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus) (diskDescriptionMap.get(OvfInfoFileConstants.DomainStatus))); org.ovirt.engine.core.utils.OvfUtils.log.debug("Storage domain status '{}' fetched from metadata json file for storage id '{}'.", storageStatus, storageDomainId); if (storageStatus != null) { storageExtraData.add(new org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData(storageDomainId, org.ovirt.engine.core.common.VdcObjectType.Storage, storageDomainId, storageStatus.name())); } }	private void initStorageOvfExtraData(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> ovfEntityDataFromTar, java.nio.ByteBuffer metaDataBuffer) { java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap; java.lang.String storageMetaData = new java.lang.String(metaDataBuffer.array()); try { diskDescriptionMap = org.ovirt.engine.core.utils.JsonHelper.jsonToMap(storageMetaData); } catch (java.io.IOException e) { org.ovirt.engine.core.utils.OvfUtils.log.error("Failed to convert storage ovf extra data from json to map: '{}'.", storageMetaData); e.printStackTrace(); return; } setVmsStatus(storageDomainId, diskDescriptionMap, ovfEntityDataFromTar); }
private static void fetchVmsStatus(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageExtraData, java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap) { java.util.Map<java.lang.String, java.lang.String> vmsStatus = ((java.util.Map<java.lang.String, java.lang.String>) (diskDescriptionMap.get(OvfInfoFileConstants.VmStatus))); if (vmsStatus == null) { org.ovirt.engine.core.utils.OvfUtils.log.error("VMs status could not be fetched from metadata json file for storage id '{}'.", storageDomainId); } else { for (java.lang.String vmId : vmsStatus.keySet()) { org.ovirt.engine.core.utils.OvfUtils.log.debug("VM '{}' fetched from metadata json file with status '{}' for storage domain id '{}.", vmId, vmsStatus.get(vmId), storageDomainId); storageExtraData.add(new org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData(storageDomainId, org.ovirt.engine.core.common.VdcObjectType.VM, storageDomainId, vmsStatus.get(vmId))); } } }	private void setVmsStatus(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap, java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> ovfEntityDataFromTar) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VMStatus> vmsStatusesMap = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Object> vmsStatus = ((java.util.Map<java.lang.String, java.lang.Object>) (diskDescriptionMap.get(OvfInfoFileConstants.VmStatus))); if (vmsStatus == null) { org.ovirt.engine.core.utils.OvfUtils.log.error("VMs status could not be fetched from metadata json file for storage id '{}'.", storageDomainId); } else { for (java.util.Map.Entry<java.lang.String, java.lang.Object> entry : vmsStatus.entrySet()) { org.ovirt.engine.core.utils.OvfUtils.log.debug("VM '{}' fetched from metadata json file with status '{}' for storage domain id '{}.", entry.getKey(), entry.getValue(), storageDomainId); vmsStatusesMap.put(org.ovirt.engine.core.compat.Guid.createGuidFromString(entry.getKey()), org.ovirt.engine.core.common.businessentities.VMStatus.forValue(((java.lang.Integer) (entry.getValue())))); } } ovfEntityDataFromTar.forEach(( ovfEntity) -> ovfEntity.setStatus(vmsStatusesMap.get(ovfEntity.getEntityId()))); }
private void updateCurrentConfiguration(org.ovirt.engine.core.common.businessentities.UpdatedMemory updatedMemory) { final org.ovirt.engine.core.common.businessentities.VmStatic updatedVmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getStaticData()); updatedVmStatic.setMemSizeMb(updatedMemory.getMemoryMb()); updatedVmStatic.setMinAllocatedMem(updatedMemory.getMinMemoryMb()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmManager().update(updatedVmStatic); }	private void updateNextRunConfiguration(int memoryAfterHotUnplugMb, int minMemoryAfterHotUnplugMb) { final org.ovirt.engine.core.common.businessentities.VmStatic nextRunConfigurationStatic = getNextRunConfiguration(); if (nextRunConfigurationStatic == null) { return; } if ((org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMemSizeMb()) != (nextRunConfigurationStatic.getMemSizeMb())) { return; } nextRunConfigurationStatic.setMemSizeMb(memoryAfterHotUnplugMb); nextRunConfigurationStatic.setMinAllocatedMem(minMemoryAfterHotUnplugMb); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { vmHandler.createNextRunSnapshot(getVm(), nextRunConfigurationStatic, null, getCompensationContext()); return null; }); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.StoragePoolParametersBase parameters = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStoragePoolId()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.ProcessOvfUpdateForStoragePool, parameters, org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getContext()); java.util.HashSet<org.ovirt.engine.core.compat.Guid> proccessedDomains = actionReturnValue.getActionReturnValue(); if (!(proccessedDomains.isEmpty())) { runInternalActionWithTasksContext(ActionType.ProcessOvfUpdateForStorageDomain, createProcessOvfUpdateForDomainParams()); } org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid storageDomainId = org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStorageDomainId(); org.ovirt.engine.core.common.action.StoragePoolParametersBase parameters = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStoragePoolId()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.ProcessOvfUpdateForStoragePool, parameters, org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getContext()); java.util.Set<org.ovirt.engine.core.compat.Guid> proccessedDomains = actionReturnValue.getActionReturnValue(); if (((actionReturnValue.getSucceeded()) && (proccessedDomains != null)) && (proccessedDomains.contains(storageDomainId))) { runInternalActionWithTasksContext(ActionType.ProcessOvfUpdateForStorageDomain, createProcessOvfUpdateForDomainParams()); } else { log.info("OVFs update was ignored - nothing to update for storage domain '{}'", storageDomainId); } org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.setSucceeded(true); }
private void onReplaceConfirmation() { cancelConfirmation(); org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel replaceBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel) (getWindow())); if (replaceBrickModel == null) { return; } if (!(replaceBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getEntity(); if (volumeEntity == null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity existingBrick = getSelectedItem(); if (existingBrick == null) { return; } org.ovirt.engine.core.common.businessentities.VDS server = replaceBrickModel.getServers().getSelectedItem(); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity newBrick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); newBrick.setVolumeId(volumeEntity.getId()); newBrick.setServerId(server.getId()); newBrick.setServerName(server.getHostName()); newBrick.setBrickDirectory(replaceBrickModel.getBrickDirectory().getEntity()); replaceBrickModel.startProgress(); org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters parameter = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters(volumeEntity.getId(), existingBrick, newBrick); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.ReplaceGlusterVolumeBrick, parameter, ( result) -> { org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel) (result.getState())); localModel.stopProgress(); setWindow(null); }, replaceBrickModel); }	private void onReplaceConfirmation() { cancelConfirmation(); org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel replaceBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel) (getWindow())); org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getEntity(); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity existingBrick = getSelectedItem(); if (((replaceBrickModel == null) || (volumeEntity == null)) || (existingBrick == null)) { return; } if (!(replaceBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.VDS server = replaceBrickModel.getServers().getSelectedItem(); if (server == null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity newBrick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); newBrick.setVolumeId(volumeEntity.getId()); newBrick.setServerId(server.getId()); newBrick.setServerName(server.getHostName()); newBrick.setBrickDirectory(replaceBrickModel.getBrickDirectory().getEntity()); replaceBrickModel.startProgress(); org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters parameter = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters(volumeEntity.getId(), existingBrick, newBrick); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.ReplaceGlusterVolumeBrick, parameter, ( result) -> { org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel) (result.getState())); localModel.stopProgress(); setWindow(null); }, replaceBrickModel); }
private void invokeHostUpgrade(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters parameters) { stopGlusterServices(parameters.getVdsId()); commandCoordinatorUtil.executeAsyncCommand(ActionType.UpgradeHostInternal, createUpgradeParameters(parameters), command.cloneContextAndDetachFromParent()); }	private void invokeHostUpgrade(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters parameters) { commandCoordinatorUtil.executeAsyncCommand(ActionType.UpgradeHostInternal, createUpgradeParameters(parameters), command.cloneContextAndDetachFromParent()); }
private void synchronizeSelection() { if (isSingleSelectionOnly()) { setSelectedItem(selectionModel.asSingleSelectionModel().getSelectedObject()); } else { java.util.List<T> selectedItems = selectionModel.asMultiSelectionModel().getSelectedList(); setSelectedItems(selectedItems); if ((selectedItems.size()) == 1) { setSelectedItem(selectedItems.get(0)); } } }	private void synchronizeSelection() { if (isSingleSelectionOnly()) { setSelectedItem(selectionModel.asSingleSelectionModel().getSelectedObject()); } else { java.util.List<T> selectedItems = selectionModel.getSelectedObjects(); setSelectedItems(selectedItems); if ((selectedItems.size()) == 1) { setSelectedItem(selectedItems.get(0)); } } }
public void setSelectionModel(org.ovirt.engine.ui.uicommonweb.models.OvirtSelectionModel<T> selectionModel) { this.selectionModel = selectionModel; if (!(selectionModel.isSingleSelectionOnly())) { selectionModel.asMultiSelectionModel().setDataDisplay(this); selectionModel.asMultiSelectionModel().setMultiSelectEnabled(true); } }	private org.ovirt.engine.ui.uicommonweb.models.OvirtSelectionModel<T> getSelectionModel() { return getModel().getSelectionModel(); }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if ((event.getSource()) instanceof org.gwtbootstrap3.client.ui.ListGroupItem) { org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T> clickedItem = null; for (org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T> item : currentState) { if ((item.asListGroupItem()) == (event.getSource())) { clickedItem = item; break; } } if (clickedItem != null) { if ((!(event.isControlKeyDown())) && (!(event.isShiftKeyDown()))) { selectionModel.clear(); selectionModel.setSelected(clickedItem.getEntity(), true); } else if (event.isControlKeyDown()) { selectionModel.setSelected(clickedItem.getEntity(), (!(selectionModel.isSelected(clickedItem.getEntity())))); } } } }	@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if ((event.getSource()) instanceof org.gwtbootstrap3.client.ui.ListGroupItem) { org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T> clickedItem = null; for (org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T> item : currentState) { if ((item.asListGroupItem()) == (event.getSource())) { clickedItem = item; break; } } if (clickedItem != null) { if ((!(event.isControlKeyDown())) && (!(event.isShiftKeyDown()))) { getSelectionModel().clear(); getSelectionModel().setSelected(clickedItem.getEntity(), true); } else if (event.isControlKeyDown()) { getSelectionModel().setSelected(clickedItem.getEntity(), (!(getSelectionModel().isSelected(clickedItem.getEntity())))); } } } }
private void processSelectionChanged() { java.util.List<T> selectedItems = getSelectedItems(); selectedIndexes.clear(); model.getItems().forEach(( item) -> { if (selectedItems.contains(item)) { selectedIndexes.add(model.getItemsAsList().indexOf(item)); } }); updateInfoPanel(); }	private void processSelectionChanged() { java.util.List<T> selectedItems = getSelectionModel().getSelectedObjects(); selectedIndexes.clear(); model.getItems().forEach(( item) -> { if (selectedItems.contains(item)) { selectedIndexes.add(model.getItemsAsList().indexOf(item)); } }); updateInfoPanel(); }
public void setModel(M model) { this.model = model; getModel().getItemsChangedEvent().addListener(( ev, sender, args) -> { if ((selectionChangedHandler) != null) { selectionChangedHandler.removeHandler(); } getModel().getSelectionModel().clear(); List<org.ovirt.engine.ui.common.widget.listgroup.T> items = getModel().getItemsAsList(); selectedIndexes.forEach(( selectedIndex) -> { if ((selectedIndex > (-1)) && (selectedIndex < (items.size()))) { getModel().getSelectionModel().setSelected(items.get(selectedIndex), true); } }); updateInfoPanel(); selectionChangedHandler = selectionModel.addSelectionChangeHandler(( e) -> processSelectionChanged()); }); }	public void setModel(M model) { this.model = model; if ((selectionChangedHandler) != null) { selectionChangedHandler.removeHandler(); } selectionChangedHandler = getSelectionModel().addSelectionChangeHandler(( e) -> processSelectionChanged()); getSelectionModel().setDataDisplay(this.hasDataDelegate); getSelectionModel().setMultiSelectEnabled(true); getModel().getItemsChangedEvent().addListener(( ev, sender, args) -> { getSelectionModel().clear(); List<org.ovirt.engine.ui.common.widget.listgroup.T> items = getModel().getItemsAsList(); List<java.lang.Integer> itemsToSelect = selectedIndexes.stream().filter(( selectedIndex) -> (selectedIndex > (-1)) && (selectedIndex < (items.size()))).collect(java.util.stream.Collectors.toList()); itemsToSelect.forEach(( index) -> getSelectionModel().setSelected(items.get(index), true)); updateInfoPanel(); }); }
@java.lang.Override protected java.lang.String transform(java.util.ArrayList<java.lang.String> fileNameList, org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.ISO_PREFIX) + (super.transform(repoImage)); }	@java.lang.Override protected java.lang.String transform(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.ISO_PREFIX) + (super.transform(repoImage)); }
public static void getUnknownImageList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<java.lang.String>> aQuery, org.ovirt.engine.core.compat.Guid storagePoolId, boolean forceRefresh) { org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.getIrsImageList(aQuery, storagePoolId, forceRefresh, ImageFileType.All, new org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.RepoImageToImageFileNameAsyncConverter() { @java.lang.Override protected java.lang.String transform(java.util.ArrayList<java.lang.String> fileNameList, org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.ISO_PREFIX) + (super.transform(repoImage)); } @java.lang.Override protected boolean desiredImage(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.core.common.businessentities.storage.ImageFileType.Unknown) == (repoImage.getFileType()); } }); }	public static void getUnknownImageList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<java.lang.String>> aQuery, org.ovirt.engine.core.compat.Guid storagePoolId, boolean forceRefresh) { org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.getIrsImageList(aQuery, storagePoolId, forceRefresh, ImageFileType.All, new org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.RepoImageToImageFileNameAsyncConverter() { @java.lang.Override protected java.lang.String transform(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.ISO_PREFIX) + (super.transform(repoImage)); } @java.lang.Override protected boolean desiredImage(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.core.common.businessentities.storage.ImageFileType.Unknown) == (repoImage.getFileType()); } }); }
public void addMainContentView(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, int priority, boolean defaultPlace) { menuPresenterWidget.addMenuItem(priority, label, historyToken); dynamicUrlContentProxyFactory.create(historyToken, contentUrl); if (defaultPlace && ((placeManager) instanceof org.ovirt.engine.ui.webadmin.place.WebAdminPlaceManager)) { ((org.ovirt.engine.ui.webadmin.place.WebAdminPlaceManager) (placeManager)).setDefaultPlace(historyToken); } }	public void addMainContentView(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, int priority, boolean defaultPlace) { menuPresenterWidget.addMenuItem(priority, label, historyToken); dynamicUrlContentProxyFactory.create(historyToken, contentUrl); placeManager.setDefaultPlace(historyToken); }
@java.lang.Deprecated public void addMainTab(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { addMainContentView(label, historyToken, contentUrl, options.getPriority().intValue(), options.getIsDefaultPlace().booleanValue()); }	@java.lang.Deprecated public void addMainTab(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { addMainContentView(label, historyToken, contentUrl, options.getPriority().intValue(), options.getDefaultPlace().booleanValue()); }
@java.lang.Override public void onUserLoginChange(org.ovirt.engine.ui.common.auth.UserLoginChangeEvent event) { final com.gwtplatform.mvp.shared.proxy.PlaceRequest fragmentRequest = getPlaceFromFragment(); if (fragmentRequest != null) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> revealPlace(fragmentRequest)); } else { revealPlace(getDefaultMainSectionPlace()); } }	@java.lang.Override public void onUserLoginChange(org.ovirt.engine.ui.common.auth.UserLoginChangeEvent event) { revealCurrentPlace(); }
public java.lang.Boolean getIsDefaultPlace() { return getValueAsBoolean("isDefaultPlace", false); }	public java.lang.Boolean getDefaultPlace() { return getValueAsBoolean("defaultPlace", false); }
private boolean isColdReboot() { boolean coldReboot = ((org.ovirt.engine.core.bll.RebootVmCommand.getVm().isRunOnce()) && (!(org.ovirt.engine.core.bll.RebootVmCommand.getVm().isVolatileRun()))) || (org.ovirt.engine.core.bll.RebootVmCommand.getVm().isNextRunConfigurationExists()); log.info("VM '{}' is performing {} reboot; run once: '{}', running as volatile: '{}', has next run configuration: '{}'", (coldReboot ? "cold" : "warm"), org.ovirt.engine.core.bll.RebootVmCommand.getVm().isRunOnce(), org.ovirt.engine.core.bll.RebootVmCommand.getVm().isVolatileRun(), org.ovirt.engine.core.bll.RebootVmCommand.getVm().isNextRunConfigurationExists()); return coldReboot; }	private boolean isColdReboot() { boolean coldReboot = ((org.ovirt.engine.core.bll.RebootVmCommand.getVm().isRunOnce()) && (org.ovirt.engine.core.bll.RebootVmCommand.getVm().isVolatileRun())) || (org.ovirt.engine.core.bll.RebootVmCommand.getVm().isNextRunConfigurationExists()); log.info("VM '{}' is performing {} reboot; run once: '{}', running as volatile: '{}', has next run configuration: '{}'", org.ovirt.engine.core.bll.RebootVmCommand.getVm().getName(), (coldReboot ? "cold" : "warm"), org.ovirt.engine.core.bll.RebootVmCommand.getVm().isRunOnce(), org.ovirt.engine.core.bll.RebootVmCommand.getVm().isVolatileRun(), org.ovirt.engine.core.bll.RebootVmCommand.getVm().isNextRunConfigurationExists()); return coldReboot; }
private java.lang.Integer getQosBandwidth(org.ovirt.engine.core.compat.Guid clusterId) { final org.ovirt.engine.core.common.businessentities.network.HostNetworkQos migrationHostNetworkQos = dbFacade.getHostNetworkQosDao().getHostNetworkQosOfMigrationNetworkByClusterId(clusterId); if (migrationHostNetworkQos == null) { return null; } if ((migrationHostNetworkQos.getOutAverageRealtime()) != null) { return migrationHostNetworkQos.getOutAverageRealtime(); } return migrationHostNetworkQos.getOutAverageUpperlimit(); }	private java.lang.Integer getQosBandwidth(org.ovirt.engine.core.compat.Guid clusterId) { final org.ovirt.engine.core.common.businessentities.network.HostNetworkQos migrationHostNetworkQos = hostNetworkQosDao.getHostNetworkQosOfMigrationNetworkByClusterId(clusterId); if (migrationHostNetworkQos == null) { return null; } if ((migrationHostNetworkQos.getOutAverageRealtime()) != null) { return migrationHostNetworkQos.getOutAverageRealtime(); } return migrationHostNetworkQos.getOutAverageUpperlimit(); }
protected org.ovirt.engine.api.model.Disk addLinks(org.ovirt.engine.api.model.Disk model, java.lang.Class<? extends org.ovirt.engine.api.model.BaseResource> suggestedParent, java.lang.String... subCollectionMembersToExclude) { if ((model.isSetQuota()) && (model.getQuota().isSetId())) { org.ovirt.engine.core.common.businessentities.Quota quota = getEntity(org.ovirt.engine.core.common.businessentities.Quota.class, QueryType.GetQuotaByQuotaId, new org.ovirt.engine.core.common.queries.IdQueryParameters(asGuid(model.getQuota().getId())), "quota"); model.getQuota().setDataCenter(new org.ovirt.engine.api.model.DataCenter()); model.getQuota().getDataCenter().setId(quota.getStoragePoolId().toString()); } org.ovirt.engine.api.model.Disk disk = super.addLinks(model, suggestedParent, subCollectionMembersToExclude); if (disk.isSetStorageDomains()) { disk.getStorageDomains().getStorageDomains().forEach(( storageDomain) -> org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(storageDomain, null, false)); } return disk; }	protected org.ovirt.engine.api.model.Disk addLinks(org.ovirt.engine.api.model.Disk model, java.lang.Class<? extends org.ovirt.engine.api.model.BaseResource> suggestedParent, java.lang.String... subCollectionMembersToExclude) { org.ovirt.engine.api.model.Disk disk = super.addLinks(model, suggestedParent, subCollectionMembersToExclude); if (disk.isSetStorageDomains()) { disk.getStorageDomains().getStorageDomains().forEach(( storageDomain) -> org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(storageDomain, null, false)); } return disk; }
protected org.ovirt.engine.api.model.Disks mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> entities) { org.ovirt.engine.api.model.Disks collection = new org.ovirt.engine.api.model.Disks(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : entities) { org.ovirt.engine.api.model.Disk model = populate(map(disk), disk); if ((model.isSetQuota()) && (disk instanceof org.ovirt.engine.core.common.businessentities.storage.DiskImage)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); model.getQuota().setDataCenter(new org.ovirt.engine.api.model.DataCenter()); model.getQuota().getDataCenter().setId(image.getStoragePoolId().toString()); } collection.getDisks().add(addLinks(model)); } return collection; }	protected org.ovirt.engine.api.model.Disks mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> entities) { org.ovirt.engine.api.model.Disks collection = new org.ovirt.engine.api.model.Disks(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : entities) { collection.getDisks().add(addLinks(populate(map(disk), disk))); } return collection; }
private void selectRow(int shift) { if ((selectedSet.isEmpty()) || ((dataDisplay) == null)) { return; } int shiftSelectedRow = (lastSelectedRow) + shift; int nextRow = (shiftSelectedRow > 0) ? shiftSelectedRow % (dataDisplay.getRowCount()) : shiftSelectedRow + (dataDisplay.getRowCount()); if (disabledRows.contains(nextRow)) { selectRow((shift > 0 ? shift + 1 : shift - 1)); return; } setSelected(visibleItemsAsList().get(nextRow), true); }	private void selectRow(int shift) { if ((selectedSet.isEmpty()) || ((dataDisplay) == null)) { return; } int shiftSelectedRow = (lastSelectedRow) + shift; int nextRow = ((shiftSelectedRow >= 0) && ((dataDisplay.getRowCount()) != 0)) ? shiftSelectedRow % (dataDisplay.getRowCount()) : shiftSelectedRow + (dataDisplay.getRowCount()); if (disabledRows.contains(nextRow)) { selectRow((shift > 0 ? shift + 1 : shift - 1)); return; } setSelected(visibleItemsAsList().get(nextRow), true); }
public org.ovirt.engine.core.bll.ValidationResult networkNameNotUsedAsVdsmName() { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> conflictingNetworks = getDbFacade().getNetworkDao().getAllForDataCenter(network.getDataCenterId()).stream().filter(( net) -> !(net.getId().equals(network.getId()))).filter(( net) -> net.getVdsmName().equals(network.getName())).collect(java.util.stream.Collectors.toList()); if (conflictingNetworks.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.Collection<java.lang.String> nameReplacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith("ConflictingNetworks", conflictingNetworks); nameReplacements.add(getNetworkNameReplacement()); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_NAME_USED_AS_INTERFACE_NAME, nameReplacements); }	public org.ovirt.engine.core.bll.ValidationResult networkNameNotUsedAsVdsmName() { java.lang.String conflictingNetwork = getNetworkDao().getAllForDataCenter(network.getDataCenterId()).stream().filter(( net) -> !(net.getId().equals(network.getId()))).filter(( net) -> net.getVdsmName().equals(network.getName())).map(( net) -> net.getName()).findFirst().orElse(null); if (conflictingNetwork == null) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.Collection<java.lang.String> nameReplacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith("ConflictingNetwork", java.util.Collections.singletonList(conflictingNetwork)); nameReplacements.add(getNetworkNameReplacement()); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_NAME_USED_AS_VDSM_NETWORK_NAME, nameReplacements); }
@org.junit.Test public void networkNameTakenByVdsmName() { when(network.getName()).thenReturn("vdsm-name"); when(network.getId()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID); org.ovirt.engine.core.common.businessentities.network.Network network2 = new org.ovirt.engine.core.common.businessentities.network.Network(); network2.setVdsmName("vdsm-name"); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); when(networkDao.getAllForDataCenter(any())).thenReturn(java.util.Arrays.asList(network, network2)); assertThat(validator.networkNameNotUsedAsVdsmName(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.NETWORK_NAME_USED_AS_INTERFACE_NAME)); }	@org.junit.Test public void networkNameTakenByVdsmName() { when(network.getName()).thenReturn("vdsm-name"); when(network.getId()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID); org.ovirt.engine.core.common.businessentities.network.Network network2 = new org.ovirt.engine.core.common.businessentities.network.Network(); network2.setVdsmName("vdsm-name"); network2.setName("vdsm-name"); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); when(networkDao.getAllForDataCenter(any())).thenReturn(java.util.Arrays.asList(network, network2)); assertThat(validator.networkNameNotUsedAsVdsmName(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.NETWORK_NAME_USED_AS_VDSM_NETWORK_NAME)); }
@java.lang.Override protected java.lang.String getColorByProgress(int progress) { return org.ovirt.engine.ui.common.widget.table.column.TransferDiskImageProgressColumn.color.asCode(); }	@java.lang.Override protected java.lang.String getColorByProgress(int progress) { return org.ovirt.engine.ui.common.widget.table.column.DiskTransferProgressColumn.color.asCode(); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid storageDomainId = org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStorageDomainId(); org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters parameters = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters(org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStoragePoolId(), org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStorageDomainId()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.ProcessOvfUpdateForStoragePool, parameters, org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getContext()); java.util.Set<org.ovirt.engine.core.compat.Guid> proccessedDomains = actionReturnValue.getActionReturnValue(); if (((actionReturnValue.getSucceeded()) && (proccessedDomains != null)) && (proccessedDomains.contains(storageDomainId))) { runInternalActionWithTasksContext(ActionType.ProcessOvfUpdateForStorageDomain, createProcessOvfUpdateForDomainParams()); } else { log.info("OVFs update was ignored - nothing to update for storage domain '{}'", storageDomainId); } org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid storageDomainId = org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStorageDomainId(); org.ovirt.engine.core.common.action.ProcessOvfUpdateParameters parameters = new org.ovirt.engine.core.common.action.ProcessOvfUpdateParameters(org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStoragePoolId(), org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStorageDomainId()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.ProcessOvfUpdateForStoragePool, parameters, org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getContext()); java.util.Set<org.ovirt.engine.core.compat.Guid> proccessedDomains = actionReturnValue.getActionReturnValue(); if (((actionReturnValue.getSucceeded()) && (proccessedDomains != null)) && (proccessedDomains.contains(storageDomainId))) { runInternalActionWithTasksContext(ActionType.ProcessOvfUpdateForStorageDomain, createProcessOvfUpdateForDomainParams()); } else { log.info("OVFs update was ignored - nothing to update for storage domain '{}'", storageDomainId); } org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.setSucceeded(true); }
protected void proccessDomainsForOvfUpdate(org.ovirt.engine.core.common.businessentities.StoragePool pool) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsInPool = storageDomainDao.getAllForStoragePool(pool.getId()); for (org.ovirt.engine.core.common.businessentities.StorageDomain domain : domainsInPool) { if ((!(domain.getStorageDomainType().isDataDomain())) || (((domain.getStatus()) != (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)) && (!(domain.getId().equals(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStoragePoolCommand.getParameters().getStorageDomainId()))))) { continue; } activeDataDomainsIds.add(domain.getId()); java.lang.Integer ovfStoresCountForDomain = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.StorageDomainOvfStoreCount); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo> storageDomainOvfInfos = storageDomainOvfInfoDao.getAllForDomain(domain.getId()); if ((storageDomainOvfInfos.size()) < ovfStoresCountForDomain) { proccessedDomains.add(domain.getId()); continue; } for (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo storageDomainOvfInfo : storageDomainOvfInfos) { if ((storageDomainOvfInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.OUTDATED)) { proccessedDomains.add(storageDomainOvfInfo.getStorageDomainId()); break; } } } }	protected void proccessDomainsForOvfUpdate(org.ovirt.engine.core.common.businessentities.StoragePool pool) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsInPool = storageDomainDao.getAllForStoragePool(pool.getId()); for (org.ovirt.engine.core.common.businessentities.StorageDomain domain : domainsInPool) { if ((!(domain.getStorageDomainType().isDataDomain())) || ((((domain.getStatus()) != (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)) && ((org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStoragePoolCommand.getParameters().getStorageDomainId()) != null)) && (!(domain.getId().equals(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStoragePoolCommand.getParameters().getStorageDomainId()))))) { continue; } activeDataDomainsIds.add(domain.getId()); java.lang.Integer ovfStoresCountForDomain = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.StorageDomainOvfStoreCount); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo> storageDomainOvfInfos = storageDomainOvfInfoDao.getAllForDomain(domain.getId()); if ((storageDomainOvfInfos.size()) < ovfStoresCountForDomain) { proccessedDomains.add(domain.getId()); continue; } for (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo storageDomainOvfInfo : storageDomainOvfInfos) { if ((storageDomainOvfInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.OUTDATED)) { proccessedDomains.add(storageDomainOvfInfo.getStorageDomainId()); break; } } } }
public static org.ovirt.engine.api.model.ResumeBehavior mapResumeBehavior(org.ovirt.engine.api.model.ResumeBehavior resumeBehavior) { if (resumeBehavior == null) { return null; } switch (resumeBehavior) { case AUTO_RESUME : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.ResumeBehavior; case LEAVE_PAUSED : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.ResumeBehavior; case KILL : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.ResumeBehavior; default : throw new java.lang.IllegalArgumentException((("Unknown resume behavior \"" + resumeBehavior) + "\"")); } }	public static org.ovirt.engine.core.common.businessentities.VmResumeBehavior mapResumeBehavior(org.ovirt.engine.api.model.VmStorageErrorResumeBehaviour resumeBehavior) { if (resumeBehavior == null) { return null; } switch (resumeBehavior) { case AUTO_RESUME : return org.ovirt.engine.api.restapi.types.org.ovirt.engine.core.common.businessentities.VmResumeBehavior; case LEAVE_PAUSED : return org.ovirt.engine.api.restapi.types.org.ovirt.engine.core.common.businessentities.VmResumeBehavior; case KILL : return org.ovirt.engine.api.restapi.types.org.ovirt.engine.core.common.businessentities.VmResumeBehavior; default : throw new java.lang.IllegalArgumentException((("Unknown resume behavior \"" + resumeBehavior) + "\"")); } }
public static org.ovirt.engine.api.model.ResumeBehavior mapResumeBehavior(org.ovirt.engine.core.common.businessentities.ResumeBehavior resumeBehavior) { if (resumeBehavior == null) { return null; } switch (resumeBehavior) { case AUTO_RESUME : return org.ovirt.engine.api.model.ResumeBehavior.AUTO_RESUME; case LEAVE_PAUSED : return org.ovirt.engine.api.model.ResumeBehavior.LEAVE_PAUSED; case KILL : return org.ovirt.engine.api.model.ResumeBehavior.KILL; default : throw new java.lang.IllegalArgumentException((("Unknown resume behavior \"" + resumeBehavior) + "\"")); } }	public static org.ovirt.engine.api.model.VmStorageErrorResumeBehaviour mapResumeBehavior(org.ovirt.engine.core.common.businessentities.VmResumeBehavior resumeBehavior) { if (resumeBehavior == null) { return null; } switch (resumeBehavior) { case AUTO_RESUME : return org.ovirt.engine.api.model.VmStorageErrorResumeBehaviour.AUTO_RESUME; case LEAVE_PAUSED : return org.ovirt.engine.api.model.VmStorageErrorResumeBehaviour.LEAVE_PAUSED; case KILL : return org.ovirt.engine.api.model.VmStorageErrorResumeBehaviour.KILL; default : throw new java.lang.IllegalArgumentException((("Unknown resume behavior \"" + resumeBehavior) + "\"")); } }
private void logNoDeviceToHotUnplug(java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmMemoryDevices) { final org.ovirt.engine.core.common.AuditLogType message = (vmMemoryDevices.isEmpty()) ? org.ovirt.engine.core.common.AuditLogType.NO_MEMORY_DEVICE_TO_HOT_UNPLUG : org.ovirt.engine.core.common.AuditLogType.NO_SUITABLE_MEMORY_DEVICE_TO_HOT_UNPLUG; if (!(vmMemoryDevices.isEmpty())) { final int originalMemoryMb = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getMemSizeMb(); org.ovirt.engine.core.bll.UpdateVmCommand.addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_OLD_MEMORY_MB, java.lang.String.valueOf(originalMemoryMb)); addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_NEW_MEMORY_MB, java.lang.String.valueOf(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm().getMemSizeMb())); final java.lang.String unplugOptions = vmMemoryDevices.stream().filter(VmDeviceCommonUtils::isMemoryDeviceHotUnpluggable).map(( device) -> org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(device).get()).map(( deviceSize) -> java.lang.String.format("%dMB (%dMB)", deviceSize, memoryAfterHotUnplug(originalMemoryMb, deviceSize))).collect(java.util.stream.Collectors.joining(", ")); org.ovirt.engine.core.bll.UpdateVmCommand.addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_MEMORY_HOT_UNPLUG_OPTIONS, unplugOptions); } auditLogDirector.log(this, message); }	private void logNoDeviceToHotUnplug(java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmMemoryDevices) { final org.ovirt.engine.core.common.AuditLogType message = (vmMemoryDevices.isEmpty()) ? org.ovirt.engine.core.common.AuditLogType.NO_MEMORY_DEVICE_TO_HOT_UNPLUG : org.ovirt.engine.core.common.AuditLogType.NO_SUITABLE_MEMORY_DEVICE_TO_HOT_UNPLUG; if (!(vmMemoryDevices.isEmpty())) { final int originalMemoryMb = oldVm.getMemSizeMb(); org.ovirt.engine.core.bll.UpdateVmCommand.addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_OLD_MEMORY_MB, java.lang.String.valueOf(originalMemoryMb)); addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_NEW_MEMORY_MB, java.lang.String.valueOf(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm().getMemSizeMb())); final java.lang.String unplugOptions = vmMemoryDevices.stream().filter(VmDeviceCommonUtils::isMemoryDeviceHotUnpluggable).map(( device) -> org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(device).get()).map(( deviceSize) -> java.lang.String.format("%dMB (%dMB)", deviceSize, memoryAfterHotUnplug(originalMemoryMb, deviceSize))).collect(java.util.stream.Collectors.joining(", ")); org.ovirt.engine.core.bll.UpdateVmCommand.addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_MEMORY_HOT_UNPLUG_OPTIONS, unplugOptions); } auditLogDirector.log(this, message); }
public static boolean isMemoryDeviceHotUnpluggable(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isMemory(memoryDevice))) { throw new java.lang.RuntimeException((("Memory device expected but device " + memoryDevice) + " obtained.")); } return (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSpecParamsIntValue(memoryDevice, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE).isPresent()) && (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSpecParamsIntValue(memoryDevice, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_NODE).isPresent()); }	public static boolean isMemoryDeviceHotUnpluggable(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isMemory(memoryDevice))) { throw new java.lang.IllegalArgumentException((("Memory device expected but device " + memoryDevice) + " obtained.")); } return (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSpecParamsIntValue(memoryDevice, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE).isPresent()) && (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSpecParamsIntValue(memoryDevice, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_NODE).isPresent()); }
private void hotUnplugMemory(org.ovirt.engine.core.common.businessentities.VM newVm) { final org.ovirt.engine.core.common.businessentities.VM vmFromDb = org.ovirt.engine.core.bll.UpdateVmCommand.getVm(); final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmMemoryDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(getVmId(), VmDeviceGeneralType.MEMORY, VmDeviceType.MEMORY); final org.ovirt.engine.core.common.businessentities.VmDevice memoryDeviceToUnplug = computeMemoryDeviceToHotUnplug(vmMemoryDevices); final int oldMemoryMb = vmFromDb.getMemSizeMb(); final int oldMinMemoryMb = vmFromDb.getMinAllocatedMem(); if (memoryDeviceToUnplug == null) { logNoDeviceToHotUnplug(vmMemoryDevices); newVmStatic.setMemSizeMb(oldMemoryMb); newVmStatic.setMinAllocatedMem(oldMinMemoryMb); return; } final org.ovirt.engine.core.common.action.ActionReturnValue hotUnplugReturnValue = runInternalAction(ActionType.HotUnplugMemoryWithoutVmUpdate, new org.ovirt.engine.core.common.action.HotUnplugMemoryWithoutVmUpdateParameters(memoryDeviceToUnplug.getId(), newVm.getMinAllocatedMem()), org.ovirt.engine.core.bll.UpdateVmCommand.cloneContextAndDetachFromParent()); if (!(vmFromDb.isHostedEngine())) { final int memoryDeviceSizeMb = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(memoryDeviceToUnplug).get(); final int memoryAfterHotUnplugMb = oldMemoryMb - memoryDeviceSizeMb; newVmStatic.setMemSizeMb((hotUnplugReturnValue.getSucceeded() ? memoryAfterHotUnplugMb : oldMemoryMb)); newVmStatic.setMinAllocatedMem((hotUnplugReturnValue.getSucceeded() ? newVm.getMinAllocatedMem() : oldMinMemoryMb)); } }	private void hotUnplugMemory(org.ovirt.engine.core.common.businessentities.VM newVm) { final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmMemoryDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(getVmId(), VmDeviceGeneralType.MEMORY, VmDeviceType.MEMORY); final int oldMemoryMb = oldVm.getMemSizeMb(); final int oldMinMemoryMb = oldVm.getMinAllocatedMem(); final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> memoryDevicesToUnplug = org.ovirt.engine.core.bll.memory.MemoryUtils.computeMemoryDevicesToHotUnplug(vmMemoryDevices, oldMemoryMb, org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm().getMemSizeMb()); if (memoryDevicesToUnplug.isEmpty()) { logNoDeviceToHotUnplug(vmMemoryDevices); if (!(oldVm.isHostedEngine())) { newVmStatic.setMemSizeMb(oldMemoryMb); newVmStatic.setMinAllocatedMem(oldMinMemoryMb); } return; } final int totalHotUnpluggedMemoryMb = memoryDevicesToUnplug.stream().mapToInt(( deviceToHotUnplug) -> { final org.ovirt.engine.core.common.action.ActionReturnValue hotUnplugReturnValue = runInternalAction(ActionType.HotUnplugMemoryWithoutVmUpdate, new org.ovirt.engine.core.common.action.HotUnplugMemoryWithoutVmUpdateParameters(deviceToHotUnplug.getId(), newVm.getMinAllocatedMem()), cloneContextAndDetachFromParent()); return hotUnplugReturnValue.getSucceeded() ? org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(deviceToHotUnplug).get() : 0; }).sum(); if (!(oldVm.isHostedEngine())) { newVmStatic.setMemSizeMb((oldMemoryMb - totalHotUnpluggedMemoryMb)); newVmStatic.setMinAllocatedMem((totalHotUnpluggedMemoryMb > 0 ? newVm.getMinAllocatedMem() : oldMinMemoryMb)); } }
@java.lang.Override public void runForS390() { diskIndex = 0; }	@java.lang.Override public void runForS390X() { diskIndex = 0; }
@java.lang.Override public void runForS390() { hasMaximum = (org.ovirt.engine.core.bll.VmCommand.MAX_VIRTIO_CCW_DISKS) == (countDisks(DiskInterface.VirtIO)); }	@java.lang.Override public void runForS390X() { hasMaximum = (org.ovirt.engine.core.bll.VmCommand.MAX_VIRTIO_CCW_DISKS) == (countDisks(DiskInterface.VirtIO)); }
void runForS390();	void runForS390X();
@java.lang.Override public org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitecture() { return org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitecture() { return org.ovirt.engine.core.common.businessentities.ArchitectureType.s390x; }
@java.lang.Override public <T extends org.ovirt.engine.core.utils.archstrategy.ArchCommand> T run(T c) { c.runForS390(); return c; }	@java.lang.Override public <T extends org.ovirt.engine.core.utils.archstrategy.ArchCommand> T run(T c) { c.runForS390X(); return c; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.HostDeviceView object) { return (object.getMdevTypes()) == null ? "" : java.lang.String.join(", ", object.getMdevTypes().stream().sorted().collect(java.util.stream.Collectors.toList())); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.HostDeviceView object) { return (object.getMdevTypes()) == null ? "" : object.getMdevTypes().stream().sorted().collect(java.util.stream.Collectors.joining(", ")); }
public static java.lang.Double percent2bits(java.lang.Integer speedValueInMegaBits, java.lang.Double rxTxValueInPrecent) { if ((speedValueInMegaBits == null) || (rxTxValueInPrecent == null)) { return 0.0; } return (speedValueInMegaBits * rxTxValueInPrecent) / 100; }	public static java.lang.Double percent2bits(java.lang.Integer speedValueInMegaBits, java.lang.Double rxTxValueInPercent) { return org.ovirt.engine.api.restapi.util.RxTxCalculator.megaBitToBit(org.ovirt.engine.api.restapi.util.RxTxCalculator.percent2megaBits(speedValueInMegaBits, rxTxValueInPercent)); }
@org.junit.Test public void testDefaultRouteWhenOutOfSyncOnOlderCluster() { cluster.setCompatibilityVersion(Version.v4_1); network.setDnsResolverConfiguration(sampleDnsResolverConfiguration); assertThat(createTestedInstance(true, sampleDnsResolverConfiguration).isNetworkInSync(), is(false)); }	@org.junit.Test public void testDefaultRouteWhenOutOfSyncOnOlderCluster() { cluster.setCompatibilityVersion(Version.v4_1); network.setDnsResolverConfiguration(sampleDnsResolverConfiguration); assertThat(createTestedInstance(true, sampleDnsResolverConfiguration).isNetworkInSync(), is(true)); }
public static boolean defaultRouteSupported(org.ovirt.engine.core.compat.Version version) { return Version.v4_2.lessOrEquals(version); }	public static boolean isDefaultRouteReportedByVdsm(org.ovirt.engine.core.compat.Version version) { return org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.DefaultRouteReportedByVdsm, version); }
@java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { org.ovirt.engine.core.compat.Version clusterVersion = clusterNetworkModel.getCluster().getCompatibilityVersion(); boolean defaultRouteSupported = Version.v4_2.lessOrEquals(clusterVersion); return ((defaultRouteSupported && (clusterNetworkModel.isAttached())) && (!(clusterNetworkModel.isExternal()))) && (((!(isMultipleSelectionAllowed())) || (!(clusterNetworkModel.isManagement()))) || (!(clusterNetworkModel.getOriginalNetworkCluster().isDefaultRoute()))); }	@java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { boolean defaultRouteReportedByVdsm = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigValues.DefaultRouteReportedByVdsm, clusterNetworkModel.getCluster().getCompatibilityVersion().getValue()))); return ((defaultRouteReportedByVdsm && (clusterNetworkModel.isAttached())) && (!(clusterNetworkModel.isExternal()))) && (((!(isMultipleSelectionAllowed())) || (!(clusterNetworkModel.isManagement()))) || (!(clusterNetworkModel.getOriginalNetworkCluster().isDefaultRoute()))); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass()) != (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer other = ((org.ovirt.engine.core.common.businessentities.storage.ImageTransfer) (obj)); return (((((((((((java.util.Objects.equals(commandId, other.commandId)) && (java.util.Objects.equals(phase, other.phase))) && ((type) == (other.type))) && (java.util.Objects.equals(lastUpdated, other.lastUpdated))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(diskId, other.diskId))) && (java.util.Objects.equals(imagedTicketId, other.imagedTicketId))) && (java.util.Objects.equals(proxyUri, other.proxyUri))) && (java.util.Objects.equals(signedTicket, other.signedTicket))) && (java.util.Objects.equals(bytesSent, other.bytesSent))) && (java.util.Objects.equals(bytesTotal, other.bytesTotal)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass()) != (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer other = ((org.ovirt.engine.core.common.businessentities.storage.ImageTransfer) (obj)); return (((((((((((java.util.Objects.equals(commandId, other.commandId)) && (java.util.Objects.equals(phase, other.phase))) && (java.util.Objects.equals(lastUpdated, other.lastUpdated))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(diskId, other.diskId))) && (java.util.Objects.equals(imagedTicketId, other.imagedTicketId))) && (java.util.Objects.equals(proxyUri, other.proxyUri))) && (java.util.Objects.equals(signedTicket, other.signedTicket))) && (java.util.Objects.equals(bytesSent, other.bytesSent))) && (java.util.Objects.equals(bytesTotal, other.bytesTotal))) && ((type) == (other.type)); }
private void pollDownloadStatus(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId())); if ((returnValue != null) && (returnValue.getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer imageTransfer = returnValue.getActionReturnValue(); if ((((imageTransfer.getBytesTotal()) != null) && (imageTransfer.getBytesTotal().equals(imageTransfer.getBytesSent()))) && (!(imageTransfer.getActive()))) { if (!(context.entity.getActive())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); updates.setPhase(ImageTransferPhase.FINALIZING_SUCCESS); org.ovirt.engine.core.common.action.TransferImageStatusParameters parameters = new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); parameters.setUpdates(updates); runInternalAction(ActionType.TransferImageStatus, parameters); } } } }	private void pollDownloadStatus(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId())); if ((returnValue == null) || (!(returnValue.getSucceeded()))) { log.debug("Failed to poll download status."); return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer imageTransfer = returnValue.getActionReturnValue(); if ((((imageTransfer.getBytesTotal()) != 0) && (imageTransfer.getBytesTotal().equals(imageTransfer.getBytesSent()))) && (!(imageTransfer.getActive()))) { if (!(context.entity.getActive())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); updates.setPhase(ImageTransferPhase.FINALIZING_SUCCESS); org.ovirt.engine.core.common.action.TransferImageStatusParameters parameters = new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); parameters.setUpdates(updates); runInternalAction(ActionType.TransferImageStatus, parameters); } } }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass()) != (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer other = ((org.ovirt.engine.core.common.businessentities.storage.ImageTransfer) (obj)); return ((((((((((((java.util.Objects.equals(commandId, other.commandId)) && (java.util.Objects.equals(phase, other.phase))) && ((type) == (other.type))) && (java.util.Objects.equals(active, other.active))) && (java.util.Objects.equals(lastUpdated, other.lastUpdated))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(diskId, other.diskId))) && (java.util.Objects.equals(imagedTicketId, other.imagedTicketId))) && (java.util.Objects.equals(proxyUri, other.proxyUri))) && (java.util.Objects.equals(signedTicket, other.signedTicket))) && (java.util.Objects.equals(bytesSent, other.bytesSent))) && (java.util.Objects.equals(bytesTotal, other.bytesTotal)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass()) != (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer other = ((org.ovirt.engine.core.common.businessentities.storage.ImageTransfer) (obj)); return ((((((((((((java.util.Objects.equals(commandId, other.commandId)) && (java.util.Objects.equals(phase, other.phase))) && (java.util.Objects.equals(active, other.active))) && (java.util.Objects.equals(lastUpdated, other.lastUpdated))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(diskId, other.diskId))) && (java.util.Objects.equals(imagedTicketId, other.imagedTicketId))) && (java.util.Objects.equals(proxyUri, other.proxyUri))) && (java.util.Objects.equals(signedTicket, other.signedTicket))) && (java.util.Objects.equals(bytesSent, other.bytesSent))) && (java.util.Objects.equals(bytesTotal, other.bytesTotal))) && ((type) == (other.type)); }
private void handleTransferring(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((context.iterationTimestamp) >= ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getSessionExpiration()) - (getHostTicketRefreshAllowance()))) { log.info("Renewing transfer ticket for {}", getTransferDescription()); boolean extendSucceeded = extendImageTransferSession(context.entity); if (!extendSucceeded) { log.info("Failed to renew transfer ticket for {}", getTransferDescription()); if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().isExtendTicketFailed()) { updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setExtendTicketFailed(false); } org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setExtendTicketFailed(true); } } else { log.debug("Not yet renewing transfer ticket for {}", getTransferDescription()); } resetPeriodicPauseLogTime(0); }	private void handleTransferring(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((context.iterationTimestamp) >= ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getSessionExpiration()) - (getHostTicketRefreshAllowance()))) { log.info("Renewing transfer ticket for {}", getTransferDescription()); boolean extendSucceeded = extendImageTransferSession(context.entity); if (!extendSucceeded) { log.warn("Failed to renew transfer ticket for {}", getTransferDescription()); if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().isRetryExtendTicket()) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setRetryExtendTicket(false); } else { updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setRetryExtendTicket(true); } } } else { log.debug("Not yet renewing transfer ticket for {}", getTransferDescription()); } resetPeriodicPauseLogTime(0); if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { pollDownloadStatus(context); } }
public boolean isExtendTicketFailed() { return extendTicketFailed; }	public boolean isRetryExtendTicket() { return retryExtendTicket; }
public void setExtendTicketFailed(boolean extendTicketFailed) { this.extendTicketFailed = extendTicketFailed; }	public void setRetryExtendTicket(boolean retryExtendTicket) { this.retryExtendTicket = retryExtendTicket; }
private static org.ovirt.engine.core.common.utils.Pair noneAndNone() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); java.lang.String expectedOutput = "{}"; return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }	private static org.ovirt.engine.core.common.utils.Pair noneAndNone() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setStartOnBoot(true); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = null; return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
private void storeNetwork() throws java.io.UnsupportedEncodingException { if (sourceProtocol.equals(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.NetConfigSourceProtocol.OPENSTACK_METADATA)) { networkData = new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInitToOpenStackMetadata(vmInit).asMap(); } else { storeNetworkAsEni(); } }	private void storeNetwork() throws java.io.UnsupportedEncodingException { if (isOpenstackMetadataProtocol()) { networkData = new org.ovirt.engine.core.common.utils.VmInitToOpenStackMetadataAdapter().asMap(vmInit); } else { storeNetworkAsEni(); } }
private static org.ovirt.engine.core.common.utils.Pair dhcpIPv6() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setIpv6BootProtocol(Ipv6BootProtocol.DHCP); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "{\n" + ((((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"dhcp6\",\n") + " \"link\": \"iface name\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }	private static org.ovirt.engine.core.common.utils.Pair dhcpIPv6() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setIpv6BootProtocol(Ipv6BootProtocol.DHCP); underTest.setStartOnBoot(true); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "{\n" + ((((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"dhcp6\",\n") + " \"link\": \"iface name\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
private static org.ovirt.engine.core.common.utils.Pair staticIPv6() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setIpv6BootProtocol(Ipv6BootProtocol.STATIC_IP); underTest.setIpv6Address(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV6_ADDRESS); underTest.setIpv6Prefix(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV6_PREFIX); underTest.setIpv6Gateway(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV6_GATEWAY); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "{\n" + (((((((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"ipv6\",\n") + " \"link\": \"iface name\",\n") + " \"ip_address\": \"ipv6 address\",\n") + " \"netmask\": 666,\n") + " \"gateway\": \"ipv6 gateway\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }	private static org.ovirt.engine.core.common.utils.Pair staticIPv6() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setIpv6BootProtocol(Ipv6BootProtocol.STATIC_IP); underTest.setIpv6Address(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV6_ADDRESS); underTest.setIpv6Prefix(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV6_PREFIX); underTest.setIpv6Gateway(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV6_GATEWAY); underTest.setStartOnBoot(true); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "{\n" + (((((((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"ipv6\",\n") + " \"link\": \"iface name\",\n") + " \"ip_address\": \"ipv6 address\",\n") + " \"netmask\": \"666\",\n") + " \"gateway\": \"ipv6 gateway\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
private static org.ovirt.engine.core.common.utils.Pair staticIPv6AddressOnly() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setIpv6BootProtocol(Ipv6BootProtocol.STATIC_IP); underTest.setIpv6Address(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV6_ADDRESS); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "{\n" + (((((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"ipv6\",\n") + " \"link\": \"iface name\",\n") + " \"ip_address\": \"ipv6 address\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }	private static org.ovirt.engine.core.common.utils.Pair staticIPv6AddressOnly() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setIpv6BootProtocol(Ipv6BootProtocol.STATIC_IP); underTest.setIpv6Address(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV6_ADDRESS); underTest.setStartOnBoot(true); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "{\n" + (((((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"ipv6\",\n") + " \"link\": \"iface name\",\n") + " \"ip_address\": \"ipv6 address\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
@org.junit.Test public void test() throws java.io.IOException { org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler underTest = new org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler(vmInit, org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.NetConfigSourceProtocol.OPENSTACK_METADATA); final java.util.Map<java.lang.String, byte[]> actual = underTest.getFileData(); java.util.Map<java.lang.String, java.lang.Object> actualNetworkData = parseResult(actual); java.util.Map<java.lang.String, java.lang.Object> expectedNetworkData = org.ovirt.engine.core.utils.JsonHelper.jsonToMap(expected); assertEquals(expectedNetworkData, actualNetworkData); }	@org.junit.Test public void test() throws java.io.IOException { org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler underTest = new org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler(vmInit, org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.NetConfigSourceProtocol.OPENSTACK_METADATA); try { java.util.Map<java.lang.String, byte[]> actual = underTest.getFileData(); if ((actual.get("openstack/latest/network_data.json")) == null) { assertNull(expected); } else { java.util.Map<java.lang.String, java.lang.Object> actualNetworkData = parseResult(actual); java.util.Map<java.lang.String, java.lang.Object> expectedNetworkData = org.ovirt.engine.core.utils.JsonHelper.jsonToMap(((java.lang.String) (expected))); assertEquals(expectedNetworkData, actualNetworkData); assertEquals(0, underTest.validate(vmInit).size()); } } catch (java.lang.Exception e) { assertEquals(((java.lang.Exception) (expected)).getMessage(), e.getMessage()); assertEquals(((java.lang.Exception) (expected)).getCause().getMessage(), e.getCause().getMessage()); assertNotEquals(0, underTest.validate(vmInit).size()); } }
private static org.ovirt.engine.core.common.utils.Pair dhcpIPv4() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setBootProtocol(Ipv4BootProtocol.DHCP); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "{\n" + ((((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"dhcp4\",\n") + " \"link\": \"iface name\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }	private static org.ovirt.engine.core.common.utils.Pair dhcpIPv4() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setBootProtocol(Ipv4BootProtocol.DHCP); underTest.setStartOnBoot(true); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "{\n" + ((((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"dhcp4\",\n") + " \"link\": \"iface name\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
private static org.ovirt.engine.core.common.utils.Pair staticIPv4() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setBootProtocol(Ipv4BootProtocol.STATIC_IP); underTest.setIp(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV4_ADDRESS); underTest.setNetmask(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV4_NETMASK); underTest.setGateway(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV4_GATEWAY); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "{\n" + (((((((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"ipv4\",\n") + " \"link\": \"iface name\",\n") + " \"ip_address\": \"ipv4 address\",\n") + " \"netmask\": \"ipv4 netmask\",\n") + " \"gateway\": \"ipv4 gateway\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }	private static org.ovirt.engine.core.common.utils.Pair staticIPv4() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setBootProtocol(Ipv4BootProtocol.STATIC_IP); underTest.setIp(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV4_ADDRESS); underTest.setNetmask(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV4_NETMASK); underTest.setGateway(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV4_GATEWAY); underTest.setStartOnBoot(true); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "{\n" + (((((((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"ipv4\",\n") + " \"link\": \"iface name\",\n") + " \"ip_address\": \"ipv4 address\",\n") + " \"netmask\": \"ipv4 netmask\",\n") + " \"gateway\": \"ipv4 gateway\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
private static org.ovirt.engine.core.common.utils.Pair dnsServersOnly() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setDnsSearch("search1 search2"); vmInit.setDnsServers("nameserver1 nameserver2 nameserver3"); java.lang.String expectedOutput = "{\n" + ((((((((((((((((((((((" \"services\": [\n" + " {\n") + " \"address\": \"nameserver1\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver2\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver3\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"search1\",\n") + " \"type\": \"dns-search\"\n") + " },\n") + " {\n") + " \"address\": \"search2\",\n") + " \"type\": \"dns-search\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }	private static org.ovirt.engine.core.common.utils.Pair dnsServersOnly() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setStartOnBoot(true); vmInit.setNetworks(java.util.Arrays.asList(underTest)); vmInit.setDnsSearch("search1 search2"); vmInit.setDnsServers("nameserver1 nameserver2 nameserver3"); java.lang.String expectedOutput = "{\n" + ((((((((((((((((((((((" \"services\": [\n" + " {\n") + " \"address\": \"nameserver1\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver2\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver3\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"search1\",\n") + " \"type\": \"dns-search\"\n") + " },\n") + " {\n") + " \"address\": \"search2\",\n") + " \"type\": \"dns-search\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
protected void addUserDomainToVm() { mapDbUsers().forEach(( dbUser) -> { }); }	private void addPermissionsForUser(org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser, java.util.Map<java.lang.String, java.util.Set<java.lang.String>> userToRoles) { addPermissions(dbUser, userToRoles.getOrDefault(dbUser.getLoginName(), java.util.Collections.EMPTY_SET)); }
protected void readUserDomainsSection(@java.lang.SuppressWarnings("unused") org.ovirt.engine.core.utils.ovf.xml.XmlNode section) { }	protected void readUserDomainsSection(@java.lang.SuppressWarnings("unused") org.ovirt.engine.core.utils.ovf.xml.XmlNode section) { org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = selectNodes(section, OvfProperties.USER); java.util.Set<org.ovirt.engine.core.common.businessentities.aaa.DbUser> dbUsers = new java.util.HashSet<>(); java.util.Map<java.lang.String, java.util.Set<java.lang.String>> userToRoles = new java.util.HashMap<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : list) { java.lang.String userDomain = selectSingleNode(node, OvfProperties.USER_DOMAIN, _xmlNS).innerText; org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = new org.ovirt.engine.core.common.businessentities.aaa.DbUser(); dbUser.setLoginName(userDomain.split("@")[0]); dbUser.setDomain(userDomain.split("@")[1]); dbUsers.add(dbUser); org.ovirt.engine.core.utils.ovf.xml.XmlNode rolesElement = selectSingleNode(node, OvfProperties.USER_ROLES); org.ovirt.engine.core.utils.ovf.xml.XmlNodeList roleNodes = selectNodes(rolesElement, OvfProperties.ROLE_NAME); java.util.Set<java.lang.String> roleNames = new java.util.HashSet<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode roleNode : roleNodes) { java.lang.String roleName = roleNode.innerText; roleNames.add(roleName); } userToRoles.put(dbUser.getLoginName(), roleNames); } fullEntityOvfData.setDbUsers(dbUsers); fullEntityOvfData.setUserToRoles(userToRoles); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.aaa.DbUser> mapDbUsers() { java.util.List<org.ovirt.engine.core.common.businessentities.aaa.DbUser> dbUsers = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.String> userDomainsMap = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getDomainMap(); org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getDbUsers().forEach(( dbUser) -> { org.ovirt.engine.core.common.businessentities.aaa.DbUser originalDbUser = dbUserDao.getByUsernameAndDomain(dbUser.getLoginName(), dbUser.getDomain()); if (userDomainsMap != null) { java.lang.String destDomain = userDomainsMap.get(dbUser.getDomain()); if (destDomain != null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser destDbUser = dbUserDao.getByUsernameAndDomain(dbUser.getLoginName(), destDomain); } } }); }	@java.lang.Override protected void mapDbUsers() { java.util.Map<java.lang.String, java.lang.String> userDomainsMap = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getDomainMap(); org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getDbUsers().forEach(( dbUser) -> { org.ovirt.engine.core.common.businessentities.aaa.DbUser originalDbUser = dbUserDao.getByUsernameAndDomain(dbUser.getLoginName(), dbUser.getDomain()); if (userDomainsMap != null) { java.lang.String destDomain = userDomainsMap.get(dbUser.getDomain()); if (destDomain != null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser destDbUser = dbUserDao.getByUsernameAndDomain(dbUser.getLoginName(), destDomain); if (destDbUser != null) { addPermissionsForUser(destDbUser, getParameters().getUserToRoles()); } } else if (originalDbUser != null) { addPermissionsForUser(originalDbUser, getParameters().getUserToRoles()); } } else if (originalDbUser != null) { addPermissionsForUser(originalDbUser, getParameters().getUserToRoles()); } }); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData)) { return false; } org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData other = ((org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData) (obj)); return (((((((super.equals(obj)) && (java.util.Objects.equals(diskImages, other.diskImages))) && (java.util.Objects.equals(lunDisks, other.lunDisks))) && (java.util.Objects.equals(interfaces, other.interfaces))) && (java.util.Objects.equals(vmBase, other.vmBase))) && (java.util.Objects.equals(clusterName, other.clusterName))) && (java.util.Objects.equals(affinityGroups, other.affinityGroups))) && (java.util.Objects.equals(dbUsers, other.dbUsers)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData)) { return false; } org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData other = ((org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData) (obj)); return ((((((((super.equals(obj)) && (java.util.Objects.equals(diskImages, other.diskImages))) && (java.util.Objects.equals(lunDisks, other.lunDisks))) && (java.util.Objects.equals(interfaces, other.interfaces))) && (java.util.Objects.equals(vmBase, other.vmBase))) && (java.util.Objects.equals(clusterName, other.clusterName))) && (java.util.Objects.equals(affinityGroups, other.affinityGroups))) && (java.util.Objects.equals(dbUsers, other.dbUsers))) && (java.util.Objects.equals(userToRoles, other.userToRoles)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), diskImages, lunDisks, interfaces, vmBase, clusterName, affinityGroups, dbUsers); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), diskImages, lunDisks, interfaces, vmBase, clusterName, affinityGroups, dbUsers, userToRoles); }
@java.lang.Override protected void executeCommand() { affinityGroupDao.update(getParameters().getAffinityGroup()); vmStaticDao.incrementDbGenerationForVms(getAffinityGroup().getVmIds()); setSucceeded(true); }	@java.lang.Override protected void executeCommand() { java.util.Collection changedVms = org.apache.commons.collections.CollectionUtils.disjunction(getAffinityGroup().getVmIds(), getParameters().getAffinityGroup().getVmIds()); vmStaticDao.incrementDbGenerationForVms(new java.util.ArrayList(changedVms)); affinityGroupDao.update(getParameters().getAffinityGroup()); setSucceeded(true); }
@java.lang.Override public void addVmToAffinityLabels() { mapAffinityLabels().forEach(( affinityLabel) -> { affinityLabel.getVms().add(getParameters().getVm().getId()); labelDao.update(affinityLabel); }); }	@java.lang.Override public void addVmToAffinityLabels() { mapAffinityLabels().forEach(( affinityLabel) -> { affinityLabel.addVm(getParameters().getVm()); labelDao.update(affinityLabel); }); }
@java.lang.Override public void buildVirtualSystem() { org.ovirt.engine.core.utils.ovf.xml.XmlNode virtualSystem = selectSingleNode(_document, "//*/Content"); consumeReadProperty(virtualSystem, org.ovirt.engine.core.utils.ovf.NAME, ( val) -> fullEntityOvfData.getVmBase().setName(val)); fullEntityOvfData.getVmBase().setOvfVersion(getVersion()); org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = selectNodes(virtualSystem, "Section"); if (list != null) { org.ovirt.engine.core.utils.ovf.xml.XmlNode node = getNode(list, "xsi:type", "ovf:OperatingSystemSection_Type"); if (node != null) { readOsSection(node); if ((!(osRepository.isLinux(fullEntityOvfData.getVmBase().getOsId()))) || ((fullEntityOvfData.getVmBase().getDefaultDisplayType()) != (org.ovirt.engine.core.common.businessentities.DisplayType.qxl))) { fullEntityOvfData.getVmBase().setSingleQxlPci(false); } } node = getNode(list, "xsi:type", "ovf:VirtualHardwareSection_Type"); if (node != null) { readHardwareSection(node); } node = getNode(list, "xsi:type", "ovf:SnapshotsSection_Type"); if (node != null) { readSnapshotsSection(node); } node = getNode(list, "xsi:type", "ovf:AffinityGroupsSection_Type"); if (node != null) { readAffinityGroupsSection(node); } node = getNode(list, "xsi:type", "ovf:AffinityLabelSection_Type"); if (node != null) { readAffinityLabelsSection(node); } node = getNode(list, "xsi:type", "ovf:UserDomainsSection_Type"); if (node != null) { readUserDomainsSection(node); } } readGeneralData(virtualSystem); }	@java.lang.Override public void buildVirtualSystem() { org.ovirt.engine.core.utils.ovf.xml.XmlNode virtualSystem = selectSingleNode(_document, "//*/Content"); consumeReadProperty(virtualSystem, org.ovirt.engine.core.utils.ovf.NAME, ( val) -> fullEntityOvfData.getVmBase().setName(val)); fullEntityOvfData.getVmBase().setOvfVersion(getVersion()); org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = selectNodes(virtualSystem, "Section"); if (list != null) { org.ovirt.engine.core.utils.ovf.xml.XmlNode node = getNode(list, "xsi:type", "ovf:OperatingSystemSection_Type"); if (node != null) { readOsSection(node); if ((!(osRepository.isLinux(fullEntityOvfData.getVmBase().getOsId()))) || ((fullEntityOvfData.getVmBase().getDefaultDisplayType()) != (org.ovirt.engine.core.common.businessentities.DisplayType.qxl))) { fullEntityOvfData.getVmBase().setSingleQxlPci(false); } } node = getNode(list, "xsi:type", "ovf:VirtualHardwareSection_Type"); if (node != null) { readHardwareSection(node); } node = getNode(list, "xsi:type", "ovf:SnapshotsSection_Type"); if (node != null) { readSnapshotsSection(node); } node = getNode(list, "xsi:type", "ovf:AffinityGroupsSection_Type"); if (node != null) { readAffinityGroupsSection(node); } node = getNode(list, "xsi:type", "ovf:AffinityLabelsSection_Type"); if (node != null) { readAffinityLabelsSection(node); } node = getNode(list, "xsi:type", "ovf:UserDomainsSection_Type"); if (node != null) { readUserDomainsSection(node); } } readGeneralData(virtualSystem); }
@java.lang.Override protected void executeCommand() { labelDao.update(getParameters().getLabel()); vmStaticDao.incrementDbGenerationForVms(new java.util.ArrayList(getParameters().getLabel().getVms())); setActionReturnValue(getParameters().getLabel()); setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.Label label = labelDao.get(getLabelId()); java.util.Collection changedVms = org.apache.commons.collections.CollectionUtils.disjunction(label.getVms(), getParameters().getLabel().getVms()); vmStaticDao.incrementDbGenerationForVms(new java.util.ArrayList(changedVms)); labelDao.update(getParameters().getLabel()); setActionReturnValue(getParameters().getLabel()); setSucceeded(true); }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.Label> mapAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.String> affinityLabelMap = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getAffinityLabelMap(); org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getAffinityLabels().forEach(( affinityLabel) -> { org.ovirt.engine.core.common.businessentities.Label originalAffinityLabel = labelDao.getByName(affinityLabel); if (affinityLabelMap != null) { java.lang.String destName = affinityLabelMap.get(affinityLabel); if (destName != null) { org.ovirt.engine.core.common.businessentities.Label destAffinityLabel = labelDao.getByName(destName); addBusinessEntityToList(affinityLabels, destAffinityLabel, originalAffinityLabel); } else { addBusinessEntityToList(affinityLabels, originalAffinityLabel, null); } } else { addBusinessEntityToList(affinityLabels, originalAffinityLabel, null); } }); return affinityLabels; }	@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.Label> mapAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.String> affinityLabelMap = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getAffinityLabelMap(); org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getAffinityLabels().forEach(( affinityLabel) -> { org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.log.info("Mapping affinity label '{}' for vm '{}'.", affinityLabel, getParameters().getVm().getId()); org.ovirt.engine.core.common.businessentities.Label affLabel = getRelatedEntity(affinityLabelMap, affinityLabel, ( val) -> labelDao.getByName(((java.lang.String) (val)))); if (affLabel != null) { affinityLabels.add(affLabel); } }); return affinityLabels; }
@java.lang.Override protected void mapDbUsers() { java.util.Map<java.lang.String, java.lang.String> userDomainsMap = org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.getParameters().getDomainMap(); org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.getParameters().getDbUsers().forEach(( dbUser) -> { org.ovirt.engine.core.common.businessentities.aaa.DbUser originalDbUser = dbUserDao.getByUsernameAndDomain(dbUser.getLoginName(), dbUser.getDomain()); if (userDomainsMap != null) { java.lang.String destDomain = userDomainsMap.get(dbUser.getDomain()); if (destDomain != null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser destDbUser = dbUserDao.getByUsernameAndDomain(dbUser.getLoginName(), destDomain); if (destDbUser != null) { addPermissionsForUser(destDbUser, getParameters().getUserToRoles()); } } else if (originalDbUser != null) { addPermissionsForUser(originalDbUser, getParameters().getUserToRoles()); } } else if (originalDbUser != null) { addPermissionsForUser(originalDbUser, getParameters().getUserToRoles()); } else { org.ovirt.engine.core.common.businessentities.aaa.DbUser newDbUser = new org.ovirt.engine.core.common.businessentities.aaa.DbUser(); newDbUser.setLoginName(dbUser.getLoginName()); newDbUser.setDomain(dbUser.getDomain()); dbUserDao.save(newDbUser); org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.log.debug("User {}@{} does not exist, creating it...", newDbUser.getLoginName(), newDbUser.getDomain()); } }); }	@java.lang.Override protected void mapDbUsers() { drMappingHelper.mapDbUsers(org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.getParameters().getDomainMap(), org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.getParameters().getDbUsers(), org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.getParameters().getUserToRoles(), getVmTemplateId(), VdcObjectType.VmTemplate, org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.getParameters().getRoleMap()); }
private void writeAffinityLabels() { java.util.List<java.lang.String> affinityLabelsNames = fullEntityOvfData.getAffinityLabels(); if ((affinityLabelsNames == null) || (affinityLabelsNames.isEmpty())) { return; } _writer.writeStartElement("Section"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", "ovf:AffinityLabelsSection_Type"); affinityLabelsNames.forEach(( labelName) -> { _writer.writeStartElement(OvfProperties.AFFINITY_GROUP); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "name", labelName); _writer.writeEndElement(); }); _writer.writeEndElement(); }	private void writeAffinityLabels() { java.util.List<java.lang.String> affinityLabelsNames = fullEntityOvfData.getAffinityLabels(); if ((affinityLabelsNames == null) || (affinityLabelsNames.isEmpty())) { return; } _writer.writeStartElement("Section"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", "ovf:AffinityLabelsSection_Type"); affinityLabelsNames.forEach(( labelName) -> { _writer.writeStartElement(OvfProperties.AFFINITY_LABEL); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "name", labelName); _writer.writeEndElement(); }); _writer.writeEndElement(); }
public void enableSelectionElements(boolean enableElements) { selectHostAutomaticallyEditor.setEnabled(enableElements); selectDestinationHostEditor.setEnabled(enableElements); hostsListEditor.setEnabled(enableElements); }	private void enableSelectionElements(boolean enableElements) { selectHostAutomaticallyEditor.setEnabled(enableElements); selectDestinationHostEditor.setEnabled(enableElements); hostsListEditor.setEnabled(enableElements); }
public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> canSchedule(org.ovirt.engine.core.common.businessentities.Cluster cluster, org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.compat.Guid> vdsBlackList, java.util.List<org.ovirt.engine.core.compat.Guid> vdsWhiteList, java.util.List<java.lang.String> messages) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = vdsDao.getAllForClusterWithStatus(cluster.getId(), VDSStatus.Up); vdsList = removeBlacklistedHosts(vdsList, vdsBlackList); vdsList = keepOnlyWhitelistedHosts(vdsList, vdsWhiteList); refreshCachedPendingValues(vdsList); org.ovirt.engine.core.common.scheduling.ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId()); java.util.Map<java.lang.String, java.lang.String> parameters = createClusterPolicyParameters(cluster); vdsList = runFilters(policy.getFilters(), cluster, vdsList, vm, parameters, policy.getFilterPositionMap(), messages, noWaitingVmDelayer, false, null); return vdsList != null ? vdsList : java.util.Collections.emptyList(); }	public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> canSchedule(org.ovirt.engine.core.common.businessentities.Cluster cluster, org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.compat.Guid> vdsBlackList, java.util.List<org.ovirt.engine.core.compat.Guid> vdsWhiteList, java.util.List<java.lang.String> messages) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = vdsDao.getAllForClusterWithStatus(cluster.getId(), VDSStatus.Up); vdsList = removeBlacklistedHosts(vdsList, vdsBlackList); vdsList = keepOnlyWhitelistedHosts(vdsList, vdsWhiteList); refreshCachedPendingValues(vdsList); org.ovirt.engine.core.common.scheduling.ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId()); java.util.Map<java.lang.String, java.lang.String> parameters = createClusterPolicyParameters(cluster); vdsList = runFilters(policy.getFilters(), cluster, vdsList, vm, parameters, policy.getFilterPositionMap(), messages, noWaitingVmDelayer, false, null); return vdsList; }
void localize() { selectHostAutomaticallyEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.vmMigratePopupSelectHostAutomaticallyLabel()); selectDestinationHostEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.vmMigratePopupSelectDestinationHostLabel()); hostsListEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.vmMigratePopupHostsListLabel()); clustersEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.hostClusterVmPopup()); message1.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateHostDisabledVMsInServerClusters()); message2.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateSomeVmsAlreadyRunningOnHost()); message3.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateNoAvailableHost()); message4.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateNoAvailableHeHost()); }	private void updateSelectionElements(final org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel model) { updateMessages(model); enableSelectionElements(model.getEnableSelectionElements()); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel object) { driver.edit(object); updateMessages(object); enableSelectionElements(object.getEnableSelectionElements()); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { updateMessages(object); enableSelectionElements(object.getEnableSelectionElements()); } }); }	@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel object) { driver.edit(object); updateMessages(object); enableSelectionElements(object.getEnableSelectionElements()); object.getPropertyChangedEvent().addListener(( ev, sender, args) -> updateSelectionElements(object)); }
private void updateMessages(org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel object) { message1.setVisible((!(object.getVmsOnSameCluster()))); message2.setVisible(object.getIsSameVdsMessageVisible()); message3.setVisible(object.getNoSelAvailable()); message4.setVisible(object.getNoHeSelAvailable()); }	private void updateMessages(org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel object) { message1.setVisible((!(object.getVmsOnSameCluster()))); message2.setVisible(object.getIsSameVdsMessageVisible()); message3.setVisible(object.getNoSelAvailable()); }
private void removeUnselectableHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.compat.Guid run_on_vds, boolean allRunOnSameVds, boolean hostedEngineOnlyMigration) { if ((getVmsOnSameCluster()) && allRunOnSameVds) { org.ovirt.engine.core.common.businessentities.VDS runOnSameVDS = null; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getId().equals(run_on_vds)) { runOnSameVDS = host; } } hosts.remove(runOnSameVDS); } if (hostedEngineOnlyMigration) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> nonHeHosts = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (!(host.isHostedEngineDeployed())) { nonHeHosts.add(host); } } hosts.removeAll(nonHeHosts); } }	private void removeUnselectableHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.compat.Guid runOnVds, boolean allRunOnSameVds) { if ((getVmsOnSameCluster()) && allRunOnSameVds) { org.ovirt.engine.core.common.businessentities.VDS runOnSameVDS = null; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getId().equals(runOnVds)) { runOnSameVDS = host; } } hosts.remove(runOnSameVDS); } }
@java.lang.Override protected void onReveal() { super.onReveal(); setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.TYPE_SetSearchPanel, searchPanelPresenterWidget); setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.TYPE_SetBreadCrumbs, breadCrumbsPresenterWidget); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getView().resizeToFullHeight(); }	@java.lang.Override protected void onReveal() { super.onReveal(); setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.TYPE_SetSearchPanel, searchPanelPresenterWidget); setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.TYPE_SetBreadCrumbs, breadCrumbsPresenterWidget); if (hasActionPanelPresenterWidget()) { getTable().setActionMenus(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getActionPanelPresenterWidget().getActionButtons()); } }
@java.lang.Override protected boolean validate() { boolean returnValue = (((super.validate()) && (validate(org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.createStoragePoolValidator().existsAndUp()))) && (org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.initializeVds())) && (checkStorageDomainsInPool()); return returnValue; }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator spValidator = org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.createStoragePoolValidator(); boolean returnValue = ((((super.validate()) && (validate(spValidator.exists()))) && (validate(spValidator.isInStatus(StoragePoolStatus.Uninitialized)))) && (org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.initializeVds())) && (checkStorageDomainsInPool()); return returnValue; }
public static boolean isVmLeaseBeHotplugged(org.ovirt.engine.core.common.businessentities.VM source, org.ovirt.engine.core.common.businessentities.VM destination) { return !(java.util.Objects.equals(source.getLeaseStorageDomainId(), destination.getLeaseStorageDomainId())); }	public static boolean isVmLeaseToBeHotPluggedOrUnplugged(org.ovirt.engine.core.common.businessentities.VM source, org.ovirt.engine.core.common.businessentities.VM destination) { return !(java.util.Objects.equals(source.getLeaseStorageDomainId(), destination.getLeaseStorageDomainId())); }
private void setAuthenticatedUser(org.ovirt.engine.api.model.Api api) { org.ovirt.engine.core.common.queries.QueryReturnValue returnValue = runQuery(QueryType.GetUserBySessionId, new org.ovirt.engine.core.common.queries.QueryParametersBase()); org.ovirt.engine.core.common.businessentities.aaa.DbUser authenticatedUser = ((org.ovirt.engine.core.common.businessentities.aaa.DbUser) (returnValue.getReturnValue())); org.ovirt.engine.api.model.User user = new org.ovirt.engine.api.model.User(); user.setId(authenticatedUser.getId().toString()); org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(user); api.setAuthenticatedUser(user); }	private void setAuthenticatedUser(org.ovirt.engine.api.model.Api api) { org.ovirt.engine.core.common.queries.QueryReturnValue returnValue = runQuery(QueryType.GetUserBySessionId, new org.ovirt.engine.core.common.queries.QueryParametersBase()); org.ovirt.engine.core.common.businessentities.aaa.DbUser authenticatedUser = ((org.ovirt.engine.core.common.businessentities.aaa.DbUser) (returnValue.getReturnValue())); org.ovirt.engine.api.model.User user = new org.ovirt.engine.api.model.User(); user.setId(authenticatedUser.getId().toString()); org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(user); api.setAuthenticatedUser(user); api.setEffectiveUser(user); }
@java.lang.Override protected boolean validate() { if ((((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getId()) == null)) { return failValidation(EngineMessage.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVds(); if (host == null) { return failValidation(EngineMessage.VDS_INVALID_SERVER_ID); } if (host.isPmEnabled()) { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents = fenceAgentDao.getFenceAgentsForHost(org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVdsId()); if ((fenceAgents.size()) == 1) { return failValidation(EngineMessage.VDS_REMOVE_LAST_FENCE_AGENT_PM_ENABLED); } } return super.validate(); }	@java.lang.Override protected boolean validate() { if ((((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getId()) == null)) { return failValidation(EngineMessage.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getHostId(); org.ovirt.engine.core.common.businessentities.VDS host = vdsDao.get(vdsId); if (host == null) { return failValidation(EngineMessage.VDS_INVALID_SERVER_ID); } if (host.isPmEnabled()) { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents = fenceAgentDao.getFenceAgentsForHost(org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVdsId()); if ((fenceAgents.size()) == 1) { return failValidation(EngineMessage.VDS_REMOVE_LAST_FENCE_AGENT_PM_ENABLED); } } return super.validate(); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(dataCenter().id()); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(provider().authenticationUrl()); optional(provider().description()); optional(provider().name()); optional(provider().password()); optional(provider().requiresAuthentication()); optional(provider().tenantName()); optional(provider().username()); optional(provider().properties()[COLLECTION].name()); optional(provider().properties()[COLLECTION].value()); optional(provider().autoSync()); }
void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(dynamicMessages.ovirtVersionAbout()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.userNameAboutLabel()); }	void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(dynamicMessages.ovirtVersionAbout()); }
void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.versionAboutLabel()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.userNameAboutLabel()); }	void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); }
public boolean isHotUnplugMemory() { return hotUnplugMemory; }	public boolean isMemoryHotUnplugEnabled() { return memoryHotUnplugEnabled; }
public void setHotUnplugMemory(boolean hotUnplugMemory) { this.hotUnplugMemory = hotUnplugMemory; }	public void setMemoryHotUnplugEnabled(boolean memoryHotUnplugEnabled) { this.memoryHotUnplugEnabled = memoryHotUnplugEnabled; }
void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.versionAboutLabel()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.userNameAboutLabel()); vendorUrl.setText(dynamicMessages.vendorUrl()); vendorUrl.setHref(dynamicMessages.vendorUrl()); }	void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); vendorUrl.setText(dynamicMessages.vendorUrl()); vendorUrl.setHref(dynamicMessages.vendorUrl()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(path()); or(mandatory(host().id()), mandatory(host().name())); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(directory()); optional(filename()); or(mandatory(host().id()), mandatory(host().name())); }
@org.ovirt.api.metamodel.annotations.In java.lang.String path();	@org.ovirt.api.metamodel.annotations.In java.lang.String directory();
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(network().comment()); optional(network().description()); optional(network().display()); optional(network().ip().address()); optional(network().ip().gateway()); optional(network().ip().netmask()); optional(network().mtu()); optional(network().name()); optional(network().stp()); optional(network().vlan().id()); optional(network().externalProvider().id()); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(network().comment()); optional(network().description()); optional(network().display()); optional(network().ip().address()); optional(network().ip().gateway()); optional(network().ip().netmask()); optional(network().mtu()); optional(network().name()); optional(network().stp()); optional(network().vlan().id()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(network().id()), mandatory(network().name())); optional(network().comment()); optional(network().description()); optional(network().ip().address()); optional(network().ip().gateway()); optional(network().ip().netmask()); optional(network().mtu()); optional(network().profileRequired()); optional(network().stp()); optional(network().vlan().id()); optional(network().usages()[COLLECTION]); optional(network().externalProvider().id()); optional(network().physicalNetworkProvider().id()); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(network().id()), mandatory(network().name())); optional(network().comment()); optional(network().description()); optional(network().ip().address()); optional(network().ip().gateway()); optional(network().ip().netmask()); optional(network().mtu()); optional(network().profileRequired()); optional(network().stp()); optional(network().vlan().id()); optional(network().usages()[COLLECTION]); optional(network().externalProvider().id()); optional(network().externalProviderPhysicalNetwork().id()); }
@org.ovirt.api.metamodel.annotations.Link types.Network physicalNetworkProvider();	@org.ovirt.api.metamodel.annotations.Link types.Network externalProviderPhysicalNetwork();
public void setClientIp(java.lang.String clientIp) { this.clientIp = clientIp; }	public void setSourceAddr(java.lang.String sourceAddr) { this.sourceAddr = sourceAddr; }
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { org.ovirt.engine.core.aaa.servlet.SsoLoginServlet.log.debug("Entered SsoLoginServlet"); java.lang.String scope = java.lang.String.format("ovirt-app-admin ovirt-app-portal ovirt-ext=auth:sequence-priority=%s", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty(authSequencePriorityPropertyName)); java.lang.String redirectUri = java.lang.String.format("%s://%s:%s%s", request.getScheme(), org.ovirt.engine.core.aaa.filters.FiltersHelper.getRedirectUriServerName(request.getServerName()), request.getServerPort(), postActionUrl); org.ovirt.engine.core.uutils.net.URLBuilder urlBuilder = new org.ovirt.engine.core.uutils.net.URLBuilder(org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineSsoUrl(request), "/oauth/authorize").addParameter("client_id", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_CLIENT_ID")).addParameter("response_type", "code").addParameter("app_url", request.getParameter("app_url")).addParameter("engine_url", org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineUrl(request)).addParameter("redirect_uri", redirectUri).addParameter("scope", scope).addParameter("client_ip", request.getRemoteAddr()); if (org.apache.commons.lang.StringUtils.isNotEmpty(request.getParameter("sso_token"))) { urlBuilder.addParameter("sso_token", request.getParameter("sso_token")); } java.lang.String url = urlBuilder.build(); org.ovirt.engine.core.aaa.servlet.SsoLoginServlet.log.debug("Redirecting to '{}'", url); response.sendRedirect(url); }	@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { org.ovirt.engine.core.aaa.servlet.SsoLoginServlet.log.debug("Entered SsoLoginServlet"); java.lang.String scope = java.lang.String.format("ovirt-app-admin ovirt-app-portal ovirt-ext=auth:sequence-priority=%s", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty(authSequencePriorityPropertyName)); java.lang.String redirectUri = java.lang.String.format("%s://%s:%s%s", request.getScheme(), org.ovirt.engine.core.aaa.filters.FiltersHelper.getRedirectUriServerName(request.getServerName()), request.getServerPort(), postActionUrl); org.ovirt.engine.core.uutils.net.URLBuilder urlBuilder = new org.ovirt.engine.core.uutils.net.URLBuilder(org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineSsoUrl(request), "/oauth/authorize").addParameter("client_id", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_CLIENT_ID")).addParameter("response_type", "code").addParameter("app_url", request.getParameter("app_url")).addParameter("engine_url", org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineUrl(request)).addParameter("redirect_uri", redirectUri).addParameter("scope", scope).addParameter("source_addr", request.getRemoteAddr()); if (org.apache.commons.lang.StringUtils.isNotEmpty(request.getParameter("sso_token"))) { urlBuilder.addParameter("sso_token", request.getParameter("sso_token")); } java.lang.String url = urlBuilder.build(); org.ovirt.engine.core.aaa.servlet.SsoLoginServlet.log.debug("Redirecting to '{}'", url); response.sendRedirect(url); }
private static java.lang.String mapPluginType(java.lang.String entity, org.ovirt.engine.api.model.OpenStackNetworkProviderType type) { if ((type == (org.ovirt.engine.api.model.OpenStackNetworkProviderType.EXTERNAL)) || (OpenstackNetworkPluginType.OPEN_VSWITCH.name().equalsIgnoreCase(entity))) { return entity; } throw new java.lang.IllegalArgumentException((("Unknown network plugin type \"" + entity) + "\"")); }	private static java.lang.String mapPluginType(org.ovirt.engine.api.model.NetworkPluginType pluginType) { if (pluginType == (org.ovirt.engine.api.model.NetworkPluginType.OPEN_VSWITCH)) { return OpenstackNetworkPluginType.OPEN_VSWITCH.name(); } throw new java.lang.IllegalArgumentException((("Unknown Neutron network plugin type \"" + pluginType) + "\"")); }
@java.lang.Override protected org.ovirt.engine.api.model.OpenStackNetworkProvider postPopulate(org.ovirt.engine.api.model.OpenStackNetworkProvider model) { model.setType(OpenStackNetworkProviderType.NEUTRON); model.setPluginType(OpenstackNetworkPluginType.OPEN_VSWITCH.toString()); org.ovirt.engine.api.model.AgentConfiguration agentConfiguration = model.getAgentConfiguration(); agentConfiguration.setBrokerType(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.MessageBrokerType.class)); return model; }	@java.lang.Override protected org.ovirt.engine.api.model.OpenStackNetworkProvider postPopulate(org.ovirt.engine.api.model.OpenStackNetworkProvider model) { model.setType(OpenStackNetworkProviderType.NEUTRON); model.setPluginType(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.NetworkPluginType.class)); org.ovirt.engine.api.model.AgentConfiguration agentConfiguration = model.getAgentConfiguration(); agentConfiguration.setBrokerType(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.MessageBrokerType.class)); return model; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.ArchitectureType.class, to = org.ovirt.engine.api.model.Architecture.class) public static org.ovirt.engine.api.model.Architecture map(org.ovirt.engine.core.common.businessentities.ArchitectureType model, java.lang.String template) { if (model != null) { switch (model) { case undefined : return org.ovirt.engine.api.model.Architecture.UNDEFINED; case x86_64 : return org.ovirt.engine.api.model.Architecture.X86_64; case ppc64 : return org.ovirt.engine.api.model.Architecture.PPC64; case s390 : return org.ovirt.engine.api.model.Architecture.S390; default : return null; } } return null; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.ArchitectureType.class, to = org.ovirt.engine.api.model.Architecture.class) public static org.ovirt.engine.api.model.Architecture map(org.ovirt.engine.core.common.businessentities.ArchitectureType model, java.lang.String template) { if (model != null) { switch (model) { case undefined : return org.ovirt.engine.api.model.Architecture.UNDEFINED; case x86_64 : return org.ovirt.engine.api.model.Architecture.X86_64; case ppc64 : return org.ovirt.engine.api.model.Architecture.PPC64; case s390x : return org.ovirt.engine.api.model.Architecture.S390X; default : return null; } } return null; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Architecture.class, to = org.ovirt.engine.core.common.businessentities.ArchitectureType.class) public static org.ovirt.engine.core.common.businessentities.ArchitectureType map(org.ovirt.engine.api.model.Architecture model, org.ovirt.engine.core.common.businessentities.ArchitectureType template) { if (model != null) { switch (model) { case UNDEFINED : return org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined; case X86_64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.x86_64; case PPC64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64; case S390 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.s390; default : return null; } } return null; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Architecture.class, to = org.ovirt.engine.core.common.businessentities.ArchitectureType.class) public static org.ovirt.engine.core.common.businessentities.ArchitectureType map(org.ovirt.engine.api.model.Architecture model, org.ovirt.engine.core.common.businessentities.ArchitectureType template) { if (model != null) { switch (model) { case UNDEFINED : return org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined; case X86_64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.x86_64; case PPC64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64; case S390X : return org.ovirt.engine.core.common.businessentities.ArchitectureType.s390x; default : return null; } } return null; }
@java.lang.Override protected void onHide() { getTable().hideContextMenu(); breadCrumbsPresenterWidget.rebuildBreadCrumbs(); }	@java.lang.Override protected void onHide() { getTable().hideContextMenu(); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getView().resizeToFullHeight(); breadCrumbsPresenterWidget.rebuildBreadCrumbs(); }
protected void popuplateSwappedList() { java.lang.String swappedColumnKey = getSwappedColumnListKey(); if (swappedColumnKey != null) { java.lang.String swappedColumns = clientStorage.getLocalItem(swappedColumnKey); if (swappedColumns != null) { java.lang.String[] split = swappedColumns.split(","); for (int i = 0; i < (split.length); i++) { java.lang.String[] tupel = split[i].split("="); if ((tupel.length) == 2) { realToSwappedIndexes.put(java.lang.Integer.valueOf(tupel[1]), java.lang.Integer.valueOf(tupel[0])); maxSwappedIndex = java.lang.Math.max(maxSwappedIndex, java.lang.Integer.valueOf(tupel[0])); } } } } }	protected void popuplateSwappedList() { java.lang.String swappedColumnKey = getSwappedColumnListKey(); if (swappedColumnKey != null) { java.lang.String swappedColumns = clientStorage.getLocalItem(swappedColumnKey); if (swappedColumns != null) { java.lang.String[] split = swappedColumns.split(","); for (int i = 0; i < (split.length); i++) { java.lang.String[] tuple = split[i].split("="); if ((tuple.length) == 2) { realToSwappedIndexes.put(java.lang.Integer.parseInt(tuple[1]), java.lang.Integer.parseInt(tuple[0])); maxSwappedIndex = java.lang.Math.max(maxSwappedIndex, java.lang.Integer.parseInt(tuple[0])); } } } } }
java.lang.String parseVolumeIdFromPath(java.lang.String path) { if (org.apache.commons.lang.StringUtils.isEmpty(path)) { return ""; } int slashIndex = path.lastIndexOf("/"); if (slashIndex == (-1)) { return ""; } return path.substring((slashIndex + 1)); }	java.lang.String parseVolumeIdFromPath(java.lang.String path) { return parsePathSegment(path, 1); }
private boolean isDomainXmlEnabledForVds() { return ((boolean) (org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DomainXML, vmDao.get(org.ovirt.engine.core.bll.MergeStatusCommand.getParameters().getVmId()).getCompatibilityVersion().toString()))); }	private boolean isDomainXmlEnabledForVds() { return org.ovirt.engine.core.common.FeatureSupported.isDomainXMLSupported(resourceManager.getVdsManager(org.ovirt.engine.core.bll.MergeStatusCommand.getParameters().getVdsId()).getCompatibilityVersion()); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.ImageTransfer.class, to = org.ovirt.engine.api.model.ImageTransfer.class) public static org.ovirt.engine.api.model.ImageTransfer map(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, org.ovirt.engine.api.model.ImageTransfer template) { org.ovirt.engine.api.model.ImageTransfer model = (template != null) ? template : new org.ovirt.engine.api.model.ImageTransfer(); if ((entity.getId()) != null) { model.setId(entity.getId().toString()); } if ((entity.getVdsId()) != null) { model.setHost(new org.ovirt.engine.api.model.Host()); model.getHost().setId(entity.getVdsId().toString()); } if ((entity.getDiskId()) != null) { model.setImage(new org.ovirt.engine.api.model.Image()); model.getImage().setId(entity.getDiskId().toString()); } if (((entity.getProxyUri()) != null) && ((entity.getImagedTicketId()) != null)) { model.setProxyUrl(entity.getClientURLForTransfer()); } if ((entity.getSignedTicket()) != null) { model.setSignedTicket(entity.getSignedTicket()); } if ((entity.getPhase()) != null) { model.setPhase(org.ovirt.engine.api.restapi.types.ImageTransferMapper.mapPhase(entity.getPhase())); } if ((entity.getActive()) != null) { model.setActive(entity.getActive()); } if ((entity.getType()) != null) { model.setDirection(org.ovirt.engine.api.restapi.types.ImageTransferMapper.mapType(entity.getType())); } return model; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.ImageTransfer.class, to = org.ovirt.engine.api.model.ImageTransfer.class) public static org.ovirt.engine.api.model.ImageTransfer map(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, org.ovirt.engine.api.model.ImageTransfer template) { org.ovirt.engine.api.model.ImageTransfer model = (template != null) ? template : new org.ovirt.engine.api.model.ImageTransfer(); if ((entity.getId()) != null) { model.setId(entity.getId().toString()); } if ((entity.getVdsId()) != null) { model.setHost(new org.ovirt.engine.api.model.Host()); model.getHost().setId(entity.getVdsId().toString()); } if ((entity.getDiskId()) != null) { model.setImage(new org.ovirt.engine.api.model.Image()); model.getImage().setId(entity.getDiskId().toString()); } if (((entity.getProxyUri()) != null) && ((entity.getImagedTicketId()) != null)) { model.setProxyUrl(entity.getClientURLForTransfer()); } if ((entity.getSignedTicket()) != null) { model.setSignedTicket(entity.getSignedTicket()); } if ((entity.getPhase()) != null) { model.setPhase(org.ovirt.engine.api.restapi.types.ImageTransferMapper.mapPhase(entity.getPhase())); } if ((entity.getActive()) != null) { model.setActive(entity.getActive()); } if ((entity.getType()) != null) { model.setDirection(org.ovirt.engine.api.restapi.types.ImageTransferMapper.mapDirection(entity.getType())); } return model; }
private static org.ovirt.engine.api.model.ImageTransferDirection mapType(org.ovirt.engine.core.common.businessentities.storage.TransferType type) { switch (type) { case Download : return org.ovirt.engine.api.model.ImageTransferDirection.DOWNLOAD; case Upload : return org.ovirt.engine.api.model.ImageTransferDirection.UPLOAD; default : return null; } }	private static org.ovirt.engine.api.model.ImageTransferDirection mapDirection(org.ovirt.engine.core.common.businessentities.storage.TransferType type) { switch (type) { case Download : return org.ovirt.engine.api.model.ImageTransferDirection.DOWNLOAD; case Upload : return org.ovirt.engine.api.model.ImageTransferDirection.UPLOAD; default : return null; } }
private void storeSwappedIndexMap() { java.lang.String value = ""; int i = 0; for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> entry : realToSwappedIndexes.entrySet()) { if (i > 0) { value += ","; } i++; value += ((entry.getValue()) + "=") + (entry.getKey()); } if (!("".equals(value))) { java.lang.String swappedColumnKey = getSwappedColumnListKey(); if (swappedColumnKey != null) { clientStorage.setLocalItem(swappedColumnKey, value); } } }	private void storeSwappedIndexMap() { java.lang.StringBuffer value = new java.lang.StringBuffer(); int i = 0; for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> entry : realToSwappedIndexes.entrySet()) { if (i > 0) { value.append(","); } i++; value.append(entry.getValue()); value.append("="); value.append(entry.getKey()); } if (!("".equals(value.toString()))) { java.lang.String swappedColumnKey = getSwappedColumnListKey(); if (swappedColumnKey != null) { clientStorage.setLocalItem(swappedColumnKey, value.toString()); } } }
protected void cluster_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster().getSelectedItem(); if (cluster == null) { return; } getFencingEnabled().setEntity(cluster.getFencingPolicy().isFencingEnabled()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getPmTypeList(new org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncQuery(( pmTypes) -> updatePmTypeList(pmTypes)), cluster.getCompatibilityVersion()); if (((getDataCenter()) != null) && ((getDataCenter().getItems()) != null)) { for (org.ovirt.engine.core.common.businessentities.StoragePool datacenter : getDataCenter().getItems()) { if (datacenter.getId().equals(cluster.getStoragePoolId())) { getDataCenter().setSelectedItem(datacenter, false); break; } } } final org.ovirt.engine.core.common.utils.CpuVendor newCpuVendor = getCurrentCpuVendor(); if ((newCpuVendor != null) && (!(newCpuVendor.equals(lastNonNullCpuVendor)))) { lastNonNullCpuVendor = newCpuVendor; cpuVendorChanged(); } getHostedEngineWarning().setIsAvailable(cluster.getCompatibilityVersion().less(Version.v4_0)); getNetworkProviderModel().setDefaultProviderById(cluster.getDefaultNetworkProviderId()); }	protected void cluster_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster().getSelectedItem(); if (cluster == null) { return; } getFencingEnabled().setEntity(cluster.getFencingPolicy().isFencingEnabled()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getPmTypeList(new org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncQuery(( pmTypes) -> updatePmTypeList(pmTypes)), cluster.getCompatibilityVersion()); if (((getDataCenter()) != null) && ((getDataCenter().getItems()) != null)) { for (org.ovirt.engine.core.common.businessentities.StoragePool datacenter : getDataCenter().getItems()) { if (datacenter.getId().equals(cluster.getStoragePoolId())) { getDataCenter().setSelectedItem(datacenter, false); break; } } } final org.ovirt.engine.core.common.utils.CpuVendor newCpuVendor = getCurrentCpuVendor(); if ((newCpuVendor != null) && (!(newCpuVendor.equals(lastNonNullCpuVendor)))) { lastNonNullCpuVendor = newCpuVendor; cpuVendorChanged(); } getHostedEngineWarning().setIsAvailable(cluster.getCompatibilityVersion().less(Version.v4_0)); getNetworkProviderModel().setDefaultProviderId(cluster.getDefaultNetworkProviderId()); }
public void setDefaultProviderById(org.ovirt.engine.core.compat.Guid defaultProviderId) { org.ovirt.engine.core.common.businessentities.Provider updatedDefaultProvider = getNetworkProviders().getItems().stream().filter(( provider) -> provider != null).filter(( provider) -> provider.getId().equals(defaultProviderId)).findFirst().orElse(null); if (((defaultProvider) == null) || (defaultProvider.equals(getNetworkProviders().getSelectedItem()))) { getNetworkProviders().setSelectedItem(updatedDefaultProvider); defaultProvider = updatedDefaultProvider; } }	private void selectDefaultProvider() { if (((getNetworkProviders().getItems()) != null) && (getUseClusterDefaultNetworkProvider().getEntity())) { org.ovirt.engine.core.common.businessentities.Provider defaultProvider = getNetworkProviders().getItems().stream().filter(( provider) -> provider != null).filter(( provider) -> provider.getId().equals(defaultProviderId)).findFirst().orElse(null); getNetworkProviders().setSelectedItem(defaultProvider); } }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(cluster()); optional(registrationConfiguration()); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(optional(cluster().id()), optional(cluster().name())); optional(registrationConfiguration()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(cluster()); optional(clone()); optional(exclusive()); optional(template().name()); or(optional(storageDomain().id()), optional(storageDomain().name())); optional(vm().diskAttachments()[COLLECTION].id()); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(optional(cluster().id()), optional(cluster().name())); optional(clone()); optional(exclusive()); optional(template().name()); or(optional(storageDomain().id()), optional(storageDomain().name())); optional(vm().diskAttachments()[COLLECTION].id()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(cluster()); optional(clone()); optional(exclusive()); optional(vm().name()); or(optional(storageDomain().id()), optional(storageDomain().name())); optional(vm().diskAttachments()[COLLECTION].disk().format()); optional(vm().diskAttachments()[COLLECTION].id()); optional(vm().diskAttachments()[COLLECTION].disk().sparse()); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(optional(cluster().id()), optional(cluster().name())); optional(clone()); optional(exclusive()); optional(vm().name()); or(optional(storageDomain().id()), optional(storageDomain().name())); optional(vm().diskAttachments()[COLLECTION].disk().format()); optional(vm().diskAttachments()[COLLECTION].id()); optional(vm().diskAttachments()[COLLECTION].disk().sparse()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(cluster()); optional(clone()); optional(exclusive()); optional(template().name()); optional(registrationConfiguration()); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(optional(cluster().id()), optional(cluster().name())); optional(clone()); optional(exclusive()); optional(template().name()); optional(registrationConfiguration()); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadataDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(4), guids.get(5)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(4), guids.get(5)); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMetadataDisk(org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(guids.get(4)); memoryDisk.setImageId(guids.get(5)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(( d) -> d.isWipeAfterDelete())); return memoryDisk; }	private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadataDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(4), guids.get(5)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(4), guids.get(5)); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMetadataDisk(org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(guids.get(4)); memoryDisk.setImageId(guids.get(5)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(DiskImage::isWipeAfterDelete)); return memoryDisk; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(2), guids.get(3)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(2), guids.get(3)); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMemoryDisk(vm, sd.getStorageType(), vmOverheadCalculator, org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(guids.get(2)); memoryDisk.setImageId(guids.get(3)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(( d) -> d.isWipeAfterDelete())); return memoryDisk; }	private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(2), guids.get(3)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(2), guids.get(3)); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMemoryDisk(vm, sd.getStorageType(), vmOverheadCalculator, org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(guids.get(2)); memoryDisk.setImageId(guids.get(3)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(DiskImage::isWipeAfterDelete)); return memoryDisk; }
private org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getSnapshotType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.StatelessSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm()); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().isSaveMemory()) && (isLiveSnapshotApplicable())) { boolean wipeAfterDelete = getDisksList().stream().anyMatch(( d) -> d.isWipeAfterDelete()); return new org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getStoragePool(), this, vmOverheadCalculator, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDescription(), wipeAfterDelete); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }	private org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getSnapshotType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.StatelessSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm()); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().isSaveMemory()) && (isLiveSnapshotApplicable())) { boolean wipeAfterDelete = getDisksList().stream().anyMatch(DiskImage::isWipeAfterDelete); return new org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getStoragePool(), this, vmOverheadCalculator, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDescription(), wipeAfterDelete); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }
private java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> getLuns(boolean selectedLuns, boolean includedLuns) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = new java.util.ArrayList<>(); if ((getItems()) != null) { if (getIsGrouppedByTarget()) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel> items = ((java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel>) (getItems())); for (org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel item : items) { aggregateAddedLuns(item.getLuns(), selectedLuns, includedLuns, luns); } } else { java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> items = ((java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>) (getItems())); aggregateAddedLuns(items, selectedLuns, includedLuns, luns); } } return luns; }	private java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> getLuns(boolean selectedLuns, boolean includedLuns) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = new java.util.ArrayList<>(); if (getIsGrouppedByTarget()) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel> items = ((java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel>) (getItems())); for (org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel item : items) { aggregateAddedLuns(item.getLuns(), selectedLuns, includedLuns, luns); } } else { java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> items = ((java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>) (getItems())); aggregateAddedLuns(items, selectedLuns, includedLuns, luns); } return luns; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadaaDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.utils.GuidUtils.getGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(4), guids.get(5)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(4), guids.get(5)); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createMetadataDisk(); memoryDisk.setId(guids.get(4)); memoryDisk.setImageId(guids.get(5)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(DiskImage::isWipeAfterDelete)); return memoryDisk; }	private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadaaDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.utils.GuidUtils.getGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(4), guids.get(5)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(4), guids.get(5)); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createMetadataDisk(); memoryDisk.setId(guids.get(4)); memoryDisk.setImageId(guids.get(5)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(getImages().stream().anyMatch(DiskImage::isWipeAfterDelete)); return memoryDisk; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { switch (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getActionState()) { case END_FAILURE : return org.ovirt.engine.core.common.AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED; default : return org.ovirt.engine.core.common.AuditLogType.UNASSIGNED; } }	@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getActionState()) == (org.ovirt.engine.core.bll.CommandActionState.END_FAILURE) ? org.ovirt.engine.core.common.AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED : org.ovirt.engine.core.common.AuditLogType.UNASSIGNED; }
private void onMaintenance() { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain item : getSelectedItems()) { org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters parameters = new org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(); parameters.setStorageDomainId(getEntity().getId()); parameters.setForceMaintenance(confirmModel.getForce().getEntity()); if ((item.getStoragePoolId()) != null) { parameters.setStoragePoolId(item.getStoragePoolId()); } list.add(parameters); } final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); confirmationModel.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.DeactivateStorageDomainWithOvfUpdate, list, ( result) -> { confirmationModel.stopProgress(); setWindow(null); }, null); }	private void onMaintenance() { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain item : getSelectedItems()) { org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters parameters = new org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(); parameters.setStorageDomainId(getEntity().getId()); parameters.setForceMaintenance(confirmationModel.getForce().getEntity()); if ((item.getStoragePoolId()) != null) { parameters.setStoragePoolId(item.getStoragePoolId()); } list.add(parameters); } confirmationModel.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.DeactivateStorageDomainWithOvfUpdate, list, ( result) -> { confirmationModel.stopProgress(); setWindow(null); }, null); }
@java.lang.Override public javax.ws.rs.core.Response deactivate(org.ovirt.engine.api.model.Action action) { boolean forceMaintenance = ((action.isForce()) == null) ? false : action.isForce(); return doAction(ActionType.DeactivateStorageDomainWithOvfUpdate, new org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(guid, dataCenterId, forceMaintenance), action); }	@java.lang.Override public javax.ws.rs.core.Response deactivate(org.ovirt.engine.api.model.Action action) { boolean forceMaintenance = (action.isSetForce()) ? action.isForce() : false; return doAction(ActionType.DeactivateStorageDomainWithOvfUpdate, new org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(guid, dataCenterId, forceMaintenance), action); }
@java.lang.Override protected void endWithFailure() { if ((commandCoordinatorUtil.getCommandExecutionStatus(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCommandId())) != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { changeStorageDomainStatusInTransaction(loadStoragePoolIsoMap(), StorageDomainStatus.Unknown); auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_OVF_UPDATE_INCOMPLETE); } else { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Active, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }	@java.lang.Override protected void endWithFailure() { if ((commandCoordinatorUtil.getCommandExecutionStatus(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCommandId())) != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { changeStorageDomainStatusInTransaction(loadStoragePoolIsoMap(), StorageDomainStatus.Unknown); auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_OVF_UPDATE_INCOMPLETE); } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }
@java.lang.Override protected void endWithFailure() { if ((commandCoordinatorUtil.getCommandExecutionStatus(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCommandId())) != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { changeStorageDomainStatusInTransaction(loadStoragePoolIsoMap(), StorageDomainStatus.Unknown); auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_OVF_UPDATE_INCOMPLETE); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getReturnValue().setEndActionTryAgain(false); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(false); } else if (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getParameters().isForceMaintenance()) { executeDeactivateCommand(); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); } else { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Active, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getReturnValue().setEndActionTryAgain(false); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(false); } }	@java.lang.Override protected void endWithFailure() { if ((commandCoordinatorUtil.getCommandExecutionStatus(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCommandId())) != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { changeStorageDomainStatusInTransaction(loadStoragePoolIsoMap(), StorageDomainStatus.Unknown); auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_OVF_UPDATE_INCOMPLETE); } else if (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getParameters().isForceMaintenance()) { executeDeactivateCommand(); } else { auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED); } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }
private void onMaintenance() { java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain item : getSelectedItems()) { org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters parameters = new org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(); parameters.setStorageDomainId(getEntity().getId()); parameters.setForceMaintenance(false); if ((item.getStoragePoolId()) != null) { parameters.setStoragePoolId(item.getStoragePoolId()); } list.add(parameters); } final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); confirmationModel.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.DeactivateStorageDomainWithOvfUpdate, list, ( result) -> { confirmationModel.stopProgress(); setWindow(null); }, null); }	private void onMaintenance() { java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain item : getSelectedItems()) { org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters parameters = new org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(); parameters.setStorageDomainId(getEntity().getId()); if ((item.getStoragePoolId()) != null) { parameters.setStoragePoolId(item.getStoragePoolId()); } list.add(parameters); } final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); confirmationModel.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.DeactivateStorageDomainWithOvfUpdate, list, ( result) -> { confirmationModel.stopProgress(); setWindow(null); }, null); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { switch (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getActionState()) { case END_FAILURE : return org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.UNASSIGNED : org.ovirt.engine.core.common.AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED; default : return org.ovirt.engine.core.common.AuditLogType.UNASSIGNED; } }	@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.common.AuditLogType.UNASSIGNED; }
private void handlePaused(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { periodicPauseLog(context.entity, context.iterationTimestamp); if ((context.entity.getImagedTicketId()) != null) { extendTicketIfNecessary(context); } }	private void handlePaused(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { periodicPauseLog(context.entity, context.iterationTimestamp); }
private void pollTransferStatus(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((((context.entity.getVdsId()) == null) || ((context.entity.getImagedTicketId()) == null)) || (!(org.ovirt.engine.core.common.FeatureSupported.getImageTicketSupported(vdsDao.get(context.entity.getVdsId()).getClusterCompatibilityVersion())))) { return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer = updateTransferStatusWithImageTicket(context.entity); if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { finalizeDownloadIfNecessary(context, upToDateImageTransfer); } }	private void pollTransferStatus(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((((context.entity.getVdsId()) == null) || ((context.entity.getImagedTicketId()) == null)) || (!(org.ovirt.engine.core.common.FeatureSupported.getImageTicketSupported(vdsDao.get(context.entity.getVdsId()).getClusterCompatibilityVersion())))) { return; } org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation ticketInfo; try { ticketInfo = ((org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation) (runVdsCommand(VDSCommandType.GetImageTicket, new org.ovirt.engine.core.common.vdscommands.GetImageTicketVDSCommandParameters(context.entity.getVdsId(), context.entity.getImagedTicketId())).getReturnValue())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Could not get image ticket '{}' from vdsm", context.entity.getImagedTicketId(), e); updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer = updateTransferStatusWithTicketInformation(context.entity, ticketInfo); if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { finalizeDownloadIfNecessary(context, upToDateImageTransfer); } }
private org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateTransferStatusWithImageTicket(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer oldImageTransfer) { org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation ticketInfo = ((org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation) (runVdsCommand(VDSCommandType.GetImageTicket, new org.ovirt.engine.core.common.vdscommands.GetImageTicketVDSCommandParameters(oldImageTransfer.getVdsId(), oldImageTransfer.getImagedTicketId())).getReturnValue())); if ((!(java.util.Objects.equals(oldImageTransfer.getActive(), ticketInfo.isActive()))) || (!(java.util.Objects.equals(oldImageTransfer.getBytesSent(), ticketInfo.getTransferred())))) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updatesFromTicket = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); updatesFromTicket.setBytesSent(ticketInfo.getTransferred()); updatesFromTicket.setActive(ticketInfo.isActive()); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId(), updatesFromTicket)); if ((returnValue == null) || (!(returnValue.getSucceeded()))) { log.debug("Failed to update transfer status."); return oldImageTransfer; } return returnValue.getActionReturnValue(); } return oldImageTransfer; }	private org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateTransferStatusWithTicketInformation(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer oldImageTransfer, org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation ticketInfo) { if ((!(java.util.Objects.equals(oldImageTransfer.getActive(), ticketInfo.isActive()))) || (!(java.util.Objects.equals(oldImageTransfer.getBytesSent(), ticketInfo.getTransferred())))) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updatesFromTicket = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); updatesFromTicket.setBytesSent(ticketInfo.getTransferred()); updatesFromTicket.setActive(ticketInfo.isActive()); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId(), updatesFromTicket)); if ((returnValue == null) || (!(returnValue.getSucceeded()))) { log.debug("Failed to update transfer status."); return oldImageTransfer; } return returnValue.getActionReturnValue(); } return oldImageTransfer; }
java.lang.String ACTION_TYPE_FAILED_PROVIDER_USED_IN_CLUSTER_MULTIPLE_TIMES();	java.lang.String ACTION_TYPE_FAILED_QUOTA_NOT_DEFINED_FOR_CLUSTER();
java.lang.String ACTION_TYPE_FAILED_PROVIDER_USED_IN_CLUSTER_ONCE();	java.lang.String ACTION_TYPE_FAILED_PROVIDER_USED_IN_CLUSTER();
public org.ovirt.engine.core.bll.ValidationResult providerIsNoDefaultProvider() { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllClustersByDefaultNetworkProviderId(provider.getId()); return clusters.isEmpty() ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(getProviderUsedInClusterValidationMessage(clusters.size()), org.ovirt.engine.core.utils.ReplacementUtils.replaceWithNameable("CLUSTER_NAMES", clusters)); }	public org.ovirt.engine.core.bll.ValidationResult providerIsNoDefaultProvider() { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllClustersByDefaultNetworkProviderId(provider.getId()); return clusters.isEmpty() ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PROVIDER_USED_IN_CLUSTER, org.ovirt.engine.core.utils.ReplacementUtils.replaceWithNameable("CLUSTER_NAMES", clusters)); }
private org.ovirt.engine.api.model.IscsiDetails mapLogicalUnitToIscsiDetails(org.ovirt.engine.api.model.LogicalUnit logicalUnit) { org.ovirt.engine.api.model.IscsiDetails iscsiDetails = new org.ovirt.engine.api.model.IscsiDetails(); iscsiDetails.setAddress(logicalUnit.getAddress()); iscsiDetails.setPort(logicalUnit.getPort()); iscsiDetails.setTarget(logicalUnit.getTarget()); return iscsiDetails; }	private org.ovirt.engine.api.model.IscsiDetails mapLogicalUnitToIscsiDetails(org.ovirt.engine.api.model.LogicalUnit logicalUnit) { org.ovirt.engine.api.model.IscsiDetails iscsiDetails = new org.ovirt.engine.api.model.IscsiDetails(); iscsiDetails.setAddress(logicalUnit.getAddress()); iscsiDetails.setPort(logicalUnit.getPort()); iscsiDetails.setTarget(logicalUnit.getTarget()); iscsiDetails.setPortal(logicalUnit.getPortal()); iscsiDetails.setPaths(logicalUnit.getPaths()); iscsiDetails.setVendorId(logicalUnit.getVendorId()); iscsiDetails.setProductId(logicalUnit.getProductId()); iscsiDetails.setSerial(logicalUnit.getSerial()); return iscsiDetails; }
private javax.ws.rs.core.Response performCreate(org.ovirt.engine.api.model.ImageTransfer imageTransfer, org.ovirt.engine.core.common.action.TransferDiskImageParameters params) { updateTransferType(imageTransfer, params); if (imageTransfer.isSetHost()) { params.setVdsId(org.ovirt.engine.core.compat.Guid.createGuidFromString(imageTransfer.getHost().getId())); } return performCreate(ActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }	private javax.ws.rs.core.Response performCreate(org.ovirt.engine.api.model.ImageTransfer imageTransfer, org.ovirt.engine.core.common.action.TransferDiskImageParameters params) { updateTransferType(imageTransfer, params); if ((imageTransfer.isSetHost()) && (imageTransfer.getHost().isSetId())) { params.setVdsId(org.ovirt.engine.core.compat.Guid.createGuidFromString(imageTransfer.getHost().getId())); } return performCreate(ActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskForVolumeInfo(org.ovirt.engine.core.common.businessentities.storage.DiskImage disk) { return diskImageDao.getAncestor(disk.getImageId()); }	private org.ovirt.engine.core.common.businessentities.storage.DiskImage map(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { org.ovirt.engine.core.common.businessentities.storage.DiskImage destination = org.ovirt.engine.core.common.businessentities.storage.DiskImage.copyOf(image); destination.setParentId(VmTemplateHandler.BLANK_VM_TEMPLATE_ID); destination.setImageTemplateId(VmTemplateHandler.BLANK_VM_TEMPLATE_ID); destination.setVmSnapshotId(null); destination.setActive(true); destination.setVolumeFormat(VolumeFormat.COW); destination.setVolumeType(VolumeType.Sparse); destination.setCreationDate(new java.util.Date()); destination.setId(org.ovirt.engine.core.compat.Guid.newGuid()); destination.setImageId(org.ovirt.engine.core.compat.Guid.newGuid()); destination.setDiskAlias(image.getDiskAlias()); destination.setDiskDescription(image.getDiskDescription()); return destination; }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = getDisks(); }	@java.lang.Override protected void executeCommand() { java.lang.String path = org.ovirt.engine.core.bll.exportimport.ExportOvaCommand.getParameters().getDirectory(); if (path.endsWith("/")) { org.ovirt.engine.core.bll.exportimport.ExportOvaCommand.getParameters().setDirectory(path.substring(0, ((path.length()) - 1))); } if (org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.exportimport.ExportOvaCommand.getParameters().getName())) { org.ovirt.engine.core.bll.exportimport.ExportOvaCommand.getParameters().setName(java.lang.String.format("%s.ova", org.ovirt.engine.core.bll.exportimport.ExportOvaCommand.getVm().getName())); } createTemporaryDisks(); org.ovirt.engine.core.bll.exportimport.ExportOvaCommand.setSucceeded(true); }
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.column.Context context, org.ovirt.engine.ui.uicommonweb.models.storage.LunModel value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { int additionalAvailableSizeSize = value.getAdditionalAvailableSize(); java.lang.String additionalAvailableSizeSizeString = org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.messages.additionalAvailableSizeInGB(additionalAvailableSizeSize); boolean isGrayedOut = value.getIsGrayedOut(); java.lang.String inputId = id + "_input"; com.google.gwt.safehtml.shared.SafeHtml input = null; if ((!isGrayedOut) && (!(value.getIsSelected()))) { input = templates.toggledUp(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.constants.addSanStorage()); } else if (!isGrayedOut) { input = templates.toggledDown(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.constants.addSanStorage()); } else if (!(value.getIsIncluded())) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.uiConstants.notAvailableLabel(), "color:gray", inputId); } else if (additionalAvailableSizeSize == 0) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.constants.cannotExtendSanStorage(), "color:gray", inputId); } else if (value.isAdditionalAvailableSizeSelected()) { input = templates.toggledDown(inputId, additionalAvailableSizeSizeString); } else { input = templates.toggledUp(inputId, additionalAvailableSizeSizeString); } sb.append(templates.span(id, input)); }	@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.column.Context context, org.ovirt.engine.ui.uicommonweb.models.storage.LunModel value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { int availableSizeToAdd = value.getAdditionalAvailableSize(); java.lang.String availableSizeToAddString = org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.messages.additionalAvailableSizeInGB(availableSizeToAdd); boolean isGrayedOut = value.getIsGrayedOut(); java.lang.String inputId = id + "_input"; com.google.gwt.safehtml.shared.SafeHtml input = null; if ((!isGrayedOut) && (!(value.getIsSelected()))) { input = templates.toggledUp(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.constants.addSanStorage()); } else if (!isGrayedOut) { input = templates.toggledDown(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.constants.addSanStorage()); } else if (!(value.getIsIncluded())) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.uiConstants.notAvailableLabel(), "color:gray", inputId); } else if (availableSizeToAdd == 0) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.constants.cannotExtendSanStorage(), "color:gray", inputId); } else if (value.isAdditionalAvailableSizeSelected()) { input = templates.toggledDown(inputId, availableSizeToAddString); } else { input = templates.toggledUp(inputId, availableSizeToAddString); } sb.append(templates.span(id, input)); }
java.lang.String addOrExtendSanStorage();	java.lang.String actionsSanStorage();
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements = diskVmElementDao.getAllDiskVmElementsByDiskId(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters().getImageGroupID()); org.ovirt.engine.core.common.action.ActionType actionType = getMoveActionType(diskVmElements); if (actionType == (org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk)) { org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters = org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters(); moveDiskParameters.setCommandId(null); actionReturnValue = runInternalAction(actionType, moveDiskParameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getContext(), org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getLock())); } else { org.ovirt.engine.core.compat.Guid vmId = diskVmElements.get(0).getVmId(); engineLock = lockVmWithWait(vmId); actionReturnValue = runInternalAction(actionType, createLiveMigrateDiskParameters(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters(), vmId), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getContext(), engineLock)); } handleChildReturnValue(); org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements = diskVmElementDao.getAllDiskVmElementsByDiskId(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters().getImageGroupID()); org.ovirt.engine.core.common.action.ActionType actionType = getMoveActionType(diskVmElements); if (actionType == (org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk)) { org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters = org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters(); moveDiskParameters.setCommandId(null); setReturnValue(runInternalAction(actionType, moveDiskParameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getContext(), org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getLock()))); } else { org.ovirt.engine.core.compat.Guid vmId = diskVmElements.get(0).getVmId(); engineLock = lockVmWithWait(vmId); setReturnValue(runInternalAction(actionType, createLiveMigrateDiskParameters(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters(), vmId), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getContext(), engineLock))); } org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.setSucceeded(true); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Cluster cluster) { validateParameters(cluster, getMandatoryParameters()); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = getDataCenter(cluster); org.ovirt.engine.api.restapi.resource.ExternalProviderIdCompleter externalProviderIdCompleter = new org.ovirt.engine.api.restapi.resource.ExternalProviderIdCompleter(this); externalProviderIdCompleter.complete(cluster.getExternalNetworkProviders()); return performCreate(ActionType.AddCluster, createAddCommandParams(cluster, dataCenter), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetClusterById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }	@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Cluster cluster) { validateParameters(cluster, getMandatoryParameters()); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = getDataCenter(cluster); org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.completeExternalProviders(this, cluster.getExternalNetworkProviders()); return performCreate(ActionType.AddCluster, createAddCommandParams(cluster, dataCenter), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetClusterById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Host host) { validateParameters(host, "name", "address"); org.ovirt.engine.core.common.businessentities.VdsStatic staticHost = getMapper(org.ovirt.engine.api.model.Host.class, org.ovirt.engine.core.common.businessentities.VdsStatic.class).map(host, null); staticHost.setClusterId(getClusterId(host)); org.ovirt.engine.api.restapi.resource.ExternalNetworkProviderConfigurationIdCompleter externalNetworkProviderConfigurationIdCompleter = new org.ovirt.engine.api.restapi.resource.ExternalNetworkProviderConfigurationIdCompleter(this); externalNetworkProviderConfigurationIdCompleter.complete(host.getExternalNetworkProviderConfigurations()); org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters addParams = new org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters(staticHost, host.getRootPassword()); if (host.isSetOverrideIptables()) { addParams.setOverrideFirewall(host.isOverrideIptables()); } addParams.setHostedEngineDeployConfiguration(org.ovirt.engine.api.restapi.resource.HostResourceParametersUtil.getHostedEngineDeployConfiguration(this)); addParams = ((org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters) (getMapper(org.ovirt.engine.api.model.Host.class, org.ovirt.engine.core.common.action.VdsOperationActionParameters.class).map(host, addParams))); return performCreate(ActionType.AddVds, addParams, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetVdsByVdsId, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }	@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Host host) { validateParameters(host, "name", "address"); org.ovirt.engine.core.common.businessentities.VdsStatic staticHost = getMapper(org.ovirt.engine.api.model.Host.class, org.ovirt.engine.core.common.businessentities.VdsStatic.class).map(host, null); staticHost.setClusterId(getClusterId(host)); org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.completeExternalNetworkProviderConfigurations(this, host.getExternalNetworkProviderConfigurations()); org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters addParams = new org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters(staticHost, host.getRootPassword()); if (host.isSetOverrideIptables()) { addParams.setOverrideFirewall(host.isOverrideIptables()); } addParams.setHostedEngineDeployConfiguration(org.ovirt.engine.api.restapi.resource.HostResourceParametersUtil.getHostedEngineDeployConfiguration(this)); addParams = ((org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters) (getMapper(org.ovirt.engine.api.model.Host.class, org.ovirt.engine.core.common.action.VdsOperationActionParameters.class).map(host, addParams))); return performCreate(ActionType.AddVds, addParams, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetVdsByVdsId, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override public org.ovirt.engine.api.model.Host update(org.ovirt.engine.api.model.Host incoming) { org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid> hostResolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.QueryType.GetVdsByVdsId, org.ovirt.engine.core.common.queries.IdQueryParameters.class); org.ovirt.engine.core.common.businessentities.VDS entity = getEntity(hostResolver, true); org.ovirt.engine.api.restapi.resource.ExternalNetworkProviderConfigurationIdCompleter externalNetworkProviderConfigurationIdCompleter = new org.ovirt.engine.api.restapi.resource.ExternalNetworkProviderConfigurationIdCompleter(this); externalNetworkProviderConfigurationIdCompleter.complete(incoming.getExternalNetworkProviderConfigurations()); if ((incoming.getAgents()) == null) { entity.setFenceAgents(null); } if ((incoming.isSetCluster()) && ((incoming.getCluster().isSetId()) || (incoming.getCluster().isSetName()))) { org.ovirt.engine.core.compat.Guid clusterId = lookupClusterId(incoming); if (!(clusterId.equals(entity.getClusterId()))) { performAction(ActionType.ChangeVDSCluster, new org.ovirt.engine.core.common.action.ChangeVDSClusterParameters(clusterId, guid)); entity = getEntity(hostResolver, true); } } org.ovirt.engine.api.model.Host host = performUpdate(incoming, entity, map(entity), hostResolver, ActionType.UpdateVds, new org.ovirt.engine.api.restapi.resource.BackendHostResource.UpdateParametersProvider()); return host; }	@java.lang.Override public org.ovirt.engine.api.model.Host update(org.ovirt.engine.api.model.Host incoming) { org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid> hostResolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.QueryType.GetVdsByVdsId, org.ovirt.engine.core.common.queries.IdQueryParameters.class); org.ovirt.engine.core.common.businessentities.VDS entity = getEntity(hostResolver, true); org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.completeExternalNetworkProviderConfigurations(this, incoming.getExternalNetworkProviderConfigurations()); if ((incoming.getAgents()) == null) { entity.setFenceAgents(null); } if ((incoming.isSetCluster()) && ((incoming.getCluster().isSetId()) || (incoming.getCluster().isSetName()))) { org.ovirt.engine.core.compat.Guid clusterId = lookupClusterId(incoming); if (!(clusterId.equals(entity.getClusterId()))) { performAction(ActionType.ChangeVDSCluster, new org.ovirt.engine.core.common.action.ChangeVDSClusterParameters(clusterId, guid)); entity = getEntity(hostResolver, true); } } org.ovirt.engine.api.model.Host host = performUpdate(incoming, entity, map(entity), hostResolver, ActionType.UpdateVds, new org.ovirt.engine.api.restapi.resource.BackendHostResource.UpdateParametersProvider()); return host; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.Cluster update(org.ovirt.engine.api.model.Cluster incoming) { org.ovirt.engine.api.restapi.resource.ExternalProviderIdCompleter externalProviderIdCompleter = new org.ovirt.engine.api.restapi.resource.ExternalProviderIdCompleter(this); externalProviderIdCompleter.complete(incoming.getExternalNetworkProviders()); return performUpdate(incoming, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.QueryType.GetClusterById, org.ovirt.engine.core.common.queries.IdQueryParameters.class), ActionType.UpdateCluster, new UpdateParametersProvider()); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.Cluster update(org.ovirt.engine.api.model.Cluster incoming) { org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.completeExternalProviders(this, incoming.getExternalNetworkProviders()); return performUpdate(incoming, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.QueryType.GetClusterById, org.ovirt.engine.core.common.queries.IdQueryParameters.class), ActionType.UpdateCluster, new UpdateParametersProvider()); }
@java.lang.Override public javax.ws.rs.core.Response exportToPathOnHost(org.ovirt.engine.api.model.Action action) { validateParameters(action, "host.id|name", "path"); org.ovirt.engine.core.common.action.ExportOvaParameters params = new org.ovirt.engine.core.common.action.ExportOvaParameters(); params.setEntityType(VmEntityType.VM); params.setEntityId(guid); params.setProxyHostId(getHostId(action)); params.setPath(action.getPath()); return doAction(ActionType.ExportOva, params, action); }	@java.lang.Override public javax.ws.rs.core.Response exportToPathOnHost(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.ExportOvaParameters params = new org.ovirt.engine.core.common.action.ExportOvaParameters(); params.setEntityType(VmEntityType.VM); params.setEntityId(guid); params.setProxyHostId(getHostId(action)); params.setDirectory(action.getDirectory()); params.setName(action.getFilename()); return doAction(ActionType.ExportOva, params, action); }
protected void exportOva() { }	protected void setupExportOvaModel(org.ovirt.engine.ui.uicommonweb.models.vms.ExportOvaModel model) { }
@java.lang.Override protected void exportOva() { super.exportOva(); org.ovirt.engine.core.common.businessentities.VM selectedEntity = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem(); if (selectedEntity == null) { return; } if ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getWindow()) != null) { return; } org.ovirt.engine.core.common.action.ExportOvaParameters parameters = new org.ovirt.engine.core.common.action.ExportOvaParameters(); parameters.setEntityType(VmEntityType.VM); parameters.setEntityId(selectedEntity.getId()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.ExportOva, parameters); }	protected void exportOva() { org.ovirt.engine.core.common.businessentities.VM selectedEntity = ((org.ovirt.engine.core.common.businessentities.VM) (org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem())); if (selectedEntity == null) { return; } if ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.ExportOvaModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItems().size()) == 1) ? new org.ovirt.engine.ui.uicommonweb.models.vms.ExportOvaModel(selectedEntity.getName()) : new org.ovirt.engine.ui.uicommonweb.models.vms.ExportOvaModel(); setWindow(model); model.startProgress(); setupExportOvaModel(model); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByDataCenter(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( hosts) -> postExportOvaGetHosts(hosts.stream().filter(( host) -> (host.getStatus()) == VDSStatus.Up).collect(java.util.stream.Collectors.toList()))), extractStoragePoolIdNullSafe(selectedEntity)); }
public boolean isUsingDistinct(java.lang.String obj) { if ((org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter.getEntitySearchInfo(obj)) != null) { return org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter.getEntitySearchInfo(obj).distinct; } return false; }	public boolean isUsingDistinct(java.lang.String obj) { if ((org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter.getEntitySearchInfo(obj)) != null) { return org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter.getEntitySearchInfo(obj).usingDistinct; } return false; }
@org.ovirt.engine.ui.common.Source("images/prepare_to_maintenance.png") com.google.gwt.resources.client.ImageResource prepareToMaintenance();	@org.ovirt.engine.ui.common.Source("images/prepare_for_maintenance.png") com.google.gwt.resources.client.ImageResource prepareForMaintenance();
public boolean isFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(isFieldUpdatable(name))) { if (((fieldContainer != null) && ((container) != null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values != null) ? values.contains(name) : false; if (((!returnValue) && hotsetEnabled) && (status == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))) { returnValue = isHotSetField(name); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn("Field '{}' can not be updated when status is '{}'", name, status); } } return returnValue; }	public boolean isFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(isFieldUpdatable(name))) { if (((fieldContainer != null) && ((container) != null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values != null) ? values.contains(name) : false; if (!returnValue) { returnValue = (status instanceof org.ovirt.engine.core.common.businessentities.VMStatus) && (isFieldHotSettableInStatus(name, ((org.ovirt.engine.core.common.businessentities.VMStatus) (status)))); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn("Field '{}' can not be updated when status is '{}'", name, status); } } return returnValue; }
public boolean createOvfStoreDisks(int missingDiskCount) { boolean AllOvfStoreDisksCreated = true; for (int i = 0; i < missingDiskCount; i++) { org.ovirt.engine.core.common.action.CreateOvfVolumeForStorageDomainCommandParameters parameters = createCreateOvfVolumeForStorageDomainParams(); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.CreateOvfVolumeForStorageDomain, parameters, org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getContext().clone().withoutLock()); if (!(returnValue.getSucceeded())) { AllOvfStoreDisksCreated = false; } } return AllOvfStoreDisksCreated; }	public boolean createOvfStoreDisks(int missingDiskCount) { boolean allOvfStoreDisksCreated = true; for (int i = 0; i < missingDiskCount; i++) { org.ovirt.engine.core.common.action.CreateOvfVolumeForStorageDomainCommandParameters parameters = createCreateOvfVolumeForStorageDomainParams(); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.CreateOvfVolumeForStorageDomain, parameters, org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getContext().clone().withoutLock()); if (!(returnValue.getSucceeded())) { allOvfStoreDisksCreated = false; } } return allOvfStoreDisksCreated; }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.compat.Guid clusterId = null; if (action.isSetCluster()) { clusterId = getClusterId(action); } org.ovirt.engine.core.common.action.ImportVmTemplateParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateParameters(parent.getDataCenterId(destStorageDomainId), parent.getStorageDomainId(), destStorageDomainId, clusterId, getEntity()); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetTemplate()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } return doAction(ActionType.ImportVmTemplate, params, action); }	@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.compat.Guid clusterId = null; if (action.isSetCluster()) { clusterId = getClusterId(action); } org.ovirt.engine.core.common.action.ImportVmTemplateParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateParameters(parent.getDataCenterId(destStorageDomainId), parent.getStorageDomainId(), destStorageDomainId, clusterId, getEntity()); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetTemplate()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } return doAction(ActionType.ImportVmTemplate, params, action); }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.compat.Guid clusterId = null; if (action.isSetCluster()) { clusterId = getClusterId(action); } org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), clusterId); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(ActionType.ImportVm, params, action); }	@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.compat.Guid clusterId = null; if (action.isSetCluster()) { clusterId = getClusterId(action); } org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), clusterId); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(ActionType.ImportVm, params, action); }
public void updateVDSInterfaceList(java.util.Collection<org.ovirt.engine.core.common.utils.PairQueryable<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, org.ovirt.engine.core.common.businessentities.VDS>> pairCollection, java.lang.Runnable callback) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = pairCollection.stream().map(( pair) -> pair.getSecond()).collect(java.util.stream.Collectors.toList()); updateVDSInterfaceList(vdsList, callback); }	public void updateVDSInterfaceList(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList, java.lang.Runnable callback) { if ((vdsList != null) && (!(vdsList.isEmpty()))) { java.util.List<org.ovirt.engine.core.common.queries.QueryType> types = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.queries.QueryParametersBase> ids = new java.util.ArrayList<>(); vdsList.stream().forEach(( vds) -> { types.add(QueryType.GetVdsInterfacesByVdsId); ids.add(new org.ovirt.engine.core.common.queries.IdQueryParameters(vds.getId())); }); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleQueries(types, ids, ( result) -> { List<org.ovirt.engine.core.common.queries.QueryReturnValue> values = result.getReturnValues(); for (int i = 0; i < (vdsList.size()); i++) { org.ovirt.engine.core.common.queries.QueryReturnValue interfaceQueryValue = values.get(i); if ((interfaceQueryValue.getReturnValue()) != null) { vdsList.get(i).getInterfaces().addAll(interfaceQueryValue.getReturnValue()); callback.run(); } } }); } else { callback.run(); } }
public void updateVDSInterfaceList(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList, java.lang.Runnable callback) { java.util.List<org.ovirt.engine.core.common.queries.QueryType> types = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.queries.QueryParametersBase> ids = new java.util.ArrayList<>(); if (!(vdsList.isEmpty())) { vdsList.stream().forEach(( vds) -> { types.add(QueryType.GetVdsInterfacesByVdsId); ids.add(new org.ovirt.engine.core.common.queries.IdQueryParameters(vds.getId())); }); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleQueries(types, ids, ( result) -> { List<org.ovirt.engine.core.common.queries.QueryReturnValue> values = result.getReturnValues(); for (int i = 0; i < (vdsList.size()); i++) { org.ovirt.engine.core.common.queries.QueryReturnValue interfaceQueryValue = values.get(i); if ((interfaceQueryValue.getReturnValue()) != null) { vdsList.get(i).getInterfaces().addAll(interfaceQueryValue.getReturnValue()); callback.run(); } } }); } else { callback.run(); } }	public void updateVDSInterfaceList(java.util.Collection<org.ovirt.engine.core.common.utils.PairQueryable<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, org.ovirt.engine.core.common.businessentities.VDS>> pairCollection, java.lang.Runnable callback) { if (pairCollection != null) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = pairCollection.stream().map(( pair) -> pair.getSecond()).collect(java.util.stream.Collectors.toList()); updateVDSInterfaceList(vdsList, callback); } else { callback.run(); } }
private java.util.Optional<org.ovirt.engine.core.common.businessentities.storage.DiskImage> traceConfigurationDisk(org.ovirt.engine.core.compat.Guid spId, org.ovirt.engine.core.compat.Guid sdId, java.util.List<org.ovirt.engine.core.compat.Guid> diskIds) { if (diskIds == null) { return java.util.Optional.empty(); } return diskIds.stream().map(( diskId) -> new org.ovirt.engine.core.bll.hostedengine.Pair<>(diskId, ((List<org.ovirt.engine.core.compat.Guid>) (resourceManager.runVdsCommand(VDSCommandType.GetVolumesList, new org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters(spId, sdId, diskId)).getReturnValue())))).flatMap(( diskToVolumes) -> diskToVolumes.getSecond().stream().map(( volumeId) -> getImageInfo(spId, sdId, diskToVolumes.getFirst(), volumeId))).filter(java.util.Objects::nonNull).map(( diskImageCall) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskImageCall.getReturnValue()))).filter(java.util.Objects::nonNull).filter(this::isHostedEngineConfigVolume).findAny(); }	private java.util.Optional<org.ovirt.engine.core.common.businessentities.storage.DiskImage> traceConfigurationDisk(org.ovirt.engine.core.compat.Guid spId, org.ovirt.engine.core.compat.Guid sdId, java.util.List<org.ovirt.engine.core.compat.Guid> diskIds) { if (diskIds == null) { return java.util.Optional.empty(); } return diskIds.stream().map(( diskId) -> new org.ovirt.engine.core.bll.hostedengine.Pair<>(diskId, ((List<org.ovirt.engine.core.compat.Guid>) (resourceManager.runVdsCommand(VDSCommandType.GetVolumesList, new org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters(spId, sdId, diskId)).getReturnValue())))).flatMap(( diskToVolumes) -> diskToVolumes.getSecond().stream().map(( volumeId) -> getImageInfo(spId, sdId, diskToVolumes.getFirst(), volumeId))).filter(java.util.Objects::nonNull).map(( diskImageCall) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskImageCall.getReturnValue()))).filter(java.util.Objects::nonNull).filter(this::isHostedEngineConfigDiskImage).findAny(); }
private boolean isHostedEngineConfigVolume(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { final java.lang.String strConfigImageId = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.HostedEngineConfigurationVolumeGuid); final org.ovirt.engine.core.compat.Guid configImageId = (strConfigImageId.isEmpty()) ? null : org.ovirt.engine.core.compat.Guid.createGuidFromString(strConfigImageId); if (configImageId != null) { return diskImage.getImageId().equals(configImageId); } return org.ovirt.engine.core.bll.hostedengine.HostedEngineConfigFetcher.HOSTED_ENGINE_CONFIGURATION_IMAGE.equals(diskImage.getDescription()); }	private boolean isHostedEngineConfigDiskImage(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { final java.lang.String strConfigImageId = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.HostedEngineConfigurationImageGuid); final org.ovirt.engine.core.compat.Guid configImageId = ((strConfigImageId == null) || (strConfigImageId.isEmpty())) ? null : org.ovirt.engine.core.compat.Guid.createGuidFromString(strConfigImageId); if (configImageId != null) { return diskImage.getId().equals(configImageId); } return org.ovirt.engine.core.bll.hostedengine.HostedEngineConfigFetcher.HOSTED_ENGINE_CONFIGURATION_IMAGE.equals(diskImage.getDescription()); }
private void addImportedDevices(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vm.getStaticData(); vmStatic.setImages(new java.util.ArrayList()); vmStatic.setInterfaces(new java.util.ArrayList()); importUtils.updateGraphicsDevices(vmStatic, ConvertVmCommand.getStoragePool().getCompatibilityVersion()); ConvertVmCommand.getVmDeviceUtils().addImportedDevices(vmStatic, false, false, null); saveDiskVmElements(vm); }	private void addImportedDevices(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vm.getStaticData(); vmStatic.setImages(new java.util.ArrayList()); vmStatic.setInterfaces(new java.util.ArrayList()); importUtils.updateGraphicsDevices(vmStatic, ConvertVmCommand.getStoragePool().getCompatibilityVersion()); ConvertVmCommand.getVmDeviceUtils().addImportedDevices(vmStatic, false, false); saveDiskVmElements(vm); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { initImportClonedTemplateDisks(); addVmTemplateToDb(); mapDbUsers(); updateOriginalTemplateNameOnDerivedVms(); addVmInterfaces(); getCompensationContext().stateChanged(); org.ovirt.engine.core.bll.exportimport.vmHandler.addVmInitToDB(getVmTemplate().getVmInit()); return null; }); boolean doesVmTemplateContainImages = !(getImages().isEmpty()); if (doesVmTemplateContainImages && (!(org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImagesExistOnTargetStorageDomain()))) { moveOrCopyAllImageGroups(getVmTemplateId(), getImages()); } org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getVmDeviceUtils().addImportedDevices(getVmTemplate(), org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImportAsNewEntity(), false, getImages().stream().map(DiskImage::getId).collect(java.util.stream.Collectors.toList())); if ((!doesVmTemplateContainImages) || (org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImagesExistOnTargetStorageDomain())) { endMoveOrCopyCommand(); } discardHelper.logIfDisksWithIllegalPassDiscardExist(getVmTemplateId()); checkTrustedService(); org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { initImportClonedTemplateDisks(); addVmTemplateToDb(); mapDbUsers(); updateOriginalTemplateNameOnDerivedVms(); addVmInterfaces(); getCompensationContext().stateChanged(); org.ovirt.engine.core.bll.exportimport.vmHandler.addVmInitToDB(getVmTemplate().getVmInit()); return null; }); boolean doesVmTemplateContainImages = !(getImages().isEmpty()); if (doesVmTemplateContainImages && (!(org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImagesExistOnTargetStorageDomain()))) { moveOrCopyAllImageGroups(getVmTemplateId(), getImages()); } org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getVmDeviceUtils().addImportedDevices(getVmTemplate(), org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImportAsNewEntity(), false); if ((!doesVmTemplateContainImages) || (org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImagesExistOnTargetStorageDomain())) { endMoveOrCopyCommand(); } discardHelper.logIfDisksWithIllegalPassDiscardExist(getVmTemplateId()); checkTrustedService(); org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.setSucceeded(true); }
public void attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot, org.ovirt.engine.core.compat.Guid activeSnapshotId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, org.ovirt.engine.core.bll.context.CompensationContext compensationContext, org.ovirt.engine.core.common.businessentities.aaa.DbUser user, org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager, boolean withMemory) { boolean vmUpdatedFromConfiguration = false; if ((snapshot.getVmConfiguration()) != null) { vmUpdatedFromConfiguration = updateVmFromConfiguration(vm, snapshot.getVmConfiguration()); if (images != null) { vmUpdatedFromConfiguration &= updateImagesByConfiguration(vm, images); } } if (!vmUpdatedFromConfiguration) { if (images == null) { images = diskImageDao.getAllSnapshotsForVmSnapshot(snapshot.getId()); } vm.setImages(new java.util.ArrayList(images)); } vm.setAppList(snapshot.getAppList()); vmDynamicDao.update(vm.getDynamicData()); synchronizeDisksFromSnapshot(vm.getId(), snapshot.getId(), activeSnapshotId, vm.getImages(), vm.getName()); if (vmUpdatedFromConfiguration) { vmStaticDao.update(vm.getStaticData()); boolean macsInSnapshotAreExpectedToBeAlreadyAllocated = SnapshotType.STATELESS.equals(snapshot.getType()); synchronizeNics(vm, compensationContext, user, vmInterfaceManager, macsInSnapshotAreExpectedToBeAlreadyAllocated); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDeviceDao.getVmDeviceByVmId(vm.getId())) { if (deviceCanBeRemoved(vmDevice)) { vmDeviceDao.remove(vmDevice.getId()); } } vmDeviceUtils.addImportedDevices(vm.getStaticData(), false, withMemory, null); } }	public void attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot, org.ovirt.engine.core.compat.Guid activeSnapshotId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, org.ovirt.engine.core.bll.context.CompensationContext compensationContext, org.ovirt.engine.core.common.businessentities.aaa.DbUser user, org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager, boolean withMemory) { boolean vmUpdatedFromConfiguration = false; if ((snapshot.getVmConfiguration()) != null) { vmUpdatedFromConfiguration = updateVmFromConfiguration(vm, snapshot.getVmConfiguration()); if (images != null) { vmUpdatedFromConfiguration &= updateImagesByConfiguration(vm, images); } } if (!vmUpdatedFromConfiguration) { if (images == null) { images = diskImageDao.getAllSnapshotsForVmSnapshot(snapshot.getId()); } vm.setImages(new java.util.ArrayList(images)); } vm.setAppList(snapshot.getAppList()); vmDynamicDao.update(vm.getDynamicData()); synchronizeDisksFromSnapshot(vm.getId(), snapshot.getId(), activeSnapshotId, vm.getImages(), vm.getName()); if (vmUpdatedFromConfiguration) { vmStaticDao.update(vm.getStaticData()); boolean macsInSnapshotAreExpectedToBeAlreadyAllocated = SnapshotType.STATELESS.equals(snapshot.getType()); synchronizeNics(vm, compensationContext, user, vmInterfaceManager, macsInSnapshotAreExpectedToBeAlreadyAllocated); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDeviceDao.getVmDeviceByVmId(vm.getId())) { if (deviceCanBeRemoved(vmDevice)) { vmDeviceDao.remove(vmDevice.getId()); } } vmDeviceUtils.addImportedDevices(vm.getStaticData(), false, withMemory); } }
private void processImages(final boolean useCopyImages) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmImagesAndSnapshots(); addVmExternalLuns(); addMemoryImages(); updateSnapshotsFromExport(); if (useCopyImages) { moveOrCopyAllImageGroups(); } getVmDeviceUtils().addImportedDevices(getVm().getStaticData(), getParameters().isImportAsNewEntity(), false, null); if (getParameters().isImportAsNewEntity()) { getParameters().setVm(getVm()); setVmId(getVm().getId()); } return null; }); }	private void processImages(final boolean useCopyImages) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmImagesAndSnapshots(); addVmExternalLuns(); addMemoryImages(); updateSnapshotsFromExport(); if (useCopyImages) { moveOrCopyAllImageGroups(); } getVmDeviceUtils().addImportedDevices(getVm().getStaticData(), getParameters().isImportAsNewEntity(), false); if (getParameters().isImportAsNewEntity()) { getParameters().setVm(getVm()); setVmId(getVm().getId()); } return null; }); }
public void addImportedDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, boolean isImportAsNewEntity, boolean withMemory, java.util.List<org.ovirt.engine.core.compat.Guid> diskIdsToImport) { if (isImportAsNewEntity) { setNewIdInImportedCollections(vmBase); } java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToAdd = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate = new java.util.ArrayList<>(); addImportedDiskDevices(vmBase, vmDevicesToUpdate, diskIdsToImport); addImportedInterfaces(vmBase, vmDevicesToUpdate); addImportedOtherDevices(vmBase, vmDevicesToAdd, withMemory); vmDeviceDao.saveAll(vmDevicesToAdd); vmDeviceDao.updateAll(vmDevicesToUpdate); }	public void addImportedDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, boolean isImportAsNewEntity, boolean withMemory) { if (isImportAsNewEntity) { setNewIdInImportedCollections(vmBase); } java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToAdd = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate = new java.util.ArrayList<>(); addImportedDiskDevices(vmBase, vmDevicesToUpdate); addImportedInterfaces(vmBase, vmDevicesToUpdate); addImportedOtherDevices(vmBase, vmDevicesToAdd, withMemory); vmDeviceDao.saveAll(vmDevicesToAdd); vmDeviceDao.updateAll(vmDevicesToUpdate); }
private void addImportedDiskDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate, java.util.List<org.ovirt.engine.core.compat.Guid> diskIdsToImport) { final org.ovirt.engine.core.compat.Guid vmId = vmBase.getId(); for (org.ovirt.engine.core.common.businessentities.storage.BaseDisk disk : getDisks(vmBase.getImages())) { org.ovirt.engine.core.compat.Guid deviceId = disk.getId(); if ((diskIdsToImport != null) && (!(diskIdsToImport.contains(deviceId)))) { continue; } org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = addDiskDevice(vmId, deviceId, getVmDeviceAddress(vmBase, vmId)); updateImportedVmDevice(vmBase, vmDevice, deviceId, vmDevicesToUpdate); } }	private void addImportedDiskDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate) { final org.ovirt.engine.core.compat.Guid vmId = vmBase.getId(); for (org.ovirt.engine.core.common.businessentities.storage.BaseDisk disk : getDisks(vmBase.getImages())) { org.ovirt.engine.core.compat.Guid deviceId = disk.getId(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = addDiskDevice(vmId, deviceId, getVmDeviceAddress(vmBase, vmId)); updateImportedVmDevice(vmBase, vmDevice, deviceId, vmDevicesToUpdate); } }
@java.lang.Override public javax.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); validateVnicMappings(action); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); org.ovirt.engine.api.restapi.types.ExternalRegistrationConfigurationMapper.mapFromModel(action.getRegistrationConfiguration(), params); params.setContainerId(guid); params.setStorageDomainId(parent.getStorageDomainId()); params.setClusterId(getClusterId(action)); params.setImagesExistOnTargetStorageDomain(true); params.setExternalVnicProfileMappings(org.ovirt.engine.api.restapi.types.ExternalVnicProfileMappingMapper.mapFromModel(action.getVnicProfileMappings())); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmTemplateFromConfiguration, params, action); }	@java.lang.Override public javax.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.api.restapi.resource.BackendVnicProfileHelper.validateVnicMappings(this, action); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); org.ovirt.engine.api.restapi.types.ExternalRegistrationConfigurationMapper.mapFromModel(action.getRegistrationConfiguration(), params); params.setContainerId(guid); params.setStorageDomainId(parent.getStorageDomainId()); if (action.isSetCluster()) { params.setClusterId(getClusterId(action)); } params.setImagesExistOnTargetStorageDomain(true); params.setExternalVnicProfileMappings(org.ovirt.engine.api.restapi.types.ExternalVnicProfileMappingMapper.mapFromModel(action.getVnicProfileMappings())); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmTemplateFromConfiguration, params, action); }
private void init() { leftBound.setEntity(((macRange.getMacFrom()) == null ? "" : macRange.getMacFrom())); rightBound.setEntity(((macRange.getMacTo()) == null ? "" : macRange.getMacTo())); recalculateMacsCount(); leftBound.getEntityChangedEvent().addListener(( ev, sender, args) -> onMacRangeChange()); rightBound.getEntityChangedEvent().addListener(( ev, sender, args) -> onMacRangeChange()); }	private void init() { leftBound.setEntity(((macRange.getMacFrom()) == null ? "" : macRange.getMacFrom())); rightBound.setEntity(((macRange.getMacTo()) == null ? "" : macRange.getMacTo())); recalculateMacsCount(); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.macpool.MacRangeModel model) { driver.edit(model); }	@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.macpool.MacRangeModel model) { driver.edit(model); org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs> textChangedListener = ( ev, sender, args) -> { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, model); model.recalculateMacsCount(); }; model.getLeftBound().getEntityChangedEvent().addListener(textChangedListener); model.getRightBound().getEntityChangedEvent().addListener(textChangedListener); }
private static org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable createAuditLogableForHost(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); logable.setVdsId(vds.getId()); logable.setVdsName(vds.getName()); return logable; }	private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable createAuditLogableForHost(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); logable.setVdsId(vds.getId()); logable.setVdsName(vds.getName()); return logable; }
private static void createAuditLog(java.util.List<java.lang.String> guids, org.ovirt.engine.core.common.AuditLogType type, org.ovirt.engine.core.common.businessentities.VDS vds) { if (guids.isEmpty()) { return; } org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = org.ovirt.engine.core.vdsbroker.vdsbroker.MultipathHealthHandler.createAuditLogableForHost(vds); logable.addCustomValue("MpathGuids", guids.stream().sorted().collect(java.util.stream.Collectors.joining(", "))); org.ovirt.engine.core.vdsbroker.vdsbroker.MultipathHealthHandler.auditLogDirector.log(logable, type); }	private void createAuditLog(java.util.List<java.lang.String> guids, org.ovirt.engine.core.common.AuditLogType type, org.ovirt.engine.core.common.businessentities.VDS vds) { if (guids.isEmpty()) { return; } org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = createAuditLogableForHost(vds); logable.addCustomValue("MpathGuids", java.lang.String.join(", ", guids)); auditLogDirector.log(logable, type); }
private void processHeartbeat() { int incoming = (this.policy.getIncomingHeartbeat()) / 2; if (((!(this.isInInit())) && ((getHeartbeatTime()) > incoming)) && (this.half)) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info((((("There was no massege from " + (getHostname())) + " for ") + incoming) + " milliseconds")); this.half = false; } if (((!(this.isInInit())) && (this.policy.isIncomingHeartbeat())) && (this.isIncomingHeartbeatExeeded())) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info((((("Heartbeat exceeded for " + (getHostname())) + " last message was ") + (getHeartbeatTime())) + " milliseconds ago.")); this.disconnect("Heartbeat exceeded"); } }	private void processHeartbeat() { int incoming = (this.policy.getIncomingHeartbeat()) / 2; if (((!(this.isInInit())) && ((getHeartbeatTime()) > incoming)) && (this.half)) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info("No heartbeat message arrived from host '{}' for {} ms.", getHostname(), incoming); this.half = false; } if (((!(this.isInInit())) && (this.policy.isIncomingHeartbeat())) && (this.isIncomingHeartbeatExeeded())) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.error("Heartbeat exceeded for host '{}', last response arrived {} ms ago.", getHostname(), getHeartbeatTime()); this.disconnect("Heartbeat exceeded"); } }
private void processHeartbeat() { if (((!(this.isInInit())) && (this.policy.isIncomingHeartbeat())) && (this.isIncomingHeartbeatExeeded())) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info((((("Heartbeat exceeded for " + (getHostname())) + " last response was ") + (getHeartbeatTime())) + " milliseconds ago.")); this.disconnect("Heartbeat exceeded"); } }	private void processHeartbeat() { if (((!(this.isInInit())) && (this.policy.isIncomingHeartbeat())) && (this.isIncomingHeartbeatExeeded())) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.error("Heartbeat exceeded for host '{}', last response arrived {} ms ago.", getHostname(), getHeartbeatTime()); this.disconnect("Heartbeat exceeded"); } }
@java.lang.Override protected void executeCommand() { java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = org.ovirt.engine.core.bll.CreateOvaCommand.getParameters().getDisks(); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> diskIdToPath = prepareImages(disks); fillDiskApparentSize(disks); org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.CreateOvaCommand.getParameters().getVm(); vmHandler.updateNetworkInterfacesFromDb(vm); vmHandler.updateVmInitFromDB(vm.getStaticData(), true); vmDeviceUtils.setVmDevices(vm.getStaticData()); org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(vm); fullEntityOvfData.setDiskImages(new java.util.ArrayList(disks)); fullEntityOvfData.setInterfaces(vm.getInterfaces()); java.lang.String ovf = ovfManager.exportOva(vm, fullEntityOvfData, vm.getCompatibilityVersion()); log.debug("Exporting OVF: {}", ovf); boolean succeeded = runAnsiblePackOvaPlaybook(vm.getName(), ovf, disks, diskIdToPath); org.ovirt.engine.core.bll.CreateOvaCommand.setSucceeded(succeeded); }	@java.lang.Override protected void executeCommand() { java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskImage, org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskMappings = org.ovirt.engine.core.bll.CreateOvaCommand.getParameters().getDiskInfoDestinationMap(); java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = diskMappings.values(); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> diskIdToPath = prepareImages(disks); fillDiskApparentSize(disks); org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.CreateOvaCommand.getParameters().getVm(); vmHandler.updateNetworkInterfacesFromDb(vm); vmHandler.updateVmInitFromDB(vm.getStaticData(), true); vmDeviceUtils.setVmDevices(vm.getStaticData()); fixDiskDevices(vm, diskMappings); org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(vm); fullEntityOvfData.setDiskImages(new java.util.ArrayList(disks)); fullEntityOvfData.setInterfaces(vm.getInterfaces()); java.lang.String ovf = ovfManager.exportOva(vm, fullEntityOvfData, vm.getCompatibilityVersion()); log.debug("Exporting OVF: {}", ovf); boolean succeeded = runAnsiblePackOvaPlaybook(vm.getName(), ovf, disks, diskIdToPath); org.ovirt.engine.core.bll.CreateOvaCommand.setSucceeded(succeeded); }
@java.lang.Override protected void writeOS() { _writer.writeStartElement("OperatingSystemSection"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI, "id", java.lang.Integer.toString(mapOsId(vmBase.getOsId()))); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI, "required", "false"); _writer.writeElement("Info", "Guest Operating System"); _writer.writeElement("Description", osRepository.getUniqueOsNames().get(vmBase.getOsId())); _writer.writeEndElement(); }	@java.lang.Override protected void writeOS() { _writer.writeStartElement("OperatingSystemSection"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI, "id", java.lang.Integer.toString(mapOsId(vmBase.getOsId()))); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI, "required", "false"); _writer.writeElement("Info", "Guest Operating System"); _writer.writeElement("Description", osRepository.getOsName(vmBase.getOsId())); _writer.writeEndElement(); }
private java.lang.String runAnsibleQueryOvaInfoPlaybook() { org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command = new org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder().hostnames(vdsStaticDao.get(org.ovirt.engine.core.bll.GetVmFromOvaQuery.getParameters().getVdsId()).getHostName()).variables(new org.ovirt.engine.core.common.utils.Pair("ovirt_query_ova_path", org.ovirt.engine.core.bll.GetVmFromOvaQuery.getParameters().getPath())).enableLogging(false).playbook(AnsibleConstants.QUERY_OVA_PLAYBOOK); boolean succeeded = false; org.ovirt.engine.core.common.utils.ansible.AnsibleReturnValue ansibleReturnValue = null; try { ansibleReturnValue = ansibleExecutor.runCommand(command); succeeded = (ansibleReturnValue.getAnsibleReturnCode()) == (org.ovirt.engine.core.common.utils.ansible.AnsibleReturnCode.OK); } catch (java.io.IOException | java.lang.InterruptedException e) { log.debug("Failed to query OVA info", e); return null; } if (!succeeded) { log.error("Failed to query OVA info. Error: {}", command.logFile()); return null; } return ansibleReturnValue.getStdout(); }	private java.lang.String runAnsibleQueryOvaInfoPlaybook() { org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command = new org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder().hostnames(vdsStaticDao.get(org.ovirt.engine.core.bll.GetVmFromOvaQuery.getParameters().getVdsId()).getHostName()).variables(new org.ovirt.engine.core.common.utils.Pair("ovirt_query_ova_path", org.ovirt.engine.core.bll.GetVmFromOvaQuery.getParameters().getPath())).enableLogging(false).playbook(AnsibleConstants.QUERY_OVA_PLAYBOOK); boolean succeeded = false; org.ovirt.engine.core.common.utils.ansible.AnsibleReturnValue ansibleReturnValue = null; try { ansibleReturnValue = ansibleExecutor.runCommand(command); succeeded = (ansibleReturnValue.getAnsibleReturnCode()) == (org.ovirt.engine.core.common.utils.ansible.AnsibleReturnCode.OK); } catch (java.io.IOException | java.lang.InterruptedException e) { log.debug("Failed to query OVA info", e); } if (!succeeded) { log.error("Failed to query OVA info"); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GeneralException, "Failed to query OVA info"); } return ansibleReturnValue.getStdout(); }
private org.ovirt.engine.core.common.businessentities.VM readVmFromOva(java.lang.String ovf) { if (ovf == null) { return null; } try { return ovfHelper.readVmFromOva(ovf); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("failed to parse a given ovf configuration: \n" + ovf), e); org.ovirt.engine.core.bll.GetVmFromOvaQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); return null; } }	private org.ovirt.engine.core.common.businessentities.VM readVmFromOva(java.lang.String ovf) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { return ovf != null ? ovfHelper.readVmFromOva(ovf) : null; }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.VM vm = getOvaInfoUsingAnsible(); setReturnValue(vm); org.ovirt.engine.core.bll.GetVmFromOvaQuery.getQueryReturnValue().setSucceeded((vm != null)); }	@java.lang.Override protected void executeQueryCommand() { java.lang.String stdout = runAnsibleQueryOvaInfoPlaybook(); java.lang.String ovf = parseOvfFromStdout(stdout); boolean originOvirt = ovf.contains("xmlns:ovirt"); org.ovirt.engine.core.common.businessentities.VM vm = null; try { vm = readVmFromOva(ovf); } catch (java.lang.Exception e) { if (originOvirt) { log.debug(("failed to parse a given ovf configuration: \n" + ovf), e); org.ovirt.engine.core.bll.GetVmFromOvaQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); } } if ((!originOvirt) && (vm == null)) { vm = getVmInfoFromOvaFile(); } if (originOvirt && (vm != null)) { vm.setOrigin(OriginType.OVIRT); } setReturnValue(vm); org.ovirt.engine.core.bll.GetVmFromOvaQuery.getQueryReturnValue().setSucceeded((vm != null)); }
private java.lang.String parseOvfFromStdout(java.lang.String stdout) { if (stdout == null) { return null; } java.util.regex.Matcher m = org.ovirt.engine.core.bll.GetVmFromOvaQuery.OVF_PATTERN.matcher(stdout); if ((m.matches()) && ((m.groupCount()) > 0)) { java.lang.String ovf = m.group(1); ovf = ovf.replaceAll("\\\\\"", "\""); log.info(ovf); return ovf; } log.error("Failed to parse OVF from:\n{}", stdout); return null; }	private java.lang.String parseOvfFromStdout(java.lang.String stdout) { if (stdout == null) { return null; } java.util.regex.Matcher m = org.ovirt.engine.core.bll.GetVmFromOvaQuery.OVF_PATTERN.matcher(stdout); if ((m.matches()) && ((m.groupCount()) > 0)) { java.lang.String ovf = m.group(1); ovf = ovf.replaceAll("\\\\\"", "\""); log.info("Retrieved the following OVF from OVA \'{}\':\n {}", org.ovirt.engine.core.bll.GetVmFromOvaQuery.getParameters().getPath(), ovf); return ovf; } log.error("Failed to parse OVF from:\n{}", stdout); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GeneralException, "Failed to parse OVF from OVA"); }
private void setCookie(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response, final java.util.Locale userLocale) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(org.ovirt.engine.core.utils.servlet.LocaleFilter.LOCALE, userLocale.toString()); cookie.setSecure("https".equals(request.getScheme())); cookie.setPath(org.ovirt.engine.core.utils.servlet.LocaleFilter.ROOT_PATH); cookie.setMaxAge(java.lang.Integer.MAX_VALUE); cookie.setHttpOnly(true); response.addCookie(cookie); }	private void setCookie(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response, final java.util.Locale userLocale) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(org.ovirt.engine.core.utils.servlet.LocaleFilter.LOCALE, userLocale.toString()); cookie.setSecure("https".equalsIgnoreCase(request.getScheme())); cookie.setPath(org.ovirt.engine.core.utils.servlet.LocaleFilter.ROOT_PATH); cookie.setMaxAge(java.lang.Integer.MAX_VALUE); cookie.setHttpOnly(true); response.addCookie(cookie); }
private java.lang.String authenticateUser(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, org.ovirt.engine.core.sso.utils.Credentials userCredentials) throws java.io.IOException, javax.servlet.ServletException, org.ovirt.engine.core.sso.utils.AuthenticationException { if ((userCredentials == null) || (!(org.ovirt.engine.core.sso.utils.SsoUtils.areCredentialsValid(request, userCredentials, true)))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_INVALID_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } try { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Authenticating user using credentials"); javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie("profile", userCredentials.getProfile()); cookie.setSecure("https".equals(request.getScheme())); response.addCookie(cookie); org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(ssoContext, request, userCredentials); return (request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_REDIRECT_TO_MODULE_URI); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { throw ex; } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.error("Internal Server Error: {}", ex.getMessage()); org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex.getMessage(), ex); } }	private java.lang.String authenticateUser(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, org.ovirt.engine.core.sso.utils.Credentials userCredentials) throws java.io.IOException, javax.servlet.ServletException, org.ovirt.engine.core.sso.utils.AuthenticationException { if ((userCredentials == null) || (!(org.ovirt.engine.core.sso.utils.SsoUtils.areCredentialsValid(request, userCredentials, true)))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_INVALID_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } try { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Authenticating user using credentials"); javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie("profile", userCredentials.getProfile()); cookie.setSecure("https".equalsIgnoreCase(request.getScheme())); response.addCookie(cookie); org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(ssoContext, request, userCredentials); return (request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_REDIRECT_TO_MODULE_URI); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { throw ex; } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.error("Internal Server Error: {}", ex.getMessage()); org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex.getMessage(), ex); } }
private void setLangPageShown(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, boolean value) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(org.ovirt.engine.core.utils.servlet.DocsServlet.LANG_PAGE_SHOWN, java.lang.Boolean.toString(value)); cookie.setSecure("https".equals(request.getScheme())); cookie.setPath(getServletContext().getContextPath()); cookie.setHttpOnly(true); response.addCookie(cookie); }	private void setLangPageShown(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, boolean value) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(org.ovirt.engine.core.utils.servlet.DocsServlet.LANG_PAGE_SHOWN, java.lang.Boolean.toString(value)); cookie.setSecure("https".equalsIgnoreCase(request.getScheme())); cookie.setPath(getServletContext().getContextPath()); cookie.setHttpOnly(true); response.addCookie(cookie); }
@org.junit.Test public void networkNameNotTakenByVdsmName() { when(network.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_NETWORK_NAME); when(network.getId()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID); org.ovirt.engine.core.common.businessentities.network.Network network2 = new org.ovirt.engine.core.common.businessentities.network.Network(); network2.setVdsmName("vdsm-name"); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); when(networkDao.getAllForDataCenter(any())).thenReturn(org.ovirt.engine.core.bll.validator.Arrays.asList(network, network2)); assertThat(validator.networkNameNotUsedAsVdsmName(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }	@org.junit.Test public void networkNameNotTakenByVdsmName() { when(network.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_NETWORK_NAME); when(network.getId()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID); org.ovirt.engine.core.common.businessentities.network.Network network2 = new org.ovirt.engine.core.common.businessentities.network.Network(); network2.setVdsmName("vdsm-name"); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); when(networkDao.getAllForDataCenter(any())).thenReturn(java.util.Arrays.asList(network, network2)); assertThat(validator.networkNameNotUsedAsVdsmName(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
@org.junit.Test public void networkNameTakenByVdsmName() { when(network.getName()).thenReturn("vdsm-name"); when(network.getId()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID); org.ovirt.engine.core.common.businessentities.network.Network network2 = new org.ovirt.engine.core.common.businessentities.network.Network(); network2.setVdsmName("vdsm-name"); network2.setName("vdsm-name"); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); when(networkDao.getAllForDataCenter(any())).thenReturn(org.ovirt.engine.core.bll.validator.Arrays.asList(network, network2)); assertThat(validator.networkNameNotUsedAsVdsmName(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.NETWORK_NAME_USED_AS_VDSM_NETWORK_NAME)); }	@org.junit.Test public void networkNameTakenByVdsmName() { when(network.getName()).thenReturn("vdsm-name"); when(network.getId()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID); org.ovirt.engine.core.common.businessentities.network.Network network2 = new org.ovirt.engine.core.common.businessentities.network.Network(); network2.setVdsmName("vdsm-name"); network2.setName("vdsm-name"); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); when(networkDao.getAllForDataCenter(any())).thenReturn(java.util.Arrays.asList(network, network2)); assertThat(validator.networkNameNotUsedAsVdsmName(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.NETWORK_NAME_USED_AS_VDSM_NETWORK_NAME)); }
public org.ovirt.engine.core.common.utils.ansible.AnsibleReturnValue runCommand(org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>... envVars) throws java.io.IOException, java.lang.InterruptedException { return runCommand(command, org.ovirt.engine.core.common.utils.ansible.AnsibleExecutor.ANSIBLE_PLAYBOOK_TIMEOUT, envVars); }	public org.ovirt.engine.core.common.utils.ansible.AnsibleReturnValue runCommand(org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command) throws java.io.IOException, java.lang.InterruptedException { return runCommand(command, org.ovirt.engine.core.common.utils.ansible.AnsibleExecutor.ANSIBLE_PLAYBOOK_TIMEOUT); }
@java.lang.Override public javax.ws.rs.core.Response iscsiLogin(org.ovirt.engine.api.model.Action action) { validateParameters(action, "iscsi.address", "iscsi.target"); org.ovirt.engine.core.common.businessentities.StorageServerConnections cnx = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); org.ovirt.engine.api.model.IscsiDetails iscsiDetails = action.getIscsi(); cnx.setConnection(iscsiDetails.getAddress()); cnx.setIqn(iscsiDetails.getTarget()); cnx.setStorageType(StorageType.ISCSI); if (iscsiDetails.isSetPort()) { cnx.setPort(iscsiDetails.getPort().toString()); } else { cnx.setPort(org.ovirt.engine.api.restapi.resource.BackendHostResource.DEFAULT_ISCSI_PORT); } if (iscsiDetails.isSetPortal()) { cnx.setPortal(iscsiDetails.getPortal().toString()); } if (iscsiDetails.isSetUsername()) { cnx.setUserName(iscsiDetails.getUsername()); } if (iscsiDetails.isSetPassword()) { cnx.setPassword(iscsiDetails.getPassword()); } org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase connectionParms = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase(cnx, guid, false); return doAction(ActionType.ConnectStorageToVds, connectionParms, action); }	@java.lang.Override public javax.ws.rs.core.Response iscsiLogin(org.ovirt.engine.api.model.Action action) { validateParameters(action, "iscsi.address", "iscsi.target"); org.ovirt.engine.core.common.businessentities.StorageServerConnections cnx = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); org.ovirt.engine.api.model.IscsiDetails iscsiDetails = action.getIscsi(); cnx.setConnection(iscsiDetails.getAddress()); cnx.setIqn(iscsiDetails.getTarget()); cnx.setStorageType(StorageType.ISCSI); if (iscsiDetails.isSetPort()) { cnx.setPort(iscsiDetails.getPort().toString()); } else { cnx.setPort(org.ovirt.engine.api.restapi.resource.BackendHostResource.DEFAULT_ISCSI_PORT); } if (iscsiDetails.isSetPortal()) { cnx.setPortal(iscsiDetails.getPortal()); } if (iscsiDetails.isSetUsername()) { cnx.setUserName(iscsiDetails.getUsername()); } if (iscsiDetails.isSetPassword()) { cnx.setPassword(iscsiDetails.getPassword()); } org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase connectionParms = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase(cnx, guid, false); return doAction(ActionType.ConnectStorageToVds, connectionParms, action); }
private void handleFinalizingFailure(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { log.error("Finalizing failed transfer. {}", getTransferDescription()); stopImageTransferSession(context.entity); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageGroupID()))) { setImageStatus(((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Upload) ? org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL : org.ovirt.engine.core.common.businessentities.storage.ImageStatus.OK)); } if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { tearDownImage(context.entity.getVdsId()); } updateEntityPhase(ImageTransferPhase.FINISHED_FAILURE); setAuditLogTypeFromPhase(ImageTransferPhase.FINISHED_FAILURE); }	private void handleFinalizingFailure(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { log.error("Finalizing failed transfer. {}", getTransferDescription()); stopImageTransferSession(context.entity); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageGroupID()))) { setImageStatus(((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Upload) ? org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL : org.ovirt.engine.core.common.businessentities.storage.ImageStatus.OK)); } tearDownImage(context.entity.getVdsId()); updateEntityPhase(ImageTransferPhase.FINISHED_FAILURE); setAuditLogTypeFromPhase(ImageTransferPhase.FINISHED_FAILURE); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookAdd(java.lang.String url, java.lang.String bearerToken) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookAdd").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookAdd(java.lang.String url, java.lang.String bearerToken) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookAdd").withParameter("url", url).withParameter("bearerToken", bearerToken).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
java.lang.String GlusterUpdateWebhookException();	java.lang.String GlusterWebhookUpdateException();
@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebhookVDSCommand.getBroker().glusterWebhookAdd(org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebhookVDSCommand.getParameters().getWebhookUrl(), null); org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebhookVDSCommand.proceedProxyReturnValue(); }	@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebhookVDSCommand.getBroker().glusterWebhookAdd(org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebhookVDSCommand.getParameters().getWebhookUrl(), org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebhookVDSCommand.getParameters().getBearerToken()); org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebhookVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookDelete(java.lang.String url) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookDelete").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookDelete(java.lang.String url) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookDelete").withParameter("url", url).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
java.lang.String GlusterSyncWebhookException();	java.lang.String GlusterWebhookSyncException();
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookSync() { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookSync").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }	public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookSync() { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookSync").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
java.lang.String GlusterAddWebhookException();	java.lang.String GlusterWebhookAddException();
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookUpdate(java.lang.String url, java.lang.String bearerToken) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookUpdate").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookUpdate(java.lang.String url, java.lang.String bearerToken) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookUpdate").withParameter("url", url).withParameter("bearerToken", bearerToken).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
java.lang.String GlusterDeleteWebhookException();	java.lang.String GlusterWebhookDeleteException();
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget()) { if (!(validateExternalVnicProfileMapping())) { return false; } org.ovirt.engine.core.bll.validator.ImportValidator importValidator = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImportValidator(); if (!(validate(importValidator.validateUnregisteredEntity(vmFromConfiguration, ovfEntityData)))) { return false; } if (!(validate(importValidator.validateStorageExistForUnregisteredEntity(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImages(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().isAllowPartialImport(), imageToDestinationDomainMap, failedDisksToImportForAuditLog)))) { return false; } if (!(validate(importValidator.validateStorageExistsForMemoryDisks(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVm().getSnapshots(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().isAllowPartialImport(), failedDisksToImportForAuditLog)))) { return false; } setImagesWithStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVm().getImages()); } return true; }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget()) { if (!(validateExternalVnicProfileMapping())) { return false; } org.ovirt.engine.core.bll.validator.ImportValidator importValidator = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImportValidator(); if (!(validate(importValidator.validateUnregisteredEntity(ovfEntityData)))) { return false; } if (!(validate(importValidator.validateDiskNotAlreadyExistOnDB(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImages(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().isAllowPartialImport(), imageToDestinationDomainMap, failedDisksToImportForAuditLog)))) { return false; } if (!(validate(importValidator.validateStorageExistForUnregisteredEntity(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImages(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().isAllowPartialImport(), imageToDestinationDomainMap, failedDisksToImportForAuditLog)))) { return false; } if (!(validate(importValidator.validateStorageExistsForMemoryDisks(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVm().getSnapshots(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().isAllowPartialImport(), failedDisksToImportForAuditLog)))) { return false; } setImagesWithStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVm().getImages()); } return true; }
types.VnicProfileMapping[] vnicProfileMappings();	types.RegistrationVnicProfileMapping[] vnicProfileMappings();
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.Network network) { return getCustomMapSqlParameterSource().addValue("addr", network.getAddr()).addValue("description", network.getDescription()).addValue("free_text_comment", network.getComment()).addValue("id", network.getId()).addValue("name", network.getName()).addValue("vdsm_name", network.getVdsmName()).addValue("subnet", network.getSubnet()).addValue("gateway", network.getGateway()).addValue("type", network.getType()).addValue("vlan_id", network.getVlanId()).addValue("stp", network.getStp()).addValue("storage_pool_id", network.getDataCenterId()).addValue("mtu", network.getMtu()).addValue("vm_network", network.isVmNetwork()).addValue("provider_network_provider_id", ((network.getProvidedBy()) == null ? null : network.getProvidedBy().getProviderId())).addValue("provider_network_external_id", ((network.getProvidedBy()) == null ? null : network.getProvidedBy().getExternalId())).addValue("provider_physical_network_id", network.getProviderPhysicalNetworkId()).addValue("qos_id", network.getQosId()).addValue("label", network.getLabel()).addValue("dns_resolver_configuration_id", getDnsResolverConfigurationId(network)); }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.Network network) { return getCustomMapSqlParameterSource().addValue("addr", network.getAddr()).addValue("description", network.getDescription()).addValue("free_text_comment", network.getComment()).addValue("id", network.getId()).addValue("name", network.getName()).addValue("vdsm_name", network.getVdsmName()).addValue("subnet", network.getSubnet()).addValue("gateway", network.getGateway()).addValue("type", network.getType()).addValue("vlan_id", network.getVlanId()).addValue("stp", network.getStp()).addValue("storage_pool_id", network.getDataCenterId()).addValue("mtu", network.getMtu()).addValue("vm_network", network.isVmNetwork()).addValue("provider_network_provider_id", ((network.getProvidedBy()) == null ? null : network.getProvidedBy().getProviderId())).addValue("provider_network_external_id", ((network.getProvidedBy()) == null ? null : network.getProvidedBy().getExternalId())).addValue("provider_physical_network_id", ((network.getProvidedBy()) == null ? null : network.getProvidedBy().getPhysicalNetworkId())).addValue("qos_id", network.getQosId()).addValue("label", network.getLabel()).addValue("dns_resolver_configuration_id", getDnsResolverConfigurationId(network)); }
@java.lang.Override protected void executeCommand() { if (org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().isSetProviderPhysicalNetworkId()) { loadPhysicalNetworkProviderParameters(org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork()); } org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy proxy = providerProxyFactory.create(getProvider()); org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().getProvidedBy().setExternalId(proxy.add(org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork())); org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().setVlanId(null); org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().setLabel(null); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { super.executeCommand(); getReturnValue().setActionReturnValue(getNetwork().getId()); return null; }); }	@java.lang.Override protected void executeCommand() { if (org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().getProvidedBy().isSetPhysicalNetworkId()) { loadPhysicalNetworkProviderParameters(); } org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy proxy = providerProxyFactory.create(getProvider()); org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().getProvidedBy().setExternalId(proxy.add(org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork())); org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().setVlanId(null); org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().setLabel(null); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { super.executeCommand(); getReturnValue().setActionReturnValue(getNetwork().getId()); return null; }); postAddNetwork(getProvider().getId(), org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().getProvidedBy().getExternalId()); }
private void loadPhysicalNetworkProviderParameters(org.ovirt.engine.core.common.businessentities.network.Network network) { org.ovirt.engine.core.common.businessentities.network.Network physicalProviderNetwork = networkDao.get(network.getProviderPhysicalNetworkId()); network.setVlanId(physicalProviderNetwork.getVlanId()); network.setLabel(physicalProviderNetwork.getVdsmName()); }	protected void postAddNetwork(org.ovirt.engine.core.compat.Guid providerId, java.lang.String externalId) { }
private java.lang.String getAlertTooltipText(org.ovirt.engine.core.common.businessentities.VDS vds) { return "TODO meaningful alert tooltip"; }	private com.google.gwt.safehtml.shared.SafeHtml getAlertTooltipText(org.ovirt.engine.core.common.businessentities.VDS vds) { com.google.gwt.safehtml.shared.SafeHtmlBuilder sb = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); if (hasPMAlert(vds)) { appendLine(sb, org.ovirt.engine.ui.webadmin.widget.table.cell.HostStatusCell.constants.hostHasDisabledPowerManagment()); } if (hasNetconfigDirty(vds)) { appendLine(sb, org.ovirt.engine.ui.webadmin.widget.table.cell.HostStatusCell.constants.hostNetConfigurationDirty()); } if (hasGlusterAlert(vds)) { appendLine(sb, org.ovirt.engine.ui.webadmin.widget.table.cell.HostStatusCell.constants.hostGlusterIssues()); } if (vds.getStaticData().isReinstallRequired()) { appendLine(sb, org.ovirt.engine.ui.webadmin.widget.table.cell.HostStatusCell.constants.hostReinstallRequired()); } if (!(org.ovirt.engine.core.common.utils.NetworkCommonUtils.hasDefaultRoute(vds.getInterfaces()))) { appendLine(sb, org.ovirt.engine.ui.webadmin.widget.table.cell.HostStatusCell.constants.hostHasNoDefaultRoute()); } return sb.toSafeHtml(); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VDS vds, com.google.gwt.dom.client.Element parent, com.google.gwt.dom.client.NativeEvent event) { com.google.gwt.dom.client.Element target = event.getEventTarget().cast(); if (ImageElement.TAG.equals(target.getTagName())) { switch (org.ovirt.engine.ui.common.utils.JqueryUtils.index(target)) { case 0 : return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(getStatusTooltipText(vds.getStatus())); case 1 : return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(getAlertTooltipText(vds)); } } return null; }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VDS vds, com.google.gwt.dom.client.Element parent, com.google.gwt.dom.client.NativeEvent event) { com.google.gwt.dom.client.Element target = event.getEventTarget().cast(); if (ImageElement.TAG.equalsIgnoreCase(target.getTagName())) { switch (org.ovirt.engine.ui.common.utils.JqueryUtils.index(target)) { case 0 : return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(getStatusTooltipText(vds.getStatus())); case 1 : return getAlertTooltipText(vds); } } return null; }
@java.lang.SuppressWarnings("unchecked") public void initModelSortHandler(org.ovirt.engine.ui.uicommonweb.models.SortedListModel<T> sortedModel) { org.ovirt.engine.ui.common.widget.table.ColumnResizeCellTable.addColumnSortHandler(( event) -> applySort(event, sortedModel)); }	public void initModelSortHandler(org.ovirt.engine.ui.uicommonweb.models.SortedListModel<T> sortedModel) { org.ovirt.engine.ui.common.widget.table.ColumnResizeCellTable.addColumnSortHandler(( event) -> applySort(event, sortedModel)); }
@org.junit.Test public void passDiscardNotSupported() { testDiscardFieldParsing(Version.v4_0, null); }	@org.junit.Test public void discardMaxBytesFieldIsNotParsed() { testDiscardFieldParsing(Version.v4_0, null); }
@org.junit.Test public void discardFieldIsParsed() { testDiscardFieldParsing(Version.v4_1, 1024L); }	@org.junit.Test public void discardMaxBytesFieldIsParsed() { testDiscardFieldParsing(Version.v4_1, 1024L); }
@org.junit.Test public void sparsifyNotSupportedWipeAfterDeleteIsOn() { createStorageDomainForDisk(StorageType.ISCSI); disk.setWipeAfterDelete(true); assertThat(validator.isSparsifySupported(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_SPARSIFY_NOT_SUPPORTED_BY_UNDERLYING_STORAGE_WHEN_WAD_IS_ENABLED)); }	@org.junit.Test public void sparsifyNotSupportedWhenWipeAfterDeleteIsOn() { createStorageDomainForDisk(StorageType.ISCSI); disk.setWipeAfterDelete(true); assertThat(validator.isSparsifySupported(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_SPARSIFY_NOT_SUPPORTED_BY_UNDERLYING_STORAGE_WHEN_WAD_IS_ENABLED)); }
public void applySearchString(java.lang.String searchString) { if ((modelProvider.getModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?, ? extends org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>> listModel = modelProvider.getModel(); if ((org.ovirt.engine.core.compat.StringHelper.isNotNullOrEmpty(searchString)) && (searchString.startsWith(listModel.getDefaultSearchString()))) { listModel.setSearchString(searchString); listModel.getSearchCommand().execute(); org.ovirt.engine.ui.uicommonweb.models.MainModelSelectionChangeEvent.fire(((com.google.gwt.event.shared.HasHandlers) (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getEventBus())), listModel); } } }	public void applySearchString(java.lang.String searchString) { if ((modelProvider.getModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?, ? extends org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>> listModel = modelProvider.getModel(); if ((org.ovirt.engine.core.compat.StringHelper.isNotNullOrEmpty(searchString)) && (searchString.startsWith(listModel.getDefaultSearchString()))) { listModel.setSearchString(searchString); listModel.getSearchCommand().execute(); } } }
private boolean isBookmarkForCurrentPlace(org.ovirt.engine.core.common.businessentities.Bookmark bookmark, org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter<?, ?, ?, ?> currentPlacePresenter) { java.lang.String searchString = bookmark.getValue(); if (searchString != null) { java.lang.String[] split = searchString.split(":"); java.lang.String result = null; if ((split.length) > 0) { java.lang.String defaultSearchString = split[0]; result = SearchStringMapping.searchToPlaceMap.get(defaultSearchString); } if ((currentPlacePresenter != null) && (currentPlacePresenter.placeMatches(result))) { return true; } } return false; }	private boolean isBookmarkForCurrentPlace(org.ovirt.engine.core.common.businessentities.Bookmark bookmark, org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter<?, ?, ?, ?> currentPlacePresenter) { java.lang.String searchString = bookmark.getValue(); if (searchString != null) { java.lang.String[] split = searchString.split(":"); java.lang.String result = null; if ((split.length) > 0) { java.lang.String defaultSearchString = split[0]; result = org.ovirt.engine.ui.uicommonweb.models.SearchStringMapping.getPlace(defaultSearchString); } if ((currentPlacePresenter != null) && (currentPlacePresenter.placeMatches(result))) { return true; } } return false; }
private java.lang.String getFragmentFromSearchString(java.lang.String searchString) { java.lang.String[] split = searchString.split(":"); java.lang.String result = null; if ((split.length) > 0) { java.lang.String defaultSearchString = split[0]; result = SearchStringMapping.searchToPlaceMap.get(defaultSearchString); if (((split.length) > 1) && (result != null)) { result += ";search="; java.lang.String searchQuery = split[1].trim(); com.gwtplatform.common.client.ClientUrlUtils urlUtils = new com.gwtplatform.common.client.ClientUrlUtils(); searchQuery = urlUtils.encodeQueryString(searchQuery); searchQuery = searchQuery.replaceAll("%3D", "\\\\2"); result += searchQuery; } } return result; }	private java.lang.String getFragmentFromSearchString(java.lang.String searchString) { java.lang.String[] split = searchString.split(":"); java.lang.String result = null; if ((split.length) > 0) { java.lang.String defaultSearchString = split[0]; result = org.ovirt.engine.ui.uicommonweb.models.SearchStringMapping.getPlace(defaultSearchString); if (((split.length) > 1) && (result != null)) { result += ";search="; java.lang.String searchQuery = split[1].trim(); com.gwtplatform.common.client.ClientUrlUtils urlUtils = new com.gwtplatform.common.client.ClientUrlUtils(); searchQuery = urlUtils.encodeQueryString(searchQuery); searchQuery = searchQuery.replaceAll("%3D", "\\\\2"); result += searchQuery; } } return result; }
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.column.Context context, org.ovirt.engine.ui.uicommonweb.models.storage.LunModel value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { int availableSizeToAdd = value.getAdditionalAvailableSize(); java.lang.String availableSizeToAddString = org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.messages.additionalAvailableSizeInGB(availableSizeToAdd); boolean isGrayedOut = value.getIsGrayedOut(); java.lang.String inputId = id + "_input"; com.google.gwt.safehtml.shared.SafeHtml input; if ((!isGrayedOut) && (!(value.getIsSelected()))) { input = templates.toggledUp(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.constants.addSanStorage()); } else if (!isGrayedOut) { input = templates.toggledDown(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.constants.addSanStorage()); } else if (!(value.getIsIncluded())) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.uiConstants.notAvailableLabel(), "color:gray", inputId); } else if (availableSizeToAdd == 0) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.constants.cannotExtendSanStorage(), "color:gray", inputId); } else if (value.isAdditionalAvailableSizeSelected()) { input = templates.toggledDown(inputId, availableSizeToAddString); } else { input = templates.toggledUp(inputId, availableSizeToAddString); } sb.append(templates.span(id, input)); }	@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.column.Context context, org.ovirt.engine.ui.uicommonweb.models.storage.LunModel value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { int availableSizeToAdd = value.getAdditionalAvailableSize(); java.lang.String availableSizeToAddString = org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.messages.additionalAvailableSizeInGB(availableSizeToAdd); boolean isGrayedOut = value.getIsGrayedOut(); java.lang.String inputId = id + "_input"; com.google.gwt.safehtml.shared.SafeHtml input = null; if ((!isGrayedOut) && (!(value.getIsSelected()))) { input = templates.toggledUp(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.constants.addSanStorage()); } else if (!isGrayedOut) { input = templates.toggledDown(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.constants.addSanStorage()); } else if (!(value.getIsIncluded())) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.uiConstants.notAvailableLabel(), "color:gray", inputId); } else if (availableSizeToAdd == 0) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.constants.cannotExtendSanStorage(), "color:gray", inputId); } else if (value.isAdditionalAvailableSizeSelected()) { input = templates.toggledDown(inputId, availableSizeToAddString); } else { input = templates.toggledUp(inputId, availableSizeToAddString); } sb.append(templates.span(id, input)); }
private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if ((((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) || (!(validateDiscardAfterDeleteLegal(storageDomainValidator)))) || (!(validateDiskOnBackupDomain()))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("discardAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); props.remove("backup"); if (!(props.isEmpty())) { log.warn("There was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }	private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if ((((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) || (!(validateDiscardAfterDeleteLegal(storageDomainValidator)))) || (!(validateDiskOnBackupDomain(storageDomainValidator)))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("discardAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); props.remove("backup"); if (!(props.isEmpty())) { log.warn("There was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
private boolean validateDiskOnBackupDomain() { return validate(new org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator(org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getVm().getStoragePoolId(), java.util.stream.Stream.concat(org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getVm().getDiskMap().values().stream().filter(DisksFilter.ONLY_IMAGES).map(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class::cast).flatMap(( vmDisk) -> vmDisk.getStorageIds().stream()), java.util.stream.Stream.of(org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getVm().getLeaseStorageDomainId()).filter(java.util.Objects::nonNull)).collect(java.util.stream.Collectors.toSet())).allDomainsNotBackupDomains()); }	private boolean validateDiskOnBackupDomain(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator) { boolean storageDomainBackupChanged = (!(oldDomain.isBackup())) && (org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().isBackup()); if (storageDomainBackupChanged) { return validate(storageDomainValidator.isRunningVmsOrVmLeasesForBackupDomain(vmHandler)); } return true; }
java.lang.String storageIscsiYouCanPerformActionsLabel();	java.lang.String storageIscsiAvailableActionsOnMaintenanceLabel();
java.lang.String storageIscsiYouCanRemoveLUNsLabel();	java.lang.String storageIscsiAvailableActionsForActiveDomainsLabel();
@java.lang.Override public final com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { org.ovirt.engine.ui.common.widget.table.cell.ScrollableTextCell.CellTemplate template = com.google.gwt.core.client.GWT.create(ScrollableTextCell.CellTemplate.class); java.lang.String color = ""; if (object != null) { if ((!(object.getIsIncluded())) && ((!(object.getIsSelected())) || (object.getIsGrayedOut()))) { color = "gray"; } else if (object.getIsSelected()) { color = "midnightblue"; } else if ((!(object.getIsAccessible())) && (!(object.getIsGrayedOut()))) { color = "orange"; } else { color = "black"; } } return template.input(getRawValue(object), ("color:" + color), com.google.gwt.user.client.DOM.createUniqueId()); }	@java.lang.Override public final com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { org.ovirt.engine.ui.common.widget.table.cell.ScrollableTextCell.CellTemplate template = com.google.gwt.core.client.GWT.create(ScrollableTextCell.CellTemplate.class); java.lang.String color = ""; if (object != null) { if (((!(object.getIsIncluded())) && ((!(object.getIsSelected())) || (object.getIsGrayedOut()))) || (object.isRemoveLunSelected())) { color = "gray"; } else if (object.getIsSelected()) { color = "midnightblue"; } else if ((!(object.getIsAccessible())) && (!(object.getIsGrayedOut()))) { color = "orange"; } else { color = "black"; } } return template.input(getRawValue(object), ("color:" + color), com.google.gwt.user.client.DOM.createUniqueId()); }
private void addAbstractLunAddOrExtendColumn(org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>> table, java.lang.String headerString) { org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn addOrExtendColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn() { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.storage.LunModel getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { return object; } }; addOrExtendColumn.makeSortable(); table.addColumn(addOrExtendColumn, headerString, "95px"); }	private void addAbstractLunActionsColumn(org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>> table, java.lang.String headerString) { org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn actionsColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn() { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.storage.LunModel getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { return object; } }; actionsColumn.makeSortable(); table.addColumn(actionsColumn, headerString, "95px"); }
private void addAbstractLunAddOrExtendColumn(org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>> table, java.lang.String headerString) { table.addColumn(new org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn() { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.storage.LunModel getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { return object; } }, headerString, "85px"); }	private void addAbstractLunActionsColumn(org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>> table, java.lang.String headerString) { table.addColumn(new org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn() { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.storage.LunModel getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { return object; } }, headerString, "85px"); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel object) { driver.edit(object); initLists(object); object.getPropertyChangedEvent().addListener(( ev, sender, args) -> { java.lang.String propName = args.propertyName; if (propName.equals("IsValid")) { onIsValidPropertyChange(object); } else if (propName.equals("IsGrouppedByTarget")) { updateListByGropping(object); } }); iscsiTargetToLunView.edit(object); iscsiLunToTargetView.edit(object); targetsToLunTab.addClickHandler(( event) -> { iscsiLunToTargetView.disableItemsUpdate(); object.setIsGrouppedByTarget(true); }); lunToTargetsTab.addClickHandler(( event) -> { iscsiTargetToLunView.disableItemsUpdate(); object.setIsGrouppedByTarget(false); }); dialogTabPanel.switchTab((object.getIsGrouppedByTarget() ? targetsToLunTab : lunToTargetsTab)); updateListByGropping(object); if (!(object.getContainer().isNewStorage())) { if ((object.getContainer().getStorage().getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Maintenance)) { mainLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiRemoveLUNsLabel()); subLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiYouCanPerformActionsLabel()); } else if ((object.getContainer().getStorage().getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)) { mainLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiActionsLabel()); subLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiYouCanRemoveLUNsLabel()); } } }	@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel object) { driver.edit(object); initLists(object); object.getPropertyChangedEvent().addListener(( ev, sender, args) -> { java.lang.String propName = args.propertyName; if (propName.equals("IsValid")) { onIsValidPropertyChange(object); } else if (propName.equals("IsGrouppedByTarget")) { updateListByGropping(object); } }); iscsiTargetToLunView.edit(object); iscsiLunToTargetView.edit(object); targetsToLunTab.addClickHandler(( event) -> { iscsiLunToTargetView.disableItemsUpdate(); object.setIsGrouppedByTarget(true); }); lunToTargetsTab.addClickHandler(( event) -> { iscsiTargetToLunView.disableItemsUpdate(); object.setIsGrouppedByTarget(false); }); dialogTabPanel.switchTab((object.getIsGrouppedByTarget() ? targetsToLunTab : lunToTargetsTab)); updateListByGropping(object); if (!(object.getContainer().isNewStorage())) { switch (object.getContainer().getStorage().getStatus()) { case Maintenance : mainLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiRemoveLUNsLabel()); subLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiAvailableActionsOnMaintenanceLabel()); break; case Active : mainLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiActionsLabel()); subLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiAvailableActionsForActiveDomainsLabel()); break; } } }
private java.net.HttpURLConnection getProxyConnection(java.lang.String url) { org.ovirt.engine.core.uutils.net.HttpURLConnectionBuilder builder; java.net.HttpURLConnection connection; try { builder = new org.ovirt.engine.core.uutils.net.HttpURLConnectionBuilder().setURL(url); builder.setTrustStore(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStore().getAbsolutePath()).setTrustStorePassword(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStorePassword()).setTrustStoreType(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStoreType()).setHttpsProtocol(org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.ExternalCommunicationProtocol)); connection = builder.create(); connection.setDoOutput(true); return connection; } catch (java.lang.Exception ex) { throw new java.lang.RuntimeException(java.lang.String.format("Failed to communicate with ovirt-imageio-proxy: %s", ex.getMessage())); } }	private java.net.HttpURLConnection getProxyConnection(java.lang.String url) { try { org.ovirt.engine.core.uutils.net.HttpURLConnectionBuilder builder = new org.ovirt.engine.core.uutils.net.HttpURLConnectionBuilder().setURL(url); builder.setTrustStore(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStore().getAbsolutePath()).setTrustStorePassword(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStorePassword()).setTrustStoreType(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStoreType()).setHttpsProtocol(org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.ExternalCommunicationProtocol)); java.net.HttpURLConnection connection = builder.create(); connection.setDoOutput(true); return connection; } catch (java.lang.Exception ex) { throw new java.lang.RuntimeException(java.lang.String.format("Failed to communicate with ovirt-imageio-proxy: %s", ex.getMessage())); } }
private java.util.Map<java.lang.String, java.lang.Object> createDiskUuidsMap(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { java.util.Map<java.lang.String, java.lang.Object> diskUuids = new java.util.HashMap<>(); diskUuids.put("poolID", diskImage.getStoragePoolId()); diskUuids.put("domainID", diskImage.getStorageIds().get(0)); diskUuids.put("imageID", diskImage.getId()); diskUuids.put("volumeID", diskImage.getImageId()); return diskUuids; }	private java.util.Map<java.lang.String, java.lang.Object> createDiskUuidsMap(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { return createDiskUuidsMap(diskImage.getStoragePoolId(), diskImage.getStorageIds().get(0), diskImage.getId(), diskImage.getImageId()); }
@java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.shouldSkipCommandExecutionCached()) { return true; } if ((org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.canRunActionOnNonManagedVm())) { return false; } if (!(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().isRunningOrPaused())) { return org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.failVmStatusIllegal(); } if (((isoDomainListSynchronizer.findActiveISODomain(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getStoragePoolId())) == null) && (!(org.apache.commons.lang.StringUtils.isEmpty(cdImagePath)))) { return failValidation(EngineMessage.VM_CANNOT_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO); } if ((org.apache.commons.lang.StringUtils.isNotEmpty(cdImagePath)) && (!((org.apache.commons.lang.StringUtils.endsWithIgnoreCase(cdImagePath, ValidationUtils.ISO_SUFFIX)) || (ValidationUtils.GUID.matches(cdImagePath))))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_INVALID_CDROM_DISK_FORMAT); } return true; }	@java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.shouldSkipCommandExecutionCached()) { return true; } if ((org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.canRunActionOnNonManagedVm())) { return false; } if (!(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().isRunningOrPaused())) { return org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.failVmStatusIllegal(); } if (((isoDomainListSynchronizer.findActiveISODomain(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getStoragePoolId())) == null) && (!(org.apache.commons.lang.StringUtils.isEmpty(cdImagePath)))) { return failValidation(EngineMessage.VM_CANNOT_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO); } if ((org.apache.commons.lang.StringUtils.isNotEmpty(cdImagePath)) && (!((org.apache.commons.lang.StringUtils.endsWithIgnoreCase(cdImagePath, ValidationUtils.ISO_SUFFIX)) || (cdImagePath.matches(ValidationUtils.GUID))))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_INVALID_CDROM_DISK_FORMAT); } return true; }
private void setup(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError expectedError) { org.ovirt.engine.core.compat.Guid validGuid = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.VDS validVds = new org.ovirt.engine.core.common.businessentities.VDS(); validVds.setId(validGuid); if (expectedError == (org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError.NOT_SUPPORTED)) { validVds.setClusterCompatibilityVersion(Version.v4_1); } else { validVds.setClusterCompatibilityVersion(Version.v4_2); } org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface eth0 = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); eth0.setName(vdsInterfacesNames[0]); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface eth1 = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); eth1.setName(vdsInterfacesNames[1]); when(getQueryParameters().getId()).thenReturn(validGuid); when(vdsDao.get(eq(validGuid))).thenReturn(validVds); when(interfaceDao.getAllInterfacesForVds(eq(validGuid))).thenReturn(java.util.Arrays.asList(eth0, eth1)); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); returnValue.setSucceeded(true); returnValue.setReturnValue(creatLldpInfoMap((expectedError != (org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError.LLDP_ENABLE)))); when(vdsBrokerFrontendMocked.runVdsCommand(eq(VDSCommandType.GetLldp), any())).thenReturn(returnValue); }	private void setup(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError expectedError) { org.ovirt.engine.core.compat.Guid validGuid = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.VDS validVds = new org.ovirt.engine.core.common.businessentities.VDS(); validVds.setId(validGuid); if (expectedError == (org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError.NOT_SUPPORTED)) { validVds.setClusterCompatibilityVersion(Version.v4_1); } else { validVds.setClusterCompatibilityVersion(Version.v4_2); } when(getQueryParameters().getId()).thenReturn(validGuid); when(vdsDao.get(eq(validGuid))).thenReturn(validVds); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); returnValue.setSucceeded(true); returnValue.setReturnValue(creatLldpInfoMap((expectedError != (org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError.LLDP_ENABLE)))); when(vdsBrokerFrontendMocked.runVdsCommand(eq(VDSCommandType.GetLldp), any())).thenReturn(returnValue); }
private java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.LldpInfo> createEmptyResponse() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ifaces = interfaceDao.getAllInterfacesForVds(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getParameters().getId()); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.LldpInfo> result = new java.util.HashMap<>(); if ((ifaces != null) && (!(ifaces.isEmpty()))) { ifaces.forEach(( iface) -> result.put(iface.getName(), null)); } return result; }	@java.lang.Override protected boolean validateInputs() { if (!(super.validateInputs())) { return false; } if ((getHostId()) == null) { org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getQueryReturnValue().setExceptionString(EngineMessage.HOST_ID_IS_NULL.name()); org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getQueryReturnValue().setSucceeded(false); return false; } if ((org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getHost()) == null) { org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getQueryReturnValue().setExceptionString(EngineMessage.VDS_INVALID_SERVER_ID.name()); org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getQueryReturnValue().setSucceeded(false); return false; } return true; }
@org.junit.Test public void testExecuteQueryNotSupported() { setup(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError.NOT_SUPPORTED); getQuery().executeQueryCommand(); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.LldpInfo> returnValue = getQuery().getQueryReturnValue().getReturnValue(); assertTrue(checkEmptyValuesForIfaces(returnValue)); }	@org.junit.Test public void testExecuteQueryNotSupported() { setup(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError.NOT_SUPPORTED); getQuery().executeQueryCommand(); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.LldpInfo> returnValue = getQuery().getQueryReturnValue().getReturnValue(); assertEquals(returnValue, null); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getParameters().getId(); org.ovirt.engine.core.common.businessentities.VDS vds = vdsDao.get(vdsId); if ((vds != null) && (org.ovirt.engine.core.common.FeatureSupported.isLlldpInformationSupported(vds.getClusterCompatibilityVersion()))) { java.lang.String[] names = new java.lang.String[0]; org.ovirt.engine.core.common.vdscommands.GetLldpVDSCommandParameters lldpVDSCommandParameters = new org.ovirt.engine.core.common.vdscommands.GetLldpVDSCommandParameters(vdsId, names); org.ovirt.engine.core.common.vdscommands.VDSReturnValue command = runVdsCommand(VDSCommandType.GetLldp, lldpVDSCommandParameters); org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getQueryReturnValue().setReturnValue(command.getReturnValue()); } else { org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getQueryReturnValue().setReturnValue(createEmptyResponse()); } }	@java.lang.Override protected void executeQueryCommand() { java.lang.String[] names = new java.lang.String[0]; org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.setLldpVDSCommandParameters(new org.ovirt.engine.core.common.vdscommands.GetLldpVDSCommandParameters(getHostId(), names)); super.executeQueryCommand(); }
private void addGlusterWebhook(org.ovirt.engine.core.common.businessentities.VDS vds) { try { backend.runInternalAction(VdcActionType.AddGlusterWebhookInternal, new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters(vds.getClusterId())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Could not refresh storage devices from gluster host '{}'", vds.getName()); } }	private void addGlusterWebhook(org.ovirt.engine.core.common.businessentities.VDS vds) { try { backend.runInternalAction(ActionType.AddGlusterWebhookInternal, new org.ovirt.engine.core.common.action.VdsActionParameters(vds.getId())); } catch (java.lang.RuntimeException e) { log.error("Could not add gluster webhook for gluster host '{}'", vds.getName()); log.debug("Exception", e); } }
public boolean initGlusterHost(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterHostUUID, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(vds.getId())); if ((returnValue.getSucceeded()) && ((returnValue.getReturnValue()) != null)) { org.ovirt.engine.core.compat.Guid addedServerUuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(((java.lang.String) (returnValue.getReturnValue()))); if (hostUuidExists(vds, addedServerUuid)) { setNonOperational(vds, NonOperationalReason.GLUSTER_HOST_UUID_ALREADY_EXISTS, null); return false; } saveGlusterHostUuid(vds, addedServerUuid); } else { setNonOperational(vds, NonOperationalReason.GLUSTER_HOST_UUID_NOT_FOUND, null); return false; } refreshGlusterStorageDevices(vds); boolean ret = initGlusterPeerProcess(vds); glusterServerDao.updatePeerStatus(vds.getId(), (ret == true ? org.ovirt.engine.core.common.businessentities.gluster.PeerStatus.CONNECTED : org.ovirt.engine.core.common.businessentities.gluster.PeerStatus.DISCONNECTED)); addGlusterWebhook(vds); return ret; }	public boolean initGlusterHost(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterHostUUID, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(vds.getId())); if ((returnValue.getSucceeded()) && ((returnValue.getReturnValue()) != null)) { org.ovirt.engine.core.compat.Guid addedServerUuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(((java.lang.String) (returnValue.getReturnValue()))); if (hostUuidExists(vds, addedServerUuid)) { setNonOperational(vds, NonOperationalReason.GLUSTER_HOST_UUID_ALREADY_EXISTS, null); return false; } saveGlusterHostUuid(vds, addedServerUuid); } else { setNonOperational(vds, NonOperationalReason.GLUSTER_HOST_UUID_NOT_FOUND, null); return false; } refreshGlusterStorageDevices(vds); boolean ret = initGlusterPeerProcess(vds); glusterServerDao.updatePeerStatus(vds.getId(), (ret ? org.ovirt.engine.core.common.businessentities.gluster.PeerStatus.CONNECTED : org.ovirt.engine.core.common.businessentities.gluster.PeerStatus.DISCONNECTED)); if (ret) { addGlusterWebhook(vds); } return ret; }
private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus fetchedStatus) { log.debug("Detected that status of brick '{}' in volume '{}' changed from '{}' to '{}'", brick.getQualifiedName(), volume.getName(), brick.getStatus(), fetchedStatus); logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, new java.util.HashMap<java.lang.String, java.lang.String>() { { put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); put("source", "cli"); } }); if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN); } }	private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus fetchedStatus) { org.ovirt.engine.core.bll.gluster.GlusterSyncJob.log.debug("Detected that status of brick '{}' in volume '{}' changed from '{}' to '{}'", brick.getQualifiedName(), volume.getName(), brick.getStatus(), fetchedStatus); java.util.Map<java.lang.String, java.lang.String> customValues = new java.util.HashMap<>(); customValues.put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); customValues.put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); customValues.put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); customValues.put(GlusterConstants.SOURCE, GlusterConstants.SOURCE_CLI); logUtil.logAuditMessage(volume.getClusterId(), volume.getClusterName(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, customValues); if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { logUtil.logAuditMessage(volume, AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { alertDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession getGeoRepSession(org.ovirt.engine.core.compat.Guid masterVolumeId, java.lang.String slaveHostName, java.lang.String slaveVolumeName) { return getCallsHandler().executeRead("GetGlusterGeoRepSessionBySlaveHostAndVolume", org.ovirt.engine.core.dao.gluster.GlusterGeoRepDaoImpl.georepSessionRowMapper, getCustomMapSqlParameterSource().addValue("master_volume_id", masterVolumeId).addValue("slave_host_name", slaveHostName).addValue("slave_volume_name", slaveVolumeName)); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession getGeoRepSession(org.ovirt.engine.core.compat.Guid masterVolumeId, java.lang.String slaveHostName, java.lang.String slaveVolumeName) { return getCallsHandler().executeRead("GetGlusterGeoRepSessionBySlaveHostNameAndVolume", org.ovirt.engine.core.dao.gluster.GlusterGeoRepDaoImpl.georepSessionRowMapper, getCustomMapSqlParameterSource().addValue("master_volume_id", masterVolumeId).addValue("slave_host_name", slaveHostName).addValue("slave_volume_name", slaveVolumeName)); }
private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity vol, org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status, org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { logUtil.logAuditMessage(vol.getClusterId(), vol, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, new java.util.HashMap<java.lang.String, java.lang.String>() { { put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); put(GlusterConstants.OPTION_NEW_VALUE, status.toString()); put("source", "gluster event"); } }); }	private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity vol, org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status, org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { java.util.Map<java.lang.String, java.lang.String> customValues = new java.util.HashMap<>(); customValues.put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); customValues.put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); customValues.put(GlusterConstants.OPTION_NEW_VALUE, status.toString()); customValues.put(GlusterConstants.SOURCE, GlusterConstants.SOURCE_EVENT); logUtil.logAuditMessage(vol.getClusterId(), vol.getClusterName(), vol, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, customValues); }
public boolean isDummyProvider() { return ((type) == (ProviderType.EXTERNAL_NETWORK)) && (((url) == null) || (url.isEmpty())); }	public boolean getIsUnmanaged() { return isUnmanaged; }
public org.ovirt.engine.core.bll.ValidationResult cpuTypeSupportsVirtService() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_CPU_NOT_FOUND).when((((cluster.supportsVirtService()) && ((cluster.getCpuName()) != null)) && (!(cpuExists())))); }	public org.ovirt.engine.core.bll.ValidationResult cpuTypeSupportsVirtService() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_CPU_NOT_FOUND).when(((cluster.supportsVirtService()) && (!(cpuExists())))); }
@java.lang.Override protected void executeCommand() { int missingDiskCount = getMissingDiskCount(); if (missingDiskCount <= 0) { setOvfUpdateStep(OvfUpdateStep.OVF_UPLOAD); updateOvfStoreContent(); setSucceeded(failedOvfDisks.isEmpty()); } else { setOvfUpdateStep(OvfUpdateStep.OVF_STORES_CREATION); org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.setSucceeded(createOvfStoreDisks(getMissingDiskCount())); } }	@java.lang.Override protected void executeCommand() { int missingDiskCount = getMissingDiskCount(); if (missingDiskCount <= 0) { setOvfUpdateStep(OvfUpdateStep.OVF_UPLOAD); org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.setSucceeded(updateOvfStoreContent()); } else { setOvfUpdateStep(OvfUpdateStep.OVF_STORES_CREATION); org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.setSucceeded(createOvfStoreDisks(getMissingDiskCount())); } }
protected abstract void selectPhysicalDatacentreNetwork();	protected abstract void selectPhysicalDatacenterNetwork();
private void onPhysicalRadioButtonChange(java.lang.Object sender) { if (sender == (getPhysicalNetworkDatacentreRB())) { getNeutronPhysicalNetwork().setIsChangeable(false); getDatacentrePhysicalNetwork().setIsChangeable(true); getPhysicalNetworkDatacentre().setEntity(true); } else if (sender == (getPhysicalNetworkCustomRB())) { getNeutronPhysicalNetwork().setIsChangeable(true); getDatacentrePhysicalNetwork().setIsChangeable(false); getPhysicalNetworkDatacentre().setEntity(false); } else if (sender == (getPhysicalNetworkDatacentre())) { boolean datacentre = getPhysicalNetworkDatacentre().getEntity(); getPhysicalNetworkCustomRB().setEntity((!datacentre), false); getPhysicalNetworkDatacentreRB().setEntity(datacentre, false); } }	private void onPhysicalNetworkSourceChange(java.lang.Object sender) { boolean datacenter = true; if (sender == (getUsePhysicalNetworkFromDatacenter())) { getCustomPhysicalNetwork().setIsChangeable(false); getDatacenterPhysicalNetwork().setIsChangeable(true); datacenter = true; } else if (sender == (getUsePhysicalNetworkFromCustom())) { getCustomPhysicalNetwork().setIsChangeable(true); getDatacenterPhysicalNetwork().setIsChangeable(false); datacenter = false; } getUsePhysicalNetworkFromCustom().setEntity((!datacenter), false); getUsePhysicalNetworkFromDatacenter().setEntity(datacenter, false); }
public void setPhysicalNetworkDatacentre(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetworkDatacentre) { this.physicalNetworkDatacentre = physicalNetworkDatacentre; }	private void onConnectedToPhysicalNetworkChange() { boolean visible = getConnectedToPhysicalNetwork().getEntity(); getUsePhysicalNetworkFromDatacenter().setIsAvailable(visible); getUsePhysicalNetworkFromCustom().setIsAvailable(visible); getCustomPhysicalNetwork().setIsAvailable(visible); getDatacenterPhysicalNetwork().setIsAvailable(visible); }
private boolean isConnectedToPhysicalNetwork() { final org.ovirt.engine.core.common.businessentities.network.Network network = getNetwork(); return false; }	private boolean isConnectedToPhysicalNetwork() { final org.ovirt.engine.core.common.businessentities.network.Network network = getNetwork(); return (network.isExternal()) && ((network.getProvidedBy().isSetPhysicalNetworkId()) || (org.ovirt.engine.core.compat.StringHelper.isNotNullOrEmpty(network.getLabel()))); }
@java.lang.Override public void updateVisibility() { messageLabel.setVisible(false); externalLabel.setVisible(org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly)); onPhysicalNetworkChange(); }	@java.lang.Override public void updateVisibility() { messageLabel.setVisible(false); externalLabel.setVisible(org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly)); physicalNetworkLabel.setVisible(false); }
@java.lang.Override protected void selectPhysicalDatacentreNetwork() { final org.ovirt.engine.core.common.businessentities.network.Network network = getNetwork(); }	@java.lang.Override protected void selectPhysicalDatacenterNetwork() { final org.ovirt.engine.core.common.businessentities.network.Network network = getNetwork(); if ((network.isExternal()) && (network.getProvidedBy().isSetPhysicalNetworkId())) { getDatacenterPhysicalNetwork().getItems().stream().filter(( net) -> java.util.Objects.equals(net.getId(), network.getProvidedBy().getPhysicalNetworkId())).findAny().ifPresent(this.getDatacenterPhysicalNetwork()::setSelectedItem); } }
public void setPhysicalNetworkCustomRB(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetworkCustomRB) { this.physicalNetworkCustomRB = physicalNetworkCustomRB; }	public void setUsePhysicalNetworkFromCustom(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> usePhysicalNetworkFromCustom) { this.usePhysicalNetworkFromCustom = usePhysicalNetworkFromCustom; }
@java.lang.Override protected void selectPhysicalDatacentreNetwork() { getDatacentrePhysicalNetwork().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(getDatacentrePhysicalNetwork().getItems())); }	@java.lang.Override protected void selectPhysicalDatacenterNetwork() { getDatacenterPhysicalNetwork().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(getDatacenterPhysicalNetwork().getItems())); }
@java.lang.Override protected void executeSave() { final org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(getSelectedDc().getId(), getNetwork()); parameters.setVnicProfileRequired(false); if (getExternal().getEntity()) { org.ovirt.engine.core.common.businessentities.Provider<?> externalProvider = getExternalProviders().getSelectedItem(); org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providerNetwork = new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(); providerNetwork.setProviderId(externalProvider.getId()); getNetwork().setProvidedBy(providerNetwork); if (getPhysicalNetworkDatacentre().getEntity()) { } org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.AddNetworkOnProvider, parameters, addNetworkCallback(), null); } else { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.AddNetwork, parameters, addNetworkCallback(), null); } }	@java.lang.Override protected void executeSave() { final org.ovirt.engine.core.common.action.AddNetworkWithSubnetParameters parameters = new org.ovirt.engine.core.common.action.AddNetworkWithSubnetParameters(getSelectedDc().getId(), getNetwork()); parameters.setVnicProfileRequired(false); if (getExternal().getEntity()) { org.ovirt.engine.core.common.businessentities.Provider<?> externalProvider = getExternalProviders().getSelectedItem(); org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providerNetwork = new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(); providerNetwork.setProviderId(externalProvider.getId()); getNetwork().setProvidedBy(providerNetwork); if (hasDefinedSubnet()) { getSubnetModel().flush(); parameters.setExternalSubnet(getSubnetModel().getSubnet()); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction((hasDefinedSubnet() ? org.ovirt.engine.core.common.action.ActionType.AddNetworkWithSubnetOnProvider : org.ovirt.engine.core.common.action.ActionType.AddNetworkOnProvider), parameters, addNetworkCallback(), null); } else { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.AddNetwork, parameters, addNetworkCallback(), null); } }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getPhysicalNetwork() { return physicalNetwork; }	public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getConnectedToPhysicalNetwork() { return connectedToPhysicalNetwork; }
@java.lang.Override protected void onExportChanged() { super.onExportChanged(); if (getExternal().getEntity()) { getHasVLanTag().setIsChangeable(false); getVLanTag().setIsChangeable(false); getIsVmNetwork().setIsChangeable(false); getNetworkLabel().setIsChangeable(false); getNeutronPhysicalNetwork().setIsChangeable(false); } }	@java.lang.Override protected void onExportChanged() { super.onExportChanged(); if (getExternal().getEntity()) { getHasVLanTag().setIsChangeable(false); getVLanTag().setIsChangeable(false); getIsVmNetwork().setIsChangeable(false); getNetworkLabel().setIsChangeable(false); getCustomPhysicalNetwork().setIsChangeable(false); } }
public void setPhysicalNetwork(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetwork) { this.physicalNetwork = physicalNetwork; }	public void setConnectedToPhysicalNetwork(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> connectedToPhysicalNetwork) { this.connectedToPhysicalNetwork = connectedToPhysicalNetwork; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getPhysicalNetworkCustomRB() { return physicalNetworkCustomRB; }	public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getUsePhysicalNetworkFromCustom() { return usePhysicalNetworkFromCustom; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getPhysicalNetworkDatacentreRB() { return physicalNetworkDatacentreRB; }	public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getUsePhysicalNetworkFromDatacenter() { return usePhysicalNetworkFromDatacenter; }
public void flush() { network.setDataCenterId(getSelectedDc().getId()); network.setName(getName().getEntity()); network.setStp(getIsStpEnabled().getEntity()); network.setDescription(getDescription().getEntity()); network.setComment(getComment().getEntity()); network.setVmNetwork(getIsVmNetwork().getEntity()); java.lang.String label = getNetworkLabel().getSelectedItem(); if ((getExternal().getEntity()) && (getPhysicalNetwork().getEntity())) { label = (!(getPhysicalNetworkDatacentre().getEntity())) ? getNeutronPhysicalNetwork().getEntity() : null; } network.setLabel(((label == null) || (!(label.isEmpty())) ? label : null)); network.setMtu(0); if (getMtu().getIsChangable()) { network.setMtu(java.lang.Integer.parseInt(getMtu().getEntity().toString())); } network.setDnsResolverConfiguration(getDnsConfigurationModel().flush()); network.setVlanId(null); if (getHasVLanTag().getEntity()) { network.setVlanId(java.lang.Integer.parseInt(getVLanTag().getEntity().toString())); } for (org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel profileModel : getProfiles().getItems()) { profileModel.flush(); } if (getQos().getIsChangable()) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = getQos().getSelectedItem(); network.setQosId((qos == (org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel.EMPTY_HOST_NETWORK_QOS) ? null : qos.getId())); } }	public void flush() { network.setDataCenterId(getSelectedDc().getId()); network.setName(getName().getEntity()); network.setStp(getIsStpEnabled().getEntity()); network.setDescription(getDescription().getEntity()); network.setComment(getComment().getEntity()); network.setVmNetwork(getIsVmNetwork().getEntity()); java.lang.String label = getNetworkLabel().getSelectedItem(); if ((getExternal().getEntity()) && (getConnectedToPhysicalNetwork().getEntity())) { label = (!(getUsePhysicalNetworkFromDatacenter().getEntity())) ? getCustomPhysicalNetwork().getEntity() : null; } network.setLabel((org.ovirt.engine.core.compat.StringHelper.isNotNullOrEmpty(label) ? label : null)); network.setMtu(0); if (getMtu().getIsChangable()) { network.setMtu(java.lang.Integer.parseInt(getMtu().getEntity().toString())); } network.setDnsResolverConfiguration(getDnsConfigurationModel().flush()); network.setVlanId(null); if (getHasVLanTag().getEntity()) { network.setVlanId(java.lang.Integer.parseInt(getVLanTag().getEntity().toString())); } for (org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel profileModel : getProfiles().getItems()) { profileModel.flush(); } if (getQos().getIsChangable()) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = getQos().getSelectedItem(); network.setQosId((qos == (org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel.EMPTY_HOST_NETWORK_QOS) ? null : qos.getId())); } }
protected void onExportChanged() { boolean externalNetwork = getExternal().getEntity(); getNetworkLabel().setIsChangeable((!externalNetwork)); getNeutronPhysicalNetwork().setIsChangeable(externalNetwork); getQos().setIsChangeable((!externalNetwork)); getAddQosCommand().setIsExecutionAllowed((!externalNetwork)); getPhysicalNetwork().setIsChangeable(externalNetwork); getPhysicalNetworkCustomRB().setIsChangeable(externalNetwork); getPhysicalNetworkDatacentreRB().setIsChangeable(externalNetwork); updateMtuSelectorsChangeability(); }	protected void onExportChanged() { boolean externalNetwork = getExternal().getEntity(); getNetworkLabel().setIsChangeable((!externalNetwork)); getCustomPhysicalNetwork().setIsChangeable((externalNetwork && (!(getUsePhysicalNetworkFromDatacenter().getEntity())))); getDatacenterPhysicalNetwork().setIsChangeable((externalNetwork && (getUsePhysicalNetworkFromDatacenter().getEntity()))); getQos().setIsChangeable((!externalNetwork)); getAddQosCommand().setIsExecutionAllowed((!externalNetwork)); getConnectedToPhysicalNetwork().setIsChangeable(externalNetwork); getUsePhysicalNetworkFromCustom().setIsChangeable(externalNetwork); getUsePhysicalNetworkFromDatacenter().setIsChangeable(externalNetwork); updateMtuSelectorsChangeability(); }
private void updateAvailability() { if (!(org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly))) { getExternalProviders().setIsAvailable(false); getNeutronPhysicalNetwork().setIsAvailable(false); getCreateSubnet().setIsAvailable(false); getVLanTag().setIsAvailable(false); getHasVLanTag().setIsAvailable(false); getExternal().setIsAvailable(false); } }	private void updateAvailability() { if (!(org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly))) { getExternalProviders().setIsAvailable(false); getCustomPhysicalNetwork().setIsAvailable(false); getCreateSubnet().setIsAvailable(false); getVLanTag().setIsAvailable(false); getHasVLanTag().setIsAvailable(false); getExternal().setIsAvailable(false); } }
private void initPhysicalNetworkList() { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(QueryType.GetAllNetworks, new org.ovirt.engine.core.common.queries.IdQueryParameters(getSelectedDc().getId()), new org.ovirt.engine.ui.uicommonweb.models.datacenters.AsyncQuery<org.ovirt.engine.core.common.queries.QueryReturnValue>(( result) -> { List<org.ovirt.engine.core.common.businessentities.network.Network> networks = result.getReturnValue(); if (networks != null) { getDatacentrePhysicalNetwork().setItems(networks); selectPhysicalDatacentreNetwork(); } })); }	private void initPhysicalNetworkList() { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(QueryType.GetAllNetworks, new org.ovirt.engine.core.common.queries.IdQueryParameters(getSelectedDc().getId()), new org.ovirt.engine.ui.uicommonweb.models.datacenters.AsyncQuery<org.ovirt.engine.core.common.queries.QueryReturnValue>(( result) -> { List<org.ovirt.engine.core.common.businessentities.network.Network> networks = result.getReturnValue(); if (networks != null) { getDatacenterPhysicalNetwork().setItems(networks); selectPhysicalDatacenterNetwork(); } })); }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.Network> getDatacentrePhysicalNetwork() { return datacentrePhysicalNetwork; }	public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.Network> getDatacenterPhysicalNetwork() { return datacenterPhysicalNetwork; }
public void setPhysicalNetworkDatacentreRB(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetworkDatacentreRB) { this.physicalNetworkDatacentreRB = physicalNetworkDatacentreRB; }	public void setUsePhysicalNetworkFromDatacenter(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> usePhysicalNetworkFromDatacenter) { this.usePhysicalNetworkFromDatacenter = usePhysicalNetworkFromDatacenter; }
public void setDatacentrePhysicalNetwork(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.Network> datacentrePhysicalNetwork) { this.datacentrePhysicalNetwork = datacentrePhysicalNetwork; }	public void setDatacenterPhysicalNetwork(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.Network> datacenterPhysicalNetwork) { this.datacenterPhysicalNetwork = datacenterPhysicalNetwork; }
private void init() { setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editLogicalNetworkTitle()); setHelpTag(HelpTag.edit_logical_network); setHashName("edit_logical_network"); getName().setEntity(getNetwork().getName()); getDescription().setEntity(getNetwork().getDescription()); getComment().setEntity(getNetwork().getComment()); getIsStpEnabled().setEntity(getNetwork().getStp()); getHasVLanTag().setEntity(((getNetwork().getVlanId()) != null)); getVLanTag().setEntity(getNetwork().getVlanId()); initMtu(); initIsVm(); getExternal().setEntity(getNetwork().isExternal()); getExternal().setIsChangeable(false); getExternalProviders().setIsChangeable(false); getPhysicalNetwork().setEntity(isConnectedToPhysicalNetwork()); getPhysicalNetwork().setIsChangeable(false); if (isConnectedToPhysicalNetwork()) { getPhysicalNetworkDatacentre().setEntity(false); } getPhysicalNetworkDatacentreRB().setIsChangeable(false); getPhysicalNetworkCustomRB().setIsChangeable(false); getDatacentrePhysicalNetwork().setIsChangeable(false); if ((getNetwork().isExternal()) && (isConnectedToPhysicalNetwork())) { getNeutronPhysicalNetwork().setEntity(getNetwork().getLabel()); } else { getNetworkLabel().setSelectedItem(getNetwork().getLabel()); } toggleProfilesAvailability(); }	private void init() { setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editLogicalNetworkTitle()); setHelpTag(HelpTag.edit_logical_network); setHashName("edit_logical_network"); getName().setEntity(getNetwork().getName()); getDescription().setEntity(getNetwork().getDescription()); getComment().setEntity(getNetwork().getComment()); getIsStpEnabled().setEntity(getNetwork().getStp()); getHasVLanTag().setEntity(((getNetwork().getVlanId()) != null)); getVLanTag().setEntity(getNetwork().getVlanId()); initMtu(); initIsVm(); getExternal().setEntity(getNetwork().isExternal()); getExternal().setIsChangeable(false); getExternalProviders().setIsChangeable(false); getConnectedToPhysicalNetwork().setEntity(isConnectedToPhysicalNetwork()); getConnectedToPhysicalNetwork().setIsChangeable(false); getUsePhysicalNetworkFromDatacenter().setIsChangeable(false); getUsePhysicalNetworkFromCustom().setIsChangeable(false); getDatacenterPhysicalNetwork().setIsChangeable(false); if (isConnectedToPhysicalNetwork()) { if (getNetwork().getProvidedBy().isSetPhysicalNetworkId()) { getUsePhysicalNetworkFromDatacenter().setEntity(true); } else { getUsePhysicalNetworkFromCustom().setEntity(true); getCustomPhysicalNetwork().setEntity(getNetwork().getLabel()); } } else { getNetworkLabel().setSelectedItem(getNetwork().getLabel()); } toggleProfilesAvailability(); }
java.lang.String physicalNetworkDatacentreLabel();	java.lang.String physicalNetworkDatacenterLabel();
private void setQuotaStorage(org.ovirt.engine.core.common.businessentities.Quota quota) { if (quota.isEmptyStorageQuota()) { quota.setGlobalQuotaStorage(new org.ovirt.engine.core.common.businessentities.QuotaStorage(org.ovirt.engine.core.compat.Guid.newGuid(), quota.getId(), null, (-1L), 0.0)); return; } if ((quota.getGlobalQuotaStorage()) != null) { quota.getGlobalQuotaStorage().setQuotaId(quota.getId()); quota.getGlobalQuotaStorage().setQuotaStorageId(org.ovirt.engine.core.compat.Guid.newGuid()); } if ((quota.getQuotaStorages()) != null) { for (org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage : quota.getQuotaStorages()) { quotaStorage.setQuotaId(quota.getId()); quotaStorage.setQuotaStorageId(org.ovirt.engine.core.compat.Guid.newGuid()); } } }	@java.lang.Override protected void init() { getParameters().getQuota().setId(org.ovirt.engine.core.compat.Guid.newGuid()); super.init(); }
private void finalizeDownloadIfNecessary(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context, org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()) != 0) && ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()) == (upToDateImageTransfer.getBytesSent()))) && (!(upToDateImageTransfer.getActive()))) { if (!(context.entity.getActive())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer statusUpdate = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); statusUpdate.setPhase(ImageTransferPhase.FINALIZING_SUCCESS); runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId(), statusUpdate)); } } }	private void finalizeDownloadIfNecessary(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context, org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer) { if ((((upToDateImageTransfer.getBytesTotal()) != 0) && ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()) == (upToDateImageTransfer.getBytesSent()))) && (!(upToDateImageTransfer.getActive()))) { if (!(context.entity.getActive())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer statusUpdate = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); statusUpdate.setPhase(ImageTransferPhase.FINALIZING_SUCCESS); runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId(), statusUpdate)); } } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DiskContentType.class, to = org.ovirt.engine.api.model.DiskContentType.class) public static org.ovirt.engine.api.model.DiskContentType map(org.ovirt.engine.api.model.DiskContentType contentType) { if (contentType == null) { return null; } switch (contentType) { case DATA : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; case ISO : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; case MEMORY_DUMP_VOLUME : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; case MEMORY_METADATA_VOLUME : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; case OVF_STORE : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; default : throw new java.lang.IllegalArgumentException((("Unknown disk content type \"" + contentType) + "\"")); } }	public static org.ovirt.engine.api.model.DiskContentType mapDiskContentType(org.ovirt.engine.api.model.DiskContentType contentType) { if (contentType == null) { return null; } switch (contentType) { case DATA : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; case ISO : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; case MEMORY_DUMP_VOLUME : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; case MEMORY_METADATA_VOLUME : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; case OVF_STORE : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; default : throw new java.lang.IllegalArgumentException((("Unknown disk content type \"" + contentType) + "\"")); } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DiskContentType.class, to = org.ovirt.engine.api.model.DiskContentType.class) public static org.ovirt.engine.api.model.DiskContentType map(org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType) { switch (contentType) { case DATA : return org.ovirt.engine.api.model.DiskContentType.DATA; case ISO : return org.ovirt.engine.api.model.DiskContentType.ISO; case MEMORY_DUMP_VOLUME : return org.ovirt.engine.api.model.DiskContentType.MEMORY_DUMP_VOLUME; case MEMORY_METADATA_VOLUME : return org.ovirt.engine.api.model.DiskContentType.MEMORY_METADATA_VOLUME; case OVF_STORE : return org.ovirt.engine.api.model.DiskContentType.OVF_STORE; default : return null; } }	public static org.ovirt.engine.api.model.DiskContentType mapDiskContentType(org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType) { if (contentType == null) { return null; } switch (contentType) { case DATA : return org.ovirt.engine.api.model.DiskContentType.DATA; case ISO : return org.ovirt.engine.api.model.DiskContentType.ISO; case MEMORY_DUMP_VOLUME : return org.ovirt.engine.api.model.DiskContentType.MEMORY_DUMP_VOLUME; case MEMORY_METADATA_VOLUME : return org.ovirt.engine.api.model.DiskContentType.MEMORY_METADATA_VOLUME; case OVF_STORE : return org.ovirt.engine.api.model.DiskContentType.OVF_STORE; default : throw new java.lang.IllegalArgumentException((("Unknown disk content type \"" + contentType) + "\"")); } }
protected void updateExternalVnicProfilesPerTargetCluster() { final java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> result = new java.util.HashMap<>(); getEntities().getItems().stream().forEach(( importTemplateData) -> updateExternalVnicProfilesPerTargetCluster(importTemplateData.getEntity().getInterfaces(), importTemplateData.getCluster().getSelectedItem(), result)); setExternalVnicProfilesPerTargetCluster(result); }	protected java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> getInterfaces(org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData importEntityData) { return importEntityData.getEntity().getInterfaces(); }
protected void updateExternalVnicProfilesPerTargetCluster() { final java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> result = new java.util.HashMap<>(); getEntities().getItems().stream().forEach(( registerVmData) -> updateExternalVnicProfilesPerTargetCluster(registerVmData.getEntity().getInterfaces(), registerVmData.getCluster().getSelectedItem(), result)); setExternalVnicProfilesPerTargetCluster(result); }	protected java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> getInterfaces(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData importEntityData) { return importEntityData.getEntity().getInterfaces(); }
protected java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> updateExternalVnicProfilesPerTargetCluster(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces, org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> result) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> clusterVnicProfileMappings; if (result.containsKey(cluster)) { clusterVnicProfileMappings = result.get(cluster); } else { clusterVnicProfileMappings = new java.util.HashSet(); result.put(cluster, clusterVnicProfileMappings); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> previousClusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { previousClusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { previousClusterVnicProfileMappings = new java.util.HashSet(); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> vmVnicProfiles = getNewVnicProfileMappings(interfaces, previousClusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); return result; }	protected abstract java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> getInterfaces(E importEntityData);
public java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> cloneExternalVnicProfiles(org.ovirt.engine.core.common.businessentities.Cluster cluster) { if ((externalVnicProfilesPerTargetCluster.get(cluster)) == null) { return new java.util.ArrayList<>(); } final java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> result = new java.util.ArrayList(externalVnicProfilesPerTargetCluster.get(cluster).size()); externalVnicProfilesPerTargetCluster.get(cluster).stream().forEach(( vnicProfileMappingEntity) -> result.add(vnicProfileMappingEntity.getExternalVnicProfileMapping())); return result; }	public java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> cloneExternalVnicProfiles(org.ovirt.engine.core.common.businessentities.Cluster cluster) { if ((externalVnicProfilesPerTargetCluster.get(cluster)) == null) { return java.util.Collections.emptyList(); } return externalVnicProfilesPerTargetCluster.get(cluster).stream().map(VnicProfileMappingEntity::getExternalVnicProfileMapping).collect(java.util.stream.Collectors.toList()); }
private java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> getNewVnicProfileMappings(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> previousClusterVnicProfileMappings) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> result = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : interfaces) { final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity(vnic.getNetworkName(), vnic.getVnicProfileName(), null); final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity mapping = previousClusterVnicProfileMappings.stream().filter(( x) -> x.equals(newMapping)).findFirst().orElse(newMapping); result.add(mapping); } return result; }	private java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> getNewVnicProfileMappings(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> previousClusterVnicProfileMappings) { java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> result = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : interfaces) { org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity(vnic.getNetworkName(), vnic.getVnicProfileName(), null); org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity mapping = previousClusterVnicProfileMappings.stream().filter(( x) -> x.isSameSourceProfile(newMapping)).findFirst().orElse(newMapping); result.add(mapping); } return result; }
protected void addVnicProfileMappingCommand() { final org.ovirt.engine.ui.uicommonweb.UICommand vnicProfileMappingCommand = createVnicProfileMappingCommand(); org.ovirt.engine.ui.uicommonweb.models.storage.RegisterEntityModel.getCommands().add(vnicProfileMappingCommand); }	protected void addVnicProfileMappingCommand() { org.ovirt.engine.ui.uicommonweb.models.storage.RegisterEntityModel.getCommands().add(createVnicProfileMappingCommand()); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if ("OnSave".equals(command.getName())) { onSave(); } if ((command == (getVnicProfileMappingCommand())) && ((org.ovirt.engine.ui.uicommonweb.models.storage.RegisterEntityModel.getWindow()) == null)) { updateExternalVnicProfilesPerTargetCluster(); vnicProfileMappingModel = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingModel(this, externalVnicProfilesPerTargetCluster); vnicProfileMappingModel.initialize(); setWindow(vnicProfileMappingModel); } }	@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if ("OnSave".equals(command.getName())) { onSave(); } if (org.ovirt.engine.ui.uicommonweb.models.storage.RegisterEntityModel.VNIC_PROFILE_MAPPING_COMMAND.equals(command.getName())) { onVnicProfileMappingCommand(); } }
protected abstract void updateExternalVnicProfilesPerTargetCluster();	private java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> updateExternalVnicProfilesPerTargetCluster() { java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> updated = new java.util.HashMap<>(); for (E importEntityData : getEntities().getItems()) { org.ovirt.engine.core.common.businessentities.Cluster cluster = importEntityData.getCluster().getSelectedItem(); java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> clusterVnicProfileMappings; if (updated.containsKey(cluster)) { clusterVnicProfileMappings = updated.get(cluster); } else { clusterVnicProfileMappings = new java.util.HashSet(); updated.put(cluster, clusterVnicProfileMappings); } java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> previousClusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { previousClusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { previousClusterVnicProfileMappings = new java.util.HashSet(); } java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> vmVnicProfiles = getNewVnicProfileMappings(getInterfaces(importEntityData), previousClusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); } return updated; }
public org.ovirt.engine.core.common.action.ActionType getCommandType() { return commandType; }	public java.lang.String getCommandType() { return commandType; }
protected org.ovirt.engine.core.bll.context.DefaultCompensationContext createDefaultCompensationContext() { org.ovirt.engine.core.bll.context.DefaultCompensationContext defaultContext = new org.ovirt.engine.core.bll.context.DefaultCompensationContext(); defaultContext.setCommandId(commandId); defaultContext.setCommandType(getActionType()); defaultContext.setBusinessEntitySnapshotDao(businessEntitySnapshotDao); defaultContext.setSnapshotSerializer(org.ovirt.engine.core.utils.SerializationFactory.getSerializer()); return defaultContext; }	protected org.ovirt.engine.core.bll.context.DefaultCompensationContext createDefaultCompensationContext() { org.ovirt.engine.core.bll.context.DefaultCompensationContext defaultContext = new org.ovirt.engine.core.bll.context.DefaultCompensationContext(); defaultContext.setCommandId(commandId); defaultContext.setCommandType(getClass().getName()); defaultContext.setBusinessEntitySnapshotDao(businessEntitySnapshotDao); defaultContext.setSnapshotSerializer(org.ovirt.engine.core.utils.SerializationFactory.getSerializer()); return defaultContext; }
@java.lang.Override public java.util.List<org.apache.commons.collections.KeyValue> getAllCommands() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource(); return getCallsHandler().executeReadList("get_all_commands", ( rs, rowNum) -> { org.apache.commons.collections.keyvalue.DefaultKeyValue result = new org.apache.commons.collections.keyvalue.DefaultKeyValue(); result.setKey(getGuidDefaultEmpty(rs, "command_id")); result.setValue(org.ovirt.engine.core.common.action.ActionType.valueOf(rs.getString("command_type"))); return result; }, parameterSource); }	@java.lang.Override public java.util.List<org.apache.commons.collections.KeyValue> getAllCommands() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource(); return getCallsHandler().executeReadList("get_all_commands", ( rs, rowNum) -> { org.apache.commons.collections.keyvalue.DefaultKeyValue result = new org.apache.commons.collections.keyvalue.DefaultKeyValue(); result.setKey(getGuidDefaultEmpty(rs, "command_id")); result.setValue(rs.getString("command_type")); return result; }, parameterSource); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot entitySnapshot) { org.ovirt.engine.core.compat.Guid id = entitySnapshot.getId(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(id)) { id = org.ovirt.engine.core.compat.Guid.newGuid(); entitySnapshot.setId(id); } org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", entitySnapshot.getId()).addValue("command_id", entitySnapshot.getCommandId()).addValue("command_type", entitySnapshot.getCommandType().name()).addValue("entity_id", entitySnapshot.getEntityId()).addValue("entity_type", entitySnapshot.getEntityType()).addValue("entity_snapshot", entitySnapshot.getEntitySnapshot()).addValue("snapshot_class", entitySnapshot.getSnapshotClass()).addValue("snapshot_type", entitySnapshot.getSnapshotType()).addValue("insertion_order", entitySnapshot.getInsertionOrder()); getCallsHandler().executeModification("insert_entity_snapshot", parameterSource); }	@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot entitySnapshot) { org.ovirt.engine.core.compat.Guid id = entitySnapshot.getId(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(id)) { id = org.ovirt.engine.core.compat.Guid.newGuid(); entitySnapshot.setId(id); } org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", entitySnapshot.getId()).addValue("command_id", entitySnapshot.getCommandId()).addValue("command_type", entitySnapshot.getCommandType()).addValue("entity_id", entitySnapshot.getEntityId()).addValue("entity_type", entitySnapshot.getEntityType()).addValue("entity_snapshot", entitySnapshot.getEntitySnapshot()).addValue("snapshot_class", entitySnapshot.getSnapshotClass()).addValue("snapshot_type", entitySnapshot.getSnapshotType()).addValue("insertion_order", entitySnapshot.getInsertionOrder()); getCallsHandler().executeModification("insert_entity_snapshot", parameterSource); }
@org.junit.Test public void testInsertSnapshot() { org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot snapshot = new org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot(); org.ovirt.engine.core.compat.Guid commandId = org.ovirt.engine.core.compat.Guid.newGuid(); snapshot.setCommandId(commandId); snapshot.setCommandType(ActionType.UpdateVds); snapshot.setEntityId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); snapshot.setEntityType("org.ovirt.engine.core.common.businessentities.VdsStatic"); snapshot.setEntitySnapshot("something"); snapshot.setSnapshotClass("someClass"); dao.save(snapshot); java.util.List<org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot> snapshotsFromDb = dao.getAllForCommandId(commandId); assertNotNull(snapshotsFromDb); assertEquals(1, snapshotsFromDb.size()); assertEquals(snapshot, snapshotsFromDb.get(0)); }	@org.junit.Test public void testInsertSnapshot() { org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot snapshot = new org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot(); org.ovirt.engine.core.compat.Guid commandId = org.ovirt.engine.core.compat.Guid.newGuid(); snapshot.setCommandId(commandId); snapshot.setCommandType("org.ovirt.engine.core.bll.UpdateVdsCommand"); snapshot.setEntityId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); snapshot.setEntityType("org.ovirt.engine.core.common.businessentities.VdsStatic"); snapshot.setEntitySnapshot("something"); snapshot.setSnapshotClass("someClass"); dao.save(snapshot); java.util.List<org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot> snapshotsFromDb = dao.getAllForCommandId(commandId); assertNotNull(snapshotsFromDb); assertEquals(1, snapshotsFromDb.size()); assertEquals(snapshot, snapshotsFromDb.get(0)); }
boolean validateCluster() { if ((org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getCluster()) == null) { return failValidation(EngineMessage.VDS_CLUSTER_IS_NOT_VALID); } return true; }	protected boolean validateCluster() { if ((org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getCluster()) == null) { return failValidation(EngineMessage.VDS_CLUSTER_IS_NOT_VALID); } return true; }
public void compensate() { java.util.List<org.apache.commons.collections.KeyValue> commandSnapshots = businessEntitySnapshotDao.getAllCommands(); for (org.apache.commons.collections.KeyValue commandSnapshot : commandSnapshots) { try { compensate(((org.ovirt.engine.core.compat.Guid) (commandSnapshot.getKey()))); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.OnStartupCompensation.log.error("Failed to run compensation on startup for Command '{}', Command Id '{}': {}", commandSnapshot.getValue(), commandSnapshot.getKey(), e.getMessage()); org.ovirt.engine.core.bll.OnStartupCompensation.log.error("Exception", e); } org.ovirt.engine.core.bll.OnStartupCompensation.log.info("Running compensation on startup for Command '{}', Command Id '{}'", commandSnapshot.getValue(), commandSnapshot.getKey()); } }	public void compensate() { java.util.List<org.apache.commons.collections.KeyValue> commandSnapshots = businessEntitySnapshotDao.getAllCommands(); for (org.apache.commons.collections.KeyValue commandSnapshot : commandSnapshots) { try { compensate(((org.ovirt.engine.core.compat.Guid) (commandSnapshot.getKey())), ((java.lang.String) (commandSnapshot.getValue())), null); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.CommandCompensator.log.error("Failed to run compensation on startup for Command '{}', Command Id '{}': {}", commandSnapshot.getValue(), commandSnapshot.getKey(), e.getMessage()); org.ovirt.engine.core.bll.CommandCompensator.log.error("Exception", e); } org.ovirt.engine.core.bll.CommandCompensator.log.info("Running compensation on startup for Command '{}', Command Id '{}'", commandSnapshot.getValue(), commandSnapshot.getKey()); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot> getAllForCommandId(org.ovirt.engine.core.compat.Guid commandID) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("command_id", commandID); return getCallsHandler().executeReadList("get_entity_snapshot_by_command_id", ( rs, rowNum) -> { org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot result = new org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot(); result.setId(getGuidDefaultEmpty(rs, "id")); result.setCommandId(getGuidDefaultEmpty(rs, "command_id")); result.setCommandType(org.ovirt.engine.core.common.action.ActionType.valueOf(rs.getString("command_type"))); result.setEntityId(rs.getString("entity_id")); result.setEntityType(rs.getString("entity_type")); result.setEntitySnapshot(rs.getString("entity_snapshot")); result.setSnapshotClass(rs.getString("snapshot_class")); result.setSnapshotType(org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot.SnapshotType.values()[rs.getInt("snapshot_type")]); result.setInsertionOrder(rs.getInt("insertion_order")); return result; }, parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot> getAllForCommandId(org.ovirt.engine.core.compat.Guid commandID) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("command_id", commandID); return getCallsHandler().executeReadList("get_entity_snapshot_by_command_id", ( rs, rowNum) -> { org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot result = new org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot(); result.setId(getGuidDefaultEmpty(rs, "id")); result.setCommandId(getGuidDefaultEmpty(rs, "command_id")); result.setCommandType(rs.getString("command_type")); result.setEntityId(rs.getString("entity_id")); result.setEntityType(rs.getString("entity_type")); result.setEntitySnapshot(rs.getString("entity_snapshot")); result.setSnapshotClass(rs.getString("snapshot_class")); result.setSnapshotType(org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot.SnapshotType.values()[rs.getInt("snapshot_type")]); result.setInsertionOrder(rs.getInt("insertion_order")); return result; }, parameterSource); }
private void initDefaultNetworkProvider() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getAllProvidersByType(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(( result) -> { List<org.ovirt.engine.core.common.businessentities.Provider> providers = ((java.util.List) (result)); providers.add(0, getNoDefaultNetworkProvider()); getDefaultNetworkProvider().setItems(providers); org.ovirt.engine.core.common.businessentities.Cluster cluster = getEntity(); if (cluster != null) { org.ovirt.engine.core.common.businessentities.Provider defaultNetworkProvider = providers.stream().filter(( provider) -> java.util.Objects.equals(provider.getId(), cluster.getDefaultNetworkProviderId())).findFirst().orElse(null); getDefaultNetworkProvider().setSelectedItem(defaultNetworkProvider); } }), ProviderType.OPENSTACK_NETWORK, ProviderType.EXTERNAL_NETWORK); }	private void initDefaultNetworkProvider() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getAllProvidersByType(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(( result) -> { List<org.ovirt.engine.core.common.businessentities.Provider> providers = ((java.util.List) (result)); org.ovirt.engine.core.common.businessentities.Provider noDefaultNetworkProvider = new org.ovirt.engine.core.common.businessentities.Provider(); noDefaultNetworkProvider.setName(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().clusterNoDefaultNetworkProvider()); providers.add(0, noDefaultNetworkProvider); getDefaultNetworkProvider().setItems(providers); org.ovirt.engine.core.common.businessentities.Cluster cluster = getEntity(); if (cluster != null) { org.ovirt.engine.core.common.businessentities.Provider defaultNetworkProvider = providers.stream().filter(( provider) -> java.util.Objects.equals(provider.getId(), cluster.getDefaultNetworkProviderId())).findFirst().orElse(noDefaultNetworkProvider); getDefaultNetworkProvider().setSelectedItem(defaultNetworkProvider); } }), ProviderType.OPENSTACK_NETWORK, ProviderType.EXTERNAL_NETWORK); }
public void selectProviderById(org.ovirt.engine.core.compat.Guid providerId) { if ((getNetworkProviders().getItems()) != null) { org.ovirt.engine.core.common.businessentities.Provider provider = getNetworkProviders().getItems().stream().filter(( candidate) -> java.util.Objects.equals(candidate.getId(), providerId)).findFirst().orElse(null); getNetworkProviders().setSelectedItem(provider); } }	public void selectProviderById(org.ovirt.engine.core.compat.Guid providerId) { if ((getNetworkProviders().getItems()) != null) { org.ovirt.engine.core.common.businessentities.Provider provider = getNetworkProviders().getItems().stream().filter(( candidate) -> java.util.Objects.equals(candidate.getId(), providerId)).findFirst().orElse(getNoExternalNetworkProvider()); getNetworkProviders().setSelectedItem(provider); } }
protected boolean canDiskBeMoved() { return validate(createDiskValidator(getImage()).diskCanBeCopied(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getDiskImage(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getDiskImage().getQcowCompat())); }	private boolean diskContainsPreExtendSnapshots() { return validate(createDiskValidator(getImage()).diskWasExtendedAfterSnapshotWasTaken(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain())); }
@java.lang.Override protected boolean validate() { return ((((((((((((((((super.validate()) && (canDiskBeMoved())) && (isImageExist())) && (checkOperationIsCorrect())) && (checkOperationAllowedOnDiskContentType())) && (isImageNotLocked())) && (isSourceAndDestTheSame())) && (validateSourceStorageDomain())) && (validateDestStorage())) && (checkTemplateInDestStorageDomain())) && (validateSpaceRequirements())) && (validateVmSnapshotStatus())) && (checkCanBeMoveInVm())) && (checkIfNeedToBeOverride())) && (setAndValidateDiskProfiles())) && (setAndValidateQuota())) && (validatePassDiscardSupportedForDestinationStorageDomain()); }	@java.lang.Override protected boolean validate() { return ((((((((((((((((super.validate()) && (diskContainsPreExtendSnapshots())) && (isImageExist())) && (checkOperationIsCorrect())) && (checkOperationAllowedOnDiskContentType())) && (isImageNotLocked())) && (isSourceAndDestTheSame())) && (validateSourceStorageDomain())) && (validateDestStorage())) && (checkTemplateInDestStorageDomain())) && (validateSpaceRequirements())) && (validateVmSnapshotStatus())) && (checkCanBeMoveInVm())) && (checkIfNeedToBeOverride())) && (setAndValidateDiskProfiles())) && (setAndValidateQuota())) && (validatePassDiscardSupportedForDestinationStorageDomain()); }
public org.ovirt.engine.core.bll.ValidationResult diskCanBeCopied(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage, org.ovirt.engine.core.common.businessentities.storage.QcowCompat compat) { if (QcowCompat.QCOW2_V2.equals(compat)) { if (!(Guid.Empty.equals(diskImage.getParentId()))) { org.ovirt.engine.core.common.businessentities.storage.Image parent = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getImageDao().get(diskImage.getParentId()); if ((parent.getSize()) < (diskImage.getSize())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_MOVE_DISK); } } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult diskWasExtendedAfterSnapshotWasTaken(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { if (((StorageFormatType.V4.compareTo(storageDomain.getStorageFormat())) > 0) && (storageDomain.getStorageType().isBlockDomain())) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = getDiskImageDao().getAllSnapshotsForImageGroup(disk.getId()); boolean badSnapshotsPresent = diskImages.stream().anyMatch(( d) -> (d.getSize()) < (disk.getSize())); if (badSnapshotsPresent) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_MOVE_DISK, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("Snapshots", diskImages.stream().filter(( d) -> !(d.getActive())).map(DiskImage::getDescription).collect(java.util.stream.Collectors.joining(", ")))); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { try { org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command = new org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder().hostnames(host.getHostName()).logFileDirectory(VdsDeployBase.HOST_DEPLOY_LOG_DIRECTORY).logFilePrefix("ovirt-host-mgmt-ansible").logFileName(host.getHostName()).logFileSuffix(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()).playbook(AnsibleConstants.HOST_UPGRADE_PLAYBOOK); if ((ansibleExecutor.runCommand(command, org.ovirt.engine.core.bll.host.HostUpgradeManager.UPDATE_PACKAGES_TIMEOUT).getAnsibleReturnCode()) != (org.ovirt.engine.core.common.utils.ansible.AnsibleReturnCode.OK)) { java.lang.String error = java.lang.String.format("Failed to update host '%1$s'.", host.getHostName()); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error(error); throw new java.lang.RuntimeException(error); } } catch (java.lang.InterruptedException | java.io.IOException ex) { throw new java.lang.RuntimeException(ex); } }	@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { try { org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command = new org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder().hostnames(host.getHostName()).logFileDirectory(VdsDeployBase.HOST_DEPLOY_LOG_DIRECTORY).logFilePrefix("ovirt-host-mgmt-ansible").logFileName(host.getHostName()).logFileSuffix(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()).playbook(AnsibleConstants.HOST_UPGRADE_PLAYBOOK); if ((ansibleExecutor.runCommand(command).getAnsibleReturnCode()) != (org.ovirt.engine.core.common.utils.ansible.AnsibleReturnCode.OK)) { java.lang.String error = java.lang.String.format("Failed to update host '%1$s'.", host.getHostName()); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error(error); throw new java.lang.RuntimeException(error); } } catch (java.lang.InterruptedException | java.io.IOException ex) { throw new java.lang.RuntimeException(ex); } }
@java.lang.Override protected void endSuccessfully() { if (org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().getActive()) { updateRelevantVms(); } else if (org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().hasRawBlock()) { refreshVolume(); } org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getImageInfo(); if ((diskImage != null) && ((org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().getSize()) != (diskImage.getSize()))) { org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getReturnValue().setActionReturnValue(diskImage.getSize()); imageDao.updateImageSize(diskImage.getImageId(), diskImage.getSize()); completeImageData(diskImage); updateAuditLog(AuditLogType.USER_EXTEND_DISK_SIZE_SUCCESS, diskImage.getSizeInGigabytes()); } org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.setSucceeded(true); }	@java.lang.Override protected void endSuccessfully() { if (org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().getActive()) { updateRelevantVms(); } else if (org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().hasRawBlock()) { refreshVolume(); } org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getImageInfo(); if ((diskImage != null) && ((org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().getSize()) != (diskImage.getSize()))) { org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getReturnValue().setActionReturnValue(diskImage.getSize()); imageDao.updateImageSize(diskImage.getImageId(), diskImage.getSize()); setDestinationImageId(diskImage.getImageId()); completeImageData(diskImage); updateAuditLog(AuditLogType.USER_EXTEND_DISK_SIZE_SUCCESS, diskImage.getSizeInGigabytes()); } org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.setSucceeded(true); }
protected void addDbUsers() { }	protected void addPermissionsToDB() { }
private void addPermissions(org.ovirt.engine.core.bll.storage.ovfstore.DrMappingHelper.PermissionsParamObject permissionsParams, java.util.List<java.lang.String> missingRoles, java.util.List<org.ovirt.engine.core.common.businessentities.Permission> permissionsToAdd) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> userToRoles = permissionsParams.userToRoles; userToRoles.getOrDefault(permissionsParams.dbUser.getLoginName(), java.util.Collections.emptySet()).forEach(( roleName) -> { org.ovirt.engine.core.common.businessentities.Permission permission = null; org.ovirt.engine.core.common.businessentities.Role originalRole = roleDao.getByName(roleName); if (permissionsParams.roleMap != null) { org.ovirt.engine.core.common.businessentities.Role destRoleName = ((org.ovirt.engine.core.common.businessentities.Role) (permissionsParams.roleMap.get(roleName))); if (destRoleName != null) { org.ovirt.engine.core.common.businessentities.Role destRole = roleDao.getByName(destRoleName.getName()); permission = new org.ovirt.engine.core.common.businessentities.Permission(permissionsParams.dbUser.getId(), destRole.getId(), permissionsParams.entityId, permissionsParams.objectType); } else if (originalRole != null) { permission = new org.ovirt.engine.core.common.businessentities.Permission(permissionsParams.dbUser.getId(), originalRole.getId(), permissionsParams.entityId, permissionsParams.objectType); } } else if (originalRole != null) { permission = new org.ovirt.engine.core.common.businessentities.Permission(permissionsParams.dbUser.getId(), originalRole.getId(), permissionsParams.entityId, permissionsParams.objectType); } if (permission != null) { permissionsToAdd.add(permission); } else { missingRoles.add(roleName); } }); }	public void mapVnicProfiles(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics, java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> externalVnicProfileMappings) { vnics.forEach(( vnic) -> importedNetworkInfoUpdater.updateNetworkInfo(vnic, externalVnicProfileMappings)); }
protected void addDbUsers() { drMappingHelper.mapDbUsers(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getDomainMap(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getDbUsers(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getUserToRoles(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVmId(), VdcObjectType.VM, org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getRoleMap()); }	protected void addPermissionsToDB() { drMappingHelper.addPermissions(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getDbUsers(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getUserToRoles(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVmId(), VdcObjectType.VM, org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getRoleMap()); }
@java.lang.Override protected void executeVmCommand() { try { addVmToDb(); addVmToAffinityGroups(); addVmToAffinityLabels(); addDbUsers(); processImages(); vmHandler.addVmInitToDB(getVm().getStaticData().getVmInit()); discardHelper.logIfDisksWithIllegalPassDiscardExist(getVmId()); } catch (java.lang.RuntimeException e) { macPool.freeMacs(macsAdded); throw e; } org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.setSucceeded(true); org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getReturnValue().setActionReturnValue(getVm()); }	@java.lang.Override protected void executeVmCommand() { try { addVmToDb(); addVmToAffinityGroups(); addVmToAffinityLabels(); addPermissionsToDB(); processImages(); vmHandler.addVmInitToDB(getVm().getStaticData().getVmInit()); discardHelper.logIfDisksWithIllegalPassDiscardExist(getVmId()); } catch (java.lang.RuntimeException e) { macPool.freeMacs(macsAdded); throw e; } org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.setSucceeded(true); org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getReturnValue().setActionReturnValue(getVm()); }
@java.lang.Override protected void executeCommand() { if (shouldSkipCommandExecutionCached()) { org.ovirt.engine.core.bll.VmCommand.setSucceeded(true); return; } registerHeOvfUpdate(); executeVmCommand(); }	@java.lang.Override protected void executeCommand() { if (shouldSkipCommandExecutionCached()) { org.ovirt.engine.core.bll.VmCommand.setSucceeded(true); return; } executeVmCommand(); if (((shouldUpdateHostedEngineOvf()) && (org.ovirt.engine.core.bll.VmCommand.getVm().isHostedEngine())) && (org.ovirt.engine.core.bll.VmCommand.getSucceeded())) { updateHeOvf(); } }
private void registerHeOvfUpdate() { if (!(shouldUpdateHostedEngineOvf())) { return; } if (!(org.ovirt.engine.core.bll.VmCommand.getVm().isHostedEngine())) { return; } org.ovirt.engine.core.bll.VmCommand.registerRollbackHandler(new org.ovirt.engine.core.utils.transaction.TransactionCompletionListener() { @java.lang.Override public void onSuccess() { ovfDataUpdater.triggerNow(); } @java.lang.Override public void onRollback() { } }); }	private void updateHeOvf() { if ((org.ovirt.engine.core.utils.transaction.TransactionSupport.current()) == null) { ovfDataUpdater.triggerNow(); return; } org.ovirt.engine.core.bll.VmCommand.registerRollbackHandler(new org.ovirt.engine.core.utils.transaction.TransactionCompletionListener() { @java.lang.Override public void onSuccess() { ovfDataUpdater.triggerNow(); } @java.lang.Override public void onRollback() { } }); }
private java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> getNameServers(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration dnsResolverConfiguration) { if (dnsResolverConfiguration == null) { return java.util.Collections.EMPTY_LIST; } java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServers = dnsResolverConfiguration.getNameServers(); if ((nameServers == null) || (nameServers.isEmpty())) { return java.util.Collections.EMPTY_LIST; } return nameServers; }	private java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> getNameServers(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration dnsResolverConfiguration) { if (dnsResolverConfiguration == null) { return java.util.Collections.emptyList(); } java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServers = dnsResolverConfiguration.getNameServers(); if ((nameServers == null) || (nameServers.isEmpty())) { return java.util.Collections.emptyList(); } return nameServers; }
private void dataCenter_SelectedItemChanged() { if ((getCurrentStorageItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) { org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase sanStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) (getCurrentStorageItem())); sanStorageModel.updateRemovableLuns(getDataCenter().getSelectedItem().getCompatibilityVersion()); sanStorageModel.getRequireTableRefresh().setEntity(null); sanStorageModel.getRequireTableRefresh().setEntity(true); } updateItemsAvailability(); behavior.updateDataCenterAlert(); }	private void dataCenter_SelectedItemChanged() { if ((getCurrentStorageItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) { org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase sanStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) (getCurrentStorageItem())); sanStorageModel.setReduceDeviceSupported(((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigValues.ReduceDeviceFromStorageDomain, getDataCenter().getSelectedItem().getCompatibilityVersion().toString())))); } updateItemsAvailability(); behavior.updateDataCenterAlert(); }
public void updateRemovableLuns(org.ovirt.engine.core.compat.Version dcCompatibilityVersion) { setReduceDeviceSupported(((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigValues.ReduceDeviceFromStorageDomain, dcCompatibilityVersion.toString())))); int numOfIncludedLuns = getIncludedLuns().size(); java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> lunModels = getLuns(false, true); lunModels.forEach(( lunModel) -> lunModel.setIsLunRemovable(((isReduceDeviceSupported()) && ((numOfIncludedLuns != 1) && (!(getMetadataDevices().contains(lunModel.getLunId()))))))); }	private void updateRemovableLuns() { int numOfIncludedLuns = getIncludedLuns().size(); java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> lunModels = getLuns(false, true); lunModels.forEach(( lunModel) -> lunModel.setIsLunRemovable(((numOfIncludedLuns != 1) && (!(getMetadataDevices().contains(lunModel.getLunId())))))); }
@org.junit.Test public void testReadBooleanList() { java.util.List<java.lang.Boolean> expected = java.util.Arrays.asList(true, false); org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader("<values><value>true</value><value>false</value></values>"); java.util.List<java.lang.Boolean> booleans = reader.readBooleans(); assertEquals(expected, booleans); }	@org.junit.Test public void testReadBooleanList() { java.util.List<java.lang.Boolean> expected = java.util.Arrays.asList(true, false); org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader("<action><values><value>true</value><value>false</value></values></action>"); reader.next(); java.util.List<java.lang.Boolean> booleans = reader.readBooleans(); assertEquals(expected, booleans); }
@org.junit.Test public void testReadBooleanListEndElement() { org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader("<values><value>true</value><value>false</value></values>"); reader.readBooleans(); assertEquals(javax.xml.stream.XMLStreamConstants.END_ELEMENT, reader.getEventType()); assertEquals("values", reader.getLocalName()); }	@org.junit.Test public void testReadBooleanListEndElement() { org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader("<action><values><value>true</value><value>false</value></values></action>"); reader.next(); reader.readBooleans(); assertEquals(javax.xml.stream.XMLStreamConstants.END_ELEMENT, reader.getEventType()); assertEquals("action", reader.getLocalName()); }
@org.junit.Test public void testReadStringListEndElement() { org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader("<values><value>1</value><value>2</value></values>"); reader.readStrings(); assertEquals(javax.xml.stream.XMLStreamConstants.END_ELEMENT, reader.getEventType()); assertEquals("values", reader.getLocalName()); }	@org.junit.Test public void testReadStringListEndElement() { org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader("<action><values><value>1</value><value>2</value></values></action>"); reader.next(); reader.readStrings(); assertEquals(javax.xml.stream.XMLStreamConstants.END_ELEMENT, reader.getEventType()); assertEquals("action", reader.getLocalName()); }
public java.util.List<java.lang.String> readStrings() { java.util.List<java.lang.String> values = new java.util.ArrayList<>(); java.lang.String startingLocalName = reader.getLocalName(); java.lang.String currentLocalName = startingLocalName; next(); while (forward()) { currentLocalName = reader.getLocalName(); if (currentLocalName.equals(startingLocalName)) { skip(); } else { values.add(readString()); } } return values; }	public java.util.List<java.lang.String> readStrings() { java.util.List<java.lang.String> values = new java.util.ArrayList<>(); java.lang.String startingLocalName = reader.getLocalName(); java.lang.String currentLocalName = startingLocalName; next(); boolean forward = true; while (forward) { forward = forward(); currentLocalName = reader.getLocalName(); if ((!forward) && (currentLocalName.equals(startingLocalName))) { skip(); } else { values.add(readString()); } } return values; }
@org.junit.Test public void testReadStringList() { java.util.List<java.lang.String> expected = java.util.Arrays.asList("1", "2"); org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader("<values><value>1</value><value>2</value></values>"); java.util.List<java.lang.String> strings = reader.readStrings(); assertEquals(expected, strings); }	@org.junit.Test public void testReadStringList() { java.util.List<java.lang.String> expected = java.util.Arrays.asList("1", "2"); org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader("<action><values><value>1</value><value>2</value></values></action>"); reader.next(); java.util.List<java.lang.String> strings = reader.readStrings(); assertEquals(expected, strings); }
private static java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> mapVnicProfilesMapping(org.ovirt.engine.api.model.RegistrationVnicProfileMappings model) { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> result = new java.util.ArrayList(model.getRegistrationVnicProfileMappings().size()); model.getRegistrationVnicProfileMappings().forEach(( regMapping) -> { result.add(new org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping(regMapping.getFrom().getNetwork().getName(), regMapping.getFrom().getName(), ((regMapping.getTo()) != null ? new org.ovirt.engine.core.compat.Guid(regMapping.getTo().getId()) : null))); }); return result; }	private static java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> mapVnicProfilesMapping(org.ovirt.engine.api.model.RegistrationVnicProfileMappings model) { return model.getRegistrationVnicProfileMappings().stream().map(( regMapping) -> new org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping(regMapping.getFrom().getNetwork().getName(), regMapping.getFrom().getName(), ((regMapping.getTo()) != null ? new org.ovirt.engine.core.compat.Guid(regMapping.getTo().getId()) : null))).collect(java.util.stream.Collectors.toList()); }
public static void validateRegistrationVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource bs, org.ovirt.engine.api.model.Action action) { if (!(action.isSetRegistrationConfiguration())) { return; } if (!(action.getRegistrationConfiguration().isSetVnicProfileMappings())) { return; } org.ovirt.engine.api.model.RegistrationVnicProfileMappings mappings = action.getRegistrationConfiguration().getVnicProfileMappings(); bs.validateParameters(mappings, "registrationVnicProfileMappings"); for (org.ovirt.engine.api.model.RegistrationVnicProfileMapping mapping : mappings.getRegistrationVnicProfileMappings()) { bs.validateParameters(mapping, "from"); if ((mapping.getFrom().getName()) == null) { bs.validateParameters(mapping, "from.name"); } bs.validateParameters(mapping, "from.network"); if ((mapping.getFrom().getNetwork().getName()) == null) { bs.validateParameters(mapping, "from.network.name"); } if ("".equalsIgnoreCase(mapping.getFrom().getName())) { mapping.getFrom().setName(null); } if ("".equalsIgnoreCase(mapping.getFrom().getNetwork().getName())) { mapping.getFrom().getNetwork().setName(null); } if ((mapping.isSetTo()) && (mapping.getTo().isSetId())) { asGuid(mapping.getTo().getId()); } } }	public static void validateRegistrationVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource br, org.ovirt.engine.api.model.Action action) { if (!(action.isSetRegistrationConfiguration())) { return; } if (!(action.getRegistrationConfiguration().isSetVnicProfileMappings())) { return; } org.ovirt.engine.api.model.RegistrationVnicProfileMappings mappings = action.getRegistrationConfiguration().getVnicProfileMappings(); br.validateParameters(mappings, "registrationVnicProfileMappings"); for (org.ovirt.engine.api.model.RegistrationVnicProfileMapping mapping : mappings.getRegistrationVnicProfileMappings()) { br.validateParameters(mapping, "from"); if ((mapping.getFrom().getName()) == null) { br.validateParameters(mapping, "from.name"); } br.validateParameters(mapping, "from.network"); if ((mapping.getFrom().getNetwork().getName()) == null) { br.validateParameters(mapping, "from.network.name"); } if ("".equalsIgnoreCase(mapping.getFrom().getName())) { mapping.getFrom().setName(null); } if ("".equalsIgnoreCase(mapping.getFrom().getNetwork().getName())) { mapping.getFrom().getNetwork().setName(null); } if ((mapping.isSetTo()) && (mapping.getTo().isSetId())) { asGuid(mapping.getTo().getId()); } } }
@java.lang.Deprecated public static void validateVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource br, org.ovirt.engine.api.model.Action action) { if (action.isSetVnicProfileMappings()) { br.validateParameters(action.getVnicProfileMappings(), "vnicProfileMappings"); for (org.ovirt.engine.api.model.VnicProfileMapping mapping : action.getVnicProfileMappings().getVnicProfileMappings()) { if ((mapping.getSourceNetworkName()) == null) { br.validateParameters(mapping, "sourceNetworkName"); } if ((mapping.getSourceNetworkProfileName()) == null) { br.validateParameters(mapping, "sourceNetworkProfileName"); } if ("".equalsIgnoreCase(mapping.getSourceNetworkName())) { mapping.setSourceNetworkName(null); } if ("".equalsIgnoreCase(mapping.getSourceNetworkProfileName())) { mapping.setSourceNetworkProfileName(null); } if ((mapping.isSetTargetVnicProfile()) && (mapping.getTargetVnicProfile().isSetId())) { asGuid(mapping.getTargetVnicProfile().getId()); } } } }	@java.lang.Deprecated public static void validateVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource bs, org.ovirt.engine.api.model.Action action) { if (action.isSetVnicProfileMappings()) { bs.validateParameters(action.getVnicProfileMappings(), "vnicProfileMappings"); for (org.ovirt.engine.api.model.VnicProfileMapping mapping : action.getVnicProfileMappings().getVnicProfileMappings()) { bs.validateParameters(mapping, "sourceNetworkName"); bs.validateParameters(mapping, "sourceNetworkProfileName"); bs.validateParameters(mapping, "targetVnicProfile"); bs.validateParameters(mapping, "targetVnicProfile.id"); bs.asGuid(mapping.getTargetVnicProfile().getId()); } } }
private java.lang.String formatKernelFeatures(java.util.Map<java.lang.String, java.lang.Object> kernelFeatures) { if (kernelFeatures == null) { return null; } final int vdsmNotAvailable = -1; final java.lang.String concatenatedPairs = kernelFeatures.entrySet().stream().filter(( pair) -> ((pair.getValue()) instanceof java.lang.String) || (((pair.getValue()) instanceof java.lang.Integer) && (!(java.util.Objects.equals(vdsmNotAvailable, pair.getValue()))))).map(( pair) -> java.lang.String.format("%s: %s", pair.getKey(), pair.getValue())).collect(java.util.stream.Collectors.joining(", ")); if (concatenatedPairs.isEmpty()) { return org.ovirt.engine.ui.uicommonweb.models.hosts.HostGeneralModel.constants.notAvailableLabel(); } return concatenatedPairs; }	private java.lang.String formatKernelFeatures(java.util.Map<java.lang.String, java.lang.Object> kernelFeatures) { if (kernelFeatures == null) { return null; } final int vdsmNotAvailable = -1; final java.lang.String concatenatedPairs = kernelFeatures.entrySet().stream().filter(( pair) -> ((pair.getValue()) instanceof java.lang.String) || (((pair.getValue()) instanceof java.lang.Integer) && (!(java.util.Objects.equals(vdsmNotAvailable, pair.getValue()))))).map(( pair) -> ((pair.getKey()) + ": ") + (pair.getValue())).collect(java.util.stream.Collectors.joining(", ")); if (concatenatedPairs.isEmpty()) { return org.ovirt.engine.ui.uicommonweb.models.hosts.HostGeneralModel.constants.notAvailableLabel(); } return concatenatedPairs; }
protected java.lang.String getBookContentPath(java.lang.String bookPath, java.lang.String contentPath, java.util.Locale locale) { return (((("/" + (locale.toString())) + "/") + bookPath) + "/html/") + contentPath; }	protected java.lang.String getBookContentPath(java.lang.String bookPath, java.lang.String contentPath, java.util.Locale locale) { return (((("/" + (locale.toLanguageTag())) + "/") + bookPath) + "/html/") + contentPath; }
public java.lang.String getDocsSectionTemplate(java.util.Locale locale) { java.lang.String result = ""; try { java.lang.String docsSectionTemplatePath = getDocsSectionTemplatePath(filePath, locale); java.io.File file = new java.io.File(docsSectionTemplatePath); if (((file.exists()) && (file.isFile())) && (file.canRead())) { result = readTemplateFile(docsSectionTemplatePath); } if ((result.isEmpty()) && (!(DEFAULT_US_LOCALE.equals(locale)))) { docsSectionTemplatePath = getDocsSectionTemplatePath(filePath, DEFAULT_US_LOCALE); file = new java.io.File(docsSectionTemplatePath); if (((file.exists()) && (file.isFile())) && (file.canRead())) { result = readTemplateFile(docsSectionTemplatePath); } } if (result.isEmpty()) { docsSectionTemplatePath = getDocsSectionFallbackTemplatePath(filePath); file = new java.io.File(docsSectionTemplatePath); if (((file.exists()) && (file.isFile())) && (file.canRead())) { result = readTemplateFile(docsSectionTemplatePath); } } } catch (java.io.IOException ioe) { org.ovirt.engine.core.branding.BrandingTheme.log.error("Exception loading docs template", ioe); } if (result.isEmpty()) { org.ovirt.engine.core.branding.BrandingTheme.log.warn("code or installation problem -- could not load documentation section for any locale or fallback"); } return result; }	public java.lang.String getDocsSectionTemplate(java.util.Locale locale) { java.lang.String result = ""; try { java.lang.String docsSectionTemplatePath = getDocsSectionTemplatePath(filePath, locale); java.io.File file = new java.io.File(docsSectionTemplatePath); if (((file.exists()) && (file.isFile())) && (file.canRead())) { result = readTemplateFile(docsSectionTemplatePath); } if ((result.isEmpty()) && (!(DEFAULT_US_LOCALE.equals(locale)))) { docsSectionTemplatePath = getDocsSectionTemplatePath(filePath, DEFAULT_US_LOCALE); file = new java.io.File(docsSectionTemplatePath); if (((file.exists()) && (file.isFile())) && (file.canRead())) { result = readTemplateFile(docsSectionTemplatePath); } } if (result.isEmpty()) { docsSectionTemplatePath = getDocsSectionFallbackTemplatePath(filePath); file = new java.io.File(docsSectionTemplatePath); if (((file.exists()) && (file.isFile())) && (file.canRead())) { result = readTemplateFile(docsSectionTemplatePath); } } } catch (java.io.IOException ioe) { org.ovirt.engine.core.branding.BrandingTheme.log.error("Exception loading docs template", ioe); } return result; }
protected java.lang.String getBookPdfPath(java.lang.String bookPath, java.util.Locale locale) { return ((((("/" + (locale.toString())) + "/") + bookPath) + "/") + bookPath) + ".pdf"; }	protected java.lang.String getBookPdfPath(java.lang.String bookPath, java.util.Locale locale) { return ((((("/" + (locale.toLanguageTag())) + "/") + bookPath) + "/") + bookPath) + ".pdf"; }
protected java.io.File getBookContentFile(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, java.lang.String bookPath, java.lang.String contentPath, java.util.Locale locale) { java.io.File file = null; file = org.ovirt.engine.core.utils.servlet.ServletUtils.makeFileFromSanePath(getBookContentPath(bookPath, contentPath, locale), base); if (!(org.ovirt.engine.core.utils.servlet.ServletUtils.canReadFile(file))) { if (!(DEFAULT_US_LOCALE.equals(locale))) { file = org.ovirt.engine.core.utils.servlet.ServletUtils.makeFileFromSanePath(getBookContentPath(bookPath, contentPath, DEFAULT_US_LOCALE), base); if (!(org.ovirt.engine.core.utils.servlet.ServletUtils.canReadFile(file))) { file = null; } } } return file; }	protected java.io.File getFile(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, java.lang.String defaultPath, java.lang.String backupPath, java.util.Locale locale) { java.io.File file = null; file = org.ovirt.engine.core.utils.servlet.ServletUtils.makeFileFromSanePath(defaultPath, base); if (!(org.ovirt.engine.core.utils.servlet.ServletUtils.canReadFile(file))) { if (!(DEFAULT_US_LOCALE.equals(locale))) { file = org.ovirt.engine.core.utils.servlet.ServletUtils.makeFileFromSanePath(backupPath, base); if (!(org.ovirt.engine.core.utils.servlet.ServletUtils.canReadFile(file))) { file = null; } } } return file; }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { java.lang.String url = request.getPathInfo(); java.util.Locale locale = getLocaleFromRequest(request); java.io.File file = null; java.util.regex.Matcher m = org.ovirt.engine.docs.utils.servlet.DocsServlet.bookHtmlIndexPattern.matcher(url); if (m.matches()) { java.lang.String bookPath = m.group(1); file = getBookIndexFile(request, response, bookPath, locale); } else { m = org.ovirt.engine.docs.utils.servlet.DocsServlet.bookHtmlContentPattern.matcher(url); if (m.matches()) { java.lang.String bookPath = m.group(1); java.lang.String contentPath = m.group(2); file = getBookContentFile(request, response, bookPath, contentPath, locale); } else { m = org.ovirt.engine.docs.utils.servlet.DocsServlet.bookPdfPattern.matcher(url); if (m.matches()) { java.lang.String bookPath = m.group(1); file = getBookPdfFile(request, response, bookPath, locale); } } } if (file == null) { response.sendError(HttpServletResponse.SC_NOT_FOUND); } else { org.ovirt.engine.core.utils.servlet.ServletUtils.sendFile(request, response, file, type); } }	@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { java.lang.String url = request.getPathInfo(); java.util.Locale locale = org.ovirt.engine.core.utils.servlet.LocaleFilter.getLocaleFromRequest(request); java.io.File file = null; java.util.regex.Matcher m = org.ovirt.engine.docs.utils.servlet.DocsServlet.bookHtmlIndexPattern.matcher(url); if (m.matches()) { java.lang.String bookPath = m.group(1); java.lang.String defaultPath = getBookIndexPath(bookPath, locale); java.lang.String backupPath = getBookIndexPath(bookPath, DEFAULT_US_LOCALE); file = getFile(request, response, defaultPath, backupPath, locale); } else { m = org.ovirt.engine.docs.utils.servlet.DocsServlet.bookHtmlContentPattern.matcher(url); if (m.matches()) { java.lang.String bookPath = m.group(1); java.lang.String contentPath = m.group(2); java.lang.String defaultPath = getBookContentPath(bookPath, contentPath, locale); java.lang.String backupPath = getBookContentPath(bookPath, contentPath, DEFAULT_US_LOCALE); file = getFile(request, response, defaultPath, backupPath, locale); } else { m = org.ovirt.engine.docs.utils.servlet.DocsServlet.bookPdfPattern.matcher(url); if (m.matches()) { java.lang.String bookPath = m.group(1); java.lang.String defaultPath = getBookPdfPath(bookPath, locale); java.lang.String backupPath = getBookPdfPath(bookPath, DEFAULT_US_LOCALE); file = getFile(request, response, defaultPath, backupPath, locale); } } } if (file == null) { response.sendError(HttpServletResponse.SC_NOT_FOUND); } else { org.ovirt.engine.core.utils.servlet.ServletUtils.sendFile(request, response, file, type); } }
protected java.lang.String getBookIndexPath(java.lang.String bookPath, java.util.Locale locale) { return ((("/" + (locale.toString())) + "/") + bookPath) + "/html/index.html"; }	protected java.lang.String getBookIndexPath(java.lang.String bookPath, java.util.Locale locale) { return ((("/" + (locale.toLanguageTag())) + "/") + bookPath) + "/html/index.html"; }
@java.lang.Override protected void executeVdsBrokerCommand() { if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.POLL)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().poll(); } else if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.POLL2)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().timeBoundPoll2(2, java.util.concurrent.TimeUnit.SECONDS); } else if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.CONFIRM_CONNECTIVITY)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().timeBoundPollConfirmConnectivity(2, java.util.concurrent.TimeUnit.SECONDS); } }	@java.lang.Override protected void executeVdsBrokerCommand() { if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.POLL)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().poll(); } else if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.POLL2)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().timeBoundPoll2(org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.TIMEOUT, java.util.concurrent.TimeUnit.SECONDS); } else if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.CONFIRM_CONNECTIVITY)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().timeBoundPollConfirmConnectivity(org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.TIMEOUT, java.util.concurrent.TimeUnit.SECONDS); } }
private org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> invokeSetupNetworksCommand(int timeout) { final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters parameters = createSetupNetworksParameters(timeout); org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> setupNetworksTask = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsBroker().runFutureVdsCommand(FutureVDSCommandType.HostSetupNetworks, parameters); if (parameters.isRollbackOnFailure()) { org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters.PollTechnique pt = (org.ovirt.engine.core.common.FeatureSupported.isConfirmConnectivitySupportedByVdsm(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterCompatibilityVersion())) ? CONFIRM_CONNECTIVITY : POLL; org.ovirt.engine.core.bll.network.host.HostPoller poller = new org.ovirt.engine.core.bll.network.host.HostPoller(new org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsId(), pt)); while (!(setupNetworksTask.isDone())) { poller.poll(); } } return setupNetworksTask; }	private org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> invokeSetupNetworksCommand(int timeout) { final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters parameters = createSetupNetworksParameters(timeout); org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> setupNetworksTask = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsBroker().runFutureVdsCommand(FutureVDSCommandType.HostSetupNetworks, parameters); if (parameters.isRollbackOnFailure()) { org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters.PollTechnique pollTechnique = (org.ovirt.engine.core.common.FeatureSupported.isConfirmConnectivitySupportedByVdsm(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterCompatibilityVersion())) ? CONFIRM_CONNECTIVITY : POLL; org.ovirt.engine.core.bll.network.host.HostPoller poller = new org.ovirt.engine.core.bll.network.host.HostPoller(new org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsId(), pollTechnique)); while (!(setupNetworksTask.isDone())) { poller.poll(); } } return setupNetworksTask; }
public boolean check(final org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters.PollTechnique pt = (org.ovirt.engine.core.common.FeatureSupported.isPing2SupportedByVdsm(host.getClusterCompatibilityVersion())) ? POLL2 : POLL; org.ovirt.engine.core.bll.network.host.HostPoller poller = new org.ovirt.engine.core.bll.network.host.HostPoller(new org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters(host.getId(), pt)); final long startTime = java.lang.System.nanoTime(); while (((java.lang.System.nanoTime()) - startTime) < (org.ovirt.engine.core.bll.host.HostConnectivityChecker.VDSM_RESPONSIVENESS_PERIOD_IN_NANOS)) { if (poller.poll()) { org.ovirt.engine.core.bll.host.HostConnectivityChecker.log.info("Engine managed to communicate with VDSM agent on host '{}' with address '{}' ('{}')", host.getName(), host.getHostName(), host.getId()); return true; } } return false; }	public boolean check(final org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters.PollTechnique pollTechnique = (org.ovirt.engine.core.common.FeatureSupported.isPing2SupportedByVdsm(host.getClusterCompatibilityVersion())) ? POLL2 : POLL; org.ovirt.engine.core.bll.network.host.HostPoller poller = new org.ovirt.engine.core.bll.network.host.HostPoller(new org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters(host.getId(), pollTechnique)); final long startTime = java.lang.System.nanoTime(); while (((java.lang.System.nanoTime()) - startTime) < (org.ovirt.engine.core.bll.host.HostConnectivityChecker.VDSM_RESPONSIVENESS_PERIOD_IN_NANOS)) { if (poller.poll()) { org.ovirt.engine.core.bll.host.HostConnectivityChecker.log.info("Engine managed to communicate with VDSM agent on host '{}' with address '{}' ('{}')", host.getName(), host.getHostName(), host.getId()); return true; } } return false; }
private static org.ovirt.engine.core.common.businessentities.storage.DiskVmElement buildDiskVmElementWithDiskInterfaceFromExternalProvider(java.util.Map<java.lang.String, java.lang.Object> map, org.ovirt.engine.core.common.businessentities.storage.DiskImage image, org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(image.getId(), vmId); java.lang.String diskDevName = ((java.lang.String) (map.get(VdsProperties.DISK_TARGET_DEV_NAME))); diskDevName = ((diskDevName == null) || ((diskDevName.length()) < 3)) ? "" : diskDevName.substring(0, 2); switch (diskDevName) { case "sd" : dve.setDiskInterface(DiskInterface.VirtIO_SCSI); break; case "hd" : dve.setDiskInterface(DiskInterface.IDE); break; case "vd" : default : dve.setDiskInterface(DiskInterface.VirtIO); break; } return dve; }	private static org.ovirt.engine.core.common.businessentities.storage.DiskVmElement buildDiskVmElementWithDiskInterfaceFromExternalProvider(java.util.Map<java.lang.String, java.lang.Object> map, org.ovirt.engine.core.common.businessentities.storage.DiskImage image, org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(image.getId(), vmId); java.lang.String diskDevName = ((java.lang.String) (map.get(VdsProperties.DISK_TARGET_DEV_NAME))); diskDevName = ((diskDevName == null) || ((diskDevName.length()) < 3)) ? "" : diskDevName.substring(0, 2); switch (diskDevName) { case "sd" : dve.setDiskInterface(DiskInterface.VirtIO_SCSI); break; case "hd" : dve.setDiskInterface(DiskInterface.IDE); break; case "vd" : default : dve.setDiskInterface(DiskInterface.VirtIO); } return dve; }
public java.lang.String generateEngineXml(org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String cpuId, java.lang.String emulatedMachine) { vm.setCpuName(cpuId); vm.setEmulatedMachine(emulatedMachine); return new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(vm, vmInfoBuildUtils).buildCreateVm(); }	private java.lang.String generateEngineXml(org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String cpuId, java.lang.String emulatedMachine) { vm.setCpuName(cpuId); vm.setEmulatedMachine(emulatedMachine); return new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(vm, vmInfoBuildUtils).buildCreateVm(); }
private long getTransferSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage image, org.ovirt.engine.core.compat.Guid domainId) { if ((TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromVdsm = imagesHandler.getVolumeInfoFromVdsm(image.getStoragePoolId(), domainId, image.getId(), image.getImageId()); return imageInfoFromVdsm.getApparentSizeInBytes(); } else { if ((TransferImageCommand.getParameters().getTransferSize()) != 0) { return TransferImageCommand.getParameters().getTransferSize(); } else { boolean isOnBlock = TransferImageCommand.getDiskImage().getStorageTypes().get(0).isBlockDomain(); return isOnBlock ? TransferImageCommand.getDiskImage().getActualSizeInBytes() : TransferImageCommand.getDiskImage().getSize(); } } }	private long getTransferSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage image, org.ovirt.engine.core.compat.Guid domainId) { if ((TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromVdsm = imagesHandler.getVolumeInfoFromVdsm(image.getStoragePoolId(), domainId, image.getId(), image.getImageId()); return imageInfoFromVdsm.getApparentSizeInBytes(); } if ((TransferImageCommand.getParameters().getTransferSize()) != 0) { return TransferImageCommand.getParameters().getTransferSize(); } boolean isBlockDomain = TransferImageCommand.getDiskImage().getStorageTypes().get(0).isBlockDomain(); return isBlockDomain ? TransferImageCommand.getDiskImage().getActualSizeInBytes() : TransferImageCommand.getDiskImage().getSize(); }
@java.lang.Override protected void addVmToDb() { super.addVmToDb(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getOrigin()) == (org.ovirt.engine.core.common.businessentities.OriginType.KVM)) { importUtils.updateGraphicsDevices(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStoragePool().getCompatibilityVersion()); if (org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().isImportAsNewEntity()) { for (org.ovirt.engine.core.common.businessentities.VmDevice device : org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values()) { device.getId().setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()); } } vmDeviceDao.saveAll(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values()); if (!(vmDeviceUtils.hasCdDevice(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()))) { vmDeviceUtils.addCdDevice(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getVirtioIsoName()); } } }	@java.lang.Override protected void addVmToDb() { super.addVmToDb(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getOrigin()) == (org.ovirt.engine.core.common.businessentities.OriginType.KVM)) { importUtils.updateGraphicsDevices(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStoragePool().getCompatibilityVersion()); java.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> devices = org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values(); if (org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().isImportAsNewEntity()) { devices.forEach(( dev) -> dev.getId().setVmId(getVmId())); } vmDeviceDao.saveAll(devices); } }
public org.ovirt.engine.core.bll.ValidationResult providerTypeIsNetwork() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_TYPE_NOT_NETWORK).when((!(isNetworking(provider.getType())))); }	public org.ovirt.engine.core.bll.ValidationResult providerTypeIsNetwork() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_NOT_NETWORK).unless((((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK)) || ((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.EXTERNAL_NETWORK)))); }
@org.junit.Test public void openstackIsValidNetworkProviderType() { when(provider.getType()).thenReturn(ProviderType.OPENSTACK_NETWORK); assertThat(validator.providerTypeIsNetwork(), isValid()); }	@org.junit.Test public void validNetworkProviderType() { when(provider.getType()).thenReturn(ProviderType.OPENSTACK_NETWORK); assertThat(validator.providerTypeIsNetwork(), isValid()); }
@org.junit.Test public void invalidNetworkProviderType() { when(provider.getType()).thenReturn(org.ovirt.engine.core.bll.provider.NetworkProviderValidatorTest.NON_NETWORK_PROVIDER_TYPE); assertThat(validator.providerTypeIsNetwork(), failsWith(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_TYPE_NOT_NETWORK)); }	@org.junit.Test public void invalidNetworkProviderType() { when(provider.getType()).thenReturn(org.ovirt.engine.core.bll.provider.NetworkProviderValidatorTest.NON_NETWORK_PROVIDER_TYPE); assertThat(validator.providerTypeIsNetwork(), failsWith(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_NOT_NETWORK)); }
java.lang.String ACTION_TYPE_FAILED_PROVIDER_TYPE_NOT_NETWORK();	java.lang.String ACTION_TYPE_FAILED_PROVIDER_NOT_NETWORK();
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { if (org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.isInternalExecution()) { return null; } return networkLocking.getNetworkProviderLock(getProviderId()); }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { if ((getNetwork().isExternal()) && (!(org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.isInternalExecution()))) { return networkLocking.getNetworkProviderLock(getProviderId()); } else { return null; } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.InternalImportExternalNetworkParameters parameters = new org.ovirt.engine.core.common.action.InternalImportExternalNetworkParameters(getProvider().getName(), getNetwork(), org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().getDataCenterId(), org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().isPublicUse(), org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().isAttachToAllClusters()); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.InternalImportExternalNetwork, parameters); if (!(returnValue.getSucceeded())) { propagateFailure(runInternalAction(ActionType.InternalImportExternalNetwork, parameters)); return; } org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.InternalImportExternalNetworkParameters parameters = new org.ovirt.engine.core.common.action.InternalImportExternalNetworkParameters(getProvider().getName(), getNetwork(), org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().getDataCenterId(), org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().isPublicUse(), org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().isAttachToAllClusters()); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.InternalImportExternalNetwork, parameters, org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getContext().clone().withoutLock()); if (!(returnValue.getSucceeded())) { propagateFailure(runInternalAction(ActionType.InternalImportExternalNetwork, parameters)); return; } org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getReturnValue().setActionReturnValue(returnValue.getActionReturnValue()); org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.setSucceeded(true); }
public void setFragmentParameters(java.util.Map<java.lang.String, java.lang.String> params, boolean newItem) { currentEntityParams.clear(); currentEntityParams.putAll(params); java.util.Set<org.ovirt.engine.ui.common.presenter.FragmentParams> paramNames = new java.util.HashSet<>(); paramNames.addAll(org.ovirt.engine.ui.common.presenter.FragmentParams.getParams(currentEntityParams.keySet())); com.gwtplatform.mvp.shared.proxy.PlaceRequest request = new com.gwtplatform.mvp.shared.proxy.PlaceRequest.Builder().nameToken(getCurrentPlaceRequest().getNameToken()).with(currentEntityParams).build(); if (newItem) { com.google.gwt.user.client.History.newItem(buildHistoryToken(request), false); } else { com.google.gwt.user.client.History.replaceItem(buildHistoryToken(request), false); } }	public void setFragmentParameters(java.util.Map<java.lang.String, java.lang.String> params, boolean newItem) { com.gwtplatform.mvp.shared.proxy.PlaceRequest request = new com.gwtplatform.mvp.shared.proxy.PlaceRequest.Builder().nameToken(getCurrentPlaceRequest().getNameToken()).with(params).build(); if (newItem) { com.google.gwt.user.client.History.newItem(buildHistoryToken(request), false); } else { com.google.gwt.user.client.History.replaceItem(buildHistoryToken(request), false); } }
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.String> event) { if (!(event.getValue().contains(WebAdminApplicationPlaces.SUB_TAB_PREFIX))) { currentEntityParams.clear(); } super.onValueChange(event); if (clientAgentType.isFirefox()) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { com.google.gwt.dom.client.Node favicon = com.google.gwt.user.client.DOM.getElementById("id-link-favicon"); if (favicon != null) { com.google.gwt.dom.client.Node parent = favicon.getParentNode(); favicon.removeFromParent(); parent.appendChild(favicon); } }); } }	@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.String> event) { super.onValueChange(event); if (clientAgentType.isFirefox()) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { com.google.gwt.dom.client.Node favicon = com.google.gwt.user.client.DOM.getElementById("id-link-favicon"); if (favicon != null) { com.google.gwt.dom.client.Node parent = favicon.getParentNode(); favicon.removeFromParent(); parent.appendChild(favicon); } }); } }
protected java.util.Map<java.lang.String, java.lang.String> getFragmentParamsFromEntity(T item) { java.util.Map<java.lang.String, java.lang.String> result = new java.util.HashMap<>(); result.put(FragmentParams.NAME.getName(), ((org.ovirt.engine.core.common.businessentities.Nameable) (item)).getName()); return result; }	protected java.util.Map<java.lang.String, java.lang.String> getFragmentParamsFromEntity(T item) { java.util.Map<java.lang.String, java.lang.String> result = new java.util.HashMap<>(); if (item != null) { result.put(FragmentParams.NAME.getName(), ((org.ovirt.engine.core.common.businessentities.Nameable) (item)).getName()); } return result; }
public void applySearchString(java.lang.String searchString) { if ((modelProvider.getModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?, ? extends org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>> listModel = modelProvider.getModel(); if ((org.ovirt.engine.core.compat.StringHelper.isNotNullOrEmpty(searchString)) && (searchString.startsWith(listModel.getDefaultSearchString()))) { placeManager.setFragmentParameters(getFragmentParams(searchString), false); listModel.setSearchString(searchString); listModel.getSearchCommand().execute(); } } }	public void applySearchString(java.lang.String searchString) { if ((modelProvider.getModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?, ? extends org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>> listModel = modelProvider.getModel(); if ((org.ovirt.engine.core.compat.StringHelper.isNotNullOrEmpty(searchString)) && (searchString.startsWith(listModel.getDefaultSearchString()))) { placeManager.setFragmentParameters(getFragmentParameters(searchString), false); listModel.setSearchString(searchString); listModel.getSearchCommand().execute(); } } }
private java.util.Map<java.lang.String, java.lang.String> getFragmentParams(java.lang.String searchString) { java.util.Map<java.lang.String, java.lang.String> result = new java.util.HashMap<>(); if (searchString.startsWith(modelProvider.getModel().getDefaultSearchString())) { searchString = searchString.substring(modelProvider.getModel().getDefaultSearchString().length()); } result.put(FragmentParams.SEARCH.getName(), searchString); return result; }	private java.util.Map<java.lang.String, java.lang.String> getFragmentParameters(java.lang.String searchString) { java.util.Map<java.lang.String, java.lang.String> result = new java.util.HashMap<>(); if (searchString.startsWith(modelProvider.getModel().getDefaultSearchString())) { searchString = searchString.substring(modelProvider.getModel().getDefaultSearchString().length()); } result.put(FragmentParams.SEARCH.getName(), searchString); return result; }
private static boolean canExecute(org.ovirt.engine.core.common.businessentities.BusinessEntityWithStatus<?, ?> entity, java.lang.Class type, org.ovirt.engine.core.common.action.ActionType action) { java.util.Set<org.ovirt.engine.core.common.action.ActionType> actions = org.ovirt.engine.core.common.ActionUtils._matrix.get(type).get(entity.getStatus()); if ((actions != null) && (actions.contains(action))) { return false; } return true; }	private static boolean canExecute(org.ovirt.engine.core.common.businessentities.BusinessEntityWithStatus<?, ?> entity, java.lang.Class type, org.ovirt.engine.core.common.action.ActionType action) { java.util.Set<org.ovirt.engine.core.common.action.ActionType> disallowedActions = org.ovirt.engine.core.common.ActionUtils._matrix.get(type).get(entity.getStatus()); return (disallowedActions == null) || (!(disallowedActions.contains(action))); }
default void onRollback() { }	void onRollback();
default void onSuccess() { }	void onSuccess();
@org.ovirt.api.metamodel.annotations.In java.lang.Boolean restoreLease();	@org.ovirt.api.metamodel.annotations.In types.StorageDomainLease lease();
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(snapshot().id()); optional(restoreMemory()); optional(restoreLease()); optional(disks()[COLLECTION].id()); optional(disks()[COLLECTION].imageId()); optional(disks()[COLLECTION].snapshot().id()); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(snapshot().id()); optional(restoreMemory()); optional(lease()); optional(disks()[COLLECTION].id()); optional(disks()[COLLECTION].imageId()); optional(disks()[COLLECTION].snapshot().id()); }
public void persistCommand(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity, org.ovirt.engine.core.bll.context.CommandContext cmdContext) { initChildHierarchy(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getId())) { return; } persistCommand(cmdEntity); if (cmdContext != null) { contextsCache.get().put(cmdEntity.getId(), cmdContext); } }	public void persistCommand(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity, org.ovirt.engine.core.bll.context.CommandContext cmdContext) { initChildHierarchy(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getId())) { return; } persistCommand(cmdEntity); if (cmdContext != null) { contextsCache.put(cmdEntity.getId(), cmdContext); } }
public boolean hasCommandEntitiesWithRootCommandId(org.ovirt.engine.core.compat.Guid rootCommandId) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.get().keySet()) { cmdEntity = commandsCache.get().get(cmdId); if ((((cmdEntity != null) && (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getRootCommandId())))) && (!(cmdEntity.getRootCommandId().equals(cmdId)))) && (cmdEntity.getRootCommandId().equals(rootCommandId))) { return true; } } return false; }	public boolean hasCommandEntitiesWithRootCommandId(org.ovirt.engine.core.compat.Guid rootCommandId) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.keySet()) { cmdEntity = commandsCache.get(cmdId); if ((((cmdEntity != null) && (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getRootCommandId())))) && (!(cmdEntity.getRootCommandId().equals(cmdId)))) && (cmdEntity.getRootCommandId().equals(rootCommandId))) { return true; } } return false; }
public void removeCommand(org.ovirt.engine.core.compat.Guid commandId) { commandsCache.get().remove(commandId); contextsCache.get().remove(commandId); updateCmdHierarchy(commandId); }	public void removeCommand(org.ovirt.engine.core.compat.Guid commandId) { commandsCache.remove(commandId); contextsCache.remove(commandId); updateCmdHierarchy(commandId); }
public java.util.List<org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity> getCommandAssociatedEntities(org.ovirt.engine.core.compat.Guid cmdId) { return commandsCache.get().getCommandAssociatedEntities(cmdId); }	public java.util.List<org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity> getCommandAssociatedEntities(org.ovirt.engine.core.compat.Guid cmdId) { return commandsCache.getCommandAssociatedEntities(cmdId); }
public java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> getCommands(boolean onlyWithCallbackEnabled) { java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> cmdEntities = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.get().keySet()) { cmdEntity = commandsCache.get().get(cmdId); if ((!onlyWithCallbackEnabled) || (commandsCache.get().get(cmdId).isCallbackEnabled())) { cmdEntities.add(cmdEntity); } } return cmdEntities; }	public java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> getCommands(boolean onlyWithCallbackEnabled) { java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> cmdEntities = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.keySet()) { cmdEntity = commandsCache.get(cmdId); if ((!onlyWithCallbackEnabled) || (commandsCache.get(cmdId).isCallbackEnabled())) { cmdEntities.add(cmdEntity); } } return cmdEntities; }
public java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> getChildCmdsByParentCmdId(org.ovirt.engine.core.compat.Guid cmdId) { return commandsCache.get().getChildCmdsByParentCmdId(cmdId); }	public java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> getChildCmdsByParentCmdId(org.ovirt.engine.core.compat.Guid cmdId) { return commandsCache.getChildCmdsByParentCmdId(cmdId); }
public void updateCommandExecuted(org.ovirt.engine.core.compat.Guid commandId) { commandsCache.get().updateCommandExecuted(commandId); }	public void updateCommandExecuted(org.ovirt.engine.core.compat.Guid commandId) { commandsCache.updateCommandExecuted(commandId); }
public java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsByEntityId(org.ovirt.engine.core.compat.Guid entityId) { return commandsCache.get().getCommandIdsByEntityId(entityId); }	public java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsByEntityId(org.ovirt.engine.core.compat.Guid entityId) { return commandsCache.getCommandIdsByEntityId(entityId); }
public void updateCallbackNotified(final org.ovirt.engine.core.compat.Guid commandId) { commandsCache.get().updateCallbackNotified(commandId); }	public void updateCallbackNotified(final org.ovirt.engine.core.compat.Guid commandId) { commandsCache.updateCallbackNotified(commandId); }
public void persistCommand(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getId())) { return; } org.ovirt.engine.core.common.businessentities.CommandEntity existingCmdEntity = commandsCache.get().get(cmdEntity.getId()); if (existingCmdEntity != null) { cmdEntity.setExecuted(existingCmdEntity.isExecuted()); cmdEntity.setCallbackNotified(existingCmdEntity.isCallbackNotified()); } commandsCache.get().put(cmdEntity); if ((cmdEntity.isCallbackEnabled()) || (((!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getParentCommandId()))) && ((commandsCache.get().get(cmdEntity.getParentCommandId())) != null)) && (commandsCache.get().get(cmdEntity.getParentCommandId()).isCallbackEnabled()))) { buildCmdHierarchy(cmdEntity); if (!(cmdEntity.isCallbackNotified())) { addToCallbackMap(cmdEntity); } } }	public void persistCommand(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getId())) { return; } org.ovirt.engine.core.common.businessentities.CommandEntity existingCmdEntity = commandsCache.get(cmdEntity.getId()); if (existingCmdEntity != null) { cmdEntity.setExecuted(existingCmdEntity.isExecuted()); cmdEntity.setCallbackNotified(existingCmdEntity.isCallbackNotified()); } commandsCache.put(cmdEntity); if ((cmdEntity.isCallbackEnabled()) || (((!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getParentCommandId()))) && ((commandsCache.get(cmdEntity.getParentCommandId())) != null)) && (commandsCache.get(cmdEntity.getParentCommandId()).isCallbackEnabled()))) { buildCmdHierarchy(cmdEntity); if (!(cmdEntity.isCallbackNotified())) { addToCallbackMap(cmdEntity); } } }
public org.ovirt.engine.core.bll.CommandBase<?> retrieveCommand(org.ovirt.engine.core.compat.Guid commandId) { return retrieveCommand(commandsCache.get().get(commandId), retrieveCommandContext(commandId)); }	public org.ovirt.engine.core.bll.CommandBase<?> retrieveCommand(org.ovirt.engine.core.compat.Guid commandId) { return retrieveCommand(commandsCache.get(commandId), retrieveCommandContext(commandId)); }
public void persistCommandAssociatedEntities(java.util.Collection<org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity> cmdAssociatedEntities) { commandsCache.get().persistCommandAssociatedEntities(cmdAssociatedEntities); }	public void persistCommandAssociatedEntities(java.util.Collection<org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity> cmdAssociatedEntities) { commandsCache.persistCommandAssociatedEntities(cmdAssociatedEntities); }
public org.ovirt.engine.core.bll.context.CommandContext retrieveCommandContext(org.ovirt.engine.core.compat.Guid cmdId) { return contextsCache.get().get(cmdId); }	public org.ovirt.engine.core.bll.context.CommandContext retrieveCommandContext(org.ovirt.engine.core.compat.Guid cmdId) { return contextsCache.get(cmdId); }
public void updateCommandData(org.ovirt.engine.core.compat.Guid commandId, java.util.Map<java.lang.String, java.io.Serializable> data) { commandsCache.get().updateCommandData(commandId, data); }	public void updateCommandData(org.ovirt.engine.core.compat.Guid commandId, java.util.Map<java.lang.String, java.io.Serializable> data) { commandsCache.updateCommandData(commandId, data); }
public org.ovirt.engine.core.common.businessentities.CommandEntity getCommandEntity(org.ovirt.engine.core.compat.Guid commandId) { return org.ovirt.engine.core.compat.Guid.isNullOrEmpty(commandId) ? null : commandsCache.get().get(commandId); }	public org.ovirt.engine.core.common.businessentities.CommandEntity getCommandEntity(org.ovirt.engine.core.compat.Guid commandId) { return org.ovirt.engine.core.compat.Guid.isNullOrEmpty(commandId) ? null : commandsCache.get(commandId); }
public java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsBySessionSeqId(long engineSessionSeqId) { java.util.List<org.ovirt.engine.core.compat.Guid> cmdIds = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.get().keySet()) { cmdEntity = commandsCache.get().get(cmdId); if (((cmdEntity != null) && ((cmdEntity.getEngineSessionSeqId()) != (org.ovirt.engine.core.bll.aaa.SsoSessionUtils.EMPTY_SESSION_SEQ_ID))) && ((cmdEntity.getEngineSessionSeqId()) == engineSessionSeqId)) { cmdIds.add(cmdId); } } return cmdIds; }	public java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsBySessionSeqId(long engineSessionSeqId) { java.util.List<org.ovirt.engine.core.compat.Guid> cmdIds = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.keySet()) { cmdEntity = commandsCache.get(cmdId); if (((cmdEntity != null) && ((cmdEntity.getEngineSessionSeqId()) != (org.ovirt.engine.core.bll.aaa.SsoSessionUtils.EMPTY_SESSION_SEQ_ID))) && ((cmdEntity.getEngineSessionSeqId()) == engineSessionSeqId)) { cmdIds.add(cmdId); } } return cmdIds; }
public void handleUnmanagedCommands() { java.util.List<org.ovirt.engine.core.common.businessentities.AsyncTask> asyncTasks = asyncTaskDao.getAll(); java.util.Set<org.ovirt.engine.core.compat.Guid> asyncTaskManagerManagedCommands = asyncTasks.stream().filter(( x) -> (x.getVdsmTaskId()) != null).map(( x) -> x.getRootCommandId()).collect(java.util.stream.Collectors.toSet()); asyncTaskManagerManagedCommands.addAll(asyncTasks.stream().filter(( x) -> (x.getVdsmTaskId()) != null).map(( x) -> x.getCommandId()).collect(java.util.stream.Collectors.toSet())); getCommands(false).stream().filter(( x) -> !(x.isCallbackEnabled())).filter(( x) -> (x.getCommandStatus()) == CommandStatus.ACTIVE).filter(( x) -> !(asyncTaskManagerManagedCommands.contains(x.getId()))).forEach(( x) -> commandsCache.get().updateCommandStatus(x.getId(), CommandStatus.ENDED_WITH_FAILURE)); getCommands(false).stream().filter(( x) -> x.isCallbackEnabled()).filter(( x) -> !(x.isCallbackNotified())).filter(( x) -> x.getCommandStatus().isDuringExecution()).filter(( x) -> !(asyncTaskManagerManagedCommands.contains(x.getId()))).map(( x) -> retrieveCommand(x.getId())).filter(java.util.Objects::nonNull).forEach(CommandBase::reacquireLocks); }	public void handleUnmanagedCommands() { java.util.List<org.ovirt.engine.core.common.businessentities.AsyncTask> asyncTasks = asyncTaskDao.getAll(); java.util.Set<org.ovirt.engine.core.compat.Guid> asyncTaskManagerManagedCommands = asyncTasks.stream().filter(( x) -> (x.getVdsmTaskId()) != null).map(( x) -> x.getRootCommandId()).collect(java.util.stream.Collectors.toSet()); asyncTaskManagerManagedCommands.addAll(asyncTasks.stream().filter(( x) -> (x.getVdsmTaskId()) != null).map(( x) -> x.getCommandId()).collect(java.util.stream.Collectors.toSet())); getCommands(false).stream().filter(( x) -> !(x.isCallbackEnabled())).filter(( x) -> (x.getCommandStatus()) == CommandStatus.ACTIVE).filter(( x) -> !(asyncTaskManagerManagedCommands.contains(x.getId()))).forEach(( x) -> commandsCache.updateCommandStatus(x.getId(), CommandStatus.ENDED_WITH_FAILURE)); getCommands(false).stream().filter(( x) -> x.isCallbackEnabled()).filter(( x) -> !(x.isCallbackNotified())).filter(( x) -> x.getCommandStatus().isDuringExecution()).filter(( x) -> !(asyncTaskManagerManagedCommands.contains(x.getId()))).map(( x) -> retrieveCommand(x.getId())).filter(java.util.Objects::nonNull).forEach(CommandBase::reacquireLocks); }
public void removeAllCommandsBeforeDate(final org.ovirt.engine.core.compat.DateTime cutoff) { commandsCache.get().removeAllCommandsBeforeDate(cutoff); synchronized(LOCK) { childHierarchyInitialized = false; } }	public void removeAllCommandsBeforeDate(final org.ovirt.engine.core.compat.DateTime cutoff) { commandsCache.removeAllCommandsBeforeDate(cutoff); synchronized(LOCK) { childHierarchyInitialized = false; } }
public org.ovirt.engine.core.compat.CommandStatus getCommandStatus(final org.ovirt.engine.core.compat.Guid commandId) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = commandsCache.get().get(commandId); if (cmdEntity != null) { return cmdEntity.getCommandStatus(); } return org.ovirt.engine.core.compat.CommandStatus.UNKNOWN; }	public org.ovirt.engine.core.compat.CommandStatus getCommandStatus(final org.ovirt.engine.core.compat.Guid commandId) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = commandsCache.get(commandId); if (cmdEntity != null) { return cmdEntity.getCommandStatus(); } return org.ovirt.engine.core.compat.CommandStatus.UNKNOWN; }
public void updateCommandStatus(final org.ovirt.engine.core.compat.Guid commandId, final org.ovirt.engine.core.compat.CommandStatus status) { commandsCache.get().updateCommandStatus(commandId, status); }	public void updateCommandStatus(final org.ovirt.engine.core.compat.Guid commandId, final org.ovirt.engine.core.compat.CommandStatus status) { commandsCache.updateCommandStatus(commandId, status); }
private java.lang.String renderGibibyteSize(long size) { long sizeInGB = ((unit) == (org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit.GiB)) ? size : org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.GiB).longValue(); return org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.messages.gibibytes((sizeInGB >= 1 ? java.lang.String.valueOf(sizeInGB) : "< 1")); }	private java.lang.String renderGibibyteSize(long size) { long sizeInGiB = ((unit) == (org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit.GiB)) ? size : org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.GiB).longValue(); return org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.messages.gibibytes((sizeInGiB >= 1 ? java.lang.String.valueOf(sizeInGiB) : "< 1")); }
protected boolean isLunsAlreadyInUse(java.util.Set<java.lang.String> lunIds) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAll(); java.lang.StringBuilder lunsUsedBySDs = new java.lang.StringBuilder(); java.lang.StringBuilder lunsUsedByDisks = new java.lang.StringBuilder(); lunsFromDb.stream().filter(( lun) -> lunIds.contains(lun.getLUNId())).forEach(( lun) -> { if ((lun.getStorageDomainId()) != null) { addFormattedLunId(lunsUsedBySDs, lun, org.ovirt.engine.core.common.businessentities.storage.LUNs::getStorageDomainName); } if ((lun.getDiskId()) != null) { addFormattedLunId(lunsUsedByDisks, lun, org.ovirt.engine.core.common.businessentities.storage.LUNs::getDiskAlias); } }); if ((lunsUsedBySDs.length()) != 0) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_LUNS_ALREADY_PART_OF_STORAGE_DOMAINS); org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.addValidationMessageVariable("lunIds", lunsUsedBySDs.toString()); } if ((lunsUsedByDisks.length()) != 0) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_LUNS_ALREADY_USED_BY_DISKS); org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.addValidationMessageVariable("lunIds", lunsUsedByDisks.toString()); } return ((lunsUsedBySDs.length()) != 0) || ((lunsUsedByDisks.length()) != 0); }	protected boolean isLunsAlreadyInUse(java.util.Set<java.lang.String> lunIds) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAll(); java.lang.StringBuilder lunsUsedBySDs = new java.lang.StringBuilder(); java.lang.StringBuilder lunsUsedByDisks = new java.lang.StringBuilder(); lunsFromDb.stream().filter(( lun) -> lunIds.contains(lun.getLUNId())).forEach(( lun) -> { if ((lun.getStorageDomainId()) != null) { addFormattedLunId(lunsUsedBySDs, lun.getLUNId(), lun.getStorageDomainName()); } if ((lun.getDiskId()) != null) { addFormattedLunId(lunsUsedByDisks, lun.getLUNId(), lun.getDiskAlias()); } }); if ((lunsUsedBySDs.length()) != 0) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_LUNS_ALREADY_PART_OF_STORAGE_DOMAINS); org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.addValidationMessageVariable("lunIds", lunsUsedBySDs.toString()); } if ((lunsUsedByDisks.length()) != 0) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_LUNS_ALREADY_USED_BY_DISKS); org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.addValidationMessageVariable("lunIds", lunsUsedByDisks.toString()); } return ((lunsUsedBySDs.length()) != 0) || ((lunsUsedByDisks.length()) != 0); }
protected void addFormattedLunId(java.lang.StringBuilder sb, org.ovirt.engine.core.common.businessentities.storage.LUNs lun, java.util.function.Function<org.ovirt.engine.core.common.businessentities.storage.LUNs, java.lang.String> nameGetter) { if ((sb.length()) != 0) { sb.append(", "); } sb.append(java.lang.String.format("%1$s (%2$s)", lun.getLUNId(), nameGetter.apply(lun))); }	protected void addFormattedLunId(java.lang.StringBuilder sb, java.lang.String lunId, java.lang.String entityName) { if ((sb.length()) != 0) { sb.append(", "); } sb.append(java.lang.String.format("%1$s (%2$s)", lunId, entityName)); }
@org.junit.Test public void validateVmShareableDisk() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.storage.lsm.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED); }	@org.junit.Test public void validateVmShareableDisk() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED); }
@org.junit.Test public void validateInvalidDestinationDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(dstStorageId); dstStorageDomain.setStorageDomainType(StorageDomainType.ISO); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }	@org.junit.Test public void validateInvalidDestinationDomain() { initStorageDomain(srcStorageId); org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(dstStorageId); dstStorageDomain.setStorageDomainType(StorageDomainType.ISO); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }
@org.junit.Test public void validateVmHavingDeviceSnapshotsPluggedToOtherVmsThatAreNotDown() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN)).when(diskValidator).isDiskPluggedToAnyNonDownVm(anyBoolean()); org.ovirt.engine.core.bll.storage.lsm.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN); }	@org.junit.Test public void validateVmHavingDeviceSnapshotsPluggedToOtherVmsThatAreNotDown() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN)).when(diskValidator).isDiskPluggedToAnyNonDownVm(anyBoolean()); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN); }
@java.lang.Override protected boolean validate() { boolean validate = (super.validate()) && (validate(new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getStorageDomain()).isNotBackupDomain())); if (!validate) { auditLogDirector.log(this, AuditLogType.USER_MOVED_DISK_FINISHED_FAILURE); return false; } if (!(getVm().isRunningAndQualifyForDisksMigration())) { return failValidation(EngineMessage.CANNOT_LIVE_MIGRATE_VM_SHOULD_BE_IN_PAUSED_OR_UP_STATUS); } setStoragePoolId(getVm().getStoragePoolId()); if (!(validateDestDomainsSpaceRequirements())) { return false; } org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getReturnValue().setValid(((isDiskNotShareable(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageId())))); if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getReturnValue().isValid())) { return false; } if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.setAndValidateDiskProfiles())) { return false; } return (validateCreateAllSnapshotsFromVmCommand()) && validate; }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (!(getVm().isRunningAndQualifyForDisksMigration())) { return failValidation(EngineMessage.CANNOT_LIVE_MIGRATE_VM_SHOULD_BE_IN_PAUSED_OR_UP_STATUS); } setStoragePoolId(getVm().getStoragePoolId()); if ((!(validate(new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(getDstStorageDomain()).isNotBackupDomain()))) || (!(validateDestDomainsSpaceRequirements()))) { return false; } org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getReturnValue().setValid(((isDiskNotShareable(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageId())))); if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getReturnValue().isValid())) { return false; } if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.setAndValidateDiskProfiles())) { return false; } return validateCreateAllSnapshotsFromVmCommand(); }
@org.junit.Test public void validateCantLiveMigrateToBackupDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(srcStorageId); dstStorageDomain.setBackup(true); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_VM_DISKS_ON_BACKUP_STORAGE); }	@org.junit.Test public void validateCantLiveMigrateToBackupDomain() { initStorageDomain(srcStorageId); org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(dstStorageId); dstStorageDomain.setBackup(true); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_VM_DISKS_ON_BACKUP_STORAGE); }
@org.junit.Test public void validateInvalidDestinationDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(dstStorageId); dstStorageDomain.setStatus(StorageDomainStatus.Active); dstStorageDomain.setStorageDomainType(StorageDomainType.ISO); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.storage.lsm.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }	@org.junit.Test public void validateInvalidDestinationDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(dstStorageId); dstStorageDomain.setStatus(StorageDomainStatus.Active); dstStorageDomain.setStorageDomainType(StorageDomainType.ISO); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }
@org.junit.Test public void validateVmShareableDisk() { initStorageDomain(srcStorageId); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED); }	@org.junit.Test public void validateVmShareableDisk() { initStorageDomain(srcStorageId); initStorageDomain(dstStorageId); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED); }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getBroker().getVdsStats(new GetStatsVDSCommandCallback()); }	@java.lang.Override protected void executeVdsBrokerCommand() { try { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getBroker().getVdsStats(new GetStatsVDSCommandCallback()); } catch (java.lang.Throwable t) { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getParameters().getCallback().onFailure(t); throw t; } }
@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { continueRefreshVdsStats(((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result")))); refreshVdsRunTimeInfo(true); } catch (java.lang.Throwable t) { onFailure(t); } }	@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { processRefreshVdsStatsResponse(((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result")))); refreshVdsRunTimeInfo(true); } catch (java.lang.Throwable t) { onFailure(t); } }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetHardwareInfoAsyncVDSCommand.getBroker().getHardwareInfo(new GetHardwareInfoVDSCommandCallback()); }	@java.lang.Override protected void executeVdsBrokerCommand() { try { org.ovirt.engine.core.vdsbroker.vdsbroker.GetHardwareInfoAsyncVDSCommand.getBroker().getHardwareInfo(new GetHardwareInfoVDSCommandCallback()); } catch (java.lang.Throwable t) { org.ovirt.engine.core.vdsbroker.vdsbroker.GetHardwareInfoAsyncVDSCommand.getParameters().getCallback().onFailure(t); throw t; } }
@java.lang.Override protected void executeVdsBrokerCommand() { try { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getBroker().getVdsStats(new GetStatsVDSCommandCallback()); } catch (java.lang.Throwable t) { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getParameters().getCallback().onFailure(t); } }	@java.lang.Override protected void executeVdsBrokerCommand() { try { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getBroker().getVdsStats(new GetStatsVDSCommandCallback()); } catch (java.lang.Throwable t) { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getParameters().getCallback().onFailure(t); throw t; } }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesAsyncVDSCommand.getBroker().getCapabilities(new GetCapabilitiesVDSCommandCallback()); }	@java.lang.Override protected void executeVdsBrokerCommand() { try { org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesAsyncVDSCommand.getBroker().getCapabilities(new GetCapabilitiesVDSCommandCallback()); } catch (java.lang.Throwable t) { org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesAsyncVDSCommand.getParameters().getCallback().onFailure(t); throw t; } }
@java.lang.SuppressWarnings("incomplete-switch") private void executeNextOperation() { switch (org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getPhase()) { case CONVERT : convert(); break; } }	@java.lang.SuppressWarnings("incomplete-switch") private void executeNextOperation() { switch (org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getPhase()) { case CONVERT : convert(); break; case POST_CONVERT : updateVm(); break; } }
protected void convert() { org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.freeLock(); runInternalAction(ActionType.ConvertVm, buildConvertVmParameters()); }	protected void convert() { runInternalAction(ActionType.ConvertVm, buildConvertVmParameters()); }
@java.lang.Override protected void convert() { boolean useVirtV2V = (org.ovirt.engine.core.bll.exportimport.ImportVmFromOvaCommand.getParameters().getVm().getOrigin()) != (org.ovirt.engine.core.common.businessentities.OriginType.OVIRT); if (useVirtV2V) { org.ovirt.engine.core.bll.exportimport.ImportVmFromOvaCommand.freeLock(); runInternalAction(ActionType.ConvertOva, buildConvertOvaParameters()); } else { runInternalAction(ActionType.ExtractOva, buildExtractOvaParameters()); } }	@java.lang.Override protected void convert() { boolean useVirtV2V = (org.ovirt.engine.core.bll.exportimport.ImportVmFromOvaCommand.getParameters().getVm().getOrigin()) != (org.ovirt.engine.core.common.businessentities.OriginType.OVIRT); if (useVirtV2V) { runInternalActionWithTasksContext(ActionType.ConvertOva, buildConvertOvaParameters()); } else { runInternalActionWithTasksContext(ActionType.ExtractOva, buildExtractOvaParameters()); } }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { switch (org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getPhase()) { case CREATE_DISKS : org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().setPhase(Phase.CONVERT); break; case CONVERT : return false; default : } org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.persistCommandIfNeeded(); executeNextOperation(); return true; }	@java.lang.Override public boolean performNextOperation(int completedChildCount) { switch (org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getPhase()) { case CREATE_DISKS : org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().setPhase(Phase.CONVERT); if ((org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getProxyHostId()) == null) { org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().setProxyHostId(selectProxyHost()); } break; case CONVERT : if (java.util.EnumSet.of(OriginType.KVM, OriginType.OVIRT).contains(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getOrigin())) { return false; } org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().setPhase(Phase.POST_CONVERT); break; case POST_CONVERT : return false; default : } org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.persistCommandIfNeeded(); executeNextOperation(); return true; }
protected org.ovirt.engine.core.common.action.AddDiskParameters buildAddDiskParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { image.setDiskAlias(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.renameDiskAlias(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getOrigin(), image.getDiskAlias())); org.ovirt.engine.core.common.action.AddDiskParameters diskParameters = new org.ovirt.engine.core.common.action.AddDiskParameters(image.getDiskVmElementForVm(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()), image); diskParameters.setStorageDomainId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStorageDomainId()); diskParameters.setParentCommand(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getActionType()); diskParameters.setParentParameters(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters()); diskParameters.setShouldRemainIllegalOnFailedExecution(true); diskParameters.setStorageDomainId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getDestDomainId()); diskParameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); return diskParameters; }	protected org.ovirt.engine.core.common.action.AddDiskParameters buildAddDiskParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { org.ovirt.engine.core.common.action.AddDiskParameters diskParameters = new org.ovirt.engine.core.common.action.AddDiskParameters(image.getDiskVmElementForVm(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()), image); diskParameters.setStorageDomainId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStorageDomainId()); diskParameters.setParentCommand(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getActionType()); diskParameters.setParentParameters(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters()); diskParameters.setShouldRemainIllegalOnFailedExecution(true); diskParameters.setStorageDomainId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getDestDomainId()); diskParameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); return diskParameters; }
protected org.ovirt.engine.core.bll.context.CommandContext createConversionStepContext(org.ovirt.engine.core.common.job.StepEnum step) { org.ovirt.engine.core.bll.context.CommandContext commandCtx = null; try { java.util.Map<java.lang.String, java.lang.String> values = java.util.Collections.singletonMap(VdcObjectType.VM.name().toLowerCase(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmName()); org.ovirt.engine.core.common.job.Step removeVmStep = executionHandler.addSubStep(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getExecutionContext(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getExecutionContext().getJob().getStep(StepEnum.EXECUTING), step, org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveStepMessage(step, values)); org.ovirt.engine.core.bll.job.ExecutionContext ctx = new org.ovirt.engine.core.bll.job.ExecutionContext(); ctx.setStep(removeVmStep); ctx.setMonitored(true); commandCtx = org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.cloneContext().withoutCompensationContext().withExecutionContext(ctx).withoutLock(); } catch (java.lang.RuntimeException e) { log.error("Failed to create command context of converting VM '{}': {}", org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmName(), e.getMessage()); log.debug("Exception", e); } return commandCtx; }	protected org.ovirt.engine.core.bll.context.CommandContext createConversionStepContext(org.ovirt.engine.core.common.job.StepEnum step) { org.ovirt.engine.core.bll.context.CommandContext commandCtx = null; try { java.util.Map<java.lang.String, java.lang.String> values = java.util.Collections.singletonMap(VdcObjectType.VM.name().toLowerCase(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmName()); org.ovirt.engine.core.common.job.Step conversionStep = executionHandler.addSubStep(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getExecutionContext(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getExecutionContext().getJob().getStep(StepEnum.EXECUTING), step, org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveStepMessage(step, values)); org.ovirt.engine.core.bll.job.ExecutionContext ctx = new org.ovirt.engine.core.bll.job.ExecutionContext(); ctx.setStep(conversionStep); ctx.setMonitored(true); commandCtx = org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.cloneContext().withoutCompensationContext().withExecutionContext(ctx).withoutLock(); } catch (java.lang.RuntimeException e) { log.error("Failed to create command context of converting VM '{}': {}", org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmName(), e.getMessage()); log.debug("Exception", e); } return commandCtx; }
@java.lang.Override public boolean isRequiredNetworkAffected(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2) { final org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel logicalNetworkModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel) (op1)); return ((logicalNetworkModel.getNetwork().getCluster()) != null) && (logicalNetworkModel.getNetwork().getCluster().isRequired()); }	@java.lang.Override public boolean isRequiredNetworkAffected(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2) { final org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel logicalNetworkModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel) (op1)); return logicalNetworkModel.getNetwork().getCluster().isRequired(); }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesByGuid = new java.util.ArrayList<>(); if ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks()) != null) { for (org.ovirt.engine.core.compat.Guid guid : org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = diskImageDao.getSnapshotById(guid); imagesByGuid.add(image); } imagesToPreview = imagesByGuid; } else { imagesToPreview = diskImageDao.getAllSnapshotsForVmSnapshot(getDstSnapshot().getId()); } java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(imagesToPreview, org.ovirt.engine.core.bll.snapshots.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.snapshots.ONLY_SNAPABLE); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }	private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) { if ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getImageIds()) != null) { imagesToPreview = org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getImageIds().stream().map(diskImageDao::getSnapshotById).collect(java.util.stream.Collectors.toList()); } else { imagesToPreview = diskImageDao.getAllSnapshotsForVmSnapshot(getDstSnapshot().getId()); } java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(imagesToPreview, org.ovirt.engine.core.bll.snapshots.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.snapshots.ONLY_SNAPABLE); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }
@java.lang.Override public javax.ws.rs.core.Response previewSnapshot(org.ovirt.engine.api.model.Action action) { validateParameters(action, "snapshot.id"); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(guid, asGuid(action.getSnapshot().getId())); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { java.util.Set<org.ovirt.engine.core.compat.Guid> disksGuid = new java.util.HashSet<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = getParent().mapDisks(action.getDisks()); if (disks != null) { disksGuid = disks.stream().map(DiskImage::getImageId).collect(java.util.stream.Collectors.toSet()); } tryBackParams.setDisks(disksGuid); } javax.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action); return response; }	@java.lang.Override public javax.ws.rs.core.Response previewSnapshot(org.ovirt.engine.api.model.Action action) { validateParameters(action, "snapshot.id"); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(guid, asGuid(action.getSnapshot().getId())); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = getParent().mapDisks(action.getDisks()); tryBackParams.setImageIds(getDisksGuidSet(disks)); } javax.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action); return response; }
private void runTryBackToAllSnapshotsOfVm(final org.ovirt.engine.ui.uicommonweb.models.Model model, org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot, boolean memory, java.util.Set<org.ovirt.engine.core.compat.Guid> disks) { if (model != null) { model.startProgress(); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.TryBackToAllSnapshotsOfVm, new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vm.getId(), snapshot.getId(), memory, disks), ( result) -> { if (model != null) { model.stopProgress(); } if (result.getReturnValue().getSucceeded()) { cancel(); } }); }	private void runTryBackToAllSnapshotsOfVm(final org.ovirt.engine.ui.uicommonweb.models.Model model, org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot, boolean memory, java.util.Set<org.ovirt.engine.core.compat.Guid> diskIds) { if (model != null) { model.startProgress(); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.TryBackToAllSnapshotsOfVm, new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vm.getId(), snapshot.getId(), memory, diskIds), ( result) -> { if (model != null) { model.stopProgress(); } if (result.getReturnValue().getSucceeded()) { cancel(); } }); }
private void onCustomPreview() { org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel previewSnapshotModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel) (getWindow())); org.ovirt.engine.core.common.businessentities.Snapshot snapshot = previewSnapshotModel.getSnapshotModel().getEntity(); boolean memory = java.lang.Boolean.TRUE.equals(previewSnapshotModel.getSnapshotModel().getMemory().getEntity()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = previewSnapshotModel.getSelectedDisks(); java.util.Set<org.ovirt.engine.core.compat.Guid> diskImages = disks.stream().map(DiskImage::getImageId).collect(java.util.stream.Collectors.toSet()); runTryBackToAllSnapshotsOfVm(previewSnapshotModel, vm, snapshot, memory, diskImages); }	private void onCustomPreview() { org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel previewSnapshotModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel) (getWindow())); org.ovirt.engine.core.common.businessentities.Snapshot snapshot = previewSnapshotModel.getSnapshotModel().getEntity(); boolean memory = java.lang.Boolean.TRUE.equals(previewSnapshotModel.getSnapshotModel().getMemory().getEntity()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = previewSnapshotModel.getSelectedDisks(); java.util.Set<org.ovirt.engine.core.compat.Guid> diskIds = disks.stream().map(DiskImage::getImageId).collect(java.util.stream.Collectors.toSet()); runTryBackToAllSnapshotsOfVm(previewSnapshotModel, vm, snapshot, memory, diskIds); }
private void onPreview() { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSelectedItem(); if (snapshot == null) { cancel(); return; } org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel) (getWindow())); boolean memory = false; java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks; java.util.Set<org.ovirt.engine.core.compat.Guid> diskImages = new java.util.HashSet<>(); if (snapshotModel.isShowPartialSnapshotWarning()) { switch (snapshotModel.getPartialPreviewSnapshotOptions().getSelectedItem()) { case preserveActiveDisks : disks = snapshotModel.getDisks(); disks.addAll(org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel.imagesSubtract(getVmDisks(), disks)); diskImages = disks.stream().map(DiskImage::getImageId).collect(java.util.stream.Collectors.toSet()); break; case excludeActiveDisks : break; case openCustomPreviewDialog : setWindow(null); getCustomPreviewCommand().execute(); return; } } if (snapshotModel.isShowMemorySnapshotWarning()) { memory = snapshotModel.getMemory().getEntity(); } runTryBackToAllSnapshotsOfVm(snapshotModel, vm, snapshot, memory, diskImages); }	private void onPreview() { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSelectedItem(); if (snapshot == null) { cancel(); return; } org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel) (getWindow())); boolean memory = false; java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks; java.util.Set<org.ovirt.engine.core.compat.Guid> diskImageIds = null; if (snapshotModel.isShowPartialSnapshotWarning()) { switch (snapshotModel.getPartialPreviewSnapshotOptions().getSelectedItem()) { case preserveActiveDisks : disks = snapshotModel.getDisks(); disks.addAll(org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel.imagesSubtract(getVmDisks(), disks)); diskImageIds = disks.stream().map(DiskImage::getImageId).collect(java.util.stream.Collectors.toSet()); break; case excludeActiveDisks : break; case openCustomPreviewDialog : setWindow(null); getCustomPreviewCommand().execute(); return; } } if (snapshotModel.isShowMemorySnapshotWarning()) { memory = snapshotModel.getMemory().getEntity(); } runTryBackToAllSnapshotsOfVm(snapshotModel, vm, snapshot, memory, diskImageIds); }
@java.lang.Override public javax.ws.rs.core.Response restore(org.ovirt.engine.api.model.Action action) { action.setAsync(false); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(parentId, guid); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { java.util.Set<org.ovirt.engine.core.compat.Guid> disksGuid = new java.util.HashSet<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = collection.mapDisks(action.getDisks()); if (disks != null) { disksGuid = disks.stream().map(DiskImage::getImageId).collect(java.util.stream.Collectors.toSet()); } tryBackParams.setDisks(disksGuid); } tryBackParams.setCorrelationId(org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESTORE_SNAPSHOT_CORRELATION_ID); javax.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action, PollingType.JOB); if ((response.getStatus()) == (Response.Status.OK.getStatusCode())) { org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters restoreParams = new org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters(parentId, org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT); restoreParams.setCorrelationId(org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESTORE_SNAPSHOT_CORRELATION_ID); javax.ws.rs.core.Response response2 = doAction(ActionType.RestoreAllSnapshots, restoreParams, action); if ((response2.getStatus()) != (Response.Status.OK.getStatusCode())) { return response2; } } return response; }	@java.lang.Override public javax.ws.rs.core.Response restore(org.ovirt.engine.api.model.Action action) { action.setAsync(false); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(parentId, guid); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = collection.mapDisks(action.getDisks()); tryBackParams.setImageIds(getDisksGuidSet(disks)); } tryBackParams.setCorrelationId(org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESTORE_SNAPSHOT_CORRELATION_ID); javax.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action, PollingType.JOB); if ((response.getStatus()) == (Response.Status.OK.getStatusCode())) { org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters restoreParams = new org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters(parentId, org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT); restoreParams.setCorrelationId(org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESTORE_SNAPSHOT_CORRELATION_ID); javax.ws.rs.core.Response response2 = doAction(ActionType.RestoreAllSnapshots, restoreParams, action); if ((response2.getStatus()) != (Response.Status.OK.getStatusCode())) { return response2; } } return response; }
private boolean updateLeaseInfo(org.ovirt.engine.core.compat.Guid snapshotLeaseDomainId) { if (snapshotLeaseDomainId == null) { vmStaticDao.updateVmLeaseInfo(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), null); return true; } org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = null; try { retVal = runVdsCommand(VDSCommandType.GetVmLeaseInfo, new org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getStoragePoolId(), snapshotLeaseDomainId, org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Failure in getting lease info for VM {}, message: {}", org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), e.getMessage()); } if ((retVal == null) || (!(retVal.getSucceeded()))) { log.error("Failed to get info on the lease of VM {}", org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId()); return false; } vmStaticDao.updateVmLeaseInfo(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), ((java.util.Map<java.lang.String, java.lang.String>) (retVal.getReturnValue()))); return true; }	private boolean updateLeaseInfo(org.ovirt.engine.core.compat.Guid snapshotLeaseDomainId) { if (snapshotLeaseDomainId == null) { vmDynamicDao.updateVmLeaseInfo(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), null); return true; } org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = null; try { retVal = runVdsCommand(VDSCommandType.GetVmLeaseInfo, new org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getStoragePoolId(), snapshotLeaseDomainId, org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Failure in getting lease info for VM {}, message: {}", org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), e.getMessage()); } if ((retVal == null) || (!(retVal.getSucceeded()))) { log.error("Failed to get info on the lease of VM {}", org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId()); return false; } vmDynamicDao.updateVmLeaseInfo(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), ((java.util.Map<java.lang.String, java.lang.String>) (retVal.getReturnValue()))); return true; }
private boolean isRemoveLeaseNeeded(org.ovirt.engine.core.compat.Guid srcLeaseDomainId, org.ovirt.engine.core.compat.Guid dstLeaseDomainId) { if ((org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction()) == (org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.UNDO)) { return (((srcLeaseDomainId != null) && (dstLeaseDomainId != null)) && (!(srcLeaseDomainId.equals(dstLeaseDomainId)))) || ((srcLeaseDomainId == null) && (dstLeaseDomainId != null)); } else if ((org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction()) == (org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT)) { return (((srcLeaseDomainId != null) && (dstLeaseDomainId != null)) && (!(srcLeaseDomainId.equals(dstLeaseDomainId)))) || ((srcLeaseDomainId != null) && (dstLeaseDomainId == null)); } return false; }	private boolean isRemoveLeaseNeeded(org.ovirt.engine.core.compat.Guid srcLeaseDomainId, org.ovirt.engine.core.compat.Guid dstLeaseDomainId) { switch (org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction()) { case UNDO : return (!(java.util.Objects.equals(srcLeaseDomainId, dstLeaseDomainId))) || ((srcLeaseDomainId == null) && (dstLeaseDomainId != null)); case COMMIT : return (!(java.util.Objects.equals(srcLeaseDomainId, dstLeaseDomainId))) || ((srcLeaseDomainId != null) && (dstLeaseDomainId == null)); default : return false; } }
private boolean isLeaseInfoUpdateNeeded(org.ovirt.engine.core.compat.Guid srcLeaseDomainId, org.ovirt.engine.core.compat.Guid dstLeaseDomainId) { return ((org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction()) == (org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.UNDO)) && (!((srcLeaseDomainId == null) && (dstLeaseDomainId == null))); }	private boolean isLeaseInfoUpdateNeeded(org.ovirt.engine.core.compat.Guid srcLeaseDomainId, org.ovirt.engine.core.compat.Guid dstLeaseDomainId) { return (((org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction()) == (org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.UNDO)) && (!((srcLeaseDomainId == null) && (dstLeaseDomainId == null)))) || (((org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction()) == (org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT)) && ((srcLeaseDomainId != null) && (dstLeaseDomainId == null))); }
private org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction determineLeaseAction(org.ovirt.engine.core.compat.Guid srcLeaseDomainId, org.ovirt.engine.core.compat.Guid dstLeaseDomainId) { if ((srcLeaseDomainId != null) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getStaticData().getLeaseInfo()) != null)) { if (dstLeaseDomainId != null) { return srcLeaseDomainId.equals(dstLeaseDomainId) ? org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.UPDATE_LEASE_INFO : org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.CREATE_NEW_LEASE; } } return dstLeaseDomainId != null ? org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.CREATE_NEW_LEASE : org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.DO_NOTHING; }	private org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction determineLeaseAction(org.ovirt.engine.core.compat.Guid srcLeaseDomainId, org.ovirt.engine.core.compat.Guid dstLeaseDomainId) { if ((srcLeaseDomainId != null) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getLeaseInfo()) != null)) { if (dstLeaseDomainId != null) { return srcLeaseDomainId.equals(dstLeaseDomainId) ? org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.UPDATE_LEASE_INFO : org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.UPDATE_LEASE_INFO_AND_LEASE_DOMAIN_ID; } } return dstLeaseDomainId != null ? org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.CREATE_NEW_LEASE : org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.DO_NOTHING; }
private boolean isLeaseInfoUpdateNeeded() { return ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.CREATE_NEW_LEASE)) || ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.UPDATE_LEASE_INFO)); }	private boolean isLeaseDomainIdUpdateNeeded() { return (org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.UPDATE_LEASE_INFO_AND_LEASE_DOMAIN_ID); }
public static org.ovirt.engine.core.compat.Guid fetchLeaseDomainId(java.lang.String ovfData) { int beginIndexOfEntityLeaseDomainId = ovfData.indexOf(org.ovirt.engine.core.utils.OvfUtils.ENTITY_LEASE_DOMAIN_ID); if (beginIndexOfEntityLeaseDomainId != (-1)) { int endOfIndexOfEntityLeaseDomainId = ovfData.indexOf(org.ovirt.engine.core.utils.OvfUtils.END_ENTITY_LEASE_DOMAIN_ID, beginIndexOfEntityLeaseDomainId); return org.ovirt.engine.core.compat.Guid.createGuidFromString(ovfData.substring((beginIndexOfEntityLeaseDomainId + (org.ovirt.engine.core.utils.OvfUtils.ENTITY_LEASE_DOMAIN_ID.length())), endOfIndexOfEntityLeaseDomainId)); } return null; }	public static org.ovirt.engine.core.compat.Guid fetchLeaseDomainId(java.lang.String ovfData) { org.ovirt.engine.core.compat.Guid leaseDomainId = null; try { org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument(ovfData); org.ovirt.engine.core.utils.ovf.xml.XmlNode xmlNode = xmlDocument.selectSingleNode("//*/Content").selectSingleNode("LeaseDomainId"); if (xmlNode != null) { leaseDomainId = org.ovirt.engine.core.compat.Guid.createGuidFromString(xmlNode.innerText); } } catch (java.lang.Exception e) { org.ovirt.engine.core.utils.OvfUtils.log.debug(("failed to parse a given ovf configuration: \n" + ovfData), e); } return leaseDomainId; }
protected boolean validateSourceStorageDomain() { org.ovirt.engine.core.compat.Guid sourceDomainId = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(); if ((sourceDomainId == null) || (Guid.Empty.equals(sourceDomainId))) { sourceDomainId = getImage().getStorageIds().get(0); org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().setSourceDomainId(sourceDomainId); } else { if (!(getImage().getStorageIds().contains(sourceDomainId))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_IS_NOT_VALID); } } org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(storageDomainDao.getForStoragePool(sourceDomainId, getImage().getStoragePoolId())); return validate(validator.isDomainExistAndActive()); }	protected boolean validateSourceStorageDomain() { org.ovirt.engine.core.compat.Guid sourceDomainId = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(); if ((sourceDomainId == null) || (Guid.Empty.equals(sourceDomainId))) { sourceDomainId = getImage().getStorageIds().get(0); org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().setSourceDomainId(sourceDomainId); } else { if (!(getImage().getStorageIds().contains(sourceDomainId))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_DOES_CONTAINS_THE_DISK); } } org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(storageDomainDao.getForStoragePool(sourceDomainId, getImage().getStoragePoolId())); return validate(validator.isDomainExistAndActive()); }
protected boolean validateDestStorage() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain()); if ((!(validate(validator.isDomainExistAndActive()))) || (!(validate(validator.domainIsValidDestination())))) { return false; } boolean moveOrCopy = (isMoveOperation()) || (isCopyOperation()); if ((moveOrCopy && (getImage().isShareable())) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLUSTERFS))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS, java.lang.String.format("$%1$s %2$s", "diskAlias", getImage().getDiskAlias())); } if (isMoveOperation()) { if (getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_IS_NOT_VALID); } } return true; }	protected boolean validateDestStorage() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain()); if ((!(validate(validator.isDomainExistAndActive()))) || (!(validate(validator.domainIsValidDestination())))) { return false; } boolean moveOrCopy = (isMoveOperation()) || (isCopyOperation()); if ((moveOrCopy && (getImage().isShareable())) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLUSTERFS))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS, java.lang.String.format("$%1$s %2$s", "diskAlias", getImage().getDiskAlias())); } if (isMoveOperation()) { if (getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomainId())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_ALREADY_CONTAINS_THE_DISK); } } return true; }
@org.junit.Test public void validateSourceDomainValid() { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); initializeCommand(disk, VmEntityType.VM); initSrcStorageDomain(); initDestStorageDomain(StorageType.NFS); disk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(org.ovirt.engine.core.compat.Guid.newGuid()))); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_IS_NOT_VALID); }	@org.junit.Test public void validateSourceDomainValid() { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); initializeCommand(disk, VmEntityType.VM); initSrcStorageDomain(); initDestStorageDomain(StorageType.NFS); disk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(org.ovirt.engine.core.compat.Guid.newGuid()))); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_DOES_CONTAINS_THE_DISK); }
java.lang.String ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_IS_NOT_VALID();	java.lang.String ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_ALREADY_CONTAINS_THE_DISK();
java.lang.String ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_IS_NOT_VALID();	java.lang.String ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_DOES_CONTAINS_THE_DISK();
@org.junit.Test public void validateDestinationDomainValid() { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); initializeCommand(disk, VmEntityType.VM); disk.getStorageIds().add(destStorageId); initSrcStorageDomain(); initDestStorageDomain(StorageType.NFS); command.getParameters().setStorageDomainId(destStorageId); command.setStorageDomainId(destStorageId); command.getStorageDomain().setId(destStorageId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_IS_NOT_VALID); }	@org.junit.Test public void validateDestinationDomainValid() { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); initializeCommand(disk, VmEntityType.VM); disk.getStorageIds().add(destStorageId); initSrcStorageDomain(); initDestStorageDomain(StorageType.NFS); command.getParameters().setStorageDomainId(destStorageId); command.setStorageDomainId(destStorageId); command.getStorageDomain().setId(destStorageId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_ALREADY_CONTAINS_THE_DISK); }
@java.lang.Override public void runningSucceded() { try { queryDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugPassthroughNics(); updateExternalNics(); } finally { super.runningSucceded(); } }	@java.lang.Override public void runningSucceded() { try { queryDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugPassthroughNics(); initParametersForExternalNetworks(destinationVds, true); } finally { super.runningSucceded(); } }
public static java.lang.String crypt(java.lang.String password) { byte[] r = new byte[org.ovirt.engine.core.uutils.crypto.CryptMD5.SALT_MAX_LENGTH]; char[] salt = new char[r.length]; org.ovirt.engine.core.uutils.crypto.CryptMD5.secureRandom.nextBytes(r); for (int i = 0; i < (r.length); i++) { salt[i] = org.ovirt.engine.core.uutils.crypto.CryptMD5.b64t[(((r[i]) & 255) % (org.ovirt.engine.core.uutils.crypto.CryptMD5.b64t.length))]; } return org.ovirt.engine.core.uutils.crypto.CryptMD5.crypt(password, new java.lang.String(salt)); }	public static java.lang.String crypt(java.lang.String password) { byte[] r = new byte[org.ovirt.engine.core.uutils.crypto.CryptMD5.SALT_MAX_LENGTH]; char[] salt = new char[r.length]; org.ovirt.engine.core.uutils.crypto.CryptMD5.SECURE_RANDOM.nextBytes(r); for (int i = 0; i < (r.length); i++) { salt[i] = org.ovirt.engine.core.uutils.crypto.CryptMD5.b64t[(((r[i]) & 255) % (org.ovirt.engine.core.uutils.crypto.CryptMD5.b64t.length))]; } return org.ovirt.engine.core.uutils.crypto.CryptMD5.crypt(password, new java.lang.String(salt)); }
public double getActualDiskSize() { if ((cachedActualSize) == 0.0) { cachedActualSize = getDiskImageMap().values().stream().mapToDouble(DiskImage::getActualSize).sum(); } return cachedActualSize; }	public double getActualDiskSize() { if ((cachedActualSize) < 0.0) { cachedActualSize = getDiskImageMap().values().stream().mapToDouble(DiskImage::getActualSize).sum(); } return cachedActualSize; }
private void processUnmanagedVm() { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vdsmVm.getVmDynamic(); if ((vmDynamic.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { destroyVm(); return; } unmanagedVm = true; vmDynamic.setRunOnVds(vdsManager.getVdsId()); saveDynamic(vmDynamic); }	private void processUnmanagedVm() { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vdsmVm.getVmDynamic(); if (((vmDynamic.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) || (((vmDynamic.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Paused)) && ((vmDynamic.getPauseStatus()) == (org.ovirt.engine.core.common.businessentities.VmPauseStatus.EIO)))) { destroyVm(); return; } unmanagedVm = true; vmDynamic.setRunOnVds(vdsManager.getVdsId()); saveDynamic(vmDynamic); }
protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntityPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase) { if ((phase == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.PAUSED_SYSTEM)) && ((pausedBySystemReason) != null)) { auditLog(this, pausedBySystemReason); } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); updates.setPhase(phase); return updateEntity(updates); }	protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntityPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); updates.setPhase(phase); return updateEntity(updates); }
private boolean pauseTransferIfNecessary(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval()) > 0) && (((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.INITIALIZING)) || ((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.TRANSFERRING)))) && ((((entity.getLastUpdated().getTime()) / 1000) + (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval())) < ts)) { log.warn("Transfer paused due to no updates in {} seconds. {}", (ts - ((entity.getLastUpdated().getTime()) / 1000)), getTransferDescription()); pausedBySystemReason = org.ovirt.engine.core.common.AuditLogType.TRANSFER_IMAGE_PAUSED_BY_SYSTEM_TIMEOUT; updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); return true; } return false; }	private boolean pauseTransferIfNecessary(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval()) > 0) && (((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.INITIALIZING)) || ((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.TRANSFERRING)))) && ((((entity.getLastUpdated().getTime()) / 1000) + (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval())) < ts)) { log.warn("Transfer paused due to no updates in {} seconds. {}", (ts - ((entity.getLastUpdated().getTime()) / 1000)), getTransferDescription()); updateEntityPhaseToPausedBySystem(AuditLogType.TRANSFER_IMAGE_PAUSED_BY_SYSTEM_TIMEOUT); return true; } return false; }
private void extendTicketIfNecessary(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((context.iterationTimestamp) >= ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getSessionExpiration()) - (getHostTicketRefreshAllowance()))) { log.info("Renewing transfer ticket for {}", getTransferDescription()); boolean extendSucceeded = extendImageTransferSession(context.entity); if (!extendSucceeded) { log.warn("Failed to renew transfer ticket for {}", getTransferDescription()); if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().isRetryExtendTicket()) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setRetryExtendTicket(false); } else { pausedBySystemReason = org.ovirt.engine.core.common.AuditLogType.TRANSFER_IMAGE_PAUSED_BY_SYSTEM_TICKET_RENEW_FAILURE; updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setRetryExtendTicket(true); } } } else { log.debug("Not yet renewing transfer ticket for {}", getTransferDescription()); } }	private void extendTicketIfNecessary(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((context.iterationTimestamp) >= ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getSessionExpiration()) - (getHostTicketRefreshAllowance()))) { log.info("Renewing transfer ticket for {}", getTransferDescription()); boolean extendSucceeded = extendImageTransferSession(context.entity); if (!extendSucceeded) { log.warn("Failed to renew transfer ticket for {}", getTransferDescription()); if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().isRetryExtendTicket()) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setRetryExtendTicket(false); } else { updateEntityPhaseToPausedBySystem(AuditLogType.TRANSFER_IMAGE_PAUSED_BY_SYSTEM_TICKET_RENEW_FAILURE); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setRetryExtendTicket(true); } } } else { log.debug("Not yet renewing transfer ticket for {}", getTransferDescription()); } }
private void pollTransferStatus(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((((context.entity.getVdsId()) == null) || ((context.entity.getImagedTicketId()) == null)) || (!(org.ovirt.engine.core.common.FeatureSupported.getImageTicketSupported(vdsDao.get(context.entity.getVdsId()).getClusterCompatibilityVersion())))) { return; } org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation ticketInfo; try { ticketInfo = ((org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation) (runVdsCommand(VDSCommandType.GetImageTicket, new org.ovirt.engine.core.common.vdscommands.GetImageTicketVDSCommandParameters(context.entity.getVdsId(), context.entity.getImagedTicketId())).getReturnValue())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Could not get image ticket '{}' from vdsm", context.entity.getImagedTicketId(), e); pausedBySystemReason = org.ovirt.engine.core.common.AuditLogType.TRANSFER_IMAGE_PAUSED_BY_SYSTEM_MISSING_TICKET; updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer = updateTransferStatusWithTicketInformation(context.entity, ticketInfo); if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { finalizeDownloadIfNecessary(context, upToDateImageTransfer); } }	private void pollTransferStatus(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((((context.entity.getVdsId()) == null) || ((context.entity.getImagedTicketId()) == null)) || (!(org.ovirt.engine.core.common.FeatureSupported.getImageTicketSupported(vdsDao.get(context.entity.getVdsId()).getClusterCompatibilityVersion())))) { return; } org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation ticketInfo; try { ticketInfo = ((org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation) (runVdsCommand(VDSCommandType.GetImageTicket, new org.ovirt.engine.core.common.vdscommands.GetImageTicketVDSCommandParameters(context.entity.getVdsId(), context.entity.getImagedTicketId())).getReturnValue())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Could not get image ticket '{}' from vdsm", context.entity.getImagedTicketId(), e); updateEntityPhaseToPausedBySystem(AuditLogType.TRANSFER_IMAGE_PAUSED_BY_SYSTEM_MISSING_TICKET); return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer = updateTransferStatusWithTicketInformation(context.entity, ticketInfo); if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { finalizeDownloadIfNecessary(context, upToDateImageTransfer); } }
private org.ovirt.engine.core.common.action.TransferDiskImageParameters createInitParams() { org.ovirt.engine.core.common.action.TransferDiskImageParameters parameters = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(); parameters.setTransferType(TransferType.Download); parameters.setImageGroupID(diskImage.getId()); java.lang.String fileExtension = ((diskImage.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW)) ? ".qcow2" : ".raw"; parameters.setDownloadFilename(((diskImage.getDiskAlias()) + fileExtension)); parameters.setTransferSize(diskImage.getActualSizeInBytes()); parameters.setKeepaliveInterval(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDownloadImageUiInactivityTimeoutInSeconds()); return parameters; }	private org.ovirt.engine.core.common.action.TransferDiskImageParameters createInitParams() { org.ovirt.engine.core.common.action.TransferDiskImageParameters parameters = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(); parameters.setTransferType(TransferType.Download); parameters.setImageGroupID(diskImage.getId()); java.lang.String fileExtension = ((diskImage.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW)) ? ".qcow2" : ".raw"; parameters.setDownloadFilename(((diskImage.getDiskAlias()) + fileExtension)); parameters.setTransferSize(diskImage.getActualSizeInBytes()); return parameters; }
private boolean stopTransferIfNecessary(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval()) > 0) && (((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.INITIALIZING)) || ((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.TRANSFERRING)))) && ((((entity.getLastUpdated().getTime()) / 1000) + (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval())) < ts)) { java.lang.String action = "paused"; org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase = org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.PAUSED_SYSTEM; if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { action = "canceled"; phase = org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.CANCELLED; } log.warn("Transfer was {} due to no updates in {} seconds. {}", action, (ts - ((entity.getLastUpdated().getTime()) / 1000)), getTransferDescription()); updateEntityPhase(phase); return true; } return false; }	private boolean stopTransferIfNecessary(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts) { if ((((getTransferImageClientInactivityTimeoutInSeconds()) > 0) && (((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.INITIALIZING)) || ((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.TRANSFERRING)))) && ((((entity.getLastUpdated().getTime()) / 1000) + (getTransferImageClientInactivityTimeoutInSeconds())) < ts)) { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { auditLog(this, AuditLogType.DOWNLOAD_IMAGE_CANCELED_TIMEOUT); updateEntityPhase(ImageTransferPhase.CANCELLED); } else { updateEntityPhaseToPausedBySystem(AuditLogType.UPLOAD_IMAGE_PAUSED_BY_SYSTEM_TIMEOUT); } return true; } return false; }
@java.lang.Override protected boolean validate() { final boolean result = validateImpl(); if (((!result) && (!(org.ovirt.engine.core.bll.RunVmCommandBase.isInternalExecution()))) && (!(org.ovirt.engine.core.bll.RunVmCommandBase.getParameters().isRerun()))) { logValidationFailed(); } return result; }	@java.lang.Override protected final boolean validate() { final boolean result = validateImpl(); if (((!result) && (!(org.ovirt.engine.core.bll.RunVmCommandBase.isInternalExecution()))) && (!(org.ovirt.engine.core.bll.RunVmCommandBase.getParameters().isRerun()))) { logValidationFailed(); } return result; }
private boolean isLeaseInfoUpdateNeeded() { return (org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().isRestoreLease()) && (((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.CREATE_NEW_LEASE)) || ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.UPDATE_LEASE_INFO))); }	private boolean isLeaseDomainIdUpdateNeeded() { return (org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.UPDATE_LEASE_INFO_AND_LEASE_DOMAIN_ID); }
@java.lang.Override public javax.ws.rs.core.Response previewSnapshot(org.ovirt.engine.api.model.Action action) { validateParameters(action, "snapshot.id"); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(guid, asGuid(action.getSnapshot().getId())); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { tryBackParams.setDisks(getParent().mapDisks(action.getDisks())); } if (action.isSetRestoreLease()) { tryBackParams.setRestoreLease(action.isRestoreLease()); } javax.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action); return response; }	@java.lang.Override public javax.ws.rs.core.Response previewSnapshot(org.ovirt.engine.api.model.Action action) { validateParameters(action, "snapshot.id"); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(guid, asGuid(action.getSnapshot().getId())); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = getParent().mapDisks(action.getDisks()); if (disks != null) { java.lang.String noImageId = disks.stream().filter(( disk) -> disk.getImageId().equals(Guid.Empty)).map(( disk) -> disk.getId().toString()).collect(java.util.stream.Collectors.joining(",")); if (!(noImageId.isEmpty())) { badRequest(("Missing image ids for disks: " + noImageId)); } } tryBackParams.setImageIds(getDisksGuidSet(disks)); } if (action.isSetLease()) { tryBackParams.setRestoreLease(action.getLease().isSetStorageDomain()); if (action.getLease().isSetStorageDomain()) { tryBackParams.setDstLeaseDomainId(asGuid(action.getLease().getStorageDomain().getId())); } } javax.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action); return response; }
private boolean isSortedAndMaxResults() { java.lang.String searchConstraint = org.ovirt.engine.api.restapi.util.QueryHelper.getConstraint(httpHeaders, uriInfo, "", modelType); int max = org.ovirt.engine.api.restapi.util.ParametersHelper.getIntegerParameter(httpHeaders, uriInfo, "max", (-1), (-1)); return (((searchConstraint != null) && (!(searchConstraint.isEmpty()))) && (searchConstraint.toLowerCase().contains("sortby name asc"))) && (max != 0); }	private boolean isSortedAndMaxResults() { java.lang.String searchConstraint = org.ovirt.engine.api.restapi.util.QueryHelper.getConstraint(httpHeaders, uriInfo, "", modelType); int max = org.ovirt.engine.api.restapi.util.ParametersHelper.getIntegerParameter(httpHeaders, uriInfo, "max", (-1), (-1)); return (((searchConstraint != null) && (!(searchConstraint.isEmpty()))) && (searchConstraint.toLowerCase().contains("sortby name asc"))) && (max != (-1)); }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVMs() { int maxResults = org.ovirt.engine.core.bll.GetAllVmsFilteredAndSortedQuery.getParameters().getMaxResults(); int pageNum = org.ovirt.engine.core.bll.GetAllVmsFilteredAndSortedQuery.getParameters().getPageNum(); int offset = pageNum - (1 * maxResults); int limit = offset + maxResults; return vmDao.getAllSortedAndFiltered(org.ovirt.engine.core.bll.GetAllVmsFilteredAndSortedQuery.getUserID(), offset, limit); }	@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVMs() { int maxResults = org.ovirt.engine.core.bll.GetAllVmsFilteredAndSortedQuery.getParameters().getMaxResults(); int pageNum = org.ovirt.engine.core.bll.GetAllVmsFilteredAndSortedQuery.getParameters().getPageNum(); int offset = (pageNum - 1) * maxResults; int limit = offset + maxResults; return vmDao.getAllSortedAndFiltered(org.ovirt.engine.core.bll.GetAllVmsFilteredAndSortedQuery.getUserID(), offset, limit); }
@java.lang.Override public org.ovirt.engine.api.model.Vms list() { if (isFiltered()) { if (isSortedAndMaxResults()) { return getVmsFilteredAndSorted(); } else { return mapCollection(getBackendCollection(QueryType.GetAllVms, new org.ovirt.engine.core.common.queries.QueryParametersBase(), SearchType.VM), true); } } else { return mapCollection(getBackendCollection(SearchType.VM), false); } }	@java.lang.Override public org.ovirt.engine.api.model.Vms list() { if (isFiltered()) { if (isSortedAndMaxResults()) { return getVmsFilteredAndSorted(); } else { return mapCollection(getBackendCollection(QueryType.GetAllVms, new org.ovirt.engine.core.common.queries.QueryParametersBase(), SearchType.VM)); } } else { return mapCollection(getBackendCollection(SearchType.VM)); } }
private org.ovirt.engine.api.model.Vms getVmsFilteredAndSorted() { int max = org.ovirt.engine.api.restapi.util.ParametersHelper.getIntegerParameter(httpHeaders, uriInfo, "max", (-1), (-1)); org.ovirt.engine.core.common.queries.GetAllVmsFilteredAndSortedParameters params = new org.ovirt.engine.core.common.queries.GetAllVmsFilteredAndSortedParameters(max); java.lang.String searchConstraint = org.ovirt.engine.api.restapi.util.QueryHelper.getConstraint(httpHeaders, uriInfo, "", modelType); java.lang.Integer pageNum = org.ovirt.engine.api.restapi.util.QueryHelper.parsePageNum(searchConstraint); params.setPageNum((pageNum == null ? -1 : pageNum)); return mapCollection(getBackendCollection(QueryType.GetAllVmsFilteredAndSorted, params), true); }	private org.ovirt.engine.api.model.Vms getVmsFilteredAndSorted() { int max = org.ovirt.engine.api.restapi.util.ParametersHelper.getIntegerParameter(httpHeaders, uriInfo, "max", (-1), (-1)); java.lang.String searchConstraint = org.ovirt.engine.api.restapi.util.QueryHelper.getConstraint(httpHeaders, uriInfo, "", modelType); java.lang.Integer pageNum = org.ovirt.engine.api.restapi.util.QueryHelper.parsePageNum(searchConstraint); org.ovirt.engine.core.common.queries.GetFilteredAndSortedParameters params = new org.ovirt.engine.core.common.queries.GetFilteredAndSortedParameters(max, (pageNum == null ? 1 : pageNum)); return mapCollection(getBackendCollection(QueryType.GetAllVmsFilteredAndSorted, params)); }
public static java.lang.Integer parsePageNum(java.lang.String searchStr) { if ((searchStr.toLowerCase().indexOf("page ")) == (-1)) { return null; } else { int pos = (searchStr.toLowerCase().indexOf("page ")) + 5; java.lang.StringBuilder pageNumberStr = new java.lang.StringBuilder(); char c = searchStr.charAt(pos); while ((java.lang.Character.isDigit(c)) && (pos < (searchStr.length()))) { pageNumberStr.append(c); pos += 1; if (pos < (searchStr.length())) { c = searchStr.charAt(pos); } } int pageNum = ((pageNumberStr.length()) == 0) ? 1 : java.lang.Integer.valueOf(pageNumberStr.toString()); return pageNum; } }	public static java.lang.Integer parsePageNum(java.lang.String searchStr) { if ((searchStr.toLowerCase().indexOf("page ")) == (-1)) { return null; } else { int pos = (searchStr.toLowerCase().indexOf("page ")) + 5; java.lang.StringBuilder pageNumberStr = new java.lang.StringBuilder(); char c = searchStr.charAt(pos); while ((java.lang.Character.isDigit(c)) && (pos < (searchStr.length()))) { pageNumberStr.append(c); pos += 1; if (pos < (searchStr.length())) { c = searchStr.charAt(pos); } } int pageNum = ((pageNumberStr.length()) == 0) ? 1 : java.lang.Integer.parseInt(pageNumberStr.toString()); return pageNum; } }
public static long greatestCommonDivisor(long a, long b) { while (b != 0) { long c = a; b = a % b; a = c; } return a; }	public static long greatestCommonDivisor(long a, long b) { while (b != 0) { long c = b; b = a % b; a = c; } return a; }
public org.ovirt.engine.core.bll.ValidationResult canVnicWithExternalNetworkBePlugged() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.PLUGGED_UNLINKED_VM_INTERFACE_WITH_EXTERNAL_NETWORK_IS_NOT_SUPPORTED).when(((((org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.RequiredAction.PLUG) == (getRequiredAction())) && (!(nic.isLinked()))) && (org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.UpdateVmNicValidator.isVnicAttachedToExternalNetwork()))); }	public org.ovirt.engine.core.bll.ValidationResult canVnicWithExternalNetworkBePlugged() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.PLUGGED_UNLINKED_VM_INTERFACE_WITH_EXTERNAL_NETWORK_IS_NOT_SUPPORTED).when(((((org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.RequiredAction.PLUG) == (getRequiredAction())) && (!(nic.isLinked()))) && (isVnicAttachedToExternalNetwork()))); }
@org.junit.Before public void setUp() { prepareNetwork(commandNoCluster.getParameters().getExternalNetwork()); prepareNetwork(commandCluster.getParameters().getExternalNetwork()); when(backend.runInternalAction(eq(ActionType.AddNetwork), any(), any())).thenReturn(getAddNetworkReturnValue()); when(networkHelper.createVnicProfile(any())).thenReturn(new org.ovirt.engine.core.common.businessentities.network.VnicProfile()); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = new org.ovirt.engine.core.common.action.ActionReturnValue(); returnValue.setSucceeded(true); when(networkHelper.addVnicProfile(any(), anyBoolean())).thenReturn(returnValue); when(networkHelper.attachNetworkToClusters(eq(NETWORK_ID), any())).thenReturn(returnValue); org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = new org.ovirt.engine.core.common.queries.QueryReturnValue(); queryReturnValue.setReturnValue(getClusters()); queryReturnValue.setSucceeded(true); when(backend.runInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any(), any())).thenReturn(queryReturnValue); }	@org.junit.Before public void setUp() { prepareNetwork(commandNoCluster.getParameters().getExternalNetwork()); prepareNetwork(commandCluster.getParameters().getExternalNetwork()); when(backend.runInternalAction(eq(ActionType.AddNetwork), any(), any())).thenReturn(getAddNetworkReturnValue()); when(networkHelper.createVnicProfile(any())).thenReturn(new org.ovirt.engine.core.common.businessentities.network.VnicProfile()); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = new org.ovirt.engine.core.common.action.ActionReturnValue(); returnValue.setSucceeded(true); when(networkHelper.addVnicProfileWithoutFilter(any(), anyBoolean())).thenReturn(returnValue); when(networkHelper.attachNetworkToClusters(eq(NETWORK_ID), any())).thenReturn(returnValue); org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = new org.ovirt.engine.core.common.queries.QueryReturnValue(); queryReturnValue.setReturnValue(getClusters()); queryReturnValue.setSucceeded(true); when(backend.runInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any(), any())).thenReturn(queryReturnValue); }
private void verifyCalls(boolean attachToAllClusters) { verify(backend).runInternalAction(eq(ActionType.AddNetwork), any(), any()); verify(networkHelper).createVnicProfile(any()); verify(networkHelper).addVnicProfile(any(), anyBoolean()); org.mockito.verification.VerificationMode expectedNumberOfCalls = (attachToAllClusters) ? times(1) : never(); verify(backend, expectedNumberOfCalls).runInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any(), any()); verify(networkHelper, expectedNumberOfCalls).attachNetworkToClusters(eq(NETWORK_ID), any()); }	private void verifyCalls(boolean attachToAllClusters) { verify(backend).runInternalAction(eq(ActionType.AddNetwork), any(), any()); verify(networkHelper).addVnicProfileWithoutFilter(any(), anyBoolean()); org.mockito.verification.VerificationMode expectedNumberOfCalls = (attachToAllClusters) ? times(1) : never(); verify(backend, expectedNumberOfCalls).runInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any(), any()); verify(networkHelper, expectedNumberOfCalls).attachNetworkToClusters(eq(NETWORK_ID), any()); }
public org.ovirt.engine.core.common.action.ActionReturnValue addVnicProfile(org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, boolean publicUse) { org.ovirt.engine.core.common.action.AddVnicProfileParameters parameters = new org.ovirt.engine.core.common.action.AddVnicProfileParameters(vnicProfile); parameters.setPublicUse(publicUse); return backend.runInternalAction(ActionType.AddVnicProfile, parameters); }	public org.ovirt.engine.core.common.action.ActionReturnValue addVnicProfileWithoutFilter(org.ovirt.engine.core.common.businessentities.network.Network network, boolean publicUse) { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = createVnicProfile(network); vnicProfile.setNetworkFilterId(null); org.ovirt.engine.core.common.action.AddVnicProfileParameters parameters = new org.ovirt.engine.core.common.action.AddVnicProfileParameters(vnicProfile); parameters.setPublicUse(publicUse); return backend.runInternalAction(ActionType.AddVnicProfile, parameters); }
public static boolean isMemoryDisksOnDifferentDomainsSupported(org.ovirt.engine.core.compat.Version version) { return org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.IsMemorySnapshotSupported, version); }	public static boolean isMemoryDisksOnDifferentDomainsSupported(org.ovirt.engine.core.compat.Version version) { return org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.MemoryDisksOnDifferentDomainsSupported, version); }
public java.util.Map<java.lang.String, java.lang.String> build() { if (((((poolId) == null) || ((domainId) == null)) || ((imageGroupId) == null)) || ((volumeId) == null)) { throw new java.lang.IllegalArgumentException("One or more of the PDIV IDs is null"); } java.util.Map<java.lang.String, java.lang.String> pdivMap = new java.util.HashMap<>(); pdivMap.put("poolID", poolId.toString()); pdivMap.put("domainID", domainId.toString()); pdivMap.put("imageID", imageGroupId.toString()); pdivMap.put("volumeID", volumeId.toString()); return pdivMap; }	public java.util.Map<java.lang.String, java.lang.String> build() { if (((((poolId) == null) || ((domainId) == null)) || ((imageGroupId) == null)) || ((volumeId) == null)) { throw new java.lang.IllegalArgumentException("One or more of the PDIV IDs is null"); } java.util.Map<java.lang.String, java.lang.String> pdivMap = new java.util.HashMap<>(8); pdivMap.put("poolID", poolId.toString()); pdivMap.put("domainID", domainId.toString()); pdivMap.put("imageID", imageGroupId.toString()); pdivMap.put("volumeID", volumeId.toString()); return pdivMap; }
private boolean shouldRestoreMemory() { return ((!(memoryFromSnapshotUsed)) && (((getFlow()) == (org.ovirt.engine.core.common.action.RunVmParams.RunVmFlow.RESUME_HIBERNATE)) || (org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(org.ovirt.engine.core.bll.RunVmCommand.getVm().getClusterArch(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getCompatibilityVersion())))) && (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume()))); }	protected boolean shouldRestoreMemory() { return ((!(memoryFromSnapshotUsed)) && (((getFlow()) == (org.ovirt.engine.core.common.action.RunVmParams.RunVmFlow.RESUME_HIBERNATE)) || (org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(org.ovirt.engine.core.bll.RunVmCommand.getVm().getClusterArch(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getCompatibilityVersion())))) && (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume()))); }
private void handleRefreshCapabilitiesResponse(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.vdscommands.VDSReturnValue caps) { try { invokeGetHardwareInfo(vds, caps); processRefreshCapabilitiesResponse(new java.util.concurrent.atomic.AtomicBoolean(), vds, vds.clone(), caps); } finally { if (vds != null) { updateDynamicData(vds.getDynamicData()); updateNumaData(vds); monitoringStrategy.processHardwareCapabilities(vds); resourceManager.getEventListener().handleVdsVersion(vds.getId()); } } }	private void handleRefreshCapabilitiesResponse(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.vdscommands.VDSReturnValue caps, boolean throwException) { try { invokeGetHardwareInfo(vds, caps); processRefreshCapabilitiesResponse(new java.util.concurrent.atomic.AtomicBoolean(), vds, vds.clone(), caps); } catch (java.lang.Throwable t) { logRefreshCapabilitiesFailure(t); if (throwException) { throw t; } } finally { if (vds != null) { updateDynamicData(vds.getDynamicData()); updateNumaData(vds); monitoringStrategy.processHardwareCapabilities(vds); resourceManager.getEventListener().handleVdsVersion(vds.getId()); } } }
public void refreshHostSync(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue caps = resourceManager.runVdsCommand(VDSCommandType.GetCapabilities, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase(vds)); handleRefreshCapabilitiesResponse(vds, caps); }	public void refreshHostSync(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue caps = resourceManager.runVdsCommand(VDSCommandType.GetCapabilities, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase(vds)); handleRefreshCapabilitiesResponse(vds, caps, true); }
@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue caps = ((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result"))); handleRefreshCapabilitiesResponse(vds, caps); } catch (java.lang.Throwable t) { onFailure(t); } }	@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue caps = ((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result"))); handleRefreshCapabilitiesResponse(vds, caps, false); }
@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { processRefreshVdsStatsResponse(((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result")))); if (!(isVdsUpOrGoingToMaintenance)) { vdsManager.setStatus(VDSStatus.Up, vds); } refreshVdsRunTimeInfo(isVdsUpOrGoingToMaintenance); } catch (java.lang.Throwable t) { onFailure(t); } }	@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { processRefreshVdsStatsResponse(((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result")))); if (!(vdsUpOrGoingToMaintenance)) { vdsManager.setStatus(VDSStatus.Up, vds); } refreshVdsRunTimeInfo(vdsUpOrGoingToMaintenance); } catch (java.lang.Throwable t) { onFailure(t); } }
public void setSourceProfileName(java.lang.String name) { source.setName(name); }	public void setSourceProfileName(java.lang.String name) { sourceProfileName = name; }
public boolean isSameSourceProfile(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic) { return (java.util.Objects.equals(getSourceNetworkName(), vnic.getNetworkName())) && (java.util.Objects.equals(getSourceProfileName(), vnic.getVnicProfileName())); }	public boolean isSameSourceProfile(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic) { return ((java.util.Objects.equals(getSourceNetworkName(), vnic.getNetworkName())) || (("".equals(getSourceNetworkName())) && ((vnic.getNetworkName()) == null))) && ((java.util.Objects.equals(getSourceProfileName(), vnic.getVnicProfileName())) || (("".equals(getSourceProfileName())) && ((vnic.getVnicProfileName()) == null))); }
public java.lang.String getSourceProfileName() { return source.getName(); }	public java.lang.String getSourceProfileName() { return sourceProfileName; }
@org.junit.Test public void testFindMappingEntry() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.NETWORK_NAME); vnic.setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.VNIC_PROFILE1_NAME); final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(vnic, externalVnicProfileMappings); assertThat(actual.get(), sameInstance(externalVnicProfileMapping1)); }	@org.junit.Test public void testFindMappingEntry() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(org.ovirt.engine.core.bll.exportimport.MatchUserMappingToOvfVnicTest.NETWORK_NAME); vnic.setVnicProfileName(org.ovirt.engine.core.bll.exportimport.MatchUserMappingToOvfVnicTest.VNIC_PROFILE1_NAME); org.ovirt.engine.core.bll.exportimport.vnics.MapVnicsContext ctx = new org.ovirt.engine.core.bll.exportimport.vnics.MapVnicsContext(); ctx.setUserMappings(externalVnicProfileMappings); ctx.setOvfVnics(java.util.Collections.singletonList(vnic)); underTest.handle(ctx); assertThat(ctx.getMatched().get(vnic), sameInstance(externalVnicProfileMapping1)); }
public void setSourceNetworkName(java.lang.String name) { if ((source.getCustomProperties()) == null) { java.util.HashMap<java.lang.String, java.lang.String> props = new java.util.HashMap<>(1); source.setCustomProperties(props); } source.getCustomProperties().put("networkName", name); }	public void setSourceNetworkName(java.lang.String name) { sourceNetworkName = name; }
@org.junit.Test public void testFindMappingEntryNotFound() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(("not" + (org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.NETWORK_NAME))); vnic.setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.VNIC_PROFILE2_NAME); final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(vnic, externalVnicProfileMappings); assertThat(actual, is(java.util.Optional.empty())); }	@org.junit.Test public void testFindMappingEntryNotFound() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(("not" + (org.ovirt.engine.core.bll.exportimport.MatchUserMappingToOvfVnicTest.NETWORK_NAME))); vnic.setVnicProfileName(org.ovirt.engine.core.bll.exportimport.MatchUserMappingToOvfVnicTest.VNIC_PROFILE2_NAME); org.ovirt.engine.core.bll.exportimport.vnics.MapVnicsContext ctx = new org.ovirt.engine.core.bll.exportimport.vnics.MapVnicsContext(); ctx.setUserMappings(externalVnicProfileMappings); ctx.setOvfVnics(java.util.Collections.singletonList(vnic)); underTest.handle(ctx); assertEquals(null, ctx.getMatched().get(vnic)); }
public static void validateRegistrationVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource br, org.ovirt.engine.api.model.Action action) { if (!(action.isSetRegistrationConfiguration())) { return; } if (!(action.getRegistrationConfiguration().isSetVnicProfileMappings())) { return; } org.ovirt.engine.api.model.RegistrationVnicProfileMappings mappings = action.getRegistrationConfiguration().getVnicProfileMappings(); br.validateParameters(mappings, "registrationVnicProfileMappings"); for (org.ovirt.engine.api.model.RegistrationVnicProfileMapping mapping : mappings.getRegistrationVnicProfileMappings()) { org.ovirt.engine.api.restapi.resource.BackendVnicProfileHelper.validateSourceVnicProfile(br, mapping); org.ovirt.engine.api.restapi.resource.BackendVnicProfileHelper.validateTargetVnicProfile(mapping); } }	@java.lang.Deprecated public static void validateVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource br, org.ovirt.engine.api.model.Action action) { if (action.isSetVnicProfileMappings()) { br.validateParameters(action.getVnicProfileMappings(), "vnicProfileMappings"); for (org.ovirt.engine.api.model.VnicProfileMapping mapping : action.getVnicProfileMappings().getVnicProfileMappings()) { br.validateParameters(mapping, "sourceNetworkName"); br.validateParameters(mapping, "sourceNetworkProfileName"); if ((mapping.isSetTargetVnicProfile()) && (mapping.getTargetVnicProfile().isSetId())) { br.asGuid(mapping.getTargetVnicProfile().getId()); } } } }
@org.junit.Test public void testFindMappingEntryEmptyInput() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.NETWORK_NAME); vnic.setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.VNIC_PROFILE1_NAME); final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(vnic, java.util.Collections.emptyList()); assertThat(actual, is(java.util.Optional.empty())); }	@org.junit.Test public void testFindMappingEntryEmptyInput() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); org.ovirt.engine.core.bll.exportimport.vnics.MapVnicsContext ctx = new org.ovirt.engine.core.bll.exportimport.vnics.MapVnicsContext(); ctx.setUserMappings(java.util.Collections.emptyList()); ctx.setOvfVnics(java.util.Collections.singletonList(vnic)); underTest.handle(ctx); assertEquals(1, ctx.getMatched().size()); assertEquals(null, ctx.getMatched().get(vnic)); }
public org.ovirt.engine.core.compat.Guid getTargetProfileId() { return target.getId(); }	public org.ovirt.engine.core.compat.Guid getTargetProfileId() { return targetProfileId; }
@org.junit.Test public void testFindMappingEntryEmptySourceVnicProfile() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(null); vnic.setVnicProfileName(null); final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(vnic, java.util.Collections.singletonList(emptySourceMapping)); assertThat(actual.get(), sameInstance(emptySourceMapping)); }	@org.junit.Test public void testFindMappingEntryEmptySourceVnicProfile() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(null); vnic.setVnicProfileName(null); org.ovirt.engine.core.bll.exportimport.vnics.MapVnicsContext ctx = new org.ovirt.engine.core.bll.exportimport.vnics.MapVnicsContext(); ctx.setUserMappings(java.util.Collections.singletonList(emptySourceMapping)); ctx.setOvfVnics(java.util.Collections.singletonList(vnic)); underTest.handle(ctx); assertThat(ctx.getMatched().get(vnic), sameInstance(emptySourceMapping)); }
@org.junit.Test public void testFindMappingEntryEmptyExternal() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.NETWORK_NAME); vnic.setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.VNIC_PROFILE1_NAME); final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(vnic, java.util.Collections.singletonList(emptySourceMapping)); assertFalse(actual.isPresent()); }	@org.junit.Test public void testFindMappingEntryEmptyExternal() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(org.ovirt.engine.core.bll.exportimport.MatchUserMappingToOvfVnicTest.NETWORK_NAME); vnic.setVnicProfileName(org.ovirt.engine.core.bll.exportimport.MatchUserMappingToOvfVnicTest.VNIC_PROFILE1_NAME); org.ovirt.engine.core.bll.exportimport.vnics.MapVnicsContext ctx = new org.ovirt.engine.core.bll.exportimport.vnics.MapVnicsContext(); ctx.setUserMappings(java.util.Collections.singletonList(emptySourceMapping)); ctx.setOvfVnics(java.util.Collections.singletonList(vnic)); underTest.handle(ctx); assertEquals(null, ctx.getMatched().get(vnic)); }
private void updateVnicFromMapping(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic, org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping mapping) { if ((mapping.getTargetProfileId()) != null) { updateVnicUsingProfileId(vnic, mapping.getTargetProfileId()); } else { updateVnicSetNoProfile(vnic); } }	public java.util.List<java.lang.String> updateVnicsFromMappings(org.ovirt.engine.core.compat.Guid clusterId, java.lang.String vmName, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics, java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> mappings) { org.ovirt.engine.core.bll.exportimport.vnics.MapVnicsContext ctx = new org.ovirt.engine.core.bll.exportimport.vnics.MapVnicsContext("updateVnicsFromMappings").setClusterId(clusterId).setVmName(vmName).setOvfVnics(vnics).setUserMappings(mappings); mapVnicsFlow.getHead().process(ctx); return !(org.apache.commons.collections.CollectionUtils.isEmpty(ctx.getNonAssociableVnics())) ? ctx.getNonAssociableVnics() : java.util.Collections.emptyList(); }
public java.lang.String getSourceNetworkName() { return (source.getCustomProperties()) != null ? source.getCustomProperties().get("networkName") : null; }	public java.lang.String getSourceNetworkName() { return sourceNetworkName; }
public void setTargetProfileId(org.ovirt.engine.core.compat.Guid vnicProfileId) { target.setId(vnicProfileId); }	public void setTargetProfileId(org.ovirt.engine.core.compat.Guid id) { targetProfileId = id; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getDataCenter()))) { dataCenter_SelectedItemChanged(); } else if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getCluster()))) { cluster_SelectedItemChanged(); } else if (sender == (getConsoleAddressEnabled())) { consoleAddressChanged(); } else if ((ev.matchesDefinition(HasEntity.entityChangedEventDefinition)) && (((((sender == (getKernelCmdlineBlacklistNouveau)) || (sender == (getKernelCmdlineIommu()))) || (sender == (getKernelCmdlineKvmNested()))) || (sender == (getKernelCmdlineUnsafeInterrupts()))) || (sender == (getKernelCmdlinePciRealloc())))) { if (isKernelCmdlineParsable()) { updateKernelCmdlineAccordingToCheckboxes(); } } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getDataCenter()))) { dataCenter_SelectedItemChanged(); } else if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getCluster()))) { cluster_SelectedItemChanged(); } else if (sender == (getConsoleAddressEnabled())) { consoleAddressChanged(); } else if ((ev.matchesDefinition(HasEntity.entityChangedEventDefinition)) && (((((sender == (getKernelCmdlineBlacklistNouveau())) || (sender == (getKernelCmdlineIommu()))) || (sender == (getKernelCmdlineKvmNested()))) || (sender == (getKernelCmdlineUnsafeInterrupts()))) || (sender == (getKernelCmdlinePciRealloc())))) { if (isKernelCmdlineParsable()) { updateKernelCmdlineAccordingToCheckboxes(); } } }
public void setCacheSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> cacheSize) { this.cacheSize = cacheSize; }	public void setCacheSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Integer> cacheSize) { this.cacheSize = cacheSize; }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.CacheDevicePathType> getCacheDevicePathTypeList() { return cacheDevicePathTypeList; }	public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice> getCacheDevicePathTypeList() { return cacheDevicePathTypeList; }
public void setCacheSize(java.lang.String cacheSize) { this.cacheSize = cacheSize; }	public void setCacheSize(java.lang.Integer cacheSize) { this.cacheSize = cacheSize; }
@java.lang.Override protected void executeCommand() { try { runAnsibleLvmCachePlaybook(); } catch (java.io.IOException | java.lang.InterruptedException e) { e.printStackTrace(); } }	@java.lang.Override protected void executeCommand() { try { runAnsibleCreateBrickPlaybook(); setSucceeded(true); } catch (java.io.IOException | java.lang.InterruptedException e) { setSucceeded(false); e.printStackTrace(); } }
@org.junit.Test public void validateFailsForNoStorageDevice() { doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Collections.emptyList(), org.ovirt.engine.core.common.businessentities.CacheDevicePathType.sdd, org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, "10")).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }	@org.junit.Test public void validateFailsForNoStorageDevice() { doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Collections.emptyList(), getStorageDevice("sdd"), org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, 10)).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
@org.junit.Test public void validateSucceeds() { doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Collections.singletonList(getStorageDevice("sda")), org.ovirt.engine.core.common.businessentities.CacheDevicePathType.sda, org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, "10")).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertTrue(cmd.validate()); }	@org.junit.Test public void validateSucceeds() { doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Collections.singletonList(getStorageDevice("sda")), getStorageDevice("sdb"), org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, 10)).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertTrue(cmd.validate()); }
public org.ovirt.engine.core.common.businessentities.CacheDevicePathType getCacheDevicePath() { return cacheDevicePath; }	public org.ovirt.engine.core.common.businessentities.gluster.StorageDevice getCacheDevice() { return cacheDevice; }
public java.lang.String getCacheSize() { return cacheSize; }	public java.lang.Integer getCacheSize() { return cacheSize; }
public void setCacheDevicePathTypeList(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.CacheDevicePathType> cacheDevicePathTypeList) { this.cacheDevicePathTypeList = cacheDevicePathTypeList; }	public void setCacheDevicePathTypeList(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice> cacheDevicePathTypeList) { this.cacheDevicePathTypeList = cacheDevicePathTypeList; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> getCacheSize() { return cacheSize; }	public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Integer> getCacheSize() { return cacheSize; }
private void initListBoxEditors() { raidTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.RaidType>()); cacheDevicePathEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.CacheDevicePathType>()); cacheModeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.CacheModeType>()); }	private void initListBoxEditors() { raidTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.RaidType>()); cacheDevicePathEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.NameRenderer<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice>()); cacheModeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.CacheModeType>()); }
@org.junit.Test public void validateFailsForDifferentStorageDevice() { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice1 = getStorageDevice("sda"); org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice2 = getStorageDevice("sdb"); storageDevice2.setDevType("SDA"); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Arrays.asList(storageDevice1, storageDevice2), org.ovirt.engine.core.common.businessentities.CacheDevicePathType.sdb, org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, "10")).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }	@org.junit.Test public void validateFailsForDifferentStorageDevice() { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice1 = getStorageDevice("sda"); org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice2 = getStorageDevice("sdb"); storageDevice2.setDevType("SDA"); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Arrays.asList(storageDevice1, storageDevice2), getStorageDevice("sdb"), org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, 10)).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
@org.junit.Test public void validateFailsForDeviceAlreadyInUse() { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice = getStorageDevice("sda"); storageDevice.setCanCreateBrick(false); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Collections.singletonList(storageDevice), org.ovirt.engine.core.common.businessentities.CacheDevicePathType.sda, org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, "10")).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }	@org.junit.Test public void validateFailsForDeviceAlreadyInUse() { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice = getStorageDevice("sda"); storageDevice.setCanCreateBrick(false); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Collections.singletonList(storageDevice), getStorageDevice("sda"), org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, 10)).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
public void setCacheDevicePath(org.ovirt.engine.core.common.businessentities.CacheDevicePathType cacheDevicePath) { this.cacheDevicePath = cacheDevicePath; }	public void setCacheDevice(org.ovirt.engine.core.common.businessentities.gluster.StorageDevice cacheDevicePath) { this.cacheDevice = cacheDevicePath; }
@org.junit.Test public void testExecuteQueryCommand() { org.ovirt.engine.core.common.queries.GetDiskImageByDiskAndImageIdsParameters params = getQueryParameters(); when(params.getDiskId()).thenReturn(diskId); when(params.getImageId()).thenReturn(imageId); when(diskImageDao.getDiskImageByDiskAndImageIds(diskId, imageId)).thenReturn(diskImage); org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery<org.ovirt.engine.core.common.queries.GetDiskImageByDiskAndImageIdsParameters> query = getQuery(); query.executeQueryCommand(); org.ovirt.engine.core.common.businessentities.storage.DiskImage returnDiskImage = query.getQueryReturnValue().getReturnValue(); assertTrue(returnDiskImage.equals(diskImage)); }	@org.junit.Test public void testExecuteQueryCommand() { org.ovirt.engine.core.common.queries.GetDiskImageByDiskAndImageIdsParameters params = getQueryParameters(); when(params.getDiskId()).thenReturn(diskId); when(params.getImageId()).thenReturn(imageId); when(diskImageDao.getDiskImageByDiskAndImageIds(diskId, imageId, getUser().getId(), getQueryParameters().isFiltered())).thenReturn(diskImage); org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery<org.ovirt.engine.core.common.queries.GetDiskImageByDiskAndImageIdsParameters> query = getQuery(); query.executeQueryCommand(); org.ovirt.engine.core.common.businessentities.storage.DiskImage returnDiskImage = query.getQueryReturnValue().getReturnValue(); assertEquals(returnDiskImage, diskImage); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImageByDiskAndImageIds(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid imageId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("disk_id", diskId).addValue("image_id", imageId); return getCallsHandler().executeRead("GetDiskImageByDiskAndImageIds", org.ovirt.engine.core.dao.DiskImageDaoImpl.DiskImageRowMapper.instance, parameterSource); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImageByDiskAndImageIds(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid imageId) { return getDiskImageByDiskAndImageIds(diskId, imageId, null, false); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery.getQueryReturnValue().setReturnValue(diskImageDao.getDiskImageByDiskAndImageIds(org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery.getParameters().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery.getParameters().getImageId())); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery.getQueryReturnValue().setReturnValue(diskImageDao.getDiskImageByDiskAndImageIds(org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery.getParameters().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery.getParameters().getImageId(), org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery.getUserID(), org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery.getParameters().isFiltered())); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (!(getGlusterVolume().getVolumeType().isReplicatedType())) { addValidationMessage(EngineMessage.ACTION_TYPE_NOT_SUPPORTED_FOR_VOLUME_TYPE); return false; } if (!(getGlusterVolume().isOnline())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN); return false; } if (((getGlusterVolume().getAsyncTask()) != null) && (((getGlusterVolume().getAsyncTask().getStatus()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.STARTED)) || (((getGlusterVolume().getAsyncTask().getType()) == (org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REMOVE_BRICK)) && ((getGlusterVolume().getAsyncTask().getStatus()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.FINISHED))))) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_HAS_RUNNING_TASKS); return false; } if ((getParameters().getExistingBrick()) == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED); return false; } if (!(isValidVolumeBrick(getParameters().getExistingBrick()))) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_NOT_A_GLUSTER_VOLUME_BRICK); return false; } return true; }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (!(supportedInConfig(ConfigValues.ResetBrickSupported, getCluster().getCompatibilityVersion()))) { return false; } if (!(getGlusterVolume().getVolumeType().isReplicatedType())) { addValidationMessage(EngineMessage.ACTION_TYPE_NOT_SUPPORTED_FOR_VOLUME_TYPE); return false; } if (!(getGlusterVolume().isOnline())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN); return false; } if (((getGlusterVolume().getAsyncTask()) != null) && (((getGlusterVolume().getAsyncTask().getStatus()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.STARTED)) || (((getGlusterVolume().getAsyncTask().getType()) == (org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REMOVE_BRICK)) && ((getGlusterVolume().getAsyncTask().getStatus()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.FINISHED))))) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_HAS_RUNNING_TASKS); return false; } if ((getParameters().getExistingBrick()) == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED); return false; } if (!(isValidVolumeBrick(getParameters().getExistingBrick()))) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_NOT_A_GLUSTER_VOLUME_BRICK); return false; } return true; }
private org.ovirt.engine.core.common.businessentities.Cluster getCluster() { org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); cluster.setId(clusterId); cluster.setVirtService(false); cluster.setGlusterService(true); return cluster; }	private org.ovirt.engine.core.common.businessentities.Cluster getCluster() { org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); cluster.setId(clusterId); cluster.setVirtService(false); cluster.setGlusterService(true); cluster.setCompatibilityVersion(Version.v4_2); return cluster; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.ResetGlusterVolumeBrick, new org.ovirt.engine.core.common.vdscommands.gluster.ResetGlusterVolumeBrickActionVDSParameters(upServer.getId(), getGlusterVolumeName(), getParameters().getExistingBrick().getQualifiedName())); setSucceeded(returnValue.getSucceeded()); if (getSucceeded()) { glusterBrickDao.resetBrick(getParameters().getExistingBrick()); } else { handleVdsError(AuditLogType.GLUSTER_VOLUME_RESET_BRICK_FAILED, returnValue.getVdsError().getMessage()); return; } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.ResetGlusterVolumeBrick, new org.ovirt.engine.core.common.vdscommands.gluster.ResetGlusterVolumeBrickActionVDSParameters(upServer.getId(), getGlusterVolumeName(), getParameters().getExistingBrick().getQualifiedName())); setSucceeded(returnValue.getSucceeded()); if (getSucceeded()) { glusterBrickDao.updateBrickStatus(getParameters().getExistingBrick().getId(), GlusterStatus.UP); } else { handleVdsError(AuditLogType.GLUSTER_VOLUME_RESET_BRICK_FAILED, returnValue.getVdsError().getMessage()); return; } }
@org.junit.Before public void prepareMocks() { doReturn(getVds(VDSStatus.Up)).when(cmd).getUpServer(); doReturn(getDistributedVolume(volumeId1)).when(volumeDao).getById(volumeId1); doReturn(getDistributedVolume(volumeId2)).when(volumeDao).getById(volumeId2); doReturn(getReplicatedVolume(volumeId3, 2)).when(volumeDao).getById(volumeId3); doReturn(getReplicatedVolume(volumeId4, 4)).when(volumeDao).getById(volumeId4); doReturn(getVdsStatic()).when(vdsStaticDao).get(serverId); doReturn(getCluster()).when(cmd).getCluster(); }	@org.junit.Before public void prepareMocks() { doReturn(getVds(VDSStatus.Up)).when(cmd).getUpServer(); doReturn(getVolume(volumeId1, GlusterVolumeType.DISTRIBUTED_REPLICATE, 0)).when(volumeDao).getById(volumeId1); doReturn(getVolume(volumeId2, GlusterVolumeType.DISTRIBUTED_REPLICATE, 0)).when(volumeDao).getById(volumeId2); doReturn(getVolume(volumeId3, GlusterVolumeType.REPLICATE, 2)).when(volumeDao).getById(volumeId3); doReturn(getVolume(volumeId4, GlusterVolumeType.REPLICATE, 4)).when(volumeDao).getById(volumeId4); doReturn(getVdsStatic()).when(vdsStaticDao).get(serverId); doReturn(getCluster()).when(cmd).getCluster(); org.ovirt.engine.core.bll.gluster.ResetGlusterVolumeBrickCommandTest.mcr.mockConfigValue(ConfigValues.ResetBrickSupported, getCluster().getCompatibilityVersion(), java.lang.Boolean.TRUE); }
@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getBroker().glusterVolumeResetBrickStart(org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getExistingBrickDir()); status = org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getBroker().glusterVolumeResetBrickCommitForce(org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getExistingBrickDir()); org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.proceedProxyReturnValue(); }	@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getBroker().glusterVolumeResetBrickStart(org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getExistingBrickDir()); if ((status.status.code) == 0) { status = org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getBroker().glusterVolumeResetBrickCommitForce(org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getExistingBrickDir()); } org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override public void testConnection() { try { getClient().execute(new com.woorea.openstack.base.client.OpenStackRequest(getClient(), com.woorea.openstack.base.client.HttpMethod.GET, "", null, org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.ApiRootResponse.class)); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.error("{} (OpenStack response error code: {})", e.getMessage(), e.getStatus()); org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.debug("Exception", e); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.error("{}: {}", e.getMessage(), ((e.getCause()) == null ? null : e.getCause().getMessage())); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }	@java.lang.Override public void testConnection() { execute(new com.woorea.openstack.base.client.OpenStackRequest(getClient(), com.woorea.openstack.base.client.HttpMethod.GET, "", null, org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.ApiRootResponse.class)); }
@org.junit.Test public void canCopyDiskFails() { org.ovirt.engine.core.common.businessentities.StorageDomain domain = createStorageDomainForDisk(StorageType.ISCSI); domain.setStorageFormat(StorageFormatType.V3); disk.setSize(1000); org.ovirt.engine.core.common.businessentities.storage.DiskImage child = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); child.setSize(1000); child.setStorageIds(java.util.Collections.singletonList(domain.getId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage parent = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); parent.setId(org.ovirt.engine.core.compat.Guid.newGuid()); parent.setSize(500); parent.setStorageIds(java.util.Collections.singletonList(domain.getId())); child.setParentId(parent.getParentId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = new java.util.ArrayList<>(2); diskImages.add(parent); diskImages.add(child); when(validator.getDiskImageDao().getAllSnapshotsForImageGroup(disk.getId())).thenReturn(diskImages); assertThat(validator.childDiskWasExtended(domain), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.CANNOT_MOVE_DISK_SNAPSHOTS)); }	@org.junit.Test public void canCopyDiskFails() { org.ovirt.engine.core.common.businessentities.StorageDomain domain = createStorageDomainForDisk(StorageType.ISCSI); domain.setStorageFormat(StorageFormatType.V3); disk.setSize(1000); org.ovirt.engine.core.common.businessentities.storage.DiskImage child = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); child.setSize(1000); child.setStorageIds(java.util.Collections.singletonList(domain.getId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage parent = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); parent.setId(org.ovirt.engine.core.compat.Guid.newGuid()); parent.setSize(500); parent.setStorageIds(java.util.Collections.singletonList(domain.getId())); child.setParentId(parent.getParentId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = new java.util.ArrayList<>(2); diskImages.add(parent); diskImages.add(child); when(validator.getDiskImageDao().getAllSnapshotsForImageGroup(disk.getId())).thenReturn(diskImages); assertThat(diskImagesValidator.childDiskWasExtended(domain), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.CANNOT_MOVE_DISK_SNAPSHOTS)); }
private boolean diskContainsPreExtendSnapshots() { return validate(createDiskValidator(getImage()).childDiskWasExtended(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain())); }	private boolean diskContainsPreExtendSnapshots() { return validate(createDiskImagesValidator(getImage()).childDiskWasExtended(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain())); }
@java.lang.Override public void addMenuItem(int index, java.lang.String label, java.lang.String href, java.lang.String primaryMenuId, java.lang.String iconCssName) { if (primaryMenuId != null) { addSecondaryMenuItem(index, label, href, primaryMenuId); } else { org.gwtbootstrap3.client.ui.ListGroupItem newMenuItem = new org.gwtbootstrap3.client.ui.ListGroupItem(); org.gwtbootstrap3.client.ui.Anchor menuAnchor = new org.gwtbootstrap3.client.ui.Anchor(hashifyString(href)); if (index < 0) { index = 0; } org.gwtbootstrap3.client.ui.html.Span iconSpan = new org.gwtbootstrap3.client.ui.html.Span(); if (iconCssName != null) { iconSpan.addStyleName(determineCssIconBase(iconCssName)); iconSpan.addStyleName(iconCssName); newMenuItem.addStyleName(Styles.ACTIVE); } menuAnchor.add(iconSpan); org.gwtbootstrap3.client.ui.html.Span labelSpan = new org.gwtbootstrap3.client.ui.html.Span(); labelSpan.setText(label); labelSpan.addStyleName(PatternflyStyles.LIST_GROUP_ITEM_VALUE); menuAnchor.add(labelSpan); newMenuItem.add(menuAnchor); hrefToGroupLabelMap.put(href, newMenuItem); if (index > (menuListGroup.getWidgetCount())) { menuListGroup.add(newMenuItem); primaryMenuIds.add(label); } else { menuListGroup.insert(newMenuItem, index); primaryMenuIds.add(index, label); } } }	@java.lang.Override public int addMenuItemPlace(int index, java.lang.String label, java.lang.String href, java.lang.Integer primaryMenuIndex, java.lang.String iconCssName) { if (primaryMenuIndex != null) { return addSecondaryMenuItemPlace(index, label, href, primaryMenuIndex); } else { return addPrimaryMenuItemPlace(index, label, href, iconCssName); } }
public java.util.List<java.lang.String> getPrimaryMenuIds() { return primaryMenuIds; }	public int addPrimaryMenuItemContainer(int index, java.lang.String label, java.lang.String iconCssName) { org.gwtbootstrap3.client.ui.ListGroupItem newMenuItem = new org.gwtbootstrap3.client.ui.ListGroupItem(); org.gwtbootstrap3.client.ui.Anchor menuAnchor = new org.gwtbootstrap3.client.ui.Anchor(org.ovirt.engine.ui.webadmin.section.main.view.MenuView.JAVASCRIPT); if (index < 0) { index = 0; } org.gwtbootstrap3.client.ui.html.Span iconSpan = new org.gwtbootstrap3.client.ui.html.Span(); if (iconCssName != null) { iconSpan.addStyleName(determineCssIconBase(iconCssName)); iconSpan.addStyleName(iconCssName); newMenuItem.addStyleName(Styles.ACTIVE); } menuAnchor.add(iconSpan); org.gwtbootstrap3.client.ui.html.Span labelSpan = new org.gwtbootstrap3.client.ui.html.Span(); labelSpan.setText(label); labelSpan.addStyleName(PatternflyStyles.LIST_GROUP_ITEM_VALUE); menuAnchor.add(labelSpan); newMenuItem.add(menuAnchor); createSecondaryMenuHeader(newMenuItem); newMenuItem.addStyleName(PatternflyStyles.SECONDARY_NAV_ITEM); if (index > (menuListGroup.getWidgetCount())) { menuListGroup.add(newMenuItem); } else { menuListGroup.insert(newMenuItem, index); } return menuListGroup.getWidgetIndex(newMenuItem); }
private void addSecondaryMenuItem(int index, java.lang.String label, java.lang.String href, java.lang.String primaryMenuId) { int primaryMenuIndex = primaryMenuIds.indexOf(primaryMenuId); if ((primaryMenuIndex > (-1)) && (primaryMenuIndex < (menuListGroup.getWidgetCount()))) { org.gwtbootstrap3.client.ui.ListGroupItem primaryMenuItem = ((org.gwtbootstrap3.client.ui.ListGroupItem) (menuListGroup.getWidget(primaryMenuIndex))); com.google.gwt.user.client.ui.FlowPanel secondaryMenuFlowPanel = null; if ((primaryMenuItem.getWidgetCount()) > 2) { com.google.gwt.user.client.ui.IsWidget widget = primaryMenuItem.getWidget(2); if (widget instanceof com.google.gwt.user.client.ui.FlowPanel) { secondaryMenuFlowPanel = ((com.google.gwt.user.client.ui.FlowPanel) (widget)); } } else { secondaryMenuFlowPanel = createSecondaryMenuHeader(primaryMenuItem); primaryMenuItem.addStyleName(PatternflyStyles.SECONDARY_NAV_ITEM); for (int i = 0; i < (primaryMenuItem.getWidgetCount()); i++) { com.google.gwt.user.client.ui.IsWidget widget = primaryMenuItem.getWidget(i); if ((widget.asWidget()) instanceof org.gwtbootstrap3.client.ui.Anchor) { org.gwtbootstrap3.client.ui.Anchor labelAnchor = ((org.gwtbootstrap3.client.ui.Anchor) (widget.asWidget())); labelAnchor.setHref(org.ovirt.engine.ui.webadmin.section.main.view.MenuView.JAVASCRIPT); } } } if (secondaryMenuFlowPanel != null) { if ((index >= 0) && (index < (secondaryMenuFlowPanel.getWidgetCount()))) { secondaryMenuFlowPanel.insert(createSecondaryMenuItem(label, href), (index + 1)); } else { secondaryMenuFlowPanel.add(createSecondaryMenuItem(label, href)); } } primaryMenuItem.add(secondaryMenuFlowPanel); } }	private int addSecondaryMenuItemPlace(int index, java.lang.String label, java.lang.String href, int primaryMenuIndex) { int result = -1; org.gwtbootstrap3.client.ui.ListGroupItem primaryMenuItem = ((org.gwtbootstrap3.client.ui.ListGroupItem) (menuListGroup.getWidget(primaryMenuIndex))); com.google.gwt.user.client.ui.FlowPanel secondaryMenuFlowPanel = null; com.google.gwt.user.client.ui.IsWidget widget = primaryMenuItem.getWidget(2); if (widget instanceof com.google.gwt.user.client.ui.FlowPanel) { secondaryMenuFlowPanel = ((com.google.gwt.user.client.ui.FlowPanel) (widget)); } if (secondaryMenuFlowPanel != null) { if ((index >= 0) && (index < (secondaryMenuFlowPanel.getWidgetCount()))) { secondaryMenuFlowPanel.insert(createSecondaryMenuItem(label, href), (index + 1)); result = index; } else { secondaryMenuFlowPanel.add(createSecondaryMenuItem(label, href)); result = (secondaryMenuFlowPanel.getWidgetCount()) - 1; } } primaryMenuItem.add(secondaryMenuFlowPanel); return result; }
void addMenuItem(int index, java.lang.String label, java.lang.String href, java.lang.String primaryMenuId, java.lang.String iconCssName);	int addMenuItemPlace(int priority, java.lang.String label, java.lang.String href, java.lang.Integer primaryMenuIndex, java.lang.String iconCssName);
public void addContentView(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, java.lang.String primaryMenuId, java.lang.String iconCssName, int priority, boolean defaultPlace) { menuPresenterWidget.addMenuItem(priority, label, historyToken, primaryMenuId, iconCssName); dynamicUrlContentProxyFactory.create(historyToken, contentUrl); placeManager.setDefaultPlace(historyToken); }	public void addContentView(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, java.lang.String primaryMenuId, java.lang.String iconCssName, int priority, boolean defaultPlace) { menuPresenterWidget.addMenuItemPlace(priority, label, historyToken, primaryMenuId, iconCssName); dynamicUrlContentProxyFactory.create(historyToken, contentUrl); placeManager.setDefaultPlace(historyToken); }
java.util.List<java.lang.String> getPrimaryMenuIds();	int addPrimaryMenuItemContainer(int index, java.lang.String label, java.lang.String iconCssName);
public void addSecondaryMenu(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, java.lang.String primaryMenuId, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { addContentView(label, historyToken, contentUrl, primaryMenuId, options.getIcon(), options.getPriority().intValue(), options.getDefaultPlace().booleanValue()); }	public void addSecondaryMenu(java.lang.String primaryMenuId, java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { addContentView(label, historyToken, contentUrl, primaryMenuId, options.getIcon(), options.getPriority().intValue(), options.getDefaultPlace().booleanValue()); }
public void addPrimaryMenu(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { addContentView(label, historyToken, contentUrl, null, options.getIcon(), options.getPriority().intValue(), options.getDefaultPlace().booleanValue()); }	public void addPrimaryMenuPlace(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { addContentView(label, historyToken, contentUrl, null, options.getIcon(), options.getPriority().intValue(), options.getDefaultPlace().booleanValue()); }
public java.lang.String[] listPrimaryMenuIds() { java.util.List<java.lang.String> ids = menuPresenterWidget.getPrimaryMenuIds(); return ids.toArray(new java.lang.String[ids.size()]); }	public void addPrimaryMenuContainer(java.lang.String label, java.lang.String primaryMenuId, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { menuPresenterWidget.addPrimaryMenuItemContainer(label, primaryMenuId, options.getPriority().intValue(), options.getIcon()); }
public java.util.List<java.lang.String> getPrimaryMenuIds() { return getView().getPrimaryMenuIds(); }	public void addPrimaryMenuItemContainer(java.lang.String label, java.lang.String primaryMenuId, int index, java.lang.String iconCssName) { if (!(menuContainers.contains(primaryMenuId))) { int containerIndex = getView().addPrimaryMenuItemContainer(index, label, iconCssName); if ((containerIndex > (-1)) && (containerIndex < (menuContainers.size()))) { menuContainers.add(containerIndex, primaryMenuId); } else { menuContainers.add(primaryMenuId); } } }
public void addMenuItem(int index, java.lang.String label, java.lang.String historyToken, java.lang.String primaryMenuId, java.lang.String iconCssName) { getView().addMenuItem(index, label, historyToken, primaryMenuId, iconCssName); }	public void addMenuItemPlace(int priority, java.lang.String label, java.lang.String historyToken, java.lang.String primaryMenuId, java.lang.String iconCssName) { if (primaryMenuId != null) { int containerIndex = menuContainers.indexOf(primaryMenuId); if (containerIndex > (-1)) { getView().addMenuItemPlace(priority, label, historyToken, containerIndex, iconCssName); } } else { int newMainPlaceIndex = getView().addMenuItemPlace(priority, label, historyToken, null, iconCssName); menuContainers.add(newMainPlaceIndex, null); } }
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { super.update(entity); removeNameServersByDnsResolverConfigurationId(entity.getId()); saveNameServersByDnsResolverConfigurationId(entity.getId(), entity.getNameServers()); return null; }); }	@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity) { super.update(entity); removeNameServersByDnsResolverConfigurationId(entity.getId()); saveNameServersByDnsResolverConfigurationId(entity.getId(), entity.getNameServers()); }
@java.lang.Override public void remove(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { removeNameServersByDnsResolverConfigurationId(id); super.remove(id); return null; }); }	@java.lang.Override public void remove(org.ovirt.engine.core.compat.Guid id) { removeNameServersByDnsResolverConfigurationId(id); super.remove(id); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { entity.setId(org.ovirt.engine.core.compat.Guid.newGuid()); super.save(entity); saveNameServersByDnsResolverConfigurationId(entity.getId(), entity.getNameServers()); return null; }); }	@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity) { entity.setId(org.ovirt.engine.core.compat.Guid.newGuid()); super.save(entity); saveNameServersByDnsResolverConfigurationId(entity.getId(), entity.getNameServers()); }
@java.lang.Override protected void writeFileForLunDisk(org.ovirt.engine.core.common.businessentities.storage.LunDisk lun) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "id", lun.getId().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "href", org.ovirt.engine.core.utils.ovf.OvfParser.createLunFile(lun)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "disk_storage_type", lun.getDiskStorageType().name()); }	@java.lang.Override protected void writeFileForLunDisk(org.ovirt.engine.core.common.businessentities.storage.LunDisk lun) { _writer.writeAttributeString(getOvfUri(), "id", lun.getId().toString()); _writer.writeAttributeString(getOvfUri(), "href", org.ovirt.engine.core.utils.ovf.OvfParser.createLunFile(lun)); _writer.writeAttributeString(getOvfUri(), "disk_storage_type", lun.getDiskStorageType().name()); }
@java.lang.Override protected void writeHeader() { super.writeHeader(); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "version", org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdcVersion)); }	@java.lang.Override protected void writeHeader() { super.writeHeader(); _writer.writeAttributeString(getOvfUri(), "version", org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdcVersion)); }
protected void writeHeader() { _instanceId = 0; _writer.writeStartDocument(false); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_URI); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.VSSD_PREFIX, org.ovirt.engine.core.utils.ovf.VSSD_URI); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.XSI_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); writeHeaderWithEnvelope(); }	public abstract java.lang.String getOvfUri();
protected void writeHeaderWithEnvelope() { _writer.setPrefix(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI); _writer.writeStartElement(org.ovirt.engine.core.utils.ovf.OVF_URI, "Envelope"); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.VSSD_PREFIX, org.ovirt.engine.core.utils.ovf.VSSD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XSI_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); }	protected void writeHeader() { _instanceId = 0; _writer.writeStartDocument(false); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, getOvfUri()); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_URI); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.VSSD_PREFIX, org.ovirt.engine.core.utils.ovf.VSSD_URI); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.XSI_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); _writer.writeStartElement(getOvfUri(), "Envelope"); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, getOvfUri()); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.VSSD_PREFIX, org.ovirt.engine.core.utils.ovf.VSSD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XSI_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); }
@java.lang.Override protected void startVirtualSystem() { _writer.writeStartElement("Content"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "id", "out"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", ((OVF_PREFIX) + ":VirtualSystem_Type")); }	@java.lang.Override protected void startVirtualSystem() { _writer.writeStartElement("Content"); _writer.writeAttributeString(getOvfUri(), "id", "out"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", ((OVF_PREFIX) + ":VirtualSystem_Type")); }
@java.lang.Override protected void writeFile(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "href", org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(image)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "id", image.getImageId().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "size", java.lang.String.valueOf(image.getActualSizeInBytes())); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "description", org.apache.commons.lang.StringUtils.defaultString(image.getDescription())); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "disk_storage_type", image.getDiskStorageType().name()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "cinder_volume_type", org.apache.commons.lang.StringUtils.defaultString(image.getCinderVolumeType())); }	@java.lang.Override protected void writeFile(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { _writer.writeAttributeString(getOvfUri(), "href", org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(image)); _writer.writeAttributeString(getOvfUri(), "id", image.getImageId().toString()); _writer.writeAttributeString(getOvfUri(), "size", java.lang.String.valueOf(image.getActualSizeInBytes())); _writer.writeAttributeString(getOvfUri(), "description", org.apache.commons.lang.StringUtils.defaultString(image.getDescription())); _writer.writeAttributeString(getOvfUri(), "disk_storage_type", image.getDiskStorageType().name()); _writer.writeAttributeString(getOvfUri(), "cinder_volume_type", org.apache.commons.lang.StringUtils.defaultString(image.getCinderVolumeType())); }
@java.lang.Override protected void writeOS() { _writer.writeStartElement("Section"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "id", vmBase.getId().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "required", "false"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", ((OVF_PREFIX) + ":OperatingSystemSection_Type")); _writer.writeElement("Info", "Guest Operating System"); _writer.writeElement("Description", osRepository.getUniqueOsNames().get(vmBase.getOsId())); _writer.writeEndElement(); }	@java.lang.Override protected void writeOS() { _writer.writeStartElement("Section"); _writer.writeAttributeString(getOvfUri(), "id", vmBase.getId().toString()); _writer.writeAttributeString(getOvfUri(), "required", "false"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", ((OVF_PREFIX) + ":OperatingSystemSection_Type")); _writer.writeElement("Info", "Guest Operating System"); _writer.writeElement("Description", osRepository.getUniqueOsNames().get(vmBase.getOsId())); _writer.writeEndElement(); }
@java.lang.Override protected void writeHeaderWithEnvelope() { _writer.setPrefix(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI); _writer.writeStartElement(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "Envelope"); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.VSSD_PREFIX, org.ovirt.engine.core.utils.ovf.VSSD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XSI_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); }	@java.lang.Override public java.lang.String getOvfUri() { return (OVF_URI) + "/"; }
private void writeDiskParentRef(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { if (image.getParentId().equals(Guid.Empty)) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "parentRef", ""); } else { int i = 0; while (_images.get(i).getImageId().equals(image.getParentId())) { i++; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> res = _images.subList(i, ((_images.size()) - 1)); if ((res.size()) > 0) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "parentRef", org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(res.get(0))); } else { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "parentRef", ""); } } }	private void writeDiskParentRef(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { if (image.getParentId().equals(Guid.Empty)) { _writer.writeAttributeString(getOvfUri(), "parentRef", ""); } else { int i = 0; while (_images.get(i).getImageId().equals(image.getParentId())) { i++; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> res = _images.subList(i, ((_images.size()) - 1)); if ((res.size()) > 0) { _writer.writeAttributeString(getOvfUri(), "parentRef", org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(res.get(0))); } else { _writer.writeAttributeString(getOvfUri(), "parentRef", ""); } } }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { if (isCopyOperation()) { if (!(Guid.Empty.equals(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getVmTemplateId()))) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getVmTemplateId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.TEMPLATE, getDiskIsBeingMigratedMessage())); } } else { if ((getImage().getContentType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskContentType.ISO)) { java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = vmStaticDao.getAllIdsWithSpecificIsoAttached(getImage().getId()); if (!(vmIds.isEmpty())) { return vmIds.stream().collect(java.util.stream.Collectors.toMap(( p) -> p.toString(), ( p) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, getDiskIsBeingMigratedMessage()))); } } else { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> vmsForDisk = getVmsWithVmDeviceInfoForDiskId(); if (!(vmsForDisk.isEmpty())) { return vmsForDisk.stream().collect(java.util.stream.Collectors.toMap(( p) -> p.getFirst().getId().toString(), ( p) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, getDiskIsBeingMigratedMessage()))); } } } return null; }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { if (isCopyOperation()) { if (!(Guid.Empty.equals(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getVmTemplateId()))) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getVmTemplateId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.TEMPLATE, getDiskIsBeingMigratedMessage())); } } else { if ((getImage().getContentType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskContentType.ISO)) { java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = vmDynamicDao.getAllIdsWithSpecificIsoAttached(getImage().getId()); if (!(vmIds.isEmpty())) { return vmIds.stream().collect(java.util.stream.Collectors.toMap(( p) -> p.toString(), ( p) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, getDiskIsBeingMigratedMessage()))); } } else { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> vmsForDisk = getVmsWithVmDeviceInfoForDiskId(); if (!(vmsForDisk.isEmpty())) { return vmsForDisk.stream().collect(java.util.stream.Collectors.toMap(( p) -> p.getFirst().getId().toString(), ( p) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, getDiskIsBeingMigratedMessage()))); } } } return null; }
public org.ovirt.engine.core.bll.ValidationResult isIsoDiskAttachedToAnyNonDownVm() { java.util.List<java.lang.String> vmNames = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStaticDao().getAllRunningNamesWithSpecificIsoAttached(disk.getId()); if (!(vmNames.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ERROR_ISO_DISK_ATTACHED_TO_RUNNING_VMS, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.storage.DiskValidator.DISK_NAME_VARIABLE, disk.getDiskAlias()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.storage.DiskValidator.VM_LIST, vmNames)); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult isIsoDiskAttachedToAnyNonDownVm() { java.util.List<java.lang.String> vmNames = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().getAllRunningNamesWithSpecificIsoAttached(disk.getId()); if (!(vmNames.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ERROR_ISO_DISK_ATTACHED_TO_RUNNING_VMS, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.storage.DiskValidator.DISK_NAME_VARIABLE, disk.getDiskAlias()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.storage.DiskValidator.VM_LIST, vmNames)); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.aaa.GetAnyDbUserByUserIdQuery.getQueryReturnValue().setReturnValue(dbUserDao.getAnyUserById(org.ovirt.engine.core.bll.aaa.GetAnyDbUserByUserIdQuery.getParameters().getId())); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.aaa.GetAnyDbUserByUserIdQuery.getQueryReturnValue().setReturnValue(dbUserDao.get(org.ovirt.engine.core.bll.aaa.GetAnyDbUserByUserIdQuery.getParameters().getId(), false)); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.queries.QueryReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().runInternalQuery(QueryType.GetAuthzGroupsByUserId, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters()); java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> authzGroups = returnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> groupsIds = authzGroups.stream().map(( g) -> dbGroupDao.getByExternalId(g.getAuthz(), g.getId())).filter(java.util.Objects::nonNull).map(( g) -> g.getId()).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getQueryReturnValue().setReturnValue(permissionDao.getAllForAdElementAndGroups(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId(), org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getUserID(), groupsIds, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().isFiltered())); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.queries.QueryReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().runInternalQuery(QueryType.GetAuthzGroupsByUserId, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters()); java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> authzGroups = returnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> groupsIds = authzGroups.stream().map(( g) -> dbGroupDao.getByExternalId(g.getAuthz(), g.getId())).filter(java.util.Objects::nonNull).map(( g) -> g.getId()).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getQueryReturnValue().setReturnValue(permissionDao.getAllForAdElementAndGroups(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId(), groupsIds, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().isFiltered())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid currentUserId, java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered) { int appMode = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ApplicationMode); org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("ad_element_id", id).addValue("user_id", currentUserId).addValue("user_groups", createArrayOf("uuid", groupIds.toArray())).addValue("is_filtered", isFiltered).addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetPermissionsByAdElementIdAndGroupIds", org.ovirt.engine.core.dao.PermissionDaoImpl.permissionRowMapper, parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id, java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered) { int appMode = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ApplicationMode); org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("ad_element_id", id).addValue("user_groups", createArrayOf("uuid", groupIds.toArray())).addValue("is_filtered", isFiltered).addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetPermissionsByAdElementIdAndGroupIds", org.ovirt.engine.core.dao.PermissionDaoImpl.permissionRowMapper, parameterSource); }
java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid currentUserId, java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered);	java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id, java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered);
@java.lang.Override public void deallocate(org.ovirt.engine.core.common.businessentities.network.VmNic nic) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic); if (port != null) { getClient().ports().delete(port.getId()).execute(); } } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e, true); } }	@java.lang.Override public void deallocate(org.ovirt.engine.core.common.businessentities.network.VmNic nic) { com.woorea.openstack.quantum.model.Port port = locatePort(nic); if (port != null) { execute(getClient().ports().delete(port.getId())); } }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> allocate(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.VDS host, boolean ignoreSecurityGroupsOnUpdate) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic); java.util.List<java.lang.String> securityGroups = getSecurityGroups(vnicProfile); java.lang.String hostId = getHostId(host); if (port == null) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(network.getProvidedBy()); com.woorea.openstack.quantum.model.Port portForCreate = createNewPortForAllocate(nic, securityGroups, hostId, externalNetwork); port = getClient().ports().create(portForCreate).execute(); } else { boolean securityGroupsChanged = (!ignoreSecurityGroupsOnUpdate) && (securityGroupsChanged(port.getSecurityGroups(), securityGroups)); boolean hostChanged = hostChanged(port, hostId); updatePort(port, securityGroupsChanged, hostChanged, securityGroups, hostId, nic); } java.util.Map<java.lang.String, java.lang.String> runtimeProperties = createPortAllocationRuntimeProperties(port); return runtimeProperties; } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e, true); } }	@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> allocate(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.VDS host, boolean ignoreSecurityGroupsOnUpdate) { com.woorea.openstack.quantum.model.Port port = locatePort(nic); java.util.List<java.lang.String> securityGroups = getSecurityGroups(vnicProfile); java.lang.String hostId = getHostId(host); if (port == null) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(network.getProvidedBy()); com.woorea.openstack.quantum.model.Port portForCreate = createNewPortForAllocate(nic, securityGroups, hostId, externalNetwork); port = execute(getClient().ports().create(portForCreate)); } else { boolean securityGroupsChanged = (!ignoreSecurityGroupsOnUpdate) && (securityGroupsChanged(port.getSecurityGroups(), securityGroups)); boolean hostChanged = hostChanged(port, hostId); updatePort(port, securityGroupsChanged, hostChanged, securityGroups, hostId, nic); } java.util.Map<java.lang.String, java.lang.String> runtimeProperties = createPortAllocationRuntimeProperties(port); return runtimeProperties; }
@java.lang.Override protected void executeCommand() { if ((getParameters().getRefresh()) || (getSessionDataContainer().isSsoOvirtAppApiScope(getParameters().getSessionId()))) { getSessionDataContainer().updateSessionLastActiveTime(getParameters().getSessionId()); } if (validatePermissions()) { if (validateInputs()) { long start = java.lang.System.currentTimeMillis(); try { returnValue.setSucceeded(true); executeQueryCommand(); } catch (java.lang.RuntimeException ex) { returnValue.setSucceeded(false); java.lang.Throwable th = (ex instanceof org.ovirt.engine.core.common.errors.EngineException) ? ex : ex.getCause(); if (th instanceof org.ovirt.engine.core.common.errors.EngineException) { org.ovirt.engine.core.common.errors.EngineException vdcExc = ((org.ovirt.engine.core.common.errors.EngineException) (th)); if (((vdcExc.getErrorCode()) != null) && (!(vdcExc.isUseRootCause()))) { returnValue.setExceptionString(vdcExc.getErrorCode().toString()); } else { returnValue.setExceptionString((vdcExc.isUseRootCause() ? org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(vdcExc) : vdcExc.getMessage())); } log.error("Query '{}' failed: {}", getClass().getSimpleName(), (vdcExc.isUseRootCause() ? org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(vdcExc) : vdcExc.getMessage())); log.error("Exception", vdcExc); } else { returnValue.setExceptionString(ex.getMessage()); log.error("Query '{}' failed: {}", getClass().getSimpleName(), ex.getMessage()); log.error("Exception", ex); } } finally { log.debug("Query {} took {} ms", org.ovirt.engine.core.bll.QueriesCommandBase.getCommandName(), ((java.lang.System.currentTimeMillis()) - start)); } } else { log.error("Query execution failed due to invalid inputs: {}", returnValue.getExceptionString()); } } else { java.lang.String errMessage = "Query execution failed due to insufficient permissions."; log.error(errMessage); returnValue.setExceptionString(errMessage); } }	@java.lang.Override protected void executeCommand() { if ((getParameters().getRefresh()) || (getSessionDataContainer().isSsoOvirtAppApiScope(getParameters().getSessionId()))) { getSessionDataContainer().updateSessionLastActiveTime(getParameters().getSessionId()); } if (validatePermissions()) { if (validateInputs()) { long start = java.lang.System.currentTimeMillis(); try { returnValue.setSucceeded(true); executeQueryCommand(); } catch (java.lang.RuntimeException ex) { returnValue.setSucceeded(false); java.lang.Throwable th = (ex instanceof org.ovirt.engine.core.common.errors.EngineException) ? ex : ex.getCause(); if (th instanceof org.ovirt.engine.core.common.errors.EngineException) { org.ovirt.engine.core.common.errors.EngineException vdcExc = ((org.ovirt.engine.core.common.errors.EngineException) (th)); if (((vdcExc.getErrorCode()) != null) && (!(vdcExc.isUseRootCause()))) { returnValue.setExceptionString(vdcExc.getErrorCode().toString()); } else { returnValue.setExceptionString(vdcExc.getMessage()); } log.error("Query '{}' failed: {}", getClass().getSimpleName(), vdcExc.getMessage()); log.error("Exception", vdcExc); } else { returnValue.setExceptionString(ex.getMessage()); log.error("Query '{}' failed: {}", getClass().getSimpleName(), ex.getMessage()); log.error("Exception", ex); } } finally { log.debug("Query {} took {} ms", org.ovirt.engine.core.bll.QueriesCommandBase.getCommandName(), ((java.lang.System.currentTimeMillis()) - start)); } } else { log.error("Query execution failed due to invalid inputs: {}", returnValue.getExceptionString()); } } else { java.lang.String errMessage = "Query execution failed due to insufficient permissions."; log.error(errMessage); returnValue.setExceptionString(errMessage); } }
@java.lang.Override public void addSubnet(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet subnet) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(subnet.getExternalNetwork()); com.woorea.openstack.quantum.model.Subnet subnetForCreate = createNewSubnetEntity(subnet, externalNetwork); try { getClient().subnets().create(subnetForCreate).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e, true); } }	@java.lang.Override public void addSubnet(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet subnet) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(subnet.getExternalNetwork()); com.woorea.openstack.quantum.model.Subnet subnetForCreate = createNewSubnetEntity(subnet, externalNetwork); execute(getClient().subnets().create(subnetForCreate)); }
@java.lang.Override public void remove(java.lang.String id) { try { getClient().networks().delete(id).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e, true); } }	@java.lang.Override public void remove(java.lang.String id) { execute(getClient().networks().delete(id)); }
@java.lang.Override public void removeSubnet(java.lang.String id) { try { getClient().subnets().delete(id).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e, true); } }	@java.lang.Override public void removeSubnet(java.lang.String id) { execute(getClient().subnets().delete(id)); }
@java.lang.Override public java.lang.String add(org.ovirt.engine.core.common.businessentities.network.Network network) { com.woorea.openstack.quantum.model.Network networkForCreate = createNewNetworkEntity(network); try { com.woorea.openstack.quantum.model.Network createdNetwork = getClient().networks().create(networkForCreate).execute(); return createdNetwork.getId(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e, true); } }	@java.lang.Override public java.lang.String add(org.ovirt.engine.core.common.businessentities.network.Network network) { com.woorea.openstack.quantum.model.Network networkForCreate = createNewNetworkEntity(network); com.woorea.openstack.quantum.model.Network createdNetwork = execute(getClient().networks().create(networkForCreate)); return createdNetwork.getId(); }
@java.lang.Override public void testConnection() { try { getClient().execute(new com.woorea.openstack.base.client.OpenStackRequest(getClient(), com.woorea.openstack.base.client.HttpMethod.GET, "", null, org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.ApiRootResponse.class)); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.error("{} (OpenStack response error code: {})", e.getMessage(), e.getStatus()); org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.debug("Exception", e); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e, true); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e, true); } }	@java.lang.Override public void testConnection() { execute(new com.woorea.openstack.base.client.OpenStackRequest(getClient(), com.woorea.openstack.base.client.HttpMethod.GET, "", null, org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.ApiRootResponse.class)); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAll() { try { com.woorea.openstack.quantum.model.Networks networks = getClient().networks().list().execute(); return map(networks.getList()); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e, true); } }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAll() { com.woorea.openstack.quantum.model.Networks networks = execute(getClient().networks().list()); return map(networks.getList()); }
private void removeMemoryFromActiveSnapshot() { if (!(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().containsMemory())) { return; } snapshotDao.removeMemoryFromActiveSnapshot(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); if ((snapshotDao.getNumOfSnapshotsByDisks(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot())) == 0) { removeMemoryDisks(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot()); } }	private void removeMemoryFromActiveSnapshot() { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot(); if (!(activeSnapshot.containsMemory())) { return; } snapshotDao.removeMemoryFromActiveSnapshot(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); if ((snapshotDao.getNumOfSnapshotsByDisks(activeSnapshot)) == 0) { removeMemoryDisks(activeSnapshot); } }
private java.util.Collection<org.ovirt.engine.core.common.businessentities.Snapshot> getSnapshotsToBeExportedWithMemory() { if (org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getParameters().getCopyCollapse()) { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = snapshotDao.get(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVmId(), SnapshotType.ACTIVE); return activeSnapshot.containsMemory() ? java.util.Collections.singleton(activeSnapshot) : java.util.Collections.emptyList(); } else { return snapshotDao.getAll(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVmId()).stream().filter(( s) -> s.containsMemory()).collect(java.util.stream.Collectors.toList()); } }	private java.util.Collection<org.ovirt.engine.core.common.businessentities.Snapshot> getSnapshotsToBeExportedWithMemory() { if (org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getParameters().getCopyCollapse()) { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = snapshotDao.get(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVmId(), SnapshotType.ACTIVE); return activeSnapshot.containsMemory() ? java.util.Collections.singleton(activeSnapshot) : java.util.Collections.emptyList(); } else { return snapshotDao.getAll(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVmId()).stream().filter(Snapshot::containsMemory).collect(java.util.stream.Collectors.toList()); } }
private void copyAllMemoryImages(org.ovirt.engine.core.compat.Guid containerID) { for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshotsWithMemory) { org.ovirt.engine.core.common.businessentities.storage.DiskImage dumpImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(snapshot.getMetadataDiskId()))); org.ovirt.engine.core.common.action.ActionReturnValue vdcRetValue = runInternalActionWithTasksContext(ActionType.CopyImageGroup, buildMoveOrCopyImageGroupParametersForMemoryDumpImage(containerID, dumpImage)); if (!(vdcRetValue.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(vdcRetValue.getFault().getError(), "Failed during ExportVmCommand"); } org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getTaskIdList().addAll(vdcRetValue.getVdsmTaskIdList()); org.ovirt.engine.core.common.businessentities.storage.DiskImage confImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(snapshot.getMetadataDiskId()))); vdcRetValue = runInternalActionWithTasksContext(ActionType.CopyImageGroup, buildMoveOrCopyImageGroupParameters(containerID, confImage)); if (!(vdcRetValue.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(vdcRetValue.getFault().getError(), "Failed during ExportVmCommand"); } org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getTaskIdList().addAll(vdcRetValue.getVdsmTaskIdList()); } }	private void copyAllMemoryImages(org.ovirt.engine.core.compat.Guid containerID) { for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshotsWithMemory) { org.ovirt.engine.core.common.businessentities.storage.DiskImage dumpImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(snapshot.getMemoryDiskId()))); org.ovirt.engine.core.common.action.ActionReturnValue vdcRetValue = runInternalActionWithTasksContext(ActionType.CopyImageGroup, buildMoveOrCopyImageGroupParametersForMemoryDumpImage(containerID, dumpImage)); if (!(vdcRetValue.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(vdcRetValue.getFault().getError(), "Failed during ExportVmCommand"); } org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getTaskIdList().addAll(vdcRetValue.getVdsmTaskIdList()); org.ovirt.engine.core.common.businessentities.storage.DiskImage confImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(snapshot.getMetadataDiskId()))); vdcRetValue = runInternalActionWithTasksContext(ActionType.CopyImageGroup, buildMoveOrCopyImageGroupParameters(containerID, confImage)); if (!(vdcRetValue.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(vdcRetValue.getFault().getError(), "Failed during ExportVmCommand"); } org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getTaskIdList().addAll(vdcRetValue.getVdsmTaskIdList()); } }
private void restoreConfiguration(org.ovirt.engine.core.common.businessentities.Snapshot targetSnapshot) { removedSnapshot = snapshotDao.get(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVmId(), SnapshotType.ACTIVE); snapshotsToRemove.add(removedSnapshot.getId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().removeAllIllegalDisks(removedSnapshot.getId(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVmId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVm(), targetSnapshot, targetSnapshot.getId(), null, org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCompensationContext(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCurrentUser(), new org.ovirt.engine.core.bll.network.VmInterfaceManager(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getMacPool()), targetSnapshot.containsMemory()); snapshotDao.remove(targetSnapshot.getId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().addActiveSnapshot(targetSnapshot.getId(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVm(), SnapshotStatus.LOCKED, null, null, org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCompensationContext()); }	private void restoreConfiguration(org.ovirt.engine.core.common.businessentities.Snapshot targetSnapshot) { removedSnapshot = snapshotDao.get(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVmId(), SnapshotType.ACTIVE); snapshotsToRemove.add(removedSnapshot.getId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().removeAllIllegalDisks(removedSnapshot.getId(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVmId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVm(), targetSnapshot, targetSnapshot.getId(), null, org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCompensationContext(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCurrentUser(), new org.ovirt.engine.core.bll.network.VmInterfaceManager(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getMacPool()), targetSnapshot.containsMemory()); snapshotDao.remove(targetSnapshot.getId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().addActiveSnapshot(targetSnapshot.getId(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVm(), SnapshotStatus.LOCKED, targetSnapshot.getMemoryDiskId(), targetSnapshot.getMetadataDiskId(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCompensationContext()); }
@java.lang.Override public int getNumOfSnapshotsByDisks(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("memory_disk_ids", java.util.Arrays.asList(snapshot.getMemoryDiskId(), snapshot.getMetadataDiskId())); return getCallsHandler().executeRead("GetNumOfSnapshotsByMemoryVolume", org.springframework.jdbc.core.SingleColumnRowMapper.newInstance(java.lang.Integer.class), parameterSource); }	@java.lang.Override public int getNumOfSnapshotsByDisks(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("memory_disk_ids", createArrayOfUUIDs(java.util.Arrays.asList(snapshot.getMemoryDiskId(), snapshot.getMetadataDiskId()))); return getCallsHandler().executeRead("GetNumOfSnapshotsByMemoryVolume", org.springframework.jdbc.core.SingleColumnRowMapper.newInstance(java.lang.Integer.class), parameterSource); }
@java.lang.Override protected void executeCommand() { if (isMemoryRemovable()) { org.ovirt.engine.core.common.action.RemoveDiskParameters removeMemoryDumpDiskParameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters(org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.getParameters().getSnapshot().getMemoryDiskId()); removeMemoryDumpDiskParameters.setShouldBeLogged(false); runInternalAction(ActionType.RemoveDisk, removeMemoryDumpDiskParameters); org.ovirt.engine.core.common.action.RemoveDiskParameters removeMemoryMetadataDiskParameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters(org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.getParameters().getSnapshot().getMetadataDiskId()); removeMemoryMetadataDiskParameters.setShouldBeLogged(false); runInternalAction(ActionType.RemoveDisk, removeMemoryMetadataDiskParameters); } org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.getParameters().getSnapshot().containsMemory()) && (isMemoryRemovable())) { org.ovirt.engine.core.common.action.RemoveDiskParameters removeMemoryDumpDiskParameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters(org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.getParameters().getSnapshot().getMemoryDiskId()); removeMemoryDumpDiskParameters.setShouldBeLogged(false); runInternalAction(ActionType.RemoveDisk, removeMemoryDumpDiskParameters); org.ovirt.engine.core.common.action.RemoveDiskParameters removeMemoryMetadataDiskParameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters(org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.getParameters().getSnapshot().getMetadataDiskId()); removeMemoryMetadataDiskParameters.setShouldBeLogged(false); runInternalAction(ActionType.RemoveDisk, removeMemoryMetadataDiskParameters); } org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.setSucceeded(true); }
private void removeDiskImages() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getVm().getDiskMap().values(), org.ovirt.engine.core.bll.exportimport.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.exportimport.ONLY_ACTIVE); boolean shouldWipe = false; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images) { image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); image.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); shouldWipe |= image.isWipeAfterDelete(); } java.util.List<org.ovirt.engine.core.compat.Guid> allMemoryDisks = org.ovirt.engine.core.bll.memory.MemoryUtils.getMemoryDiskIdsFromSnapshots(getVm().getSnapshots()); for (org.ovirt.engine.core.compat.Guid memoryDiskId : allMemoryDisks) { org.ovirt.engine.core.common.businessentities.storage.DiskImage metadataDisk = createMemoryDisk(memoryDiskId, shouldWipe); images.add(metadataDisk); } removeVmImages(images); }	private void removeDiskImages() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getVm().getDiskMap().values(), org.ovirt.engine.core.bll.exportimport.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.exportimport.ONLY_ACTIVE); boolean shouldWipe = false; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images) { image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); image.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); shouldWipe |= image.isWipeAfterDelete(); } java.util.Set<org.ovirt.engine.core.compat.Guid> allMemoryDisks = org.ovirt.engine.core.bll.memory.MemoryUtils.getMemoryDiskIdsFromSnapshots(getVm().getSnapshots()); for (org.ovirt.engine.core.compat.Guid memoryDiskId : allMemoryDisks) { org.ovirt.engine.core.common.businessentities.storage.DiskImage metadataDisk = createMemoryDisk(memoryDiskId, shouldWipe); images.add(metadataDisk); } removeVmImages(images); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Snapshot.class, to = org.ovirt.engine.api.model.Snapshot.class) public static org.ovirt.engine.api.model.Snapshot map(org.ovirt.engine.core.common.businessentities.Snapshot entity, org.ovirt.engine.api.model.Snapshot template) { org.ovirt.engine.api.model.Snapshot model = (template != null) ? template : new org.ovirt.engine.api.model.Snapshot(); model.setId(entity.getId().toString()); if ((entity.getDescription()) != null) { model.setDescription(entity.getDescription()); } if ((entity.getCreationDate()) != null) { model.setDate(org.ovirt.engine.api.restapi.types.DateMapper.map(entity.getCreationDate(), null)); } if ((entity.getStatus()) != null) { model.setSnapshotStatus(org.ovirt.engine.api.restapi.types.SnapshotMapper.map(entity.getStatus(), null)); } if ((entity.getType()) != null) { model.setSnapshotType(org.ovirt.engine.api.restapi.types.SnapshotMapper.map(entity.getType(), null)); } if (entity.containsMemory()) { model.setPersistMemorystate(true); } return model; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Snapshot.class, to = org.ovirt.engine.api.model.Snapshot.class) public static org.ovirt.engine.api.model.Snapshot map(org.ovirt.engine.core.common.businessentities.Snapshot entity, org.ovirt.engine.api.model.Snapshot template) { org.ovirt.engine.api.model.Snapshot model = (template != null) ? template : new org.ovirt.engine.api.model.Snapshot(); model.setId(entity.getId().toString()); if ((entity.getDescription()) != null) { model.setDescription(entity.getDescription()); } if ((entity.getCreationDate()) != null) { model.setDate(org.ovirt.engine.api.restapi.types.DateMapper.map(entity.getCreationDate(), null)); } if ((entity.getStatus()) != null) { model.setSnapshotStatus(org.ovirt.engine.api.restapi.types.SnapshotMapper.map(entity.getStatus(), null)); } if ((entity.getType()) != null) { model.setSnapshotType(org.ovirt.engine.api.restapi.types.SnapshotMapper.map(entity.getType(), null)); } model.setPersistMemorystate(entity.containsMemory()); return model; }
private void writeSnapshotsSection() { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots = vm.getSnapshots(); if ((snapshots == null) || (snapshots.isEmpty())) { return; } _writer.writeStartElement("Section"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", "ovf:SnapshotsSection_Type"); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { _writer.writeStartElement("Snapshot"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "id", snapshot.getId().toString()); _writer.writeElement("Type", snapshot.getType().name()); _writer.writeElement("Description", snapshot.getDescription()); _writer.writeElement("CreationDate", org.ovirt.engine.core.utils.ovf.OvfParser.localDateToUtcDateString(snapshot.getCreationDate())); if (snapshot.containsMemory()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDump = memoryDisks.get(snapshot.getMemoryDiskId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryConf = memoryDisks.get(snapshot.getMetadataDiskId()); java.lang.String memoryVolume = java.lang.String.format("%1$s,%2$s,%3$s,%4$s,%5$s,%6$s", memoryDump.getStorageIds().get(0), memoryDump.getStoragePoolId(), memoryDump.getId(), memoryDump.getImageId(), memoryConf.getId(), memoryConf.getImageId()); _writer.writeElement("Memory", memoryVolume); } if ((snapshot.getAppList()) != null) { _writer.writeElement("ApplicationList", snapshot.getAppList()); } if ((snapshot.getVmConfiguration()) != null) { _writer.writeElement("VmConfiguration", org.apache.commons.codec.binary.Base64.encodeBase64String(snapshot.getVmConfiguration().getBytes())); } _writer.writeEndElement(); } _writer.writeEndElement(); }	private void writeSnapshotsSection() { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots = vm.getSnapshots(); if ((snapshots == null) || (snapshots.isEmpty())) { return; } _writer.writeStartElement("Section"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", "ovf:SnapshotsSection_Type"); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { _writer.writeStartElement("Snapshot"); _writer.writeAttributeString(getOvfUri(), "id", snapshot.getId().toString()); _writer.writeElement("Type", snapshot.getType().name()); _writer.writeElement("Description", snapshot.getDescription()); _writer.writeElement("CreationDate", org.ovirt.engine.core.utils.ovf.OvfParser.localDateToUtcDateString(snapshot.getCreationDate())); if (snapshot.containsMemory()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDump = memoryDisks.get(snapshot.getMemoryDiskId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryConf = memoryDisks.get(snapshot.getMetadataDiskId()); java.lang.String memoryVolume = java.lang.String.format("%1$s,%2$s,%3$s,%4$s,%5$s,%6$s", memoryDump.getStorageIds().get(0), memoryDump.getStoragePoolId(), memoryDump.getId(), memoryDump.getImageId(), memoryConf.getId(), memoryConf.getImageId()); _writer.writeElement("Memory", memoryVolume); } if ((snapshot.getAppList()) != null) { _writer.writeElement("ApplicationList", snapshot.getAppList()); } if ((snapshot.getVmConfiguration()) != null) { _writer.writeElement("VmConfiguration", org.apache.commons.codec.binary.Base64.encodeBase64String(snapshot.getVmConfiguration().getBytes())); } _writer.writeEndElement(); } _writer.writeEndElement(); }
@java.lang.Override protected final void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.StorageDomain storage = getStorage(); T returnValue = getAllFromStorage(storage); java.util.List<org.ovirt.engine.core.compat.Guid> imagesList = ((java.util.List<org.ovirt.engine.core.compat.Guid>) (runVdsCommand(VDSCommandType.GetImagesList, new org.ovirt.engine.core.common.vdscommands.GetImagesListVDSCommandParameters(storage.getId(), storage.getStoragePoolId())).getReturnValue())); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.compat.Guid>> lebil = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid image : imagesList) { org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters getVolumesParameters = new org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters(storage.getStoragePoolId(), storage.getId(), image); java.util.List<org.ovirt.engine.core.compat.Guid> volumesList = ((java.util.List<org.ovirt.engine.core.compat.Guid>) (runVdsCommand(VDSCommandType.GetVolumesList, getVolumesParameters).getReturnValue())); lebil.put(image, volumesList); } org.ovirt.engine.core.bll.exportimport.GetAllFromExportDomainQuery.getQueryReturnValue().setReturnValue(returnValue); }	@java.lang.Override protected final void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.StorageDomain storage = getStorage(); T returnValue = getAllFromStorage(storage); org.ovirt.engine.core.bll.exportimport.GetAllFromExportDomainQuery.getQueryReturnValue().setReturnValue(returnValue); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, memoryDiskDomainMap.get(snapshot.getMemoryDiskId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, snapshot.getMemoryDiskId()); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMemoryDisk(vm, sd.getStorageType(), vmOverheadCalculator, org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(snapshot.getMemoryDiskId()); memoryDisk.setImageId(org.ovirt.engine.core.compat.Guid.newGuid()); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(sd.getId()))); memoryDisk.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getStoragePoolId()); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(DiskImage::isWipeAfterDelete)); return memoryDisk; }	private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, memoryDiskDomainMap.get(snapshot.getMemoryDiskId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, snapshot.getMemoryDiskId()); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMemoryDisk(vm, sd.getStorageType(), vmOverheadCalculator, org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(snapshot.getMemoryDiskId()); memoryDisk.setImageId(getMemoryDiskImageId(snapshot.getMemoryDiskId())); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(sd.getId()))); memoryDisk.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getStoragePoolId()); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(DiskImage::isWipeAfterDelete)); return memoryDisk; }
private org.ovirt.engine.core.compat.Guid getMemoryDiskImageId(org.ovirt.engine.core.compat.Guid imageGroupId) { org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters getVolumesParameters = new org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getStorageDomainId(), imageGroupId); java.util.List<org.ovirt.engine.core.compat.Guid> volumesList = ((java.util.List<org.ovirt.engine.core.compat.Guid>) (runVdsCommand(VDSCommandType.GetVolumesList, getVolumesParameters).getReturnValue())); return volumesList.get(0); }	private org.ovirt.engine.core.compat.Guid getMemoryDiskImageId(org.ovirt.engine.core.compat.Guid imageGroupId) { if (!(memoryDiskImageMap.containsKey(imageGroupId))) { org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters getVolumesParameters = new org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getSourceDomainId(), imageGroupId); java.util.List<org.ovirt.engine.core.compat.Guid> volumesList = ((java.util.List<org.ovirt.engine.core.compat.Guid>) (runVdsCommand(VDSCommandType.GetVolumesList, getVolumesParameters).getReturnValue())); memoryDiskImageMap.put(imageGroupId, volumesList.get(0)); } return memoryDiskImageMap.get(imageGroupId); }
private void addMemoryImages() { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getSnapshots().stream().filter(( snapshot) -> snapshot.containsMemory()).forEach(( snapshot) -> { addDisk(createMemoryDisk(snapshot)); addDisk(createMetadataDisk(getVm(), snapshot)); }); }	private void addMemoryImages() { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getSnapshots().stream().filter(Snapshot::containsMemory).forEach(( snapshot) -> { addDisk(createMemoryDisk(snapshot)); addDisk(createMetadataDisk(getVm(), snapshot)); }); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadataDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, memoryDiskDomainMap.get(snapshot.getMetadataDiskId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, snapshot.getMetadataDiskId()); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMetadataDisk(org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(snapshot.getMetadataDiskId()); memoryDisk.setImageId(org.ovirt.engine.core.compat.Guid.newGuid()); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(sd.getId()))); memoryDisk.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getStoragePoolId()); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(DiskImage::isWipeAfterDelete)); return memoryDisk; }	private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadataDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, memoryDiskDomainMap.get(snapshot.getMetadataDiskId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, snapshot.getMetadataDiskId()); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMetadataDisk(org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(snapshot.getMetadataDiskId()); memoryDisk.setImageId(getMemoryDiskImageId(snapshot.getMetadataDiskId())); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(sd.getId()))); memoryDisk.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getStoragePoolId()); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(DiskImage::isWipeAfterDelete)); return memoryDisk; }
public static java.util.List<org.ovirt.engine.core.compat.Guid> getMemoryDiskIdsFromSnapshots(java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots) { java.util.List<org.ovirt.engine.core.compat.Guid> memoryDiskIds = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { if (snapshot.containsMemory()) { memoryDiskIds.add(snapshot.getMemoryDiskId()); memoryDiskIds.add(snapshot.getMetadataDiskId()); } } return memoryDiskIds; }	public static java.util.Set<org.ovirt.engine.core.compat.Guid> getMemoryDiskIdsFromSnapshots(java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots) { java.util.Set<org.ovirt.engine.core.compat.Guid> memoryDiskIds = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { if (snapshot.containsMemory()) { memoryDiskIds.add(snapshot.getMemoryDiskId()); memoryDiskIds.add(snapshot.getMetadataDiskId()); } } return memoryDiskIds; }
protected boolean shouldRestoreMemory() { return ((!(memoryFromSnapshotUsed)) && (((getFlow()) == (org.ovirt.engine.core.common.action.RunVmParams.RunVmFlow.RESUME_HIBERNATE)) || (org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(org.ovirt.engine.core.bll.RunVmCommand.getVm().getClusterArch(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getCompatibilityVersion())))) && ((org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryDiskId()) != null); }	protected boolean shouldRestoreMemory() { return ((!(memoryFromSnapshotUsed)) && (((getFlow()) == (org.ovirt.engine.core.common.action.RunVmParams.RunVmFlow.RESUME_HIBERNATE)) || (org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(org.ovirt.engine.core.bll.RunVmCommand.getVm().getClusterArch(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getCompatibilityVersion())))) && (org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().containsMemory()); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured, inFenceFlow, kernelFeatures); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured, reportedDnsResolverConfiguration, inFenceFlow, kernelFeatures); }
public int getAvailableUnitForScsiDisk(java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, boolean reserveFirstTwoLuns, boolean reserveForScsiCd) { int cdPayloadUnitIndex = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdPayloadDeviceIndex("scsi"); int cdUnitIndex = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdDeviceIndex("scsi"); int unit = (reserveFirstTwoLuns) ? reserveForScsiCd ? (java.lang.Math.max(cdPayloadUnitIndex, cdUnitIndex)) + 1 : 2 : 0; if (vmDeviceUnitMap == null) { return unit; } while (((reserveForScsiCd && (unit == cdPayloadUnitIndex)) || (reserveForScsiCd && (unit == cdUnitIndex))) || (vmDeviceUnitMap.containsValue(unit))) { unit++; } return unit; }	public int getAvailableUnitForScsiDisk(java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, boolean reserveFirstTwoLuns, boolean reserveForScsiCd) { int unit = (reserveFirstTwoLuns) ? 2 : 0; int cdPayloadUnitIndex = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdPayloadDeviceIndex("scsi"); int cdUnitIndex = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdDeviceIndex("scsi"); while (((reserveForScsiCd && (unit == cdPayloadUnitIndex)) || (reserveForScsiCd && (unit == cdUnitIndex))) || ((vmDeviceUnitMap != null) && (vmDeviceUnitMap.containsValue(unit)))) { unit++; } return unit; }
public org.ovirt.engine.core.bll.ValidationResult externalNetworkDetailsUnchanged(org.ovirt.engine.core.common.businessentities.network.Network newNetwork) { return (((((java.util.Objects.equals(network.getVlanId(), newNetwork.getVlanId())) && ((network.getName()) == (newNetwork.getName()))) && ((network.getMtu()) == (newNetwork.getMtu()))) && ((network.getStp()) == (newNetwork.getStp()))) && ((network.isVmNetwork()) == (newNetwork.isVmNetwork()))) && (java.util.Objects.equals(network.getProvidedBy(), newNetwork.getProvidedBy())) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_DETAILS_CANNOT_BE_EDITED); }	public org.ovirt.engine.core.bll.ValidationResult externalNetworkDetailsUnchanged(org.ovirt.engine.core.common.businessentities.network.Network newNetwork) { return (((((java.util.Objects.equals(network.getVlanId(), newNetwork.getVlanId())) && (java.util.Objects.equals(network.getName(), newNetwork.getName()))) && ((network.getMtu()) == (newNetwork.getMtu()))) && ((network.getStp()) == (newNetwork.getStp()))) && ((network.isVmNetwork()) == (newNetwork.isVmNetwork()))) && (java.util.Objects.equals(network.getProvidedBy(), newNetwork.getProvidedBy())) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_DETAILS_CANNOT_BE_EDITED); }
protected void setDefaultSwitchTypeIfNeeded() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if (cluster.hasRequiredSwitchType(null)) { org.ovirt.engine.core.common.network.SwitchType defaultSwitchType = org.ovirt.engine.core.common.network.DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } }	protected void setDefaultSwitchTypeIfNeeded() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if (!(cluster.isSetRequiredSwitchType())) { org.ovirt.engine.core.common.network.SwitchType defaultSwitchType = org.ovirt.engine.core.common.network.DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } }
private org.ovirt.engine.core.common.action.ActionReturnValue addNetwork(org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.common.businessentities.network.Network network, boolean attachToAllClusters) { org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters params = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(dataCenterId, network); params.setVnicProfileRequired(false); if (attachToAllClusters) { org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = runInternalQuery(QueryType.GetClustersByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId)); java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = queryReturnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> clusterIds = clusters.stream().map(Cluster::getId).collect(java.util.stream.Collectors.toList()); params.setNetworkClusterList(networkHelper.createNetworkClusters(clusterIds)); } return runInternalAction(ActionType.AddNetwork, params); }	private org.ovirt.engine.core.common.action.ActionReturnValue addNetwork(org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.common.businessentities.network.Network network, boolean attachToAllClusters) { org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters params = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(dataCenterId, network); params.setVnicProfileRequired(false); if (attachToAllClusters) { params.setNetworkClusterList(networkHelper.createNetworkClusters(getAllClusterIdsInDataCenter(dataCenterId))); } return runInternalAction(ActionType.AddNetwork, params); }
public void updateHostStatusAfterSuccessfulUpgrade() { org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicHostData = vdsDynamicDao.get(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVdsId()); dynamicHostData.setUpdateAvailable(false); vdsDynamicDao.update(dynamicHostData); if (((org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getVdsType()) == (org.ovirt.engine.core.common.businessentities.VDSType.VDS)) && (!(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getParameters().isReboot()))) { if ((org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getParameters().getInitialStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance)) { setVdsStatus(VDSStatus.Maintenance); } else { if (org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getHighlyAvailableIsConfigured()) { haMaintenanceFailed = !(hostedEngineHelper.updateHaLocalMaintenanceMode(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds(), false)); } setVdsStatus(VDSStatus.Initializing); } } }	public void updateHostStatusAfterSuccessfulUpgrade() { org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicHostData = vdsDynamicDao.get(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVdsId()); dynamicHostData.setUpdateAvailable(false); vdsDynamicDao.update(dynamicHostData); if (((org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getVdsType()) == (org.ovirt.engine.core.common.businessentities.VDSType.VDS)) && (!(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getParameters().isReboot()))) { if ((org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getParameters().getInitialStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance)) { setVdsStatus(VDSStatus.Maintenance); } else { setVdsStatus(VDSStatus.Initializing); } } }
public static boolean isStatusOk(java.util.Map<java.lang.String, java.lang.Object> response) { if ((response.get("error")) != null) { java.lang.String errorCode = ((response.get("error_code")) == null) ? ((java.lang.String) (response.get("error"))) : ((java.lang.String) (response.get("error_code"))); java.lang.String errorDescription = ((response.get("error_description")) == null) ? ((java.lang.String) (response.get("error"))) : ((java.lang.String) (response.get("error_description"))); throw new java.lang.RuntimeException(java.lang.String.format("%s: %s", errorCode, errorDescription)); } return true; }	public static boolean isStatusOk(java.util.Map<java.lang.String, java.lang.Object> response) { if ((response.get("error")) != null) { java.lang.Object errorCode = response.get("error_code"); java.lang.String msg; if (errorCode == null) { msg = java.lang.String.format("%s: %s", response.get("error"), response.get("error_description")); } else { msg = java.lang.String.format("%s: %s", errorCode, response.get("error")); } throw new java.lang.RuntimeException(msg); } return true; }
private void createVnicProfile() { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = networkHelper.createVnicProfile(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork()); if (org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().isExternal()) { vnicProfile.setNetworkFilterId(null); } vnicProfileDao.save(vnicProfile); }	private void runAddVnicProfile() { if ((org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().isVmNetwork()) && (org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getParameters().isVnicProfileRequired())) { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = networkHelper.createVnicProfile(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork()); org.ovirt.engine.core.common.action.AddVnicProfileParameters vnicProfileParameters = new org.ovirt.engine.core.common.action.AddVnicProfileParameters(vnicProfile); vnicProfileParameters.setPublicUse(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getParameters().isVnicProfilePublicUse()); runInternalAction(ActionType.AddVnicProfile, vnicProfileParameters, org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getContext().clone().withoutLock()); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.utils.NetworkUtils.setNetworkVdsmName(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { networkDao.save(getNetwork()); if ((getNetwork().isVmNetwork()) && (getParameters().isVnicProfileRequired())) { createVnicProfile(); } org.ovirt.engine.core.bll.network.dc.networkHelper.addPermissionsOnNetwork(getUserId(), getNetwork().getId()); return null; }); runClusterAttachment(); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getId()); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.utils.NetworkUtils.setNetworkVdsmName(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { networkDao.save(getNetwork()); org.ovirt.engine.core.bll.network.dc.networkHelper.addPermissionsOnNetwork(getUserId(), getNetwork().getId()); return null; }); java.util.concurrent.CompletableFuture.runAsync(this::runClusterAttachment, org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.getExecutorService()).thenRunAsync(this::runAddVnicProfile); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getId()); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.setSucceeded(true); }
private org.ovirt.engine.core.common.action.ActionReturnValue addNetwork(org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.common.businessentities.network.Network network, boolean attachToAllClusters) { org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters params = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(dataCenterId, network); if (attachToAllClusters) { params.setNetworkClusterList(networkHelper.createNetworkClusters(getAllClusterIdsInDataCenter(dataCenterId))); } return runInternalAction(ActionType.AddNetwork, params); }	private org.ovirt.engine.core.common.action.ActionReturnValue addNetwork(org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.common.businessentities.network.Network network, boolean attachToAllClusters) { org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters params = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(dataCenterId, network); params.setVnicProfilePublicUse(org.ovirt.engine.core.bll.network.dc.InternalImportExternalNetworkCommand.getParameters().isPublicUse()); if (attachToAllClusters) { params.setNetworkClusterList(networkHelper.createNetworkClusters(getAllClusterIdsInDataCenter(dataCenterId))); } return runInternalAction(ActionType.AddNetwork, params); }
void initialize(boolean engineStartup, java.util.List<java.lang.String> macsForMacPool) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.info("Initializing {}", this); this.macsStorage = createMacsStorage(this.rangesBoundaries); org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug("Initializing {} with macs: {}", this, macsForMacPool); java.util.List<java.lang.String> notAddedMacs = addMacs(macsForMacPool); if (!(notAddedMacs.isEmpty())) { if (engineStartup) { java.lang.String auditLogMessage = "Following MACs violates duplicity restriction, and was pushed into MAC pool without respect to it:" + notAddedMacs; auditLogDirector.log(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(), AuditLogType.MAC_ADDRESS_VIOLATES_NO_DUPLICATES_SETTING, auditLogMessage); forceAddMacs(notAddedMacs); } else { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.MAC_POOL_INITIALIZATION_FAILED, org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.UNABLE_TO_INITIALIZE_MAC_POOL_DUE_TO_EXISTING_DUPLICATES); } } org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.info("Finished initializing {}. Available MACs in pool: {}", this, macsStorage.getAvailableMacsCount()); }	void initialize(boolean engineStartup, java.util.List<java.lang.String> macsForMacPool) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.info("Initializing {}", this); this.macsStorage = createMacsStorage(this.rangesBoundaries); org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug("Initializing {} with macs: {}", this, macsForMacPool); java.util.List<java.lang.String> notAddedMacs = addMacs(macsForMacPool); if (!(notAddedMacs.isEmpty())) { if (engineStartup) { java.lang.String auditLogMessage = "Following MACs violates duplicity restriction, and was pushed into MAC pool without respect to it:" + notAddedMacs; auditLogDirector.log(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(), AuditLogType.MAC_ADDRESS_VIOLATES_NO_DUPLICATES_SETTING, auditLogMessage); forceAddMacs(notAddedMacs); } else { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.MAC_POOL_INITIALIZATION_FAILED, "Unable to initialize MAC pool due to existing duplicates"); } } org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.info("Finished initializing {}. Available MACs in pool: {}", this, macsStorage.getAvailableMacsCount()); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } oldMacPool = macPoolDao.get(getMacPoolId()); return (((validate(new org.ovirt.engine.core.bll.MacPoolValidator(oldMacPool).macPoolExists())) && (validate(new org.ovirt.engine.core.bll.MacPoolValidator(getMacPoolEntity()).hasUniqueName()))) && (validate(org.ovirt.engine.core.bll.UpdateMacPoolCommand.validateDefaultFlagIsNotChanged(oldMacPool, getMacPoolEntity())))) && (validate(validateDuplicatesConfiguration())); }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } oldMacPool = macPoolDao.get(getMacPoolId()); org.ovirt.engine.core.bll.MacPoolValidator validator = new org.ovirt.engine.core.bll.MacPoolValidator(getMacPoolEntity()); return (((validate(new org.ovirt.engine.core.bll.MacPoolValidator(oldMacPool).macPoolExists())) && (validate(validator.hasUniqueName()))) && (validate(validator.validateDuplicates(macPoolPerCluster)))) && (validate(org.ovirt.engine.core.bll.UpdateMacPoolCommand.validateDefaultFlagIsNotChanged(oldMacPool, getMacPoolEntity()))); }
@java.lang.Override protected void executeCommand() { registerRollbackHandler(((org.ovirt.engine.core.utils.transaction.TransactionRollbackListener) (() -> org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(((TransactionMethod<java.lang.Void>) (() -> { org.ovirt.engine.core.bll.macPoolPerCluster.createPool(oldMacPool); return null; })))))); macPoolDao.update(getMacPoolEntity()); macPoolPerCluster.modifyPool(getMacPoolEntity()); setSucceeded(true); getReturnValue().setActionReturnValue(getMacPoolId()); }	@java.lang.Override protected void executeCommand() { registerRollbackHandler(((org.ovirt.engine.core.utils.transaction.TransactionRollbackListener) (() -> org.ovirt.engine.core.bll.macPoolPerCluster.modifyPool(oldMacPool)))); macPoolDao.update(getMacPoolEntity()); macPoolPerCluster.modifyPool(getMacPoolEntity()); setSucceeded(true); getReturnValue().setActionReturnValue(getMacPoolId()); }
public void testCreateMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool) { macPoolFactory.createMacPool(macPool, false); }	public boolean isDuplicateMacAddressesAllowed(org.ovirt.engine.core.compat.Guid macPoolId) { return macPools.get(macPoolId).isDuplicateMacAddressesAllowed(); }
private org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage cinderDisk) { org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters createParams = new org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (diskDao.get(cinderDisk.getId()))).getImageId()); createParams.setVmSnapshotId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getNewActiveSnapshotId()); createParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); createParams.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDescription()); createParams.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getSnapshotType()); createParams.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getActionType()); createParams.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters()); return createParams; }	private org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage cinderDisk) { org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters createParams = new org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (diskDao.get(cinderDisk.getId()))).getImageId()); createParams.setVmSnapshotId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskCommand.getParameters().getNewActiveSnapshotId()); createParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); createParams.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskCommand.getParameters().getDescription()); createParams.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskCommand.getParameters().getSnapshotType()); createParams.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskCommand.getActionType()); createParams.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskCommand.getParameters()); return createParams; }
public org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters.CreateSnapshotStage getCreateSnapshotStage() { return createSnapshotStage; }	public org.ovirt.engine.core.common.action.CreateSnapshotForVmParameters.CreateSnapshotStage getCreateSnapshotStage() { return createSnapshotStage; }
public void setCreateSnapshotStage(org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters.CreateSnapshotStage createSnapshotStage) { this.createSnapshotStage = createSnapshotStage; }	public void setCreateSnapshotStage(org.ovirt.engine.core.common.action.CreateSnapshotForVmParameters.CreateSnapshotStage createSnapshotStage) { this.createSnapshotStage = createSnapshotStage; }
@java.lang.Override public void init() { org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().setUseCinderCommandCallback(isCinderDisksExist()); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.VM, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId())); setSnapshotName(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription()); setStoragePoolId(((org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm()) != null ? org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm().getStoragePoolId() : null)); liveSnapshotSucceeded = false; }	@java.lang.Override public void init() { org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().setUseCinderCommandCallback(isCinderDisksExist()); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.VM, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId())); setSnapshotName(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription()); setStoragePoolId(((org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm()) != null ? org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm().getStoragePoolId() : null)); }
public void onSave() { if (((getProgress()) != null) || (!(validate()))) { return; } startProgress(); org.ovirt.engine.core.common.businessentities.VM vm = getVm(); java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> params = new java.util.ArrayList<>(); java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotDisksIds = null; if ((getSnapshotDisks().getSelectedItems()) != null) { snapshotDisksIds = getSnapshotDisks().getSelectedItems().stream().map(BaseDisk::getId).collect(java.util.stream.Collectors.toSet()); } org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters param = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(vm.getId(), getDescription().getEntity(), getMemory().getEntity(), snapshotDisksIds); param.setQuotaId(vm.getQuotaId()); params.add(param); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.CreateSnapshotForVm, params, ( result) -> { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel) (result.getState())); localModel.stopProgress(); getCancelCommand().execute(); }, this); }	public void onSave() { if (((getProgress()) != null) || (!(validate()))) { return; } startProgress(); org.ovirt.engine.core.common.businessentities.VM vm = getVm(); java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> params = new java.util.ArrayList<>(); java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotDisksIds = null; if ((getSnapshotDisks().getSelectedItems()) != null) { snapshotDisksIds = getSnapshotDisks().getSelectedItems().stream().map(BaseDisk::getId).collect(java.util.stream.Collectors.toSet()); } org.ovirt.engine.core.common.action.CreateSnapshotForVmParameters param = new org.ovirt.engine.core.common.action.CreateSnapshotForVmParameters(vm.getId(), getDescription().getEntity(), getMemory().getEntity(), snapshotDisksIds); param.setQuotaId(vm.getQuotaId()); params.add(param); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.CreateSnapshotForVm, params, ( result) -> { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel) (result.getState())); localModel.stopProgress(); getCancelCommand().execute(); }, this); }
private void createSnapshotsForDisks() { org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeParameters parameters = new org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeParameters(); parameters.setDiskIdsToIgnoreInChecks(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIdsToIgnoreInChecks()); parameters.setDiskToImageIds(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskToImageIds()); parameters.setNewActiveSnapshotId(newActiveSnapshotId); parameters.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()); parameters.setDiskIds(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIds()); parameters.setVmId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.CreateSnapshotVolume, parameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getContext(), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getLock())); }	private void createSnapshotsForDisks() { org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskParameters parameters = new org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskParameters(); parameters.setDiskIdsToIgnoreInChecks(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIdsToIgnoreInChecks()); parameters.setDiskToImageIds(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskToImageIds()); parameters.setNewActiveSnapshotId(newActiveSnapshotId); parameters.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()); parameters.setDiskIds(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIds()); parameters.setEndProcedure(ActionParametersBase.EndProcedure.PARENT_MANAGED); parameters.setVmId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId()); parameters.setSessionId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSessionId()); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters()); parameters.setEntityInfo(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getEntityInfo()); runInternalAction(ActionType.CreateSnapshotDisk, parameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContextForTasks(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getContext(), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getLock())); }
protected javax.ws.rs.core.Response doAdd(org.ovirt.engine.api.model.Snapshot snapshot, boolean block) { validateParameters(snapshot, "description"); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters snapshotParams = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(parentId, snapshot.getDescription()); if (snapshot.isSetPersistMemorystate()) { snapshotParams.setSaveMemory(snapshot.isPersistMemorystate()); } if (snapshot.isSetDiskAttachments()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskToImageIds = mapDisks(snapshot.getDiskAttachments()); snapshotParams.setDiskIds(diskToImageIds.keySet()); snapshotParams.setDiskToImageIds(diskToImageIds); } return performCreate(ActionType.CreateSnapshotForVm, snapshotParams, new org.ovirt.engine.api.restapi.resource.BackendSnapshotsResource.SnapshotIdResolver(), block); }	protected javax.ws.rs.core.Response doAdd(org.ovirt.engine.api.model.Snapshot snapshot, boolean block) { validateParameters(snapshot, "description"); org.ovirt.engine.core.common.action.CreateSnapshotForVmParameters snapshotParams = new org.ovirt.engine.core.common.action.CreateSnapshotForVmParameters(parentId, snapshot.getDescription()); if (snapshot.isSetPersistMemorystate()) { snapshotParams.setSaveMemory(snapshot.isPersistMemorystate()); } if (snapshot.isSetDiskAttachments()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskToImageIds = mapDisks(snapshot.getDiskAttachments()); snapshotParams.setDiskIds(diskToImageIds.keySet()); snapshotParams.setDiskToImageIds(diskToImageIds); } return performCreate(ActionType.CreateSnapshotForVm, snapshotParams, new org.ovirt.engine.api.restapi.resource.BackendSnapshotsResource.SnapshotIdResolver(), block); }
private org.ovirt.engine.core.common.action.ImagesActionsParametersBase buildCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { org.ovirt.engine.core.common.action.ImagesActionsParametersBase result = new org.ovirt.engine.core.common.action.ImagesActionsParametersBase(image.getImageId()); result.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDescription()); result.setSessionId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getSessionId()); result.setQuotaId(image.getQuotaId()); result.setDiskProfileId(image.getDiskProfileId()); result.setVmSnapshotId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getNewActiveSnapshotId()); result.setEntityInfo(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getEntityInfo()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getActionType()); result.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters()); result.setDestinationImageId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDiskToImageIds().get(image.getId())); if (org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDiskIdsToIgnoreInChecks().contains(image.getId())) { result.setLeaveLocked(true); } return result; }	private org.ovirt.engine.core.common.action.ImagesActionsParametersBase buildCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { org.ovirt.engine.core.common.action.ImagesActionsParametersBase result = new org.ovirt.engine.core.common.action.ImagesActionsParametersBase(image.getImageId()); result.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskCommand.getParameters().getDescription()); result.setSessionId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskCommand.getParameters().getSessionId()); result.setQuotaId(image.getQuotaId()); result.setDiskProfileId(image.getDiskProfileId()); result.setVmSnapshotId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskCommand.getParameters().getNewActiveSnapshotId()); result.setEntityInfo(org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskCommand.getParameters().getEntityInfo()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskCommand.getActionType()); result.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskCommand.getParameters()); result.setDestinationImageId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskCommand.getParameters().getDiskToImageIds().get(image.getId())); if (org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskCommand.getParameters().getDiskIdsToIgnoreInChecks().contains(image.getId())) { result.setLeaveLocked(true); } return result; }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImagesForVm() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = diskDao.getAllForVm(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = new java.util.ArrayList(getDiskImages(disks)); allDisks.addAll(imagesHandler.getCinderLeafImages(disks)); return allDisks; }	private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImagesForVm() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = diskDao.getAllForVm(org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskCommand.getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = new java.util.ArrayList(getDiskImages(disks)); allDisks.addAll(imagesHandler.getCinderLeafImages(disks)); return allDisks; }
private void createStatelessSnapshot() { warnIfNotAllDisksPermitSnapshots(); org.ovirt.engine.core.bll.RunVmCommand.log.info("Creating stateless snapshot for VM '{}' ({})", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters createAllSnapshotsFromVmParameters = buildCreateSnapshotParameters(); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.CreateSnapshotForVm, createAllSnapshotsFromVmParameters, createContextForStatelessSnapshotCreation()); org.ovirt.engine.core.bll.RunVmCommand.setLock(null); setSucceeded(actionReturnValue.getSucceeded()); if (!(actionReturnValue.getSucceeded())) { if (areDisksLocked(actionReturnValue)) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IRS_IMAGE_STATUS_ILLEGAL); } org.ovirt.engine.core.bll.RunVmCommand.getReturnValue().setFault(actionReturnValue.getFault()); org.ovirt.engine.core.bll.RunVmCommand.log.error("Failed to create stateless snapshot for VM '{}' ({})", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); } }	private void createStatelessSnapshot() { warnIfNotAllDisksPermitSnapshots(); org.ovirt.engine.core.bll.RunVmCommand.log.info("Creating stateless snapshot for VM '{}' ({})", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); org.ovirt.engine.core.common.action.CreateSnapshotForVmParameters createAllSnapshotsFromVmParameters = buildCreateSnapshotParameters(); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.CreateSnapshotForVm, createAllSnapshotsFromVmParameters, createContextForStatelessSnapshotCreation()); org.ovirt.engine.core.bll.RunVmCommand.setLock(null); setSucceeded(actionReturnValue.getSucceeded()); if (!(actionReturnValue.getSucceeded())) { if (areDisksLocked(actionReturnValue)) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IRS_IMAGE_STATUS_ILLEGAL); } org.ovirt.engine.core.bll.RunVmCommand.getReturnValue().setFault(actionReturnValue.getFault()); org.ovirt.engine.core.bll.RunVmCommand.log.error("Failed to create stateless snapshot for VM '{}' ({})", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); } }
private org.ovirt.engine.core.common.action.ImagesActionsParametersBase buildCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { org.ovirt.engine.core.common.action.ImagesActionsParametersBase result = new org.ovirt.engine.core.common.action.ImagesActionsParametersBase(image.getImageId()); result.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription()); result.setSessionId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSessionId()); result.setQuotaId(image.getQuotaId()); result.setDiskProfileId(image.getDiskProfileId()); result.setVmSnapshotId(newActiveSnapshotId); result.setEntityInfo(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getEntityInfo()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getActionType()); result.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters()); result.setDestinationImageId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskToImageIds().get(image.getId())); if (org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIdsToIgnoreInChecks().contains(image.getId())) { result.setLeaveLocked(true); } return result; }	@java.lang.Override protected org.ovirt.engine.core.common.action.LockProperties applyLockProperties(org.ovirt.engine.core.common.action.LockProperties lockProperties) { return lockProperties.withScope(LockProperties.Scope.Command); }
private void handleVdsLiveSnapshotFailure(org.ovirt.engine.core.common.errors.EngineException e) { handleVmFailure(e, AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE, ("Could not perform live snapshot due to error, VM will still be configured to the new created" + " snapshot: {}")); }	private void handleVdsLiveSnapshotFailure(org.ovirt.engine.core.common.errors.EngineException e) { setCommandStatus(CommandStatus.FAILED); handleVmFailure(e, AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE, ("Could not perform live snapshot due to error, VM will still be configured to the new created" + " snapshot: {}")); }
private void removeMemoryVolumesOfSnapshot(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.action.ActionReturnValue retVal = runInternalAction(ActionType.RemoveMemoryVolumes, new org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters(snapshot.getMemoryVolume(), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId()), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.cloneContextAndDetachFromParent()); if (!(retVal.getSucceeded())) { log.error("Failed to remove memory volumes of snapshot '{}' ({})", snapshot.getDescription(), snapshot.getId()); } }	private void removeMemoryVolumesOfSnapshot(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.action.ActionReturnValue retVal = runInternalAction(ActionType.RemoveMemoryVolumes, new org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters(snapshot, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId()), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.cloneContextAndDetachFromParent()); if (!(retVal.getSucceeded())) { log.error("Failed to remove memory volumes of snapshot '{}' ({})", snapshot.getDescription(), snapshot.getId()); } }
private org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage cinderDisk) { org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters createParams = new org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (diskDao.get(cinderDisk.getId()))).getImageId()); createParams.setVmSnapshotId(newActiveSnapshotId); createParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); createParams.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription()); createParams.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()); createParams.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getActionType()); createParams.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters()); return createParams; }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__CREATE); addValidationMessage(EngineMessage.VAR__TYPE__SNAPSHOT); }
@java.lang.Override protected void endVmCommand() { incrementVmGeneration(); thawVm(); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.endActionOnDisks(); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.setSucceeded(((taskGroupSucceeded) && ((!(liveSnapshotRequired)) || (liveSnapshotSucceeded)))); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getReturnValue().setEndActionTryAgain(false); }	@java.lang.Override protected void endVmCommand() { incrementVmGeneration(); thawVm(); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.endActionOnDisks(); setSucceeded(((org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getTaskGroupSuccess()) && ((!(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().isLiveSnapshotRequired())) || (org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().isLiveSnapshotSucceeded())))); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getReturnValue().setEndActionTryAgain(false); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksList() { if ((cachedSelectedActiveDisks) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesAndCinderForVm = getDiskImagesForVm(); if ((org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDiskIds()) == null) { cachedSelectedActiveDisks = imagesAndCinderForVm; } else { cachedSelectedActiveDisks = getDiskImagesForVm().stream().filter(( d) -> getParameters().getDiskIds().contains(d.getId())).collect(java.util.stream.Collectors.toList()); } } return cachedSelectedActiveDisks; }	protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksList() { if ((cachedSelectedActiveDisks) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesAndCinderForVm = getDiskImagesForVm(); if ((org.ovirt.engine.core.bll.snapshots.CreateSnapshotDiskCommand.getParameters().getDiskIds()) == null) { cachedSelectedActiveDisks = imagesAndCinderForVm; } else { cachedSelectedActiveDisks = getDiskImagesForVm().stream().filter(( d) -> getParameters().getDiskIds().contains(d.getId())).collect(java.util.stream.Collectors.toList()); } } return cachedSelectedActiveDisks; }
private org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()) == (Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.StatelessSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm()); } if ((org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().isSaveMemory()) && (isLiveSnapshotApplicable())) { boolean wipeAfterDelete = getDisksList().stream().anyMatch(DiskImage::isWipeAfterDelete); return new org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getStoragePool(), this, vmOverheadCalculator, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription(), wipeAfterDelete); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }	@java.lang.Override protected boolean overrideChildCommandSuccess() { return false; }
private org.ovirt.engine.core.common.businessentities.Snapshot addSnapshotToDB(org.ovirt.engine.core.compat.Guid snapshotId, org.ovirt.engine.core.bll.memory.MemoryImageBuilder memoryImageBuilder) { cachedSelectedActiveDisks = null; return org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getSnapshotsManager().addSnapshot(snapshotId, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription(), Snapshot.SnapshotStatus.LOCKED, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType(), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm(), true, memoryImageBuilder.getVolumeStringRepresentation(), null, getDisksList(), null, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getCompensationContext()); }	private java.lang.String getSnapshotIsBeingTakenForVmMessage() { if ((cachedSnapshotIsBeingTakenMessage) == null) { cachedSnapshotIsBeingTakenMessage = new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_SNAPSHOT_IS_BEING_TAKEN_FOR_VM).withOptional("VmName", org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmName()).toString(); } return cachedSnapshotIsBeingTakenMessage; }
java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAllExternalNetworksLikedToPhysicalNetwork(org.ovirt.engine.core.compat.Guid physicalNetworkId);	java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAllExternalNetworksLinkedToPhysicalNetwork(org.ovirt.engine.core.compat.Guid physicalNetworkId);
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAllExternalNetworksLikedToPhysicalNetwork(org.ovirt.engine.core.compat.Guid physicalNetworkId) { return getCallsHandler().executeReadList("GetAllNetworksByProviderPhysicalNetworkId", networkRowMapper, getCustomMapSqlParameterSource().addValue("network_id", physicalNetworkId)); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAllExternalNetworksLinkedToPhysicalNetwork(org.ovirt.engine.core.compat.Guid physicalNetworkId) { return getCallsHandler().executeReadList("GetAllNetworksByProviderPhysicalNetworkId", networkRowMapper, getCustomMapSqlParameterSource().addValue("network_id", physicalNetworkId)); }
public org.ovirt.engine.core.bll.ValidationResult notLinkedToExternalNetwork() { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> linkedExternalNetworks = getNetworkDao().getAllExternalNetworksLikedToPhysicalNetwork(network.getId()); java.lang.String linkedExternalNetworkNames = linkedExternalNetworks.stream().map(Network::getName).collect(java.util.stream.Collectors.joining(",")); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_PHYSICAL_NETWORK_LINKED_TO_EXTERNAL_NETWORK, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkValidator.NETWORK_LIST_REPLACEMENT, linkedExternalNetworkNames)).when((!(linkedExternalNetworks.isEmpty()))); }	public org.ovirt.engine.core.bll.ValidationResult notLinkedToExternalNetwork() { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> linkedExternalNetworks = getNetworkDao().getAllExternalNetworksLinkedToPhysicalNetwork(network.getId()); java.lang.String linkedExternalNetworkNames = linkedExternalNetworks.stream().map(Network::getName).collect(java.util.stream.Collectors.joining(", ")); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_PHYSICAL_NETWORK_LINKED_TO_EXTERNAL_NETWORK, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkValidator.NETWORK_LIST_REPLACEMENT, linkedExternalNetworkNames)).when((!(linkedExternalNetworks.isEmpty()))); }
@org.junit.Test public void defaultProperties() { try { java.lang.String basedir = java.lang.System.getProperty("basedir"); assumeNotNull(basedir, "Test isn't run via Maven. Please set the basedir system property"); org.ovirt.engine.core.utils.osinfo.OsinfoPropertiesParser.parse(java.nio.file.Paths.get(basedir, "../../../../packaging/conf/osinfo-defaults.properties").toString()); } catch (java.lang.Exception e) { fail((("oVirt-engine will fail to load with a broken osinfo properties file.\n" + ("Please fix the properties file or osinfo.jj grammar under org.ovirt.engine.core.utils.osinfo.\n" + "Exception thrown:\n")) + e)); } }	@org.junit.Test public void defaultProperties() { java.lang.String basedir = java.lang.System.getProperty("basedir"); assumeNotNull(basedir, "Test isn't run via Maven. Please set the basedir system property"); org.ovirt.engine.core.utils.osinfo.OsinfoPropertiesParser.parse(java.nio.file.Paths.get(basedir, "../../../../packaging/conf/osinfo-defaults.properties").toString()); }
private static org.ovirt.engine.core.common.utils.Pair dnsServersOnly() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setStartOnBoot(true); vmInit.setNetworks(java.util.Arrays.asList(underTest)); vmInit.setDnsSearch("search1 search2"); vmInit.setDnsServers("nameserver1 nameserver2 nameserver3"); java.lang.String expectedOutput = "{\n" + ((((((((((((((" \"services\": [\n" + " {\n") + " \"address\": \"nameserver1\",\n") + " \"type\": \"dns\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver2\",\n") + " \"type\": \"dns\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver3\",\n") + " \"type\": \"dns\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }	private static org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmInit, java.lang.String> dnsServersOnly() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setStartOnBoot(true); vmInit.setNetworks(java.util.Collections.singletonList(underTest)); vmInit.setDnsSearch("search1 search2"); vmInit.setDnsServers("nameserver1 nameserver2 nameserver3"); java.lang.String expectedOutput = "{\n" + ((((((((((((((" \"services\": [\n" + " {\n") + " \"address\": \"nameserver1\",\n") + " \"type\": \"dns\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver2\",\n") + " \"type\": \"dns\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver3\",\n") + " \"type\": \"dns\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> mapServices(org.ovirt.engine.core.common.businessentities.VmInit vmInit) { java.util.List<java.util.Map<java.lang.String, java.lang.Object>> services = new java.util.LinkedList<>(); if (hasDnsServers(vmInit)) { for (java.lang.String dnsServer : vmInit.getDnsServers().split(" ")) { java.util.Map<java.lang.String, java.lang.Object> service = new java.util.HashMap<>(); service.put("type", "dns"); service.put("address", dnsServer); services.add(service); } } return services; }	private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> mapServices(org.ovirt.engine.core.common.businessentities.VmInit vmInit) { java.util.List<java.util.Map<java.lang.String, java.lang.Object>> services = new java.util.LinkedList<>(); if (vmInit.hasDnsServers()) { for (java.lang.String dnsServer : vmInit.getDnsServers().split(" ")) { java.util.Map<java.lang.String, java.lang.Object> service = new java.util.HashMap<>(); service.put("type", "dns"); service.put("address", dnsServer); services.add(service); } } return services; }
private void addDnsData(org.ovirt.engine.core.common.businessentities.VmInit vmInit, java.util.Map<java.lang.String, java.lang.Object> network) { if (network == null) { return; } if (hasDnsServers(vmInit)) { network.put("dns_nameservers", java.util.Arrays.asList(vmInit.getDnsServers().split(" "))); } if (hasDnsSearch(vmInit)) { network.put("dns_search", java.util.Arrays.asList(vmInit.getDnsSearch().split(" "))); } }	private void addDnsData(org.ovirt.engine.core.common.businessentities.VmInit vmInit, java.util.Map<java.lang.String, java.lang.Object> network) { if (network == null) { return; } if (vmInit.hasDnsServers()) { network.put("dns_nameservers", java.util.Arrays.asList(vmInit.getDnsServers().split(" "))); } if (vmInit.hasDnsSearch()) { network.put("dns_search", java.util.Arrays.asList(vmInit.getDnsSearch().split(" "))); } }
@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.compat.Guid cmdId = command.getCommandId(); if (status == (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { org.ovirt.engine.core.bll.SerialChildExecutingCommand serialChildExecutingCommand = ((org.ovirt.engine.core.bll.SerialChildExecutingCommand) (command)); if ((!anyFailed) || (serialChildExecutingCommand.ignoreChildCommandFailure())) { try { boolean endCommand = !(serialChildExecutingCommand.performNextOperation(completedChildren)); if (!endCommand) { return; } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.error("Command '{}' id: '{}' failed when attempting to perform the next operation, marking as FAILED '{}'", command.getActionType(), cmdId, childCmdIds, command.getCommandStatus(), e); serialChildExecutingCommand.handleFailure(); anyFailed = true; } } else { serialChildExecutingCommand.handleFailure(); } } else { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.info("Command '{}' id: '{}' execution didn't complete, not proceeding to perform the next operation", command.getActionType(), cmdId); } setCommandEndStatus(command, anyFailed, status, childCmdIds); }	@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.compat.Guid cmdId = command.getCommandId(); if (status == (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { org.ovirt.engine.core.bll.SerialChildExecutingCommand serialChildExecutingCommand = ((org.ovirt.engine.core.bll.SerialChildExecutingCommand) (command)); if ((!anyFailed) || (serialChildExecutingCommand.ignoreChildCommandFailure())) { try { boolean endCommand = !(serialChildExecutingCommand.performNextOperation(completedChildren)); if (!endCommand) { return; } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.error("Command '{}' id: '{}' with children {} failed when attempting to perform the next operation, marking as '{}'", command.getActionType(), cmdId, childCmdIds, command.getCommandStatus()); org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.error(e.getMessage(), e); serialChildExecutingCommand.handleFailure(); anyFailed = true; } } else { serialChildExecutingCommand.handleFailure(); } } else { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.info("Command '{}' id: '{}' execution didn't complete, not proceeding to perform the next operation", command.getActionType(), cmdId); } setCommandEndStatus(command, anyFailed, status, childCmdIds); }
public java.lang.Long getFree() { return free; }	public long getFree() { return free; }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(directory()); optional(filename()); or(mandatory(host().id()), mandatory(host().name())); }	@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(host().id()), mandatory(host().name())); mandatory(directory()); optional(filename()); }
public void setProperties(org.ovirt.engine.core.common.businessentities.gluster.BrickProperties brickProperties) { getStatus().setEntity(brickProperties.getStatus()); getPort().setEntity(brickProperties.getPort()); getPid().setEntity(brickProperties.getPid()); getTotalSize().setEntity(brickProperties.getTotalSize()); getFreeSize().setEntity(brickProperties.getFreeSize()); getConfirmedFreeSize().setEntity(brickProperties.getConfirmedFreeSize()); getDevice().setEntity(brickProperties.getDevice()); getBlockSize().setEntity(brickProperties.getBlockSize()); getMountOptions().setEntity(brickProperties.getMntOptions()); getFileSystem().setEntity(brickProperties.getFsName()); getRdmaPort().setEntity(brickProperties.getRdmaPort()); }	public void setProperties(org.ovirt.engine.core.common.businessentities.gluster.BrickProperties brickProperties) { getStatus().setEntity(brickProperties.getStatus()); getPort().setEntity(brickProperties.getPort()); getPid().setEntity(brickProperties.getPid()); getTotalSize().setEntity(brickProperties.getTotalSize()); getFreeSize().setEntity(brickProperties.getFreeSize()); getConfirmedFreeSize().setEntity(brickProperties.getConfirmedFreeSize()); getDevice().setEntity(brickProperties.getDevice()); getBlockSize().setEntity(brickProperties.getBlockSize()); getMountOptions().setEntity(brickProperties.getMntOptions()); getFileSystem().setEntity(brickProperties.getFsName()); getRdmaPort().setEntity(brickProperties.getRdmaPort()); getConfirmedFreeSize().setIsAvailable(((brickProperties.getConfirmedFreeSize()) != null)); }
public void setConfirmedFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> freeSize) { this.freeSize = freeSize; }	public void setFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> freeSize) { this.freeSize = freeSize; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> getFreeSize() { return confirmedFreeSize; }	public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> getConfirmedFreeSize() { return confirmedFreeSize; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> getConfirmedFreeSize() { return freeSize; }	public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> getFreeSize() { return freeSize; }
public void setFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> confirmedFreeSize) { this.confirmedFreeSize = confirmedFreeSize; }	public void setConfirmedFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> confirmedFreeSize) { this.confirmedFreeSize = confirmedFreeSize; }
@java.lang.Override public void setMainSelectedItem(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity selectedItem) { driver.edit(getDetailModel()); replicaFormItem.setIsAvailable(selectedItem.getVolumeType().isReplicatedType()); stripeFormItem.setIsAvailable(selectedItem.getVolumeType().isStripedType()); disperseCountFormItem.setIsAvailable(selectedItem.getVolumeType().isDispersedType()); redundancyCountFormItem.setIsAvailable(selectedItem.getVolumeType().isDispersedType()); java.util.ArrayList<com.google.gwt.user.client.ui.ValueLabel<java.lang.Long>> volumeCapacityDetails = new java.util.ArrayList(java.util.Arrays.<com.google.gwt.user.client.ui.ValueLabel<java.lang.Long>>asList(volumeTotalCapacity, volumeUsedCapacity, volumeFreeCapacity, volumeConfirmedFreeCapacity)); volumeCapacityDetailsLabel.setValue(volumeCapacityDetails); formBuilder.update(getDetailModel()); }	@java.lang.Override public void setMainSelectedItem(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity selectedItem) { driver.edit(getDetailModel()); replicaFormItem.setIsAvailable(selectedItem.getVolumeType().isReplicatedType()); stripeFormItem.setIsAvailable(selectedItem.getVolumeType().isStripedType()); disperseCountFormItem.setIsAvailable(selectedItem.getVolumeType().isDispersedType()); redundancyCountFormItem.setIsAvailable(selectedItem.getVolumeType().isDispersedType()); java.util.ArrayList<com.google.gwt.user.client.ui.ValueLabel<java.lang.Long>> volumeCapacityDetails = new java.util.ArrayList(java.util.Arrays.<com.google.gwt.user.client.ui.ValueLabel<java.lang.Long>>asList(volumeTotalCapacity, volumeUsedCapacity, volumeFreeCapacity)); if ((selectedItem.getAdvancedDetails().getCapacityInfo().getConfirmedFreeSize()) != null) { volumeCapacityDetails.add(volumeConfirmedFreeCapacity); } volumeCapacityDetailsLabel.setValue(volumeCapacityDetails); formBuilder.update(getDetailModel()); }
public void update(org.ovirt.engine.core.compat.Guid vdsId, java.util.Map<java.lang.String, java.lang.Object> values) { int entryCount = (values != null) ? values.size() : 0; java.lang.String[] pluginTypes = new java.lang.String[entryCount]; java.lang.String[] bindingIds = new java.lang.String[entryCount]; if (values != null) { int i = 0; for (java.util.Map.Entry<java.lang.String, java.lang.Object> pair : values.entrySet()) { pluginTypes[i] = pair.getKey(); bindingIds[i] = ((java.lang.String) (pair.getValue())); } } org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", vdsId).addValue("plugin_types", pluginTypes).addValue("provider_binding_host_ids", bindingIds); getCallsHandler().executeModification("UpdateHostProviderBinding", parameterSource); }	public void update(org.ovirt.engine.core.compat.Guid vdsId, java.util.Map<java.lang.String, java.lang.Object> values) { int entryCount = (values != null) ? values.size() : 0; java.lang.String[] pluginTypes = new java.lang.String[entryCount]; java.lang.String[] bindingIds = new java.lang.String[entryCount]; if (values != null) { int i = 0; for (java.util.Map.Entry<java.lang.String, java.lang.Object> pair : values.entrySet()) { pluginTypes[i] = pair.getKey(); bindingIds[i] = ((java.lang.String) (pair.getValue())); i++; } } org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", vdsId).addValue("plugin_types", createArrayOf("text", pluginTypes)).addValue("provider_binding_host_ids", createArrayOf("text", bindingIds)); getCallsHandler().executeModification("UpdateHostProviderBinding", parameterSource); }
public java.lang.String get(org.ovirt.engine.core.compat.Guid vdsId, java.lang.String pluginType) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", vdsId).addValue("plugin_type", pluginType); return getCallsHandler().executeRead("GetHostProviderBinding", org.ovirt.engine.core.dao.provider.HostProviderBindingDaoImpl.rowMapper, parameterSource); }	public java.lang.String get(org.ovirt.engine.core.compat.Guid vdsId, java.lang.String pluginType) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", vdsId).addValue("plugin_type", pluginType); return getCallsHandler().executeRead("GetHostProviderBinding", ( rs, nowNum) -> rs.getString(1), parameterSource); }
private void persistTopology(org.ovirt.engine.core.common.businessentities.VDS host, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> dbNics, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks, org.ovirt.engine.core.common.vdscommands.UserConfiguredNetworkData userConfiguredData) { vdsDynamicDao.updateDnsResolverConfiguration(host.getId(), host.getReportedDnsResolverConfiguration()); hostProviderBindingDaoImpl.update(host.getId(), host.getOpenstackBindingHostIds()); final org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersister networkInterfacesPersister = new org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersisterImpl(interfaceDao, host.getInterfaces(), dbNics, userConfiguredData.getUserOverriddenNicValuesByNicName()); networkInterfacesPersister.persistTopology(); createHostNetworkAttachmentsPersister(host, clusterNetworks, userConfiguredData).persistNetworkAttachments(); }	private void persistTopology(org.ovirt.engine.core.common.businessentities.VDS host, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> dbNics, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks, org.ovirt.engine.core.common.vdscommands.UserConfiguredNetworkData userConfiguredData) { vdsDynamicDao.updateDnsResolverConfiguration(host.getId(), host.getReportedDnsResolverConfiguration()); hostProviderBindingDao.update(host.getId(), host.getOpenstackBindingHostIds()); final org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersister networkInterfacesPersister = new org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersisterImpl(interfaceDao, host.getInterfaces(), dbNics, userConfiguredData.getUserOverriddenNicValuesByNicName()); networkInterfacesPersister.persistTopology(); createHostNetworkAttachmentsPersister(host, clusterNetworks, userConfiguredData).persistNetworkAttachments(); }
@java.lang.Override public java.lang.Long getRawValue(org.ovirt.engine.core.common.businessentities.StorageDomain object) { java.lang.Integer confirmedAvailableSize = object.getConfirmedAvailableDiskSize(); return confirmedAvailableSize == null ? null : java.lang.Long.valueOf(confirmedAvailableSize); }	@java.lang.Override public java.lang.Long getRawValue(org.ovirt.engine.core.common.businessentities.StorageDomain object) { java.lang.Integer confirmedAvailableSize = object.getConfirmedAvailableDiskSize(); java.lang.Long availableDiskSize = ((object.getAvailableDiskSize()) == null) ? null : java.lang.Long.valueOf(object.getAvailableDiskSize()); return confirmedAvailableSize == null ? availableDiskSize : java.lang.Long.valueOf(confirmedAvailableSize); }
protected java.util.Stack<org.ovirt.engine.core.sso.utils.InteractiveAuth> getAuthSeq(org.ovirt.engine.core.sso.utils.SsoSession ssoSession) { java.lang.String scopes = ssoSession.getScope(); java.lang.String appAuthSeq = ssoContext.getSsoLocalConfig().getProperty("SSO_AUTH_LOGIN_SEQUENCE"); java.lang.String authSeq = null; if (!(scopes.contains("ovirt-ext=auth:sequence-priority="))) { authSeq = "~"; } else { for (java.lang.String scope : org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList(scopes)) { if (scope.startsWith("ovirt-ext=auth:sequence-priority=")) { java.lang.String[] tokens = scope.trim().split("=", 3); authSeq = tokens[2]; } } } java.util.List<org.ovirt.engine.core.sso.utils.InteractiveAuth> authSeqList = org.ovirt.engine.core.sso.servlets.OAuthAuthorizeServlet.getAuthListForSeq(authSeq); if ((org.apache.commons.lang.StringUtils.isNotEmpty(authSeq)) && (authSeq.startsWith("~"))) { for (char c : appAuthSeq.toCharArray()) { if (!(authSeqList.contains(org.ovirt.engine.core.sso.utils.InteractiveAuth.valueOf(("" + c))))) { authSeqList.add(org.ovirt.engine.core.sso.utils.InteractiveAuth.valueOf(("" + c))); } } authSeqList.retainAll(org.ovirt.engine.core.sso.servlets.OAuthAuthorizeServlet.getAuthListForSeq(appAuthSeq)); } java.util.Collections.reverse(authSeqList); java.util.Stack<org.ovirt.engine.core.sso.utils.InteractiveAuth> authSeqStack = new java.util.Stack<>(); authSeqStack.addAll(authSeqList); return authSeqStack; }	protected java.util.Stack<org.ovirt.engine.core.sso.utils.InteractiveAuth> getAuthSeq(org.ovirt.engine.core.sso.utils.SsoSession ssoSession) { java.lang.String scopes = ssoSession.getScope(); java.lang.String appAuthSeq = ssoContext.getSsoLocalConfig().getProperty("SSO_AUTH_LOGIN_SEQUENCE"); java.lang.String authSeq = null; if ((org.apache.commons.lang.StringUtils.isEmpty(scopes)) || (!(scopes.contains("ovirt-ext=auth:sequence-priority=")))) { authSeq = "~"; } else { for (java.lang.String scope : org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList(scopes)) { if (scope.startsWith("ovirt-ext=auth:sequence-priority=")) { java.lang.String[] tokens = scope.trim().split("=", 3); authSeq = tokens[2]; } } } java.util.List<org.ovirt.engine.core.sso.utils.InteractiveAuth> authSeqList = org.ovirt.engine.core.sso.servlets.OAuthAuthorizeServlet.getAuthListForSeq(authSeq); if ((org.apache.commons.lang.StringUtils.isNotEmpty(authSeq)) && (authSeq.startsWith("~"))) { for (char c : appAuthSeq.toCharArray()) { if (!(authSeqList.contains(org.ovirt.engine.core.sso.utils.InteractiveAuth.valueOf(("" + c))))) { authSeqList.add(org.ovirt.engine.core.sso.utils.InteractiveAuth.valueOf(("" + c))); } } authSeqList.retainAll(org.ovirt.engine.core.sso.servlets.OAuthAuthorizeServlet.getAuthListForSeq(appAuthSeq)); } java.util.Collections.reverse(authSeqList); java.util.Stack<org.ovirt.engine.core.sso.utils.InteractiveAuth> authSeqStack = new java.util.Stack<>(); authSeqStack.addAll(authSeqList); return authSeqStack; }
private void deScheduleTimeout(org.ovirt.engine.core.compat.Guid poolId) { java.util.concurrent.ScheduledFuture<?> scheduledTask = nonOperationalPools.get(poolId); if (scheduledTask != null) { synchronized(scheduledTask) { scheduledTask.cancel(true); nonOperationalPools.put(poolId, null); } } }	private void deScheduleTimeout(org.ovirt.engine.core.compat.Guid poolId) { nonOperationalPools.computeIfPresent(poolId, ( key, scheduledTask) -> { scheduledTask.cancel(true); return null; }); }
public void poolStatusChanged(org.ovirt.engine.core.compat.Guid poolId, org.ovirt.engine.core.common.businessentities.StoragePoolStatus status) { if ((nonOperationalPools.containsKey(poolId)) && (status != (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational))) { deScheduleTimeout(poolId); nonOperationalPools.remove(poolId); } else if (status == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational)) { nonOperationalPools.put(poolId, scheduleTimeout(poolId)); } }	public void poolStatusChanged(org.ovirt.engine.core.compat.Guid poolId, org.ovirt.engine.core.common.businessentities.StoragePoolStatus status) { if ((nonOperationalPools.containsKey(poolId)) && (status != (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational))) { deScheduleTimeout(poolId); } else if (status == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational)) { nonOperationalPools.put(poolId, scheduleTimeout(poolId)); } }
protected boolean perform() { try { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setTotalMigrationTime(new java.util.Date()); if (((unplugPassthroughNics()) && (connectLunDisks(getDestinationVdsId()))) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } runningFailed(); return false; } catch (java.lang.Exception e) { runningFailed(); throw e; } }	protected boolean perform() { try { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setTotalMigrationTime(new java.util.Date()); org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().resetStartTime(); if (((unplugPassthroughNics()) && (connectLunDisks(getDestinationVdsId()))) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } runningFailed(); return false; } catch (java.lang.Exception e) { runningFailed(); throw e; } }
private void handleAuditLog(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) { try { java.lang.String clientSecret = request.getParameter("clientSecret"); java.lang.String engineClientSecret = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_CLIENT_SECRET"); if (org.ovirt.engine.core.uutils.crypto.EnvelopePBE.check(clientSecret, engineClientSecret)) { java.lang.String loginErrMsg = request.getParameter("loginErrMsg"); java.lang.String userName = request.getParameter("userName"); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); event.addCustomValue("LoginErrMsg", loginErrMsg); event.setUserName(userName); auditLogDirector.log(event, AuditLogType.USER_LOGIN_FAILED_WITH_MSG); } } catch (java.lang.Exception ex) { response.setStatus(java.net.HttpURLConnection.HTTP_INTERNAL_ERROR); } finally { response.setStatus(java.net.HttpURLConnection.HTTP_OK); } }	private void handleAuditLog(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) { try { java.lang.String clientSecret = request.getParameter("clientSecret"); java.lang.String engineClientSecret = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_CLIENT_SECRET"); if (org.ovirt.engine.core.uutils.crypto.EnvelopePBE.check(clientSecret, engineClientSecret)) { java.lang.String loginErrMsg = request.getParameter("loginErrMsg"); java.lang.String userName = request.getParameter("userName"); java.lang.String sourceIp = request.getParameter("sourceIp"); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); event.addCustomValue("LoginErrMsg", java.lang.String.format(" : '%s'", loginErrMsg)); event.addCustomValue("SourceIP", sourceIp); event.setUserName(userName); auditLogDirector.log(event, AuditLogType.USER_VDC_LOGIN_FAILED); } } catch (java.lang.Exception ex) { response.setStatus(java.net.HttpURLConnection.HTTP_INTERNAL_ERROR); } finally { response.setStatus(java.net.HttpURLConnection.HTTP_OK); } }
public java.lang.String getUsernameWithProfile() { java.lang.String user = java.lang.String.format("%s@%s", org.apache.commons.lang.StringUtils.defaultIfEmpty(username, ""), org.apache.commons.lang.StringUtils.defaultIfEmpty(profile, "")); return "@".equals(user) ? "N/A" : user; }	public java.lang.String getUsernameWithProfile() { java.lang.String user = java.lang.String.format("%s@%s", java.util.Objects.toString(username, ""), java.util.Objects.toString(profile, "")); return "@".equals(user) ? "N/A" : user; }
public static void notifyClientOfAuditLogEvent(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, java.lang.String clientId, java.lang.String userName, java.lang.String loginErrMsg) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.ClientInfo clientInfo = ssoContext.getClienInfo(clientId); java.lang.String url = clientInfo.getClientNotificationCallback(); if (org.apache.commons.lang.StringUtils.isNotEmpty(url)) { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.sso.utils.SsoUtils.createPost(url); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(3); form.add(new org.apache.http.message.BasicNameValuePair("event", "auditLog")); form.add(new org.apache.http.message.BasicNameValuePair("userName", userName)); form.add(new org.apache.http.message.BasicNameValuePair("loginErrMsg", loginErrMsg)); form.add(new org.apache.http.message.BasicNameValuePair("clientSecret", clientInfo.getClientSecret())); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form, java.nio.charset.StandardCharsets.UTF_8)); org.ovirt.engine.core.sso.utils.SsoUtils.execute(request, ssoContext, clientId); } }	public static void notifyClientOfAuditLogEvent(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, java.lang.String sourceIp, java.lang.String clientId, java.lang.String userName, java.lang.String loginErrMsg) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.ClientInfo clientInfo = ssoContext.getClienInfo(clientId); if (clientInfo != null) { java.lang.String url = clientInfo.getClientNotificationCallback(); if (org.apache.commons.lang.StringUtils.isNotEmpty(url)) { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.sso.utils.SsoUtils.createPost(url); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(); form.add(new org.apache.http.message.BasicNameValuePair("event", "auditLog")); form.add(new org.apache.http.message.BasicNameValuePair("userName", userName)); form.add(new org.apache.http.message.BasicNameValuePair("loginErrMsg", loginErrMsg)); form.add(new org.apache.http.message.BasicNameValuePair("clientSecret", clientInfo.getClientSecret())); form.add(new org.apache.http.message.BasicNameValuePair("sourceIp", sourceIp)); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form, java.nio.charset.StandardCharsets.UTF_8)); org.ovirt.engine.core.sso.utils.SsoUtils.execute(request, ssoContext, clientId); } } }
private java.util.Optional<java.lang.String> checkExternalNetworkConnection(org.ovirt.engine.core.common.businessentities.network.Network network, java.util.List<java.lang.String> hostNetworks) { if (!(network.getProvidedBy().isSetPhysicalNetworkId())) { return java.util.Optional.empty(); } org.ovirt.engine.core.common.businessentities.network.Network physicalNetwork = networkDao.get(network.getProvidedBy().getPhysicalNetworkId()); return java.util.Optional.ofNullable((hostNetworks.contains(physicalNetwork.getName()) ? null : physicalNetwork.getName())); }	private java.util.Optional<java.lang.String> findPhysicalNetworkNotConnectedAndLinkedTo(org.ovirt.engine.core.common.businessentities.network.Network network, java.util.List<java.lang.String> hostNetworks) { if (!(network.getProvidedBy().isSetPhysicalNetworkId())) { return java.util.Optional.empty(); } org.ovirt.engine.core.common.businessentities.network.Network physicalNetwork = networkDao.get(network.getProvidedBy().getPhysicalNetworkId()); return java.util.Optional.ofNullable((hostNetworks.contains(physicalNetwork.getName()) ? null : physicalNetwork.getName())); }
protected boolean validate() { getName().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(255), new org.ovirt.engine.ui.uicommonweb.validation.I18NNameValidation() }); getDescription().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.AsciiOrNoneValidation() }); getHostAffinityRule().setIsValid((((getHostAffinityRule().getSelectedItem()) == (org.ovirt.engine.core.common.scheduling.EntityAffinityRule.DISABLED)) || (!(getHostsSelectionModel().getSelectedHostIds().isEmpty())))); return ((getName().getIsValid()) && (getDescription().getIsValid())) && (getHostAffinityRule().getIsValid()); }	protected boolean validate() { getName().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(255), new org.ovirt.engine.ui.uicommonweb.validation.I18NNameValidation() }); getDescription().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.AsciiOrNoneValidation() }); return (getName().getIsValid()) && (getDescription().getIsValid()); }
private java.nio.file.Path createInventoryFile(org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command) throws java.io.IOException { java.nio.file.Path inventoryFile = null; if ((command.inventoryFile()) == null) { org.ovirt.engine.core.common.utils.ansible.AnsibleExecutor.log.debug("Inventory hosts: {}", command.hostnames()); inventoryFile = java.nio.file.Files.createTempFile("ansible-inventory", ""); java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append("[all]"); sb.append(java.lang.System.lineSeparator()); sb.append(org.apache.commons.lang.StringUtils.join(command.hostnames(), java.lang.System.lineSeparator())); sb.append(java.lang.System.lineSeparator()); sb.append("[all:vars]"); sb.append(java.lang.System.lineSeparator()); sb.append("ansible_ssh_common_args='-F /dev/null'"); sb.append(java.lang.System.lineSeparator()); java.nio.file.Files.write(inventoryFile, sb.toString().getBytes()); command.inventoryFile(inventoryFile); } return inventoryFile; }	private java.nio.file.Path createInventoryFile(org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command) throws java.io.IOException { java.nio.file.Path inventoryFile = null; if ((command.inventoryFile()) == null) { org.ovirt.engine.core.common.utils.ansible.AnsibleExecutor.log.debug("Inventory hosts: {}", command.hostnames()); inventoryFile = java.nio.file.Files.createTempFile("ansible-inventory", ""); java.nio.file.Files.write(inventoryFile, org.apache.commons.lang.StringUtils.join(command.hostnames(), java.lang.System.lineSeparator()).getBytes()); command.inventoryFile(inventoryFile); } return inventoryFile; }
public org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData readVmTemplateFromOva(java.lang.String ovf) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate(); org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(template); ovfManager.importTemplateFromOva(ovf, fullEntityOvfData); template.setInterfaces(fullEntityOvfData.getInterfaces()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : fullEntityOvfData.getDiskImages()) { template.getDiskTemplateMap().put(disk.getId(), disk); } return fullEntityOvfData; }	public org.ovirt.engine.core.common.businessentities.VmTemplate readVmTemplateFromOva(java.lang.String ovf) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { ovf = format(ovf); org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate(); org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(template); ovfManager.importTemplateFromOva(ovf, fullEntityOvfData); template.setInterfaces(fullEntityOvfData.getInterfaces()); fullEntityOvfData.getDiskImages().forEach(( disk) -> template.getDiskTemplateMap().put(disk.getId(), disk)); return template; }
public void importTemplateFromOva(java.lang.String ovfstring, org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { org.ovirt.engine.core.utils.ovf.OvfReader ovf = null; try { ovf = new org.ovirt.engine.core.utils.ovf.OvfTemplateReader(new org.ovirt.engine.core.utils.ovf.xml.XmlDocument(ovfstring), fullEntityOvfData, osRepository); ovf.build(); initIcons(fullEntityOvfData.getVmBase()); } catch (java.lang.Exception ex) { java.lang.String message = generateOvfReaderErrorMessage(ovf, ex); logOvfLoadError(message, ovfstring); throw new org.ovirt.engine.core.utils.ovf.OvfReaderException(message); } }	public void importTemplateFromOva(java.lang.String ovfstring, org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { org.ovirt.engine.core.utils.ovf.OvfReader ovf = null; try { ovf = new org.ovirt.engine.core.utils.ovf.OvfOvaTemplateReader(new org.ovirt.engine.core.utils.ovf.xml.XmlDocument(ovfstring), fullEntityOvfData, osRepository); ovf.build(); initIcons(fullEntityOvfData.getVmBase()); } catch (java.lang.Exception ex) { java.lang.String message = generateOvfReaderErrorMessage(ovf, ex); logOvfLoadError(message, ovfstring); throw new org.ovirt.engine.core.utils.ovf.OvfReaderException(message); } }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createIcon() { org.gwtbootstrap3.client.ui.html.Span iconSpan = new org.gwtbootstrap3.client.ui.html.Span(); iconSpan.addStyleName(Styles.FONT_AWESOME_BASE); if (SnapshotStatus.IN_PREVIEW.equals(getEntity().getStatus())) { iconSpan.addStyleName(IconType.EYE.getCssName()); } else if (SnapshotStatus.LOCKED.equals(getEntity().getStatus())) { iconSpan.addStyleName(IconType.LOCK.getCssName()); } else { iconSpan.addStyleName((getEntity().containsMemory() ? IconType.MICROCHIP.getCssName() : IconType.CAMERA.getCssName())); } iconSpan.addStyleName(PatternflyConstants.PF_LIST_VIEW_ICON_SM); iconPanel.add(iconSpan); return iconPanel; }	@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createIcon() { org.gwtbootstrap3.client.ui.html.Span iconSpan = new org.gwtbootstrap3.client.ui.html.Span(); iconSpan.addStyleName(Styles.FONT_AWESOME_BASE); if (SnapshotStatus.IN_PREVIEW.equals(getEntity().getStatus())) { iconSpan.addStyleName(IconType.EYE.getCssName()); } else if (SnapshotStatus.LOCKED.equals(getEntity().getStatus())) { iconSpan.addStyleName(IconType.LOCK.getCssName()); } else if (getEntity().containsMemory()) { iconSpan.addStyleName(IconType.MICROCHIP.getCssName()); } else { iconSpan.addStyleName(IconType.CAMERA.getCssName()); } iconSpan.addStyleName(PatternflyConstants.PF_LIST_VIEW_ICON_SM); iconPanel.add(iconSpan); return iconPanel; }
protected void removeVmImages() { commandCoordinatorUtil.executeAsyncCommand(ActionType.RemoveAllVmImages, withRootCommandInfo(buildRemoveAllVmImagesParameters()), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.cloneContextAndDetachFromParent()); }	protected void removeVmImages() { runInternalAction(ActionType.RemoveAllVmImages, buildRemoveAllVmImagesParameters(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.cloneContextAndDetachFromParent()); }
private org.ovirt.engine.core.common.action.RemoveAllVmImagesParameters buildRemoveAllVmImagesParameters() { org.ovirt.engine.core.common.action.RemoveAllVmImagesParameters params = new org.ovirt.engine.core.common.action.RemoveAllVmImagesParameters(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId(), diskDao.getAllForVm(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()).stream().map(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class::cast).collect(java.util.stream.Collectors.toList())); params.setParentCommand(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getActionType()); params.setEntityInfo(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getEntityInfo()); params.setParentParameters(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters()); return params; }	private org.ovirt.engine.core.common.action.RemoveAllVmImagesParameters buildRemoveAllVmImagesParameters() { return new org.ovirt.engine.core.common.action.RemoveAllVmImagesParameters(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId(), diskDao.getAllForVm(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()).stream().map(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class::cast).collect(java.util.stream.Collectors.toList())); }
@org.junit.Test public void testGetSoundDevice() throws java.lang.Exception { assertEquals(org.ovirt.engine.core.utils.OsRepositoryImplTest.SOUND_DEVICE, OsRepositoryImpl.INSTANCE.getSoundDevice(777, null, ChipsetType.I440FX)); }	@org.junit.Test public void testGetSoundDevice() throws java.lang.Exception { assertEquals("ac97", OsRepositoryImpl.INSTANCE.getSoundDevice(777, null, ChipsetType.I440FX)); }
public org.ovirt.engine.core.common.businessentities.VmDevice addSoundDevice(org.ovirt.engine.core.common.businessentities.VmBase vmBase, java.util.function.Supplier<org.ovirt.engine.core.common.businessentities.Cluster> clusterSupplier) { org.ovirt.engine.core.common.businessentities.ChipsetType chipset = org.ovirt.engine.core.bll.utils.EmulatedMachineUtils.getEffectiveChipset(vmBase, clusterSupplier); if (vmBase instanceof org.ovirt.engine.core.common.businessentities.VmTemplate) { return addSoundDevice(vmBase.getId(), vmBase.getOsId(), org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(((org.ovirt.engine.core.common.businessentities.VmBase) (null)), clusterSupplier), chipset); } return addSoundDevice(vmBase.getId(), vmBase.getOsId(), clusterUtils.getCompatibilityVersion(vmBase), chipset); }	public org.ovirt.engine.core.common.businessentities.VmDevice addSoundDevice(org.ovirt.engine.core.common.businessentities.VmBase vmBase, java.util.function.Supplier<org.ovirt.engine.core.common.businessentities.Cluster> clusterSupplier) { org.ovirt.engine.core.common.businessentities.ChipsetType chipset = org.ovirt.engine.core.bll.utils.EmulatedMachineUtils.getEffectiveChipset(vmBase, clusterSupplier); org.ovirt.engine.core.compat.Version compatibilityVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(vmBase, clusterSupplier); return addSoundDevice(vmBase.getId(), vmBase.getOsId(), compatibilityVersion, chipset); }
@java.lang.Override public javax.ws.rs.core.Response exportToPathOnHost(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.ExportOvaParameters params = new org.ovirt.engine.core.common.action.ExportOvaParameters(); params.setEntityType(VmEntityType.TEMPLATE); params.setEntityId(guid); params.setProxyHostId(getHostId(action)); params.setDirectory(action.getDirectory()); params.setName(action.getFilename()); return doAction(ActionType.ExportOva, params, action); }	@java.lang.Override public javax.ws.rs.core.Response exportToPathOnHost(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.ExportOvaParameters params = new org.ovirt.engine.core.common.action.ExportOvaParameters(); params.setEntityType(VmEntityType.TEMPLATE); params.setEntityId(guid); params.setProxyHostId(getHostId(action)); params.setDirectory(action.getDirectory()); params.setName(action.getFilename()); return doAction(ActionType.ExportVmTemplateToOva, params, action); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostViolations = getHostViolationCount(false, hosts, vm, new org.ovirt.engine.core.common.scheduling.PerHostMessages()); org.ovirt.engine.core.compat.Guid currentHostId = vm.getRunOnVds(); int currentHostScore = hostViolations.getOrDefault(currentHostId, org.ovirt.engine.core.bll.scheduling.policyunits.VmToHostAffinityWeightPolicyUnit.DEFAULT_SCORE); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> retList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { int score = hostViolations.getOrDefault(host.getId(), org.ovirt.engine.core.bll.scheduling.policyunits.VmToHostAffinityWeightPolicyUnit.DEFAULT_SCORE); if ((score >= currentHostScore) && (!(host.getId().equals(currentHostId)))) { score += 1; } retList.add(new org.ovirt.engine.core.common.utils.Pair(host.getId(), score)); } return retList; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostViolations = getHostViolationCount(false, hosts, vm, new org.ovirt.engine.core.common.scheduling.PerHostMessages()); org.ovirt.engine.core.compat.Guid currentHostId = vm.getRunOnVds(); int currentHostScore = hostViolations.getOrDefault(currentHostId, org.ovirt.engine.core.bll.scheduling.policyunits.MaxSchedulerWeight); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> retList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { int score = hostViolations.getOrDefault(host.getId(), org.ovirt.engine.core.bll.scheduling.policyunits.VmToHostAffinityWeightPolicyUnit.DEFAULT_SCORE); if ((score >= currentHostScore) && (!(host.getId().equals(currentHostId)))) { score += 1; } retList.add(new org.ovirt.engine.core.common.utils.Pair(host.getId(), java.lang.Math.min(score, org.ovirt.engine.core.bll.scheduling.policyunits.MaxSchedulerWeight))); } return retList; }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> allocate(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.VDS host, boolean ignoreSecurityGroupsOnUpdate) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic); java.util.List<java.lang.String> securityGroups = getSecurityGroups(vnicProfile); java.lang.String hostId = getHostId(host); if (port == null) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(network.getProvidedBy()); com.woorea.openstack.quantum.model.Port portForCreate = createNewPortForAllocate(nic, securityGroups, hostId, externalNetwork); port = getClient().ports().create(portForCreate).execute(); } else { boolean securityGroupsChanged = (!ignoreSecurityGroupsOnUpdate) && (securityGroupsChanged(port.getSecurityGroups(), securityGroups)); boolean hostChanged = hostChanged(port, hostId); updatePort(port, securityGroupsChanged, hostChanged, securityGroups, hostId, nic); } java.util.Map<java.lang.String, java.lang.String> runtimeProperties = createPortAllocationRuntimeProperties(host.getId(), port); return runtimeProperties; } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }	@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> allocate(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.VDS host, boolean ignoreSecurityGroupsOnUpdate, java.lang.String hostBindingId) { if (hostBindingId == null) { hostBindingId = getHostId(host); org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.warn(("Host binding id for external network {} on host {} is null, using host id {} to allocate vNIC " + " {} instead. Please provide an after_get_caps hook for the plugin type {} on host {}"), network.getName(), host.getName(), hostBindingId, nic.getName(), getProvider().getAdditionalProperties().getPluginType(), host.getName()); } com.woorea.openstack.quantum.model.Port port = locatePort(nic); java.util.List<java.lang.String> securityGroups = getSecurityGroups(vnicProfile); if (port == null) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(network.getProvidedBy()); com.woorea.openstack.quantum.model.Port portForCreate = createNewPortForAllocate(nic, securityGroups, hostBindingId, externalNetwork); port = execute(getClient().ports().create(portForCreate)); } else { boolean securityGroupsChanged = (!ignoreSecurityGroupsOnUpdate) && (securityGroupsChanged(port.getSecurityGroups(), securityGroups)); updatePort(port, securityGroupsChanged, securityGroups, hostBindingId, nic); } java.util.Map<java.lang.String, java.lang.String> runtimeProperties = createPortAllocationRuntimeProperties(port); return runtimeProperties; }
protected java.util.Map<java.lang.String, java.lang.String> createPortAllocationRuntimeProperties(org.ovirt.engine.core.compat.Guid vdsId, com.woorea.openstack.quantum.model.Port port) { java.util.Map<java.lang.String, java.lang.String> runtimeProperties = new java.util.HashMap<>(); runtimeProperties.put("vnic_id", port.getId()); java.lang.String providerType = getProvider().getType().name(); runtimeProperties.put("provider_type", providerType); if (((port.getSecurityGroups()) != null) && (!(port.getSecurityGroups().isEmpty()))) { runtimeProperties.put("security_groups", org.apache.commons.lang.StringUtils.join(port.getSecurityGroups(), ',')); } java.lang.String pluginType = org.apache.commons.lang.StringUtils.defaultString(getProvider().getAdditionalProperties().getPluginType()); runtimeProperties.put("plugin_type", pluginType); java.lang.String bindingId = hostProviderBindingDao.get(vdsId, pluginType); if (bindingId != null) { runtimeProperties.put("binding:host_id", bindingId); } return runtimeProperties; }	protected java.util.Map<java.lang.String, java.lang.String> createPortAllocationRuntimeProperties(com.woorea.openstack.quantum.model.Port port) { java.util.Map<java.lang.String, java.lang.String> runtimeProperties = new java.util.HashMap<>(); runtimeProperties.put("vnic_id", port.getId()); java.lang.String providerType = getProvider().getType().name(); runtimeProperties.put("provider_type", providerType); if (((port.getSecurityGroups()) != null) && (!(port.getSecurityGroups().isEmpty()))) { runtimeProperties.put("security_groups", org.apache.commons.lang.StringUtils.join(port.getSecurityGroups(), ',')); } runtimeProperties.put("plugin_type", org.apache.commons.lang.StringUtils.defaultString(getProvider().getAdditionalProperties().getPluginType())); return runtimeProperties; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { long lowMemoryLimit = (parameters.containsKey(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName())) ? java.lang.Long.parseLong(parameters.get(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName())) : 0L; long highMemoryLimit = (parameters.containsKey(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName())) ? java.lang.Long.parseLong(parameters.get(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName())) : java.lang.Long.MAX_VALUE; float maxMemory = getMaxMemoryOfVdsInCluster(hosts); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> scores = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { scores.add(new org.ovirt.engine.core.common.utils.Pair(vds.getId(), calcHostScore(vds.getMaxSchedulingMemory(), maxMemory, lowMemoryLimit, highMemoryLimit))); } return scores; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { long lowMemoryLimit = (parameters.containsKey(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName())) ? java.lang.Long.parseLong(parameters.get(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName())) : 0L; long highMemoryLimit = (parameters.containsKey(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName())) ? java.lang.Long.parseLong(parameters.get(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName())) : java.lang.Long.MAX_VALUE; float maxMemory = (getMaxMemoryOfVdsInCluster(hosts)) * 1.1F; java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> scores = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { scores.add(new org.ovirt.engine.core.common.utils.Pair(vds.getId(), calcHostScore(vds.getMaxSchedulingMemory(), maxMemory, lowMemoryLimit, highMemoryLimit))); } return scores; }
private int calcHostScore(float hostSchedulingMem, float maxMemory, float lowMemoryLimit, float highMemoryLimit) { if (hostSchedulingMem > highMemoryLimit) { float memOverLimit = hostSchedulingMem - highMemoryLimit; hostSchedulingMem = java.lang.Math.max(0, (lowMemoryLimit - memOverLimit)); } return ((int) ((hostSchedulingMem / maxMemory) * ((MaxSchedulerWeight) - 1))) + 1; }	private int calcHostScore(float hostSchedulingMem, float maxMemory, float lowMemoryLimit, float highMemoryLimit) { if (hostSchedulingMem < lowMemoryLimit) { float memUnderLimit = lowMemoryLimit - hostSchedulingMem; hostSchedulingMem = java.lang.Math.min(maxMemory, (highMemoryLimit + memUnderLimit)); } return ((int) ((hostSchedulingMem / maxMemory) * ((MaxSchedulerWeight) - 1))) + 1; }
public javax.ws.rs.core.Response importVmTemplateFromConfiguration(org.ovirt.engine.api.model.Template template) { org.ovirt.engine.api.model.Initialization initialization = template.getInitialization(); org.ovirt.engine.api.model.Configuration config = initialization.getConfiguration(); org.ovirt.engine.core.common.businessentities.VmTemplate templateConfiguration = getEntity(org.ovirt.engine.core.common.businessentities.VmTemplate.class, QueryType.GetVmTemplateFromConfiguration, new org.ovirt.engine.core.common.queries.GetVmFromConfigurationQueryParameters(org.ovirt.engine.api.restapi.types.VmMapper.map(config.getType(), null), config.getData().trim()), ""); org.ovirt.engine.api.restapi.types.TemplateMapper.map(template, templateConfiguration); org.ovirt.engine.core.compat.Guid clusterId = (namedCluster(template)) ? getClusterId(template) : asGuid(template.getCluster().getId()); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters parameters = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); parameters.setVmTemplate(templateConfiguration); parameters.setClusterId(clusterId); if (initialization.isSetRegenerateIds()) { parameters.setImportAsNewEntity(initialization.isRegenerateIds()); } return performCreate(ActionType.ImportVmTemplateFromConfiguration, parameters, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetVmTemplate, org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class)); }	@java.lang.Override public javax.ws.rs.core.Response addFromConfiguration(org.ovirt.engine.api.model.Template template) { org.ovirt.engine.api.model.Initialization initialization = template.getInitialization(); org.ovirt.engine.api.model.Configuration config = initialization.getConfiguration(); org.ovirt.engine.core.common.businessentities.VmTemplate templateConfiguration = getEntity(org.ovirt.engine.core.common.businessentities.VmTemplate.class, QueryType.GetVmTemplateFromConfiguration, new org.ovirt.engine.core.common.queries.GetVmFromConfigurationQueryParameters(org.ovirt.engine.api.restapi.types.VmMapper.map(config.getType(), null), config.getData().trim()), ""); org.ovirt.engine.api.restapi.types.TemplateMapper.map(template, templateConfiguration); org.ovirt.engine.core.compat.Guid clusterId = (namedCluster(template)) ? getClusterId(template) : asGuid(template.getCluster().getId()); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters parameters = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); parameters.setVmTemplate(templateConfiguration); parameters.setClusterId(clusterId); if (initialization.isSetRegenerateIds()) { parameters.setImportAsNewEntity(initialization.isRegenerateIds()); } return performCreate(ActionType.ImportVmTemplateFromConfiguration, parameters, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetVmTemplate, org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class)); }
private static int setNetworkBootOrder(org.ovirt.engine.core.common.businessentities.VM vm, java.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> devices, int bootOrder) { for (org.ovirt.engine.core.common.businessentities.VmDevice pluggedInterface : org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.sortInterfacesByName(vm, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getPluggedManagedInterfaces(devices))) { pluggedInterface.setBootOrder((++bootOrder)); } return bootOrder; }	private static int setNetworkBootOrder(java.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> devices, int bootOrder, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces) { for (org.ovirt.engine.core.common.businessentities.VmDevice pluggedInterface : org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.sortInterfacesByName(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getPluggedManagedInterfaces(devices), interfaces)) { pluggedInterface.setBootOrder((++bootOrder)); } return bootOrder; }
private static int setDiskBootOrder(org.ovirt.engine.core.common.businessentities.VM vm, java.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> devices, int bootOrder) { java.util.LinkedList<org.ovirt.engine.core.common.businessentities.VmDevice> diskDevices = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.VmDevice device : devices) { if (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isDisk(device)) { org.ovirt.engine.core.compat.Guid id = device.getDeviceId(); if ((id != null) && (!(id.equals(Guid.Empty)))) { if ((device.getSnapshotId()) == null) { diskDevices.addFirst(device); } else { diskDevices.addLast(device); } } } } for (org.ovirt.engine.core.common.businessentities.VmDevice device : diskDevices) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getDiskVmElement(vm, device.getDeviceId()); if ((dve != null) && (dve.isBoot())) { device.setBootOrder((++bootOrder)); } } return bootOrder; }	private static int setDiskBootOrder(java.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> devices, int bootOrder, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDeviceId, org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> deviceIdTodiskVmElement) { java.util.LinkedList<org.ovirt.engine.core.common.businessentities.VmDevice> diskDevices = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.VmDevice device : devices) { if (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isDisk(device)) { org.ovirt.engine.core.compat.Guid id = device.getDeviceId(); if ((id != null) && (!(id.equals(Guid.Empty)))) { if ((device.getSnapshotId()) == null) { diskDevices.addFirst(device); } else { diskDevices.addLast(device); } } } } for (org.ovirt.engine.core.common.businessentities.VmDevice device : diskDevices) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = deviceIdTodiskVmElement.get(device.getId()); if ((dve != null) && (dve.isBoot())) { device.setBootOrder((++bootOrder)); } } return bootOrder; }
private boolean connectStorageServer(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections, boolean sendNetworkEventOnFailure) { if (connections == null) { return true; } org.ovirt.engine.core.common.vdscommands.StorageServerConnectionManagementVDSParameters parameters = new org.ovirt.engine.core.common.vdscommands.StorageServerConnectionManagementVDSParameters(getVds().getId(), getStoragePool().getId(), storageType, connections); parameters.setSendNetworkEventOnFailure(sendNetworkEventOnFailure); java.util.Map<java.lang.String, java.lang.String> retValues = ((java.util.Map<java.lang.String, java.lang.String>) (runVdsCommand(VDSCommandType.ConnectStorageServer, parameters).getReturnValue())); return storageHelperDirector.getItem(storageType).isConnectSucceeded(retValues, connections); }	private boolean connectStorageServer(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections, boolean sendNetworkEventOnFailure) { if ((connections == null) || (connections.isEmpty())) { return true; } org.ovirt.engine.core.common.vdscommands.StorageServerConnectionManagementVDSParameters parameters = new org.ovirt.engine.core.common.vdscommands.StorageServerConnectionManagementVDSParameters(getVds().getId(), getStoragePool().getId(), storageType, connections); parameters.setSendNetworkEventOnFailure(sendNetworkEventOnFailure); java.util.Map<java.lang.String, java.lang.String> retValues = ((java.util.Map<java.lang.String, java.lang.String>) (runVdsCommand(VDSCommandType.ConnectStorageServer, parameters).getReturnValue())); return storageHelperDirector.getItem(storageType).isConnectSucceeded(retValues, connections); }
private boolean connectFileStorageServers(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections) { java.util.Map<org.ovirt.engine.core.common.businessentities.StorageDomainType, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections>> connByType = connections.stream().collect(java.util.stream.Collectors.groupingBy(( c) -> storageDomainDao.getAllByConnectionId(org.ovirt.engine.core.compat.Guid.createGuidFromString(c.getId())).get(0).getStorageDomainType())); boolean connectSucceeded = connectStorageServer(storageType, connByType.get(StorageDomainType.Data), true); try { connectStorageServer(storageType, connByType.get(StorageDomainType.ISO), false); connectStorageServer(storageType, connByType.get(StorageDomainType.ImportExport), false); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.info("Ignoring failed connection to domain of type ISO/Import-Export.'"); } return connectSucceeded; }	private boolean connectFileStorageServers(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections) { java.util.Map<org.ovirt.engine.core.common.businessentities.StorageDomainType, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections>> connByType = connections.stream().collect(java.util.stream.Collectors.groupingBy(( c) -> storageDomainDao.getAllByConnectionId(org.ovirt.engine.core.compat.Guid.createGuidFromString(c.getId())).get(0).getStorageDomainType())); boolean connectSucceeded = connectStorageServer(storageType, connByType.get(StorageDomainType.Master), true); connectSucceeded &= connectStorageServer(storageType, connByType.get(StorageDomainType.Data), true); connectStorageServerIgnoreFailure(storageType, connByType.get(StorageDomainType.ISO), StorageDomainType.ISO); connectStorageServerIgnoreFailure(storageType, connByType.get(StorageDomainType.ImportExport), StorageDomainType.ImportExport); return connectSucceeded; }
protected void executeVdsCommandWithNetworkEvent(boolean sendNetworkEvent) { try { executeVdsBrokerCommand(); } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); updateNetworkException(ex, ex.getMessage()); if (sendNetworkEvent) { networkError.fire(ex); } throw ex; } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); throw ex; } catch (org.ovirt.engine.core.vdsbroker.TransportRunTimeException ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException networkException = createNetworkException(ex); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); if (sendNetworkEvent) { networkError.fire(networkException); } throw networkException; } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); if ((getAndSetVdsStatic()) == null) { log.error("Failed in '{}' method, for vds id: '{}': {}", org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getCommandName(), org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getParameters().getVdsId(), e.getMessage()); } else { log.error("Failed in '{}' method, for vds: '{}'; host: '{}': {}", org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getCommandName(), getAndSetVdsStatic().getName(), getAndSetVdsStatic().getHostName(), e.getMessage()); } throw e; } }	protected void executeVdsCommandWithNetworkEvent(boolean sendNetworkErrorEvent) { try { executeVdsBrokerCommand(); } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); updateNetworkException(ex, ex.getMessage()); if (sendNetworkErrorEvent) { networkError.fire(ex); } throw ex; } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); throw ex; } catch (org.ovirt.engine.core.vdsbroker.TransportRunTimeException ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException networkException = createNetworkException(ex); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); if (sendNetworkErrorEvent) { networkError.fire(networkException); } throw networkException; } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); if ((getAndSetVdsStatic()) == null) { log.error("Failed in '{}' method, for vds id: '{}': {}", org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getCommandName(), org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getParameters().getVdsId(), e.getMessage()); } else { log.error("Failed in '{}' method, for vds: '{}'; host: '{}': {}", org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getCommandName(), getAndSetVdsStatic().getName(), getAndSetVdsStatic().getHostName(), e.getMessage()); } throw e; } }
@org.junit.Test public void testExtractIpv4AddressEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractAddress(com.google.common.collect.ImmutableMap.of(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.ADDR, "")), nullValue()); }	@org.junit.Test public void testExtractIpv4AddressEmptyString() { assertThat(vdsBrokerObjectsBuilder.extractAddress(com.google.common.collect.ImmutableMap.of(VdsProperties.ADDR, "")), nullValue()); }
@org.junit.Test public void testExtractIpv4SubnetEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractSubnet(com.google.common.collect.ImmutableMap.of(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.NETMASK, "")), nullValue()); }	@org.junit.Test public void testExtractIpv4SubnetEmptyString() { assertThat(vdsBrokerObjectsBuilder.extractSubnet(com.google.common.collect.ImmutableMap.of(VdsProperties.NETMASK, "")), nullValue()); }
@org.junit.Test public void testExtractIpv4GatewayEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractGateway(com.google.common.collect.ImmutableMap.of(VdsProperties.GLOBAL_GATEWAY, "")), nullValue()); }	@org.junit.Test public void testExtractIpv4GatewayEmptyString() { assertThat(vdsBrokerObjectsBuilder.extractGateway(com.google.common.collect.ImmutableMap.of(VdsProperties.GLOBAL_GATEWAY, "")), nullValue()); }
private static java.lang.String extractIPV6gateway(java.util.Map<java.lang.String, java.lang.Object> effectiveProperties) { java.lang.String gateway = ((java.lang.String) (effectiveProperties.get(VdsProperties.IPV6_GLOBAL_GATEWAY))); return org.apache.commons.lang.StringUtils.isEmpty(gateway) ? null : gateway; }	private java.lang.String extractNonEmptyProperty(java.util.Map<java.lang.String, java.lang.Object> properties, java.lang.String name) { java.lang.String value = ((java.lang.String) (properties.get(name))); return org.apache.commons.lang.StringUtils.isEmpty(value) ? null : value; }
static java.lang.String extractGateway(java.util.Map<java.lang.String, java.lang.Object> properties) { java.lang.String gateway = ((java.lang.String) (properties.get(VdsProperties.GLOBAL_GATEWAY))); return org.apache.commons.lang.StringUtils.isEmpty(gateway) ? null : gateway; }	java.lang.String extractGateway(java.util.Map<java.lang.String, java.lang.Object> properties) { return extractNonEmptyProperty(properties, VdsProperties.GLOBAL_GATEWAY); }
static java.lang.String extractSubnet(java.util.Map<java.lang.String, java.lang.Object> properties) { java.lang.String netmask = ((java.lang.String) (properties.get(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.NETMASK))); return org.apache.commons.lang.StringUtils.isEmpty(netmask) ? null : netmask; }	java.lang.String extractSubnet(java.util.Map<java.lang.String, java.lang.Object> properties) { return extractNonEmptyProperty(properties, VdsProperties.NETMASK); }
@org.junit.Test public void testExtractIpv6AddressEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractIpv6Address(""), nullValue()); }	@org.junit.Test public void testExtractIpv6AddressEmptyString() { assertThat(vdsBrokerObjectsBuilder.extractIpv6Address(""), nullValue()); }
static java.lang.String extractAddress(java.util.Map<java.lang.String, java.lang.Object> properties) { java.lang.String address = ((java.lang.String) (properties.get(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.ADDR))); return org.apache.commons.lang.StringUtils.isEmpty(address) ? null : address; }	java.lang.String extractAddress(java.util.Map<java.lang.String, java.lang.Object> properties) { return extractNonEmptyProperty(properties, VdsProperties.ADDR); }
@org.junit.Test public void testIsNetworkInSyncWhenIpv4GatewayBothBlank() { initIpv4ConfigurationStaticBootProtocol(Ipv4BootProtocol.STATIC_IP); ipv4Address.setGateway(null); iface.setIpv4Gateway(null); assertThat(createTestedInstance().isNetworkInSync(), is(true)); }	@org.junit.Test public void testIsNetworkInSyncWhenIpv4GatewayBothNull() { initIpv4ConfigurationStaticBootProtocol(Ipv4BootProtocol.STATIC_IP); ipv4Address.setGateway(null); iface.setIpv4Gateway(null); assertThat(createTestedInstance().isNetworkInSync(), is(true)); }
private boolean shouldAbortOnClientInactivityTimeout(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts, java.lang.Integer idleTimeFromTicket) { int inactivityTimeout = getTransferImageClientInactivityTimeoutInSeconds(); boolean timeoutExceeded = (idleTimeFromTicket != null) ? idleTimeFromTicket > inactivityTimeout : ts > (((entity.getLastUpdated().getTime()) / 1000) + inactivityTimeout); return (((inactivityTimeout > 0) && timeoutExceeded) && (entity.getPhase().canBePaused())) && (!(entity.getActive())); }	private boolean shouldAbortOnClientInactivityTimeout(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts, java.lang.Integer idleTimeFromTicket) { int inactivityTimeout = getTransferImageClientInactivityTimeoutInSeconds(); boolean timeoutExceeded = (idleTimeFromTicket != null) ? idleTimeFromTicket > inactivityTimeout : ts > (((entity.getLastUpdated().getTime()) / 1000) + inactivityTimeout); return ((inactivityTimeout > 0) && timeoutExceeded) && (!(entity.getActive())); }
public static void toStringBuilder(java.util.Map<java.lang.String, ?> map, java.lang.StringBuilder builder) { if (map == null) { builder.append("{}"); return; } builder.append("{"); java.util.Iterator<? extends java.util.Map.Entry<java.lang.String, ?>> iterator = map.entrySet().iterator(); while (iterator.hasNext()) { java.util.Map.Entry<java.lang.String, ?> entry = iterator.next(); builder.append(java.lang.String.format("%1$s=", entry.getKey())); org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(entry.getValue(), builder); if (iterator.hasNext()) { builder.append(", "); } } builder.append("}"); }	private static void toStringBuilder(java.util.Map<java.lang.String, ?> map, java.lang.StringBuilder builder) { builder.append("{"); java.util.Iterator<? extends java.util.Map.Entry<java.lang.String, ?>> iterator = map.entrySet().iterator(); while (iterator.hasNext()) { java.util.Map.Entry<java.lang.String, ?> entry = iterator.next(); builder.append(java.lang.String.format("%1$s=", entry.getKey())); org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(entry.getValue(), builder); if (iterator.hasNext()) { builder.append(", "); } } builder.append("}"); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("Private SPM Id", privateSpmId).append("Private SPM Version", privateSpmLVER).append("SPM Status", privateSpmStatus).build(); }	@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("SPM Id", spmId).append("SPM LVER", spmLVER).append("SPM Status", spmStatus).build(); }
public static void toStringBuilder(java.lang.Object object, java.lang.StringBuilder builder) { if (object == null) { return; } if (object instanceof java.lang.Object[]) { org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(((java.lang.Object[]) (object)), builder); } else if (object instanceof java.util.Map) { org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(((java.util.Map<java.lang.String, java.lang.Object>) (object)), builder); } else if ((!(object instanceof java.lang.String)) && (object instanceof java.lang.Iterable)) { org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(((java.lang.Iterable) (object)), builder); } else { builder.append(object.toString()); } }	public static void toStringBuilder(java.lang.Object object, java.lang.StringBuilder builder) { if (object == null) { return; } if (object instanceof java.lang.Iterable) { org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(((java.lang.Iterable<java.lang.Object>) (object)), builder); } else if (object instanceof java.lang.Object[]) { org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(java.util.Arrays.asList(((java.lang.Object[]) (object))), builder); } else if (object instanceof java.util.Map) { org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(((java.util.Map<java.lang.String, java.lang.Object>) (object)), builder); } else { builder.append(object.toString()); } }
@java.lang.Override protected org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.common.businessentities.storage.ImageTransfer> createEntityRowMapper() { return ( rs, rowNum) -> { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); entity.setId(getGuidDefaultEmpty(rs, "command_id")); entity.setCommandType(org.ovirt.engine.core.common.action.ActionType.forValue(rs.getInt("command_type"))); entity.setPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.forValue(rs.getInt("phase"))); entity.setType(org.ovirt.engine.core.common.businessentities.storage.TransferType.forValue(rs.getInt("type"))); entity.setActive(rs.getBoolean("active")); entity.setLastUpdated(new java.util.Date(rs.getTimestamp("last_updated").getTime())); entity.setMessage(rs.getString("message")); entity.setVdsId(getGuid(rs, "vds_id")); entity.setDiskId(getGuid(rs, "disk_id")); entity.setImagedTicketId(getGuid(rs, "imaged_ticket_id")); entity.setProxyUri(rs.getString("proxy_uri")); entity.setDaemonUri(rs.getString("daemon_uri")); entity.setSignedTicket(rs.getString("signed_ticket")); entity.setBytesSent(rs.getLong("bytes_sent")); entity.setBytesTotal(rs.getLong("bytes_total")); entity.setClientInactivityTimeout(rs.getInt("client_inactivity_timeout")); return entity; }; }	@java.lang.Override protected org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.common.businessentities.storage.ImageTransfer> createEntityRowMapper() { return ( rs, rowNum) -> { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); entity.setId(getGuidDefaultEmpty(rs, "command_id")); entity.setCommandType(org.ovirt.engine.core.common.action.ActionType.forValue(rs.getInt("command_type"))); entity.setPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.forValue(rs.getInt("phase"))); entity.setType(org.ovirt.engine.core.common.businessentities.storage.TransferType.forValue(rs.getInt("type"))); entity.setActive(rs.getBoolean("active")); entity.setLastUpdated(new java.util.Date(rs.getTimestamp("last_updated").getTime())); entity.setMessage(rs.getString("message")); entity.setVdsId(getGuid(rs, "vds_id")); entity.setDiskId(getGuid(rs, "disk_id")); entity.setImagedTicketId(getGuid(rs, "imaged_ticket_id")); entity.setProxyUri(rs.getString("proxy_uri")); entity.setDaemonUri(rs.getString("daemon_uri")); entity.setSignedTicket(rs.getString("signed_ticket")); entity.setBytesSent(rs.getLong("bytes_sent")); entity.setBytesTotal(rs.getLong("bytes_total")); entity.setClientInactivityTimeout(((java.lang.Integer) (rs.getObject("client_inactivity_timeout")))); return entity; }; }
private javax.ws.rs.core.Response performCreate(org.ovirt.engine.api.model.ImageTransfer imageTransfer, org.ovirt.engine.core.common.action.TransferDiskImageParameters params) { updateTransferType(imageTransfer, params); if ((imageTransfer.isSetHost()) && (imageTransfer.getHost().isSetId())) { params.setVdsId(org.ovirt.engine.core.compat.Guid.createGuidFromString(imageTransfer.getHost().getId())); } if (imageTransfer.isSetClientInactivityTimeout()) { params.setClientInactivityTimeout(imageTransfer.getClientInactivityTimeout()); } return performCreate(ActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }	private javax.ws.rs.core.Response performCreate(org.ovirt.engine.api.model.ImageTransfer imageTransfer, org.ovirt.engine.core.common.action.TransferDiskImageParameters params) { updateTransferType(imageTransfer, params); if ((imageTransfer.isSetHost()) && (imageTransfer.getHost().isSetId())) { params.setVdsId(org.ovirt.engine.core.compat.Guid.createGuidFromString(imageTransfer.getHost().getId())); } if (imageTransfer.isSetInactivityTimeout()) { params.setClientInactivityTimeout(imageTransfer.getInactivityTimeout()); } return performCreate(ActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, T vm) { vm.setMemSizeMb(model.getMemSize().getEntity()); vm.setMaxMemorySizeMb(model.getMaxMemorySize().getEntity()); if (model.getIoThreadsEnabled().getEntity()) { vm.setNumOfIoThreads(org.ovirt.engine.ui.uicommonweb.builders.vm.HwOnlyCoreUnitToVmBaseBuilder.DEFAULT_NUM_OF_IOTHREADS); } else { vm.setNumOfIoThreads(0); } vm.setNumOfSockets(model.getNumOfSockets().getSelectedItem()); vm.setCpuPerSocket(model.getCoresPerSocket().getSelectedItem()); vm.setThreadsPerCpu(model.getThreadsPerCore().getSelectedItem()); vm.setDefaultDisplayType(model.getDisplayType().getSelectedItem()); vm.setNumOfMonitors(model.getNumOfMonitors().getSelectedItem()); vm.setSmartcardEnabled(model.getIsSmartcardEnabled().getEntity()); vm.setSsoMethod(model.extractSelectedSsoMethod()); vm.setMinAllocatedMem(model.getMinAllocatedMemory().getEntity()); vm.setDefaultBootSequence(model.getBootSequence()); vm.setSingleQxlPci(model.getIsSingleQxlEnabled().getEntity()); vm.setCustomEmulatedMachine(model.getEmulatedMachine().getSelectedItem()); vm.setBiosType(BiosType.SEA_BIOS); vm.setCustomCpuName(model.getCustomCpu().getSelectedItem()); }	@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, T vm) { vm.setMemSizeMb(model.getMemSize().getEntity()); vm.setMaxMemorySizeMb(model.getMaxMemorySize().getEntity()); if (model.getIoThreadsEnabled().getEntity()) { vm.setNumOfIoThreads(org.ovirt.engine.ui.uicommonweb.builders.vm.HwOnlyCoreUnitToVmBaseBuilder.DEFAULT_NUM_OF_IOTHREADS); } else { vm.setNumOfIoThreads(0); } vm.setNumOfSockets(model.getNumOfSockets().getSelectedItem()); vm.setCpuPerSocket(model.getCoresPerSocket().getSelectedItem()); vm.setThreadsPerCpu(model.getThreadsPerCore().getSelectedItem()); vm.setDefaultDisplayType(model.getDisplayType().getSelectedItem()); vm.setNumOfMonitors(model.getNumOfMonitors().getSelectedItem()); vm.setSmartcardEnabled(model.getIsSmartcardEnabled().getEntity()); vm.setSsoMethod(model.extractSelectedSsoMethod()); vm.setMinAllocatedMem(model.getMinAllocatedMemory().getEntity()); vm.setDefaultBootSequence(model.getBootSequence()); vm.setSingleQxlPci(model.getIsSingleQxlEnabled().getEntity()); vm.setCustomEmulatedMachine(model.getEmulatedMachine().getSelectedItem()); vm.setCustomCpuName(model.getCustomCpu().getSelectedItem()); }
public void updateDnsResolverConfiguration(org.ovirt.engine.core.compat.Guid vdsId, org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration reportedDnsResolverConfiguration) { if (reportedDnsResolverConfiguration == null) { dnsResolverConfigurationDao.removeByVdsDynamicId(vdsId); } else { if ((reportedDnsResolverConfiguration.getId()) == null) { reportedDnsResolverConfiguration.setId(vdsId); dnsResolverConfigurationDao.save(reportedDnsResolverConfiguration); } else { dnsResolverConfigurationDao.update(reportedDnsResolverConfiguration); } } }	public void updateDnsResolverConfiguration(org.ovirt.engine.core.compat.Guid vdsId, org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration reportedDnsResolverConfiguration) { if (reportedDnsResolverConfiguration == null) { dnsResolverConfigurationDao.removeByVdsDynamicId(vdsId); } else { if ((reportedDnsResolverConfiguration.getId()) == null) { reportedDnsResolverConfiguration.setId(vdsId); dnsResolverConfigurationDao.save(reportedDnsResolverConfiguration); } else { org.apache.commons.lang.Validate.isTrue(java.util.Objects.equals(vdsId, reportedDnsResolverConfiguration.getId())); dnsResolverConfigurationDao.update(reportedDnsResolverConfiguration); } } }
protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { return java.util.stream.IntStream.range(0, NAMES.length).filter(( x) -> !notFound).boxed().collect(java.util.stream.Collectors.toMap(this::getVmTemplateEntity, java.util.ArrayList::new)); }	protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { if (notFound) { return java.util.Collections.emptyMap(); } return java.util.stream.IntStream.range(0, NAMES.length).boxed().collect(java.util.stream.Collectors.toMap(this::getVmTemplateEntity, java.util.ArrayList::new)); }
protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { return java.util.stream.IntStream.range(0, NAMES.length).filter(( i) -> !notFound).boxed().collect(java.util.stream.Collectors.toMap(this::getVmTemplateEntity, java.util.ArrayList::new)); }	protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { if (notFound) { return java.util.Collections.emptyMap(); } return java.util.stream.IntStream.range(0, NAMES.length).boxed().collect(java.util.stream.Collectors.toMap(this::getVmTemplateEntity, java.util.ArrayList::new)); }
protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { return java.util.stream.IntStream.range(0, NAMES.length).filter(( x) -> !notFound).boxed().collect(java.util.stream.Collectors.toMap(this::getEntity, java.util.ArrayList::new)); }	protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { if (notFound) { return java.util.Collections.emptyMap(); } return java.util.stream.IntStream.range(0, NAMES.length).boxed().collect(java.util.stream.Collectors.toMap(this::getEntity, java.util.ArrayList::new)); }
public void createVolumeSnapshot() { if ((getWindow()) != null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getSelectedItem(); org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel snapshotModel = org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel.createVolumeSnapshotModel(this); setWindow(snapshotModel); snapshotModel.startProgress(); snapshotModel.getClusterName().setEntity(volumeEntity.getClusterName()); snapshotModel.getVolumeName().setEntity(volumeEntity.getName()); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("onCreateSnapshot", this); snapshotModel.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); snapshotModel.getCommands().add(cancelCommand); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getIsGlusterVolumeSnapshotCliScheduleEnabled(new org.ovirt.engine.ui.uicommonweb.models.volumes.AsyncQuery(( isCliScheduleEnabled) -> { snapshotModel.getDisableCliSchedule().setEntity(isCliScheduleEnabled); snapshotModel.stopProgress(); }), volumeEntity.getClusterId()); }	public void createVolumeSnapshot() { if ((getWindow()) != null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getSelectedItem(); org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel snapshotModel = org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel.createVolumeSnapshotModel(this, volumeEntity); setWindow(snapshotModel); snapshotModel.startProgress(); snapshotModel.getClusterName().setEntity(volumeEntity.getClusterName()); snapshotModel.getVolumeName().setEntity(volumeEntity.getName()); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("onCreateSnapshot", this); snapshotModel.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); snapshotModel.getCommands().add(cancelCommand); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getIsGlusterVolumeSnapshotCliScheduleEnabled(new org.ovirt.engine.ui.uicommonweb.models.volumes.AsyncQuery(( isCliScheduleEnabled) -> { snapshotModel.getDisableCliSchedule().setEntity(isCliScheduleEnabled); snapshotModel.stopProgress(); }), volumeEntity.getClusterId()); }
public static org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel createVolumeSnapshotModel(org.ovirt.engine.ui.uicommonweb.ICommandTarget commandTarget) { final org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel snapshotModel = new org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel(true, true); snapshotModel.setHelpTag(HelpTag.new_volume_snapshot); snapshotModel.setHashName("new_volume_snapshot"); snapshotModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().createScheduleVolumeSnapshotTitle()); return snapshotModel; }	public static org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel createVolumeSnapshotModel(org.ovirt.engine.ui.uicommonweb.ICommandTarget commandTarget, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity) { final org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel snapshotModel = new org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel(true, (!(volumeEntity.getSnapshotScheduled()))); snapshotModel.setHelpTag(HelpTag.new_volume_snapshot); snapshotModel.setHashName("new_volume_snapshot"); snapshotModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().createScheduleVolumeSnapshotTitle()); return snapshotModel; }
public boolean isDefaultMtu() { return (mtu) == 0; }	public boolean isDefaultMtu() { return (mtu) == (org.ovirt.engine.core.common.businessentities.network.Network.DEFAULT_MTU); }
protected int calcEvenDistributionScore(float maxMemoryOfVdsInCluster, org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm, boolean countThreadsAsCores) { java.lang.Integer effectiveCpuCores = slaValidator.getEffectiveCpuCores(vds, countThreadsAsCores); if ((effectiveCpuCores == null) || ((vds.getUsageCpuPercent()) == null)) { return (MaxSchedulerWeight) - 1; } int score = ((int) (java.lang.Math.round(calcHostLoadPerCore(vds, vm, effectiveCpuCores)))) + 1; return java.lang.Math.min(score, ((MaxSchedulerWeight) - 1)); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { boolean countThreadsAsCores = cluster.getCountThreadsAsCores(); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> scores = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { scores.add(new org.ovirt.engine.core.common.utils.Pair(vds.getId(), calcHostScore(vds, vm, countThreadsAsCores))); } return scores; }
public static int getMtuActualValue(org.ovirt.engine.core.common.businessentities.network.Network network) { return (network.getMtu()) == 0 ? org.ovirt.engine.core.utils.NetworkUtils.getDefaultMtu() : network.getMtu(); }	public static int getMtuActualValue(org.ovirt.engine.core.common.businessentities.network.Network network) { return network.isDefaultMtu() ? org.ovirt.engine.core.utils.NetworkUtils.getDefaultMtu() : network.getMtu(); }
public void loadVmFromOva() { clearForLoad(); if (!(validateOvaConfiguration())) { return; } startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmFromOva(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { if (returnValue.getSucceeded()) { java.lang.Object result = returnValue.getReturnValue(); List<org.ovirt.engine.core.common.businessentities.VM> vms; if (result instanceof org.ovirt.engine.core.common.businessentities.VM) { vms = java.util.Collections.singletonList(((org.ovirt.engine.core.common.businessentities.VM) (result))); } else { Map<org.ovirt.engine.core.common.businessentities.VM, java.lang.String> vmToOva = ((Map<org.ovirt.engine.core.common.businessentities.VM, java.lang.String>) (result)); vms = new org.ovirt.engine.ui.uicommonweb.models.vms.ArrayList<>(vmToOva.keySet()); vmNameToOva = vmToOva.keySet().stream().collect(java.util.stream.Collectors.toMap(org.ovirt.engine.core.common.businessentities.VM::getName, ( vm) -> vmToOva.get(vm))); } updateVms(vms); } else { setError(messages.failedToLoadOva(getOvaPath().getEntity())); } stopProgress(); }), getHosts().getSelectedItem().getId(), getOvaPath().getEntity()); }	public void loadVmFromOva() { clearForLoad(); if (!(validateOvaConfiguration())) { return; } startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmFromOva(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { if (returnValue.getSucceeded()) { Map<org.ovirt.engine.core.common.businessentities.VM, java.lang.String> vmToOva = returnValue.getReturnValue(); vmNameToOva = vmToOva.entrySet().stream().collect(java.util.stream.Collectors.toMap(( e) -> e.getKey().getName(), java.util.Map.Entry::getValue)); updateVms(vmToOva.keySet()); } else { setError(messages.failedToLoadOva(getOvaPath().getEntity())); } stopProgress(); }), getHosts().getSelectedItem().getId(), getOvaPath().getEntity()); }
@java.lang.Override protected void executeQueryCommand() { java.lang.String stdout = runAnsibleQueryOvaInfoPlaybook(); stdout = stdout.trim(); java.lang.Object result = (stdout.startsWith("{")) ? parseOvfs(stdout) : parseOvf(stdout); org.ovirt.engine.core.bll.GetVmFromOvaQuery.setReturnValue(result); org.ovirt.engine.core.bll.GetVmFromOvaQuery.getQueryReturnValue().setSucceeded((result != null)); }	@java.lang.Override protected void executeQueryCommand() { java.lang.String stdout = runAnsibleQueryOvaInfoPlaybook(); stdout = stdout.trim(); java.lang.Object result = (org.ovirt.engine.core.bll.GetVmFromOvaQuery.getParameters().isListDirectory()) ? parseOvfs(stdout) : parseOvf(stdout); org.ovirt.engine.core.bll.GetVmFromOvaQuery.setReturnValue(result); org.ovirt.engine.core.bll.GetVmFromOvaQuery.getQueryReturnValue().setSucceeded((result != null)); }
private java.util.Map<org.ovirt.engine.core.common.businessentities.VM, java.lang.String> parseOvfs(java.lang.String stdout) { stdout = stdout.substring(1, ((stdout.length()) - 1)); return java.util.Arrays.stream(stdout.split("::")).map(org.ovirt.engine.core.bll.GetVmFromOvaQuery.OVA_TO_OVF_PATTERN::matcher).filter(java.util.regex.Matcher::matches).collect(java.util.stream.Collectors.toMap(( m) -> parseOvf(m.group(2)), ( m) -> m.group(1))); }	private java.util.Map<org.ovirt.engine.core.common.businessentities.VM, java.lang.String> parseOvfs(java.lang.String stdout) { if (stdout.startsWith("{")) { stdout = stdout.substring(1, ((stdout.length()) - 1)); return java.util.Arrays.stream(stdout.split("::")).map(( str) -> { int delimiter = str.indexOf('='); return new java.lang.String[]{ str.substring(0, delimiter), str.substring((delimiter + 1)) }; }).collect(java.util.stream.Collectors.toMap(( arr) -> parseOvf(arr[1]), ( arr) -> arr[0])); } else { org.ovirt.engine.core.common.businessentities.VM vm = parseOvf(stdout); return new java.util.HashMap(java.util.Collections.singletonMap(vm, null)); } }
public java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> getVmUsingMac(org.ovirt.engine.core.compat.Guid macPoolId, java.lang.String mac) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vmsById = getAllVmsInSystem(getIdsOfAllClustersHavingMacPool(macPoolId)).filter(( vm) -> !(vm.isStateless())).collect(java.util.stream.Collectors.toMap(VM::getId, java.util.function.Function.identity())); java.util.Optional<org.ovirt.engine.core.compat.Guid> vmUsingMacId = getVmIdUsingMac(vmsById.keySet().stream().flatMap(( vmId) -> getVmInterfaces(vmId).stream()), mac); return vmUsingMacId.map(vmsById::get); }	public java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> getVmUsingMac(org.ovirt.engine.core.compat.Guid macPoolId, java.lang.String mac) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vmsById = getAllVmsInClusters(getIdsOfAllClustersHavingMacPool(macPoolId)).collect(java.util.stream.Collectors.toMap(VM::getId, java.util.function.Function.identity())); java.util.Optional<org.ovirt.engine.core.compat.Guid> vmUsingMacId = getVmIdUsingMac(vmsById.keySet().stream().flatMap(( vmId) -> getVmInterfaces(vmId).stream()), mac); return vmUsingMacId.map(vmsById::get); }
public org.ovirt.engine.core.bll.ValidationResult isMacAssignableValidator() { boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); boolean illegalDuplicateMacUsage = (!allowDupMacs) && (macPool.isMacInUse(macAddress)); if (illegalDuplicateMacUsage) { java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> optionalVm = macsUsedAcrossWholeSystem.getVmUsingMac(macPool.getId(), macAddress); if (!(optionalVm.isPresent())) { optionalVm = macsUsedAcrossWholeSystem.getSnapshotUsingMac(macPool.getId(), macAddress); } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.MacAddressValidator.VAR_MAC_IN_USE, macAddress), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.MacAddressValidator.VAR_IN_USE_BY, (optionalVm.isPresent() ? optionalVm.get().getName() : ""))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult isMacAssignableValidator() { boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); boolean illegalDuplicateMacUsage = (!allowDupMacs) && (macPool.isMacInUse(macAddress)); if (illegalDuplicateMacUsage) { java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> optionalVm = macsUsedAcrossWholeSystem.getVmUsingMac(macPool.getId(), macAddress); if (!(optionalVm.isPresent())) { optionalVm = macsUsedAcrossWholeSystem.getSnapshotUsingMac(macPool.getId(), macAddress); } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.MacAddressValidator.VAR_MAC_ADDRESS, macAddress), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.MacAddressValidator.VAR_VM_NAME, (optionalVm.isPresent() ? optionalVm.get().getName() : ""))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public java.util.List<java.lang.String> getMacsForMacPool(org.ovirt.engine.core.compat.Guid macPoolId) { java.util.List<org.ovirt.engine.core.compat.Guid> idsOfAllClustersHavingMacPool = getIdsOfAllClustersHavingMacPool(macPoolId); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vmsById = getAllVmsInSystem(idsOfAllClustersHavingMacPool).collect(java.util.stream.Collectors.toMap(VM::getId, java.util.function.Function.identity())); java.util.stream.Stream<org.ovirt.engine.core.compat.Guid> idsOfRunningStatelessVMs = getAllStatelessVms(vmsById.values()).map(VM::getId); java.util.stream.Stream<org.ovirt.engine.core.common.businessentities.VM> statelessSnapshotsOfRunningVMs = idsOfRunningStatelessVMs.map(snapshotsManager::getVmConfigurationInStatelessSnapshotOfVm).filter(java.util.Optional::isPresent).map(java.util.Optional::get); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>> snapshottedInterfacesByVmId = statelessSnapshotsOfRunningVMs.collect(java.util.stream.Collectors.toMap(VM::getId, VM::getInterfaces)); java.util.List<java.lang.String> macsToBeAllocated = vmsById.keySet().stream().flatMap(( vmId) -> calculateAllMacsUsedInVmAndItsSnapshot(getVmInterfaces(vmId), snapshottedInterfacesByVmId.get(vmId))).collect(java.util.stream.Collectors.toList()); return macsToBeAllocated; }	public java.util.List<java.lang.String> getMacsForMacPool(org.ovirt.engine.core.compat.Guid macPoolId) { java.util.List<org.ovirt.engine.core.compat.Guid> idsOfAllClustersHavingMacPool = getIdsOfAllClustersHavingMacPool(macPoolId); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vmsById = getAllVmsInClusters(idsOfAllClustersHavingMacPool).collect(java.util.stream.Collectors.toMap(VM::getId, java.util.function.Function.identity())); java.util.stream.Stream<org.ovirt.engine.core.compat.Guid> idsOfRunningStatelessVMs = getAllStatelessVms(vmsById.values()).map(VM::getId); java.util.stream.Stream<org.ovirt.engine.core.common.businessentities.VM> statelessSnapshotsOfRunningVMs = idsOfRunningStatelessVMs.map(snapshotsManager::getVmConfigurationInStatelessSnapshotOfVm).filter(java.util.Optional::isPresent).map(java.util.Optional::get); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>> snapshottedInterfacesByVmId = statelessSnapshotsOfRunningVMs.collect(java.util.stream.Collectors.toMap(VM::getId, VM::getInterfaces)); java.util.List<java.lang.String> macsToBeAllocated = vmsById.keySet().stream().flatMap(( vmId) -> calculateAllMacsUsedInVmAndItsSnapshot(getVmInterfaces(vmId), snapshottedInterfacesByVmId.get(vmId))).collect(java.util.stream.Collectors.toList()); return macsToBeAllocated; }
private java.util.stream.Stream<org.ovirt.engine.core.common.businessentities.VM> getAllVmsInSystem(java.util.List<org.ovirt.engine.core.compat.Guid> clustersId) { return clustersId.stream().flatMap(( clusterId) -> vmDao.getAllForCluster(clusterId).stream()); }	private java.util.stream.Stream<org.ovirt.engine.core.common.businessentities.VM> getAllVmsInClusters(java.util.List<org.ovirt.engine.core.compat.Guid> clusterIds) { return clusterIds.stream().flatMap(( clusterId) -> vmDao.getAllForCluster(clusterId).stream()); }
public java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> getSnapshotUsingMac(org.ovirt.engine.core.compat.Guid macPoolId, java.lang.String mac) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> allVms = getAllVmsInSystem(getIdsOfAllClustersHavingMacPool(macPoolId)).collect(java.util.stream.Collectors.toList()); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> snapshotsById = getAllStatelessVms(allVms).map(VM::getId).map(snapshotsManager::getVmConfigurationInStatelessSnapshotOfVm).filter(java.util.Optional::isPresent).map(java.util.Optional::get).collect(java.util.stream.Collectors.toMap(VM::getId, java.util.function.Function.identity())); java.util.Optional<org.ovirt.engine.core.compat.Guid> snapshotUsingMacId = getVmIdUsingMac(snapshotsById.values().stream().flatMap(( vm) -> vm.getInterfaces().stream()), mac); return snapshotUsingMacId.map(snapshotsById::get); }	public java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> getSnapshotUsingMac(org.ovirt.engine.core.compat.Guid macPoolId, java.lang.String mac) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> allVms = getAllVmsInClusters(getIdsOfAllClustersHavingMacPool(macPoolId)).collect(java.util.stream.Collectors.toList()); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> snapshotsById = getAllStatelessVms(allVms).map(VM::getId).map(snapshotsManager::getVmConfigurationInStatelessSnapshotOfVm).filter(java.util.Optional::isPresent).map(java.util.Optional::get).collect(java.util.stream.Collectors.toMap(VM::getId, java.util.function.Function.identity())); java.util.Optional<org.ovirt.engine.core.compat.Guid> snapshotUsingMacId = getVmIdUsingMac(snapshotsById.values().stream().flatMap(( vm) -> vm.getInterfaces().stream()), mac); return snapshotUsingMacId.map(snapshotsById::get); }
protected org.ovirt.engine.core.bll.ValidationResult macAvailable() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic(); if (new org.ovirt.engine.core.bll.network.VmInterfaceManager().tooManyPluggedInterfaceWithSameMac(nic, org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getMacPool())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.VAR_MAC_IN_USE, nic.getMacAddress()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.VAR_IN_USE_BY, org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm().getName())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	protected org.ovirt.engine.core.bll.ValidationResult macAvailable() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic(); java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> optionalVm = new org.ovirt.engine.core.bll.network.VmInterfaceManager().getVmWithSameMacIfDuplicateIsNotAllowed(nic, org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getMacPool()); if (optionalVm.isPresent()) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(MacAddressValidator.VAR_MAC_ADDRESS, nic.getMacAddress()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(MacAddressValidator.VAR_VM_NAME, optionalVm.get().getName())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
protected com.google.gwt.user.client.ui.IsWidget createMacColumn(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { org.gwtbootstrap3.client.ui.Column column = new org.gwtbootstrap3.client.ui.Column(org.gwtbootstrap3.client.ui.constants.ColumnSize.SM_4); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLElement(); com.google.gwt.safehtml.shared.SafeHtml mac = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(networkInterface.getMacAddress()); addBoldReverseDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.macVmGuestAgent()), mac, dl); column.getElement().appendChild(dl); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(column); tooltip.setHtml(mac); return tooltip; }	protected com.google.gwt.user.client.ui.IsWidget createMacColumn(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { org.gwtbootstrap3.client.ui.Column column = new org.gwtbootstrap3.client.ui.Column(org.gwtbootstrap3.client.ui.constants.ColumnSize.SM_4); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLElement(); com.google.gwt.safehtml.shared.SafeHtml mac = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(networkInterface.getMacAddress()); addDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.macVmGuestAgent()), mac, dl); column.getElement().appendChild(dl); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(column); tooltip.setHtml(mac); return tooltip; }
protected com.google.gwt.user.client.ui.IsWidget createIpv6Column(org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface guestAgentInterface) { org.gwtbootstrap3.client.ui.Column column = new org.gwtbootstrap3.client.ui.Column(org.gwtbootstrap3.client.ui.constants.ColumnSize.SM_4); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLElement(); java.util.StringJoiner ipv6AddressJoiner = new java.util.StringJoiner(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER); if ((guestAgentInterface.getIpv6Addresses()) != null) { ipv6AddressJoiner.add(java.lang.String.join(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER, guestAgentInterface.getIpv6Addresses())); } java.lang.String ipv6Address = ipv6AddressJoiner.toString(); if (ipv6Address.isEmpty()) { ipv6Address = org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.notAvailableLabel(); } com.google.gwt.safehtml.shared.SafeHtml ipv6 = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(ipv6Address); addBoldReverseDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.ipv6VmGuestAgent()), ipv6, dl); column.getElement().appendChild(dl); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(column); tooltip.setHtml(ipv6); return tooltip; }	protected com.google.gwt.user.client.ui.IsWidget createIpv6Column(org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface guestAgentInterface) { org.gwtbootstrap3.client.ui.Column column = new org.gwtbootstrap3.client.ui.Column(org.gwtbootstrap3.client.ui.constants.ColumnSize.SM_4); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLElement(); java.util.StringJoiner ipv6AddressJoiner = new java.util.StringJoiner(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER); if ((guestAgentInterface.getIpv6Addresses()) != null) { ipv6AddressJoiner.add(java.lang.String.join(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER, guestAgentInterface.getIpv6Addresses())); } java.lang.String ipv6Address = ipv6AddressJoiner.toString(); if (ipv6Address.isEmpty()) { ipv6Address = org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.notAvailableLabel(); } com.google.gwt.safehtml.shared.SafeHtml ipv6 = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(ipv6Address); addDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.ipv6VmGuestAgent()), ipv6, dl); column.getElement().appendChild(dl); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(column); tooltip.setHtml(ipv6); return tooltip; }
protected com.google.gwt.user.client.ui.IsWidget createIpv4Column(org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface guestAgentInterface) { org.gwtbootstrap3.client.ui.Column column = new org.gwtbootstrap3.client.ui.Column(org.gwtbootstrap3.client.ui.constants.ColumnSize.SM_4); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLElement(); java.util.StringJoiner ipv4AddressJoiner = new java.util.StringJoiner(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER); if ((guestAgentInterface.getIpv4Addresses()) != null) { ipv4AddressJoiner.add(java.lang.String.join(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER, guestAgentInterface.getIpv4Addresses())); } java.lang.String ipv4Address = ipv4AddressJoiner.toString(); if (ipv4Address.isEmpty()) { ipv4Address = org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.notAvailableLabel(); } com.google.gwt.safehtml.shared.SafeHtml ipv4 = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(ipv4Address); addBoldReverseDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.ipv4VmGuestAgent()), ipv4, dl); column.getElement().appendChild(dl); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(column); tooltip.setHtml(ipv4); return tooltip; }	protected com.google.gwt.user.client.ui.IsWidget createIpv4Column(org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface guestAgentInterface) { org.gwtbootstrap3.client.ui.Column column = new org.gwtbootstrap3.client.ui.Column(org.gwtbootstrap3.client.ui.constants.ColumnSize.SM_4); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLElement(); java.util.StringJoiner ipv4AddressJoiner = new java.util.StringJoiner(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER); if ((guestAgentInterface.getIpv4Addresses()) != null) { ipv4AddressJoiner.add(java.lang.String.join(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER, guestAgentInterface.getIpv4Addresses())); } java.lang.String ipv4Address = ipv4AddressJoiner.toString(); if (ipv4Address.isEmpty()) { ipv4Address = org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.notAvailableLabel(); } com.google.gwt.safehtml.shared.SafeHtml ipv4 = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(ipv4Address); addDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.ipv4VmGuestAgent()), ipv4, dl); column.getElement().appendChild(dl); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(column); tooltip.setHtml(ipv4); return tooltip; }
private void applyVmInterfaceSpecificStyles() { mainInfoPanel.getElement().getStyle().setPaddingBottom(0, Style.Unit.PX); mainInfoPanel.getElement().getStyle().setPaddingTop(0, Style.Unit.PX); detailedInfoContainer.getElement().getStyle().setMarginLeft(0, Style.Unit.PX); detailedInfoContainer.getElement().getStyle().setWidth(100, Style.Unit.PCT); descriptionPanel.getElement().getStyle().setWidth(10, Style.Unit.PCT); descriptionHeaderPanel.getElement().getStyle().setWidth(100, Style.Unit.PCT); descriptionHeaderPanel.getElement().getStyle().setFontSize(20, Style.Unit.PX); descriptionPanel.removeStyleName(PatternflyConstants.PF_LIST_VIEW_DESCRIPTION); }	private void applyVmInterfaceSpecificStyles() { listGroupItem.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.NETWORK_LIST_ITEM); descriptionPanel.getElement().getStyle().setWidth(10, Style.Unit.PCT); descriptionPanel.removeStyleName(PatternflyConstants.PF_LIST_VIEW_DESCRIPTION); }
protected com.google.gwt.user.client.ui.IsWidget createNetworkNameColumn(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { org.gwtbootstrap3.client.ui.Column column = new org.gwtbootstrap3.client.ui.Column(org.gwtbootstrap3.client.ui.constants.ColumnSize.SM_3); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLElement(); com.google.gwt.safehtml.shared.SafeHtml name = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(((networkInterface.getNetworkName()) != null ? networkInterface.getNetworkName() : org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.unAvailablePropertyLabel())); addBoldReverseDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.networkNameInterface()), name, dl); column.getElement().appendChild(dl); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(column); tooltip.setHtml(name); return tooltip; }	protected com.google.gwt.user.client.ui.IsWidget createNetworkNameColumn(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { org.gwtbootstrap3.client.ui.Column column = new org.gwtbootstrap3.client.ui.Column(org.gwtbootstrap3.client.ui.constants.ColumnSize.SM_3); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLElement(); com.google.gwt.safehtml.shared.SafeHtml name = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(((networkInterface.getNetworkName()) != null ? networkInterface.getNetworkName() : org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.unAvailablePropertyLabel())); addDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.networkNameInterface()), name, dl); column.getElement().appendChild(dl); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(column); tooltip.setHtml(name); return tooltip; }
private void updateNics(java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel> nics) { nicList.clear(); java.util.Collections.sort(nics); java.util.List<org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkGroup> groups = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic : nics) { groups.add(new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkGroup(nic, eventBus, style)); } nicList.addAll(groups, (!(rendered))); nicGroups = groups; }	private void updateNics(java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel> nics) { nicList.clear(); java.util.Collections.sort(nics); nicGroups = new java.util.ArrayList(); for (org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic : nics) { nicGroups.add(new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkGroup(nic, eventBus, style)); } nicList.addAll(nicGroups, (!(rendered))); }
private org.ovirt.engine.ui.common.widget.MenuBar menuFor(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item) { org.ovirt.engine.ui.common.widget.MenuBar menu = rootMenu(item); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> operationMap = item.getSetupModel().commandsFor(item); for (final java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> entry : operationMap.entrySet()) { final java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = entry.getValue(); if (entry.getKey().isUnary()) { assert (commands.size()) == 1 : "Got a NetworkCommand List with more than one Unary Operation"; menu.addItem(entry.getKey().getVerb(item), () -> executeCommand(entry.getKey(), commands.get(0))); } else { org.ovirt.engine.ui.common.widget.MenuBar subMenu = subMenu(); for (final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand command : commands) { subMenu.addItem(new com.google.gwt.user.client.ui.MenuItem(command.getName(), () -> executeCommand(entry.getKey(), command))); } menu.addItem(entry.getKey().getVerb(item), subMenu); } } return menu; }	private org.ovirt.engine.ui.common.widget.MenuBar menuFor(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item) { org.ovirt.engine.ui.common.widget.MenuBar menu = rootMenu(item); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> operationMap = item.getSetupModel().commandsFor(item); for (final java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> entry : operationMap.entrySet()) { final java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = entry.getValue(); if (entry.getKey().isUnary()) { assert (commands.size()) == 1 : "Got a NetworkCommand List with more than one Unary Operation"; menu.addItem(entry.getKey().getVerb(item), () -> executeCommand(entry.getKey(), commands.get(0))); } else { java.util.Collections.sort(commands, java.util.Comparator.comparing(NetworkCommand::getName, new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator())); org.ovirt.engine.ui.common.widget.MenuBar subMenu = subMenu(); for (final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand command : commands) { subMenu.addItem(new com.google.gwt.user.client.ui.MenuItem(command.getName(), () -> executeCommand(entry.getKey(), command))); } menu.addItem(entry.getKey().getVerb(item), subMenu); } } return menu; }
@org.junit.jupiter.api.Test public void testAdd() { try { javax.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "00000001-0001-0001-0001-000000000011", "nics"); javax.ws.rs.core.Request request = mockRequest("POST"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/apidoc#services/host_nics/methods/add", fault.getDetail()); } catch (java.lang.ClassNotFoundException | java.io.IOException e) { fail(); } }	@org.junit.jupiter.api.Test public void testAdd() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "00000001-0001-0001-0001-000000000011", "nics"); javax.ws.rs.core.Request request = mockRequest("POST"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/apidoc#services/host_nics/methods/add", fault.getDetail()); }
@org.junit.jupiter.api.Test public void testUpdateWithNonGuidId() { try { javax.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "00000001-0001-0001-0001-000000000011", "nics", "116"); javax.ws.rs.core.Request request = mockRequest("PUT"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/apidoc#services/host_nic/methods/update", fault.getDetail()); } catch (java.lang.ClassNotFoundException | java.io.IOException e) { fail(); } }	@org.junit.jupiter.api.Test public void testUpdateWithNonGuidId() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "00000001-0001-0001-0001-000000000011", "nics", "116"); javax.ws.rs.core.Request request = mockRequest("PUT"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/apidoc#services/host_nic/methods/update", fault.getDetail()); }
@org.junit.jupiter.api.Test public void testAction() { try { javax.ws.rs.core.UriInfo uriInfo = mockUri("vms", "00000001-0001-0001-0001-000000000011", "freezefilesystems"); javax.ws.rs.core.Request request = mockRequest("POST"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/apidoc#services/vm/methods/freeze_filesystems", fault.getDetail()); } catch (java.lang.ClassNotFoundException | java.io.IOException e) { fail(); } }	@org.junit.jupiter.api.Test public void testAction() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = mockUri("vms", "00000001-0001-0001-0001-000000000011", "freezefilesystems"); javax.ws.rs.core.Request request = mockRequest("POST"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/apidoc#services/vm/methods/freeze_filesystems", fault.getDetail()); }
protected org.ovirt.engine.core.common.businessentities.VM getVmFromConfiguration() { org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = runInternalQuery(QueryType.GetVmConfigurationBySnapshot, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getParameters().getSnapshotId())); return queryReturnValue.getSucceeded() ? queryReturnValue.getReturnValue() : null; }	private org.ovirt.engine.core.common.businessentities.VM getVmFromConfiguration() { org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = runInternalQuery(QueryType.GetVmConfigurationBySnapshot, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getParameters().getSnapshotId())); return queryReturnValue.getSucceeded() ? queryReturnValue.getReturnValue() : null; }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmDisksFromDb() { org.ovirt.engine.core.common.businessentities.VM vmFromConfiguration = getVmFromConfiguration(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksFromDb = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(vmFromConfiguration.getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.ONLY_SNAPABLE, org.ovirt.engine.core.bll.storage.disk.ONLY_ACTIVE); disksFromDb.addAll(org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.ONLY_PLUGGED)); return disksFromDb; }	@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmDisksFromDb() { org.ovirt.engine.core.common.businessentities.VM vmFromConfiguration = getVmFromConfiguration(); if (vmFromConfiguration == null) { log.debug("No VM configuration found for snapshot id '{}'", org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getParameters().getSnapshotId()); return java.util.Collections.emptyList(); } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksFromDb = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(vmFromConfiguration.getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.ONLY_SNAPABLE, org.ovirt.engine.core.bll.storage.disk.ONLY_ACTIVE); disksFromDb.addAll(org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.ONLY_PLUGGED)); return disksFromDb; }
public void loadVmFromOva() { clearForLoad(); if (!(validateOvaConfiguration())) { return; } startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmFromOva(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { if (returnValue.getSucceeded()) { Map<org.ovirt.engine.core.common.businessentities.VM, java.lang.String> vmToOva = returnValue.getReturnValue(); vmNameToOva = vmToOva.entrySet().stream().collect(org.ovirt.engine.ui.uicommonweb.models.vms.Collectors.toMap(( e) -> e.getKey().getName(), java.util.Map.Entry::getValue)); updateVms(vmToOva.keySet()); } else { setError(messages.failedToLoadOva(getOvaPath().getEntity())); } stopProgress(); }), getHosts().getSelectedItem().getId(), getOvaPath().getEntity()); }	public void loadVmFromOva() { clearForLoad(); if (!(validateOvaConfiguration())) { return; } startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmFromOva(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { if (returnValue.getSucceeded()) { Map<org.ovirt.engine.core.common.businessentities.VM, java.lang.String> vmToOva = returnValue.getReturnValue(); vmNameToOva = vmToOva.entrySet().stream().collect(java.util.stream.Collectors.toMap(( e) -> e.getKey().getName(), java.util.Map.Entry::getValue)); updateVms(vmToOva.keySet()); } else { setError(messages.failedToLoadOva(getOvaPath().getEntity())); } stopProgress(); }), getHosts().getSelectedItem().getId(), getOvaPath().getEntity()); }
private void updateVmDynamicData() { if ((vdsmVm.getVmDynamic().getGuestAgentNicsHash()) != (dbVm.getGuestAgentNicsHash())) { vmGuestAgentNics = vdsmVm.getVmGuestAgentInterfaces(); dbVm.setIp(extractVmIpsFromGuestAgentInterfaces(vmGuestAgentNics)); } java.util.List<java.lang.String> changedFields = getChangedFields(dbVm, vdsmVm.getVmDynamic()); changedFields.removeAll(org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer.UNCHANGEABLE_FIELDS_BY_VDSM); if ((vdsmVm.getVmDynamic().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { changedFields.remove(VmDynamic.APPLICATIONS_LIST_FIELD_NAME); vdsmVm.getVmDynamic().setAppList(dbVm.getAppList()); } if (!(changedFields.isEmpty())) { dbVm.updateRuntimeData(vdsmVm.getVmDynamic(), vdsManager.getVdsId()); saveDynamic(dbVm); } }	private void updateVmDynamicData() { if ((vdsmVm.getVmDynamic().getGuestAgentNicsHash()) != (dbVm.getGuestAgentNicsHash())) { vmGuestAgentNics = nullToEmptyList(vdsmVm.getVmGuestAgentInterfaces()); dbVm.setIp(extractVmIpsFromGuestAgentInterfaces(vmGuestAgentNics)); } java.util.List<java.lang.String> changedFields = getChangedFields(dbVm, vdsmVm.getVmDynamic()); changedFields.removeAll(org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer.UNCHANGEABLE_FIELDS_BY_VDSM); if ((vdsmVm.getVmDynamic().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { changedFields.remove(VmDynamic.APPLICATIONS_LIST_FIELD_NAME); vdsmVm.getVmDynamic().setAppList(dbVm.getAppList()); } if (!(changedFields.isEmpty())) { dbVm.updateRuntimeData(vdsmVm.getVmDynamic(), vdsManager.getVdsId()); saveDynamic(dbVm); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface> filterGuestAgentInterfaces(java.util.List<org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface> nics) { nics = removeLoopbacks(nics); nics.forEach(this::filterIpv4Addresses); nics.forEach(this::filterIpv6Addresses); return nics; }	private java.util.List<org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface> filterGuestAgentInterfaces(java.util.List<org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface> nics) { if (!(nics.isEmpty())) { nics = nics.stream().filter(this::isNotBlacklisted).collect(java.util.stream.Collectors.toList()); nics.forEach(this::filterIpv4Addresses); nics.forEach(this::filterIpv6Addresses); } return nics; }
private void filterIpv6Addresses(org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface nic) { nic.setIpv6Addresses(nic.getIpv6Addresses().stream().map(this::stripIpv6ZoneIndex).filter(ValidationUtils::isValidIpv6).collect(java.util.stream.Collectors.toList())); }	private void filterIpv6Addresses(org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface nic) { nic.setIpv6Addresses(nic.getIpv6Addresses().stream().map(NetworkUtils::stripIpv6ZoneIndex).filter(ValidationUtils::isValidIpv6).collect(java.util.stream.Collectors.toList())); }
protected void destroyVm() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue actionReturnValue = runVdsCommand(VDSCommandType.DestroyVm, buildDestroyVmVDSCommandParameters(org.ovirt.engine.core.bll.StopVmCommandBase.getVdsId())); if (((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) && ((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getMigratingToVds()) != null)) { runVdsCommand(VDSCommandType.DestroyVm, buildDestroyVmVDSCommandParameters(org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getMigratingToVds())); } setActionReturnValue(actionReturnValue); }	protected void destroyVm() { boolean vmMigrating = ((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) && ((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getMigratingToVds()) != null); setActionReturnValue((vmMigrating ? destroyMigratingVm() : destroyNonMigratingVm())); }
private void initButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, org.ovirt.engine.ui.common.widget.action.ActionButton button, int order) { button.setText(buttonDef.getText()); java.lang.String buttonId = buttonDef.getUniqueId(); if (buttonId != null) { button.asWidget().getElement().setId(org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId(getElementId(), buttonId)); } actionFormGroup.remove(actionKebab); if (order < (actionFormGroup.getWidgetCount())) { java.util.List<com.google.gwt.user.client.ui.Widget> currentButtons = new java.util.ArrayList<>(); for (int i = 0; i < (actionFormGroup.getWidgetCount()); i++) { currentButtons.add(actionFormGroup.getWidget(i)); } actionFormGroup.clear(); currentButtons.add(order, button.asWidget()); currentButtons.forEach(( existingButton) -> actionFormGroup.add(existingButton)); actionFormGroup.add(actionKebab); } else { actionFormGroup.add(button); actionFormGroup.add(actionKebab); } actionItemMap.put(buttonDef, button); }	private void initButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, org.ovirt.engine.ui.common.widget.action.ActionButton button) { button.setText(buttonDef.getText()); java.lang.String buttonId = buttonDef.getUniqueId(); if (buttonId != null) { button.asWidget().getElement().setId(org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId(getElementId(), buttonId)); } actionFormGroup.remove(actionKebab); if ((buttonDef.getIndex()) >= (actionFormGroup.getWidgetCount())) { actionFormGroup.add(button); actionFormGroup.add(actionKebab); } else { java.util.List<com.google.gwt.user.client.ui.Widget> currentButtons = new java.util.ArrayList<>(); for (int i = 0; i < (actionFormGroup.getWidgetCount()); i++) { currentButtons.add(actionFormGroup.getWidget(i)); } currentButtons.add(buttonDef.getIndex(), button.asWidget()); actionFormGroup.clear(); currentButtons.forEach(( existingButton) -> actionFormGroup.add(existingButton)); actionFormGroup.add(actionKebab); } actionItemMap.put(buttonDef, button); }
public org.ovirt.engine.ui.common.widget.action.ActionButton addDropdownComboActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> subActions, org.ovirt.engine.ui.common.widget.action.DropdownActionButton.SelectedItemsProvider<T> selectedItemsProvider) { org.ovirt.engine.ui.common.widget.action.DropdownActionButton<T> dropdownActionButton; if ((buttonDef.getIcon()) instanceof org.gwtbootstrap3.client.ui.constants.IconType) { dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider, true, ((org.gwtbootstrap3.client.ui.constants.IconType) (buttonDef.getIcon()))); } else { dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider, true, null); } initButton(buttonDef, dropdownActionButton, java.lang.Integer.MAX_VALUE); return dropdownActionButton; }	@java.lang.Override public org.ovirt.engine.ui.common.widget.action.ActionButton addDropdownComboActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> subActions, org.ovirt.engine.ui.common.widget.action.DropdownActionButton.SelectedItemsProvider<T> selectedItemsProvider) { org.ovirt.engine.ui.common.widget.action.DropdownActionButton<T> dropdownActionButton; if ((buttonDef.getIcon()) instanceof org.gwtbootstrap3.client.ui.constants.IconType) { dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider, true, ((org.gwtbootstrap3.client.ui.constants.IconType) (buttonDef.getIcon()))); } else { dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider, true, null); } initButton(buttonDef, dropdownActionButton); return dropdownActionButton; }
@java.lang.Override public org.ovirt.engine.ui.common.widget.action.ActionButton addMenuListItem(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef, int order) { org.ovirt.engine.ui.common.widget.action.ActionAnchorListItem menuItem = new org.ovirt.engine.ui.common.widget.action.ActionAnchorListItem(menuItemDef.getText()); java.lang.String menuItemId = menuItemDef.getUniqueId(); if (menuItemId != null) { menuItem.asWidget().getElement().setId(org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId(getElementId(), menuItemId)); } actionItemMap.put(menuItemDef, menuItem); actionKebab.addMenuItem(menuItem, order); return menuItem; }	@java.lang.Override public org.ovirt.engine.ui.common.widget.action.ActionButton addMenuListItem(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef) { org.ovirt.engine.ui.common.widget.action.ActionAnchorListItem menuItem = new org.ovirt.engine.ui.common.widget.action.ActionAnchorListItem(menuItemDef.getText()); java.lang.String menuItemId = menuItemDef.getUniqueId(); if (menuItemId != null) { menuItem.asWidget().getElement().setId(org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId(getElementId(), menuItemId)); } actionItemMap.put(menuItemDef, menuItem); actionKebab.addMenuItem(menuItem, menuItemDef.getIndex()); return menuItem; }
@java.lang.Override public org.ovirt.engine.ui.common.widget.action.ActionButton addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, int order) { org.ovirt.engine.ui.common.widget.action.SimpleActionButton newActionButton = createNewActionButton(buttonDef); initButton(buttonDef, newActionButton, order); return newActionButton; }	@java.lang.Override public org.ovirt.engine.ui.common.widget.action.ActionButton addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { org.ovirt.engine.ui.common.widget.action.SimpleActionButton newActionButton = createNewActionButton(buttonDef); initButton(buttonDef, newActionButton); return newActionButton; }
public void addMenuItem(org.ovirt.engine.ui.common.widget.action.ActionButton actionButton, int order) { if (order > (kebabMenu.getWidgetCount())) { kebabMenu.add(actionButton); } else { kebabMenu.insert(actionButton.asWidget(), order); } }	public void addMenuItem(org.ovirt.engine.ui.common.widget.action.ActionButton actionButton, int index) { if (index > (kebabMenu.getWidgetCount())) { kebabMenu.add(actionButton); } else { kebabMenu.insert(actionButton.asWidget(), index); } }
org.ovirt.engine.ui.common.widget.action.ActionButton addMenuListItem(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef, int order);	org.ovirt.engine.ui.common.widget.action.ActionButton addMenuListItem(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef);
public void addDetailPlaceActionButton(org.ovirt.engine.ui.webadmin.plugin.entity.EntityType mainTabEntityType, org.ovirt.engine.ui.webadmin.plugin.entity.EntityType subTabEntityType, java.lang.String label, org.ovirt.engine.ui.webadmin.plugin.api.ActionButtonInterface actionButtonInterface) { java.lang.String historyToken = mainTabEntityType.getSubTabHistoryToken(subTabEntityType); if (historyToken != null) { org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> actionButton = createButtonDefinition(label, actionButtonInterface); actionButton.setPriority(actionButtonInterface.getPriority()); org.ovirt.engine.ui.common.presenter.AddActionButtonEvent.fire(this, historyToken, actionButton); } }	public void addDetailPlaceActionButton(org.ovirt.engine.ui.webadmin.plugin.entity.EntityType mainTabEntityType, org.ovirt.engine.ui.webadmin.plugin.entity.EntityType subTabEntityType, java.lang.String label, org.ovirt.engine.ui.webadmin.plugin.api.ActionButtonInterface actionButtonInterface) { java.lang.String historyToken = mainTabEntityType.getSubTabHistoryToken(subTabEntityType); if (historyToken != null) { org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> actionButton = createButtonDefinition(label, actionButtonInterface); if (actionButtonInterface.isInMoreMenu()) { org.ovirt.engine.ui.common.presenter.AddKebabMenuListItemEvent.fire(this, historyToken, actionButton); } else { org.ovirt.engine.ui.common.presenter.AddActionButtonEvent.fire(this, historyToken, actionButton); } } }
public org.ovirt.engine.ui.common.widget.action.ActionButton addDropdownActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> subActions, org.ovirt.engine.ui.common.widget.action.DropdownActionButton.SelectedItemsProvider<T> selectedItemsProvider) { org.ovirt.engine.ui.common.widget.action.DropdownActionButton<T> dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider); initButton(buttonDef, dropdownActionButton, java.lang.Integer.MAX_VALUE); return dropdownActionButton; }	@java.lang.Override public org.ovirt.engine.ui.common.widget.action.ActionButton addDropdownActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> subActions, org.ovirt.engine.ui.common.widget.action.DropdownActionButton.SelectedItemsProvider<T> selectedItemsProvider) { org.ovirt.engine.ui.common.widget.action.DropdownActionButton<T> dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider); initButton(buttonDef, dropdownActionButton); return dropdownActionButton; }
public void addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { addActionButton(buttonDef, java.lang.Integer.MAX_VALUE); }	@java.lang.Override public void addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { org.ovirt.engine.ui.common.widget.action.ActionButton newButton = ActionPanelPresenterWidget.getView().addActionButton(buttonDef); if ((buttonDef.getIndex()) > (actionButtonDefinitions.size())) { actionButtonDefinitions.add(buttonDef); } else { actionButtonDefinitions.add(buttonDef.getIndex(), buttonDef); } initButton(buttonDef, newButton); }
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { if ((getActionPanelPresenterWidget()) != null) { for (org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> buttonDef : pluginActionButtonList) { int order = 0; if ((buttonDef.getPriority()) > 0) { order = ((int) (buttonDef.getPriority())); } getActionPanelPresenterWidget().addActionButton(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition) (buttonDef)), order); } } }	private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList, boolean isMenuItem) { if ((getActionPanelPresenterWidget()) != null) { for (org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> buttonDef : pluginActionButtonList) { if (isMenuItem) { getActionPanelPresenterWidget().addMenuListItem(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition) (buttonDef))); } else { getActionPanelPresenterWidget().addActionButton(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition) (buttonDef))); } } } }
public java.lang.Double getPriority() { return getValueAsDouble("priority", java.lang.Double.MAX_VALUE); }	public java.lang.Integer getIndex() { return java.lang.Math.max(0, getValueAsInteger("index", java.lang.Integer.MAX_VALUE)); }
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { if (hasActionPanelPresenterWidget()) { for (org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> buttonDef : pluginActionButtonList) { org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getActionPanelPresenterWidget().addActionButton(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition) (buttonDef)), ((int) (buttonDef.getPriority()))); } } }	private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList, boolean isMenuItem) { if (hasActionPanelPresenterWidget()) { for (org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> buttonDef : pluginActionButtonList) { if (isMenuItem) { org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getActionPanelPresenterWidget().addMenuListItem(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition) (buttonDef))); } else { org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getActionPanelPresenterWidget().addActionButton(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition) (buttonDef))); } } } }
double getPriority();	int getIndex();
public void addMenuPlaceActionButton(org.ovirt.engine.ui.webadmin.plugin.entity.EntityType entityType, java.lang.String label, org.ovirt.engine.ui.webadmin.plugin.api.ActionButtonInterface actionButtonInterface) { java.lang.String historyToken = entityType.getMainHistoryToken(); if (historyToken != null) { org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> actionButton = createButtonDefinition(label, actionButtonInterface); actionButton.setPriority(actionButtonInterface.getPriority()); org.ovirt.engine.ui.common.presenter.AddActionButtonEvent.fire(this, historyToken, actionButton); } }	public void addMenuPlaceActionButton(org.ovirt.engine.ui.webadmin.plugin.entity.EntityType entityType, java.lang.String label, org.ovirt.engine.ui.webadmin.plugin.api.ActionButtonInterface actionButtonInterface) { java.lang.String historyToken = entityType.getMainHistoryToken(); if (historyToken != null) { org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> actionButton = createButtonDefinition(label, actionButtonInterface); if (actionButtonInterface.isInMoreMenu()) { org.ovirt.engine.ui.common.presenter.AddKebabMenuListItemEvent.fire(this, historyToken, actionButton); } else { org.ovirt.engine.ui.common.presenter.AddActionButtonEvent.fire(this, historyToken, actionButton); } } }
public void addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButton actionButton) { notificationKebab.addMenuItem(actionButton, java.lang.Integer.MAX_VALUE); notificationKebab.setVisible(((notificationKebab.getWidgetCount()) > 0)); }	public void addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButton actionButton) { notificationKebab.addMenuItem(actionButton); notificationKebab.setVisible(((notificationKebab.getWidgetCount()) > 0)); }
public void addMenuListItem(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef) { addMenuListItem(menuItemDef, java.lang.Integer.MAX_VALUE); }	@java.lang.Override public void addMenuListItem(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef) { org.ovirt.engine.ui.common.widget.action.ActionButton newActionMenuListItem = ActionPanelPresenterWidget.getView().addMenuListItem(menuItemDef); registerSelectionChangeHandler(menuItemDef); registerHandler(newActionMenuListItem.addClickHandler(( e) -> { menuItemDef.onClick(getSelectedItems()); })); registerHandler(menuItemDef.addInitializeHandler(( e) -> { updateMenuItem(menuItemDef); })); updateMenuItem(menuItemDef); }
org.ovirt.engine.ui.common.widget.action.ActionButton addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, int order);	org.ovirt.engine.ui.common.widget.action.ActionButton addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef);
@org.junit.Before public void setUp() throws org.ovirt.engine.core.common.utils.exceptions.InitializationException { vm = createVm(); validator = new org.ovirt.engine.core.bll.validator.VmValidator(vm); mockVmPropertiesUtils(); when(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao()).thenReturn(vmNetworkInterfaceDao); when(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVnicProfileDao()).thenReturn(vnicProfileDao); }	@org.junit.Before public void setUp() throws org.ovirt.engine.core.common.utils.exceptions.InitializationException { vm = createVm(); validator = spy(new org.ovirt.engine.core.bll.validator.VmValidator(vm)); mockVmPropertiesUtils(); when(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao()).thenReturn(vmNetworkInterfaceDao); when(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVnicProfileDao()).thenReturn(vnicProfileDao); }
public void setLabel(java.lang.String label) { this.label = (label == null) ? "" : label; }	public void setLabel(java.lang.String label) { this.label = label; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = new org.ovirt.engine.core.common.action.ActionReturnValue(); final org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getVdsId(); final java.lang.String sessionId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getSessionId(); returnValue = executeVdsFenceAction(vdsId, sessionId, ActionType.StopVds); if ((org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.ActionType.VdsNotRespondingTreatment)) { updateHostInFenceFlow(vdsId, true); } if (wasSkippedDueToPolicy(returnValue)) { org.ovirt.engine.core.bll.pm.RestartVdsResult restartVdsResult = new org.ovirt.engine.core.bll.pm.RestartVdsResult(); restartVdsResult.setSkippedDueToFencingPolicy(true); setActionReturnValue(restartVdsResult); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); setVdsStatus(VDSStatus.NonResponsive); return; } else if (returnValue.getSucceeded()) { executeFenceVdsManuallyAction(vdsId, sessionId); returnValue = executeVdsFenceAction(vdsId, sessionId, ActionType.StartVds); setSucceeded(returnValue.getSucceeded()); } else { handleError(); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); } if (!(org.ovirt.engine.core.bll.pm.RestartVdsCommand.getSucceeded())) { log.warn("Restart host action failed, updating host '{}' to '{}'", vdsId, VDSStatus.NonResponsive.name()); setVdsStatus(VDSStatus.NonResponsive); } updateHostInFenceFlow(vdsId, false); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.ActionReturnValue returnValue; final org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getVdsId(); final java.lang.String sessionId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getSessionId(); returnValue = executeVdsFenceAction(vdsId, sessionId, ActionType.StopVds); if ((org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.ActionType.VdsNotRespondingTreatment)) { updateHostInFenceFlow(vdsId, true); } if (wasSkippedDueToPolicy(returnValue)) { org.ovirt.engine.core.bll.pm.RestartVdsResult restartVdsResult = new org.ovirt.engine.core.bll.pm.RestartVdsResult(); restartVdsResult.setSkippedDueToFencingPolicy(true); setActionReturnValue(restartVdsResult); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); setVdsStatus(VDSStatus.NonResponsive); return; } else if (returnValue.getSucceeded()) { executeFenceVdsManuallyAction(vdsId, sessionId); returnValue = executeVdsFenceAction(vdsId, sessionId, ActionType.StartVds); setSucceeded(returnValue.getSucceeded()); } else { handleError(); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); } if (!(org.ovirt.engine.core.bll.pm.RestartVdsCommand.getSucceeded())) { log.warn("Restart host action failed, updating host '{}' to '{}'", vdsId, VDSStatus.NonResponsive.name()); setVdsStatus(VDSStatus.NonResponsive); } updateHostInFenceFlow(vdsId, false); }
private void alertActionSkippedAlreadyInStatus(org.ovirt.engine.core.common.businessentities.pm.FenceActionType fenceActionType, org.ovirt.engine.core.common.businessentities.pm.PowerStatus powerStatus) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable auditLogable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); auditLogable.addCustomValue("HostName", fencedHost.getName()); auditLogable.addCustomValue("AgentStatus", powerStatus.name()); auditLogable.addCustomValue("Operation", fenceActionType.getValue()); auditLogDirector.log(auditLogable, AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS); }	protected void alertActionSkippedAlreadyInStatus(org.ovirt.engine.core.common.businessentities.pm.FenceActionType fenceActionType, org.ovirt.engine.core.common.businessentities.pm.PowerStatus powerStatus) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable auditLogable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); auditLogable.addCustomValue("HostName", fencedHost.getName()); auditLogable.addCustomValue("AgentStatus", powerStatus.name()); auditLogable.addCustomValue("Operation", fenceActionType.getValue()); org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class).log(auditLogable, AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS); }
protected org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult fence(org.ovirt.engine.core.common.businessentities.pm.FenceActionType fenceAction, java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents) { org.ovirt.engine.core.bll.pm.PowerManagementHelper.AgentsIterator iterator = createFenceAgentsIterator(fenceAgents); org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result = null; while (iterator.hasNext()) { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> agents = iterator.next(); if (fenceAction != (org.ovirt.engine.core.common.businessentities.pm.FenceActionType.STATUS)) { result = createFenceActionExecutor(agents).fence(FenceActionType.STATUS); if (((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.ERROR)) && (iterator.hasNext())) { continue; } if (((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS)) && ((result.getPowerStatus()) == (getRequestedPowerStatus(fenceAction)))) { alertActionSkippedAlreadyInStatus(fenceAction, getRequestedPowerStatus(fenceAction)); return result; } } result = createFenceActionExecutor(agents).fence(fenceAction); if ((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS)) { break; } } return result; }	protected org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult fence(org.ovirt.engine.core.common.businessentities.pm.FenceActionType fenceAction, java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents) { org.ovirt.engine.core.bll.pm.PowerManagementHelper.AgentsIterator iterator = createFenceAgentsIterator(fenceAgents); org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result = null; while (iterator.hasNext()) { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> agents = iterator.next(); if (fenceAction != (org.ovirt.engine.core.common.businessentities.pm.FenceActionType.STATUS)) { result = createFenceActionExecutor(agents).fence(FenceActionType.STATUS); if (((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.ERROR)) && (iterator.hasNext())) { continue; } if (((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SKIPPED_ALREADY_IN_STATUS)) && ((result.getPowerStatus()) == (getRequestedPowerStatus(fenceAction)))) { alertActionSkippedAlreadyInStatus(fenceAction, getRequestedPowerStatus(fenceAction)); return result; } if ((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SKIPPED_DUE_TO_POLICY)) { alertActionSkippedFencingDisabledInPolicy(); return result; } } result = createFenceActionExecutor(agents).fence(fenceAction); if ((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS)) { break; } } return result; }
public static java.util.Map<java.lang.String, java.lang.Long> ioTuneMapFrom(org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos) { java.util.Map<java.lang.String, java.lang.Long> ioTuneMap = new java.util.LinkedHashMap<>(); ioTuneMap.put(VdsProperties.ReadBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxReadThroughput())); ioTuneMap.put(VdsProperties.ReadIopsSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertIops(storageQos.getMaxReadIops())); ioTuneMap.put(VdsProperties.TotalBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxThroughput())); ioTuneMap.put(VdsProperties.TotalIopsSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertIops(storageQos.getMaxIops())); ioTuneMap.put(VdsProperties.WriteBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxWriteThroughput())); ioTuneMap.put(VdsProperties.WriteIopsSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertIops(storageQos.getMaxWriteIops())); return ioTuneMap; }	public static java.util.Map<java.lang.String, java.lang.Long> ioTuneMapFrom(org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos) { java.util.Map<java.lang.String, java.lang.Long> ioTuneMap = new java.util.LinkedHashMap<>(); ioTuneMap.put(VdsProperties.TotalBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxThroughput())); ioTuneMap.put(VdsProperties.TotalIopsSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertIops(storageQos.getMaxIops())); ioTuneMap.put(VdsProperties.ReadBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxReadThroughput())); ioTuneMap.put(VdsProperties.ReadIopsSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertIops(storageQos.getMaxReadIops())); ioTuneMap.put(VdsProperties.WriteBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxWriteThroughput())); ioTuneMap.put(VdsProperties.WriteIopsSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertIops(storageQos.getMaxWriteIops())); return ioTuneMap; }
java.lang.String ACTION_TYPE_FAILED_TEMPLATE_IMAGE_ALREADY_EXISTS();	java.lang.String ACTION_TYPE_FAILED_IMAGE_ALREADY_EXISTS();
protected boolean checkIfNeedToBeOverride() { if ((((isTemplate()) && (isCopyOperation())) && (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getForceOverride()))) && (getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_IMAGE_ALREADY_EXISTS); } return true; }	protected boolean checkIfNeedToBeOverride() { if ((((isTemplate()) && (isCopyOperation())) && (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getForceOverride()))) && (getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_ALREADY_EXISTS); } return true; }
public java.lang.Boolean call() throws java.lang.Exception { _deploy.getParser().cliEnvironmentSet(VdsmEnv.ENGINE_HOST_CLUSTER_VERSION, clusterVersion.getValue()); return true; }	public java.lang.Boolean call() throws java.lang.Exception { if (Version.v4_1.lessOrEquals(clusterVersion)) { _deploy.getParser().cliEnvironmentSet(java.lang.String.format("%svars/ssl_excludes", VdsmEnv.CONFIG_PREFIX), "OP_NO_TLSv1,OP_NO_TLSv1_1"); } return true; }
public boolean isSearchUsingTags() { return ((origText.contains("tag")) || (getCrossRefObjList().contains(SearchObjects.VDC_STORAGE_POOL_OBJ_NAME))) || (getCrossRefObjList().contains(SearchObjects.VDC_STORAGE_DOMAIN_OBJ_NAME)); }	public boolean isSearchUsingTags() { return (((origText.contains("tag")) || (isUserSearchUsingTags())) || (getCrossRefObjList().contains(SearchObjects.VDC_STORAGE_POOL_OBJ_NAME))) || (getCrossRefObjList().contains(SearchObjects.VDC_STORAGE_DOMAIN_OBJ_NAME)); }
public java.lang.String getCpuNameByCpuId(java.lang.String name, org.ovirt.engine.core.compat.Version ver) { final org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager cpuFlagsManager = org.ovirt.engine.core.bll.CpuFlagsManagerHandler.managersDictionary.get(ver); java.lang.String cpuName = (cpuFlagsManager != null) ? cpuFlagsManager.getCpuNameByCpuId(name) : null; if (org.apache.commons.lang.StringUtils.isNotEmpty(cpuName)) { return cpuName; } return cpuFlagsManager != null ? cpuFlagsManager.getCpuNameByCpuId((name + ",+spec-ctrl")) : null; }	public java.lang.String getCpuNameByCpuId(java.lang.String name, org.ovirt.engine.core.compat.Version ver) { final org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager cpuFlagsManager = org.ovirt.engine.core.bll.CpuFlagsManagerHandler.managersDictionary.get(ver); java.lang.String cpuName = (cpuFlagsManager != null) ? cpuFlagsManager.getCpuNameByCpuId(name) : null; if (org.apache.commons.lang.StringUtils.isNotEmpty(cpuName)) { return cpuName; } if (name.endsWith("-IBRS")) { return cpuFlagsManager != null ? cpuFlagsManager.getCpuNameByCpuId(name.replace("-IBRS", ",+spec-ctrl")) : null; } return null; }
private java.lang.String generateDomainXml() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getNic(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getVmDevice(); org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder builder = new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getVm(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getVds().getId(), nic, vmDevice, vmInfoBuildUtils, (nic.isPassthrough() ? org.ovirt.engine.core.vdsbroker.vdsbroker.Collections.singletonMap(nic.getId(), vmDevice.getHostDevice()) : org.ovirt.engine.core.vdsbroker.vdsbroker.Collections.emptyMap())); java.lang.String libvirtXml = builder.buildHotplugNic(); java.lang.String prettyLibvirtXml = org.ovirt.engine.core.utils.XmlUtils.prettify(libvirtXml); if (prettyLibvirtXml != null) { log.info("NIC hot-set: {}", prettyLibvirtXml); } return libvirtXml; }	private java.lang.String generateDomainXml() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getNic(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getVmDevice(); org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder builder = new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getVm(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getVds().getId(), nic, vmDevice, vmInfoBuildUtils, (nic.isPassthrough() ? java.util.Collections.singletonMap(nic.getId(), vmDevice.getHostDevice()) : java.util.Collections.emptyMap())); java.lang.String libvirtXml = builder.buildHotplugNic(); java.lang.String prettyLibvirtXml = org.ovirt.engine.core.utils.XmlUtils.prettify(libvirtXml); if (prettyLibvirtXml != null) { log.info("NIC hot-set: {}", prettyLibvirtXml); } return libvirtXml; }
@org.junit.Test public void searchUsingTags() { java.lang.String[] searchTexts = new java.lang.String[]{ "Users: type=user and vm.id=12345678-1234-1234-1234-1234-123456789012", "Users: type=user and tag = foo", "Hosts: tag=foo" }; for (java.lang.String searchText : searchTexts) { assertTrue(new org.ovirt.engine.core.searchbackend.SyntaxChecker().analyzeSyntaxState(searchText, false).isSearchUsingTags()); } }	@org.junit.runners.Parameterized.Parameters public static java.lang.Object[] searchTexts() { return new java.lang.Object[][]{ new java.lang.Object[]{ org.ovirt.engine.core.searchbackend.SyntaxContainerTest.USING_TAGS, "Users: type=user and vm.id=12345678-1234-1234-1234-1234-123456789012" }, new java.lang.Object[]{ org.ovirt.engine.core.searchbackend.SyntaxContainerTest.USING_TAGS, "Users: type=user and tag = foo" }, new java.lang.Object[]{ org.ovirt.engine.core.searchbackend.SyntaxContainerTest.USING_TAGS, "Hosts: tag=foo" }, new java.lang.Object[]{ org.ovirt.engine.core.searchbackend.SyntaxContainerTest.NOT_USING_TAGS, "Users: type=user" }, new java.lang.Object[]{ org.ovirt.engine.core.searchbackend.SyntaxContainerTest.NOT_USING_TAGS, "Users: type=group" }, new java.lang.Object[]{ org.ovirt.engine.core.searchbackend.SyntaxContainerTest.NOT_USING_TAGS, "Hosts:" }, new java.lang.Object[]{ org.ovirt.engine.core.searchbackend.SyntaxContainerTest.NOT_USING_TAGS, "Vms:" }, new java.lang.Object[]{ org.ovirt.engine.core.searchbackend.SyntaxContainerTest.NOT_USING_TAGS, "Datacenters:" }, new java.lang.Object[]{ org.ovirt.engine.core.searchbackend.SyntaxContainerTest.NOT_USING_TAGS, "Clusters:" } }; }
@org.junit.Test public void searchNotUsingTags() { java.lang.String[] searchTexts = new java.lang.String[]{ "Users:", "Users: type=user", "Users: type=group", "Hosts:", "Vms:", "Datacenters:", "Clusters:" }; for (java.lang.String searchText : searchTexts) { assertFalse(new org.ovirt.engine.core.searchbackend.SyntaxChecker().analyzeSyntaxState(searchText, false).isSearchUsingTags()); } }	@org.junit.Test public void searchUsingTags() { assertEquals(expected, new org.ovirt.engine.core.searchbackend.SyntaxChecker().analyzeSyntaxState(input, false).isSearchUsingTags()); }
private java.lang.Integer deserializeValue(java.util.Map<java.lang.String, java.lang.Object> entry, java.lang.String curveKey, long conversionRate) { java.util.Map<java.lang.String, java.lang.Long> parameters = ((java.util.Map<java.lang.String, java.lang.Long>) (entry.get(curveKey))); if (parameters == null) { return null; } java.lang.Object avg = parameters.get(VdsProperties.HOST_QOS_AVERAGE); java.lang.Long average = (avg instanceof java.lang.Long) ? ((java.lang.Long) (avg)) : java.lang.Long.valueOf(java.lang.String.valueOf(avg)); return average == null ? null : ((int) (average / conversionRate)); }	private java.lang.Integer deserializeValue(java.util.Map<java.lang.String, java.lang.Object> entry, java.lang.String curveKey, long conversionRate) { java.util.Map<java.lang.String, java.lang.Object> parameters = ((java.util.Map<java.lang.String, java.lang.Object>) (entry.get(curveKey))); if ((parameters == null) || ((parameters.get(VdsProperties.HOST_QOS_AVERAGE)) == null)) { return null; } long avg = ((java.lang.Number) (parameters.get(VdsProperties.HOST_QOS_AVERAGE))).longValue(); return ((int) (avg / conversionRate)); }
public java.lang.String buildHotplugDisk() { writer.writeStartDocument(false); writer.writeStartElement("hotplug"); writer.writeStartElement("devices"); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = disk.getDiskVmElementForVm(vm.getId()); java.lang.String dev = vmInfoBuildUtils.makeDiskName(dve.getDiskInterface().getName(), 0); writeDisk(device, disk, dve, dev, 0); writer.writeEndElement(); writer.writeStartElement("metadata"); writer.setPrefix(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI); writer.writeNamespace(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI); writer.writeStartElement(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI, "vm"); writeDiskMetadata(); writer.writeEndElement(); writer.writeEndElement(); return writer.getStringXML(); }	public java.lang.String buildHotplugDisk() { writer.writeStartDocument(false); writer.writeStartElement("hotplug"); writer.writeStartElement("devices"); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = disk.getDiskVmElementForVm(vm.getId()); org.ovirt.engine.core.common.businessentities.storage.DiskInterface iface = dve.getDiskInterface(); java.lang.String dev = vmInfoBuildUtils.makeDiskName(iface.getName(), 0); int pinToIoThread = (iface == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO)) ? vmInfoBuildUtils.nextIoThreadToPinTo(vm) : 0; writeDisk(device, disk, dve, dev, pinToIoThread); writer.writeEndElement(); writer.writeStartElement("metadata"); writer.setPrefix(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI); writer.writeNamespace(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI); writer.writeStartElement(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI, "vm"); writeDiskMetadata(); writer.writeEndElement(); writer.writeEndElement(); return writer.getStringXML(); }
java.lang.String hideVfLabel();	java.lang.String hostEnforceAffinityGroup();
public void toggleView() { if (isDefault) { setText(secondText); setIcon(secondIcon); } else { setText(defaultText); setIcon(defaultIcon); } isDefault = !(isDefault); }	@java.lang.Override public void switchToDefault() { expandAllButton.setText(defaultText); expandAllButton.setIcon(defaultIcon); }
@java.lang.Override public void setIcon(org.gwtbootstrap3.client.ui.constants.IconType icon) { if (icon != null) { super.setIcon(icon); } }	@java.lang.Override public void switchToSecondary() { expandAllButton.setText(secondaryText); expandAllButton.setIcon(secondaryIcon); }
public abstract void handleOnClick(com.google.gwt.event.dom.client.ClickEvent event, boolean isDefault);	@java.lang.Override public com.google.gwt.event.dom.client.HasClickHandlers getButton() { return expandAllButton; }
private int getWarningLowConfirmedSpaceIndicatorValue() { if (isNewStorage()) { return ((java.lang.Integer) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigValues.WarningLowSpaceIndicator))); } return getStorage().getStorageStaticData().getWarningLowConfirmedSpaceIndicator(); }	private int getWarningLowConfirmedSpaceIndicatorValue() { if (isNewStorage()) { return ((java.lang.Integer) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigValues.WarningLowSpaceIndicator))); } return getStorage().getWarningLowConfirmedSpaceIndicator(); }
@java.lang.Override protected java.lang.String generateDomainXml() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getParameters().getNic(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getParameters().getVmDevice(); org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder builder = new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getParameters().getVm(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getVds().getId(), nic, vmDevice, vmInfoBuildUtils, java.util.Collections.emptyMap()); java.lang.String libvirtXml = builder.buildHotunplugNic(); java.lang.String prettyLibvirtXml = org.ovirt.engine.core.utils.XmlUtils.prettify(libvirtXml); if (prettyLibvirtXml != null) { log.info("NIC hot-unplug: {}", prettyLibvirtXml); } return libvirtXml; }	@java.lang.Override protected java.lang.String generateDomainXml() { org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder builder = new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getParameters().getVm(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getVds().getId(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getParameters().getNic(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getParameters().getVmDevice(), vmInfoBuildUtils, java.util.Collections.emptyMap()); java.lang.String libvirtXml = builder.buildHotunplugNic(); java.lang.String prettyLibvirtXml = org.ovirt.engine.core.utils.XmlUtils.prettify(libvirtXml); if (prettyLibvirtXml != null) { log.info("NIC hot-unplug: {}", prettyLibvirtXml); } return libvirtXml; }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) == null) { return false; } switch (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) { case GEO_REP : org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters(getSession().getMasterVolumeId(), getSession().getId()); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters()); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(DRStep.REMOVE_TMP_SNAPSHOTS); org.ovirt.engine.core.common.action.ActionReturnValue vdcRetValue = runInternalActionWithTasksContext(ActionType.GlusterStorageGeoRepSyncInternal, parameters); if (!(vdcRetValue.getSucceeded())) { endWithFailure(); } org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; case REMOVE_TMP_SNAPSHOTS : removeDRSnapshots(); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(null); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; } return true; }	@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) == null) { return false; } switch (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) { case GEO_REP : org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters parameters = getGeoRepParameters(); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(DRStep.REMOVE_TMP_SNAPSHOTS); org.ovirt.engine.core.common.action.ActionReturnValue vdcRetValue = runInternalActionWithTasksContext(ActionType.GlusterStorageGeoRepSyncInternal, parameters); if (!(vdcRetValue.getSucceeded())) { auditLogDirector.log(this, AuditLogType.GLUSTER_VOLUME_GEO_REP_START_FAILED_EXCEPTION); endWithFailure(); } org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; case REMOVE_TMP_SNAPSHOTS : removeDRSnapshots(); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(null); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; } return true; }