<START_MOD>@java.lang.Override public org.ovirt.engine.api.model.GraphicsConsoles list() { org.ovirt.engine.api.model.GraphicsConsoles consoles = new org.ovirt.engine.api.model.GraphicsConsoles(); org.ovirt.engine.core.common.businessentities.VmTemplate entity = loadEntity(); org.ovirt.engine.api.restapi.resource.utils.GraphicsConsoleResourceHelper.list(this, guid).entrySet().forEach(( graphicsInfo) -> consoles.getGraphicsConsoles().add(addLinks(populate(org.ovirt.engine.api.restapi.types.VmMapper.map(graphicsInfo, null), entity)))); return consoles; }<END_MOD>
<START_MOD>@java.lang.Override protected void reassignBadMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics) { final java.util.function.Predicate<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnicWithBadMacPredicate = new org.ovirt.engine.core.bll.network.predicate.VnicWithBadMacPredicate(macPool); vnics.stream().filter(vnicWithBadMacPredicate).forEach(( vnic) -> vnic.setMacAddress(macPool.allocateNewMac())); }<END_MOD>
@java.lang.Override protected void init() { <START_MOD>macPool = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getMacPool(); <END_MOD>org.ovirt.engine.core.common.businessentities.VM vmFromConfiguration = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm(); if (vmFromConfiguration != null) { vmFromConfiguration.getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterId()); if (!(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget())) { setDisksToBeAttached(vmFromConfiguration); } org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setContainerId(vmFromConfiguration.getId()); } else { initUnregisteredVM(); } if ((Guid.Empty.equals(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVmId())) && ((org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm()) != null)) { org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm().getId()); } setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterId()); org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getCluster().getStoragePoolId()); super.init(); }
<START_MOD>private boolean foundBadMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics, java.util.function.Predicate<java.lang.String> badMacPredicate) { return vnics.stream().map(VmNetworkInterface::getMacAddress).filter(java.util.Objects::nonNull).anyMatch(badMacPredicate); }<END_MOD>
<START_MOD>private boolean validateMacs(org.ovirt.engine.core.common.businessentities.VM vm) { if (!(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().isReassignBadMacs())) { return true; } final java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = vm.getInterfaces(); return reportDuplicateMacs(vnics); }<END_MOD>
<START_MOD>private boolean reportDuplicateMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics) { if ((!(macPool.isDuplicateMacAddressesAllowed())) && (foundBadMacs(vnics, macPool::isMacInUse))) { return failValidation(EngineMessage.NETWORK_MAC_ADDRESS_IN_USE); } return true; }<END_MOD>
@java.lang.Override public void <START_MOD>removeAllForVms<END_MOD>(<START_MOD>java.util.Collection<<END_MOD>org.ovirt.engine.core.compat.Guid<START_MOD>><END_MOD> <START_MOD>vmIds<END_MOD>) { getCallsHandler().executeModification(<START_MOD>"DeleteVmGuestAgentInterfacesByVmIds"<END_MOD>, getCustomMapSqlParameterSource().addValue("vm_id", <START_MOD>createArrayOfUUIDs(vmIds)<END_MOD>)); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsList = org.ovirt.engine.core.bll.GetAllVmsQuery.getDbFacade().getVmDao().getAll(org.ovirt.engine.core.bll.GetAllVmsQuery.getUserID(), org.ovirt.engine.core.bll.GetAllVmsQuery.getParameters().isFiltered()); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsList) { org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(vm); <START_MOD>org.ovirt.engine.core.bll.VmHandler.updateVmStatistics(vm); <END_MOD>} org.ovirt.engine.core.bll.GetAllVmsQuery.getQueryReturnValue().setReturnValue(vmsList); }
<START_MOD>boolean isCpuHotplugSupported(int os_id);<END_MOD>
<START_MOD>boolean isCpuHotunplugSupported(int os_id);<END_MOD>
public org.ovirt.engine.core.common.action.VdcReturnValueBase endAction(org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task) { org.ovirt.engine.core.common.businessentities.AsyncTask dbAsyncTask = task.getParameters().getDbAsyncTask(); org.ovirt.engine.core.common.action.VdcActionType actionType = getEndActionType(dbAsyncTask); org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = dbAsyncTask.getActionParameters(); org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.tasks.CommandHelper.buildCommand(actionType, parameters, <START_MOD>coco.retrieveCommandContext(dbAsyncTask.getCommandId()).getExecutionContext()<END_MOD>, coco.getCommandStatus(dbAsyncTask.getCommandId())); return new org.ovirt.engine.core.bll.tasks.DecoratedCommand(command).endAction(); }
private static org.ovirt.engine.core.common.businessentities.UsbPolicy getUsbPolicyAccordingToUsbType(org.ovirt.engine.api.model.UsbType usbType) { switch (usbType) { case NATIVE : return org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE; default : return null; } }
private void initUsbPolicy() { java.lang.Integer osType = getOSType().getSelectedItem(); org.ovirt.engine.core.common.businessentities.DisplayType displayType = getDisplayType().getSelectedItem(); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.GraphicsTypes graphicsTypes = getGraphicsType().getSelectedItem(); if (((osType == null) || (displayType == null)) || (graphicsTypes == null)) { return; } getUsbPolicy().setIsChangeable(true); org.ovirt.engine.core.common.businessentities.UsbPolicy prevSelectedUsbPolicy = getUsbPolicy().getSelectedItem(); if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isLinuxOsType(osType)) { getUsbPolicy().setItems(java.util.Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE)); } else { getUsbPolicy().setItems(java.util.Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE)); } if (!(graphicsTypes.getBackingGraphicsTypes().contains(GraphicsType.SPICE))) { getUsbPolicy().setIsChangeable(false); } if (getBehavior().basedOnCustomInstanceType()) { java.util.Collection<org.ovirt.engine.core.common.businessentities.UsbPolicy> policies = getUsbPolicy().getItems(); if (policies.contains(prevSelectedUsbPolicy)) { getUsbPolicy().setSelectedItem(prevSelectedUsbPolicy); } else if ((policies.size()) > 0) { getUsbPolicy().setSelectedItem(policies.iterator().next()); } } }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel fenceAgentModel) {<START_MOD> if ((((this.model) != null) && (fenceAgentModel != null)) && (!(fenceAgentModel.equals(this.model)))) { driver.cleanup(); }<END_MOD> driver.edit(fenceAgentModel); this.model = fenceAgentModel; determineLabelValue(fenceAgentModel); fenceAgentModel.getManagementIp().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { determineLabelValue(model); } }); fenceAgentModel.getConcurrentSelectList().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsAvailable".equals(args.propertyName)) { determineLabelValue(model); } } }); }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel fenceAgentModel) {<START_MOD> if ((((this.model) != null) && (fenceAgentModel != null)) && (!(fenceAgentModel.equals(this.model)))) { driver.cleanup(); }<END_MOD> driver.edit(fenceAgentModel); this.model = fenceAgentModel; determineLabelValue(fenceAgentModel); fenceAgentModel.getManagementIp().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { determineLabelValue(model); } }); }
public void validate(java.util.List<java.lang.String> errors) { int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); assert (errors != null) && ((errors.size()) == rowCount) :   must be the same size as the contents of the table! for (int i = 0; i < rowCount; ++i) { com.google.gwt.dom.client.Element element = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowElement(i); assert element != null :   shouldn be null if errors is the same size as the contents of the table! java.lang.String error = errors.get(i); boolean valid = org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(error); if (!valid) { org.ovirt.engine.ui.common.<START_MOD>utils.ElementTooltipUtils.setTooltipOnElement(element, <END_MOD>com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(error)); element.addClassName(style.invalidRow()); } else { element.removeClassName(style.invalidRow()); } } }
@java.lang.Override public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.Boolean value, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.Boolean> valueUpdater) { org.ovirt.engine.ui.common.<START_MOD>utils<END_MOD>.<START_MOD>ElementTooltipUtils<END_MOD>.<START_MOD>setTooltipOnElement<END_MOD>(parent, <START_MOD>getTooltip()<END_MOD>); super.onBrowserEvent(context, parent, value, event, valueUpdater); }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip() { return tooltip; }
<START_MOD>public static void setTooltipOnElement(com.google.gwt.dom.client.Element e, com.google.gwt.safehtml.shared.SafeHtml tooltip, org.gwtbootstrap3.client.ui.constants.Placement placement) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(e, tooltip, placement, org.ovirt.engine.ui.common.utils.ElementTooltipUtils.getTooltipTemplate(null)); }<END_MOD>
@java.lang.Override public java.util.Set<java.lang.String> getConsumedEvents() { java.util.Set<java.lang.String> set = new java.util.HashSet<>(); set.add(BrowserEvents.CHANGE); set.add(BrowserEvents.KEYDOWN); set.add(BrowserEvents.MOUSEMOVE); return set; }
private void updateKeyTitle(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) { java.lang.String selectedKey = object.getKeys().getSelectedItem(); if (selectedKey != null) { org.ovirt.engine.ui.common.<START_MOD>utils<END_MOD>.<START_MOD>ElementTooltipUtils<END_MOD>.<START_MOD>setTooltipOnElement(keyField<END_MOD>.<START_MOD>getElement<END_MOD>(<START_MOD>), <END_MOD>com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(selectedKey)); } }
@java.lang.Override public void setTooltip(com.google.gwt.safehtml.shared.SafeHtml tooltip, org.gwtbootstrap3.client.ui.constants.Placement placement) { org.ovirt.engine.ui.common.<START_MOD>utils<END_MOD>.<START_MOD>ElementTooltipUtils<END_MOD>.<START_MOD>setTooltipOnElement<END_MOD>(getElement()<START_MOD>, tooltip<END_MOD>, placement); }
@java.lang.Override public void setTooltip(com.google.gwt.safehtml.shared.SafeHtml tooltip) { org.ovirt.engine.ui.common.<START_MOD>utils<END_MOD>.<START_MOD>ElementTooltipUtils<END_MOD>.<START_MOD>setTooltipOnElement<END_MOD>(getElement()<START_MOD>, tooltip<END_MOD>); }
public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element elem, final T object, com.google.gwt.dom.client.NativeEvent event) { final int index = context.getIndex(); com.google.gwt.cell.client.ValueUpdater<C> valueUpdater = ((org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getFieldUpdater()) == null) ? null : new com.google.gwt.cell.client.ValueUpdater<C>() { @java.lang.Override public void update(C value) { getFieldUpdater().update(index, object, value); } }; getCell().onBrowserEvent(context, elem, org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getValue(object), event, valueUpdater); }
public <START_MOD>com.google.gwt.safehtml.shared.SafeHtml<END_MOD> <START_MOD>getTooltip<END_MOD>(<START_MOD>C<END_MOD> <START_MOD>value<END_MOD>, com.google.gwt.dom.client.Element parent) { <START_MOD>return<END_MOD> null; }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { <START_MOD>com.google.gwt.safehtml.shared.SafeHtml tooltip = getTooltip(value); if (tooltip == null) { tooltip = getTooltip(value, parent); } org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(parent, tooltip); super.<END_MOD>onBrowserEvent(context, parent, value, event, valueUpdater); }
public void setText(com.google.gwt.safehtml.shared.SafeHtml text) { setTooltipText(text.asString()); }
<START_MOD>@java.lang.Override public void execute() { applyTooltip(); }<END_MOD>
<START_MOD>private void applyTooltip() { if (((getWidget()) != null) && ((tooltip) != null)) { java.lang.String template = org.ovirt.engine.ui.common.utils.ElementTooltipUtils.getTooltipTemplate(extraTooltipClassNames.trim()); org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(getWidget().getElement(), tooltip, placement, template); } }<END_MOD>
<START_MOD>private static native void destroyTooltip(com.google.gwt.dom.client.Element e);<END_MOD>
@java.lang.Override public java.util.Set<java.lang.String> getConsumedEvents() { <START_MOD>return<END_MOD> new java.util.HashSet(super.getConsumedEvents()); }
<START_MOD>public void setPlacement(org.gwtbootstrap3.client.ui.constants.Placement placement) { this.placement = placement; }<END_MOD>
void attachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().add(alertPanel); com.google.gwt.dom.client.Element messageDivElement = alertPanel.getMessageAt(0).getElement(); if (org.ovirt.engine.ui.common.utils.ElementUtils.detectHorizontalOverflow(messageDivElement)) { com.google.gwt.safehtml.shared.SafeHtml tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(messageDivElement.getInnerText()); org.ovirt.engine.ui.common.<START_MOD>utils<END_MOD>.<START_MOD>ElementTooltipUtils<END_MOD>.<START_MOD>setTooltipOnElement<END_MOD>(alertPanel.getElement()<START_MOD>, tooltipContent<END_MOD>, Placement.BOTTOM); } }
private void updateBadge() { badge.setVisible(((count) != 1)); badgeText.setText(java.lang.String.valueOf(count)); if (badge.isVisible()) { com.google.gwt.safehtml.shared.SafeHtmlBuilder builder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); for (com.google.gwt.safehtml.shared.SafeHtml message : messagesList) { builder.append(message); } org.ovirt.engine.ui.common.<START_MOD>utils<END_MOD>.<START_MOD>ElementTooltipUtils<END_MOD>.<START_MOD>setTooltipOnElement<END_MOD>(<START_MOD>getElement<END_MOD>(), <START_MOD>builder.toSafeHtml<END_MOD>()); } }
<START_MOD>public void setHtml(com.google.gwt.safehtml.shared.SafeHtml html) { assert html != null : "Tooltip HTML content cannot be null"; if (((tooltip) == null) || (!(tooltip.asString().equals(html.asString())))) { tooltip = html; applyTooltip(); } }<END_MOD>
public void setMaxWidth(org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.Width width) { <START_MOD>extraTooltipClassNames +=     + <END_MOD>(width.<START_MOD>getClassName<END_MOD>()); }
<START_MOD>private static native void createTooltip(com.google.gwt.dom.client.Element e, java.lang.String placement, java.lang.String template);<END_MOD>
<START_MOD>@java.lang.Override public void setWidget(com.google.gwt.user.client.ui.Widget w) { super.setWidget(w); if ((w != null) && (w == (getWidget()))) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { applyTooltip(); } }); } }<END_MOD>
<START_MOD>public static void setTooltipOnElement(com.google.gwt.dom.client.Element e, com.google.gwt.safehtml.shared.SafeHtml tooltip) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(e, tooltip, TooltipConfig.PLACEMENT); }<END_MOD>
<START_MOD>public static java.lang.String getTooltipTemplate(java.lang.String extraTooltipClassNames) { java.lang.String outerClassNames = org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.TEMPLATE_CLASS_OUTER; if (org.ovirt.engine.ui.uicompat.external.StringUtils.isNotEmpty(extraTooltipClassNames)) { outerClassNames += " " + extraTooltipClassNames; } java.lang.String template = org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.TEMPLATE; template = template.replace("{0}", outerClassNames); template = template.replace("{1}", TooltipConfig.TEMPLATE_CLASS_ARROW); template = template.replace("{2}", TooltipConfig.TEMPLATE_CLASS_INNER); return template; }<END_MOD>
<START_MOD>@java.lang.Override protected void writeGeneralData() { super.writeGeneralData(); _writer.writeStartElement(OvfProperties.CUSTOM_EMULATED_MACHINE); _writer.writeRaw(emulatedMachine); _writer.writeEndElement(); _writer.writeStartElement(OvfProperties.CUSTOM_CPU_NAME); _writer.writeRaw(cpuId); _writer.writeEndElement(); }<END_MOD>
<START_MOD>@org.junit.Test public void cpuNameIsNull() { cpuId = null; assertThatThrownBy(() -> new org.ovirt.engine.core.utils.ovf.HostedEngineOvfWriter(vm, images, version, emulatedMachine, cpuId)).isInstanceOf(java.lang.NullPointerException.class).hasMessageContaining("cpuId"); }<END_MOD>
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.FencingPolicy.class, to = org.ovirt.engine.api.model.FencingPolicy.class) public static org.ovirt.engine.api.model.FencingPolicy map(org.ovirt.engine.api.model.FencingPolicy model, org.ovirt.engine.core.common.businessentities.FencingPolicy template) { org.ovirt.engine.core.common.businessentities.FencingPolicy entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.FencingPolicy(); entity.setFencingEnabled(model.isEnabled()); if (model.isSetSkipIfSdActive()) { entity.setSkipFencingIfSDActive(model.getSkipIfSdActive().isEnabled()); } if (model.isSetSkipIfConnectivityBroken()) { entity.setSkipFencingIfConnectivityBroken(model.getSkipIfConnectivityBroken().isEnabled()); if ((model.getSkipIfConnectivityBroken().getThreshold()) != null) { entity.setHostsWithBrokenConnectivityThreshold(model.getSkipIfConnectivityBroken().getThreshold()); } else { entity.setHostsWithBrokenConnectivityThreshold(50); } } <START_MOD>if (model.isSetSkipIfGlusterBricksUp()) { entity.setSkipFencingIfGlusterQuorumNotMet(model.getSkipIfGlusterBricksUp().isEnabled()); } if (model.isSetSkipIfGlusterQuorumNotMet()) { entity.setSkipFencingIfGlusterQuorumNotMet(model.getSkipIfGlusterQuorumNotMet().isEnabled()); } <END_MOD>return entity; }
@java.lang.Override protected boolean validate() { setStoragePoolId(getVm().getStoragePoolId()); if ((((!(isValidParametersList())) || (!(checkImagesStatus()))) || (!(validateSpaceRequirements()))) || (!(performVmRelatedChecks()))) { return false; } for (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getParametersList()) { org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getReturnValue().setValid((((((isDiskNotShareable(parameters.getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(parameters.getImageId()))) && (isTemplateInDestStorageDomain(parameters.getImageId(), parameters.getTargetStorageDomainId()))) && (performStorageDomainsChecks(parameters))) && (isSameSourceAndDest(parameters)))); if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getReturnValue().isValid())) { return false; } } if (!(setAndValidateDiskProfiles())) { return false; } return <START_MOD>validateCreateAllSnapshotsFromVmCommand(); }<END_MOD>
private void initSpyCommand() { doReturn(true).when(command).validateSpaceRequirements(); doReturn(true).when(command).checkImagesStatus(); doReturn(true).when(command).setAndValidateDiskProfiles(); <START_MOD>doReturn(true).when(command).validateCreateAllSnapshotsFromVmCommand(); <END_MOD>}
<START_MOD>@java.lang.Override protected void executeCommand() { runVdsCommand(VDSCommandType.SparsifyImage, new org.ovirt.engine.core.common.vdscommands.SparsifyImageVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getImageId(), org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getId())); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeVdsBrokerCommand() { java.util.Map<java.lang.String, java.lang.Object> volumeAddress = new java.util.HashMap<>(); volumeAddress.put("sd_id", org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getParameters().getStorageId()); volumeAddress.put("img_id", org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getParameters().getImageId()); volumeAddress.put("vol_id", org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getParameters().getVolumeId()); result = org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getBroker().sparsifyInplace(jobId, volumeAddress); org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.proceedProxyReturnValue(); }<END_MOD>
<START_MOD>private boolean selectProxyHost() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> activeHosts = org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getVdsDao().getAllForStoragePoolAndStatus(org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getStoragePoolId(), VDSStatus.Up); if (activeHosts.isEmpty()) { return false; } org.ovirt.engine.core.common.businessentities.VDS activeHost = activeHosts.get(0); setVds(activeHost); return true; }<END_MOD>
<START_MOD>protected org.ovirt.engine.core.common.businessentities.storage.Disk getDisk() { if ((disk) == null) { disk = org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskDao().get(org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getParameters().getImageId()); } return disk; }<END_MOD>
<START_MOD>@java.lang.Override protected void init() { setImageId(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getImageId()); }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.Disk disk = getDisk(); if (disk != null) { permsList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(disk.getId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.SPARSIFY_DISK)); } return permsList; }<END_MOD>
<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyInplace(org.ovirt.engine.core.compat.Guid jobId, java.util.Map<java.lang.String, java.lang.Object> volumeAddress);<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyInplace(org.ovirt.engine.core.compat.Guid jobId, java.util.Map<java.lang.String, java.lang.Object> volumeAddress) { throw new java.lang.UnsupportedOperationException(); }<END_MOD>
<START_MOD>@java.lang.Override protected boolean validate() { if (((org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getVds()) == null) && (!(selectProxyHost()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_NO_VDS_IN_POOL); } return true; }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyInplace(org.ovirt.engine.core.compat.Guid jobId, java.util.Map<java.lang.String, java.lang.Object> volumeAddress) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.sparsify_inplace").withParameter("job_id", jobId).withParameter("vol_addr", volumeAddress).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }<END_MOD>
@java.lang.Override protected void executeCommand() { log.info( ImageTransfer entity for command '{}' org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>TransferImageCommand<END_MOD>.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>TransferImageCommand<END_MOD>.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>TransferImageCommand<END_MOD>.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>TransferImageCommand<END_MOD>.getParameters().<START_MOD>getTransferSize<END_MOD>()); imageTransferDao.save(entity); log.info( {} image <START_MOD>getImageType<END_MOD>()); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>TransferImageCommand<END_MOD>.getParameters().getImageId())) { createImage(); } else { <START_MOD>handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<END_MOD>.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>TransferImageCommand<END_MOD>.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>TransferImageCommand<END_MOD>.setSucceeded(true); }
<START_MOD>public boolean isDownloading() { return isDownloading; }<END_MOD>
<START_MOD>public void setIsDownloading(boolean isDownloading) { this.isDownloading = isDownloading; }<END_MOD>
<START_MOD>@org.junit.Test public void testUploadIsDefaultTransferType() { assertEquals(transferImageCommand.getTransferType(), transferImageCommand.UPLOAD); }<END_MOD>
protected java.lang.String getTransferDescription() { return java.lang.String.format( <START_MOD>%s <END_MOD>'%s' (id '%s')<START_MOD> getTransferType(),<END_MOD> getImageType(), getImageAlias(), getImageIdNullSafe()); }
<START_MOD>@org.junit.Test public void testFailOnDownloadWithoutImage() { transferImageCommand.getParameters().setIsDownloading(true); junit.framework.Assert.assertFalse(transferImageCommand.validate()); assertThat(transferImageCommand.getReturnValue().getValidationMessages(), contains(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD.name())); }<END_MOD>
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(imageId))) { return validateImageTransfer(imageId); } else { <START_MOD>if (!(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().isDownloading())) { <END_MOD>return validateCreateImage(); } <START_MOD>else { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); <END_MOD>}<START_MOD> } }<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.ImageTransfer imageTransfer) { org.ovirt.engine.core.common.action.TransferDiskImageParameters params = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(); <START_MOD>if (((imageTransfer.getDirection()) != null) && (imageTransfer.getDirection().equals(ImageTransferDirection.DOWNLOAD))) { params.setIsDownloading(true); } <END_MOD>params.setImageId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(imageTransfer.getImage().getId())); params.setKeepaliveInterval(ConfigurationValues.UploadImageUiInactivityTimeoutInSeconds.getValue()); return performCreate(VdcActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
<START_MOD>@org.junit.Test public void testFailsDownloadExecutionWithoutImage() { transferImageCommand.getParameters().setIsDownloading(true); transferImageCommand.executeCommand(); junit.framework.Assert.assertFalse(transferImageCommand.getReturnValue().getSucceeded()); assertThat(transferImageCommand.getReturnValue().getValidationMessages(), contains(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD.name())); }<END_MOD>
@java.lang.Override protected void executeCommand() { log.info( ImageTransfer entity for command '{}' org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); <START_MOD>if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())) { if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().isDownloading()) { failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(false); return; } <END_MOD>log.info( {} image getImageType()); <START_MOD>createImage(); } else { handleImageIsReadyForTransfer<END_MOD>(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } <START_MOD>setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true<END_MOD>); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> getOvfEntityList(org.ovirt.engine.core.common.businessentities.VmEntityType vmEntityType) { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = <START_MOD>unregisteredOVFDataDao<END_MOD>.getAllForStorageDomainByEntityType(org.ovirt.engine.core.bll.storage.domain.GetUnregisteredEntitiesQuery.getParameters().getId(), vmEntityType); return entityList; }
private static org.ovirt.vdsm.jsonrpc.client.JsonRpcClient createClient(java.lang.String hostname, int port, org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy connectionPolicy, org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy clientPolicy, boolean isSecure, org.ovirt.vdsm.jsonrpc.client.reactors.ReactorType type, java.lang.String protocol, int parallelism) { org.ovirt.vdsm.jsonrpc.client.reactors.ManagerProvider provider = null; if (isSecure) { provider = new org.ovirt.engine.core.vdsbroker.jsonrpc.EngineManagerProvider(protocol); } try { final org.ovirt.vdsm.jsonrpc.client.reactors.Reactor reactor = org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.getReactor(provider, type); return org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.getJsonClient(reactor, hostname, port, connectionPolicy, clientPolicy, parallelism); } catch (org.ovirt.vdsm.jsonrpc.client.ClientConnectionException e) { org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.log.error( occured during building ssl context or obtaining selector <START_MOD>org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.log.debug("Exception", <END_MOD>e); throw new java.lang.IllegalStateException(e); } }
private boolean executeSshReboot(java.lang.String version) { try (final org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient();final java.io.ByteArrayOutputStream cmdOut = new java.io.ByteArrayOutputStream();final java.io.ByteArrayOutputStream cmdErr = new java.io.ByteArrayOutputStream()) { try { log.info( SSH reboot session on host {} org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName()); sshClient.setVds(org.ovirt.engine.core.bll.SshHostRebootCommand.getVds()); sshClient.useDefaultKeyPair(); sshClient.connect(); sshClient.authenticate(); log.info( SSH reboot command on host {} org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName()); sshClient.executeCommand(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SshHostRebootCommand, version), null, cmdOut, cmdErr); return true; } catch (java.lang.Exception ex) { log.error( reboot command failed on host   {} {} {} org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName(), ex.getMessage(), cmdOut, cmdErr); log.debug("Exception", ex); } } catch (java.io.IOException e) { log.error("IOException"<START_MOD>); log.debug("Exception"<END_MOD>, e); } return false; }
private boolean executeSshPowerDown(java.lang.String version) { boolean ret = false; try (final org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient();final java.io.ByteArrayOutputStream cmdOut = new java.io.ByteArrayOutputStream();final java.io.ByteArrayOutputStream cmdErr = new java.io.ByteArrayOutputStream()) { try { log.info( SSH power down session on host {} org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName()); sshClient.setVds(org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds()); sshClient.useDefaultKeyPair(); sshClient.connect(); sshClient.authenticate(); log.info( SSH power down command on host {} org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName()); sshClient.executeCommand(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SshVdsPowerdownCommand, version), null, cmdOut, cmdErr); ret = true; } catch (java.lang.Exception ex) { log.error( power down command failed on host   {} {} {} org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName(), ex.getMessage(), cmdOut, cmdErr); log.debug("Exception", ex); } } catch (java.io.IOException e) { log.error("IOException"<START_MOD>); log.debug("Exception"<END_MOD>, e); } return ret; }
private void cloneStructureNotCollapsed() { org.ovirt.engine.core.common.action.CloneImageGroupVolumesStructureCommandParameters p = new org.ovirt.engine.core.common.action.CloneImageGroupVolumesStructureCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getSrcDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getDestDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getDestinationFormat(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getActionType(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters()); p.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters()); p.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getActionType()); p.setEndProcedure(EndProcedure.COMMAND_MANAGED); <START_MOD>p.setJobWeight(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getOperationsWeight().get(CopyStage.DEST_CREATION)); <END_MOD>runInternalAction(VdcActionType.CloneImageGroupVolumesStructure, p); }
<START_MOD>private void prepareParameters() { java.util.Map<java.lang.Object, java.lang.Integer> weights = new java.util.HashMap(); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().setOperationsWeight(weights); int createWeight = (org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getJobWeight()) / 10; weights.put(CopyStage.DEST_CREATION, createWeight); weights.put(CopyStage.DATA_COPY, ((org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getJobWeight()) - createWeight)); }<END_MOD>
public org.ovirt.engine.core.common.job.Step addStep(org.ovirt.engine.core.bll.job.ExecutionContext context, org.ovirt.engine.core.common.job.StepEnum stepName, java.lang.String description, boolean isExternal) { if (context == null) { return null; } org.ovirt.engine.core.common.job.Step step = null; if (context.isMonitored()) { if (description == null) { description = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.getInstance().getStepMessage(stepName); } try { org.ovirt.engine.core.common.job.Job job = context.getJob(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsJob)) && (job != null)) { step = job.addStep(stepName, description); try { step.setExternal(isExternal); jobRepository.saveStep(step); } catch (java.lang.Exception e) { log.error( to save new step '{}' for job '{}', '{}': {} stepName.name(), job.getId(), job.getActionType().name(), e.getMessage()); log.debug("Exception", e); job.getSteps().remove(step); step = null; } } else { org.ovirt.engine.core.common.job.Step contextStep = context.getStep(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsStep)) && (contextStep != null)) { step = addSubStep(contextStep, stepName, description<START_MOD>, java.util.Collections.emptyList(), false<END_MOD>); step.setExternal(isExternal); } } } catch (java.lang.Exception e) { log.error("Exception", e); } } return step; }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = diskImageDao.getAllSnapshotsForImageGroup(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID()); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.sortImageList(images); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().setImageIds(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDiskImageIds(images)); <START_MOD>double totalSize = images.stream().mapToDouble(( di) -> di.getActualSize()).sum(); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().setOperationsWeight(images.stream().collect(java.util.stream.Collectors.toMap(DiskImage::getImageId, ( x) -> calculateImageWeight(totalSize, x)))); <END_MOD>persistCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getParentCommand(), ((getCallback()) != null)); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.setSucceeded(true); }
private void copyVolumeData(org.ovirt.engine.core.compat.Guid image) { org.ovirt.engine.core.common.action.CopyDataCommandParameters parameters = new org.ovirt.engine.core.common.action.CopyDataCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getStoragePoolId(), buildImageLocationInfo(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getSrcDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID(), image), buildImageLocationInfo(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getDestDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID(), image), false); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters()); <START_MOD>parameters.setJobWeight(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getOperationsWeight().get(image)); <END_MOD>runInternalActionWithTasksContext(VdcActionType.CopyData, parameters); }
public org.ovirt.engine.core.common.job.Step addTaskStep(org.ovirt.engine.core.bll.job.ExecutionContext context, org.ovirt.engine.core.common.job.StepEnum stepName, java.lang.String description<START_MOD>, java.util.Collection<org.ovirt.engine.core.common.job.StepSubjectEntity> stepSubjectEntities<END_MOD>) { if (context == null) { return null; } org.ovirt.engine.core.common.job.Step step = null; if (context.isTasksMonitored()) { org.ovirt.engine.core.common.job.Step parentTaskStep = context.getParentTasksStep(); if (parentTaskStep != null) { step = addSubStep(parentTaskStep, stepName, description<START_MOD>, stepSubjectEntities, true<END_MOD>); } } return step; }
private org.ovirt.engine.core.common.job.Step addSubStep(org.ovirt.engine.core.common.job.Step parentStep, org.ovirt.engine.core.common.job.StepEnum stepName, java.lang.String description<START_MOD>, java.util.Collection<org.ovirt.engine.core.common.job.StepSubjectEntity> stepSubjectEntities, boolean hasProgress<END_MOD>) { org.ovirt.engine.core.common.job.Step step = null; if (parentStep != null) { if (description == null) { description = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.getInstance().getStepMessage(stepName); } step = parentStep.addStep(stepName, description); <START_MOD>if (hasProgress) { step.setProgress(0); } <END_MOD>try { jobRepository.saveStep(step<START_MOD>, stepSubjectEntities<END_MOD>); } catch (java.lang.Exception e) { log.error( to save new step '{}' for step '{}', '{}': {} stepName.name(), parentStep.getId(), parentStep.getStepType().name(), e.getMessage()); log.debug("Exception", e); parentStep.getSteps().remove(step); step = null; } } return step; }
<START_MOD>private int calculateImageWeight(double totalSize, org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { double weight = (totalSize == 0) ? 1 / (org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageIds().size()) : (image.getActualSize()) / totalSize; return java.lang.Long.valueOf(java.lang.Math.round((weight * (org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getJobWeight())))).intValue(); }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> getCommandStepSubjectEntities() { if ((org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo()) instanceof org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) { return java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(org.ovirt.engine.core.common.VdcObjectType.Disk, ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo())).getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getJobWeight())); } return null; }<END_MOD>
public org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand, java.lang.String description, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType> entitiesMap) { org.ovirt.engine.core.common.job.Step taskStep = org.ovirt.engine.core.bll.job.ExecutionHandler.getInstance().addTaskStep(command.getExecutionContext(), org.ovirt.engine.core.common.job.StepEnum.getStepNameByTaskType(asyncTaskCreationInfo.getTaskType()), description<START_MOD>, command.getCommandStepSubjectEntities()); command.getExecutionContext().setStep(taskStep<END_MOD>); if (taskStep != null) { asyncTaskCreationInfo.setStepId(taskStep.getId()); } org.ovirt.engine.core.bll.tasks.SPMAsyncTask task = concreteCreateTask(taskId, command, asyncTaskCreationInfo, parentCommand); task.setEntitiesMap(entitiesMap); org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.addOrUpdateTaskInDB(task); getAsyncTaskManager().lockAndAddTaskToManager(task); org.ovirt.engine.core.compat.Guid vdsmTaskId = task.getVdsmTaskId(); org.ovirt.engine.core.bll.job.ExecutionHandler.getInstance().updateStepExternalId(taskStep, vdsmTaskId, ExternalSystemType.VDSM); return vdsmTaskId; }
private void handleCommandStepAndEntities() { if ((getCommandStep()) != null) { org.ovirt.engine.core.common.job.Step taskStep = executionHandler.addTaskStep(getExecutionContext(), getCommandStep(), null<START_MOD>, getCommandStepSubjectEntities()<END_MOD>); if (taskStep != null) { getExecutionContext().setStep(taskStep); persistCommandIfNeeded(); } } }
<START_MOD>public java.util.Map<?, java.lang.Integer> getOperationsWeight() { return operationsWeight; }<END_MOD>
<START_MOD>public void setOperationsWeight(java.util.Map<java.lang.Object, java.lang.Integer> operationsWeight) { this.operationsWeight = operationsWeight; }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> getCommandStepSubjectEntities() { if ((org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getJobWeight()) != null) { return java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getJobWeight().intValue())); } return null; }<END_MOD>
private org.ovirt.engine.core.common.businessentities.aaa.DbUser buildUser(T params, java.lang.String authzName) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = dbUserDao.getByExternalId(authzName, params.getPrincipalId()); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = new org.ovirt.engine.core.common.businessentities.aaa.DbUser(<START_MOD>dbUser<END_MOD>); user.setId((dbUser == null ? org.ovirt.engine.core.compat.Guid.newGuid() : dbUser.getId())); user.setExternalId(params.getPrincipalId()); user.setDomain(authzName); user.setEmail(params.getEmail<START_MOD>()); user.setFirstName(params.getFirstName()); user.setLastName(params.getLastName()); user.setNamespace(params.getNamespace<END_MOD>()); user.setLoginName(params.getPrincipalName()); java.util.List<org.ovirt.engine.core.compat.Guid> groupIds = new java.util.ArrayList<>(); java.util.List<java.lang.String> groupRecordIds = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.aaa.CreateUserSessionCommand.flatGroups(((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (params.getGroupIds())), groupRecordIds); for (java.lang.String groupId : groupRecordIds) { org.ovirt.engine.core.common.businessentities.aaa.DbGroup dbGroup = dbGroupDao.getByExternalId(authzName, groupId); if (dbGroup != null) { groupIds.add(dbGroup.getId()); } } user.setGroupIds(groupIds); if (dbUser == null) { dbUserDao.save(user); } else if (!(dbUser.equals(user))) { dbUserDao.update(user); } return user; }
<START_MOD>java.lang.String areYouSureYouWantToCheckForUpgradeTheFollowingHostMsg();<END_MOD>
@java.lang.Override public <START_MOD>org.ovirt.engine.core.common.utils.HostUpgradeManagerResult<END_MOD> isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = backendInternal.runInternalQuery(VdcQueryType.GetoVirtISOs, new org.ovirt.engine.core.common.queries.IdQueryParameters(host.getId())); java.util.List<org.ovirt.engine.core.compat.RpmVersion> isos = returnValue.getReturnValue(); boolean updateAvailable = org.ovirt.engine.core.common.utils.RpmVersionUtils.isUpdateAvailable(isos, host.getHostOs()); <START_MOD>org.ovirt.engine.core.common.utils.HostUpgradeManagerResult hostUpgradeManagerResult = new org.ovirt.engine.core.common.utils.HostUpgradeManagerResult(); hostUpgradeManagerResult.setUpdatesAvailable(updateAvailable); <END_MOD>if (updateAvailable) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLog = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLog.setVds(host); auditLogDirector.log(auditLog, AuditLogType.OVIRT_NODE_UPDATES_ARE_AVAILABLE); } return <START_MOD>hostUpgradeManagerResult<END_MOD>; }
<START_MOD>org.ovirt.engine.core.common.utils.HostUpgradeManagerResult<END_MOD> isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host);
<START_MOD>private void onUpgrade() { if ((getProgress()) != null) { return; } org.ovirt.engine.core.common.action.hostdeploy.HostUpgradeCheckParameters params = new org.ovirt.engine.core.common.action.hostdeploy.HostUpgradeCheckParameters(host.getId()); invokeCheckForHostUpgrade(params); }<END_MOD>
public <START_MOD>org.ovirt.engine.core.common.utils.HostUpgradeManagerResult<END_MOD> isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { return create(host.getVdsType()).isUpdateAvailable(host); }
<START_MOD>private org.ovirt.engine.core.compat.Guid findChildCommandByActionType(org.ovirt.engine.core.common.action.VdcActionType commandType, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { for (org.ovirt.engine.core.compat.Guid cmdId : childCmdIds) { org.ovirt.engine.core.common.businessentities.CommandEntity commandEntity = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(cmdId); if ((commandEntity.getCommandType()) == commandType) { return cmdId; } } return null; }<END_MOD>
<START_MOD>@java.lang.Override public void initialize() { setTitle(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.constants.upgradeHostTitle()); setHelpTag(HelpTag.upgrade_host); setHashName(HelpTag.upgrade_host.name); setMessage(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.constants.areYouSureYouWantToCheckForUpgradeTheFollowingHostMsg()); org.ovirt.engine.ui.uicommonweb.UICommand upgradeCommand = new org.ovirt.engine.ui.uicommonweb.UICommand(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.ON_CHECK_UPGRADE, this); upgradeCommand.setTitle(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.constants.ok()); upgradeCommand.setIsDefault(true); getCommands().add(upgradeCommand); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.VDS vds = vdsDao.get(org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.getVdsId()); org.ovirt.engine.core.common.utils.HostUpgradeManagerResult hostUpgradeManagerResult; try { hostUpgradeManagerResult = availableUpdatesFinder.isUpdateAvailable(vds); if (hostUpgradeManagerResult.isUpdatesAvailable()) { java.lang.String message = ((hostUpgradeManagerResult.getAvailablePackages()) == null) ? "found updates." : java.lang.String.format(" found updates for packages %s", org.apache.commons.lang.StringUtils.join(hostUpgradeManagerResult.getAvailablePackages(), ", ")); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.addCustomValue("Message", message); vds.getDynamicData().setUpdateAvailable(hostUpgradeManagerResult.isUpdatesAvailable()); vdsDynamicDao.updateUpdateAvailable(vds.getId(), hostUpgradeManagerResult.isUpdatesAvailable()); } else { org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.addCustomValue("Message", " no updates found."); } org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.getReturnValue().setActionReturnValue(hostUpgradeManagerResult); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.setSucceeded(true); setCommandStatus(CommandStatus.SUCCEEDED); } catch (java.lang.Exception e) { log.error("Failed to check if updates are available for host '{}'", vds.getName()); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.setSucceeded(false); setCommandStatus(CommandStatus.FAILED); } }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.HOST_AVAILABLE_UPDATES_FINISHED : org.ovirt.engine.core.common.AuditLogType.HOST_AVAILABLE_UPDATES_FAILED; }<END_MOD>
@java.lang.Override public boolean isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { return availableUpdatesFinder.isUpdateAvailable(host)<START_MOD>.isUpdatesAvailable()<END_MOD>; }
<START_MOD>@java.lang.Override protected void executeCommand() { java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> upgradeCheckCmd = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.HostUpgradeCheckInternal, createUpgradeCheckParameters(), org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.cloneContext()); if (!(org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.getParameters().isRunAsync())) { org.ovirt.engine.core.common.action.VdcReturnValueBase result; try { result = upgradeCheckCmd.get(); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.getReturnValue().setActionReturnValue(result.getActionReturnValue()); if (!(result.getSucceeded())) { propagateFailure(result); return; } } catch (java.lang.InterruptedException | java.util.concurrent.ExecutionException e) { log.error("Exception", e); return; } } org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.setSucceeded(true); }<END_MOD>
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", getLUNId()).append("physicalVolumeId", getPhysicalVolumeId()).append("volumeGroupId", getVolumeGroupId()).append("serial", getSerial()).append("lunMapping", getLunMapping()).append("vendorId", getVendorId()).append("productId", getProductId()).append("lunConnections", getLunConnections()).append("deviceSize", getDeviceSize()).append("pvSize", getPvSize()).append("vendorName", getVendorName()).append("pathsDictionary", getPathsDictionary()).append("pathsCapacity", getPathsCapacity()).append("lunType", getLunType()).append("status", getStatus()).append("diskId", getDiskId()).append("diskAlias", getDiskAlias()).append("storageDomainId", getStorageDomainId()).append("storageDomainName", getStorageDomainName()).<START_MOD>append("discardMaxBytes", getDiscardMaxBytes()).append("discardZeroesData", isDiscardZeroesData()).<END_MOD>build(); }
<START_MOD>public java.lang.Boolean isDiscardZeroesData() { return staticData.isDiscardZeroesData(); }<END_MOD>
<START_MOD>public void setSupportsDiscard(java.lang.Boolean supportsDiscard) { this.supportsDiscard = supportsDiscard; }<END_MOD>
<START_MOD>public java.lang.Boolean isSupportsDiscard() { return supportsDiscard; }<END_MOD>
<START_MOD>public java.lang.Long getDiscardMaxBytes() { return discardMaxBytes; }<END_MOD>
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.storage.LUNs)) { return false; } org.ovirt.engine.core.common.businessentities.storage.LUNs other = ((org.ovirt.engine.core.common.businessentities.storage.LUNs) (obj)); return ((((((((((((((((((<START_MOD>((<END_MOD>java.util.Objects.equals(id, other.id)) && (java.util.Objects.equals(_lunConnections, other._lunConnections))) && (java.util.Objects.equals(lunMapping, other.lunMapping))) && (java.util.Objects.equals(physicalVolumeId, other.physicalVolumeId))) && ((deviceSize) == (other.deviceSize))) && ((pvSize) == (other.pvSize))) && (<START_MOD>java.util.Objects.equals(discardMaxBytes, other.discardMaxBytes))) && (java.util.Objects.equals(discardZeroesData, other.discardZeroesData))) && (<END_MOD>(lunType) == (other.lunType))) && (java.util.Objects.equals(pathsDictionary, other.pathsDictionary))) && (java.util.Objects.equals(pathsCapacity, other.pathsCapacity))) && (java.util.Objects.equals(vendorName, other.vendorName))) && (java.util.Objects.equals(productId, other.productId))) && (java.util.Objects.equals(serial, other.serial))) && (java.util.Objects.equals(vendorId, other.vendorId))) && (java.util.Objects.equals(volumeGroupId, other.volumeGroupId))) && (java.util.Objects.equals(status, other.status))) && (java.util.Objects.equals(diskId, other.diskId))) && (java.util.Objects.equals(diskAlias, other.diskAlias))) && (java.util.Objects.equals(storageDomainId, other.storageDomainId))) && (java.util.Objects.equals(storageDomainName, other.storageDomainName)); }
<START_MOD>public void setDiscardZeroesData(java.lang.Boolean discardZeroesData) { staticData.setDiscardZeroesData(discardZeroesData); }<END_MOD>
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("lun_id", lun.getLUNId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getLunMapping()).addValue("vendor_id", lun.getVendorId()).addValue("product_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize())<START_MOD>.addValue("discard_max_bytes", lun.getDiscardMaxBytes()).addValue("discard_zeroes_data", lun.isDiscardZeroesData())<END_MOD>; getCallsHandler().executeModification("InsertLUNs", parameterSource); }
<START_MOD>public java.lang.Boolean isSupportsDiscard() { return staticData.isSupportsDiscard(); }<END_MOD>
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { return createIdParameterMapper(lun.getId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getLunMapping()).addValue("vendor_id", lun.getVendorId()).addValue("product_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize())<START_MOD>.addValue("discard_max_bytes", lun.getDiscardMaxBytes()).addValue("discard_zeroes_data", lun.isDiscardZeroesData())<END_MOD>; }
protected java.util.Map<java.util.function.Consumer<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDbMap = lunsFromDb.stream().collect(java.util.stream.Collectors.toMap(LUNs::getLUNId, java.util.function.Function.identity())); return lunsFromVgInfo.stream().collect(java.util.stream.Collectors.groupingBy(( lunFromVgInfo) -> { org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDb = lunsFromDbMap.get(lunFromVgInfo.getLUNId()); if (lunFromDb == null) { return saveNewLuns; } boolean lunFromDbHasSamePvId = java.util.Objects.equals(lunFromDb.getPhysicalVolumeId(), lunFromVgInfo.getPhysicalVolumeId()); if (lunFromDbHasSamePvId) { if ((<START_MOD>((<END_MOD>lunFromDb.getDeviceSize()) != (lunFromVgInfo.getDeviceSize())) <START_MOD>|| (!(java.util.Objects.equals(lunFromDb.getDiscardMaxBytes(), lunFromVgInfo.getDiscardMaxBytes())))) || (!(java.util.Objects.equals(lunFromDb.isDiscardZeroesData(), lunFromVgInfo.isDiscardZeroesData())))) <END_MOD>{ return updateExistingLuns; } return noOp; } return updateExistingLuns; })); }
<START_MOD>@org.junit.Test public void testGetLunsToUpdateInDbDiffDiscardMaxBytes() { lunFromVg.setDiscardMaxBytes(2048L); lunFromDb.setDiscardMaxBytes(1024L); assertLunShouldBeUpdatedDueToFieldChange(); }<END_MOD>
<START_MOD>public void setSupportsDiscard(java.lang.Boolean supportsDiscard) { staticData.setSupportsDiscard(supportsDiscard); }<END_MOD>
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("lun_id", lun.getLUNId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getLunMapping()).addValue("vendor_id", lun.getVendorId()).addValue("product_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize())<START_MOD>.addValue("discard_max_bytes", lun.getDiscardMaxBytes()).addValue("discard_zeroes_data", lun.isDiscardZeroesData())<END_MOD>; getCallsHandler().executeModification("UpdateLUNs", parameterSource); }
<START_MOD>public void setDiscardMaxBytes(java.lang.Long discardMaxBytes) { this.discardMaxBytes = discardMaxBytes; }<END_MOD>
public static boolean needsAlert(org.ovirt.engine.core.common.businessentities.VM vm) { <START_MOD>boolean needsAlert = false; if<END_MOD> ((<START_MOD>vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { needsAlert = <END_MOD>(org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasDifferentTimezone(vm)) || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasDifferentOSType(vm))<START_MOD>; } return (needsAlert<END_MOD> || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.isUpdateNeeded(vm))) || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasPauseError(vm)); }
public void setVdsNumaNodeList(java.util.List<org.ovirt.engine.core.common.<START_MOD>businessentities<END_MOD>.<START_MOD>VmNumaNode<END_MOD>.<START_MOD>Pinning<END_MOD>> vdsNumaNodeList) { this.vdsNumaNodeList = vdsNumaNodeList; }
public java.util.List<org.ovirt.engine.core.common.<START_MOD>businessentities<END_MOD>.<START_MOD>VmNumaNode<END_MOD>.<START_MOD>Pinning<END_MOD>> getVdsNumaNodeList() { return vdsNumaNodeList; }
private static org.ovirt.engine.core.bll.ValidationResult checkNumaPreferredTuneMode(org.ovirt.engine.core.common.businessentities.NumaTuneMode numaTuneMode, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) { if (numaTuneMode != (org.ovirt.engine.core.common.businessentities.NumaTuneMode.PREFERRED)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((vmNumaNodes.size()) == 1) { java.util.List<org.ovirt.engine.core.common.<START_MOD>businessentities.VmNumaNode.Pinning<END_MOD>> vdsNumaNodeList = vmNumaNodes.get(0).getVdsNumaNodeList(); boolean pinnedToSingleNode = ((vdsNumaNodeList != null) && ((vdsNumaNodeList.size()) == 1)) && (vdsNumaNodeList.get(0).<START_MOD>isPinned<END_MOD>()); if (pinnedToSingleNode) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_PREFERRED_NOT_PINNED_TO_SINGLE_NODE); }
private java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.<START_MOD>businessentities.VmNumaNode.Pinning>> getAllVmNumaNodePinInfo() { java.util.List<org.ovirt.engine.core.common.<END_MOD>utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.<START_MOD>businessentities.VmNumaNode.Pinning>> numaNodesAssign = getCallsHandler().executeReadList("GetAllAssignedNumaNodeInfomation", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeAssignmentRowMapper, null); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning>> vmNumaNodesPinMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.<END_MOD>utils.Pair<<START_MOD>org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning> pair : numaNodesAssign<END_MOD>) { <START_MOD>if (!(vmNumaNodesPinMap.containsKey(pair.getFirst()))) { vmNumaNodesPinMap.put(pair.getFirst(),<END_MOD> new java.util.<START_MOD>ArrayList()); } vmNumaNodesPinMap.get<END_MOD>(pair.getFirst())<START_MOD>.add(pair.getSecond<END_MOD>()); } <START_MOD>return vmNumaNodesPinMap<END_MOD>; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode>> getVmNumaNodeInfoByClusterId(org.ovirt.engine.core.compat.Guid cluster) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cluster_id", cluster); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode>> vmNumaNodes = getCallsHandler().executeReadList("GetVmNumaNodeByCluster", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeInfoWithClusterRowMapper, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.Integer>> numaNodesCpusMap = getAllNumaNodeCpuMap(); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.<START_MOD>businessentities.VmNumaNode.Pinning>> vmNumaNodesPinMap = getAllVmNumaNodePinInfo(); for (org.ovirt.engine.core.common.<END_MOD>utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.<START_MOD>businessentities.VmNumaNode> pair : vmNumaNodes) { if (numaNodesCpusMap.containsKey(pair.getSecond().getId())) { pair.getSecond().setCpuIds(numaNodesCpusMap.get(pair.getSecond().getId())); } if (<END_MOD>vmNumaNodesPinMap<START_MOD>.containsKey(pair.getSecond().getId())) { pair.getSecond().setVdsNumaNodeList(vmNumaNodesPinMap.get(pair.getSecond().getId())); } } return<END_MOD> vmNumaNodes; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> getAllVmNumaNodeByVmId(org.ovirt.engine.core.compat.Guid vmId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_id", vmId); java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = getCallsHandler().executeReadList("GetNumaNodeByVmId", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeCpuRowMapper, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.<START_MOD>businessentities.VmNumaNode.Pinning<END_MOD>>> vmNumaNodesPinMap = getAllVmNumaNodePinInfo(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { if (vmNumaNodesPinMap.containsKey(node.getId())) { node.setVdsNumaNodeList(vmNumaNodesPinMap.get(node.getId())); } } return vmNumaNodes; }
public static org.ovirt.engine.core.common.businessentities.VmNumaNode createVmNumaNode(int index, java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> vdsNumaNodes) { org.ovirt.engine.core.common.businessentities.VmNumaNode numaNode = org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode(index); final java.util.List<org.ovirt.engine.core.common.<START_MOD>businessentities.VmNumaNode.Pinning<END_MOD>> numaPinning = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VdsNumaNode vdsNumaNode : vdsNumaNodes) { numaPinning.add(<START_MOD>new org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning<END_MOD>(vdsNumaNode<START_MOD>.getId(), true, vdsNumaNode.getIndex()<END_MOD>)); } numaNode.setVdsNumaNodeList(numaPinning); return numaNode; }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createVnodeToPnodeParametersMapper(org.ovirt.engine.core.common.<START_MOD>businessentities<END_MOD>.<START_MOD>VmNumaNode<END_MOD>.<START_MOD>Pinning<END_MOD> <START_MOD>pinning<END_MOD>, org.ovirt.engine.core.compat.Guid vNodeId) { return org.ovirt.engine.core.dao.NumaNodeDaoImpl.getCustomMapSqlParameterSource().addValue("id", org.ovirt.engine.core.compat.Guid.newGuid()).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_id", <START_MOD>pinning<END_MOD>.<START_MOD>getVdsNodeId<END_MOD>()).addValue("vds_numa_node_index", <START_MOD>pinning<END_MOD>.<START_MOD>getVdsNodeIndex<END_MOD>()).addValue("is_pinned", <START_MOD>pinning<END_MOD>.<START_MOD>isPinned<END_MOD>()); }
private static java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> createTestVmNumaNodes() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> newVmNodes = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VmNumaNode newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.generateCpuList(0, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(0); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(new org.ovirt.engine.core.common.<START_MOD>businessentities.VmNumaNode.Pinning<END_MOD>(org.ovirt.engine.core.compat.Guid.newGuid(), true, 0)); newVmNodes.add(newVmNumaNode); newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.generateCpuList(4, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(1); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(new org.ovirt.engine.core.common.<START_MOD>businessentities.VmNumaNode.Pinning<END_MOD>(org.ovirt.engine.core.compat.Guid.newGuid(), true, 1)); newVmNodes.add(newVmNumaNode); return newVmNodes; }
private boolean isVmNumaPinned(java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes) { if ((nodes == null) || (nodes.isEmpty())) { return false; } for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : nodes) { for (org.ovirt.engine.core.common.<START_MOD>businessentities<END_MOD>.<START_MOD>VmNumaNode<END_MOD>.<START_MOD>Pinning<END_MOD> <START_MOD>pinning<END_MOD> : vmNumaNode.getVdsNumaNodeList()) { if (<START_MOD>pinning.isPinned<END_MOD>()) { return true; } } } return false; }
@org.junit.Test public void shouldDetectMissingPinningEntry() { vm.getvNumaNodeList().get(0).getVdsNumaNodeList().get(0).<START_MOD>setVdsNodeIndex<END_MOD>(null); assertValidationFailure(org.ovirt.engine.core.bll.numa.vm.NumaValidator.checkVmNumaNodesIntegrity(vm, vm.getvNumaNodeList()), EngineMessage.VM_NUMA_NODE_PINNED_INDEX_ERROR); }
public org.ovirt.engine.core.common.businessentities.VmNumaNode toVmNumaNode() { final org.ovirt.engine.core.common.businessentities.VmNumaNode newNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newNode.setIndex(vmNumaNode.getIndex()); newNode.setId(vmNumaNode.getId()); newNode.setMemTotal(vmNumaNode.getMemTotal()); if (isPinned()) { newNode.setVdsNumaNodeList(java.util.Arrays.asList(new org.ovirt.engine.core.common.<START_MOD>businessentities<END_MOD>.<START_MOD>VmNumaNode<END_MOD>.<START_MOD>Pinning<END_MOD>(null, pinned, hostNodeIndex))); } return newNode; }
private boolean canVmNumaPinnedToVds(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes, org.ovirt.engine.core.common.businessentities.VDS vds) { java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> pNodes = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsNumaNodeDao().getAllVdsNumaNodeByVdsId(vds.getId()); if ((pNodes == null) || (pNodes.isEmpty())) { return false; } java.util.Map<java.lang.Integer, org.ovirt.engine.core.common.businessentities.VdsNumaNode> indexMap = toMap(pNodes); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vNode : nodes) { for (org.ovirt.engine.core.common.<START_MOD>businessentities.VmNumaNode.Pinning pinning : vNode.getVdsNumaNodeList()) { if (pinning.isPinned()) { if ((vNode.getMemTotal()) <END_MOD>> (indexMap.get(<START_MOD>pinning.getVdsNodeIndex<END_MOD>()).getNumaNodeStatistics().getMemFree())) { return false; } } } } return true; }
@org.junit.Test public void testGetAllVmNumaNodeByVmId() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> result = vmNumaNodeDao.getAllVmNumaNodeByVmId(existingVm.getId()); assertNotNull(result); assertEquals(2, result.size()); org.ovirt.engine.core.compat.Guid vmNumaNode1 = new org.ovirt.engine.core.compat.Guid("3c2b81e6-5080-4ad1-86a1-cf513b15b517"); org.ovirt.engine.core.compat.Guid vmNumaNode2 = new org.ovirt.engine.core.compat.Guid("3c2b81e6-5080-4ad1-86a1-cf513b15b518"); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes = new java.util.HashMap<>(2); nodes.put(result.get(0).getId(), result.get(0)); nodes.put(result.get(1).getId(), result.get(1)); assertTrue(nodes.containsKey(vmNumaNode1)); assertTrue(nodes.containsKey(vmNumaNode2)); assertEquals(2, nodes.get(vmNumaNode1).getVdsNumaNodeList().size()); assertEquals(true, nodes.get(vmNumaNode1).getVdsNumaNodeList().get(0).<START_MOD>isPinned<END_MOD>()); assertEquals(true, nodes.get(vmNumaNode1).getVdsNumaNodeList().get(1).<START_MOD>isPinned<END_MOD>()); assertEquals(1, nodes.get(vmNumaNode2).getVdsNumaNodeList().size()); assertEquals(false, nodes.get(vmNumaNode2).getVdsNumaNodeList().get(0).<START_MOD>isPinned<END_MOD>()); assertEquals(0, nodes.get(vmNumaNode2).getVdsNumaNodeList().get(0).<START_MOD>getVdsNodeIndex<END_MOD>().intValue()); }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.getParameters().getVmNumaNodeList(); java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> vdsNumaNodes = org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.getVdsNumaNodes(); java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : vmNumaNodes) { for (org.ovirt.engine.core.common.<START_MOD>businessentities.VmNumaNode.Pinning pinning<END_MOD> : vmNumaNode.getVdsNumaNodeList()) { if (<START_MOD>pinning.isPinned(<END_MOD>)) { int index = <START_MOD>pinning.getVdsNodeIndex<END_MOD>(); for (org.ovirt.engine.core.common.businessentities.VdsNumaNode vdsNumaNode : vdsNumaNodes) { if ((vdsNumaNode.getIndex()) == index) { <START_MOD>pinning.setVdsNodeId<END_MOD>(vdsNumaNode.getId()); break; } } } } nodes.add(vmNumaNode); } org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.getVmNumaNodeDao().massUpdateNumaNode(nodes); org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.setSucceeded(true); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> filterVmsInClusterNeedUpdate() {<START_MOD> final boolean rngUpdateRequired = VmRngDevice.Source.urandomRandomUpdateRequired(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion());<END_MOD> return vmStaticDao.getAllByCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()).stream().filter(( vm) -> ((vm.getOrigin()) != OriginType.EXTERNAL) && (!(vm.isHostedEngine()))).filter(( vm) -> (<START_MOD>(<END_MOD>vm.getCustomCompatibilityVersion()) == null<START_MOD>) || rngUpdateRequired<END_MOD>).sorted().collect(java.util.stream.Collectors.toList()); }
<START_MOD>private boolean updateTemplates() { for (org.ovirt.engine.core.common.businessentities.VmTemplate template : templatesLockedForUpdate) { final org.ovirt.engine.core.common.action.UpdateVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.UpdateVmTemplateParameters(template); parameters.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); parameters.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); final org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVmTemplate, parameters); if (!(result.getSucceeded())) { org.ovirt.engine.core.bll.UpdateClusterCommand.getReturnValue().setFault(result.getFault()); return false; } } return true; }<END_MOD>
<START_MOD>@java.lang.Override protected void updateRngDevice(org.ovirt.engine.core.compat.Guid templateId) { if (!(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().isUpdateRngDevice())) { rngDeviceUtils.handleUrandomRandomChange(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().getClusterLevelChangeFromVersion(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getCluster().getCompatibilityVersion(), templateId, org.ovirt.engine.core.bll.UpdateVmTemplateCommand.cloneContextAndDetachFromParent(), false); return; } super.updateRngDevice(templateId); }<END_MOD>
@java.lang.Override protected void init() { org.ovirt.engine.core.bll.UpdateClusterCommand.updateMigrateOnError(); oldCluster = clusterDao.get(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()); if (((oldCluster) != null) && (!(java.util.Objects.equals(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion())))) { vmsLockedForUpdate = filterVmsInClusterNeedUpdate(); } <START_MOD>templatesLockedForUpdate = filterTemplatesInClusterNeedUpdate(); <END_MOD>}
<START_MOD>public void handleUrandomRandomChange(org.ovirt.engine.core.compat.Version oldClusterVersion, org.ovirt.engine.core.compat.Version newClusterVersion, org.ovirt.engine.core.compat.Guid vmBaseId, org.ovirt.engine.core.bll.context.CommandContext commandContext, boolean isVm) { if (oldClusterVersion == null) { return; } final boolean updatePotentiallyRequired = VmRngDevice.Source.urandomRandomUpdateRequired(oldClusterVersion, newClusterVersion); if (!updatePotentiallyRequired) { return; } final java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> rngDevices = backend.runInternalQuery(VdcQueryType.GetRngDevice, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBaseId), commandContext.getEngineContext()).getReturnValue(); if (rngDevices.isEmpty()) { return; } final org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = rngDevices.get(0); if (!(java.util.Arrays.asList(VmRngDevice.Source.RANDOM, VmRngDevice.Source.URANDOM).contains(rngDevice.getSource()))) { return; } rngDevice.setSource(VmRngDevice.Source.getUrandomOrRandomFor(newClusterVersion)); final org.ovirt.engine.core.common.action.RngDeviceParameters params = new org.ovirt.engine.core.common.action.RngDeviceParameters(rngDevice, isVm); backend.runInternalAction(VdcActionType.UpdateRngDevice, params, commandContext); }<END_MOD>
<START_MOD>protected java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> filterTemplatesInClusterNeedUpdate() { if (!(VmRngDevice.Source.urandomRandomUpdateRequired(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()))) { return java.util.Collections.emptyList(); } return vmTemplateDao.getAllForCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()); }<END_MOD>
<START_MOD>public void onSparsify(final org.ovirt.engine.ui.uicommonweb.ICommandTarget target) { java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameterList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disksToSparsify) { org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = new org.ovirt.engine.core.common.action.ImagesActionsParametersBase(disk.getId()); parameterList.add(parameters); } startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.SparsifyImage, parameterList, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { stopProgress(); target.executeCommand(cancelCommand); } }, this); }<END_MOD>
<START_MOD>private boolean isSparsifyCommandAvailable() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.Disk>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { if ((isDiskLocked(disk)) || ((!(isVmDown())) && (disk.getPlugged()))) { return false; } } return true; }<END_MOD>
<START_MOD>public void initialize(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disksToSparsify, org.ovirt.engine.ui.uicommonweb.ICommandTarget target) { this.vm = vm; this.disksToSparsify = disksToSparsify; org.ovirt.engine.ui.uicompat.UIConstants uiConstants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants(); setTitle(uiConstants.sparsifyDisksTitle()); setMessage(uiConstants.sparsifyConfirmationPopupMessage()); setHelpTag(HelpTag.sparsify_disk); setHashName("sparsify_disk"); getLatch().setEntity(false); java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> items = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disksToSparsify) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = new org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel(); diskModel.setDisk(disk); diskModel.setVm(vm); items.add(diskModel); if ((disk.getNumberOfVms()) > 1) { getLatch().setIsChangeable(false); } } setItems(items); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand(org.ovirt.engine.ui.uicommonweb.models.vms.SparsifyDiskModel.ON_SPARSIFY, target); getCommands().add(okCommand); cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand(org.ovirt.engine.ui.uicommonweb.models.vms.SparsifyDiskModel.CANCEL_SPARSIFY, target); getCommands().add(cancelCommand); }<END_MOD>
@org.junit.Test public void testSave() { org.ovirt.engine.core.common.businessentities.storage.DiskImage newImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); newImage.setImageId(org.ovirt.engine.core.compat.Guid.newGuid()); newImage.setVolumeFormat(VolumeFormat.COW<START_MOD>); newImage.setQcowComapt(QcowCompat.QCOW2_V3<END_MOD>); newImage.setVolumeType(VolumeType.Sparse); newImage.setActive(true); newImage.setImageTemplateId(org.ovirt.engine.core.dao.DiskImageDynamicDaoTest.EXISTING_IMAGE_DISK_TEMPLATE); newImage.setId(org.ovirt.engine.core.compat.Guid.newGuid()); imageDao.save(newImage.getImage()); diskDao.save(newImage); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic dynamic = createDiskImageDynamic(newImage.getImageId()); dao.save(createDiskImageDynamic(newImage.getImageId())); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic result = dao.get(dynamic.getId()); assertNotNull(result); assertEquals(dynamic, result); }
<START_MOD>public void setQcowComapt(org.ovirt.engine.core.common.businessentities.storage.QcowCompat qcowComapt) { getImage().setQcowCompat(qcowComapt); }<END_MOD>
@java.lang.Override public void saveUnregisteredDisk(org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk disk) { getCallsHandler().executeModification("InsertUnregisteredDisk", getCustomMapSqlParameterSource().addValue("disk_id", disk.getDiskImage().getId()).addValue("image_id", disk.getDiskImage().getImageId()).addValue("disk_alias", disk.getDiskImage().getDiskAlias()).addValue("disk_description", disk.getDiskImage().getDiskDescription()).addValue("creation_date", disk.getDiskImage().getCreationDate()).addValue("last_modified", disk.getDiskImage().getLastModified()).addValue("volume_type", disk.getDiskImage().getVolumeType()).addValue("volume_format", disk.getDiskImage().getVolumeFormat()).addValue(<START_MOD>"qcow_compat", disk.getDiskImage().getQcowCompat()).addValue(<END_MOD>"actual_size", disk.getDiskImage().getActualSize()).addValue("size", disk.getDiskImage().getSize()).addValue("storage_domain_id", disk.getDiskImage().getStorageIds().get(0))); for (org.ovirt.engine.core.common.businessentities.VmBase vmBase : disk.getVms()) { getCallsHandler().executeModification("InsertUnregisteredDisksToVms", getCustomMapSqlParameterSource().addValue("disk_id", disk.getDiskImage().getId()).addValue("entity_id", vmBase.getId()).addValue("entity_name", vmBase.getName()).addValue("storage_domain_id", disk.getDiskImage().getStorageIds().get(0))); } }
@javax.ws.rs.Path( (activate|approve|commitnetconfig|deactivate|enrollcertificate|fence|forceselectspm|install|iscsidiscover|iscsilogin|refresh|setupnetworks|unregisteredstoragedomainsdiscover|upgrade<START_MOD>|upgradecheck<END_MOD>)}/{oid} public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
public java.lang.String exportVm(org.ovirt.engine.core.common.businessentities.VM vm, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, org.ovirt.engine.core.compat.Version version) { <START_MOD>org.ovirt.engine.core.utils.ovf.OvfVmWriter vmWriter; if (vm.isHostedEngine()) { vmWriter = new org.ovirt.engine.core.utils.ovf.HostedEngineOvfWriter(vm, images, version, clusterDao.get(vm.getClusterId())); } else { vmWriter =<END_MOD> new org.ovirt.engine.core.utils.ovf.OvfVmWriter(vm, images, version)<START_MOD>; } return vmWriter<END_MOD>.build().getStringRepresentation(); }
<START_MOD>@java.lang.Override protected void writeGeneralData() { super.writeGeneralData(); _writer.writeStartElement(OvfProperties.CLUSTER_EMULATED_MACHINE); _writer.writeRaw(cluster.getEmulatedMachine()); _writer.writeEndElement(); _writer.writeStartElement(OvfProperties.CLUSTER_CPU_NAME); _writer.writeRaw(cluster.getCpuName()); _writer.writeEndElement(); }<END_MOD>
protected static org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, boolean shouldPrepareAndTeardown) { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); <START_MOD>org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; <END_MOD>if (shouldPrepareAndTeardown) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } <START_MOD>try { qemuImageInfo = ((<END_MOD>org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo<START_MOD>) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.debug( to get qemu image info from storage e); } finally { if (shouldPrepareAndTeardown) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } } return<END_MOD> qemuImageInfo<START_MOD>; }<END_MOD>
public static java.util.Map<java.lang.String, java.lang.Object> buildVmNumatuneSetting(org.ovirt.engine.core.common.businessentities.NumaTuneMode numaTuneMode, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes<START_MOD>, java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> vdsNumaNodes<END_MOD>) { java.util.Map<java.lang.String, java.lang.Object> createNumaTune = new java.util.HashMap<>(<START_MOD>); java.util.List<java.util.Map<java.lang.String, java.lang.String>> memNodeList<END_MOD> = new java.util.<START_MOD>ArrayList<END_MOD><>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { if (node.getVdsNumaNodeList().isEmpty()) { <START_MOD>continue; } java.util.Map<java.lang.String, java.lang.String> memNode = new java.util.HashMap<>(); memNode.put(VdsProperties.NUMA_TUNE_VM_NODE_INDEX, java.lang.String.valueOf<END_MOD>(node.<START_MOD>getIndex())); memNode.put(VdsProperties.NUMA_TUNE_NODESET, org.ovirt.engine.core.utils.NumaUtils.buildStringFromListForNuma(node.<END_MOD>getVdsNumaNodeList())<START_MOD>); memNodeList.add(memNode)<END_MOD>; } <START_MOD>if (memNodeList.isEmpty()) { return java.util.Collections.emptyMap(); <END_MOD>} createNumaTune.put(VdsProperties.<START_MOD>NUMA_TUNE_MEMNODES, memNodeList); createNumaTune.put(VdsProperties.NUMA_TUNE_MODE, numaTuneMode.getValue()); createNumaTune.put(VdsProperties.<END_MOD>NUMA_TUNE_NODESET, org.ovirt.engine.core.utils.NumaUtils.buildStringFromListForNuma(<START_MOD>vdsNumaNodes.stream().map(VdsNumaNode::getIndex).collect(java.util.stream.Collectors.toList()))); return<END_MOD> createNumaTune; }
@org.junit.Test public void testBuildVmNumatuneSetting() throws java.lang.Exception { java.util.Map<java.lang.String, java.lang.Object> numaTune = org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactory.buildVmNumatuneSetting(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.numaTuneMode, org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes<START_MOD>, org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vdsNumaNodes<END_MOD>); assertEquals(2, numaTune.size()); assertTrue(numaTune.containsKey(VdsProperties.NUMA_TUNE_MODE)); assertEquals(NumaTuneMode.INTERLEAVE.getValue(), numaTune.get(VdsProperties.NUMA_TUNE_MODE)); assertTrue(numaTune.containsKey(VdsProperties.NUMA_TUNE_NODESET)); assertEquals("0,1", numaTune.get(VdsProperties.NUMA_TUNE_NODESET)); <START_MOD>assertTrue(numaTune.containsKey(VdsProperties.NUMA_TUNE_MEMNODES)); java.util.List<java.util.Map<java.lang.String, java.lang.String>> memNodes = ((java.util.List<java.util.Map<java.lang.String, java.lang.String>>) (numaTune.get(VdsProperties.NUMA_TUNE_MEMNODES))); assertEquals("0", memNodes.get(0).get(VdsProperties.NUMA_TUNE_VM_NODE_INDEX)); assertEquals("0", memNodes.get(0).get(VdsProperties.NUMA_TUNE_NODESET)); assertEquals("1", memNodes.get(1).get(VdsProperties.NUMA_TUNE_VM_NODE_INDEX)); assertEquals("1", memNodes.get(1).get(VdsProperties.NUMA_TUNE_NODESET)); <END_MOD>}
@org.junit.Test public void canSetNumaPinning() { newNumaNodes = java.util.Collections.singletonList(createVmNumaNode(1, vdsNumaNodes)); final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromParams() { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
<START_MOD>protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createVnodeToPnodeParametersMapper(<END_MOD>java.lang.<START_MOD>Integer<END_MOD> <START_MOD>pinnedIndex<END_MOD>, org.ovirt.engine.core.compat.Guid <START_MOD>vNodeId<END_MOD>) { <START_MOD>return getCustomMapSqlParameterSource()<END_MOD>.<START_MOD>addValue("id", <END_MOD>org.ovirt.engine.core.compat.Guid.<START_MOD>newGuid<END_MOD>()).<START_MOD>addValue<END_MOD>(<START_MOD>"vm_numa_node_id"<END_MOD>, <START_MOD>vNodeId).addValue("vds_numa_node_index",<END_MOD> <START_MOD>pinnedIndex<END_MOD>); }
@org.junit.Test public void canSetNumaPinning() { newNumaNodes = java.util.Collections.singletonList(createVmNumaNode(1, vdsNumaNodes)); final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromDb() { final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromDb(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
@java.lang.Override protected void executeCommand() { if (!(oldNumaNodeIds.isEmpty())) { org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVmNumaNodeDao().massRemoveNumaNodeByNumaNodeId(oldNumaNodeIds); } java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getParameters().getVmNumaNodeList(); vmNumaNodes.stream().forEach(( node) -> node.setId(org.ovirt.engine.core.compat.Guid.newGuid())); org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVmNumaNodeDao().massSaveNumaNode(vmNumaNodes, org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVm().getId()); org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getParameters().getVmNumaNodeList(); vmNumaNodes.stream().forEach(( node) -> node.setId(org.ovirt.engine.core.compat.Guid.newGuid())); org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getVmNumaNodeDao().massSaveNumaNode(vmNumaNodes, org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getVm().getId()); setActionReturnValue(vmNumaNodes.get(0).getId()); org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.setSucceeded(true); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromParams() { final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
private void populateVMNUMAInfo(final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode>> numaNodes = getVmNumaNodeDao().<START_MOD>getVmNumaNodeInfoByClusterId<END_MOD>(org.ovirt.engine.core.bll.ClusterOperationCommandBase.getClusterId()); for (final org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (numaNodes.containsKey(vm.getId())) { vm.setvNumaNodeList(numaNodes.get(vm.getId())); } } }
@org.junit.Test public void canSetNumaConfigurationWithVmFromDb() { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromDb(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
protected void updateRngDevice(org.ovirt.engine.core.compat.Guid templateId) { if (!(getModel().getIsRngEnabled().getIsChangable())) { return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetRngDevice, new org.ovirt.engine.core.common.queries.IdQueryParameters(templateId), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { <START_MOD>final org.ovirt.engine.core.compat.Version clusterVersion = getModel().getSelectedCluster().getCompatibilityVersion();<END_MOD> java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> devs = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(devs.isEmpty()))); <START_MOD>final org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = (devs.isEmpty()) ? new org.ovirt.engine.core.common.businessentities.VmRngDevice() : devs.get(0); rngDevice.setSource(VmRngDevice.Source.getValidForVersion(rngDevice.getSource(), clusterVersion)); <END_MOD>getModel().setRngDevice(<START_MOD>rngDevice<END_MOD>); } })); }
@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { <START_MOD>final org.ovirt.engine.core.compat.Version clusterVersion = getModel().getSelectedCluster().getCompatibilityVersion();<END_MOD> java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> devs = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(devs.isEmpty()))); <START_MOD>final org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = (devs.isEmpty()) ? new org.ovirt.engine.core.common.businessentities.VmRngDevice() : devs.get(0); rngDevice.setSource(VmRngDevice.Source.getValidForVersion(rngDevice.getSource(), clusterVersion)); <END_MOD>getModel().setRngDevice(<START_MOD>rngDevice<END_MOD>); }
@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { deactivate(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { <START_MOD>final org.ovirt.engine.core.compat.Version clusterVersion = getModel().getSelectedCluster().getCompatibilityVersion(); <END_MOD>org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); <START_MOD>rngDevice.setSource(VmRngDevice.Source.getValidForVersion(rngDevice.getSource(), clusterVersion)); <END_MOD>getModel().setRngDevice(rngDevice); } activate(); updateVirtioScsi(vmBase); }
<START_MOD>private boolean isPassDiscardSupported() { return validate(getDiskValidator(disk).isPassDiscardSupported(getDiskVmElement(), HotPlugDiskToVmCommand.getStorageDomain())); }<END_MOD>
<START_MOD>@org.junit.Test public void testPassDirectLunSupport() { testPassDiscardSupport(new org.ovirt.engine.core.common.businessentities.storage.LunDisk(), null); }<END_MOD>
private void applyUserChanges(org.ovirt.engine.core.common.businessentities.storage.Disk diskToUpdate, org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dveToUpdate) { updateSnapshotIdOnShareableChange(diskToUpdate, getNewDisk()); diskToUpdate.setPropagateErrors(getNewDisk().getPropagateErrors()); diskToUpdate.setWipeAfterDelete(getNewDisk().isWipeAfterDelete()); diskToUpdate.setDiskAlias(getNewDisk().getDiskAlias()); diskToUpdate.setDiskDescription(getNewDisk().getDiskDescription()); diskToUpdate.setShareable(getNewDisk().isShareable()); diskToUpdate.setReadOnly(getNewDisk().getReadOnly()); diskToUpdate.setSgio(getNewDisk().getSgio()); dveToUpdate.setBoot(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isBoot()); dveToUpdate.setDiskInterface(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().getDiskInterface()); <START_MOD>dveToUpdate.setPassDiscard(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isPassDiscard()); <END_MOD>}
<START_MOD>@org.junit.Test public void testValidateFailsForPassDiscard() { initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid()); mockVm(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)).when(diskValidator).isPassDiscardSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); doReturn(diskValidator).when(command).getDiskValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }<END_MOD>
<START_MOD>java.lang.String ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED();<END_MOD>
<START_MOD>@org.junit.Test public void validateDiscardSucceeded() { org.ovirt.engine.core.common.action.VmDiskOperationParameterBase parameters = createParameters(); initializeCommand(parameters); when(diskDao.get(diskImageGuid)).thenReturn(parameters.getDiskInfo()); when(diskValidator.isPassDiscardSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(ValidationResult.VALID); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(command); }<END_MOD>
<START_MOD>@org.junit.Test public void validateFailedDiscardNotSupported() { mockVmStatusUp(); mockInterfaceList(); createVirtIODisk(); initStorageDomain(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)).when(diskValidator).isPassDiscardSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }<END_MOD>
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass()) != (o.getClass()))) { return false; } org.ovirt.engine.core.common.businessentities.storage.DiskVmElement that = ((org.ovirt.engine.core.common.businessentities.storage.DiskVmElement) (o)); return (((<START_MOD>(<END_MOD>boot) == (that.boot)) && ((<START_MOD>passDiscard) == (that.passDiscard))) && ((<END_MOD>diskInterface) == (that.diskInterface))) && ((id) != null) ? id.equals(that.id) : (that.id) == null; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, boot, <START_MOD>passDiscard, <END_MOD>diskInterface); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement entity) { return createIdParameterMapper(entity.getId()).addValue("is_boot", entity.isBoot()).addValue(<START_MOD>"pass_discard", entity.isPassDiscard()).addValue(<END_MOD>"disk_interface", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getDiskInterface())); }
<START_MOD>@org.junit.Test public void validateDiscardFailed() { org.ovirt.engine.core.common.action.VmDiskOperationParameterBase parameters = createParameters(); initializeCommand(parameters); when(diskDao.get(diskImageGuid)).thenReturn(parameters.getDiskInfo()); when(diskValidator.isPassDiscardSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }<END_MOD>
<START_MOD>@org.junit.Test public void testPassDiscardDiskImageSupport() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain(); storageDomain.setStorageType(StorageType.NFS); testPassDiscardSupport(diskImage, storageDomain); storageDomain.setStorageType(StorageType.ISCSI); testPassDiscardSupport(diskImage, storageDomain); }<END_MOD>
<START_MOD>@org.junit.Test public void testValidateFailsWhenDiscardIsNotSupported() { when(diskValidator.isPassDiscardSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }<END_MOD>
private void mockDiskValidator() { doReturn(diskValidator).when(command).getDiskValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class)); when(diskValidator.isReadOnlyPropertyCompatibleWithInterface(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class))).thenReturn(ValidationResult.VALID); when(diskValidator.isVirtIoScsiValid(any(org.ovirt.engine.core.common.businessentities.VM.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class))).thenReturn(ValidationResult.VALID); when(diskValidator.isDiskInterfaceSupported(any(org.ovirt.engine.core.common.businessentities.VM.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class))).thenReturn(ValidationResult.VALID); <START_MOD>when(diskValidator.isPassDiscardSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(ValidationResult.VALID); <END_MOD>}
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Disk disk) { org.ovirt.engine.api.model.DiskAttachment diskAttachment = new org.ovirt.engine.api.model.DiskAttachment(); if (disk.isSetBootable()) { diskAttachment.setBootable(disk.isBootable()); } else { diskAttachment.setBootable(false); } <START_MOD>diskAttachment.setPassDiscard(false); <END_MOD>if (disk.isSetInterface()) { diskAttachment.setInterface(disk.getInterface()); } else { diskAttachment.setInterface(DiskInterface.VIRTIO); } diskAttachment.setDisk(disk); if (disk.isSetId()) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(disk.getId()); return getAttachmentsResource().attachDiskToVm(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAttachDiskResolver(diskId)); } else { return getAttachmentsResource().createDisk(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAddDiskResolver()); } }
<START_MOD>java.lang.String passDiscardNotSupportedForStorageType();<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object virtioScsiEnabledReturnValue) { if (java.lang.Boolean.FALSE.equals(virtioScsiEnabledReturnValue)) { diskInterfaces.remove(DiskInterface.VirtIO_SCSI); } for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : diskModels) { diskModel.getDiskInterface().setItems(diskInterfaces); diskModel.getDiskInterface().setSelectedItem(DiskInterface.VirtIO<START_MOD>); updatePassDiscardChangeability(diskModel<END_MOD>); if (getIsBootable().getIsChangable()) { diskModel.getIsBootable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean isBootableMarked = ((java.lang.Boolean) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity())); parentModel.getIsBootable().setIsChangeable((!isBootableMarked)); } }); } else { diskModel.getIsBootable().setChangeProhibitionReason(org.ovirt.engine.ui.uicommonweb.models.vms.AttachDiskModel.constants.onlyOneBootableDisk()); diskModel.getIsBootable().setIsChangeable(false); } } java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel>> entities = org.ovirt.engine.ui.uicommonweb.Linq.toEntityModelList(org.ovirt.engine.ui.uicommonweb.Linq.filterDisksByType(diskModels, diskStorageType)); initAttachableDisks(entities); }
<START_MOD>private void updatePassDiscardAvailability() { if (getIsFloating()) { getPassDiscard().setIsAvailable(false); } else { org.ovirt.engine.core.common.businessentities.storage.DiskInterface selectedInterface = getDiskInterface().getSelectedItem(); org.ovirt.engine.core.common.businessentities.storage.DiskStorageType selectedDiskStorageType = getDiskStorageType().getEntity(); boolean isApplicableInterface = (selectedInterface == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI)) || (selectedInterface == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.IDE)); boolean isApplicableDiskStorageType = (selectedDiskStorageType == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN)) || (selectedDiskStorageType == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)); boolean isApplicalbeStorageType = (selectedDiskStorageType != (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) || (((getStorageDomain().getSelectedItem()) != null) && (getStorageDomain().getSelectedItem().getStorageType().isBlockDomain())); if ((isApplicableInterface && isApplicableDiskStorageType) && isApplicalbeStorageType) { getPassDiscard().setIsAvailable(true); if (!(getIsNew())) { getPassDiscard().setEntity(getDiskVmElement().isPassDiscard()); } } else { getPassDiscard().setIsAvailable(false); getPassDiscard().setEntity(false); } } }<END_MOD>
<START_MOD>private void listenToPassDiscardItemChangedEvent(final org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel>> disks, final org.ovirt.engine.ui.uicommonweb.models.vms.AttachDiskModel diskModel) { disks.getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((disks.getItems()) == null) { return; } for (org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> entityModel : disks.getItems()) { entityModel.getEntity().getPassDiscard().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (args.propertyName.equals("IsChangable")) { revealDiskPanel(diskModel); } } }); } } }); }<END_MOD>
@java.lang.Override public int setTabIndexes(int nextTabIndex) { sizeEditor.setTabIndex((nextTabIndex++)); sizeExtendEditor.setTabIndex((nextTabIndex++)); aliasEditor.setTabIndex((nextTabIndex++)); descriptionEditor.setTabIndex((nextTabIndex++)); interfaceEditor.setTabIndex((nextTabIndex++)); datacenterEditor.setTabIndex((nextTabIndex++)); storageDomainEditor.setTabIndex((nextTabIndex++)); volumeTypeEditor.setTabIndex((nextTabIndex++)); cinderVolumeTypeEditor.setTabIndex((nextTabIndex++)); diskProfileEditor.setTabIndex((nextTabIndex++)); quotaEditor.setTabIndex((nextTabIndex++)); hostListEditor.setTabIndex((nextTabIndex++)); storageTypeEditor.setTabIndex((nextTabIndex++)); plugDiskToVmEditor.setTabIndex((nextTabIndex++)); wipeAfterDeleteEditor.setTabIndex((nextTabIndex++)); <START_MOD>passDiscardEditor.setTabIndex((nextTabIndex++)); <END_MOD>isBootableEditor.setTabIndex((nextTabIndex++)); isShareableEditor.setTabIndex((nextTabIndex++)); isReadOnlyEditor.setTabIndex((nextTabIndex++)); isScsiPassthroughEditor.setTabIndexes((nextTabIndex++)); isSgIoUnfilteredEditor.setTabIndex((nextTabIndex++)); isUsingScsiReservationEditor.setTabIndex((nextTabIndex++)); return nextTabIndex; }
<START_MOD>java.lang.String passDiscardNotSupportedForInterface();<END_MOD>
public void updateOperationProgress(final org.ovirt.engine.core.common.businessentities.VM vm) { vm.setBackgroundOperationDescription(<START_MOD>resourceManager<END_MOD>.getVmManager(vm.getId()).getConvertOperationDescription()); vm.setBackgroundOperationProgress(<START_MOD>resourceManager<END_MOD>.getVmManager(vm.getId()).getConvertOperationProgress()); }
@java.lang.Override protected void executeCommand() { try { addVmToDb(); processImages(); <START_MOD>vmHandler<END_MOD>.addVmInitToDB(getVm().getStaticData()); } catch (java.lang.RuntimeException e) { macPool.freeMacs(macsAdded); throw e; } org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.setSucceeded(true); org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getReturnValue().setActionReturnValue(getVm()); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSnapshotDao().get(org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getParameters().getId(), Snapshot.SnapshotType.NEXT_RUN, org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getUserID(), org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getParameters().isFiltered()); if (snapshot != null) { org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); <START_MOD>vmHandler<END_MOD>.updateDisksFromDb(vm); <START_MOD>vmHandler<END_MOD>.updateVmGuestAgentVersion(vm); <START_MOD>vmHandler<END_MOD>.updateNetworkInterfacesFromDb(vm); org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getQueryReturnValue().setReturnValue(vm); } else { super.executeQueryCommand(); } }
public void updateVmStatistics(final org.ovirt.engine.core.common.businessentities.VM vm) { vm.setStatisticsData(<START_MOD>resourceManager<END_MOD>.getVmManager(vm.getId()).getStatistics()); }
public boolean isUsbPolicyLegal(org.ovirt.engine.core.common.businessentities.UsbPolicy usbPolicy, int osId, java.util.List<java.lang.String> messages) { boolean retVal = true; if (UsbPolicy.ENABLED_LEGACY.equals(usbPolicy)) { if (osRepository.isLinux(osId)) { messages.add(EngineMessage.USB_LEGACY_NOT_SUPPORTED_ON_LINUX_VMS.toString()); retVal = false; } } return retVal; }
private java.util.List<org.ovirt.engine.core.common.businessentities.VM> searchVmsFromDb() { org.ovirt.engine.core.aaa.QueryData data = initQueryData(true); if (data == null) { return java.util.Collections.emptyList(); } java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getVmDao().getAllUsingQuery(data.getQuery()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { <START_MOD>vmHandler<END_MOD>.updateVmGuestAgentVersion(vm); <START_MOD>vmHandler<END_MOD>.updateVmLock(vm); <START_MOD>vmHandler<END_MOD>.updateOperationProgress(vm); <START_MOD>vmHandler<END_MOD>.updateVmStatistics(vm); } return vms; }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getDbFacade().getVmDao().getAllVmsRelatedToQuotaId(org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getParameters().getId()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { <START_MOD>vmHandler<END_MOD>.updateDisksFromDb(vm); <START_MOD>vmHandler<END_MOD>.updateVmInitFromDB(vm.getStaticData(), true); java.util.Collections.sort(vm.getDiskList(), new org.ovirt.engine.core.common.businessentities.comparators.DiskByDiskAliasComparator()); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.fillImagesBySnapshots(vm); } org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getQueryReturnValue().setReturnValue(vms); }
protected void addVmTemplateToDb() { getVmTemplate().setClusterId(getParameters().getClusterId()); if (!(<START_MOD>vmHandler<END_MOD>.validateDedicatedVdsExistOnSameCluster(getVmTemplate(), null))) { getVmTemplate().setDedicatedVmForVdsList(java.util.Collections.emptyList()); } getVmTemplate().setStatus(VmTemplateStatus.Locked); getVmTemplate().setQuotaId(getParameters().getQuotaId()); <START_MOD>vmHandler<END_MOD>.updateImportedVmUsbPolicy(getVmTemplate()); vmTemplateDao.save(getVmTemplate()); getCompensationContext().snapshotNewEntity(getVmTemplate()); int count = 1; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : getImages()) { image.setActive(true); org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap map = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.saveImage(image); getCompensationContext().snapshotNewEntity(image.getImage()); getCompensationContext().snapshotNewEntity(map); if (!(baseDiskDao.exists(image.getId()))) { image.setDiskAlias(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getSuggestedDiskAlias(image, getVmTemplateName(), count)); count++; baseDiskDao.save(image); getCompensationContext().snapshotNewEntity(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic(); diskDynamic.setId(image.getImageId()); diskDynamic.setActualSize(image.getActualSizeInBytes()); diskImageDynamicDao.save(diskDynamic); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.copyOf(image.getDiskVmElementForVm(sourceTemplateId), image.getId(), getVmTemplateId()); diskVmElementDao.save(dve); getCompensationContext().snapshotNewEntity(diskDynamic); } }
@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.canRunActionOnNonManagedVm())) { return false; } if ((!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.isInternalExecution())) && (!(org.ovirt.engine.core.utils.ObjectIdentityChecker.canUpdateField(org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm(), "clusterId", org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm().getStatus())))) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } org.ovirt.engine.core.bll.ChangeVmClusterValidator validator = <START_MOD>org.ovirt.engine.core.di.Injector.injectMembers(<END_MOD>new org.ovirt.engine.core.bll.ChangeVmClusterValidator(this, org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getClusterId(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getVmCustomCompatibilityVersion(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVmDeviceUtils())<START_MOD>)<END_MOD>; return validator.validate(); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsList = getVMs(); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsList) { <START_MOD>vmHandler<END_MOD>.updateVmGuestAgentVersion(vm); } org.ovirt.engine.core.bll.GetAllVmsQueryBase.getQueryReturnValue().setReturnValue(vmsList); }
protected void updateVMDetails(org.ovirt.engine.core.common.businessentities.VM vm) { <START_MOD>vmHandler<END_MOD>.updateDisksFromDb(vm); <START_MOD>vmHandler<END_MOD>.updateVmGuestAgentVersion(vm); <START_MOD>vmHandler<END_MOD>.updateNetworkInterfacesFromDb(vm); <START_MOD>vmHandler<END_MOD>.updateVmInitFromDB(vm.getStaticData(), true); <START_MOD>vmHandler<END_MOD>.updateNumaNodesFromDb(vm); }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name", "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), getClusterId(action)); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); <START_MOD>if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } <END_MOD>boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(VdcActionType.ImportVm, params, action); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(name, clusterId, volumeType, status, replicaCount, stripeCount, disperseCount, redundancyCount, <START_MOD>arbiterCount, <END_MOD>options, accessProtocols, transportTypes, bricks, asyncTask, advancedDetails, snapshotsCount, snapMaxLimit, snapshotScheduled); }
<START_MOD>public void setArbiterCount(java.lang.Integer arbiterCount) { this.arbiterCount = arbiterCount; }<END_MOD>
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity) (obj)); return ((((((((((((((((<START_MOD>(<END_MOD>java.util.Objects.equals(name, other.getName())) && (java.util.Objects.equals(clusterId, other.clusterId))) && ((volumeType) == (other.volumeType))) && ((status) == (other.status))) && (java.util.Objects.equals(replicaCount, other.replicaCount))) && (java.util.Objects.equals(stripeCount, other.stripeCount))) && (java.util.Objects.equals(disperseCount, other.disperseCount))) && (java.util.Objects.equals(redundancyCount, other.redundancyCount))) && (<START_MOD>java.util.Objects.equals(arbiterCount, other.arbiterCount))) && (<END_MOD>org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(getOptions(), other.getOptions()))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(accessProtocols, other.accessProtocols))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(transportTypes, other.transportTypes))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(bricks, other.bricks))) && (java.util.Objects.equals(asyncTask, other.asyncTask))) && (java.util.Objects.equals(advancedDetails, other.advancedDetails))) && (java.util.Objects.equals(snapshotsCount, other.snapshotsCount))) && (java.util.Objects.equals(snapMaxLimit, other.snapMaxLimit))) && (java.util.Objects.equals(snapshotScheduled, other.snapshotScheduled)); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity) (obj)); return ((((((<START_MOD>(<END_MOD>java.util.Objects.equals(id, other.id)) && (java.util.Objects.equals(volumeId, other.volumeId))) && (java.util.Objects.equals(serverId, other.serverId))) && (java.util.Objects.equals(brickDirectory, other.brickDirectory))) && (java.util.Objects.equals(brickOrder, other.brickOrder))) && (java.util.Objects.equals(asyncTask, other.asyncTask))) && ((status) == (other.status))<START_MOD>) && (java.util.Objects.equals(isArbiter, other.isArbiter))<END_MOD>; }
public void copyFrom(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { setId(brick.getId()); setVolumeId(brick.getVolumeId()); setServerId(brick.getServerId()); setServerName(brick.getServerName()); setBrickDirectory(brick.getBrickDirectory()); setBrickOrder(brick.getBrickOrder()); setStatus(brick.getStatus()); <START_MOD>setIsArbiter(brick.getIsArbiter()); <END_MOD>}
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, volumeId, serverId, brickDirectory, brickOrder, status, asyncTask<START_MOD>, isArbiter<END_MOD>); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { return getCustomMapSqlParameterSource().addValue("id", volume.getId()).addValue("cluster_id", volume.getClusterId()).addValue("vol_name", volume.getName()).addValue("vol_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getVolumeType())).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getStatus())).addValue("replica_count", volume.getReplicaCount()).addValue("stripe_count", volume.getStripeCount()).addValue("disperse_count", volume.getDisperseCount()).addValue("redundancy_count", volume.getRedundancyCount())<START_MOD>.addValue("arbiter_count", volume.getArbiterCount())<END_MOD>; }
@java.lang.Override public void updateGlusterVolume(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { getCallsHandler().executeModification("UpdateGlusterVolume", getCustomMapSqlParameterSource().addValue("id", volume.getId()).addValue("cluster_id", volume.getClusterId()).addValue("vol_name", volume.getName()).addValue("vol_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getVolumeType())).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getStatus())).addValue("replica_count", volume.getReplicaCount()).addValue("stripe_count", volume.getStripeCount()).addValue("disperse_count", volume.getDisperseCount()).addValue("redundancy_count", volume.getRedundancyCount())<START_MOD>.addValue("arbiter_count", volume.getArbiterCount())<END_MOD>); }
<START_MOD>public java.lang.Integer getArbiterCount() { return arbiterCount; }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBatchMapper() { return new org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>() { @java.lang.Override public org.springframework.jdbc.core.namedparam.MapSqlParameterSource map(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource paramValue = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource().addValue("volume_id", entity.getVolumeId()).addValue("server_id", entity.getServerId()).addValue("brick_dir", entity.getBrickDirectory()).addValue("status", entity.getStatus().name()).addValue("id", entity.getId().toString()).addValue("brick_order", entity.getBrickOrder()).addValue("network_id", entity.getNetworkId()).addValue(<START_MOD>"is_arbiter", entity.getIsArbiter()).addValue(<END_MOD>"task_id", ((entity.getAsyncTask().getTaskId()) != null ? entity.getAsyncTask().getTaskId().toString() : "")); return paramValue; } }; }
@java.lang.Override protected void executeCommand() { log.info( ImageTransfer entity for command '{}' org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); if (<START_MOD>isImageSupplied()) { handleImageIsReadyForTransfer<END_MOD>(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())<START_MOD>; } else<END_MOD> { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(false); return; } log.info( {} image getImageType()); createImage(); } <START_MOD>setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true<END_MOD>); }
<START_MOD>protected boolean isImageSupplied() { return !(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())); }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> listPermissionSubjects = new java.util.ArrayList<>(); <START_MOD>if (!(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.isImageSupplied())) { <END_MOD>listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); <START_MOD>} else { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } <END_MOD>return listPermissionSubjects; }
@java.lang.Override protected boolean validate() { <START_MOD>if<END_MOD> <START_MOD>(isImageSupplied())<END_MOD> <START_MOD>{<END_MOD> <START_MOD>return validateImageTransfer(<END_MOD>org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } else { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) != (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { return validateCreateImage(); } else { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); } } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if (cluster == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID); return false; } if (!(cluster.supportsGlusterService())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_DOES_NOT_SUPPORT_GLUSTER); return false; } if (volume.getVolumeType().isDispersedType()) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CREATION_OF_DISPERSE_VOLUME_NOT_SUPPORTED); return false; } if (volumeNameExists(volume.getName())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NAME_ALREADY_EXISTS); addValidationMessageVariable("volumeName", volume.getName()); return false; } if (!(validate(createVolumeValidator().isForceCreateVolumeAllowed(getCluster().getCompatibilityVersion(), getParameters().isForce())))) { return false; } <START_MOD>if (((volume.getArbiterCount()) != 0) && (!(validate(createVolumeValidator().isArbiterVolumeSupported(getCluster().getCompatibilityVersion()))))) { return false; } if ((((volume.getArbiterCount()) != 0) && (!(volume.getVolumeType().isReplicatedType()))) || ((volume.getReplicaCount()) != 3)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_ARBITER_VOLUME_SHOULD_BE_REPLICA_3_VOLUME); return false; } <END_MOD>return validateBricks(volume); }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = CreateGlusterVolumeVDSCommand.getParameters().getVolume(); boolean isForce = CreateGlusterVolumeVDSCommand.getParameters().isForce(); boolean supportForceCreateVolume = org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterForceCreateVolumeSupported(CreateGlusterVolumeVDSCommand.getParameters().getClusterVersion()); uuidReturn = (supportForceCreateVolume) ? CreateGlusterVolumeVDSCommand.getBroker().glusterVolumeCreate(volume.getName(), volume.getBrickDirectories().toArray(new java.lang.String[0]), volume.getReplicaCount(), volume.getStripeCount(), getTransportTypeArr(volume), isForce<START_MOD>, volume.getArbiterCount()<END_MOD>) : CreateGlusterVolumeVDSCommand.getBroker().glusterVolumeCreate(volume.getName(), volume.getBrickDirectories().toArray(new java.lang.String[0]), volume.getReplicaCount(), volume.getStripeCount(), getTransportTypeArr(volume)); CreateGlusterVolumeVDSCommand.proceedProxyReturnValue(); if (CreateGlusterVolumeVDSCommand.getVDSReturnValue().getSucceeded()) { volume.setId(org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(uuidReturn.uuid)); setReturnValue(volume); } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList, boolean force<START_MOD>, int arbiterCount<END_MOD>) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.create").withParameter("volumeName", volumeName).withParameter("bricklist", new java.util.ArrayList(java.util.Arrays.asList(brickList))).withParameter("replicaCount", replicaCount).withParameter("stripeCount", stripeCount).withParameter("transportList", new java.util.ArrayList(java.util.Arrays.asList(transportList))).withParameter("force", force<START_MOD>).withOptionalParameter("arbiterCount", arbiterCount<END_MOD>).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(response); }
<START_MOD>public java.util.Map<java.lang.String, java.lang.Object> glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList, boolean force, int arbiterCount);<END_MOD>
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList, boolean force<START_MOD>, int arbiterCount<END_MOD>);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList, boolean force<START_MOD>, int arbiterCount<END_MOD>) { try { <START_MOD>if (arbiterCount == 0) { <END_MOD>return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(vdsServer.glusterVolumeCreate(volumeName, brickList, replicaCount, stripeCount, transportList, force)); } <START_MOD>else { return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(vdsServer.glusterVolumeCreate(volumeName, brickList, replicaCount, stripeCount, transportList, force, arbiterCount)); } } <END_MOD>catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
@java.lang.Override public void buildVmVirtioScsi() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.VIRTIOSCSI.getName()); java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskInterface, java.lang.Integer> controllerIndexMap = org.ovirt.engine.core.utils.archstrategy.ArchStrategyFactory.getStrategy(vm.getClusterArch()).run(new org.ovirt.engine.core.vdsbroker.architecture.GetControllerIndices()).returnValue(); int virtioScsiIndex = controllerIndexMap.get(DiskInterface.VirtIO_SCSI); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceGeneralType.CONTROLLER.getValue()); struct.put(VdsProperties.Device, VdsProperties.Scsi); struct.put(VdsProperties.Model, VdsProperties.VirtioScsi); struct.put(VdsProperties.Index, java.lang.Integer.toString(virtioScsiIndex)); <START_MOD>if ((vm.getNumOfIoThreads()) > 0) { struct.put(VdsProperties.ioTrheadId, java.lang.Integer.toString(virtioScsiIndex)); virtioScsiIndex++; } <END_MOD>vmInfoBuildUtils.addAddress(vmDevice, struct); virtioScsiIndex++; addDevice(struct, vmDevice, null); } }
public void updateVmDevices(org.ovirt.engine.core.common.action.VmManagementParametersBase params, org.ovirt.engine.core.common.businessentities.VM oldVm) { org.ovirt.engine.core.common.businessentities.VmBase oldVmBase = oldVm.getStaticData(); org.ovirt.engine.core.common.businessentities.VmBase newVmBase = params.getVmStaticData(); if (newVmBase == null) { return; } updateCdPath(oldVmBase, newVmBase); updateBootOrder(oldVmBase, newVmBase); updateVideoDevices(oldVmBase, newVmBase); updateUsbSlots(oldVmBase, newVmBase); updateMemoryBalloon(newVmBase.getId(), params.isBalloonEnabled()); updateSoundDevice(oldVmBase, newVmBase, oldVm.getCompatibilityVersion(), params.isSoundDeviceEnabled()); updateSmartcardDevice(oldVm, newVmBase); updateConsoleDevice(newVmBase.getId(), params.isConsoleEnabled()); <START_MOD>int scsiControllers = (((newVmBase.getNumOfIoThreads()) > 1) && (params.isVirtioScsiEnabled())) ? newVmBase.getNumOfIoThreads() : 1; for (int i = 1; i <= scsiControllers; i++) { <END_MOD>updateVirtioScsiController(newVmBase.getId(), params.isVirtioScsiEnabled()); }<START_MOD> }<END_MOD>
public boolean validate() { getReplicaCount().setIsValid(true); getStripeCount().setIsValid(true); if (getReplicaCount().getIsAvailable()) { org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation replicaCountValidation = new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(); replicaCountValidation.setMinimum(2); replicaCountValidation.setMaximum(16); getReplicaCount().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), replicaCountValidation }); } if (getStripeCount().getIsAvailable()) { org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation stripeCountValidation = new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(); stripeCountValidation.setMinimum(4); stripeCountValidation.setMaximum(16); getReplicaCount().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), stripeCountValidation }); } return (<START_MOD>(<END_MOD>getReplicaCount().getIsValid()) && (getStripeCount().getIsValid())<START_MOD>) && (getArbiterVolume().getIsValid()); }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultStringValue("Arbiter Volume should be a REPLICATE volume with replica count 3") java.lang.String arbiterVolumeShouldBeReplica3();<END_MOD>
<START_MOD>public static boolean glusterArbiterVolumeSupported(org.ovirt.engine.core.compat.Version version) { return (Version.v4_0.compareTo(version)) <= 0; }<END_MOD>
private void onAddBricksInternal() { org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel volumeBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel) (getWindow())); cancelConfirmation(); if (!(volumeBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType selectedVolumeType = getTypeList().getSelectedItem(); if (selectedVolumeType.isReplicatedType()) { getReplicaCount().setEntity(volumeBrickModel.getReplicaCount().getEntity()); } if (selectedVolumeType.isStripedType()) { getStripeCount().setEntity(volumeBrickModel.getStripeCount().getEntity()); } java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>> brickList = new java.util.ArrayList<>(); brickList.addAll(volumeBrickModel.getBricks().getItems()); volumeBrickModel.getBricks().setItems(null); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>> brickListModel = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); brickListModel.setItems(brickList); brickListModel.setSelectedItems(brickList); setBricks(brickListModel); setForceAddBricks(volumeBrickModel.getForce().getEntity()); <START_MOD>getArbiterVolume().setEntity(volumeBrickModel.getArbiterVolume().getEntity()); <END_MOD>setWindow(null); }
<START_MOD>private void updateArbiterAvailability() { getArbiterVolume().setIsAvailable(((getTypeList().getSelectedItem().isReplicatedType()) && (org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterFeaturesUtil.glusterArbiterVolumeSupported(getCluster().getSelectedItem().getCompatibilityVersion())))); }<END_MOD>
protected void addStyles() { volumeTypeEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); replicaCountEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); stripeCountEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); <START_MOD>arbiterVolumeEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); <END_MOD>forceEditor.addContentWidgetContainerStyleName(style.forceEditorWidget()); }
private void clusterSelectedItemChanged() { setBricks(new org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>>()); if ((getCluster().getSelectedItem()) != null) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster().getSelectedItem(); <START_MOD>updateArbiterAvailability(); <END_MOD>org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isAnyHostUpInCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { if (!(getCluster().getSelectedItem().getId().equals(cluster.getId()))) { return; } if (((java.lang.Boolean) (returnValue))) { getAddBricksCommand().setIsExecutionAllowed(true); setMessage(null); } else { getAddBricksCommand().setIsExecutionAllowed(false); setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().volumeEmptyClusterValidationMsg()); } } }), cluster.getName()); } else { getAddBricksCommand().setIsExecutionAllowed(false); setMessage(null); } }
<START_MOD>public boolean check(final org.ovirt.engine.core.common.businessentities.VDS host) { final int checks = (org.ovirt.engine.core.bll.host.HostConnectivityChecker.VDSM_RESPONSIVENESS_PERIOD_IN_SECONDS) / (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SetupNetworksPollingTimeout)); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller poller = new org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller(); for (int i = 0; i < checks; i++) { if (poller.poll(host.getId())) { org.ovirt.engine.core.bll.host.HostConnectivityChecker.log.info("Engine managed to communicate with VDSM agent on host '{}' ('{}')", host.getName(), host.getId()); return true; } } return false; }<END_MOD>
public void setDefaultInterface() { org.ovirt.engine.core.compat.Guid vmId = getVmId(); if ((org.ovirt.engine.core.compat.Guid.isNullOrEmpty(vmId)) || ((getDisk()) == null)) { getDiskInterface().setSelectedItem(DiskInterface.<START_MOD>VirtIO_SCSI<END_MOD>); } else { getDiskInterface().setSelectedItem(getDisk().getDiskVmElementForVm(vmId).getDiskInterface()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(source, windowPopup<START_MOD>.get(propName)<END_MOD>, false, propName); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(source, confirmWindowPopup, true, propName); } }
protected <T extends org.ovirt.engine.ui.uicommonweb.models.Model> void revealAndAssignPopup(T model, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<T, ?> popup, boolean isConfirm<START_MOD>, java.lang.String windowPropertyName<END_MOD>) { revealPopup(model, popup); if (isConfirm) { confirmWindowPopup = popup; } else { windowPopup<START_MOD>.put(windowPropertyName,<END_MOD> popup<START_MOD>)<END_MOD>; } }
@java.lang.SuppressWarnings("unchecked") void handleWindowModelChange(M sourceModel, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?> currentPopup, boolean isConfirmation, java.lang.String propertyName) { org.ovirt.engine.ui.uicommonweb.models.Model windowModel = (isConfirmation) ? popupResolver.getConfirmWindowModel(sourceModel, propertyName) : popupResolver.getWindowModel(sourceModel, propertyName); if ((windowModel != null) && (currentPopup == null)) { org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?> newPopup = null; org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand = sourceModel.getLastExecutedCommand(); if (windowModel instanceof org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) { newPopup = popupResolver.getConfirmModelPopup(sourceModel, lastExecutedCommand); if ((newPopup == null) && ((defaultConfirmPopupProvider) != null)) { newPopup = defaultConfirmPopupProvider.get(); } } else { newPopup = popupResolver.getModelPopup(sourceModel, lastExecutedCommand, windowModel); } if (newPopup != null) { revealAndAssignPopup(windowModel, ((org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<org.ovirt.engine.ui.uicommonweb.models.Model, ?>) (newPopup)), isConfirmation<START_MOD>, propertyName<END_MOD>); } else { if (isConfirmation) { popupResolver.clearConfirmWindowModel(sourceModel, propertyName); } else { popupResolver.clearWindowModel(sourceModel, propertyName); } } } else if ((windowModel == null) && (currentPopup != null)) { hideAndClearPopup(currentPopup, isConfirmation<START_MOD>, propertyName); } }<END_MOD>
protected void hideAndClearPopup(org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?> popup, boolean isConfirm<START_MOD>, java.lang.String windowPropertyName<END_MOD>) { popup.hideAndUnbind(); if (isConfirm) { confirmWindowPopup = null; } else { windowPopup<START_MOD>.put(windowPropertyName,<END_MOD> null<START_MOD>)<END_MOD>; } }
void hideAndClearAllPopups() { if ((confirmWindowPopup) != null) { hideAndClearPopup(confirmWindowPopup, true<START_MOD>, null<END_MOD>); } <START_MOD>for (java.util.Map.Entry<java.lang.String, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?>> popupPair : windowPopup.entrySet()) { <END_MOD>if ((<START_MOD>popupPair.getValue()<END_MOD>) != null) { hideAndClearPopup(<START_MOD>popupPair.getValue()<END_MOD>, false<START_MOD>, popupPair.getKey()<END_MOD>); } }<START_MOD> }<END_MOD>
public void addDialogModelListener(final M source) { hideAndClearAllPopups(); source.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(source, windowPopup<START_MOD>.get(propName)<END_MOD>, false, propName); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(source, confirmWindowPopup, true, propName); } } }); }
@org.junit.Test public void testEmptySignKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.<START_MOD>utils<END_MOD>.<START_MOD>StringHelper<END_MOD>.string2Map(org.ovirt.engine.core.<START_MOD>utils<END_MOD>.<START_MOD>StringHelperTest<END_MOD>.EMPTY_SIGN_KEY_VAL); assertEquals(1, map.size()); }
@org.junit.Test public void testOneKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.<START_MOD>utils<END_MOD>.<START_MOD>StringHelper<END_MOD>.string2Map(org.ovirt.engine.core.<START_MOD>utils<END_MOD>.<START_MOD>StringHelperTest<END_MOD>.ONE_KEY_VAL); assertEquals(1, map.size()); }
private java.util.Map<java.lang.String, java.lang.String> getAddressMapForScsiDisk(java.lang.String address, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, int controllerIndex, boolean reserveFirstAddress) { java.util.Map<java.lang.String, java.lang.String> addressMap; int availableUnit = vmInfoBuildUtils.getAvailableUnitForScsiDisk(vmDeviceUnitMap, reserveFirstAddress); if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { addressMap = org.ovirt.engine.core.<START_MOD>utils.StringHelper<END_MOD>.string2Map(address); int unit = java.lang.Integer.parseInt(addressMap.get(VdsProperties.Unit)); if (vmDeviceUnitMap.containsValue(unit)) { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } } else { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } updateVmDeviceAddress(addressMap.toString(), vmDevice); return addressMap; }
void addAddress(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.String, java.lang.Object> struct) { java.util.Map<java.lang.String, java.lang.String> addressMap = org.ovirt.engine.core.<START_MOD>utils<END_MOD>.<START_MOD>StringHelper<END_MOD>.string2Map(vmDevice.getAddress()); if (!(addressMap.isEmpty())) { struct.put(VdsProperties.Address, addressMap); } }
public static org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer createVdsServer(java.lang.String hostname, int port, int clientTimeOut, int connectionTimeOut, int clientRetries, int heartbeat) { org.<START_MOD>apache.commons.httpclient.HttpClient client<END_MOD> = <START_MOD>org.ovirt.engine.core.vdsbroker.HttpUtils.getConnection(clientTimeOut, connectionTimeOut, clientRetries, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsMaxConnectionsPerHost), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.MaxTotalConnections))<END_MOD>; <START_MOD>java.lang.String eventQueue<END_MOD> = org.ovirt.engine.core.<START_MOD>common.config.Config.getValue(ConfigValues.EventQueueName); return new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer(org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.createStompClient<END_MOD>(hostname, port, <START_MOD>connectionTimeOut, <END_MOD>clientTimeOut, clientRetries, <START_MOD>heartbeat<END_MOD>, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EncryptHostCommunication)<START_MOD>, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsmSSLProtocol), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EventProcessingPoolSize), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsRequestQueueName), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsResponseQueueName), eventQueue), client<END_MOD>); }
@org.junit.Test public void testEmptyKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.<START_MOD>utils<END_MOD>.<START_MOD>StringHelper<END_MOD>.string2Map(org.ovirt.engine.core.<START_MOD>utils<END_MOD>.<START_MOD>StringHelperTest<END_MOD>.EMPTY_KEY_VAL); assertEquals(2, map.size()); }
<START_MOD>public static org.apache.commons.httpclient.HttpClient getConnection(int clientTimeOut, int connectionTimeOut, int clientRetries, int maxConnectionsPerHost, int maxTotalConnections) { org.apache.commons.httpclient.params.HttpConnectionManagerParams params = new org.apache.commons.httpclient.params.HttpConnectionManagerParams(); params.setConnectionTimeout(connectionTimeOut); params.setDefaultMaxConnectionsPerHost(maxConnectionsPerHost); params.setMaxTotalConnections(maxTotalConnections); org.apache.commons.httpclient.MultiThreadedHttpConnectionManager httpConnectionManager = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager(); httpConnectionManager.setParams(params); org.apache.commons.httpclient.HttpClient client = new org.apache.commons.httpclient.HttpClient(httpConnectionManager); int retries = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.vdsRetries); org.apache.commons.httpclient.HttpMethodRetryHandler handler = new org.apache.commons.httpclient.DefaultHttpMethodRetryHandler(retries, false); org.apache.commons.httpclient.params.HttpClientParams parameters = client.getParams(); parameters.setParameter(HttpMethodParams.RETRY_HANDLER, handler); return client; }<END_MOD>
private void addAddress(java.util.Map<java.lang.String, java.lang.Object> map, java.lang.String address) { if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { map.put(VdsProperties.Address, org.ovirt.engine.core.<START_MOD>utils<END_MOD>.<START_MOD>StringHelper<END_MOD>.string2Map(org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters().getVmDevice().getAddress())); } }
private java.util.Map<java.lang.String, java.lang.Object> buildData() { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Object> memDeviceData = new java.util.HashMap<>(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getMemoryDevice(); data.put("vmId", org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getVmId().toString()); memDeviceData.put(VdsProperties.Type, vmDevice.getType().getValue()); memDeviceData.put(VdsProperties.Device, vmDevice.getDevice()); if (org.apache.commons.lang.StringUtils.isNotBlank(vmDevice.getAddress())) { memDeviceData.put(VdsProperties.Address, org.ovirt.engine.core.<START_MOD>utils.StringHelper<END_MOD>.string2Map(vmDevice.getAddress())); } memDeviceData.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); memDeviceData.put(VdsProperties.DeviceId, vmDevice.getId().getDeviceId().toString()); memDeviceData.put("size", vmDevice.getSpecParams().get("size")); memDeviceData.put("node", vmDevice.getSpecParams().get("node")); data.put("memory", memDeviceData); return data; }
@org.junit.Test public void testMulKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.<START_MOD>utils<END_MOD>.<START_MOD>StringHelper<END_MOD>.string2Map(org.ovirt.engine.core.<START_MOD>utils<END_MOD>.<START_MOD>StringHelperTest<END_MOD>.MUL_KEY_VAL); assertEquals(4, map.size()); }
@org.junit.Test public void testNullKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.<START_MOD>utils<END_MOD>.<START_MOD>StringHelper<END_MOD>.string2Map(org.ovirt.engine.core.<START_MOD>utils<END_MOD>.<START_MOD>StringHelperTest<END_MOD>.NULL_KEY_VAL); assertEquals(0, map.size()); }
protected org.ovirt.engine.core.bll.ValidationResult validateMountOptions() { java.lang.String mountOptions = org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.getConnection().getMountOptions(); if (org.apache.commons.lang.StringUtils.isBlank(mountOptions)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.List<java.lang.String> disallowedOptions = ((org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.getConnection().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.POSIXFS)) ? org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.POSIX_MANAGED_OPTIONS : org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.NFS_MANAGED_OPTIONS; java.util.Map<java.lang.String, java.lang.String> optionsMap = org.ovirt.engine.core.<START_MOD>utils.StringHelper<END_MOD>.string2Map(mountOptions); java.util.Set<java.lang.String> optionsKeys = new java.util.HashSet<>(); for (java.lang.String option : optionsMap.keySet()) { optionsKeys.add(option.toLowerCase()); } optionsKeys.retainAll(disallowedOptions); if (!(optionsKeys.isEmpty())) { addValidationMessageVariable("invalidOptions", org.apache.commons.lang.StringUtils.join(optionsKeys,     return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VALIDATION_STORAGE_CONNECTION_MOUNT_OPTIONS_CONTAINS_MANAGED_PROPERTY); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public static java.util.Map<java.lang.String, java.lang.String> string2Map(java.lang.String str) { java.util.Map<java.lang.String, java.lang.String> map = new java.util.HashMap<>(); if (str != null) { str = str.trim(); if (str.startsWith("{")) { str = str.substring(1, ((str.length()) - 1)); } if (str.endsWith("}")) { str = str.substring(0, ((str.length()) - 1)); } str = str.trim(); if ((str.length()) > 0) { java.lang.String[] keyValPairs = str.split(org.ovirt.engine.core.<START_MOD>utils.StringHelper<END_MOD>.PAIRS_SEPARATOR); for (java.lang.String pair : keyValPairs) { java.lang.String[] keyval = pair.split(org.ovirt.engine.core.<START_MOD>utils.StringHelper<END_MOD>.KEY_VALUE_SEPARATOR); if ((keyval.length) == 2) { map.put(keyval[0].trim(), keyval[1].trim()); } else if ((keyval.length) == 1) { map.put(keyval[0].trim(), ""); } } } } return map; }
@javax.annotation.PostConstruct protected final void postConstruct() { if (!(isCompensationContext())) { initCommandBase(); } }
private boolean searchForDuplicatesWithExistingVmDevices(org.ovirt.engine.core.common.businessentities.VmDevice vmDeviceToHotplug) { java.lang.String deviceAddress = vmDeviceToHotplug.getAddress(); if (org.apache.commons.lang.StringUtils.isEmpty(deviceAddress)) { return false; } java.util.Map<java.lang.String, java.lang.String> addressMapToHotplug = org.ovirt.engine.core.<START_MOD>utils.StringHelper<END_MOD>.string2Map(deviceAddress); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> allVmDevices = vmDeviceDao.getVmDeviceByVmId(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm().getId()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : allVmDevices) { if (!(vmDeviceToHotplug.getId().equals(vmDevice.getId()))) { java.util.Map<java.lang.String, java.lang.String> deviceAddressMap = org.ovirt.engine.core.<START_MOD>utils.StringHelper<END_MOD>.string2Map(vmDevice.getAddress()); if (deviceAddressMap.equals(addressMapToHotplug)) { return true; } } } return false; }
protected void initTooltip() { tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(getContents()); tooltip.setPlacement(Placement.BOTTOM); java.lang.String tooltipContent = org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel.infoPopup.getTooltipContent(item, this); <START_MOD>if (tooltipContent != null) { <END_MOD>tooltip.<START_MOD>setHtml(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString<END_MOD>(tooltipContent<START_MOD>)<END_MOD>); }<START_MOD> }<END_MOD>
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetDifferentlyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); <START_MOD>org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPoolA = factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPoolB = factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorB)); <END_MOD>assertThat(<START_MOD>decoratedPoolA, is<END_MOD>(macPoolDecoratorA)); assertThat(<START_MOD>decoratedPoolB, is<END_MOD>(macPoolDecoratorB)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor1 = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy<START_MOD>, times(2)<END_MOD>).createLockingInstance(eq(<START_MOD>macPool<END_MOD>), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), <START_MOD>any<END_MOD>()); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetEquallyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); <START_MOD>org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool1 = factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool2 = factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)); <END_MOD>assertThat(<START_MOD>decoratedPool1, is(macPoolDecoratorA)); assertThat(decoratedPool2, is(macPoolDecoratorA)); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(<END_MOD>macPool<START_MOD>), eq(org.ovirt.engine.core.bll.network.macpool.MacPool<END_MOD>.class)<START_MOD>, any(<END_MOD>)); }
public void performPendingOperations() { java.util.Queue<java.util.concurrent.Future<?>> operations = pendingOperations; pendingOperations = new java.util.concurrent.ConcurrentLinkedQueue<>(); operations.<START_MOD>forEach<END_MOD>(<START_MOD>(<END_MOD> <START_MOD>task<END_MOD>) <START_MOD>-> <END_MOD>{ if (task instanceof java.util.concurrent.FutureTask) { ((java.util.concurrent.FutureTask<?>) (task)).run(); } else { org.ovirt.vdsm.jsonrpc.client.utils.<START_MOD>ReactorScheduler.LOG.error(<END_MOD> <START_MOD>task<END_MOD> <START_MOD>type<END_MOD> <START_MOD>in<END_MOD> <START_MOD>the queue '{}' <END_MOD>task); } }); }
public void refreshVdsStats() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.DebugTimerLogging)) { org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug( entered, host='{}'({}) vds.getName(), vds.getId()); } fetchHostInterfaces(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue statsReturnValue = resourceManager.runVdsCommand(VDSCommandType.GetStats, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase(vds)); if ((!(statsReturnValue.getSucceeded())) && ((statsReturnValue.getExceptionObject()) != null)) { org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.error( getting vds stats, host='{}'({}): {} vds.getName(), vds.getId(), statsReturnValue.getExceptionString()); throw statsReturnValue.getExceptionObject(); } getVdsEventListener().updateSchedulingStats(vds); updateV2VJobs(); saveVdsDynamic = <START_MOD>vdsManager.checkIfDynamicDataChanged(vds.getDynamicData())<END_MOD>; saveVdsStatistics = <START_MOD>vdsManager.checkIfStatisticChanged(vds.getStatisticsData())<END_MOD>; alertIfLowDiskSpaceOnHost(); checkVdsInterfaces(); if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.DebugTimerLogging)) { org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("vds::refreshVdsStats\n{}", this); } }
public void updateStatisticsData(org.ovirt.engine.core.common.businessentities.VdsStatistics statisticsData) { vdsStatisticsDao.update(statisticsData); cachedVds.setStatisticsData(statisticsData); <START_MOD>cachedStatisticsData = statisticsData; <END_MOD>}
public void refresh() { try { refreshVdsRunTimeInfo(); } finally { try { if (((firstStatus) != (vds.getStatus())) && ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { vdsManager.cancelRecoveryJob(); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug( '{}' ({}) firing up event. vds.getName(), vds.getId()); vdsManager.setIsSetNonOperationalExecuted((!(getVdsEventListener().vdsUpEvent(vds)))); } <START_MOD>saveVdsDynamic = vdsManager.checkIfDynamicDataChanged(vds.getDynamicData()); saveVdsStatistics = vdsManager.checkIfStatisticChanged(vds.getStatisticsData()); <END_MOD>saveDataToDb(); } catch (org.ovirt.engine.core.vdsbroker.irsbroker.IRSErrorException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Exception", ex); } catch (java.lang.RuntimeException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.error("Exception", ex); } } }
private void moveVDSToMaintenanceIfNeeded() { if ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.PreparingForMaintenance)) { if (monitoringStrategy.canMoveToMaintenance(vds)) { org.ovirt.engine.core.common.businessentities.VdsDynamic dbVds = getDbFacade().getVdsDynamicDao().get(vds.getId()); vds.setMaintenanceReason(dbVds.getMaintenanceReason()); vdsManager.setStatus(VDSStatus.Maintenance, vds); saveVdsDynamic = <START_MOD>vdsManager.checkIfDynamicDataChanged(vds.getDynamicData())<END_MOD>; saveVdsStatistics = <START_MOD>vdsManager.checkIfStatisticChanged(vds.getStatisticsData())<END_MOD>; org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.info( host status from   for Maintenance to 'Maintenance' in database, host '{}'({}) vds.getName(), vds.getId()); } else { vdsMaintenanceTimeoutOccurred = vdsManager.isTimeToRetryMaintenance(); } } }
private void beforeFirstRefreshTreatment(boolean isVdsUpOrGoingToMaintenance) { if (vdsManager.getbeforeFirstRefresh()) { boolean flagsChanged = false; final java.util.concurrent.atomic.AtomicBoolean processHardwareCapsNeededTemp = new java.util.concurrent.atomic.AtomicBoolean(); vdsManager.refreshCapabilities(processHardwareCapsNeededTemp, vds); flagsChanged = processHardwareCapsNeededTemp.get(); vdsManager.setbeforeFirstRefresh(false); refreshedCapabilities = true; saveVdsDynamic = <START_MOD>vdsManager.checkIfDynamicDataChanged(vds.getDynamicData())<END_MOD>; processHardwareCapsNeeded = (processHardwareCapsNeeded) ? processHardwareCapsNeeded : flagsChanged; } else if (isVdsUpOrGoingToMaintenance || ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Error))) { return; } if ((vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(vds.getId())); logable.addCustomValue("HostStatus", vds.getStatus().toString()); auditLog(logable, AuditLogType.VDS_DETECTED); } }
public void updateDynamicData(org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicData) { vdsDynamicDao.<START_MOD>update<END_MOD>(dynamicData); cachedVds.setDynamicData(dynamicData); <START_MOD>cachedDynamicData = dynamicData; <END_MOD>}
private void saveDataToDb() { if (saveVdsDynamic) { vdsManager.updateDynamicData(vds.getDynamicData()); <START_MOD>} <END_MOD>if (refreshedCapabilities) { vdsManager.updateNumaData(vds); } if (saveVdsStatistics) { org.ovirt.engine.core.common.businessentities.VdsStatistics stat = vds.getStatisticsData(); vdsManager.updateStatisticsData(stat); checkVdsMemoryThreshold(stat); checkVdsCpuThreshold(stat); checkVdsNetworkThreshold(stat); checkVdsSwapThreshold(stat); final java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics> statistics = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : vds.getInterfaces()) { statistics.add(iface.getStatistics()); } if (!(statistics.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getDbFacade().getInterfaceDao().massUpdateStatisticsForVds(statistics); return null; }); } saveNumaStatisticsDataToDb(); } }
public org.ovirt.engine.core.common.HostUpgradeManagerResult checkForUpdates(org.ovirt.engine.core.common.businessentities.VDS host) { if (upgradeCheckInProgressMap.getOrDefault(host.getId(), false)) { java.lang.String error = java.lang.String.format( to refresh host '%s' packages availability, another refresh process <START_MOD>is <END_MOD>already running. host.getName()); org.ovirt.engine.core.bll.host.AvailableUpdatesFinder.log.<START_MOD>warn(<END_MOD>error<START_MOD>); throw new java.lang.RuntimeException<END_MOD>(error); } try { upgradeCheckInProgressMap.put(host.getId(), true); return create(host.getVdsType()).checkForUpdates(host); } finally { upgradeCheckInProgressMap.remove(host.getId()); } }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { log.debug( SsoPostLoginFilter javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); try { java.lang.String engineSessionId = ((java.lang.String) (req.getAttribute(SessionConstants.HTTP_SESSION_ENGINE_SESSION_ID_KEY))); if ((org.apache.commons.lang.StringUtils.isEmpty(engineSessionId)) && ((req.getSession(false)) != null)) { engineSessionId = ((java.lang.String) (req.getSession(false).getAttribute(SessionConstants.HTTP_SESSION_ENGINE_SESSION_ID_KEY))); } if (org.apache.commons.lang.StringUtils.isNotEmpty(engineSessionId)) { javax.naming.InitialContext ctx = new javax.naming.InitialContext(); try { java.lang.String ssoToken = ((java.lang.String) (runQuery(VdcQueryType.GetEngineSessionIdToken, engineSessionId, ctx))); <START_MOD>java.lang.Object loggedInUser = runQuery(VdcQueryType.GetUserBySessionId, engineSessionId, ctx); if (loggedInUser != null) { <END_MOD>log.debug( userInfo to session <START_MOD>req.getSession(true).setAttribute(<END_MOD>org.ovirt.engine.core.<START_MOD>aaa.filters.SsoPostLoginFilter.ATTR_USER_INFO, getUserInfoObject(((org.ovirt.engine.core.<END_MOD>common.businessentities.aaa.DbUser<START_MOD>) (<END_MOD>loggedInUser<START_MOD>)), ssoToken)); } else { log.warn( to find logged user by sessionId } chain.doFilter(request, response); } finally { ctx.close(); } } else { log.warn(( sessionId in either request or session scope.   +   configure SSO properly with SsoPostLoginServlet. } } catch (java.lang.Exception ex) { log.error( to get token for <END_MOD>engine<START_MOD> session {} ex.getMessage()); log.debug("Exception", ex); } log.debug( <END_MOD>SsoPostLoginFilter<START_MOD> }<END_MOD>
public java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> getVmInitByIds(java.util.List<org.ovirt.engine.core.compat.Guid> ids) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> all = vmInitDao.getVmInitByIds(ids); for (org.ovirt.engine.core.common.businessentities.VmInit vmInit : all) { vmInit.setPasswordAlreadyStored((!(org.apache.commons.lang.StringUtils.isEmpty(vmInit.getRootPassword())))); vmInit.setRootPassword(null); } return all; }
@java.lang.Override protected void executeQueryCommand() { if ((org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getIds()) != null) { org.ovirt.engine.core.bll.GetVmsInitQuery.getQueryReturnValue().setReturnValue(vmHandler.getVmInitByIds(org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getIds())); } }
<START_MOD>@java.lang.Override public boolean test(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { return (diskStorageType) == (disk.getDiskStorageType()); }<END_MOD>
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> getCinderDisksToBeRemoved() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> imageDisks = org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getParameters().cinderDisks; java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = new java.util.ArrayList<>(); if (imageDisks == null) { cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter.filterCinderDisks<END_MOD>(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getVmId())); } else { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : imageDisks) { cinderDisks.add(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (diskImage))); } } return cinderDisks; }
@java.lang.Override protected void init() { super.init(); org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmDao().get(getVmIdFromSnapshot()); org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); boolean isCinderDisksExist = !(org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.<START_MOD>filterCinderDisks<END_MOD>(vm.getDiskList()).isEmpty()); org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters().setUseCinderCommandCallback(isCinderDisksExist); }
public boolean validateCinder() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.<START_MOD>filterCinderDisks<END_MOD>(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVmId())); if (!(cinderDisks.isEmpty())) { org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator cinderDisksValidator = getCinderDisksValidator(cinderDisks); return validate(cinderDisksValidator.validateCinderDiskLimits()); } return true; }
public boolean validateCinder() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.<START_MOD>filterCinderDisks<END_MOD>(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVmId())); if (!(cinderDisks.isEmpty())) { org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator cinderDisksValidator = getCinderDisksValidator(cinderDisks); return validate(cinderDisksValidator.validateCinderDiskSnapshotsLimits()); } return true; }
private void addRedundantCinderSnapshots(org.ovirt.engine.core.compat.Guid previewedSnapshotId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesFromActiveSnapshot) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderImagesForPreviewedSnapshot = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter.filterCinderDisks<END_MOD>(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getDiskImageDao().getAllSnapshotsForVmSnapshot(previewedSnapshotId)); java.util.Set<org.ovirt.engine.core.compat.Guid> criticalSnapshotsChain = getCriticalSnapshotsChain(imagesFromActiveSnapshot, cinderImagesForPreviewedSnapshot); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : cinderImagesForPreviewedSnapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> redundantSnapshotIdsToDelete = org.ovirt.engine.core.bll.storage.connection.CINDERStorageHelper.getRedundantVolumesToDeleteAfterCommitSnapshot(image.getId(), criticalSnapshotsChain); snapshotsToRemove.addAll(redundantSnapshotIdsToDelete.stream().filter(( snapIdToDelete) -> isSnapshotEligibleToBeDeleted(getSnapshotDao().get(snapIdToDelete))).collect(java.util.stream.Collectors.toList())); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) { imagesToPreview = ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks()) != null) ? org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks() : org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getDbFacade().getDiskImageDao().getAllSnapshotsForVmSnapshot(getDstSnapshot().getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter.filterCinderDisks<END_MOD>(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(imagesToPreview, org.ovirt.engine.core.bll.snapshots.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.snapshots.ONLY_SNAPABLE); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }
@org.junit.Test public void testImportVMFromConfigurationXMLCouldNotGetParsed() { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntity = getOvfEntityData(); ovfEntity.setOvfData( is not a valid XML initCommand(ovfEntity); java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> ovfEntityDataList = new java.util.ArrayList<>(); ovfEntityDataList.add(ovfEntity); when(unregisteredOVFDataDao.getByEntityIdAndStorageDomain(vmId, org.ovirt.engine.core.bll.exportimport.ImportVMFromConfigurationCommandTest.storageDomainId)).thenReturn(ovfEntityDataList); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)<START_MOD>, any(java.lang.Boolean.class), any(java.util.Map.class)<END_MOD>)).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED); }
protected boolean setAndValidateDiskProfiles() { if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm().getDiskMap()) != null) { java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskImage, org.ovirt.engine.core.compat.Guid> map = new java.util.HashMap<>(); <START_MOD>java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm().getDiskMap().values(); if (org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getAllowPartialImport()) { disks = disks.stream().filter(( disk) -> getImages().stream().anyMatch(( image) -> image.getId().equals(disk.getId()))).collect(java.util.stream.Collectors.toList()); } <END_MOD>for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : <START_MOD>disks<END_MOD>) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); map.put(diskImage, imageToDestinationDomainMap.get(diskImage.getId())); } } return validate(diskProfileHelper.setAndValidateDiskProfiles(map, org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getCurrentUser())); } return true; }
@org.junit.Test public void testImportVMFromConfigurationWhenStorageDomainIsInactive() { initCommand(getOvfEntityData()); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomain(); storageDomain.setStatus(StorageDomainStatus.Inactive); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)<START_MOD>, any(java.lang.Boolean.class), any(java.util.Map.class)<END_MOD>)).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2); }
@java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget()) { if (!(validateExternalVnicProfileMapping())) { return false; } if (!(validateMacs(vmFromConfiguration))) { return false; } org.ovirt.engine.core.bll.validator.ImportValidator importValidator = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImportValidator(); if (!(validate(importValidator.validateUnregisteredEntity(vmFromConfiguration, ovfEntityData, org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImages()<START_MOD>, org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getAllowPartialImport(), imageToDestinationDomainMap<END_MOD>)))) { return false; } setImagesWithStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVm().getImages()); } return super.validate(); }
@org.junit.Test public void testImportVMFromConfigurationWhenStorageDomainIsInMaintenance() { initCommand(getOvfEntityData()); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomain(); storageDomain.setStatus(StorageDomainStatus.Maintenance); doReturn(storageDomain).when(cmd).getStorageDomain(); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)<START_MOD>, any(java.lang.Boolean.class), any(java.util.Map.class)<END_MOD>)).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2); }
@org.junit.Test public void testPositiveImportVmFromConfiguration() { initCommand(getOvfEntityData()); doReturn(storagePool).when(cmd).getStoragePool(); doReturn(java.lang.Boolean.TRUE).when(cmd).validateAfterCloneVm(anyMapOf(org.ovirt.engine.core.compat.Guid.class, org.ovirt.engine.core.common.businessentities.StorageDomain.class)); doReturn(java.lang.Boolean.TRUE).when(cmd).validateBeforeCloneVm(anyMapOf(org.ovirt.engine.core.compat.Guid.class, org.ovirt.engine.core.common.businessentities.StorageDomain.class)); final org.ovirt.engine.core.common.businessentities.VM expectedVm = cmd.getVm(); when(externalVmMacsFinder.findExternalMacAddresses(eq(expectedVm), any(org.ovirt.engine.core.bll.context.CommandContext.class))).thenReturn(java.util.Collections.emptySet()); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)<START_MOD>, any(java.lang.Boolean.class), any(java.util.Map.class)<END_MOD>)).thenReturn(ValidationResult.VALID); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(cmd); }
public void performPendingOperations() { java.util.Queue<java.util.concurrent.Future<?>> operations = pendingOperations; pendingOperations = new java.util.concurrent.ConcurrentLinkedQueue<>(); <START_MOD>while (!(<END_MOD>operations.<START_MOD>isEmpty<END_MOD>(<START_MOD>))<END_MOD>) { ((java.util.concurrent.FutureTask) (<START_MOD>operations.poll()<END_MOD>)).run(); } }
@org.junit.Test public void testUpdate() { dao.save(vnicProfile); vnicProfile.setPortMirroring(true); vnicProfile.setPassthrough<START_MOD>(true); vnicProfile.setMigratable<END_MOD>(true); dao.update(vnicProfile); org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(vnicProfile.getId()); assertNotNull(result); assertEquals(vnicProfile.getId(), result.getId()); assertTrue(result.isPortMirroring()); assertTrue(result.isPassthrough()); <START_MOD>assertTrue(result.isMigratable()); <END_MOD>}
@org.junit.Test public void testSave() { dao.save(vnicProfile); org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(vnicProfile.getId()); assertNotNull(result); assertEquals(vnicProfile.getId(), result.getId()); assertFalse(result.isPortMirroring()); assertFalse(result.isPassthrough()); <START_MOD>assertTrue(result.isMigratable()); <END_MOD>}
@java.lang.Override public int hashCode() { return java.util.Objects.hash(customProperties, id, name, networkId, networkQosId, portMirroring, passthrough, <START_MOD>migratable, <END_MOD>description); }
@org.junit.Test public void testGetWithPassthrough() { org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(FixturesTool.VM_NETWORK_INTERFACE_PASSTHROUGH_PROFILE); assertNotNull(result); assertEquals(FixturesTool.VM_NETWORK_INTERFACE_PASSTHROUGH_PROFILE, result.getId()); assertTrue(result.isPassthrough()); <START_MOD>assertTrue(result.isMigratable()); <END_MOD>}
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", getId()).append("networkId", getNetworkId()).append("networkQosId", getNetworkQosId()).append("portMirroring", isPortMirroring()).append("passthrough", isPassthrough()).append(<START_MOD>"migratable", isMigratable()).append(<END_MOD>"customProperties", getCustomProperties()).append("description", getDescription()).build(); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.network.VnicProfile)) { return false; } org.ovirt.engine.core.common.businessentities.network.VnicProfile other = ((org.ovirt.engine.core.common.businessentities.network.VnicProfile) (obj)); return (((((((<START_MOD>(<END_MOD>java.util.Objects.equals(customProperties, other.customProperties)) && (java.util.Objects.equals(id, other.id))) && (java.util.Objects.equals(name, other.name))) && (java.util.Objects.equals(networkId, other.networkId))) && (java.util.Objects.equals(networkQosId, other.networkQosId))) && ((portMirroring) == (other.portMirroring))) && ((passthrough) == (other.passthrough))) && (<START_MOD>(migratable) == (other.migratable))) && (<END_MOD>java.util.Objects.equals(description, other.description)); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getVnicProfileDao(); vnicProfile = new org.ovirt.engine.core.common.businessentities.network.VnicProfile(); vnicProfile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vnicProfile.setName("new_profile"); vnicProfile.setNetworkId(FixturesTool.NETWORK_ENGINE); vnicProfile.setNetworkQosId(FixturesTool.NETWORK_QOS); vnicProfile.setPortMirroring(false); vnicProfile.setPassthrough(false); <START_MOD>vnicProfile.setMigratable(true); <END_MOD>}
private org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface mockVnic(boolean passthrough<START_MOD>, boolean migratable<END_MOD>) { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = mock(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface.class); <START_MOD>org.ovirt.engine.core.compat.Guid vnicId = org.ovirt.engine.core.compat.Guid.newGuid(); when(vnic.getId()).thenReturn(vnicId); <END_MOD>when(vnic.isPassthrough()).thenReturn(passthrough); <START_MOD>org.ovirt.engine.core.common.businessentities.network.VnicProfile profile = mock(org.ovirt.engine.core.common.businessentities.network.VnicProfile.class); when(vnicProfileDao.get(vnicId)).thenReturn(profile); when(profile.isMigratable()).thenReturn(migratable); <END_MOD>return vnic; }
<START_MOD>@org.junit.Test public void allPassthroughVnicsMigratableNoPassthroughVnics() { allPassthroughVnicsMigratableCommon(vm.getId(), 2); assertThatAllPassthroughVnicsMigratable(true); }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult <START_MOD>allPassthroughVnicsMigratable<END_MOD>() { for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = getDbFacade().getVmNetworkInterfaceDao().getAllForVm(vm.getId()); java.util.List<java.lang.String> <START_MOD>nonMigratablePassthroughVnicNames<END_MOD> = vnics.stream().filter(<START_MOD>isVnicMigratable(vm).negate()<END_MOD>).map(VmNic::getName).collect(java.util.stream.Collectors.toList()); if (!(<START_MOD>nonMigratablePassthroughVnicNames<END_MOD>.isEmpty())) { java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith("interfaces", <START_MOD>nonMigratablePassthroughVnicNames<END_MOD>); replacements.add(java.lang.String.format( %s vm.getName())); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.<START_MOD>ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED<END_MOD>, replacements); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
<START_MOD>private java.util.function.Predicate<? super org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> isVnicMigratable(org.ovirt.engine.core.common.businessentities.VM vm) { return ( vnic) -> (!(vnic.isPassthrough())) || ((org.ovirt.engine.core.common.FeatureSupported.sriovHotPlugSupported(vm.getClusterCompatibilityVersion())) && (getVnicProfile(vnic).isMigratable())); }<END_MOD>
@org.junit.Test public void <START_MOD>notAllPassthroughVnicsMigratable<END_MOD>() { vmNotHavingPassthroughVnicsCommon(vm.getId(), 2, <START_MOD>1, <END_MOD>3); assertThat(validator.<START_MOD>allPassthroughVnicsMigratable<END_MOD>(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.<START_MOD>ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED<END_MOD>)); }
@org.junit.Test public void <START_MOD>allPassthroughVnicsMigratableMulitpleVmsNotValid<END_MOD>() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = initValidatorWithMultipleVms(3); <START_MOD>allPassthroughVnicsMigratableCommon<END_MOD>(vmList.get(0).getId(), 2); vmNotHavingPassthroughVnicsCommon(vmList.get(1).getId(), <START_MOD>0, 1<END_MOD>, 8); <START_MOD>allPassthroughVnicsMigratableCommon<END_MOD>(vmList.get(2).getId(), 4); assertThat(validator.<START_MOD>allPassthroughVnicsMigratable<END_MOD>(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.<START_MOD>ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED<END_MOD>)); }
@org.junit.Test public void <START_MOD>allPassthroughVnicsMigratableMulitpleVmsValid<END_MOD>() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = initValidatorWithMultipleVms(2); <START_MOD>allPassthroughVnicsMigratableCommon<END_MOD>(vmList.get(0).getId(), 2); <START_MOD>allPassthroughVnicsMigratableCommon<END_MOD>(vmList.get(1).getId(), 8); assertThat(validator.<START_MOD>allPassthroughVnicsMigratable<END_MOD>(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
@org.junit.Test public void <START_MOD>allPassthroughVnicsMigratable<END_MOD>() { vmNotHavingPassthroughVnicsCommon(vm.getId(), <START_MOD>2, <END_MOD>0, <START_MOD>3<END_MOD>); <START_MOD>assertThatAllPassthroughVnicsMigratable<END_MOD>(true); }
@org.junit.Test public void <START_MOD>allPassthroughVnicsMigratableNoVnics<END_MOD>() { <START_MOD>allPassthroughVnicsMigratableCommon<END_MOD>(vm.getId(), 0); <START_MOD>assertThatAllPassthroughVnicsMigratable<END_MOD>(true); }
<START_MOD>private void populateInventoryCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Inventory inventory = lookupInventory(); long endTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.inventoryCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_KEY, inventory, 15, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Inventoy cache updated in {}ms", (endTime - startTime)); }<END_MOD>
<START_MOD>@java.lang.Override public void run() { log.debug("Attempting to update the Inventory cache"); try { populateInventoryCache(); } catch (org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException e) { log.error("Could not update the Inventory Cache: {}", e.getMessage(), e); } }<END_MOD>
<START_MOD>@javax.annotation.PreDestroy private void stopScheduledTasks() { dashboardCacheUpdate.cancel(true); inventoryCacheUpdate.cancel(true); }<END_MOD>
<START_MOD>private void populateDashboardCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Dashboard dashboard = getDashboard(); long endTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.dashboardCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_KEY, dashboard, 5, java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Dashboard cache updated in {}ms", (endTime - startTime)); }<END_MOD>
<START_MOD>private org.ovirt.engine.ui.frontend.server.dashboard.Dashboard getDashboardFromCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.Dashboard dashboard; org.ovirt.engine.ui.frontend.server.dashboard.Inventory inventory; synchronized(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_LOCK) { dashboard = org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.dashboardCache.get(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_KEY); if (dashboard == null) { org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Dashboard cache is empty, querying dashboard data directly"); dashboard = getDashboard(); } inventory = org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.inventoryCache.get(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_KEY); if (inventory == null) { org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Inventory cache is empty, querying inventory data directly"); inventory = lookupInventory(); } } dashboard.setInventory(inventory); return dashboard; }<END_MOD>
<START_MOD>@java.lang.Override public void run() { log.debug("Attempting to update the Dashboard cache"); try { populateDashboardCache(); } catch (org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException e) { log.error("Could not update the Dashboard Cache: {}", e.getMessage(), e); } }<END_MOD>
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { updateSysprepVisibility(object); <START_MOD>autoSetVmHostname(object); <END_MOD>}
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { updateCloudInitVisibility(object); <START_MOD>autoSetVmHostname(object); <END_MOD>}
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(<START_MOD>(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().isCreateImage() ? org.ovirt.engine.core.common.vdscommands.<END_MOD>VDSCommandType.<START_MOD>CreateImage : org.ovirt.engine.core.common.vdscommands.VDSCommandType.<END_MOD>CreateSnapshot<START_MOD>)<END_MOD>, getCreateVDSCommandParameters()); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().setVdsmTaskIds(new java.util.ArrayList()); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVdsmTaskIds().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getTaskIdList().add(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVdsmTaskIds().get(0)); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.setSucceeded(true); } }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return <START_MOD>(<END_MOD>org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getParameters().isUseCinderCommandCallback(<START_MOD>)) || (org.ovirt.engine.core.common.FeatureSupported.dataOperationsByHSM(org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getStoragePool().getCompatibilityVersion())<END_MOD>) ? new org.ovirt.engine.core.bll.ConcurrentChildCommandsExecutionCallback() : null; }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { if (org.ovirt.engine.core.bll.CreateCloneOfTemplateCommand.isDataOperationsByHSM()) { return new org.ovirt.engine.core.bll.ConcurrentChildCommandsExecutionCallback(); } return null; }<END_MOD>
private void updateVmStatistics() { statistics = getVmManager().getStatistics(); <START_MOD>java.lang.Integer reportedMigrationProgress = vdsmVm.getVmStatistics().getMigrationProgressPercent(); boolean updateMigrationProgress = (reportedMigrationProgress == null) || (getVmManager().getVmCompatibilityVersion().less(Version.v4_1)); <END_MOD>statistics.updateRuntimeData(vdsmVm.getVmStatistics(), getVmManager().getNumOfCpus()<START_MOD>, updateMigrationProgress<END_MOD>); }
<START_MOD>@java.lang.Override public void onNext(java.util.Map<java.lang.String, java.lang.Object> map) { try { map.entrySet().stream().forEach(( vmInfo) -> { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid(vmInfo.getKey()); java.util.Map<?, ?> properties = ((java.util.Map<?, ?>) (vmInfo.getValue())); int progress = java.lang.Integer.valueOf(properties.get("progress").toString()); org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics = resourceManager.getVmManager(vmId).getStatistics(); vmStatistics.setMigrationProgressPercent(progress); }); } finally { subscription.request(1); } }<END_MOD>
private void updateStaticFields(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { name = vmStatic.getName(); origin = vmStatic.getOrigin(); autoStart = vmStatic.isAutoStartup(); memSizeMb = vmStatic.getMemSizeMb(); minAllocatedMem = vmStatic.getMinAllocatedMem(); numOfCpus = vmStatic.getNumOfCpus(); <START_MOD>clusterId = vmStatic.getClusterId(); <END_MOD>}
<START_MOD>public org.ovirt.engine.core.compat.Version getVmCompatibilityVersion() { return clusterDao.get(clusterId).getCompatibilityVersion(); }<END_MOD>
@java.lang.Override public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.Boolean value, com.google.gwt.safehtml.shared.SafeHtml <START_MOD>tooltipHtml<END_MOD>, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.Boolean> valueUpdater) { <START_MOD>java.lang.String tooltip; <END_MOD>if (<START_MOD>tooltipHtml<END_MOD> == null) { <START_MOD>tooltip<END_MOD> = getTooltip(value); } <START_MOD>else { tooltip = tooltipHtml.asString(); } <END_MOD>org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.<START_MOD>addTooltipToElement(tooltip, <END_MOD>parent<START_MOD>); super.onBrowserEvent(context, parent, value<END_MOD>, event, valueUpdater); }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { if (tooltipContent == null) { tooltipContent = getTooltip(value); } if (BrowserEvents.MOUSEOVER.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.<START_MOD>addTooltipToElement<END_MOD>(<START_MOD>tooltipContent.asString()<END_MOD>, <START_MOD>parent<END_MOD>); } }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml <START_MOD>tooltipHtml<END_MOD>, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { <START_MOD>java.lang.String tooltip; <END_MOD>if (<START_MOD>tooltipHtml<END_MOD> == null) { <START_MOD>tooltip<END_MOD> = getTooltip(value); } <START_MOD>else { tooltip = tooltipHtml.asString(); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, parent); <END_MOD>if (BrowserEvents.MOUSEOVER.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.<START_MOD>addTooltipToElement(tooltip, parent); } super.onBrowserEvent(context, parent, value<END_MOD>, event, valueUpdater); }
private void updateKeyTitle(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) { java.lang.String selectedKey = ((java.lang.String) (object.getKeys().getSelectedItem())); if (selectedKey != null) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(selectedKey, keyField.getElement()); } }
void attachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().add(alertPanel); com.google.gwt.dom.client.Element messageDivElement = alertPanel.getMessageAt(0).getElement(); if (org.ovirt.engine.ui.common.utils.ElementUtils.detectOverflowUsingScrollWidth(messageDivElement)) { com.google.gwt.safehtml.shared.SafeHtml tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(messageDivElement.getInnerText()); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltipContent<START_MOD>.asString()<END_MOD>, alertPanel.getElement()); } }
protected void disableElement(com.google.gwt.dom.client.Element element) { element.getStyle().setProperty("disabled", "true"); element.getStyle().setColor("#999999"); if ((getNodeDisabledTooltip()) != null) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(getNodeDisabledTooltip(), element); } }
@java.lang.Override public void setTooltip(<START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String<END_MOD> tooltip) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, getElement()); }
protected void updateInputTitle(java.util.ArrayList<java.lang.String> grayOutReasons, com.google.gwt.dom.client.Element input) { java.lang.StringBuilder title = new java.lang.StringBuilder(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.empty()); for (java.lang.String reason : grayOutReasons) { title.append(reason).append(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.space()); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(title.toString(), input); }
public void setContentWidgetContainerTooltip(java.lang.String tooltipText) { contentWidgetContainerConfiguredTooltip = tooltipText; <START_MOD>contentWidgetContainer<END_MOD>.<START_MOD>setTitle<END_MOD>(tooltipText); }
<START_MOD>public<END_MOD> void <START_MOD>setText<END_MOD>(java.lang.String text) { <START_MOD>this<END_MOD>.<START_MOD>setTitle<END_MOD>(text); }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { <START_MOD>java.lang.String tooltip = ""; <END_MOD>if (tooltipContent == null) { tooltipContent = getTooltip(value); } <START_MOD>if (tooltipContent != null) { tooltip = tooltipContent.asString(); } <END_MOD>org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.<START_MOD>addTooltipToElement(tooltip, <END_MOD>parent<START_MOD>); super.onBrowserEvent(context, parent, value<END_MOD>, event, valueUpdater); }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.String value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.String> valueUpdater) { if ((tooltipContent == null) || (tooltipContent.asString().isEmpty())) { <START_MOD>java.lang.String renderedTooltip<END_MOD> = renderTooltip(context, parent, value); <START_MOD>tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(renderedTooltip); <END_MOD>} super.onBrowserEvent(context, parent, value, tooltipContent, event, valueUpdater); }
public void validate(java.util.List<java.lang.String> errors) { int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); assert (errors != null) && ((errors.size()) == rowCount) :   must be the same size as the contents of the table! for (int i = 0; i < rowCount; ++i) { com.google.gwt.dom.client.Element element = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowElement(i); assert element != null :   shouldn be null if errors is the same size as the contents of the table! java.lang.String error = errors.get(i); boolean valid = org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(error); if (!valid) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(error, element); element.addClassName(style.invalidRow()); } else { element.removeClassName(style.invalidRow()); } } }
<START_MOD>public static boolean haveHostsAvailableforHE(final org.ovirt.engine.core.dao.VdsDao vdsDao, final org.ovirt.engine.core.common.businessentities.VDS vds, final java.lang.Iterable<org.ovirt.engine.core.compat.Guid> vdsesInBatch) { java.util.Set<org.ovirt.engine.core.compat.Guid> vdsIds = new java.util.HashSet<>(); vdsesInBatch.forEach(vdsIds::add); return vdsDao.getAllForClusterWithStatus(vds.getClusterId(), VDSStatus.Up).stream().filter(( v) -> !(v.getId().equals(vds.getId()))).filter(( v) -> !(vdsIds.contains(v))).filter(VDS::getHighlyAvailableIsConfigured).filter(VDS::getHighlyAvailableIsActive).filter(( v) -> !(v.getHighlyAvailableLocalMaintenance())).filter(( v) -> (v.getHighlyAvailableScore()) > 0).findAny().isPresent(); }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.webadmin.Source("images/host_ha_configured.png") com.google.gwt.resources.client.ImageResource haConfigured();<END_MOD>
<START_MOD>java.lang.String haConfiguredTooltip();<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc amendVolume(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> imgInfo, java.util.Map<java.lang.String, java.lang.Object> volAttr) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.amend_volume").withParameter("job_id", jobId).withParameter("img_info", imgInfo).withParameter("vol_attr", volAttr).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }<END_MOD>
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DiskFormat.class, to = java.lang.String.class) public static org.ovirt.engine.core.common.businessentities.storage.QcowCompat map(org.ovirt.engine.api.model.QcowVersion qcowVersion, org.ovirt.engine.core.common.businessentities.storage.QcowCompat template) { switch (qcowVersion) { case QCOW2_V2 : return org.ovirt.engine.core.common.businessentities.storage.QcowCompat.QCOW2_V2; case QCOW2_V3 : return org.ovirt.engine.core.common.businessentities.storage.QcowCompat.QCOW2_V3; default : return org.ovirt.engine.core.common.businessentities.storage.QcowCompat.Undefined; } }<END_MOD>
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.QcowVersion.class, to = java.lang.String.class) public static org.ovirt.engine.api.model.QcowVersion map(org.ovirt.engine.core.common.businessentities.storage.QcowCompat qcowCompat, org.ovirt.engine.api.model.QcowVersion template) { switch (qcowCompat) { case QCOW2_V2 : return org.ovirt.engine.api.model.QcowVersion.QCOW2_V2; case QCOW2_V3 : return org.ovirt.engine.api.model.QcowVersion.QCOW2_V3; default : return null; } }<END_MOD>
<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc amendVolume(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> imgInfo, java.util.Map<java.lang.String, java.lang.Object> volAttr);<END_MOD>
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.bll.storage.domain.<START_MOD>ActionAfterDeleteHandler<END_MOD>.<START_MOD>fixParameters<END_MOD>(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), false)); }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue mergeSnapshots(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.vdscommands.MergeSnapshotsVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.MergeSnapshotsVDSCommandParameters(storagePoolId, storageDomainId, org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getVmId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().getId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().getImageId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDestinationDiskImage().getImageId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().isWipeAfterDelete()); return runVdsCommand(VDSCommandType.MergeSnapshots, org.ovirt.engine.core.bll.storage.domain.<START_MOD>ActionAfterDeleteHandler.fixParameters<END_MOD>(params)); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.<START_MOD>di.Injector.get(org.ovirt.engine.core.<END_MOD>bll.storage.domain.PostDeleteActionHandler<START_MOD>.class)<END_MOD>.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), false)); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(VdcActionType.RemoveVmTemplate); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.domain.<START_MOD>ActionAfterDeleteHandler.fixParameters<END_MOD>(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getWipeAfterDelete(), false))); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getReturnValue().getInternalVdsmTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), VdcActionType.RemoveVmTemplate, VdcObjectType.Storage, org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.setSucceeded(true); } }
private org.ovirt.engine.core.common.vdscommands.VDSParametersBase createVDSParameters() { return org.ovirt.engine.core.bll.storage.domain.<START_MOD>ActionAfterDeleteHandler.fixParameters<END_MOD>(new org.ovirt.engine.core.common.vdscommands.DestroyImageVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getImageList(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().isPostZero(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().isForce())); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.<START_MOD>di.Injector.get(org.ovirt.engine.core.<END_MOD>bll.storage.domain.PostDeleteActionHandler<START_MOD>.class)<END_MOD>.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(4), isPostZero(), false)); }
protected static <T extends org.ovirt.engine.core.common.vdscommands.StorageDomainIdParametersBase & org.ovirt.engine.core.common.vdscommands.<START_MOD>ActionAfterDelete<END_MOD>> T <START_MOD>fixParameters<END_MOD>(T parameters, boolean isFileDomain) { if (isFileDomain) { parameters.setPostZero(false); } return parameters; }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.bll.storage.domain.<START_MOD>ActionAfterDeleteHandler<END_MOD>.<START_MOD>fixParameters<END_MOD>(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(4), isPostZero(), false)); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue performImageVdsmOperation() { if (org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getParameters().isShouldLockImage()) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImageSnapshotsStatusWithCompensation(org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getRelevantDiskImage().getId(), ImageStatus.LOCKED, ImageStatus.ILLEGAL, org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getCompensationContext()); } return runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.domain.<START_MOD>ActionAfterDeleteHandler.fixParameters<END_MOD>(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().getId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().isWipeAfterDelete(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getParameters().getForceDelete()))); }
public static <T extends org.ovirt.engine.core.common.vdscommands.StorageDomainIdParametersBase & org.ovirt.engine.core.common.vdscommands.<START_MOD>ActionAfterDelete<END_MOD>> T <START_MOD>fixParameters<END_MOD>(T parameters) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainStaticDao().get(parameters.getStorageDomainId()); return org.ovirt.engine.core.bll.storage.domain.<START_MOD>ActionAfterDeleteHandler<END_MOD>.<START_MOD>fixParameters<END_MOD>(parameters, storageDomainStatic.getStorageType().isFileDomain()); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VM vm) { java.<START_MOD>util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.<END_MOD>lang.String<START_MOD>><END_MOD> <START_MOD>imagesToText = getSafeHtmlStringMap(vm)<END_MOD>; if (<START_MOD>!<END_MOD>(<START_MOD>imagesToText<END_MOD>.<START_MOD>isEmpty<END_MOD>())) {<START_MOD> return<END_MOD> org.ovirt.engine.ui.webadmin.widget.table.column.<START_MOD>MultiImageColumnHelper<END_MOD>.getTooltip(<START_MOD>imagesToText<END_MOD>); } return <START_MOD>null<END_MOD>; }
<START_MOD>private java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> getSafeHtmlStringMap(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> res = new java.util.LinkedHashMap<>(); if ((vm.getVmPoolId()) == null) { org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig config = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig.from(vm.getVmType(), vm.isStateless(), vm.isNextRunConfigurationExists()); res.put(getImageSafeHtml(config.getImageResource()), config.getTooltip()); } else { com.google.gwt.resources.client.ImageResource img = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.getPoolVmImageResource(vm.getVmType(), vm.isNextRunConfigurationExists()); res.put(getImageSafeHtml(img), getPoolVmTooltip(vm.getVmType())); } if (vm.isHostedEngine()) { res.put(getImageSafeHtml(org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.mgmtNetwork()), org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.constants.isVmHostedEngineTooltip()); } return res; }<END_MOD>
@java.lang.Override public com.google.gwt.<START_MOD>safehtml<END_MOD>.<START_MOD>shared<END_MOD>.<START_MOD>SafeHtml<END_MOD> getValue(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData object) { return new org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn().getValue(object.getVm()); }
<START_MOD>private com.google.gwt.safehtml.shared.SafeHtml getImageSafeHtml(com.google.gwt.resources.client.ImageResource imageResource) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(imageResource).getHTML()); }<END_MOD>
@java.lang.Override public com.google.gwt.<START_MOD>safehtml<END_MOD>.<START_MOD>shared<END_MOD>.<START_MOD>SafeHtml<END_MOD> getValue(java.lang.Object object) { return new org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn().getValue(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm()); }
<START_MOD>java.lang.String isVmHostedEngineTooltip();<END_MOD>
@java.lang.Override public com.google.gwt.<START_MOD>safehtml<END_MOD>.<START_MOD>shared<END_MOD>.<START_MOD>SafeHtml<END_MOD> getValue(org.ovirt.engine.core.common.businessentities.VM vm) { <START_MOD>java.util.List<com.google.gwt.safehtml.shared.SafeHtml><END_MOD> <START_MOD>imagesHtml<END_MOD> = <START_MOD>new java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>ArrayList(getSafeHtmlStringMap<END_MOD>(vm<START_MOD>)<END_MOD>.<START_MOD>keySet<END_MOD>()); <START_MOD>if<END_MOD> <START_MOD>(!(imagesHtml<END_MOD>.<START_MOD>isEmpty<END_MOD>()<START_MOD>))<END_MOD> { return org.ovirt.engine.ui.webadmin.widget.table.column.<START_MOD>MultiImageColumnHelper<END_MOD>.<START_MOD>getValue<END_MOD>(<START_MOD>imagesHtml<END_MOD>); } <START_MOD>return null; <END_MOD>}
public static java.util.Map<java.lang.String, java.lang.Object> authenticate(javax.servlet.http.HttpServletRequest req, java.lang.String scope) { <START_MOD>org.apache.http.client.methods.HttpPost request; try { request<END_MOD> = <START_MOD>org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost<END_MOD>("/oauth/token"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(<START_MOD>request<END_MOD>); java.lang.String[] credentials = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getUserCredentialsFromHeader(req); <START_MOD>java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(4); form.add(new org.apache.http.message.BasicNameValuePair<END_MOD>("grant_type", "password")<START_MOD>); form.add(new org.apache.http.message.BasicNameValuePair<END_MOD>("username", credentials[0])<START_MOD>); form.add(new org.apache.http.message.BasicNameValuePair<END_MOD>("password", credentials[1])<START_MOD>); form.add(new org.apache.http.message.BasicNameValuePair<END_MOD>("scope", scope)<START_MOD>); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form<END_MOD>)); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.<START_MOD>getResponse(request<END_MOD>); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }
private static <START_MOD>org<END_MOD>.<START_MOD>apache<END_MOD>.<START_MOD>http.client.methods.HttpPost<END_MOD> <START_MOD>createPost<END_MOD>(java.lang.String <START_MOD>path<END_MOD>) throws java.lang.Exception { org.ovirt.engine.core.<START_MOD>utils<END_MOD>.<START_MOD>EngineLocalConfig<END_MOD> <START_MOD>config = <END_MOD>org.ovirt.engine.core.utils.EngineLocalConfig.getInstance()<START_MOD>; java.lang.String base = config<END_MOD>.getProperty("ENGINE_SSO_SERVICE_URL")<START_MOD>;<END_MOD> <START_MOD>org.apache.http.client.methods.HttpPost request = new org.apache.http.client.methods.HttpPost(<END_MOD>)<START_MOD>; request<END_MOD>.<START_MOD>setURI<END_MOD>(<START_MOD>new java.net.URI((base + path)<END_MOD>)); <START_MOD>request<END_MOD>.<START_MOD>setHeader<END_MOD>("Accept", "application/json"); <START_MOD>request<END_MOD>.<START_MOD>setHeader<END_MOD>("Content-Type", "application/x-www-form-urlencoded"); <START_MOD>request<END_MOD>.<START_MOD>setHeader<END_MOD>("Content-Language", "en-US"); return <START_MOD>request<END_MOD>; }
private static java.util.Map<java.lang.String, java.lang.Object> search(java.lang.String token, java.util.Map<java.lang.String, java.lang.Object> params, java.lang.String queryType, java.lang.String scope) { <START_MOD>try { org.apache.http.client.methods.HttpPost request<END_MOD> = <START_MOD>org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token-info"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(4); form.add(new org.apache.http.message.BasicNameValuePair("query_type", queryType)); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); if (org.apache.commons.lang.StringUtils.isNotEmpty(token)) { form.add(new org.apache.http.message.BasicNameValuePair("token", token)); } if (params != <END_MOD>null<START_MOD>)<END_MOD> { <START_MOD>form.add(new org.apache.http.message.BasicNameValuePair("params",<END_MOD> org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.<START_MOD>encode(new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer().serialize(params)))); } request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); return<END_MOD> org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.<START_MOD>getResponse(request); } catch (java.lang.Exception ex<END_MOD>) { <START_MOD>return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()<END_MOD>); } }
public static java.util.Map<java.lang.String, java.lang.Object> getTokenInfo(java.lang.String token, java.lang.String scope) { <START_MOD>try { org.apache.http.client.methods.HttpPost request<END_MOD> = <START_MOD>org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token-info"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(2); form.add(new org.apache.http.message.BasicNameValuePair("token", token)); if (org.apache.commons.lang.StringUtils.isNotEmpty(scope)) { form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); } request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); java.util.Map<java.lang.String, java.lang.Object> jsonData = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); java.util.Map<java.lang.String, java.lang.Object> ovirtData = ((java.util.Map<java.lang.String, java.lang.Object>) (jsonData.get("ovirt"))); if (ovirtData != <END_MOD>null<START_MOD>) { java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> groupIds<END_MOD> = <START_MOD>((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (ovirtData.get("group_ids"))); if (groupIds != null) { ovirtData.put("group_ids", <END_MOD>org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.<START_MOD>processGroupMembershipsFromJson(groupIds)); } } return jsonData; } catch (java.lang.Exception ex) { return<END_MOD> org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.<START_MOD>buildMapWithError("server_error",<END_MOD> ex.getMessage()); } <START_MOD>}<END_MOD>
public static java.util.Map<java.lang.String, java.lang.Object> getToken(java.lang.String grantType, java.lang.String code, java.lang.String scope, java.lang.String redirectUri) { <START_MOD>try { org.apache.http.client.methods.HttpPost request<END_MOD> = <START_MOD>org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(4); form.add(new org.apache.http.message.BasicNameValuePair("grant_type", grantType)); form.add(new org.apache.http.message.BasicNameValuePair("code", code)); form.add(new org.apache.http.message.BasicNameValuePair("redirect_uri", redirectUri)); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.lang.Exception ex)<END_MOD> { <START_MOD>return<END_MOD> org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.<START_MOD>buildMapWithError("server_error", ex.getMessage()<END_MOD>); } }
private static java.util.Map<java.lang.String, java.lang.Object> loginWithPasswordImpl(java.lang.String username, java.lang.String password, java.lang.String scope, org.ovirt.engine.api.extensions.ExtMap authRecord) { <START_MOD>try { org.apache.http.client.methods.HttpPost request<END_MOD> = <START_MOD>org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(5); form.add(new org.apache.http.message.BasicNameValuePair("grant_type", "password")); form.add(new org.apache.http.message.BasicNameValuePair("username", username)); form.add(new org.apache.http.message.BasicNameValuePair("password", password)); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); if (authRecord != <END_MOD>null<START_MOD>)<END_MOD> { <START_MOD>form.add(new org.apache.http.message.BasicNameValuePair("ovirt_auth_record", new<END_MOD> org.ovirt.engine.core.<START_MOD>utils.serialization.json.JsonObjectSerializer().serialize(authRecord))); } request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); return org.ovirt.engine.core.<END_MOD>aaa.SsoOAuthServiceUtils.<START_MOD>getResponse(request); } catch (java.lang.Exception ex) { return<END_MOD> org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.<START_MOD>buildMapWithError("server_error", ex.getMessage(<END_MOD>)); } }
<START_MOD>private static org.apache.http.client.methods.HttpPost createPost(java.lang.String url) throws java.lang.Exception { org.apache.http.client.methods.HttpPost request = new org.apache.http.client.methods.HttpPost(); request.setURI(new java.net.URI(url)); request.setHeader("Accept", "application/json"); request.setHeader("Content-Type", "application/x-www-form-urlencoded"); return request; }<END_MOD>
public static java.util.Map<java.lang.String, java.lang.Object> isSsoDeployed() { <START_MOD>org<END_MOD>.<START_MOD>apache<END_MOD>.<START_MOD>http.client.methods.HttpGet<END_MOD> <START_MOD>request<END_MOD>; try { <START_MOD>request<END_MOD> = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.<START_MOD>createGet<END_MOD>("/status"); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.<START_MOD>getResponse<END_MOD>(<START_MOD>request<END_MOD>); } catch (java.io.FileNotFoundException ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error",   Engine is initializing. } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }
private static void notifyClientOfLogoutEvent(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, java.lang.String clientId, java.lang.String token) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.ClientInfo clientInfo = ssoContext.getClienInfo(clientId); java.lang.String url = clientInfo.getClientNotificationCallback(); if (org.apache.commons.lang.StringUtils.isNotEmpty(url)) { <START_MOD>org.apache.http.client.methods.HttpPost request<END_MOD> = <START_MOD>org.ovirt.engine.core.sso.utils.SsoUtils.createPost(url); java.util.List<org.apache.http.message.BasicNameValuePair> form<END_MOD> = <START_MOD>new java.util.ArrayList<>(3); form.add(new org.apache.http.message.BasicNameValuePair("event", "logout")); form.add(new org.apache.http.message.BasicNameValuePair("token", token)); form.add(new org.apache.http.message.BasicNameValuePair("token_type", "bearer")); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); <END_MOD>org.ovirt.engine.core.sso.utils.SsoUtils.<START_MOD>execute(request, <END_MOD>ssoContext<START_MOD>, clientId<END_MOD>); } }
private static <START_MOD>java.util.Map<java.lang.String<END_MOD>, java.lang.<START_MOD>Object> getResponse(org.apache.http.client.methods.HttpUriRequest request) throws java.lang.Exception { try (org.apache.http.client.methods.CloseableHttpResponse response = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.execute(request)) { if ((response.getStatusLine().getStatusCode()) == (org.apache.http.HttpStatus.SC_NOT_FOUND)) { throw new java.io.FileNotFoundException(); } try (java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream()) { try (java.io.InputStream input = response.getEntity().getContent()) { org.ovirt.engine.core.aaa.filters.FiltersHelper.copy(input, os); } java.lang.ClassLoader loader = java.lang.Thread.currentThread().getContextClassLoader(); java.lang.Thread.currentThread().setContextClassLoader(org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.class.getClassLoader()); try { return new org.ovirt.engine.core.utils.serialization.json.JsonObjectDeserializer().deserialize(new java.lang.<END_MOD>String<START_MOD>(os.toByteArray()<END_MOD>, <START_MOD>java.nio.charset.StandardCharsets.UTF_8.name()), java.util.HashMap.class); } finally { java.lang.Thread.currentThread().setContextClassLoader(loader); } } } }<END_MOD>
public static java.util.Map<java.lang.String, java.lang.Object> revoke(java.lang.String token, java.lang.String scope) { <START_MOD>try { org.apache.http.client.methods.HttpPost request<END_MOD> = <START_MOD>org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/revoke"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(2); form.add(new org.apache.http.message.BasicNameValuePair("token", token)); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.lang.Exception ex)<END_MOD> { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.<START_MOD>buildMapWithError("server_error", ex.getMessage()<END_MOD>); } }
@java.lang.Override public void rerun() { <START_MOD>org.ovirt.engine.core.bll.RunVmCommand.<END_MOD>cleanupPassthroughVnics(); setFlow(null); super.rerun(); }
<START_MOD>protected void cleanupPassthroughVnics() { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> vnicToVfMap = getVnicToVfMap(); if (vnicToVfMap != null) { networkDeviceHelper.setVmIdOnVfs(org.ovirt.engine.core.bll.RunVmCommandBase.getVdsId(), null, new java.util.HashSet(vnicToVfMap.values())); } vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommandBase.getVmId()); }<END_MOD>
@java.lang.Override protected void runningFailed() { <START_MOD>org.ovirt.engine.core.bll.RunVmCommand.<END_MOD>cleanupPassthroughVnics(); if (memoryFromSnapshotUsed) { removeMemoryFromActiveSnapshot(); } super.runningFailed(); }
@org.junit.Test public void shouldNotTryToMigrateWhenNotSchedulable() { when(schedulingManager.canSchedule(eq(cluster), any(org.ovirt.engine.core.common.businessentities.VM.class), anyList(), anyList(), anyList())).thenReturn(false); affinityGroups.add(createAffinityGroup(cluster, true, vm1, vm2, vm4)); assertThat(enforcer.chooseNextVmToMigrate(cluster)).isNull(); }
@org.junit.Test public void shouldSelectFirstSchedulableFromCandidatePool() { affinityGroups.add(createAffinityGroup(cluster, true, vm1, vm2, vm3, vm5, vm6)); when(schedulingManager.canSchedule(eq(cluster), any(org.ovirt.engine.core.common.businessentities.VM.class), anyList(), anyList(), anyList())).thenReturn(false, true); assertThat(enforcer.chooseNextVmToMigrate(cluster)).isIn(vm5, vm6); verify(schedulingManager).canSchedule(eq(cluster), eq(vm5), anyList(), anyList(), anyList()); verify(schedulingManager).canSchedule(eq(cluster), eq(vm6), anyList(), anyList(), anyList()); }
protected void initParametersForPassthroughVnics() { org.ovirt.engine.core.bll.RunVmCommand.getVm().setPassthroughVnicToVfMap(<START_MOD>org.ovirt.engine.core.bll.RunVmCommand.<END_MOD>getVnicToVfMap()); vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); }
<START_MOD>protected java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> getVnicToVfMap() { org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.bll.RunVmCommandBase.getVdsId(); return hostId == null ? null : vfScheduler.getVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommandBase.getVmId(), hostId); }<END_MOD>
<START_MOD>private void updateMetadataDevice() { org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().setMetadataDevice(metadataDevice); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomainStaticDao().update(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); }<END_MOD>
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.updateStaticDataDefaults(); <START_MOD>metadataDevice = org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getMetadataDevice(); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().setMetadataDevice(null); <END_MOD>org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.addStorageDomainInDb(); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.updateStorageDomainDynamicFromIrs(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = getLUNsFromVgInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorage()); saveLUNsInDB(luns); <START_MOD>updateMetadataDevice(); <END_MOD>org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.setSucceeded(true); }
<START_MOD>private void handlePolledJobStatus(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, org.ovirt.engine.core.common.businessentities.HostJobInfo jobInfo) { if ((jobInfo.getStatus()) != (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed)) { return; } if ((jobInfo.getError()) != null) { jobInfo.setStatus(cmd.inspectJobError(jobInfo.getError().getCode())); if ((jobInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.done)) { jobInfo.setProgress(null); } } }<END_MOD>
<START_MOD>public org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus inspectJobError(org.ovirt.engine.core.common.errors.EngineError error) { return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; }<END_MOD>
<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc movePV(java.lang.String jobId, java.lang.String sdUUID, java.lang.String device);<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc movePV(java.lang.String jobId, java.lang.String sdUUID, java.lang.String device) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("StorageDomain.movePV").withParameter("jobID", jobId).withParameter("storagedomainID", sdUUID).withParameter("guid", device).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }<END_MOD>
<START_MOD>public void setValue(T value, boolean fireEvents, boolean fromClick) { if (changing) { return; } else if (value == null) { updateCurrentValue(null, fireEvents); } else { boolean found = false; for (T listItem : this.valueList) { if ((listItem == value) || ((listItem != null) && (listItem.equals(value)))) { updateCurrentValue(value, fireEvents); found = true; break; } } if (!found) { addValue(value); updateCurrentValue(value, fireEvents); } } }<END_MOD>
@java.lang.Override public void setValue(java.util.List<T> values, boolean fireEvents<START_MOD>, boolean fromClick) { if (((values != null) && ((lastValues) != null)) && (lastValues.equals(values))<END_MOD>) { return; } <START_MOD>if (fromClick) { T value = values.get(0); if (selectedList.contains(value)) { selectedList.remove(value); } else { if (value != null) { selectedList.add(value); } } } else { selectedList.clear(); <END_MOD>for (T value : values) { if (<START_MOD>value != null)<END_MOD> { selectedList.add(value); } } <START_MOD>} <END_MOD>listPanel.setSelected(selectedList); updateCurrentValue(selectedList, fireEvents); }
<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc reduceStorageDomain(java.lang.String jobId, java.lang.String sdUUID, java.lang.String device);<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc reduceStorageDomain(java.lang.String jobId, java.lang.String sdUUID, java.lang.String device) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("StorageDomain.reduce").withParameter("jobID", jobId).withParameter("storagedomainID", sdUUID).withParameter("guid", device).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeVdsBrokerCommand() { log.info("-- executeVdsBrokerCommand: calling 'reduceStorageDomain'"); status = org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getBroker().reduceStorageDomain(org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getParameters().getJobId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getParameters().getDeviceId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.proceedProxyReturnValue(); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return (org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getActionState()) == (org.ovirt.engine.core.bll.CommandActionState.EXECUTE) ? org.ovirt.engine.core.common.AuditLogType.USER_EDIT_DOMAIN_DEVICES_STARTED : org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_EDIT_DOMAIN_DEVICES_SUCCEEDED : org.ovirt.engine.core.common.AuditLogType.USER_EDIT_DOMAIN_DEVICES_FAILED; }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.setSucceeded(true); }<END_MOD>
<START_MOD>private void endOperation() { try { disconnectHostFromDomain(); } catch (java.lang.Exception e) { log.error("Failed to disconnect the host from the domain storage servers, ignoring", e); } endActionOnDevices(); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.setSucceeded(true); }<END_MOD>
<START_MOD>private void prepareForRemove() { java.util.List<java.lang.String> devices = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorage()).stream().map(LUNs::getId).filter(( x) -> !(getParameters().getDevicesToReduce().contains(x))).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().setDstDevices(devices); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.persistCommandIfNeeded(); }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.action.RemoveDeviceFromSANStorageDomainCommandParameters createRemoveParameters(java.lang.String deviceId) { org.ovirt.engine.core.common.action.RemoveDeviceFromSANStorageDomainCommandParameters p = new org.ovirt.engine.core.common.action.RemoveDeviceFromSANStorageDomainCommandParameters(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getStorageDomainId(), deviceId); p.setEndProcedure(EndProcedure.COMMAND_MANAGED); p.setVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getVdsId()); p.setParentCommand(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getActionType()); p.setParentParameters(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters()); p.setDestinationDevices(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDstDevices()); return p; }<END_MOD>
<START_MOD>private void disconnectHostFromDomain() { org.ovirt.engine.core.bll.storage.connection.StorageHelperDirector.getInstance().getItem(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorageType()).disconnectStorageFromDomainByVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getVdsId()); }<END_MOD>
<START_MOD>protected void endActionOnDevices() { for (org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getImagesParameters()) { org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getBackend().endAction(p.getCommandType(), p, org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getContext().clone().withoutCompensationContext().withoutExecutionContext().withoutLock()); } }<END_MOD>
<START_MOD>java.lang.String ACTION_TYPE_FAILED_STORAGE_DOMAIN_DEVICES_ARE_BEING_EDITED();<END_MOD>
<START_MOD>@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()) == 0) { prepareForRemove(); connectHostToDomain(); } if ((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()) < (org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().size())) { runInternalActionWithTasksContext(VdcActionType.RemoveDeviceFromSANStorageDomain, createRemoveParameters(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().get(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()))); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().setRemoveIndex(((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()) + 1)); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.persistCommandIfNeeded(); return true; } return false; }<END_MOD>
<START_MOD>@java.lang.Override protected boolean initializeVds() { if (super.initializeVds()) { org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().setVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getVds().getId()); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.persistCommandIfNeeded(); return true; } return false; }<END_MOD>
<START_MOD>private void connectHostToDomain() { if (!(org.ovirt.engine.core.bll.storage.connection.StorageHelperDirector.getInstance().getItem(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorageType()).connectStorageToDomainByVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getVdsId()))) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.StorageServerConnectionError); } }<END_MOD>
<START_MOD>private boolean validateReduceDeviceSupported() { if (((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStoragePool()) != null) && (!(org.ovirt.engine.core.common.FeatureSupported.reduceDeviceFromStorageDomain(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStoragePool().getCompatibilityVersion())))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_REDUCE_DOMAIN_DEVICE_NOT_SUPPORTED); } return true; }<END_MOD>
<START_MOD>@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { if ((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getStorageDomainId()) != null) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.STORAGE, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_DEVICES_ARE_BEING_EDITED)); } return super.getExclusiveLocks(); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult lunsInDomain(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain, java.util.Set<java.lang.String> luns) { luns.removeAll(lunDao.getAllForVolumeGroup(storageDomain.getStorage()).stream().map(LUNs::getId).collect(java.util.stream.Collectors.toSet())); if (luns.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.validator.storage.BlockStorageDomainValidator.VAR_LUN_IDS, luns, ","); replacements.add(java.lang.String.format("$storageDomainName %s", storageDomain.getName())); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DEVICE_NOT_IN_STORAGE_DOMAIN, replacements); }<END_MOD>
<START_MOD>private org.ovirt.engine.core.bll.ValidationResult validateDevices() { java.util.Set<java.lang.String> devices = org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().stream().collect(java.util.stream.Collectors.toSet()); if ((devices.size()) != (org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().size())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DUPLICATE_DEVICE); } return blockSDValidator.lunsInDomain(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain(), devices); }<END_MOD>
<START_MOD>@java.lang.Override protected boolean validate() { if (org.apache.commons.collections.CollectionUtils.isEmpty(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce())) { failValidation(EngineMessage.ACTION_TYPE_FAILED_PARAMETERS_INVALID); } if (!(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.checkStorageDomain())) { return false; } if (!(validateReduceDeviceSupported())) { return false; } if (!(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorageType().isBlockDomain())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); } if (!(validate(validateDevices()))) { return false; } if (!(checkStorageDomainStatus(StorageDomainStatus.Maintenance))) { return false; } if (!(initializeVds())) { return false; } return true; }<END_MOD>
@java.lang.Override protected void verify(org.ovirt.engine.api.model.AffinityGroup model, org.ovirt.engine.api.model.AffinityGroup transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getCluster().getId(), transform.getCluster().getId()); assertEquals(model.isPositive(), transform.isPositive()); assertEquals(model.isEnforcing(), transform.isEnforcing()); <START_MOD>assertNotNull(transform.getHostsRule()); assertEquals(model.getHostsRule().isEnabled(), transform.getHostsRule().isEnabled()); assertEquals(model.getHostsRule().isEnforcing(), transform.getHostsRule().isEnforcing()); assertEquals(model.getHostsRule().isPositive(), transform.getHostsRule().isPositive()); assertNotNull(transform.getVmsRule()); assertEquals(model.getVmsRule().isEnabled(), transform.getVmsRule().isEnabled()); assertEquals(model.getVmsRule().isEnforcing(), transform.getVmsRule().isEnforcing()); assertEquals(model.getVmsRule().isPositive(), transform.getVmsRule().isPositive()); <END_MOD>}
public org.ovirt.engine.core.common.businessentities.<START_MOD>LeaseInfo<END_MOD> <START_MOD>getLeaseInfo<END_MOD>() { return <START_MOD>leaseInfo<END_MOD>; }
public void <START_MOD>setLeaseInfo<END_MOD>(org.ovirt.engine.core.common.businessentities.<START_MOD>LeaseInfo<END_MOD> <START_MOD>leaseInfo<END_MOD>) { this.<START_MOD>leaseInfo<END_MOD> = <START_MOD>leaseInfo<END_MOD>; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Step.class, to = org.ovirt.engine.api.model.Step.class) public static org.ovirt.engine.api.model.Step map(org.ovirt.engine.api.model.Step step, org.ovirt.engine.core.common.job.Step entity) { org.ovirt.engine.core.common.job.Step target = (entity != null) ? entity : new org.ovirt.engine.core.common.job.Step(); target.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getId())); if (step.isSetParentStep()) { target.setParentStepId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getParentStep().getId())); } target.setJobId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getJob().getId())); if (step.isSetType()) { target.setStepType(org.ovirt.engine.api.restapi.types.StepMapper.map(step.getType())); } if (step.isSetDescription()) { target.setDescription(step.getDescription()); } if (step.isSetNumber()) { target.setStepNumber(step.getNumber()); } if (step.isSetStatus()) { target.setStatus(org.ovirt.engine.api.restapi.types.StepMapper.mapStepStatus(step.getStatus())); } target.<START_MOD>setProgress(step.getProgress()); target.<END_MOD>setStartTime((step.isSetStartTime() ? step.getStartTime().toGregorianCalendar().getTime() : new java.sql.Date(java.util.Calendar.getInstance().getTimeInMillis()))); target.setEndTime((step.isSetEndTime() ? step.getEndTime().toGregorianCalendar().getTime() : new java.sql.Date(java.util.Calendar.getInstance().getTimeInMillis()))); target.setExternal((step.isSetExternal() ? step.isExternal() : true)); return target; }
private boolean perform() { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setStartTime(new java.util.Date()); <START_MOD>allVmPassthroughNics = getAllVmPassthroughNics(); log.debug( migration with following passthrough nics: {} allVmPassthroughNics); <END_MOD>try { <START_MOD>org.ovirt.engine.core.bll.MigrateVmCommand.InvocationResult invocationResult = plugOrUnplugNics(allVmPassthroughNics, PlugAction.UNPLUG); <END_MOD>if (<START_MOD>!(invocationResult.success)) { invocationResult.producedErrorMessages.forEach(this::addValidationMessage); return false; } if (<END_MOD>(connectLunDisks(getDestinationVdsId())) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } } catch (org.ovirt.engine.core.common.errors.EngineException e) { } org.ovirt.engine.core.bll.MigrateVmCommand.runningFailed(); return false; }
<START_MOD>private void logPlugUnplug(org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.action.PlugAction plugAction) { switch (plugAction) { case PLUG : log.debug("Plugging nic id='{}'", nic.getId()); break; case UNPLUG : log.debug("Unplugging nic id='{}'", nic.getId()); break; default : throw new java.lang.RuntimeException("Unknown enum value"); } }<END_MOD>
<START_MOD>private org.ovirt.engine.core.bll.MigrateVmCommand.InvocationResult plugOrUnplugNic(org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.action.PlugAction plugAction) { org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters parameters = new org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters(nic, plugAction, false); parameters.setVmId(org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().getVmId()); logPlugUnplug(nic, plugAction); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalAction(VdcActionType.ActivateDeactivateVmNic, parameters); return new org.ovirt.engine.core.bll.MigrateVmCommand.InvocationResult(returnValue.getSucceeded(), returnValue.getValidationMessages()); }<END_MOD>
@java.lang.Override public void runningSucceded() { try { getDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); <START_MOD>plugOrUnplugNics(allVmPassthroughNics, PlugAction.PLUG); <END_MOD>} finally { super.runningSucceded(); } }
<START_MOD>public void setHostedEngineDeployed(boolean value) { this.hostedEngineDeployed = value; }<END_MOD>
<START_MOD>public void setHostedEngineDeployed(boolean value) { vdsDynamic.setHostedEngineDeployed(value); }<END_MOD>
<START_MOD>public boolean isHostedEngineDeployed() { return vdsDynamic.isHostedEngineDeployed(); }<END_MOD>
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName<START_MOD>, hostedEngineDeployed<END_MOD>); }
<START_MOD>public boolean isHostedEngineDeployed() { return hostedEngineDeployed; }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> getAllForCluster(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userId, boolean filtered) { return getCallsHandler().executeReadList("GetVnicProfileViewsByDataCenterId", org.ovirt.engine.core.dao.network.VnicProfileViewDaoImpl.VnicProfileViewRowMapper.INSTANCE, getCustomMapSqlParameterSource().addValue("id", id).addValue("user_id", userId).addValue("is_filtered", filtered)); }<END_MOD>
<START_MOD>org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String postZero, boolean discard, java.lang.String force);<END_MOD>
<START_MOD>org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn moveImage(java.lang.String spUUID, java.lang.String srcDomUUID, java.lang.String dstDomUUID, java.lang.String imgGUID, java.lang.String vmGUID, int op, java.lang.String postZero, boolean discard, java.lang.String force);<END_MOD>
<START_MOD>org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn copyImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String srcImgGUID, java.lang.String srcVolUUID, java.lang.String dstImgGUID, java.lang.String dstVolUUID, java.lang.String descr, java.lang.String dstSdUUID, int volType, int volFormat, int preallocate, java.lang.String postZero, boolean discard, java.lang.String force);<END_MOD>
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) {<START_MOD> boolean discardAfterDelete = getStorageDomainDao().get(guids.get(0)).isDiscardAfterDelete();<END_MOD> return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(4), isPostZero(), <START_MOD>discardAfterDelete, <END_MOD>false)); }
<START_MOD>protected boolean validateDiscardAfterDeleteLegal(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator) { if (org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().isDiscardAfterDelete()) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISCARD_AFTER_DELETE_SUPPORTED_ONLY_BY_BLOCK_DOMAINS); } return true; }<END_MOD>
<START_MOD>@java.lang.Override @java.lang.SuppressWarnings("unchecked") protected boolean validateDiscardAfterDeleteLegal(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetDeviceList, new org.ovirt.engine.core.common.vdscommands.GetDeviceListVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageType(), false, org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getParameters().getLunIds())).getReturnValue())); return validate(storageDomainValidator.isDiscardAfterDeleteLegalForNewBlockStorageDomain(luns)); }<END_MOD>
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) {<START_MOD> boolean discardAfterDelete = getStorageDomainDao().get(guids.get(0)).isDiscardAfterDelete();<END_MOD> return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), <START_MOD>discardAfterDelete, <END_MOD>false)); }
private boolean validateStoragePropertiesUpdate() { <START_MOD>org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); <END_MOD>if ((<START_MOD>(<END_MOD>!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate(<START_MOD>)))) || (!(validate(storageDomainValidator.isDiscardAfterDeleteLegalForExistingStorageDomain()<END_MOD>)))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove(<START_MOD>"discardAfterDelete"); props.remove(<END_MOD>"warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn( was an attempt to update the following fields although they are not allowed to be updated: {} org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
<START_MOD>private void mockStorageDomainValidator() { doReturn(storageDomainValidator).when(cmd).getStorageDomainValidator(); when(storageDomainValidator.isDiscardAfterDeleteLegalForExistingStorageDomain()).thenReturn(ValidationResult.VALID); }<END_MOD>
<START_MOD>org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteVolume(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String[] volUUID, java.lang.String postZero, boolean discard, java.lang.String force);<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn moveImage(java.lang.String spUUID, java.lang.String srcDomUUID, java.lang.String dstDomUUID, java.lang.String imgGUID, java.lang.String vmGUID, int op, java.lang.String postZero, boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.move").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", srcDomUUID).withParameter("dstSdUUID", dstDomUUID).withParameter("operation", op).withParameter("postZero", postZero).withParameter("discard", discard).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }<END_MOD>
<START_MOD>org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn mergeSnapshots(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String imgGUID, java.lang.String ancestorUUID, java.lang.String successorUUID, java.lang.String postZero, boolean discard);<END_MOD>
<START_MOD>private void updateDiscardAfterDelete() { if ((getAvailableStorageTypeItems().getSelectedItem()) != null) { boolean isBlockDomain = getAvailableStorageTypeItems().getSelectedItem().isBlockDomain(); getDiscardAfterDelete().setIsAvailable(isBlockDomain); if (isBlockDomain) { if (isNewStorage()) { getDiscardAfterDelete().setEntity(false); } else { getDiscardAfterDelete().setEntity(getStorage().isDiscardAfterDelete()); } } } }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn mergeSnapshots(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String imgGUID, java.lang.String ancestorUUID, java.lang.String successorUUID, java.lang.String postZero, boolean discard) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.mergeSnapshots").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("ancestor", ancestorUUID).withParameter("successor", successorUUID).withParameter("postZero", postZero).withParameter("discard", discard).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteVolume(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String[] volUUID, java.lang.String postZero, boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.deleteVolumes").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("volumeList", new java.util.ArrayList(java.util.Arrays.asList(volUUID))).withOptionalParameter("postZero", postZero).withOptionalParameter("discard", discard).withOptionalParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String postZero, boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.delete").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("postZero", postZero).withParameter("discard", discard).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn copyImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String srcImgGUID, java.lang.String srcVolUUID, java.lang.String dstImgGUID, java.lang.String dstVolUUID, java.lang.String descr, java.lang.String dstSdUUID, int volType, int volFormat, int preallocate, java.lang.String postZero, boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Volume.copy").withParameter("volumeID", srcVolUUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("imageID", srcImgGUID).withParameter("dstSdUUID", dstSdUUID).withParameter("dstImgUUID", dstImgGUID).withParameter("dstVolUUID", dstVolUUID).withParameter("desc", descr).withParameter("volType", volType).withParameter("volFormat", volFormat).withParameter("preallocate", preallocate).withParameter("postZero", postZero).withParameter("discard", discard).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.network.macpool.ReadOnlyMacPool getMacPoolForCluster(org.ovirt.engine.core.compat.Guid clusterId) { return getMacPoolById(getMacPoolId(clusterId)); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String toString() { return (((((((("SubchainInfo [" + "storageDomainId=") + (storageDomainId)) + ", imageGroupId=") + (imageGroupId)) + ", baseImageId=") + (baseImageId)) + ", topImageId=") + (topImageId)) + ']'; }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.ColdMergeIRSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.ColdMergeIRSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getJobId(), org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getParameters().getSubchainInfo()); runVdsCommand(VDSCommandType.PrepareMerge, parameters); }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.action.ColdMergeCommandParameters buildColdMergeParameters(org.ovirt.engine.core.compat.Guid topVolumeId, org.ovirt.engine.core.compat.Guid baseVolumeId) { org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo = new org.ovirt.engine.core.common.businessentities.SubchainInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), baseVolumeId, topVolumeId); org.ovirt.engine.core.common.action.ColdMergeCommandParameters parameters = new org.ovirt.engine.core.common.action.ColdMergeCommandParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStoragePoolId(), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters().getJobId(), subchainInfo); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(VdcActionType.ColdMergeSnapshotSingleDisk); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }<END_MOD>
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getCommandStep() { return org.ovirt.engine.core.common.job.StepEnum.PREPARE_MERGE; }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc prepareMerge(java.lang.String spUUID, java.lang.String jobUUID, java.util.Map<java.lang.String, java.lang.String> subchainInfo) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.prepare_merge").withParameter("storagepoolID", spUUID).withParameter("job_id", jobUUID).withParameter("subchain_info", subchainInfo).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc(response); }<END_MOD>
<START_MOD>org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc prepareMerge(java.lang.String spUUID, java.lang.String jobUUID, java.util.Map<java.lang.String, java.lang.String> subchainInfo);<END_MOD>
<START_MOD>@java.lang.Override protected void executeIrsBrokerCommand() { org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getIrsProxy().prepareMerge(org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getStorageJobId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getSubchainInfo().convertToVdsmMergeSnapshotsInfo()); }<END_MOD>
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("srcInfo", <START_MOD>getSrcInfo()<END_MOD>).append("dstInfo", <START_MOD>getDstInfo()<END_MOD>).append("collapse", collapse); }
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getCommandStep() { return org.ovirt.engine.core.common.job.StepEnum.COLD_MERGE; }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithFailover(VDSCommandType.ColdMerge, new org.ovirt.engine.core.common.vdscommands.ColdMergeVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStorageJobId(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSrcInfo(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getDstInfo()), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStoragePoolId(), this); org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.setSucceeded(true); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeVdsBrokerCommand() { log.info("-- executeVdsBrokerCommand: calling 'merge'"); status = org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getBroker().merge(org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getParameters().getJobId().toString(), org.ovirt.engine.core.common.utils.LocationInfoHelper.prepareLocationInfoForVdsCommand(org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getParameters().getSrcInfo()), org.ovirt.engine.core.common.utils.LocationInfoHelper.prepareLocationInfoForVdsCommand(org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getParameters().getDstInfo())); org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.proceedProxyReturnValue(); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc merge(java.lang.String jobId, java.util.Map topImage, java.util.Map baseImage) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.merge").withParameter("top", topImage).withParameter("base", baseImage).withParameter("job_id", jobId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.action.ColdMergeCommandParameters buildColdMergeParameters(org.ovirt.engine.core.compat.Guid srcImageGuid, org.ovirt.engine.core.compat.Guid destImageDuid) { org.ovirt.engine.core.common.action.ColdMergeCommandParameters parameters = new org.ovirt.engine.core.common.action.ColdMergeCommandParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getStoragePoolId(), new org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), srcImageGuid), new org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), destImageDuid)); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(VdcActionType.ColdMergeSnapshotSingleDisk); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }<END_MOD>
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getCommandStep() { return org.ovirt.engine.core.common.job.StepEnum.FINALIZE_MERGE; }<END_MOD>
<START_MOD>org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc finalizeMerge(java.lang.String spUUID, java.lang.String jobUUID, java.util.Map<java.lang.String, java.lang.String> subchainInfo);<END_MOD>
<START_MOD>@java.lang.Override protected void executeIrsBrokerCommand() { org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getIrsProxy().prepareMerge(org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getParameters().getStorageJobId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getParameters().getSubchainInfo().convertToVdsmMergeSnapshotsInfo()); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc finalizeMerge(java.lang.String spUUID, java.lang.String jobUUID, java.util.Map<java.lang.String, java.lang.String> subchainInfo) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.finalize_merge").withParameter("storagepoolID", spUUID).withParameter("job_id", jobUUID).withParameter("subchain_info", subchainInfo).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc(response); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.ColdMergeIRSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.ColdMergeIRSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.FinalizeMergeCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.FinalizeMergeCommand.getJobId(), org.ovirt.engine.core.bll.storage.disk.image.FinalizeMergeCommand.getParameters().getSubchainInfo()); runVdsCommand(VDSCommandType.FinalizeMerge, parameters); }<END_MOD>
private void updateHaMaintenanceAvailability(java.util.List items) { <START_MOD>getEnableGlobalHaMaintenanceCommand().setIsExecutionAllowed(false); getDisableGlobalHaMaintenanceCommand().setIsExecutionAllowed(false); <END_MOD>if ((items == null) || ((items.size()) != 1)) { return; } org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem(); if ((vm == null) || (!(vm.isHostedEngine()))) { <START_MOD>return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostById(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.businessentities.VDS>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.VDS vds) { boolean isMaintenance = vds.getHighlyAvailableGlobalMaintenance(); getEnableGlobalHaMaintenanceCommand().setIsExecutionAllowed((!isMaintenance)); getDisableGlobalHaMaintenanceCommand().setIsExecutionAllowed(isMaintenance); } }), vm.getRunOnVds()); }<END_MOD>
<START_MOD>@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getJobMessageProperties() { java.util.Map<java.lang.String, java.lang.String> props = super.getJobMessageProperties(); props.put(org.ovirt.engine.core.bll.storage.domain.STEP_DEVICE_TYPE, org.ovirt.engine.core.bll.storage.domain.RemoveDeviceFromSANStorageDomainCommand.getParameters().getDeviceId()); return props; }<END_MOD>
@org.junit.Test public void testFindExternalMacAddresses() { when(mockMacPool.isMacInRange(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_1)).thenReturn(java.lang.Boolean.TRUE); when(mockMacPool.isMacInRange(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_2)).thenReturn(java.lang.Boolean.FALSE); vm.setInterfaces(java.util.Arrays.asList(vNic1, vNic2)); final java.util.Set<java.lang.String> actual = underTest.findExternalMacAddresses(vm); assertThat(actual, contains(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_2)); }
private static boolean isDisplayTypeSupported(org.ovirt.engine.core.common.businessentities.DisplayType displayType, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.DisplayType>> graphicsAndDisplays) { <START_MOD>if (displayType == (org.ovirt.engine.core.common.businessentities.DisplayType.none)) { return true; } <END_MOD>for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.DisplayType> pair : graphicsAndDisplays) { if (displayType.equals(pair.getSecond())) { return true; } } return false; }
public void addVideoDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, int numberOfVideoDevices) { for (int i = 0; i < numberOfVideoDevices; i++<START_MOD>) { if ((vmBase.getDefaultDisplayType()) != (org.ovirt.engine.core.common.businessentities.DisplayType.none)<END_MOD>) { addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vmBase.getId()), VmDeviceGeneralType.VIDEO, vmBase.getDefaultDisplayType().getDefaultVmDeviceType(), getVideoDeviceSpecParams(vmBase), true, false); } }<START_MOD> }<END_MOD>
@java.lang.Override protected boolean validate() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.Permission p = permissionDao.get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getPermission().getId()); if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isLastSuperUserPermission(p.getRoleId())) { org.ovirt.engine.core.bll.RemovePermissionCommand.getReturnValue().getValidationMessages().add(EngineMessage.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString()); returnValue = false; } else if ((p.getRoleType().equals(RoleType.ADMIN)) && (!(org.ovirt.engine.core.bll.RemovePermissionCommand.isSystemSuperUser()))) { addValidationMessage(EngineMessage.PERMISSION_REMOVE_FAILED_ONLY_SYSTEM_SUPER_USER_CAN_REMOVE_ADMIN_ROLES); returnValue = false; } <START_MOD>else <END_MOD>if ((<START_MOD>java.util.Objects.equals(p.getObjectId(), MultiLevelAdministrationHandler.SYSTEM_OBJECT_ID)) && (java.util.Objects.equals(p.getAdElementId(), MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID))) { addValidationMessage(EngineMessage.SYSTEM_PERMISSIONS_CANT_BE_REMOVED_TO_EVERYONE); returnValue = false; } if ((<END_MOD>!(java.util.Objects.equals(p.getAdElementId(), org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId()))) && ((dbUserDao.get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId())) != null)) { addValidationMessage(EngineMessage.INHERITED_PERMISSION_CANT_BE_REMOVED); returnValue = false; } return returnValue; }
@org.junit.Test public void <START_MOD>testGetLunsThatBreakPassDiscardFunctionalityFullPassDiscardFunctionalityBreaks<END_MOD>() { createVmDiskOnSd(false, false); createVmDiskOnSd(true, true); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardSupport = createLunWithDiscardFunctionality(0L, false); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardZeroesTheDataSupport = createLunWithDiscardFunctionality(1024L, false); <START_MOD>assertGetLunsThatBreakPassDiscardFunctionalityContainsExpectedLuns<END_MOD>(java.util.Arrays.asList(createLunWithDiscardFunctionality(1024L, true), lunThatBreaksDiscardSupport, lunThatBreaksDiscardZeroesTheDataSupport), java.util.Arrays.asList(lunThatBreaksDiscardSupport, lunThatBreaksDiscardZeroesTheDataSupport)); }
@org.junit.Test public void <START_MOD>testGetLunsThatBreakPassDiscardFunctionalityPassDiscardFunctionalityDoesntBreak<END_MOD>() { createVmDiskOnSd(false, false); createVmDiskOnSd(true, true); <START_MOD>assertGetLunsThatBreakPassDiscardFunctionalityContainsExpectedLuns<END_MOD>(java.util.Arrays.asList(createLunWithDiscardFunctionality(1024L, true), createLunWithDiscardFunctionality(2048L, true)), java.util.Collections.emptyList()); }
private org.ovirt.engine.core.bll.ValidationResult hostStatusLegalForSetupNetworks() { <START_MOD>boolean hostStatusLegalForSetupNetworks<END_MOD> = <START_MOD>(org.ovirt.engine.core.bll.network.host.HostValidator.LEGAL_STATUSES<END_MOD>.contains(host.getStatus())) || (((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing)) && (internalExecution)); if (!hostStatusLegalForSetupNetworks) { <START_MOD>org.ovirt.engine.core.bll.network.host.HostValidator.logger.error(( to setup network: operation can only be done when Host status is one of: {}; +   current status is {} org.ovirt.engine.core.bll.network.host.HostValidator.LEGAL_STATUSES_STR, host.getStatus()); <END_MOD>return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL, org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.network.host.HostValidator.VAR_HOST_STATUS, <START_MOD>org.ovirt.engine.core.bll.network.host.HostValidator.LEGAL_STATUSES<END_MOD>, ",", <START_MOD>org.ovirt.engine.core.bll.network.host.HostValidator.LEGAL_STATUSES<END_MOD>.size())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public void <START_MOD>setOldClusterVersionOfSnapshotWithMemory<END_MOD>(<START_MOD>org.ovirt.engine.core.common.businessentities.VM<END_MOD> <START_MOD>vm<END_MOD>) { <START_MOD>if (!(isVMWithMemoryCompatible(vm))) { org.ovirt.engine.core.compat.Version originalClusterVersion<END_MOD> = <START_MOD>vm.getClusterCompatibilityVersionOrigin(); originalClusterVersion = (originalClusterVersion == null) ? org.ovirt.engine.core.compat.Version.v3_6 : originalClusterVersion; this.oldClusterVersionOfSnapshotWithMemory = originalClusterVersion<END_MOD>; }<START_MOD> else { this.oldClusterVersionOfSnapshotWithMemory = null; } }<END_MOD>
<START_MOD>@java.lang.Override protected void executeIrsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.RemoveVmLeaseVDSCommand.getIrsProxy().removeVmLease(org.ovirt.engine.core.vdsbroker.RemoveVmLeaseVDSCommand.getParameters().getLeaseId().toString(), org.ovirt.engine.core.vdsbroker.RemoveVmLeaseVDSCommand.getParameters().getStorageDomainId().toString()); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn removeVmLease(java.lang.String leaseUUID, java.lang.String sdUUID) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.delete").withParameter("lease_id", leaseUUID).withParameter("sd_id", sdUUID).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn addVmLease(java.lang.String leaseUUID, java.lang.String sdUUID) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.create").withParameter("lease_id", leaseUUID).withParameter("sd_id", sdUUID).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeIrsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.AddVmLeaseVDSCommand.getIrsProxy().addVmLease(org.ovirt.engine.core.vdsbroker.AddVmLeaseVDSCommand.getParameters().getLeaseId().toString(), org.ovirt.engine.core.vdsbroker.AddVmLeaseVDSCommand.getParameters().getStorageDomainId().toString()); }<END_MOD>
@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error( to add VM. The reasons are: {} java.lang.String.join(",", errorMessages)); return; } <START_MOD>if (!(addVmLeaseIfNeeded())) { return; } <END_MOD>org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } }
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> getVolumesSupportedAsStorageDomain() { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = getCallsHandler().executeReadList("GetGlusterVolumesSupportedAsStorageDomain", org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoImpl.volumeRowMapper, getCustomMapSqlParameterSource().addValue("replica_count", 3)); return volumes; }<END_MOD>
<START_MOD>@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.gluster.GetAllGlusterVolumesForStorageDomainQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.gluster.GetAllGlusterVolumesForStorageDomainQuery.getGlusterVolumeDao().getVolumesSupportedAsStorageDomain()); org.ovirt.engine.core.bll.gluster.GetAllGlusterVolumesForStorageDomainQuery.getQueryReturnValue().setSucceeded(true); }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult isMacAssignableValidator() { java.lang.Boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); boolean <START_MOD>illegalDuplicateMacUsage<END_MOD> = <START_MOD>(!allowDupMacs) && (<END_MOD>macPool.isMacInUse(macAddress)<START_MOD>)<END_MOD>; <START_MOD>org.ovirt.engine.core.common.errors.EngineMessage<END_MOD> <START_MOD>failMessage<END_MOD> = <START_MOD>org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE<END_MOD>; return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>failMessage, org<END_MOD>.<START_MOD>ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(failMessage, macAddress)<END_MOD>).when(illegalDuplicateMacUsage); }
private void getDefaultConfigurationVersion(final org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue != null) { _defaultConfigurationVersion = returnValue.getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); } }); callback.setHandleFailure(true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetDefaultConfigurationVersion, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), callback); }
<START_MOD>@java.lang.Override public boolean validate() { getGlusterVolumes().validateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(128) }); return (getGlusterVolumes().getIsValid()) && (super.validate()); }<END_MOD>
@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue != null) { _defaultConfigurationVersion = returnValue.getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); }
<START_MOD>@java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume) { return glusterVolume == null ? "" : glusterVolume.getName(); }<END_MOD>
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel object) { <START_MOD>final org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel glusterStorageModel = object; <END_MOD>driver.edit(object); <START_MOD>glusterVolumesEditor.setVisible(false); <END_MOD>pathExampleLabel.setVisible(((object.getPath().getIsAvailable()) && (object.getPath().getIsChangable()))); <START_MOD>glusterStorageModel.getLinkGlusterVolume().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (glusterStorageModel.getLinkGlusterVolume().getEntity()) { glusterVolumesEditor.setVisible(true); pathEditor.setVisible(false); } else { glusterVolumesEditor.setVisible(false); pathEditor.setVisible(true); } } }); }<END_MOD>
<START_MOD>void initEditors() { linkGlusterVolumeEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor(org.ovirt.engine.ui.common.widget.Align.RIGHT); glusterVolumesEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>() { @java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume) { return glusterVolume == null ? "" : glusterVolume.getName(); } }); }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostViolations = <START_MOD>getHostsViolations<END_MOD>(false, hosts, vm, new org.ovirt.engine.core.common.scheduling.PerHostMessages()); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> retList = new java.util.ArrayList<>(); int score; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { score = (hostViolations.containsKey(host.getId())) ? hostViolations.get(host.getId()) : org.ovirt.engine.core.bll.scheduling.policyunits.VmToHostAffinityWeightPolicyUnit.DEFAULT_SCORE; retList.add(new org.ovirt.engine.core.common.utils.Pair(host.getId(), score)); } return retList; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { <START_MOD>java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostViolations = getHostsViolations(true, hosts, vm, messages); <END_MOD>return hosts<START_MOD>.stream().filter(( host) -> !(hostViolations.containsKey(host.getId()))).collect(java.util.stream.Collectors.toList()<END_MOD>); }
public static void init() { org.ovirt.engine.core.bll.utils.VmDeviceUtils.osRepository = org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().get(org.ovirt.engine.core.common.osinfo.OsRepository.class); org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade = org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().get(org.ovirt.engine.core.dal.dbbroker.DbFacade.class); org.ovirt.engine.core.bll.utils.VmDeviceUtils.<START_MOD>vmDeviceDao<END_MOD> = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDeviceDao(); <START_MOD>org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmDao = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDao(); <END_MOD>}
<START_MOD>private static org.ovirt.engine.core.common.businessentities.UsbControllerModel getUsbControllerModel(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmDao.get(vmBase.getId()); return org.ovirt.engine.core.bll.utils.VmDeviceUtils.osRepository.getOsUsbControllerModel(vmBase.getOsId(), vm.getCompatibilityVersion()); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String render(org.ovirt.engine.core.common.businessentities.StorageDomain domain) { return domain != null ? domain.getName() : org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget.constants.emptyleaseStorageDomain(); }<END_MOD>
@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { deactivateInstanceTypeManager(new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.InstanceTypeManager.ActivatedListener() { @java.lang.Override public void activated() { getInstanceTypeManager().updateAll(); } }); updateDefaultHost(); updateCustomPropertySheet(); updateMinAllocatedMemory(); updateNumOfSockets(); if ((getModel().getTemplateWithVersion().getSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel().getTemplateWithVersion().getSelectedItem().getTemplateVersion(); updateQuotaByCluster(template.getQuotaId(), template.getQuotaName()); } updateCpuPinningVisibility(); updateTemplate(); updateOSValues(); updateMemoryBalloon(); updateCpuSharesAvailability(); updateVirtioScsiAvailability(); activateInstanceTypeManager(); <START_MOD>updateLeaseStorageDomains(); }<END_MOD>
<START_MOD>java.lang.String emptyleaseStorageDomain();<END_MOD>
public void buildVmLease() { java.util.Map<java.lang.String, java.lang.Object> device = new java.util.HashMap<>(); device.put(VdsProperties.Type, VdsProperties.VmLease); device.put(VdsProperties.Device, VdsProperties.VmLease); device.put(VdsProperties.DeviceId, org.ovirt.engine.core.compat.Guid.newGuid()); <START_MOD>device<END_MOD>.put(VdsProperties.VmLeaseSdId, vm.getLeaseStorageDomainId()); <START_MOD>device<END_MOD>.put(VdsProperties.VmLeaseId, vm.getId()); devices.add(device); }
private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if (((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) || (!(<START_MOD>((org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStoragePoolId()) != null) && (<END_MOD>validateDiscardAfterDeleteLegal(storageDomainValidator<START_MOD>)<END_MOD>)))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("discardAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn( was an attempt to update the following fields although they are not allowed to be updated: {} org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
private void generateStructReadOne(org.ovirt.api.metamodel.concepts.StructType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getInterfaceName(type); org.ovirt.api.metamodel.tool.JavaClassName containerName = javaTypes.getContainerName(type); javaBuffer.addImport(typeName); javaBuffer.addImport(containerName); javaBuffer.addImport(<START_MOD>javax.json.stream.<END_MOD>JsonParser.class); javaBuffer.addLine( static %1$s readOne(JsonReader reader) { typeName.getSimpleName()); javaBuffer.addLine( readOne(reader, false); javaBuffer.addLine("}"); javaBuffer.addLine(); java.util.List<org.ovirt.api.metamodel.concepts.StructMember> members = new java.util.ArrayList<>(); members.addAll(type.getAttributes()); members.addAll(type.getLinks()); javaBuffer.addLine( static %1$s readOne(JsonReader reader, boolean started) { typeName.getSimpleName()); javaBuffer.addLine( (!started) { javaBuffer.addLine(<START_MOD>"reader.expect(JsonParser.Event.START_OBJECT);"<END_MOD>); javaBuffer.addLine("}"); javaBuffer.addLine( object = new %1$s(); containerName.getSimpleName()); javaBuffer.addLine( (reader.next() == <START_MOD>JsonParser.<END_MOD>Event.KEY_NAME) { if (members.isEmpty()) { javaBuffer.addLine("reader.skip();"); } else { javaBuffer.addLine( name = reader.getString(); javaBuffer.addLine( (name) { members.stream().sorted().forEach(this::generateStructReadMember); javaBuffer.addLine("default:"); javaBuffer.addLine("reader.skip();"); javaBuffer.addLine("}"); } javaBuffer.addLine("}"); javaBuffer.addLine( object; javaBuffer.addLine("}"); javaBuffer.addLine(); }
protected void removeSnapshotsFromDB() {<START_MOD> snapshotsToRemove.addAll(findSnapshotsWithOnlyIllegalDisks());<END_MOD> for (org.ovirt.engine.core.compat.Guid snapshotId : snapshotsToRemove) { org.ovirt.engine.core.common.businessentities.Snapshot snap = snapshotDao.get(snapshotId); if (snap != null) { java.lang.String memoryVolume = snapshotDao.get(snapshotId).getMemoryVolume(); if ((!(memoryVolume.isEmpty())) && ((snapshotDao.getNumOfSnapshotsByMemory(memoryVolume)) == 1)) { boolean succeed = org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.removeMemoryDisks(memoryVolume); if (!succeed) { log.error( to remove memory '{}' of snapshot '{}' memoryVolume, snapshotId); } } snapshotDao.remove(snapshotId); } } }
<START_MOD>public static org.ovirt.engine.core.bll.ValidationResult snapshotVmConfigurationBroken(org.ovirt.engine.core.common.businessentities.Snapshot snapshot, java.lang.String vmName) { return !(snapshot.isVmConfigurationBroken()) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_SNAPSHOT_HAS_NO_CONFIGURATION, java.lang.String.format("$VmName %1$s", vmName), java.lang.String.format("$SnapshotName %1$s", snapshot.getDescription())); }<END_MOD>
<START_MOD>private java.util.Set<org.ovirt.engine.core.compat.Guid> findSnapshotsWithOnlyIllegalDisks() { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> newerSnapshots = getNewerSnapshots(snapshot); java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotsToRemove = new java.util.HashSet<>(); newerSnapshots.forEach(( snapshot) -> { org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); if (vm != null) { boolean shouldRemove = (!(vm.getImages().isEmpty())) && (vm.getImages().stream().allMatch(( diskImage) -> (diskImage.getImageStatus()) == ImageStatus.ILLEGAL)); if (shouldRemove) { snapshotsToRemove.add(snapshot.getId()); } } }); return snapshotsToRemove; }<END_MOD>
public boolean validate() {<START_MOD> if ((backingFile) == null) { getInvalidityReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.ImageInfoModel.constants.uploadImageFileNotExist()); return false; }<END_MOD> if (backingFile) { getInvalidityReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.ImageInfoModel.constants.uploadImageBackingFileUnsupported()); return false; } return true; }
<START_MOD>java.lang.String uploadImageFileNotExist();<END_MOD>
<START_MOD>private boolean isAttributes(com.thoughtworks.qdox.model.JavaMethod javaMethod) { return javaMethod.getName().equals("attributes"); }<END_MOD>
private void analyzeMethod(com.thoughtworks.qdox.model.JavaClass javaClass, org.ovirt.api.metamodel.concepts.Service service) { org.ovirt.api.metamodel.concepts.Method method = new org.ovirt.api.metamodel.concepts.Method(); analyzeName(javaClass, method); analyzeAnnotations(javaClass, method); analyzeDocumentation(javaClass, method); javaClass.getMethods().forEach(( x) -> analyzeMethodMember(x, method)); <START_MOD>com.thoughtworks.qdox.model.JavaMethod attributesMethod = javaClass.getMethod("attributes", null, false); if (attributesMethod != null) { org.ovirt.api.metamodel.analyzer.AttributesAnalyzer attributesAnalyzer = new org.ovirt.api.metamodel.analyzer.AttributesAnalyzer(); attributesAnalyzer.analyzeAttributes(attributesMethod.getSourceCode(), method.getParameters()); } <END_MOD>method.setDeclaringService(service); service.addMethod(method); }
<START_MOD>public java.util.List<org.ovirt.api.metamodel.concepts.Parameter.AttributeNode> getNodes() { return nodes; }<END_MOD>
<START_MOD>public org.ovirt.api.metamodel.concepts.Parameter.AttributeNode getNode(org.ovirt.api.metamodel.concepts.Name name) { for (org.ovirt.api.metamodel.concepts.Parameter.AttributeNode node : nodes) { if (node.getName().equals(name)) { return node; } } return null; }<END_MOD>
<START_MOD>public org.ovirt.api.metamodel.concepts.Parameter.AttributeNode getAttributes() { return attributes; }<END_MOD>
<START_MOD>@org.junit.Test public void testFindMappingEntryEmptyExternal() { final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingEntry(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFinderTest.NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFinderTest.VNIC_PROFILE1_NAME, java.util.Arrays.asList(emptySourceMapping)); assertFalse(actual.isPresent()); }<END_MOD>
<START_MOD>@org.junit.Test public void testFindMappingEntryEmptySourceVnicProfile() { final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingEntry(null, null, java.util.Arrays.asList(emptySourceMapping)); assertThat(actual.get(), sameInstance(emptySourceMapping)); }<END_MOD>
@java.lang.Override public <U extends T> javax.enterprise.inject.Instance<U> select(java.lang.Class<U> aClass, java.lang.annotation.Annotation... annotations) { return <START_MOD>createMockInstance<END_MOD>(aClass); }
private java.util.Set<org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.register.VnicProfileMappingEnity<END_MOD>> getNewVnicProfileMappings(org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<org.ovirt.engine.core.common.businessentities.VM> vmImportEntityData, java.util.Set<org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> clusterVnicProfileMappings) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> result = new java.util.HashSet<>(); for (org.ovirt.engine.<END_MOD>core.common.businessentities.network.<START_MOD>VmNetworkInterface vnic : vmImportEntityData.getEntity().getInterfaces()) { final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity(vnic.getNetworkName(), vnic.getVnicProfileName(), null); if (!(<END_MOD>clusterVnicProfileMappings<START_MOD>.contains(newMapping))<END_MOD>) { result<START_MOD>.add(<END_MOD>newMapping<START_MOD>); } } return<END_MOD> result; }
private void updateExternalVnicProfilesPerTargetCluster() { for (org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<org.ovirt.engine.core.common.businessentities.VM> vmImportEntityData : getEntities().getItems()) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = vmImportEntityData.getCluster().getSelectedItem(); final java.util.Set<org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.register.VnicProfileMappingEnity<END_MOD>> clusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { clusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { clusterVnicProfileMappings = new java.util.HashSet(); externalVnicProfilesPerTargetCluster.put(cluster, clusterVnicProfileMappings); } final java.util.Set<org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.register.VnicProfileMappingEnity<END_MOD>> vmVnicProfiles = getNewVnicProfileMappings(vmImportEntityData, clusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); } }
<START_MOD>@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingsModel model) { driver.edit(model); refreshMappingsTable(model.getMappingModelRows()); model.getMappingModelRows().getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { refreshMappingsTable(model.getMappingModelRows()); } }); cluster.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.register.VnicProfileMappingsView.constants.importVm_destCluster()); }<END_MOD>
<START_MOD>private void refreshMappingsTable(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingModel> mappingModelRows) { vnicProfileMappingsTable.asEditor().edit(mappingModelRows); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingsModel flush() { return driver.flush(); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.ListModel getValue(org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingModel object) { return object.getTargetVnicProfile(); }<END_MOD>
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> getTargetVnicProfile() { return targetVnicProfile; }<END_MOD>
<START_MOD>private java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> getExternalVnicProfileMappings(org.ovirt.engine.core.common.businessentities.Cluster cluster) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> vnicProfileMappingEnities = externalVnicProfilesPerTargetCluster.get(cluster); final java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> result = new java.util.ArrayList(vnicProfileMappingEnities.size()); for (org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity vnicProfileMappingEnity : vnicProfileMappingEnities) { result.add(new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity(vnicProfileMappingEnity)); } return result; }<END_MOD>
<START_MOD>private void createVnicProfileMappingsModel() { updateExternalVnicProfilesPerTargetCluster(); vnicProfileMappingsModel = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingsModel(this, externalVnicProfilesPerTargetCluster); vnicProfileMappingsModel.initialize(); }<END_MOD>
<START_MOD>private void selectTargetVnicProfileByPredicate(org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> predicate) { final org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile = org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(targetVnicProfile.getItems(), predicate, VnicProfileView.EMPTY); targetVnicProfile.setSelectedItem(vnicProfile); }<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { getEntity().setVnicProfileId(getTargetVnicProfileId()); }<END_MOD>
<START_MOD>private void selectInitialTargetVnicProfile() { final org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> predicate; if ((getEntity().getVnicProfileId()) == null) { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { return (java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getNetworkName())) && (java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getName())); } }; } else { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { return java.util.Objects.equals(getEntity().getVnicProfileId(), vnicProfile.getId()); } }; } selectTargetVnicProfileByPredicate(predicate); }<END_MOD>
private void selectInitialTargetVnicProfile() { final org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> predicate; if (getEntity().<START_MOD>isChanged()<END_MOD>) { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { return java.util.Objects.equals(getEntity().<START_MOD>getVnicProfileId<END_MOD>(), vnicProfile.<START_MOD>getId(<END_MOD>)); } }; } else { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { return <START_MOD>(<END_MOD>java.util.Objects.equals(getEntity().<START_MOD>getExternalNetworkName<END_MOD>(), vnicProfile.<START_MOD>getNetworkName())) && (java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getName()<END_MOD>)); } }; } selectTargetVnicProfileByPredicate(predicate); }
<START_MOD>private org.ovirt.engine.core.compat.Guid getTargetVnicProfileId() { final org.ovirt.engine.core.common.businessentities.network.VnicProfileView selectedVnicProfile = targetVnicProfile.getSelectedItem(); if ((selectedVnicProfile == null) || (selectedVnicProfile == (org.ovirt.engine.core.common.businessentities.network.VnicProfileView.EMPTY))) { return null; } else { return selectedVnicProfile.getId(); } }<END_MOD>
<START_MOD>private void onVnicProfileMap() { if ((getWindow()) != null) { return; } createVnicProfileMappingsModel(); setConfirmWindow(vnicProfileMappingsModel); }<END_MOD>
<START_MOD>@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (org.ovirt.engine.ui.uicommonweb.models.storage.RegisterVmModel.VNIC_PROFILE_MAPPING_COMMAND.equals(command.getName())) { onVnicProfileMap(); } }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.Model, ?> getModelPopup(org.ovirt.engine.ui.uicommonweb.models.storage.RegisterVmModel source, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand, org.ovirt.engine.ui.uicommonweb.models.Model windowModel) { if (lastExecutedCommand == (source.getVnicProfileMappingCommand())) { return vnicProfileMappingsPopupPresenterWidgetProvider.get(); } return super.getModelPopup(source, lastExecutedCommand, windowModel); }<END_MOD>
<START_MOD>@java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.network.VnicProfileView profile) { return profile == (org.ovirt.engine.core.common.businessentities.network.VnicProfileView.EMPTY) ? org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.register.VnicProfileMappingsView.messages.emptyProfile().asString() : org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.register.VnicProfileMappingsView.messages.profileAndNetworkSelected(profile.getName(), profile.getNetworkName()).asString(); }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData) { java.lang.String problem; if ((registerVmData.getError()) != null) { problem = registerVmData.getError(); } else { problem = registerVmData.getWarning(); } return problem == null ? null : com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(problem); }<END_MOD>
<START_MOD>private void postClustersInit() { validateAllMacs(); for (final org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData : getEntities().getItems()) { final org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs> validateMacsListener = new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { final java.lang.Boolean reassignMacs = registerVmData.getReassignMacs().getEntity(); if (reassignMacs) { clearVmMacsWarning(registerVmData); } else { validateVmMacs(java.util.Collections.singletonList(registerVmData)); } } }; registerVmData.getReassignMacs().getEntityChangedEvent().addListener(validateMacsListener); registerVmData.getCluster().getSelectedItemChangedEvent().addListener(validateMacsListener); } }<END_MOD>
<START_MOD>@java.lang.Override public void initialize() { getCluster().getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { postClustersInit(); } }); super.initialize(); vmsById = mapVmsById(getEntities().getItems()); }<END_MOD>
<START_MOD>private void setVmMacsWarning(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData vmData, java.lang.String message, java.lang.Boolean aTrue) { vmData.setWarning(message); vmData.getBadMacsExist().setEntity(aTrue); }<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { final java.lang.Boolean reassignMacs = registerVmData.getReassignMacs().getEntity(); if (reassignMacs) { clearVmMacsWarning(registerVmData); } else { validateVmMacs(java.util.Collections.singletonList(registerVmData)); } }<END_MOD>
private void updateExternalVnicProfilesPerTargetCluster() { for (org.ovirt.engine.ui.uicommonweb.models.vms.<START_MOD>register.RegisterVmData registerVmData : getEntities().getItems()) { final <END_MOD>org.ovirt.engine.core.common.businessentities.Cluster cluster = <START_MOD>registerVmData<END_MOD>.getCluster().getSelectedItem(); final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> clusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { clusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { clusterVnicProfileMappings = new java.util.HashSet(); externalVnicProfilesPerTargetCluster.put(cluster, clusterVnicProfileMappings); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> vmVnicProfiles = getNewVnicProfileMappings(<START_MOD>registerVmData<END_MOD>, clusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); } }
private java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> getNewVnicProfileMappings(org.ovirt.engine.ui.uicommonweb.models.vms.<START_MOD>register.RegisterVmData registerVmData, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> clusterVnicProfileMappings) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> result = new java.util.HashSet<>(); for (<END_MOD>org.ovirt.engine.core.common.businessentities.<START_MOD>network.VmNetworkInterface vnic : registerVmData.getEntity().getInterfaces()) { final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity(vnic.getNetworkName()<END_MOD>, <START_MOD>vnic.getVnicProfileName(), null); if (!(<END_MOD>clusterVnicProfileMappings<START_MOD>.contains(newMapping))<END_MOD>) { result<START_MOD>.add(<END_MOD>newMapping<START_MOD>); } } return<END_MOD> result; }
<START_MOD>private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData> mapVmsById(java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData> vms) { final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData> result = new java.util.HashMap<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData vm : vms) { result.put(vm.getVm().getId(), vm); } return result; }<END_MOD>
<START_MOD>public long setArik(long arik) { long result = this.arik; this.arik = arik; return result; }<END_MOD>
@javax.annotation.PostConstruct public void init() {<START_MOD> setArik(java.lang.System.nanoTime());<END_MOD> org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(vmId); if (vmStatic != null) { updateStaticFields(vmStatic); } }
void proceedDownVm() { <START_MOD>if (((java.lang.System.nanoTime()) - (getVmManager().getArik())) < 0) { clearVm(VmExitStatus.Normal, java.lang.String.format( %s shutdown complete getVmManager().getName()), VmExitReason.Success); return; } <END_MOD>destroyVm(); if (!(isVmRunningInDatabaseOnMonitoredHost())) { return; } logVmStatusTransition(); switch (dbVm.getStatus()) { case SavingState : resourceManager.internalSetVmStatus(dbVm, VMStatus.Suspended); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); resourceManager.removeAsyncRunningVm(dbVm.getId()); auditVmSuspended(); break; case MigratingFrom : switch (vdsmVm.getVmDynamic().getExitStatus()) { case Normal : handOverVm(); break; case Error : abortVmMigration(); if (getVmManager().isAutoStart()) { setAutoRunFlag(); break; } } break; default : auditVmOnDownEvent(); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); switch (vdsmVm.getVmDynamic().getExitStatus()) { case Error : if (resourceManager.isVmInAsyncRunningList(vdsmVm.getVmDynamic().getId())) { setRerunFlag(); break; } if (getVmManager().isAutoStart()) { setAutoRunFlag(); break; } break; case Normal : resourceManager.removeAsyncRunningVm(vdsmVm.getVmDynamic().getId()); if (getVmManager().isColdReboot()) { setColdRebootFlag(); } } } }
private void proceedDisappearedVm() { <START_MOD>if (((java.lang.System.nanoTime()) - (getVmManager().getArik())) < 0) {<END_MOD> clearVm(VmExitStatus.Normal, java.lang.String.format( %s shutdown complete getVmManager().getName()), VmExitReason.Success); <START_MOD>return; } switch (dbVm.getStatus()) { case MigratingFrom<END_MOD> : <START_MOD>handOverVm(); break; case PoweringDown : <END_MOD>clearVm(VmExitStatus.<START_MOD>Normal<END_MOD>, java.lang.String.format( %s <START_MOD>shutdown complete getVmManager().getName()), VmExitReason.Success); if (getVmManager().isColdReboot()) { setColdRebootFlag(); } break; default : clearVm(VmExitStatus.Error, java.lang.String.format( not find VM %s <END_MOD>on host, assuming it went down unexpectedly getVmManager().getName()), VmExitReason.GenericError); if (resourceManager.isVmInAsyncRunningList(dbVm.getId())) { setRerunFlag(); break; } if (getVmManager().isColdReboot()) { setColdRebootFlag(); break; } if (getVmManager().isAutoStart()) { setAutoRunFlag(); break; } } }
<START_MOD>public long getArik() { return arik; }<END_MOD>
private void initiateResumeUploadStartTransfer(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (((result.getReturnValue()) != null) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer rv = result.getReturnValue().getActionReturnValue(); setCommandId(rv.getId()); setBytesSent(rv.getBytesSent()); startStatusPolling(); model.stopProgress(); model.getCancelCommand().execute(); } else { <START_MOD>setErrorMessage<END_MOD>(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeMessage(result.getReturnValue().getDescription())); model.stopProgress(); } }
private void initiateResumeUploadCheckStatus(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (((result.getReturnValue()) != null) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer rv = result.getReturnValue().getActionReturnValue(); if ((rv.getBytesTotal()) != (getImageSize())) { if ((rv.getBytesTotal()) == 0) { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeUploadOriginatedInAPI()); } else { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeSizeMessage(rv.getBytesTotal(), getImageSize())); } model.stopProgress(); return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); updates.setPhase(ImageTransferPhase.RESUMING); final org.ovirt.engine.core.common.action.TransferImageStatusParameters parameters = new org.ovirt.engine.core.common.action.TransferImageStatusParameters(rv.getId()); parameters.setUpdates(updates); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TransferImageStatus, parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { initiateResumeUploadStartTransfer(result); } }, model); } else { <START_MOD>setErrorMessage<END_MOD>(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeMessage(result.getReturnValue().getDescription())); model.stopProgress(); } }
<START_MOD>private boolean hasBootProtocol(org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration) { return (hasIpv4BootProtocol(ipConfiguration)) || (hasIpv6BootProtocol(ipConfiguration)); }<END_MOD>
private org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>validator<END_MOD>.NetworkCluster getNetworkCluster() { if ((networkCluster) == null) { org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>validator<END_MOD>.NetworkClusterId networkClusterId = new org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>validator<END_MOD>.NetworkClusterId(host.getClusterId(), attachment.getNetworkId()); networkCluster = networkClusterDao.get(networkClusterId); } return networkCluster; }
<START_MOD>private boolean hasIpv6BootProtocol(org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration) { return (ipConfiguration.hasIpv6PrimaryAddressSet()) && ((ipConfiguration.getIpv6PrimaryAddress().getBootProtocol()) != (Ipv6BootProtocol.NONE)); }<END_MOD>
<START_MOD>private boolean validBootProtocolForRoleNetwork() { if (!(isRoleNetwork())) { return true; } org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration = attachment.getIpConfiguration(); if (ipConfiguration == null) { return false; } if (getNetworkCluster().isMigration()) { return hasBootProtocol(ipConfiguration); } return hasIpv4BootProtocol(ipConfiguration); }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult existingAttachmentIsReused(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.<START_MOD>bll.validator<END_MOD>.NetworkAttachment> existingAttachmentsByNetworkId) { org.ovirt.engine.core.<START_MOD>bll.validator<END_MOD>.NetworkAttachment existingAttachmentWithTheSameNetwork = existingAttachmentsByNetworkId.get(attachment.getNetworkId()); if (existingAttachmentWithTheSameNetwork == null) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ATTACHMENT_IS_NOT_REUSED, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_ATTACHMENT_ID, existingAttachmentWithTheSameNetwork.getId()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_NAME, existingAttachmentWithTheSameNetwork.getNetworkName())).unless(existingAttachmentWithTheSameNetwork.getId().equals(attachment.getId())); }
public org.ovirt.engine.core.bll.ValidationResult networkNotChanged(org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>validator<END_MOD>.NetworkAttachment oldAttachment) { org.ovirt.engine.core.compat.Guid oldAttachmentId = (oldAttachment == null) ? null : oldAttachment.getId(); boolean when = (oldAttachment != null) && (!(java.util.Objects.equals(oldAttachment.getNetworkId(), attachment.getNetworkId()))); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.CANNOT_CHANGE_ATTACHED_NETWORK, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_ATTACHMENT_ID, oldAttachmentId)).when(when); }
<START_MOD>private boolean hasIpv4BootProtocol(org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration) { return (ipConfiguration.hasIpv4PrimaryAddressSet()) && ((ipConfiguration.getIpv4PrimaryAddress().getBootProtocol()) != (Ipv4BootProtocol.NONE)); }<END_MOD>
protected org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>validator<END_MOD>.Network getNetwork() { if ((network) == null) { network = networkDao.get(attachment.getNetworkId()); } return network; }
public void onFailed() { updateEntityPhase(ImageTransferPhase.FINISHED_FAILURE); log.debug( ImageTransfer id {} org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); imageTransferDao.remove(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.endWithFailure(); log.error( to transfer<START_MOD> disk<END_MOD> {} (command id '{}') <START_MOD>getImageIdNullSafe<END_MOD>(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); }
public void onSucceeded() { updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); log.debug( ImageTransfer id {} org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); imageTransferDao.remove(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.endSuccessfully(); log.info( transferred<START_MOD> disk<END_MOD> {} (command id '{}') <START_MOD>getImageIdNullSafe<END_MOD>(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); }
@java.lang.Override public boolean runInThread(java.lang.Runnable runnable) { try { executorService.submit(runnable); return true; } catch (java.util.concurrent.RejectedExecutionException e) { <START_MOD>log.error(( rejected due to:   + (e.getMessage())), e); <END_MOD>return false; } }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return new org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCallback(); }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession getSession() { return geoRepDao.getById(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getGeoRepSessionId()); }<END_MOD>
<START_MOD>@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("syncData") public void syncData(java.lang.String storageDomainId, java.lang.String geoRepSessionId) { try { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = storageDomainDao.get(new org.ovirt.engine.core.compat.Guid(storageDomainId)); if (storageDomain == null) { org.ovirt.engine.core.bll.storage.dr.GlusterStorageDomainDRSyncJob.log.error("No storage domain found"); return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session = geoRepDao.getById(new org.ovirt.engine.core.compat.Guid(geoRepSessionId)); if (session == null) { org.ovirt.engine.core.bll.storage.dr.GlusterStorageDomainDRSyncJob.log.error("No geo-replication session found"); } backend.runInternalAction(VdcActionType.GlusterStorageSync, new org.ovirt.engine.core.common.action.GlusterStorageSyncCommandParameters(storageDomain.getId(), session.getId()), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.dr.GlusterStorageDomainDRSyncJob.log.error("Error running dr sync", e); } }<END_MOD>
<START_MOD>public void setSnapshotIdVmIds(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> snapshotIdVmIds) { this.snapshotIdVmIds = snapshotIdVmIds; }<END_MOD>
<START_MOD>public java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> getSnapshotIdVmIds() { return snapshotIdVmIds; }<END_MOD>
<START_MOD>private org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersSource(org.ovirt.engine.core.common.businessentities.StorageDomainDR storageDomainDR) { return getCustomMapSqlParameterSource().addValue("storage_domain_id", storageDomainDR.getStorageDomainId()).addValue("georep_session_id", storageDomainDR.getGeoRepSessionId()).addValue("sync_schedule", storageDomainDR.getSyncSchedule()).addValue("qrtz_job_id", storageDomainDR.getJobId()); }<END_MOD>
<START_MOD>@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule other = ((org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule) (obj)); return (((java.util.Objects.equals(frequency, other.frequency)) && (java.util.Objects.equals(days, other.days))) && (java.util.Objects.equals(hour, other.hour))) && (java.util.Objects.equals(mins, other.mins)); }<END_MOD>
<START_MOD>public java.lang.String getCronExpression() { java.lang.String cronExpression = ""; switch (frequency) { case DAILY : cronExpression = org.ovirt.engine.core.compat.StringFormat.format("0 %s %s * * ? *", mins, hour); break; case WEEKLY : cronExpression = org.ovirt.engine.core.compat.StringFormat.format("0 %s %s ? * %s *", mins, hour, getDaysCron()); case NONE : cronExpression = ""; } return cronExpression; }<END_MOD>
<START_MOD>public org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule get(java.lang.String cronExpression) { org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule schedule = new org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule(); if (((cronExpression == null) || (cronExpression.isEmpty())) || ((cronExpression.split(" ").length) != 7)) { schedule.setFrequency(org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.Frequency.NONE); return schedule; } java.lang.String[] cronParts = cronExpression.split(" "); if (cronParts[5].equals("?")) { schedule.setFrequency(org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.Frequency.DAILY); } else { schedule.setFrequency(org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.Frequency.WEEKLY); } schedule.setMins(java.lang.Integer.valueOf(cronParts[1])); schedule.setHour(java.lang.Integer.valueOf(cronParts[2])); return schedule; }<END_MOD>
<START_MOD>private java.lang.String getDaysCron() { java.lang.StringBuffer sb = new java.lang.StringBuffer(); for (org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.Day day : days) { sb.append(day.name()).append(","); } sb.deleteCharAt(sb.length()); return sb.toString(); }<END_MOD>
<START_MOD>private boolean doesNicHaveMacAddress(org.ovirt.engine.core.common.businessentities.network.VmNic vmNic) { return (vmNic.getMacAddress()) != null; }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult validateThereIsEnoughOfFreeMacs(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> vmNics, org.ovirt.engine.core.bll.network.macpool.MacPool macPool) { long requiredMacs = streamOfFilteredNics(vmNics, <START_MOD>false<END_MOD>).count(); boolean notEnoughOfMacs = (requiredMacs > 0) && ((macPool.getAvailableMacsCount()) < requiredMacs); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES).when(notEnoughOfMacs); }
public org.ovirt.engine.core.bll.ValidationResult validateMacAddress(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> vmNics) { for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : vmNics) { <START_MOD>java.lang.String str = iface.getMacAddress(); <END_MOD>if (<START_MOD>str != null<END_MOD>) { if (!(org.ovirt.engine.core.bll.validator.VmNicMacsUtils.VALIDATE_MAC_ADDRESS.matcher(iface.getMacAddress()).matches())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_NETWORK_INTERFACE_MAC_INVALID, java.lang.String.format( %1$s iface.getName()), java.lang.String.format( %1$s iface.getMacAddress())); } } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
<START_MOD>public void replaceInvalidEmptyStringMacAddressesWithNull(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmNetworkInterfaces) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmNetworkInterface : vmNetworkInterfaces) { java.lang.String macAddress = vmNetworkInterface.getMacAddress(); if ((macAddress != null) && (macAddress.isEmpty())) { vmNetworkInterface.setMacAddress(null); } } }<END_MOD>
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } macPool = getMacPool(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> domainsMap = new java.util.HashMap<>(); if (!(validateBeforeCloneVm(domainsMap))) { return false; } <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmNetworkInterfaces = org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getInterfaces(); vmNicMacsUtils.replaceInvalidEmptyStringMacAddressesWithNull(vmNetworkInterfaces); <END_MOD>if (org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().isImportAsNewEntity()) { initImportClonedVm(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getInterfaces().size()) > (macPool.getAvailableMacsCount())) { return failValidation(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateBallonDevice())) { return false; } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateSoundDevice())) { return false; } return validateAfterCloneVm(domainsMap); }
protected boolean initVdss() { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); java.util.Optional<org.ovirt.engine.core.compat.Guid> vdsToRunOn = getVdsToRunOn(); setDestinationVdsId(vdsToRunOn.orElse(null)); if (vdsToRunOn.isPresent()) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn.get()); } vmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); if (!(vdsToRunOn.isPresent())) { return false; } if (<START_MOD>org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds().equals(vdsToRunOn.get())) { return false; } if (<END_MOD>((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } return true; }
private java.util.List<org.ovirt.engine.core.compat.Guid> getVdsBlackList() { java.util.List<org.ovirt.engine.core.compat.Guid> blackList = new java.util.ArrayList(org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList()); if ((<START_MOD>(<END_MOD>org.ovirt.engine.core.bll.MigrateVmCommand.getVdsId()) != null<START_MOD>) && (!(org.ovirt.engine.core.bll.MigrateVmCommand.isInternalExecution()))<END_MOD>) { blackList.add(org.ovirt.engine.core.bll.MigrateVmCommand.getVdsId()); } return blackList; }
@java.lang.Override protected void processIncoming() throws java.io.IOException, org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if ((this.ibuff) == null) { int read = read(headerBuffer); if (read <= 0) { return; } updateLastIncomingHeartbeat(); this.message = getMessage(headerBuffer, <START_MOD>headerBuffer.position()<END_MOD>); if ((this.message) == null) { <START_MOD>this.ibuff = null; this.message = null<END_MOD>; return; } int contentLength = this.message.getContentLength(); if (contentLength == (-1)) { java.lang.String[] messages = new java.lang.String(headerBuffer.array(), UTF8).split(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.END_OF_MESSAGE); for (java.lang.String message : messages) { message = message + (END_OF_MESSAGE); emitOnMessageReceived(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.parse(message.getBytes(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.UTF8))); } return; } int length = this.message.getContent().length; if (contentLength == (length - 1)) { emitOnMessageReceived(this.message); return; } else if (contentLength > length) { this.ibuff = java.nio.ByteBuffer.allocate(((contentLength - length) + 1)); } else { byte[] content = this.message.getContent(); this.message.withContent(java.util.Arrays.copyOfRange(content, 0, (contentLength + 1))); emitOnMessageReceived(this.message); headerBuffer.put(java.util.Arrays.copyOfRange(content, (contentLength + 1), content.length)); return; } } read(this.ibuff); updateLastIncomingHeartbeat(); int length = (this.message.getContent().length) + (this.ibuff.position()); if ((this.message.getContentLength()) != (length - 1)) { return; } this.message.withAdditionalContent(this.ibuff.array()); emitOnMessageReceived(this.message); }
private void translateVolumeType(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity) { org.ovirt.engine.ui.uicompat.EnumTranslator translator = org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance(); if (translator.containsKey(volumeEntity.getVolumeType())) { <START_MOD>java<END_MOD>.<START_MOD>lang.String volumeType = <END_MOD>translator.translate(volumeEntity.getVolumeType())<START_MOD>; if (volumeEntity.getIsArbiter()) { volumeType +=     + (org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().arbiter()); } getDetailModel().setVolumeTypeSilently(volumeType<END_MOD>); } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { <START_MOD>java.lang.String qualifiedName =<END_MOD> brick.getQualifiedName(); <START_MOD>if (brick.getIsArbiter()) { qualifiedName +=     + (org.ovirt.engine.ui.webadmin.section.main.view.tab.gluster.SubTabVolumeBrickView.constants.arbiter()); <END_MOD>}<START_MOD> return qualifiedName; }<END_MOD>
@java.lang.Override public void setVmsWithvNumaNodeList(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsWithvNumaNodeList) { super.setVmsWithvNumaNodeList(vmsWithvNumaNodeList); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(vm.getId())) { <START_MOD>org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (parentModel)); if ((model.getVmNumaNodes()) != null) { this.getVm().setvNumaNodeList(model.getVmNumaNodes()); } <END_MOD>vmsWithvNumaNodeList.add(vm); } else { for (org.ovirt.engine.core.common.businessentities.VM vmFromDb : vmsWithvNumaNodeList) { if (vmFromDb.getId().equals(vm.getId())) { vmFromDb.setvNumaNodeList(vm.getvNumaNodeList()); break; } } } }
public org.ovirt.vdsm.jsonrpc.client.ResponseBuilder run(org.codehaus.jackson.JsonNode params, org.ovirt.vdsm.jsonrpc.client.ResponseBuilder builder) { java.lang.Object result = null; try { java.util.Map apiResult = activateApi(params); if ((fieldName()) != null) { result = apiResult.get(fieldName()); } else { result = apiResult; } } catch (java.lang.Exception e) { org.ovirt.vdsmfake.rpc.json.commands.JsonCommand.log.error( run api call e); java.util.Map<java.lang.String, java.lang.Object><START_MOD> error = new java.util.HashMap<>(); error.put("code", 100); error.put("message", e.getMessage()); return builder.withError(error<END_MOD>); } if (result instanceof java.util.Map) { builder = builder.withResult(((java.util.Map) (result))); } else if (result instanceof java.util.List) { builder = builder.withResult(((java.util.List) (result))); } else if (result instanceof java.lang.String) { builder = builder.withResult(((java.lang.String) (result))); } else if ((result != null) && (result.getClass().isArray())) { java.util.List tempList = new java.util.ArrayList(); java.util.Collections.addAll(tempList, ((java.lang.Object[]) (result))); builder = builder.withResult(tempList); } else { org.ovirt.vdsmfake.rpc.json.commands.JsonCommand.log.error(( response data -->   + result), new java.lang.Exception()); } return builder; }
<START_MOD>@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageDiskListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDiskListModel) (result.getState())); localModel.stopProgress(); cancel(); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.domain.GetStorageDomainDRQuery.getQueryReturnValue().setReturnValue(storageDomainDRDao.get(org.ovirt.engine.core.bll.storage.domain.GetStorageDomainDRQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.domain.GetStorageDomainDRQuery.getParameters().getId())); }<END_MOD>
private void setDetailList(final org.ovirt.engine.ui.uicommonweb.models.storage.StorageEventListModel storageEventListModel, final org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.StorageDomain> permissionListModel) { generalModel.setIsAvailable(false); dcListModel.setIsAvailable(false); this.vmBackupModel.setIsAvailable(false); this.templateBackupModel.setIsAvailable(false); vmRegisterListModel.setIsAvailable(false); templateRegisterListModel.setIsAvailable(false); diskImageRegisterListModel.setIsAvailable(false); vmListModel.setIsAvailable(false); templateListModel.setIsAvailable(false); isoListModel.setIsAvailable(false); diskListModel.setIsAvailable(false); registerDiskListModel.setIsAvailable(false); snapshotListModel.setIsAvailable(false); this.diskProfileListModel<START_MOD>.setIsAvailable(false); this.storageDRModel<END_MOD>.setIsAvailable(false); java.util.List<org.ovirt.engine.ui.uicommonweb.models.HasEntity<org.ovirt.engine.core.common.businessentities.StorageDomain>> list = new java.util.ArrayList<>(); list.add(generalModel); list.add(dcListModel); list.add(vmBackupModel); list.add(templateBackupModel); list.add(vmRegisterListModel); list.add(templateRegisterListModel); list.add(diskImageRegisterListModel); list.add(vmListModel); list.add(templateListModel); list.add(isoListModel); list.add(diskListModel); list.add(registerDiskListModel); list.add(snapshotListModel); list.add(this.diskProfileListModel); list.add(<START_MOD>this.storageDRModel); list.add(<END_MOD>storageEventListModel); list.add(permissionListModel); setDetailModels(list); }
<START_MOD>@java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel, ?> getConfirmModelPopup(org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel source, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand) { if (lastExecutedCommand == (getModel().getRemoveCommand())) { return removeConfirmPopupProvider.get(); } else { return super.getConfirmModelPopup(source, lastExecutedCommand); } }<END_MOD>
<START_MOD>private void onRemove() { org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel) (getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> paramerterList = new java.util.ArrayList<>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (item)); org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters(disk.getId(), getEntity().getId()); paramerterList.add(parameters); } model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.RemoveDisk, paramerterList, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageDiskListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDiskListModel) (result.getState())); localModel.stopProgress(); cancel(); } }, this); }<END_MOD>
<START_MOD>private void updateActionAvailability() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomainDR> domainDRs = ((getSelectedItems()) != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.StorageDomainDR>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomainDR>(); getRemoveCommand().setIsExecutionAllowed(((domainDRs.size()) > 0)); }<END_MOD>
<START_MOD>private void remove() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeDisksTitle()); model.setHelpTag(HelpTag.remove_disk); model.setHashName("remove_disk"); model.getLatch().setIsAvailable(false); java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> items = new java.util.ArrayList<>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (item)); org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = new org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel(); diskModel.setDisk(disk); items.add(diskModel); } model.setItems(items); org.ovirt.engine.ui.uicommonweb.UICommand onRemoveCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnRemove", this); model.getCommands().add(onRemoveCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.getCommands().add(cancelCommand); }<END_MOD>
<START_MOD>@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { return; } super.syncSearch(); org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(getEntity().getId()); parameters.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainDR, parameters, new org.ovirt.engine.ui.uicommonweb.models.storage.SetItemsAsyncQuery()); }<END_MOD>
private void <START_MOD>onSave<END_MOD>() { final org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRModel) (getWindow())); if (!(model.validate())) { return; } org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getEntity(); final org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule syncSchedule = new org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule(); syncSchedule.setFrequency(model.getFrequency().getSelectedItem()); syncSchedule.setHour(model.getHour().getEntity()); syncSchedule.setMins(model.getMins().getEntity()); org.ovirt.engine.core.compat.Guid georepId = ((model.getGeoRepSession().getSelectedItem()) != null) ? model.getGeoRepSession().getSelectedItem().getId() : null; org.ovirt.engine.core.common.action.StorageSyncScheduleParameters parameter = new org.ovirt.engine.core.common.action.StorageSyncScheduleParameters(syncSchedule, storageDomain.getId(), georepId); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.ScheduleGlusterStorageSync, parameter, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel) (result.getState())); model.stopProgress(); localModel.postSaveAction(result.getReturnValue()); } }, this); }
<START_MOD>@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> geoRepSessions) { model.getGeoRepSession().setItems(geoRepSessions); model.getGeoRepSession().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(geoRepSessions, new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate<>(selectedDR.getGeoRepSessionId()))); }<END_MOD>
<START_MOD>public boolean isQualifyForOnDemandCheckUpdates() { return (((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonOperational))) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance)); }<END_MOD>
<START_MOD>@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("availableUpdates") public void availableUpdates() { for (org.ovirt.engine.core.common.businessentities.VDS host : hostDao.getAll()) { if (!(host.getStatus().isQualifyForCheckUpdates())) { org.ovirt.engine.core.bll.hostdeploy.HostUpdatesCheckerService.log.warn("Check for available updates is skipped for host '{}' due to unsupported host status '{}' ", host.getName(), host.getStatus()); continue; } org.ovirt.engine.core.bll.hostdeploy.HostUpdatesCheckerService.executor.submit(() -> hostUpdatesChecker.checkForUpdates(host)); } }<END_MOD>
<START_MOD>public boolean isQualifyForCheckUpdates() { return ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonOperational)); }<END_MOD>
<START_MOD>public<END_MOD> void setVdsName(final java.lang.String value) { vdsName = value; }
protected void executeSPMMergeCommand(org.ovirt.engine.core.common.vdscommands.VDSCommandType vdsCommandType) { org.ovirt.engine.core.<START_MOD>bll.storage.disk.image.MergeSPMBaseCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getSubchainInfo().getBaseImageId())); org.ovirt.engine.core.<END_MOD>common.vdscommands.SPMColdMergeVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SPMColdMergeVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getSubchainInfo()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(vdsCommandType, parameters); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getParentCommand()); org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.setSucceeded(true); } }
private <START_MOD>void<END_MOD> mockSnapshotValidator() { when(snapshotsValidator.vmNotDuringSnapshot(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(ValidationResult.VALID); when(snapshotsValidator.vmNotInPreview(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(ValidationResult.VALID); }
@org.junit.Before public void initializeMocks() { doNothing().when(command).updateDisksFromDb(); doReturn(true).when(command).checkImageConfiguration(); doReturn(<START_MOD>false).when(command).isVirtioScsiControllerAttached(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(false).when(command).hasWatchdog(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(false).when(command).isBalloonEnabled(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(false).when(command).isSoundDeviceEnabled(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(true).when(command).setAndValidateDiskProfiles(); doReturn(new java.util.ArrayList()).when(diskVmElementDao).getAllForVm(org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.vmId); doReturn(true).when(command).validateQuota(); <END_MOD>mockSnapshotValidator(); doAnswer(( invocation) -> (invocation.getArguments()[0]) != null ? invocation.getArguments()[0] : org.ovirt.engine.core.compat.Guid.newGuid()).when(quotaManager).getDefaultQuotaIfNull(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class)); doReturn(ValidationResult.VALID).when(diskVmElementValidator).isPassDiscardSupported(any(org.ovirt.engine.core.compat.Guid.class)); org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); injectorRule.bind(org.ovirt.engine.core.bll.utils.VmDeviceUtils.class, vmDeviceUtils); }
private void tagListModel_SelectedItemsChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs e) { boolean hadSelectedTags = getHasSelectedTags(); updateHasSelectedTags(); if (getHasSelectedTags()) { setAllListModelsUnavailable(); getHostList().setIsAvailable(true); getVmList().setIsAvailable(true); getUserList().setIsAvailable(true); } else { updateAvailability(SystemTreeItemType.System, null<START_MOD>); getHostList().setSearchString("Host:"); getVmList().setSearchString("Vms:"); getUserList().setSearchString("Users:"<END_MOD>); } org.ovirt.engine.ui.uicommonweb.models.ListModel oldSelectedItem = getSelectedItem(); if (((((getHasSelectedTags()) && (oldSelectedItem != (getHostList()))) && (oldSelectedItem != (getVolumeList()))) && (oldSelectedItem != (getVmList()))) && (oldSelectedItem != (getUserList()))) { setSelectedItem(getVmList()); } else if ((getHasSelectedTags()) || hadSelectedTags) { java.lang.String prefix = ""; java.lang.String search = ""; org.ovirt.engine.core.compat.RefObject<java.lang.String> tempRef_prefix = new org.ovirt.engine.core.compat.RefObject(prefix); org.ovirt.engine.core.compat.RefObject<java.lang.String> tempRef_search = new org.ovirt.engine.core.compat.RefObject(search); splitSearchString(getSelectedItem().getDefaultSearchString(), tempRef_prefix, tempRef_search); prefix = tempRef_prefix.argvalue; search = tempRef_search.argvalue; setSearchStringPrefix(prefix); setSearchString(search); getSearchCommand().execute(); searchStringChanged(); } }
private void setAllListModelsUnavailable() { for (org.ovirt.engine.ui.uicommonweb.models.ListModel m : getItems()) { <START_MOD>if (!(m instanceof org.ovirt.engine.ui.uicommonweb.models.plugin.PluginModel)) { <END_MOD>m.setIsAvailable(false); } }<START_MOD> }<END_MOD>
<START_MOD>private org.ovirt.engine.ui.uicommonweb.models.tags.TagModel findRootNode(org.ovirt.engine.ui.uicommonweb.models.tags.TagModel tagModel) { if ((tagModel.getParent()) != null) { return findRootNode(tagModel.getParent()); } return tagModel; }<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("SelectedItems".equals(args.propertyName)) { if ((getSelectionModel().getSelectedObject()) != null) { org.ovirt.engine.ui.webadmin.uicommon.model.TagActivatedEvent.fire(this, findRootNode(getSelectionModel().getSelectedObject())); } } }<END_MOD>
<START_MOD>public static org.ovirt.engine.ui.webadmin.plugin.entity.TagObject from(org.ovirt.engine.ui.uicommonweb.models.tags.TagModel model) { if (model != null) { org.ovirt.engine.ui.webadmin.plugin.entity.TagObject result = com.google.gwt.core.client.JavaScriptObject.createObject().cast(); com.google.gwt.core.client.JsArray<org.ovirt.engine.ui.webadmin.plugin.entity.TagObject> children = com.google.gwt.core.client.JavaScriptObject.createArray().cast(); result.setValueAsString("description", model.getDescription().getEntity()); result.setValueAsString("name", model.getName().getEntity()); result.setValueAsBoolean("selected", model.getSelection()); if ((model.getParent()) == null) { result.setValueAsDouble("selectedTagCount", org.ovirt.engine.ui.webadmin.plugin.entity.TagObject.calculateSelectedTagCount(model)); } for (org.ovirt.engine.ui.uicommonweb.models.tags.TagModel child : model.getChildren()) { children.push(org.ovirt.engine.ui.webadmin.plugin.entity.TagObject.from(child)); } result.setValueAsJavaScriptObject("children", children); return result; } else { return null; } }<END_MOD>
<START_MOD>private static java.lang.Double calculateSelectedTagCount(org.ovirt.engine.ui.uicommonweb.models.tags.TagModel model) { double result = 0; for (org.ovirt.engine.ui.uicommonweb.models.tags.TagModel child : model.getChildren()) { result += org.ovirt.engine.ui.webadmin.plugin.entity.TagObject.calculateSelectedTagCount(child); } if (model.getSelection()) { result++; } return result; }<END_MOD>
<START_MOD>@java.lang.Override public void onTagActivated(org.ovirt.engine.ui.webadmin.uicommon.model.TagActivatedEvent event) { manager.invokePluginsNow("TagActivated", org.ovirt.engine.ui.webadmin.plugin.jsni.JsArrayHelper.createMixedArray(org.ovirt.engine.ui.webadmin.plugin.entity.TagObject.from(event.getRoot()))); }<END_MOD>
<START_MOD>public void setTasksMonitored(boolean tasksMonitored) { isTasksMonitored = tasksMonitored; }<END_MOD>
<START_MOD>public boolean isTasksMonitored() { return isTasksMonitored; }<END_MOD>
<START_MOD>public void setMonitored(boolean monitored) { isMonitored = monitored; }<END_MOD>
<START_MOD>public void setJobRequired(boolean jobRequired) { isJobRequired = jobRequired; }<END_MOD>
<START_MOD>public void setCompleted(boolean completed) { isCompleted = completed; }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.utils.PersistedCommandContext buildPersistedCommandContext() { org.ovirt.engine.core.common.utils.PersistedCommandContext persistedCommandContext = new org.ovirt.engine.core.common.utils.PersistedCommandContext(); persistedCommandContext.setJobId((((getExecutionContext()) == null) || ((getExecutionContext().getJob()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getJob().getId())); persistedCommandContext.setStepId((((getExecutionContext()) == null) || ((getExecutionContext().getStep()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getStep().getId())); persistedCommandContext.setExecutionMethod(((getExecutionContext()) == null ? ExecutionContext.ExecutionMethod.AsStep.toString() : getExecutionContext().getExecutionMethod().toString())); if ((getExecutionContext()) != null) { persistedCommandContext.setCompleted(getExecutionContext().isCompleted()); persistedCommandContext.setJobRequired(getExecutionContext().isJobRequired()); persistedCommandContext.setMonitored(getExecutionContext().isMonitored()); persistedCommandContext.setShouldEndJob(getExecutionContext().shouldEndJob()); persistedCommandContext.setTasksMonitored(getExecutionContext().isTasksMonitored()); } return persistedCommandContext; }<END_MOD>
private org.ovirt.engine.core.bll.context.CommandContext buildCommandContext(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); <START_MOD>org.ovirt.engine.core.common.utils.PersistedCommandContext persistedCommandContext = cmdEntity.getCommandContext(); <END_MOD>if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(<START_MOD>persistedCommandContext<END_MOD>.getJobId()))) { executionContext.setJob(jobRepository.getJobWithSteps(<START_MOD>persistedCommandContext<END_MOD>.getJobId())); } else if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(<START_MOD>persistedCommandContext<END_MOD>.getStepId()))) { executionContext.setStep(jobRepository.getStep(<START_MOD>persistedCommandContext<END_MOD>.getStepId())); } <START_MOD>if (org.apache.commons.lang.StringUtils.isNotEmpty(persistedCommandContext.getExecutionMethod())) { executionContext.setExecutionMethod(ExecutionContext.ExecutionMethod.valueOf(persistedCommandContext.getExecutionMethod())); } executionContext.setCompleted(persistedCommandContext.isCompleted()); executionContext.setJobRequired(persistedCommandContext.isJobRequired()); executionContext.setMonitored(persistedCommandContext.isMonitored()); executionContext.setShouldEndJob(persistedCommandContext.shouldEndJob()); executionContext.setTasksMonitored(persistedCommandContext.isTasksMonitored()); <END_MOD>return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext); }
public static org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid userId, long engineSessionSeqId, org.ovirt.engine.core.compat.Guid commandId, org.ovirt.engine.core.compat.Guid parentCommandId, org.ovirt.engine.core.compat.Guid rootCommandId, org.ovirt.engine.core.<START_MOD>common.utils.PersistedCommandContext commandContext<END_MOD>, org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase params, org.ovirt.engine.core.compat.CommandStatus status, boolean callbackEnabled, org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue, java.util.Map<java.lang.String, java.io.Serializable> data) { org.ovirt.engine.core.common.businessentities.CommandEntity entity = new org.ovirt.engine.core.common.businessentities.CommandEntity(); entity.setEngineSessionSeqId(engineSessionSeqId); entity.setUserId(userId); entity.setId(commandId); entity.setParentCommandId(parentCommandId); entity.setRootCommandId(rootCommandId); entity.<START_MOD>setCommandContext(commandContext<END_MOD>); entity.setCommandType(actionType); entity.setCommandParameters(params); entity.setCommandStatus(status); entity.setCallbackEnabled(callbackEnabled); entity.setReturnValue(returnValue); entity.setData(data); return entity; }
<START_MOD>public boolean isCompleted() { return isCompleted; }<END_MOD>
<START_MOD>public java.lang.String getExecutionMethod() { return executionMethod; }<END_MOD>
<START_MOD>public void setExecutionMethod(java.lang.String executionMethod) { this.executionMethod = executionMethod; }<END_MOD>
<START_MOD>public boolean isJobRequired() { return isJobRequired; }<END_MOD>
<START_MOD>public boolean isMonitored() { return isMonitored; }<END_MOD>
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.AuditLog event) { <START_MOD>java.util.Map<java.lang.String, java.lang.Object> returnVal = null; <END_MOD>if (event.isExternal()) {<START_MOD> returnVal =<END_MOD> getCallsHandler().executeModification("InsertExternalAuditLog", getExternalEventSqlMapper(event)); } else { <START_MOD>returnVal = <END_MOD>getCallsHandler().executeModification("InsertAuditLog", getSqlMapper(event)); } <START_MOD>event.setAuditLogId(((java.lang.Integer) (returnVal.get("audit_log_id")))); <END_MOD>}
private static java.lang.String getMessageToLog(java.lang.String loggerString, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { <START_MOD>java.lang.String message; <END_MOD>if (loggerString.isEmpty()) { <START_MOD>message =<END_MOD> auditLog.toStringForLogging(); } else { <START_MOD>message =<END_MOD> java.text.MessageFormat.format(loggerString, auditLog.getMessage()); } <START_MOD>return java.text.MessageFormat.format( Log ID: {0<END_MOD>}<START_MOD>, {1} auditLog.getAuditLogId(), message); }<END_MOD>
<START_MOD>public static java.lang.String escapeUnderScore(final java.lang.String customizedValue, final java.lang.String customizedRelation) { java.lang.String escapedValue = customizedValue; if ((customizedRelation.equalsIgnoreCase("LIKE")) || (customizedRelation.equalsIgnoreCase("ILIKE"))) { java.lang.String replaceWith = "_"; int pgMajorRelease = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PgMajorRelease); if (pgMajorRelease == (org.ovirt.engine.core.searchbackend.SyntaxChecker.PgMajorRelease.PG8.getValue())) { replaceWith = "\\\\_"; } else if (pgMajorRelease == (org.ovirt.engine.core.searchbackend.SyntaxChecker.PgMajorRelease.PG9.getValue())) { replaceWith = "\\_"; } escapedValue = customizedValue.replace("_", replaceWith); } return escapedValue; }<END_MOD>
<START_MOD>private java.lang.String getEffectiveEmulatedMachine() { if ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomEmulatedMachine()) != null) { return org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomEmulatedMachine(); } java.lang.String recentDefault = org.ovirt.engine.core.bll.RunVmCommand.getCluster().getEmulatedMachine(); if ((removeThisDebugSwitch) && ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomCompatibilityVersion()) != null)) { java.util.List<java.lang.String> oldSupported = org.ovirt.engine.core.common.config.Config.<java.util.List<java.lang.String>>getValue(ConfigValues.ClusterEmulatedMachines, org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomCompatibilityVersion().getValue()); java.util.Optional<java.lang.String> best = oldSupported.stream().max(( s1, s2) -> (org.apache.commons.lang.StringUtils.indexOfDifference(recentDefault, s1)) - (org.apache.commons.lang.StringUtils.indexOfDifference(recentDefault, s2))); org.ovirt.engine.core.bll.RunVmCommand.log.info("Emulated machine '{}' selected since Custom Compatibility Version is set for the '{}' VM", best.orElse(recentDefault), org.ovirt.engine.core.bll.RunVmCommand.getVm().getName()); return best.orElse(recentDefault); } return recentDefault; }<END_MOD>
public static java.util.Map<java.lang.String, java.lang.Object> prepareLocationInfoForVdsCommand(org.ovirt.engine.core.common.businessentities.LocationInfo locationInfo) { if (locationInfo instanceof org.ovirt.engine.core.common.businessentities.ExternalLocationInfo) { org.ovirt.engine.core.common.businessentities.ExternalLocationInfo info = ((org.ovirt.engine.core.common.businessentities.ExternalLocationInfo) (locationInfo)); if (ConnectionMethod.HTTP.equals(info.getConnectionMethod())) { org.ovirt.engine.core.common.businessentities.HttpLocationInfo httpInfo = ((org.ovirt.engine.core.common.businessentities.HttpLocationInfo) (info)); java.util.Map<java.lang.String, java.lang.Object> infoMap = new java.util.HashMap<>(); infoMap.put("method", "http"); infoMap.put("url", httpInfo.getUrl()); infoMap.put("headers", httpInfo.getHeaders()); return infoMap; } } if (locationInfo instanceof org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) { org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo info = ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (locationInfo)); java.util.Map<java.lang.String, java.lang.Object> infoMap = new java.util.HashMap<>(); infoMap.put("endpoint_type", "div"); infoMap.put("sd_id", info.getStorageDomainId().toString()); infoMap.put("img_id", info.getImageGroupId().toString()); infoMap.put("vol_id", info.getImageId().toString()); <START_MOD>infoMap.put("generation", info.getGeneration()); <END_MOD>return infoMap; } throw new java.lang.RuntimeException( location info }
@java.lang.Override public org.ovirt.engine.api.model.ImageTransfer get() { <START_MOD>org.ovirt.engine.api.model.ImageTransfer imageTransfer =<END_MOD> performGet(VdcQueryType.GetImageTransferById, new org.ovirt.engine.core.common.queries.IdQueryParameters(guid)); <START_MOD>if (imageTransfer.isSetImage()) { imageTransfer.getImage().unsetLinks(); <END_MOD>}<START_MOD> return imageTransfer; }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.job.Step getStep(org.ovirt.engine.core.compat.Guid stepId<START_MOD>, boolean includeSubjectEntities<END_MOD>) { <START_MOD>org.ovirt.engine.core.common.job.Step step =<END_MOD> stepDao.get(stepId); <START_MOD>if (includeSubjectEntities) { step.setSubjectEntities(stepSubjectEntityDao.getStepSubjectEntitiesByStepId(stepId)); <END_MOD>}<START_MOD> return step; }<END_MOD>
org.ovirt.engine.core.common.job.Step getStep(org.ovirt.engine.core.compat.Guid stepId<START_MOD>, boolean includeSubjectEntities<END_MOD>);
@java.lang.Override protected void executeQueryCommand() { <START_MOD>java.util.List<<END_MOD>org.ovirt.engine.core.<START_MOD>common<END_MOD>.<START_MOD>job<END_MOD>.<START_MOD>Step> steps = <END_MOD>stepDao.getStepsByJobId(org.ovirt.engine.core.bll.GetStepsByJobIdQuery.getParameters().getJobId())<START_MOD>; steps.forEach(( s) -> s.setSubjectEntities(stepSubjectEntityDao.getStepSubjectEntitiesByStepId(s.getId()))); org.ovirt.engine.core.bll.GetStepsByJobIdQuery.getQueryReturnValue().setReturnValue(steps<END_MOD>); }
private org.ovirt.engine.core.bll.context.CommandContext buildCommandContext(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getJobId()))) { executionContext.setJob(jobRepository.getJobWithSteps(cmdEntity.getJobId())); } else if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getStepId()))) { executionContext.setStep(jobRepository.getStep(cmdEntity.getStepId()<START_MOD>, false<END_MOD>)); } return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext); }
private void reorderNics() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDevice> vmInterfaceDevices = getVmInterfaceDevices(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> nics = vmNicDao.getAllForVm(org.ovirt.engine.core.bll.network.vm.ReorderVmNicsCommand.getParameters().getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> nicsToReorder = new java.util.ArrayList<>(); java.util.List<java.lang.String> macsToReorder = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNic nic : nics) { org.ovirt.engine.core.common.businessentities.VmDevice nicDevice = vmInterfaceDevices.get(nic.getId()); if ((nicDevice == null) || (org.apache.commons.lang.StringUtils.isEmpty(nicDevice.getAddress()))) { nicsToReorder.add(nic); macsToReorder.add(nic.getMacAddress()); } } java.util.Collections.sort(nicsToReorder, new org.ovirt.engine.core.<START_MOD>bll.common.comparator.NumericSuffixNameableComparator<END_MOD>()); java.util.Collections.sort(macsToReorder); for (int i = 0; i < (nicsToReorder.size()); ++i) { org.ovirt.engine.core.common.businessentities.network.VmNic nic = nicsToReorder.get(i); nic.setMacAddress(macsToReorder.get(i)); vmNicDao.update(nic); } }
<START_MOD>@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Nameable nameable1, org.ovirt.engine.core.common.businessentities.Nameable nameable2) { final java.lang.String name1 = nameable1.getName(); final java.lang.String name2 = nameable2.getName(); final org.ovirt.engine.core.bll.common.NumericSuffixNormalizer numericSuffixNormalizer = new org.ovirt.engine.core.bll.common.NumericSuffixNormalizer(); final java.util.List<java.lang.String> normalizedNames = numericSuffixNormalizer.normalize(name1, name2); return org.apache.commons.lang.ObjectUtils.compare(normalizedNames.get(0), normalizedNames.get(1)); }<END_MOD>
private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.<START_MOD>storage.StorageJobCommand<END_MOD><?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info( {} id: '{}': attempting to determine the job status by polling the entity. cmd.getActionType(), cmd.getCommandId()); <START_MOD>org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus status = pollEntity(cmd); if (status != null) { <END_MOD>return <START_MOD>status; } org.ovirt.engine.core.bll.storage.EntityPollingCommand entityPollingCommand = ((org.ovirt.engine.core.bll.storage.EntityPollingCommand) (cmd));<END_MOD> if (<START_MOD>(entityPollingCommand.isJobFencingSupported()) && (!(cmd.getParameters().getJobStarted()))) { log.info( {} id: '{}': attempting to fence job {} cmd.getActionType(), cmd.getCommandId(), cmd.getJobId()); entityPollingCommand.attemptToFenceJob(); } return null; } if (<END_MOD>jobsReportedByHost) { log.error(( {} id: '{}': entity polling isn supported and the job isn reported by the host, +   it failed so that the command execution will end. cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } if (cmd.failJobWithUndeterminedStatus()) { log.error(( {} id: '{}': failed to determine the actual job status, considering as failed as per +   the command implementation cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } <START_MOD>log.error( {} id: '{}': failed to determine the actual job status, will retry to poll the job soon cmd.getActionType(), cmd.getCommandId()); return null; }<END_MOD>
private void <START_MOD>handlePolledJobInfo<END_MOD>(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, org.ovirt.engine.core.common.businessentities.HostJobInfo jobInfo) { if ((<START_MOD>(<END_MOD>jobInfo.getStatus()) <START_MOD>== (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.running)) && (!(cmd.getParameters().getJobStarted()))) { cmd.getParameters().setJobStarted(true); cmd.persistCommand(cmd.getParameters().getParentCommand(), true); } if ((jobInfo.getStatus()) <END_MOD>!= (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed)) { return; } if ((jobInfo.getError()) != null) { jobInfo.setStatus(cmd.handleJobError(jobInfo.getError().getCode())); if ((jobInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.done)) { jobInfo.setProgress(null); } } }
<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn setVolumeGeneration(java.lang.String jobId, java.util.Map<?, ?> volumeInfo);<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn setVolumeGeneration(java.lang.String jobId, java.util.Map<?, ?> volumeInfo) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.set_volume_generation").withParameter("job_id", jobId).withParameter("vol_info", volumeInfo).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }<END_MOD>
private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.CommandBase<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info( {} id: '{}': attempting to determine the job status by polling the entity. cmd.getActionType(), cmd.getCommandId()); return pollEntity(cmd); } if (jobsReportedByHost) { log.error(( {} id: '{}': entity polling isn supported and the job isn reported by the host, +   it failed so that the command execution will end. cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } <START_MOD>if (cmd.failJobWithUndeterminedStatus()) { <END_MOD>log.error(<START_MOD>(<END_MOD> {} id: '{}': <START_MOD>failed<END_MOD> to <START_MOD>determine the actual<END_MOD> job <START_MOD>status, considering as failed as per +   the command implementation<END_MOD> cmd.getActionType(), cmd.getCommandId()); return <START_MOD>org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } }<END_MOD>
<START_MOD>@java.lang.Override public boolean isJobFencingSupported() { return isDstVdsmImage(); }<END_MOD>
<START_MOD>@java.lang.Override public void attemptToFenceJob() { if (isDstVdsmImage()) { org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo info = ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo())); org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters p = new org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters(info); p.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getActionType()); p.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters()); p.setStoragePoolId(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getStoragePoolId()); runInternalActionWithTasksContext(VdcActionType.FenceVolumeJob, p); } }<END_MOD>
protected void initEffectiveCompatibilityVersion() { <START_MOD>org.ovirt.engine.core.compat.Version effectiveCompatibilityVersion = <END_MOD>(<START_MOD>org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils.getInstance().getSupportedClusterLevels().contains(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVmStaticData().getCustomCompatibilityVersion())) ? <END_MOD>org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVmStaticData(), this::getCluster)<START_MOD> : org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(this::getCluster); setEffectiveCompatibilityVersion(effectiveCompatibilityVersion<END_MOD>); }
public void checkInvalidAddress() { assertFalse(underTest.test(generateVdsNetworkInterface(org.ovirt.engine.core.utils.network.predicate.AbstractVdsNetworkInterfacePredicateTest.INVALID))); }
@java.lang.Override protected void executeVdsBrokerCommand() { log.info( executeVdsBrokerCommand: calling 'copyVolumeData'<START_MOD> boolean b = true; if (b) {<END_MOD> status = org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getBroker().copyData(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getJobId().toString(), buildLocationInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getSrcInfo()), buildLocationInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getDstInfo())); <START_MOD>} else { status = createFailStatus(); } <END_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.proceedProxyReturnValue(); }
<START_MOD>protected boolean validateLeaseStorageDomain(org.ovirt.engine.core.compat.Guid leaseStorageDomainId) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.get(leaseStorageDomainId); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); if (!(validate(validator.isDomainExistAndActive()))) { return false; } if (getStoragePoolId().equals(domain.getStoragePoolId())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_LEASE_STORAGE_IS_NOT_A_PART_OF_POOL); } return true; }<END_MOD>
@java.lang.Override protected void executeVmCommand() { if (shouldAddLease(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm())) { if (org.ovirt.engine.core.common.FeatureSupported.isVmLeasesSupported(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getEffectiveCompatibilityVersion())) { if (<START_MOD>validateLeaseStorageDomain(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getLeaseStorageDomainId())) { if (<END_MOD>!(addVmLease(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getId()))) { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().setLeaseStorageDomainId(null); } } else { auditLogDirector.log(this, AuditLogType.<START_MOD>CANNOT_IMPORT_VM_WITH_LEASE_STORAGE_DOMAIN_ERROR); } } else { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().setLeaseStorageDomainId(null); auditLogDirector.log(this, AuditLogType.<END_MOD>CANNOT_IMPORT_VM_WITH_LEASE_COMPAT_VERSION); } } super.executeVmCommand(); }
public java.lang.String getConfigurationValue(java.lang.String miimonValue) { <START_MOD>java.lang.String extraOption = ""; if (value.equals(org.ovirt.engine.core.common.businessentities.network.BondMode.BOND4.value)) { extraOption =   xmit_hash_policy=2 } <END_MOD>return <START_MOD>(<END_MOD>(((org.ovirt.engine.core.common.businessentities.network.BondMode.MODE) + (value)) +   miimon= + <START_MOD>"100") + extraOption<END_MOD>; }
void initComboBox() { keyListBoxEditor = new org.ovirt.engine.ui.common.widget.editor.<START_MOD>ListModelTypeAheadListBoxEditor<END_MOD>(new org.ovirt.engine.ui.common.widget.<START_MOD>editor.ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<END_MOD><org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo>() { @java.lang.Override public java.lang.String <START_MOD>getReplacementStringNullSafe<END_MOD>(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo <START_MOD>option) { return option.getKey(); } @java.lang.Override public java.lang.String getDisplayStringNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo data) { return templates.typeAheadNameDescription((data ==<END_MOD> null<START_MOD> ? org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.empty() : data<END_MOD>.getKey()<START_MOD>), org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.empty()).asString()<END_MOD>; } <START_MOD>})<END_MOD>; }
<START_MOD>@java.lang.Override public java.lang.String getDisplayStringNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo data) { return templates.typeAheadNameDescription((data == null ? org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.empty() : data.getKey()), org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.empty()).asString(); }<END_MOD>
private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { log.info( successful transfer for {} getTransferDescription()); if (stopImageTransferSession(context.entity)) { org.ovirt.engine.core.compat.Guid transferingVdsId = context.entity.getVdsId(); if (verifyImage(transferingVdsId)) { setVolumeLegalityInStorage(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.LEGAL_IMAGE); org.ovirt.engine.core.<START_MOD>common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImageId(), false); if (qemuImageInfo != null) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().setQcowCompat(qemuImageInfo.getQcowCompat()); imageDao.update(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage()); } org.ovirt.engine.core.<END_MOD>bll.storage.disk.image.TransferImageCommand.unLockImage(); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); } else { setImageStatus(ImageStatus.ILLEGAL); updateEntityPhase(ImageTransferPhase.FINALIZING_FAILURE); } tearDownImage(context.entity.getVdsId()); } }
@java.lang.Override protected org.ovirt.engine.ui.common.widget.AbstractUiCommandButton createCommandButton(java.lang.String label, java.lang.String uniqueId) { if (VmBasedWidgetSwitchModeCommand.NAME.equals(uniqueId)) { org.ovirt.engine.ui.common.widget.LeftAlignedUiCommandButton leftAlignedUiCommandButton = new org.ovirt.engine.ui.common.widget.LeftAlignedUiCommandButton(label); return leftAlignedUiCommandButton; } return super.createCommandButton(label, uniqueId); }
@javax.ws.rs.Path( (activate|migrate|stopmigrate)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (undelete)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (getprofilestatistics|rebalance|resetalloptions|resetoption|setoption|start|startprofile|stop|stopprofile|stoprebalance)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (activate|deactivate|export|move)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (end)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (activate|approve|commitnetconfig|deactivate|enrollcertificate|fence|forceselectspm|install|iscsidiscover|iscsilogin|refresh|setupnetworks|unregisteredstoragedomainsdiscover|upgrade)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@java.lang.Override public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(java.lang.String action, java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendActionResource(action, id))<START_MOD>.get()<END_MOD>; }
@javax.ws.rs.Path( (disable|enable|resolve)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(java.lang.String action, java.lang.String oid) { java.net.URI uri = java.net.URI.create(org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(newModel(id)).getHref()); javax.ws.rs.core.Response.Status status = Response.Status.MOVED_PERMANENTLY; return javax.ws.rs.core.Response.status(status).location(uri).build(); }
public static java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> getSubServices(java.lang.Class<?> resource) { java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> resources = new java.util.ArrayList<>(); for (java.lang.reflect.Method method : org.ovirt.engine.api.rsdl.ServiceTree.getMethods(resource, org.ovirt.engine.api.rsdl.ServiceTree.SUB_RESOURCES)) { <START_MOD>java.lang.String name = method.getName(); if ((!("getActionStatus".equals(name))) && (!("getCreationResource".equals(name)))) { java.lang.String path = method.getAnnotation(<END_MOD>javax.ws.rs.Path<START_MOD>.class).value(); java.lang.Class<?> type = method.getReturnType(); resources.add(org.ovirt.engine.api.rsdl.ServiceTree.buildNode(type,<END_MOD> path<START_MOD>)); } } return<END_MOD> resources; }
@javax.ws.rs.Path( (isattached|refreshluns)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (export)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (allocatevm)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (attach|detach|updatevirtualfunctionsconfiguration)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (restore)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (copy)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (copy|export)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (move)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (cancelmigration|clone|commit_snapshot|detach|export|freezefilesystems|logon|maintenance|migrate|move|preview_snapshot|reboot|reordermacaddresses|shutdown|start|stop|suspend|thawfilesystems|ticket|undo_snapshot)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (proxyticket)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (replace)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (copy|export|move)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (reloadconfigurations)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (resetemulatedmachine)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@javax.ws.rs.Path( (importcertificates|testconnectivity)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid); }
@javax.ws.rs.Path( (clear|end)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
public void addNetworkFiltersToNic(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VmNic vmNic) { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = fetchVnicProfileNetworkFilter(vmNic); if (networkFilter != null) { final java.lang.String networkFilterName = networkFilter.getName(); struct.put(VdsProperties.NW_FILTER, networkFilterName); <START_MOD>java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parameters = new java.util.LinkedList<>(); final java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter> vmNicFilterParameters = vmNicFilterParameterDao.getAllForVmNic(vmNic.getId()); vmNicFilterParameters.forEach(( nicFilterParameter) -> { Map<java.lang.String, java.lang.Object> parameter = new org.ovirt.engine.core.vdsbroker.builder.vminfo.HashMap<>(); parameter.put("name", nicFilterParameter.getName()); parameter.put("value", nicFilterParameter.getValue()); parameters.add(parameter); <END_MOD>}<START_MOD>); struct.put(VdsProperties.NW_FILTER_PARAMETERS, parameters);<END_MOD> }<START_MOD> }<END_MOD>
@java.lang.Override protected void init() { super.init(); setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getContainerId()); setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getStoragePoolId()); imageToDestinationDomainMap = org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getImageToDestinationDomainMap(); if (((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm()) != null) && ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap()) != null)) { imageList = new java.util.ArrayList(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { imageList.add(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))); } } } ensureDomainMap(imageList, org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getDestDomainId()); <START_MOD>org.ovirt.engine.core.bll.VmHandler.updateMaxMemorySize(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getEffectiveCompatibilityVersion()); <END_MOD>}
<START_MOD>public static org.ovirt.vdsmfake.rpc.Api getInstance() { return org.ovirt.vdsmfake.rpc.Api.singleton; }<END_MOD>
public java.util.Map<START_MOD><java.lang.String, java.util.Map> hostDevListByCaps() { java.util.Map resultMap<END_MOD> = <START_MOD>getDoneStatus(); java.util.Map<java.lang.String, java.util.Map> infoMap = map<END_MOD>(); try { <START_MOD>infoMap.put("computer", getCapability()); infoMap.put("pci_0000_00_1b_0", getHardware(0)); infoMap.put("pci_0000_00_1b_1", getHardware(1)); infoMap.put("pci_0000_00_1b_2", getHardware(2)); infoMap.put("pci_0000_00_1b_3", getHardware(3)); infoMap.put("pci_0000_00_1b_4", getHardware(4)); infoMap.put("pci_0000_00_1b_5", getHardware(5)); infoMap.put("pci_0000_00_1b_6", getHardware(6)); infoMap.put("pci_0000_00_1b_7", getHardware(7)); infoMap.put("pci_0000_00_1b_8", getHardware(8)); infoMap.put("pci_0000_00_1b_9", getHardware(9)); infoMap.put("pci_0000_00_1b_10", getHardware(10)); infoMap.put("pci_0000_00_1b_11", getHardware(11)); infoMap.put("pci_0000_00_1f_12", getHardware(12));<END_MOD> resultMap<START_MOD>.put("info", infoMap); } catch (java.lang.NullPointerException e) { log.error( failed due to {} e); throw error(e); } finally { return<END_MOD> resultMap<START_MOD>; } }<END_MOD>
<START_MOD>public void sparsifyNotSupportedWhenWipeAfterDeleteIsOn() { createStorageDomainForDisk(StorageType.ISCSI); disk.setWipeAfterDelete(true); assertThat(validator.isSparsifySupported(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_SPARSIFY_NOT_SUPPORTED_BY_UNDERLYING_STORAGE_WHEN_WAD_IS_ENABLED)); }<END_MOD>
private void setupParameters() { org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setImageGroupID(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setDestinationImageId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImageGroupID())); <START_MOD>org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setVmSnapshotId(org.ovirt.engine.core.compat.Guid.newGuid()); <END_MOD>}
private void writeCdRom(org.ovirt.engine.core.utils.ovf.xml.XmlTextWriter writer, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices, org.ovirt.engine.core.common.businessentities.VM vm) { if (devices.isEmpty()) { return; } org.ovirt.engine.core.common.businessentities.VmDevice device = devices.get(0); writer.writeStartElement("disk"); writer.writeAttributeString("type", "file"); writer.writeAttributeString("device", "cdrom"); writer.writeAttributeString("snapshot", "no"); writer.writeStartElement("source"); writer.writeAttributeString("file", "optional"); writer.writeAttributeString("startupPolicy", "optional"); writer.writeEndElement(); java.lang.String cdInterface = <START_MOD>osRepository<END_MOD>.getCdInterface(vm.getOs(), vm.getCompatibilityVersion(), org.ovirt.engine.core.common.businessentities.ChipsetType.fromMachineType(vm.getEmulatedMachine())); writer.writeStartElement("target"); writer.writeAttributeString("dev", "hdc"); writer.writeAttributeString("bus", cdInterface); writer.writeEndElement(); writer.writeElement("readonly", null); writeAliasAndAddress(writer, device); writer.writeEndElement(); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } macPool = getMacPool(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> domainsMap = new java.util.HashMap<>(); if (!(validateBeforeCloneVm(domainsMap))) { return false; } <START_MOD>org.ovirt.engine.core.bll.VmHandler.updateMaxMemorySize(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getEffectiveCompatibilityVersion()); <END_MOD>if (org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().isImportAsNewEntity()) { initImportClonedVm(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getInterfaces().size()) > (macPool.getAvailableMacsCount())) { return failValidation(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateBallonDevice())) { return false; } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateSoundDevice())) { return false; } if (!(validate(org.ovirt.engine.core.bll.VmHandler.validateMaxMemorySize(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.<START_MOD>getVm().getStaticData<END_MOD>(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getEffectiveCompatibilityVersion())))) { return false; } return validateAfterCloneVm(domainsMap); }
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.VmDevice graphicsDev = getParameters().getDev(); vmDeviceDao.remove(graphicsDev.getId()); if (noGraphicsDevicesLeft()) { getVmDeviceUtils().removeVideoDevices(getParameters().getDev().getVmId()); setVmToHeadlessMode(); setTemplateToHeadlessMode(); } setSucceeded(true); }<END_MOD>
<START_MOD>private void setVmToHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(getParameters().getDev().getVmId()); if ((vmStatic != null) && ((vmStatic.getDefaultDisplayType()) != (org.ovirt.engine.core.common.businessentities.DisplayType.none))) { vmStatic.setDefaultDisplayType(DisplayType.none); vmStatic.setSingleQxlPci(false); vmStaticDao.update(vmStatic); } }<END_MOD>
<START_MOD>private boolean noGraphicsDevicesLeft() { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> devices = runInternalQuery(VdcQueryType.GetGraphicsDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(getParameters().getDev().getVmId())).getReturnValue(); return devices.isEmpty(); }<END_MOD>
<START_MOD>private void setTemplateToNonHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = vmTemplateDao.get(getParameters().getDev().getVmId()); if ((vmTemplate != null) && ((vmTemplate.getDefaultDisplayType()) == (org.ovirt.engine.core.common.businessentities.DisplayType.none))) { vmTemplate.setDefaultDisplayType(DisplayType.qxl); vmTemplateDao.update(vmTemplate); } if (getVmDeviceUtils().getVideoDevices(getParameters().getDev().getVmId()).isEmpty()) { getVmDeviceUtils().addVideoDevices(vmTemplate, getVmDeviceUtils().getNeededNumberOfVideoDevices(vmTemplate)); } }<END_MOD>
<START_MOD>private void setVmToNonHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(getParameters().getDev().getVmId()); if ((vmStatic != null) && ((vmStatic.getDefaultDisplayType()) == (org.ovirt.engine.core.common.businessentities.DisplayType.none))) { vmStatic.setDefaultDisplayType(DisplayType.qxl); vmStaticDao.update(vmStatic); } if (getVmDeviceUtils().getVideoDevices(getParameters().getDev().getVmId()).isEmpty()) { getVmDeviceUtils().addVideoDevices(vmStatic, getVmDeviceUtils().getNeededNumberOfVideoDevices(vmStatic)); } }<END_MOD>
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } org.ovirt.engine.core.common.queries.VdcQueryReturnValue res = runInternalQuery(VdcQueryType.GetGraphicsDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(getParameters().getDev().getVmId())); if (res.getSucceeded()) { <START_MOD>prevDevices<END_MOD> = res.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.GraphicsDevice device : <START_MOD>prevDevices<END_MOD>) { if (device.getGraphicsType().equals(getParameters().getDev().getGraphicsType())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_ONLY_ONE_DEVICE_WITH_THIS_GRAPHICS_ALLOWED); } } return true; } return false; }
<START_MOD>public<END_MOD> int getNeededNumberOfVideoDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { int maxMonitorsSpice = (vmBase.getSingleQxlPci()) ? org.ovirt.engine.core.bll.utils.VmDeviceUtils.SINGLE_QXL_MONITORS : vmBase.getNumOfMonitors(); int maxMonitorsVnc = java.lang.Math.max(org.ovirt.engine.core.bll.utils.VmDeviceUtils.VNC_MIN_MONITORS, vmBase.getNumOfMonitors()); return java.lang.Math.min(maxMonitorsSpice, maxMonitorsVnc); }
<START_MOD>private void setTemplateToHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = vmTemplateDao.get(getParameters().getDev().getVmId()); if ((vmTemplate != null) && ((vmTemplate.getDefaultDisplayType()) != (org.ovirt.engine.core.common.businessentities.DisplayType.none))) { vmTemplate.setDefaultDisplayType(DisplayType.none); vmTemplate.setSingleQxlPci(false); vmTemplateDao.update(vmTemplate); } }<END_MOD>
<START_MOD>public java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> getPrevDevices() { return prevDevices; }<END_MOD>
private void updateQcowCompat() { if (<START_MOD>org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getVolumeFormat().equals(VolumeFormat.COW)) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().setQcowCompat(QcowCompat.QCOW2_V2); if <END_MOD>(org.ovirt.engine.core.common.FeatureSupported.qcowCompatSupported(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getCompatibilityVersion())) { org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImageId(), false); if (qemuImageInfo != null) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().setQcowCompat(qemuImageInfo.getQcowCompat()); <START_MOD>} <END_MOD>imageDao.update(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage()); } } }
<START_MOD>private void completeGenerationInfo() { org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.businessentities.SubchainInfo<END_MOD> <START_MOD>info<END_MOD> <START_MOD>= <END_MOD>org.ovirt.engine.core.bll.<START_MOD>storage<END_MOD>.<START_MOD>disk.image.ColdMergeCommand.getParameters<END_MOD>()<START_MOD>.getSubchainInfo();<END_MOD> <START_MOD>org.ovirt.engine.core.common.businessentities.storage.DiskImage<END_MOD> <START_MOD>image<END_MOD> <START_MOD>= org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStoragePoolId(), info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId()); info.setGeneration(image.getImage().getGeneration()); org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.persistCommandIfNeeded()<END_MOD>; }
public static java.util.Map<java.lang.String, java.lang.<START_MOD>Object<END_MOD>> prepareSubchainInfoForVdsCommand(org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo) { java.util.Map<java.lang.String, java.lang.<START_MOD>Object<END_MOD>> map = new java.util.HashMap<>(); map.put("sd_id", subchainInfo.getStorageDomainId().toString()); map.put("img_id", subchainInfo.getImageGroupId().toString()); map.put("base_id", subchainInfo.getBaseImageId().toString()); map.put("top_id", subchainInfo.getTopImageId().toString()); <START_MOD>if ((subchainInfo.getGeneration()) != null) { map.put("base_generation", subchainInfo.getGeneration()); } <END_MOD>return map; }
<START_MOD>public java.lang.Integer getGeneration() { return generation; }<END_MOD>
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId).append("imageGroupId", imageGroupId).append("baseImageId", baseImageId).append("topImageId", topImageId).<START_MOD>append("generation", generation).<END_MOD>build(); }
<START_MOD>public void setGeneration(java.lang.Integer generation) { this.generation = generation; }<END_MOD>
<START_MOD>@java.lang.Override public HostJobInfo.HostJobStatus poll() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); return poller.pollImage(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getStoragePoolId(), info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId(), info.getGeneration(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getCommandId(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getActionType()); }<END_MOD>
<START_MOD>@java.lang.Override public void attemptToFenceJob() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo locationInfo = new org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo(info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId(), info.getGeneration()); org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters parameters = new org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters(locationInfo); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters()); parameters.setStoragePoolId(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStoragePoolId()); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); runInternalActionWithTasksContext(VdcActionType.FenceVolumeJob, parameters); }<END_MOD>
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId).append("imageGroupId", imageGroupId).append("baseImageId", baseImageId).append("topImageId", topImageId).<START_MOD>append("generation", baseImageGeneration).<END_MOD>build(); }
<START_MOD>private void setNextRunMessages() { com.google.gwt.safehtml.shared.SafeHtmlBuilder changedFieldsBuilder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); java.lang.String translated = org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.nextRunMessages.minAllocatedMem(); try { translated = org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.nextRunMessages.getString("minAllocatedMem"); } catch (java.util.MissingResourceException e) { } java.lang.String escapedField = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(translated); changedFieldsBuilder.append(bulletedItem(escapedField)); }<END_MOD>
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel object) { driver.edit(object); <START_MOD>setNextRunMessages(); <END_MOD>if (object.isVmUnpinned()) { setVisibilityToVmUnpinningWarrningPanel(true); } if ((object.getChangedFields().size()) > 0) { setVisibilityToChangedFieldsExpander(true); com.google.gwt.safehtml.shared.SafeHtmlBuilder changedFieldsBuilder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); for (java.lang.String field : object.getChangedFields()) { java.lang.String escapedField = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(field); changedFieldsBuilder.append(bulletedItem(escapedField)); } changedFields.setHTML(changedFieldsBuilder.toSafeHtml()); } setVisibilityToHotChanges(object); }
@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { java.util.Collection<java.lang.String> packages = org.ovirt.engine.core.bll.host.HostUpgradeManager.getPackagesForCheckUpdate(host.getVdsType(), host.getClusterCompatibilityVersion()); try (final org.ovirt.engine.core.bll.hostdeploy.VdsDeploy hostPackagesManager = createPackagesManager(host, true)) { hostPackagesManager.addUnit(new org.ovirt.engine.core.bll.hostdeploy.VdsDeployPackagesUnit(packages, false)); hostPackagesManager.execute(); } catch (final java.lang.Exception e) { org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error( to update host '{}' packages '{}'. host.getName(), org.apache.commons.lang.StringUtils.join(packages,     org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error("Exception", e<START_MOD>.getMessage()); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.debug("Exception", e<END_MOD>); throw new java.lang.RuntimeException(e); } }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (isMonitoringNeeded(<START_MOD>vdsManager.getCopyVds().getStatus()<END_MOD>)) { org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher fetcher = new org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher(vdsManager); long fetchTime = java.lang.System.nanoTime(); if (fetcher.fetch()) { getVmsMonitoring().perform(fetcher.getChangedVms(), fetchTime, vdsManager, true); processDevices(fetcher.getVdsmVms().stream(), fetchTime); } else { org.ovirt.engine.core.vdsbroker.monitoring.PollVmStatsRefresher.log.info( to fetch vms info for host '{}' - skipping VMs monitoring. vdsManager.getVdsName()); } } }
<START_MOD>boolean isMonitoringNeeded(org.ovirt.engine.core.common.businessentities.VDSStatus status) { return (status == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) || (((((((((status != (org.ovirt.engine.core.common.businessentities.VDSStatus.Unassigned)) && (status != (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing))) && (status != (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallFailed))) && (status != (org.ovirt.engine.core.common.businessentities.VDSStatus.Reboot))) && (status != (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance))) && (status != (org.ovirt.engine.core.common.businessentities.VDSStatus.PendingApproval))) && (status != (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallingOS))) && (status != (org.ovirt.engine.core.common.businessentities.VDSStatus.Down))) && (status != (org.ovirt.engine.core.common.businessentities.VDSStatus.Kdumping))); }<END_MOD>
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.AffinityLabel.class, to = org.ovirt.engine.core.common.businessentities.Label.class) public static org.ovirt.engine.core.common.businessentities.Label map(org.ovirt.engine.api.model.AffinityLabel model, org.ovirt.engine.core.common.businessentities.Label template) { org.ovirt.engine.core.common.businessentities.LabelBuilder entity = (template != null) ? new org.ovirt.engine.core.common.businessentities.LabelBuilder(template) : new org.ovirt.engine.core.common.businessentities.LabelBuilder(); if (model.isSetId()) { entity.id(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.name(model.getName()); } if (model.isSetReadOnly()) { entity.readOnly(model.<START_MOD>getReadOnly<END_MOD>()); } if ((model.isSetVms()) && (model.getVms().isSetVms())) { model.getVms().getVms().forEach(( vm) -> entity.vm(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(vm.getId()))); } if ((model.isSetHosts()) && (model.getHosts().isSetHosts())) { model.getHosts().getHosts().forEach(( host) -> entity.host(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(host.getId()))); } return entity.build(); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.Disk model, org.ovirt.engine.api.model.Disk transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getImageId(), transform.getImageId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.<START_MOD>getReadOnly(), transform.getReadOnly<END_MOD>()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getLogicalName(), transform.getLogicalName()); assertEquals(model.getOpenstackVolumeType().getName(), transform.getOpenstackVolumeType().getName()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals( status model.getStatus(), transform.getStatus()); assertEquals( sparse model.isSparse(), transform.isSparse()); assertEquals( propagate errors model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals( wipe after delete model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals( shareable model.isShareable(), transform.isShareable()); }
protected javax.ws.rs.core.Response attachDiskToVm(org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource resource, org.ovirt.engine.api.model.DiskAttachment attachment, org.ovirt.engine.api.restapi.resource.IResolver entityResolver) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(attachment.getDisk().getId()); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = map(attachment); dve.getId().setVmId(vmId); dve.getId().setDeviceId(diskId); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve); org.ovirt.engine.api.model.Disk disk = attachment.getDisk(); boolean isDiskActive = false; if (attachment.isSetActive()) { isDiskActive = org.apache.commons.lang.BooleanUtils.toBoolean(attachment.isActive()); } params.setPlugUnPlug(isDiskActive); boolean isDiskReadOnly = false; if (disk.isSetReadOnly()) { isDiskReadOnly = org.apache.commons.lang.BooleanUtils.toBoolean(disk.<START_MOD>getReadOnly<END_MOD>()); } params.setReadOnly(isDiskReadOnly); if (disk.isSetSnapshot()) { validateParameters(disk, "snapshot.id"); params.setSnapshotId(asGuid(disk.getSnapshot().getId())); } return resource.performCreate(VdcActionType.AttachDiskToVm, params, entityResolver); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.AffinityLabel model, org.ovirt.engine.core.common.businessentities.Label entity) { org.ovirt.engine.core.common.businessentities.LabelBuilder newEntity = new org.ovirt.engine.core.common.businessentities.LabelBuilder(entity); if (model.isSetReadOnly()) { newEntity.readOnly(model.<START_MOD>getReadOnly<END_MOD>()); } if (model.isSetName()) { newEntity.name(model.getName()); } return new org.ovirt.engine.core.common.action.LabelActionParameters(newEntity.build()); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.DiskSnapshot model, org.ovirt.engine.api.model.DiskSnapshot transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.<START_MOD>getReadOnly(), transform.getReadOnly<END_MOD>()); assertEquals(model.getDescription(), transform.getDescription()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals( status model.getStatus(), transform.getStatus()); assertEquals( sparse model.isSparse(), transform.isSparse()); assertEquals( propagate errors model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals( wipe after delete model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals( shareable model.isShareable(), transform.isShareable()); }
<START_MOD>public java.lang.String getFieldName() { return fieldName; }<END_MOD>
<START_MOD>private static java.lang.String pretty(java.lang.String xmlString) { try { javax.xml.parsers.DocumentBuilderFactory documentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory.newInstance(); javax.xml.parsers.DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder(); org.w3c.dom.Document document = documentBuilder.parse(new org.xml.sax.InputSource(new java.io.StringReader(xmlString))); javax.xml.transform.TransformerFactory transformerFactory = javax.xml.transform.TransformerFactory.newInstance(); javax.xml.transform.Transformer transformer = transformerFactory.newTransformer(); transformer.setOutputProperty(javax.xml.transform.OutputKeys.ENCODING, "UTF-8"); transformer.setOutputProperty(javax.xml.transform.OutputKeys.INDENT, "yes"); transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2"); javax.xml.transform.stream.StreamResult result = new javax.xml.transform.stream.StreamResult(new java.io.StringWriter()); javax.xml.transform.Source source = new javax.xml.transform.dom.DOMSource(document); transformer.transform(source, result); return result.getWriter().toString(); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.log.info("failed"); return ""; } }<END_MOD>
@java.lang.Override protected void executeVdsBrokerCommand() { buildVmData(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.log.info( {} createInfo); <START_MOD>if (Version.v4_1.lessOrEquals(vm.getCompatibilityVersion())) { java.lang.String libvirtXml = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder()).build(createInfo, vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getVds().getId()); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.log.info( {} org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.pretty(libvirtXml)); createInfo.put("xml", libvirtXml); } <END_MOD>vmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getBroker().create(createInfo); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(vm.getDynamicData(), vmReturn.vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getVds()); }
@javax.annotation.PostConstruct public void create() { log.info( optimizer service starting int refresh = java.lang.Integer.parseInt(configProvider.load().getConfig().getProperty(ConfigProvider.SOLVER_CLUSTER_REFRESH)); <START_MOD>executors.getScheduler().schedule(()<END_MOD> <START_MOD>-><END_MOD> <START_MOD>executors<END_MOD>.<START_MOD>getThreadPool<END_MOD>(<START_MOD>).submit(this::refreshClusters), <END_MOD>refresh, <START_MOD>java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>concurrent<END_MOD>.<START_MOD>TimeUnit<END_MOD>.<START_MOD>MILLISECONDS<END_MOD>); }
<START_MOD>private<END_MOD> void <START_MOD>refreshClusters() { log.debug( clusters... java.util.Set<java.lang.String> availableClusters = discovery.getClusters(); if (availableClusters == null) { log.error( discovery failed return; } availableClusters.removeAll(clusterOptimizers.keySet()); java.util.Properties config = new org.ovirt.optimizer.config.ConfigProvider().load().getConfig(); <END_MOD>final <START_MOD>int maxSteps = java.lang.Integer.parseInt(config.getProperty(ConfigProvider.SOLVER_STEPS)); for (java.lang.String clusterId : availableClusters<END_MOD>) { log.<START_MOD>info<END_MOD>(java.lang.String.format( <START_MOD>cluster<END_MOD> %s <START_MOD>detected clusterId)); long timeout = (java.lang.Integer.parseInt(configProvider.load().getConfig().getProperty(ConfigProvider.SOLVER_TIMEOUT))) * 1000; int refresh = java.lang.Integer.parseInt(configProvider.load().getConfig().getProperty(ConfigProvider.SOLVER_DATA_REFRESH)); org.ovirt.optimizer.solver.thread.ClusterOptimizer optimizer = new org.ovirt.optimizer.solver.thread.ClusterOptimizer(clusterId, maxSteps, timeout, configProvider.customRuleFiles()); org.ovirt.optimizer.solver.thread.ClusterInfoUpdater updater = new org.ovirt.optimizer.solver.thread.ClusterInfoUpdater(client, optimizer); clusterOptimizers.put(clusterId, optimizer); java.util.concurrent.CompletableFuture.supplyAsync(optimizer, executors.getThreadPool()).thenApply(OptimalDistributionStepsSolution::getClusterId).thenApply(clusterOptimizers::remove); executors.getScheduler().schedule(() -> executors.getThreadPool().submit(updater), refresh, java.util.concurrent.TimeUnit.SECONDS)<END_MOD>; } }
public java.util.List<java.<START_MOD>nio.file.Path<END_MOD>> customRuleFiles() { java.<START_MOD>nio.file.Path<END_MOD> dir = <START_MOD>java.nio.file.FileSystems.getDefault().getPath<END_MOD>(config.getProperty(org.ovirt.optimizer.config.ConfigProvider.SOLVER_CUSTOM_RULE_DIR));<START_MOD> final<END_MOD> java.util.List<java.<START_MOD>nio.file.Path> candidateFiles; try { candidateFiles = java.nio.file.Files.list(dir).collect(java.util.stream.Collectors.toList()); } catch (java.<END_MOD>io.<START_MOD>IOException e) { org.ovirt.optimizer.config.ConfigProvider.log.warn( not get a list of custom DRL files: {} e); return java.util.Collections.emptyList(); } org.ovirt.optimizer.config.ConfigProvider.log.debug( {} custom DRL candidate files<END_MOD> candidateFiles<START_MOD>.size()); return <END_MOD>candidateFiles<START_MOD>.stream().filter(( p) -> p.endsWith(".drl")).filter(java.nio.file.Files::isRegularFile).peek(( p) -><END_MOD> org.ovirt.optimizer.config.ConfigProvider.log.<START_MOD>debug( {}<END_MOD> custom DRL <START_MOD>file p)).collect(java.util.stream.Collectors.toList()); }<END_MOD>
private void updateImportedVmDevice(org.ovirt.engine.core.common.businessentities.VmBase vmBase, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.compat.Guid deviceId, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate) { org.ovirt.engine.core.common.businessentities.VmDevice exportedDevice = vmBase.getManagedDeviceMap().get(deviceId); if (exportedDevice != null) { vmDevice.setAddress(exportedDevice.getAddress()); vmDevice.setIsPlugged(exportedDevice.getIsPlugged()); vmDevice.setIsReadOnly(exportedDevice.getIsReadOnly()); vmDevicesToUpdate.add(vmDevice); } }
private void <START_MOD>addDiskVmElements<END_MOD>() { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : _images) { disk.getDiskVmElements().stream().forEach(( dve) -> dve.setId(new org.ovirt.engine.core.common.businessentities.VmDeviceId(disk.getId(), vmBase.getId()))); disk.setDiskVmElements(disk.getDiskVmElements()); } }
public static void deserialize(com.google.gwt.user.client.rpc.SerializationStreamReader streamReader, org.ovirt.engine.core.common.queries.VdcQueryReturnValue instance) throws com.google.gwt.user.client.rpc.SerializationException { instance.setSucceeded(streamReader.readBoolean()); instance.setExceptionString(streamReader.readString()); java.lang.String type = streamReader.readString(); if (type.equals("java.lang.String")) { instance.setReturnValue(streamReader.readString()); } else if (type.equals("java.lang.Integer")) { instance.setReturnValue(streamReader.readInt()); } else if (type.equals("java.lang.Boolean")) { instance.setReturnValue(streamReader.readBoolean()); } else if (type.equals("java.lang.Double")) { instance.setReturnValue(streamReader.readDouble()); } else if (type.equals("java.lang.Float")) { instance.setReturnValue(streamReader.readFloat()); } else if (type.equals("java.lang.Character")) { instance.setReturnValue(streamReader.readChar()); } else if (type.equals("java.lang.Short")) { instance.setReturnValue(streamReader.readShort()); } else if (type.equals("java.lang.Byte")) { instance.setReturnValue(streamReader.readByte()); } else if (type.equals("java.util.List")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("java.util.Map")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("java.util.Set")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("IVdcQueryable")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("UNKNOWN")) { instance.setReturnValue(streamReader.readObject()); } }
public boolean poll(org.ovirt.engine.core.compat.Guid hostId) { waitBetweenPolls(); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace( to do poll for host {}. hostId); org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runFutureVdsCommand(FutureVDSCommandType.Poll, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(hostId)); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace( executed for host{}. hostId); boolean succeeded = getValue(task<START_MOD>, hostId<END_MOD>); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace( of FutureVDSCommandType.Poll for host {}: {} hostId, succeeded); timestampOfEndOfPreviousInvocation = currentTimestamp(); return succeeded; }
private boolean getValue(org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task<START_MOD>, org.ovirt.engine.core.compat.Guid hostId<END_MOD>) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = task.get(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SetupNetworksPollingTimeout), java.util.concurrent.TimeUnit.SECONDS); return vdsReturnValue.getSucceeded(); } catch (java.util.concurrent.TimeoutException e) { return false; } <START_MOD>catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSRecoveringException e) { org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace( to poll host {} - it in recovery mode. hostId, e); return false; } }<END_MOD>
@org.junit.Test public void testGetValue() {<START_MOD> java.lang.System.out.println("test1");<END_MOD> assertEquals(( getValue() for   + (value)), value.ordinal(), value.getValue()); }
@org.junit.Test public void testForValue() {<START_MOD> java.lang.System.out.println("test2");<END_MOD> assertEquals(( forValue() for   + (value)), value, org.ovirt.engine.core.common.queries.ConfigurationValues.forValue(value.getValue())); }
<START_MOD>private void updatePassDiscardChangeabilityForDiskImage() { if (getStorageDomain().getSelectedItem().getStorageType().isFileDomain()) { getPassDiscard().setIsChangeable(true); } else if (getStorageDomain().getSelectedItem().getStorageType().isBlockDomain()) { if (!(getStorageDomain().getSelectedItem().getSupportsDiscard())) { getPassDiscard().setIsChangeable(false, org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); getPassDiscard().setEntity(false); } else { getPassDiscard().setIsChangeable(((!(getIsWipeAfterDelete().getEntity())) || (getStorageDomain().getSelectedItem().getSupportsDiscardZeroesData())), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.theUnderlyingStorageDoesNotSupportDiscardWhenWipeAfterDeleteIsEnabled()); if (!(getPassDiscard().getIsChangable())) { getPassDiscard().setEntity(false); } } } }<END_MOD>
<START_MOD>private void updatePassDiscardChangeabilityForDirectLun() { if (((getSanStorageModelBase()) != null) && ((getSanStorageModelBase().getAddedLuns()) != null)) { if (getSanStorageModelBase().getAddedLuns().isEmpty()) { getPassDiscard().setIsChangeable(false, null); } else { getPassDiscard().setIsChangeable(isLunSupportDiscard(getSanStorageModelBase().getAddedLuns().get(0).getEntity()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); if (!(getPassDiscard().getIsChangable())) { getPassDiscard().setEntity(false); } } } else if ((getLunDisk()) != null) { getPassDiscard().setIsChangeable(isLunSupportDiscard(getLunDisk().getLun()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); } }<END_MOD>
@java.lang.Override protected void executeQueryCommand()<START_MOD> { try<END_MOD> { org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase.getQueryReturnValue().setReturnValue(getUserRequestForStorageDomainRepoFileList()); }<START_MOD> catch (java.lang.Exception e) { log.error( to retrieve image list: {} e.getCause().getMessage()); org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase.getQueryReturnValue().setExceptionString(e.getCause().getMessage()); org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase.getQueryReturnValue().setSucceeded(false); } }<END_MOD>
public boolean isRebootCommandExecutionAllowed(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { if ((vms.isEmpty()) || (!(org.ovirt.engine.core.common.VdcActionUtils.canExecutePartially(vms, VM<START_MOD>.VmWithStatusForExclusive<END_MOD>.class, VdcActionType.RebootVm)))) { return false; } for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { boolean guestAgentPresent = !(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(vm.getIp())); boolean acpiEnabled = java.lang.Boolean.TRUE.equals(vm.getAcpiEnable()); if (!(guestAgentPresent || acpiEnabled)) { return false; } } return true; }
<START_MOD>private java.util.List<org.ovirt.engine.core.common.businessentities.VM.VmWithStatusForExclusive> getSelectedItemsWithStatusForExclusiveLock() { java.util.List<org.ovirt.engine.core.common.businessentities.VM.VmWithStatusForExclusive> vmsWithStatusForExclusive = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItems()) { vmsWithStatusForExclusive.add(new org.ovirt.engine.core.common.businessentities.VM.VmWithStatusForExclusive(vm)); } return vmsWithStatusForExclusive; }<END_MOD>
@java.lang.Override protected void proceedProxyReturnValue() { try { super.proceedProxyReturnValue(); } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException <START_MOD>e<END_MOD>) { <START_MOD>handleException(e,   was caught and ignored } catch (<END_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.<START_MOD>VDSRecoveringException e) { handleException<END_MOD>(<START_MOD>e,<END_MOD>   <START_MOD>in<END_MOD> <START_MOD>recovery<END_MOD> <START_MOD>mode<END_MOD> } }
<START_MOD>private void handleException(org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase e, java.lang.String reason) { final org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getVDSReturnValue(); vdsReturnValue.setSucceeded(false); vdsReturnValue.setExceptionString(e.toString()); vdsReturnValue.setExceptionObject(e); vdsReturnValue.setVdsError(e.getVdsError()); final java.lang.String msg = org.slf4j.helpers.MessageFormatter.format("Failed to poll host {} - {}.", org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getVdsId(), reason).getMessage(); org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.log.debug(msg, e); }<END_MOD>
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetDifferentlyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); assertThat(factory.createDecoratedPool(macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); assertThat(factory.createDecoratedPool(macPool, java.util.Collections.singletonList(macPoolDecoratorB)), instanceOf(java.lang.reflect.Proxy.class)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor1 = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy).createLockingInstance(eq(macPoolDecoratorA), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor1.capture()); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor2 = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy).createLockingInstance(eq(macPoolDecoratorB), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor2.capture()); assertEquals(captor1.getValue(), captor2.getValue()); }
<START_MOD>@java.lang.Override public final java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("macPool", macPool.toString()).build(); }<END_MOD>
@org.junit.Test public void testCreateDecoratedPoolByTwoDecorators() { doAnswer(( invocation) -> invocation.getArguments()[0]).when(lockedObjectFactoryMock).createLockingInstance(any(), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any()); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool = decoratePoolWhileNotUsingLocking(java.util.Arrays.asList(macPoolDecoratorA, macPoolDecoratorB)); assertThat(decoratedPool, is(macPoolDecoratorB)); java.lang.String macToPropagate = "macToPropagate"; when(macPool.allocateNewMac()).thenReturn(macToPropagate); java.lang.String propagatedMac = decoratedPool.allocateNewMac(); assertThat(propagatedMac, is(macToPropagate)); verify(macPoolDecoratorA).allocateNewMac(); verify(macPoolDecoratorB).allocateNewMac(); verify(macPool).<START_MOD>getId(); verify(macPool).<END_MOD>allocateNewMac(); verifyNoMoreInteractions(macPoolDecoratorA); verifyNoMoreInteractions(macPoolDecoratorB); verifyNoMoreInteractions(macPool); }
public org.ovirt.engine.core.bll.network.macpool.MacPool createDecoratedPool(org.ovirt.engine.core.bll.network.macpool.MacPool <START_MOD>macPool<END_MOD>, java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator> decorators) { org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool = decoratePool(<START_MOD>macPool<END_MOD>, decorators); return lockedObjectFactory.createLockingInstance(decoratedPool, org.ovirt.engine.core.bll.network.macpool.MacPool.class, lockForMacPool(<START_MOD>macPool.getId()<END_MOD>)); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetEquallyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); assertThat(factory.createDecoratedPool(macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); assertThat(factory.createDecoratedPool(macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(macPoolDecoratorA), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor.capture()); java.util.List<java.util.concurrent.locks.ReentrantReadWriteLock> capturesValues = captor.getAllValues(); assertEquals(capturesValues.get(0), capturesValues.get(1)); }
public void modifyPool(org.ovirt.engine.core.common.businessentities.MacPool macPool) { try (org.ovirt.engine.core.utils.lock.AutoCloseableLock lock = writeLockResource()) { if (!(macPools.containsKey(macPool.getId()))) { throw new java.lang.IllegalStateException(org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.INEXISTENT_POOL_EXCEPTION_MESSAGE); } <START_MOD>org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.log.debug( pool {}. (old will be deleted and new initialized from db entity) macPool); <END_MOD>removeWithoutLocking(macPool.getId()); initializeMacPool(macPool); } }
@java.lang.Override public final void freeMacs(java.util.List<java.lang.String> macs) { java.util.List<java.lang.String> macsToRelease = filterOutUnusedMacs(macs); if (macsToRelease.isEmpty()) {<START_MOD> org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.log.warn( to release with empty collection as parameter. } else { org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.TransactionalStrategyState strategyForMacRelease =<END_MOD> getStrategyForMacRelease()<START_MOD>; org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.log.debug( {} as release strategy strategyForMacRelease); strategyForMacRelease<END_MOD>.releaseMacsOnCommit(macsToRelease); } }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { org.ovirt.engine.core.bll.context.CompensationContext compensationContext = this.commandContext.getCompensationContext(); org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.UsingCompensationState.ReleaseMacsCompensationListener compensationListener = this.compensationListener; <START_MOD>log.debug( macs: {} to be released in case of successful execution java.util.Arrays.toString(macs.toArray())); <END_MOD>compensationListener.macsToReleaseOnCommit.addAll(macs<START_MOD>); log.debug(( compensation listener {} + compensationListener)<END_MOD>); compensationContext.addListener(compensationListener); }
public org.ovirt.engine.core.bll.network.macpool.MacPool getMacPoolById(org.ovirt.engine.core.compat.Guid macPoolId) { <START_MOD>org.ovirt.engine.core.bll.network.macpool.MacPool result =<END_MOD> getMacPoolById(macPoolId, java.util.Collections.emptyList()); <START_MOD>org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.log.debug( {<END_MOD>}<START_MOD> for use in compensation mechanism result); return result; }<END_MOD>
@java.lang.Override public java.util.List<java.lang.String> allocateMacAddresses(int numberOfAddresses) { <START_MOD>org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug( {} mac addresses from {}. numberOfAddresses, this); <END_MOD>java.util.List<java.lang.Long> macs = macsStorage.allocateAvailableMacs(numberOfAddresses); java.util.<START_MOD>List<java.lang.String> result = org.ovirt.engine.core.utils.MacAddressRangeUtils.macAddressesToStrings(macs); org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug( mac addresses: {} from {}. java.util.Arrays.toString(result.toArray()), this); java.util.<END_MOD>Collections.sort(<START_MOD>result<END_MOD>); logWhenMacPoolIsEmpty(); return <START_MOD>result; }<END_MOD>
private void initializeMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool) { java.util.List<java.lang.String> macsForMacPool = macPoolDao.getAllMacsForMacPool(macPool.getId()); final org.ovirt.engine.core.bll.network.macpool.MacPool pool = createPoolInternal(macPool); <START_MOD>org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.log.debug( {} with macs: {} pool, java.util.Arrays.toString(macsForMacPool.toArray())); <END_MOD>for (java.lang.String mac : macsForMacPool) { pool.forceAddMac(mac); } }
@java.lang.Override public void freeMacs(java.util.List<java.lang.String> macs) {<START_MOD> org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug( mac addresses {} back to {} java.util.Arrays.toString(macs.toArray()), this);<END_MOD> for (java.lang.String mac : macs) { macsStorage.freeMac(org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong(mac)); } }
public org.ovirt.engine.core.bll.network.macpool.MacPool createDecoratedPool(org.ovirt.engine.core.bll.network.macpool.MacPool macPool, java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator> decorators) { org.ovirt.engine.core.bll.network.macpool.<START_MOD>DecoratedMacPoolFactory.log.debug( decorated MacPool for {} macPool); org.ovirt.engine.core.bll.network.macpool.<END_MOD>MacPool decoratedPool = decoratePool(macPool, decorators); <START_MOD>org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory.log.debug( {} decorated as {}. macPool, decoratedPool); <END_MOD>return lockedObjectFactory.createLockingInstance(decoratedPool, org.ovirt.engine.core.bll.network.macpool.MacPool.class, lockForMacPool(macPool.getId())); }
<START_MOD>@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("allowDuplicateMacAddresses", allowDuplicateMacAddresses).append("defaultPool", defaultPool).append("description", description).append("id", id).append("name", name).append("ranges", ranges).build(); }<END_MOD>
@java.lang.Override public void cleaningCompensationDataAfterSuccess() { <START_MOD>log.debug(( successfully executed, releasing macs: {} + (macsToReleaseOnCommit))); <END_MOD>macsToReleaseOnCommit.forEach(macPool::freeMac); <START_MOD>this.macsToReleaseOnCommit.clear(); <END_MOD>}
@java.lang.Override public void onSuccess() { <START_MOD>log.debug( succeeded, releasing macs {}. java.util.Arrays.toString(super.macs.toArray())); <END_MOD>releaseMacs(); }
@java.lang.Override public void onRollback() { <START_MOD>log.debug( occured, releasing macs {}. java.util.Arrays.toString(super.macs.toArray())); <END_MOD>releaseMacs(); }
private java.util.List<org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.TransactionalStrategyState> getStrategyForMacAllocation() { java.util.List<org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.TransactionalStrategyState> states = new java.util.ArrayList<>(); if (usingCompensationState.shouldUseCompensation()) { states.add(usingCompensationState); } boolean shouldUseTxDecorator = (org.ovirt.engine.core.utils.transaction.TransactionSupport.current()) != null; if (shouldUseTxDecorator) { states.add(usingTxDecoratorState); } if (states.isEmpty()) { states.add(nontransactionalState); } <START_MOD>org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.log.debug( {} as allocation strategies java.util.Arrays.toString(states.toArray())); <END_MOD>return states; }
private org.ovirt.engine.core.bll.network.macpool.MacPool decoratePool(org.ovirt.engine.core.bll.network.macpool.MacPool macPool, java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator> decorators) { <START_MOD>if ((decorators == null) || (decorators.isEmpty())) { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory.log.debug( MacPoolDecorators passed to decorate pool {}.   macPool); return macPool; } <END_MOD>org.ovirt.engine.core.bll.network.macpool.MacPool result = macPool; <START_MOD>org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory.log.debug( MacPool {} with decorators: {}. java.util.Arrays.toString(decorators.toArray()));<END_MOD> for (org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator decorator : decorators) { decorator.setMacPool(result); result = decorator; } return result; }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { <START_MOD>log.debug( non-compensation state, immediately releasing macs {}. java.util.Arrays.toString(macs.toArray())); <END_MOD>macs.forEach(macPool::freeMac); }
<START_MOD>private void updatePassDiscardChangeabilityForDirectLun() { if (((getSanStorageModelBase()) != null) && ((getSanStorageModelBase().getAddedLuns()) != null)) { if (getSanStorageModelBase().getAddedLuns().isEmpty()) { getPassDiscard().setIsChangeable(false); } else { getPassDiscard().setIsChangeable(isLunSupportDiscard(getSanStorageModelBase().getAddedLuns().get(0).getEntity()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); if (!(getPassDiscard().getIsChangable())) { getPassDiscard().setEntity(false); } } } else if ((getLunDisk()) != null) { getPassDiscard().setIsChangeable(isLunSupportDiscard(getLunDisk().getLun()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); } }<END_MOD>
<START_MOD>private boolean isMigrationOriginally(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return ((clusterNetworkModel.getOriginalNetworkCluster()) != null) && (clusterNetworkModel.getOriginalNetworkCluster().isMigration()); }<END_MOD>
<START_MOD>private boolean isUnsetRoleProhibited(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return (isMultipleSelectionAllowed()) && (isDisplayOriginally(clusterNetworkModel)); }<END_MOD>
<START_MOD>private boolean isGlusterOriginally(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return ((clusterNetworkModel.getOriginalNetworkCluster()) != null) && (clusterNetworkModel.getOriginalNetworkCluster().isGluster()); }<END_MOD>
<START_MOD>private boolean isDisplayOriginally(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return ((clusterNetworkModel.getOriginalNetworkCluster()) != null) && (clusterNetworkModel.getOriginalNetworkCluster().isDisplay()); }<END_MOD>
<START_MOD>private boolean isUnsetRoleProhibited(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return (isMultipleSelectionAllowed()) && (isManagementOriginally(clusterNetworkModel)); }<END_MOD>
private void initCreateOrUpdateBondParameters() { org.ovirt.engine.core.common.utils.NetworkCommonUtils.fillBondSlaves(allExistingNics); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : allExistingNics) { if (nic.isBond()) { getHostSetupNetworksParametersData().getBonds().add(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(((org.ovirt.engine.core.common.businessentities.network.Bond) (nic)))); } } <START_MOD>initBondNameToIdMap(); <END_MOD>}
<START_MOD>public void addBondToParameters(org.ovirt.engine.core.common.action.CreateOrUpdateBond bond) { assert (bond.getId()) == null : "When adding a bond to the parameters its id should be null"; org.ovirt.engine.core.compat.Guid originalIdOfBondWithTheSameName = originalBondNameToId.get(bond.getName()); bond.setId(originalIdOfBondWithTheSameName); if (originalIdOfBondWithTheSameName != null) { removedBonds.remove(originalIdOfBondWithTheSameName); } bonds.add(bond); }<END_MOD>
<START_MOD>private void initOrginalBondNameToIdMap(org.ovirt.engine.core.common.action.CreateOrUpdateBond... bonds) { java.util.Map<java.lang.String, org.ovirt.engine.core.compat.Guid> originalBondNameToId = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.action.CreateOrUpdateBond bond : bonds) { originalBondNameToId.put(bond.getName(), bond.getId()); } dataFromHostSetupNetworksModel.setOriginalBondNameToId(originalBondNameToId); }<END_MOD>
<START_MOD>public void setOriginalBondNameToId(java.util.Map<java.lang.String, org.ovirt.engine.core.compat.Guid> originalBondNameToId) { this.originalBondNameToId = originalBondNameToId; }<END_MOD>
<START_MOD>@org.junit.Test public void testBondNotUpdatedAndRemovedSimultaneouslyNotValid() { org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(bond)).addRemovedBonds(bond.getId()).build(); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(params).build(); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.BOND_UPDATED_AND_REMOVED_SIMULTANEOUSLY; assertThat(validator.bondNotUpdatedAndRemovedSimultaneously(), failsWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, java.util.Collections.singletonList(bond.getName())))); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult bondNotUpdatedAndRemovedSimultaneously() { java.util.List<org.ovirt.engine.core.common.action.CreateOrUpdateBond> duplicateBonds = params.getCreateOrUpdateBonds().stream().filter(( bond) -> params.getRemovedBonds().contains(bond.getId())).collect(java.util.stream.Collectors.toList()); if (org.apache.commons.collections.CollectionUtils.isNotEmpty(duplicateBonds)) { org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.BOND_UPDATED_AND_REMOVED_SIMULTANEOUSLY; return new org.ovirt.engine.core.bll.ValidationResult(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, duplicateBonds.stream().map(CreateOrUpdateBond::getName).collect(java.util.stream.Collectors.toList()))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
<START_MOD>java.lang.String BOND_UPDATED_AND_REMOVED_SIMULTANEOUSLY();<END_MOD>
@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { <START_MOD>if (status == (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { <END_MOD>org.ovirt.engine.core.compat.Guid cmdId = command.getCommandId(); org.ovirt.engine.core.bll.SerialChildExecutingCommand serialChildExecutingCommand = ((org.ovirt.engine.core.bll.SerialChildExecutingCommand) (command)); if ((!anyFailed) || (serialChildExecutingCommand.ignoreChildCommandFailure())) { try { boolean endCommand = !(serialChildExecutingCommand.performNextOperation(completedChildren)); if (!endCommand) { return; } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.info( '{}' id: '{}' failed when attempting to perform the next operation, marking as FAILED '{}' command.getActionType(), cmdId, childCmdIds, command.getCommandStatus()); serialChildExecutingCommand.handleFailure(); anyFailed = true; } } else { serialChildExecutingCommand.handleFailure(); } <START_MOD>} <END_MOD>setCommandEndStatus(command, anyFailed, status, childCmdIds); }
@org.junit.Test public void testExecuteQueryWithNotExistingIscsiBond() { org.ovirt.engine.core.common.businessentities.IscsiBond iscsiBond = new org.ovirt.engine.core.common.businessentities.IscsiBond(); iscsiBond.setId(org.ovirt.engine.core.compat.Guid.newGuid()); when(getQueryParameters().getId()).thenReturn(iscsiBondId); getQuery().executeQueryCommand(); org.ovirt.engine.core.common.businessentities.IscsiBond result = getQuery().getQueryReturnValue().getReturnValue(); assertNull(result); }
<START_MOD>@java.lang.Override protected void executeCommand() { T parameters = org.ovirt.engine.core.bll.AddDeprecatedApiEventCommand.getParameters(); addCustomValue("ApiVersion", parameters.getApiVersion()); addCustomValue("ClientAddress", parameters.getClientAddress()); addCustomValue("DeprecatingVersion", parameters.getDeprecatingVersion()); addCustomValue("RemovingVersion", parameters.getRemovingVersion()); org.ovirt.engine.core.bll.AddDeprecatedApiEventCommand.setSucceeded(true); }<END_MOD>
@java.lang.Override public void init(javax.servlet.FilterConfig config) throws javax.servlet.ServletException { org.ovirt.engine.api.restapi.LocalConfig localConfig = org.ovirt.engine.api.restapi.LocalConfig.getInstance(); supportedVersions = localConfig.getSupportedVersions(); defaultVersion = localConfig.getDefaultVersion(); <START_MOD>java.util.Set<org.ovirt.engine.api.restapi.DeprecatedVersionInfo> deprecatedVersionInfos = localConfig.getDeprecatedVersions(); deprecatedVersionsSet = deprecatedVersionInfos.stream().map(DeprecatedVersionInfo::getVersion).collect(java.util.stream.Collectors.toSet()); deprecatedVersionsMap = deprecatedVersionInfos.stream().collect(java.util.stream.Collectors.toMap(DeprecatedVersionInfo::getVersion, java.util.function.Function.identity())); deprecatedMessagesTime = (localConfig.getDeprecatedMessagesFrequency()) * 1000L; <END_MOD>}
<START_MOD>@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Start initializing {}", getClass().getSimpleName()); org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Setting data center compatibility checker manager to run every 7 days"); schedulerUtil.scheduleAFixedDelayJob(this, "onTimer", new java.lang.Class[]{ }, new java.lang.Object[]{ }, 0, 7, java.util.concurrent.TimeUnit.DAYS); org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Finished initializing {}", getClass().getSimpleName()); }<END_MOD>
<START_MOD>@java.lang.Override public synchronized java.lang.String format(java.util.logging.LogRecord record) { cal.setTimeZone(org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.timeZone); org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.dateTimeFormat.setTimeZone(org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.timeZone); cal.setTimeInMillis(record.getMillis()); java.lang.String source; if ((record.getSourceClassName()) != null) { source = record.getSourceClassName(); if ((record.getSourceMethodName()) != null) { source += " " + (record.getSourceMethodName()); } } else { source = record.getLoggerName(); } java.lang.String message = formatMessage(record); java.lang.String throwable = ""; if ((record.getThrown()) != null) { java.io.StringWriter sw = new java.io.StringWriter(); java.io.PrintWriter pw = new java.io.PrintWriter(sw); pw.println(); record.getThrown().printStackTrace(pw); pw.close(); throwable = sw.toString(); } return java.lang.String.format(org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.recordFormat, org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.dateTimeFormat.format(cal.getTime()), source, record.getLoggerName(), record.getLevel().getName(), message, throwable); }<END_MOD>
<START_MOD>private static java.lang.String getLoggingProperty(java.lang.String key, java.lang.String defaultValue) { java.lang.String value = java.util.logging.LogManager.getLogManager().getProperty(key); return value == null ? defaultValue : value; }<END_MOD>
public static void main(java.lang.String... args) { org.ovirt.engine.core.config.EngineConfigCLIParser parser = null; try { parser = new org.ovirt.engine.core.config.EngineConfigCLIParser(); parser.parse(args); org.ovirt.engine.core.config.EngineConfigMap argsMap = parser.getEngineConfigMap(); if ((argsMap.getLogFile()) != null) { org.ovirt.engine.core.<START_MOD>uutils<END_MOD>.log.JavaLoggingUtils.addFileHandler(argsMap.getLogFile()); } if ((argsMap.getLogLevel()) != null) { org.ovirt.engine.core.<START_MOD>uutils<END_MOD>.log.JavaLoggingUtils.setLogLevel(argsMap.getLogLevel()); } } catch (java.lang.Throwable t) { java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } try { org.ovirt.engine.core.config.EngineConfig.getInstance().setUpAndExecute(parser); } catch (java.lang.Throwable t) { org.slf4j.LoggerFactory.getLogger(org.ovirt.engine.core.config.EngineConfigExecutor.class).debug( with error:   t); java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } }
public static void main(java.lang.String[] args) { org.ovirt.engine.core.notifier.utils.NotificationProperties prop = null; org.ovirt.engine.core.notifier.NotificationService notificationService = null; org.ovirt.engine.core.notifier.EngineMonitorService engineMonitorService = null; try { prop = org.ovirt.engine.core.notifier.utils.NotificationProperties.getInstance(); org.ovirt.engine.core.<START_MOD>uutils<END_MOD>.log.JavaLoggingUtils.setLogLevel(prop.getProperty(org.ovirt.engine.core.notifier.LOG_LEVEL)); prop.validate(); notificationService = new org.ovirt.engine.core.notifier.NotificationService(prop); engineMonitorService = new org.ovirt.engine.core.notifier.EngineMonitorService(prop); notificationService.registerTransport(new org.ovirt.engine.core.notifier.transport.smtp.Smtp(prop)); notificationService.registerTransport(new org.ovirt.engine.core.notifier.transport.snmp.Snmp(prop)); if (!(notificationService.hasTransports())) { throw new java.lang.RuntimeException(( transport is enabled, please enable at least one of SMTP (using MAIL_SERVER option) +   or SNMP (using SNMP_MANAGERS option) transports. } } catch (java.lang.Exception ex) { org.ovirt.engine.core.notifier.Notifier.log.error( to initialize ex); java.lang.System.err.println(ex.getMessage()); java.lang.System.exit(1); } if (((args != null) && ((args.length) > 0)) && (org.ovirt.engine.core.notifier.Notifier.ARG_VALIDATE.equals(args[0]))) { java.lang.System.exit(0); } try { notificationService.run(); engineMonitorService.run(); } catch (java.lang.Exception e) { org.ovirt.engine.core.notifier.Notifier.log.error( to run the event notification service.   e); java.lang.System.exit(1); } }
public static void setLogLevel(java.lang.String levelName) { org.ovirt.engine.core.<START_MOD>uutils<END_MOD>.log.JavaLoggingUtils.OVIRT_LOGGER.setLevel(org.ovirt.engine.core.<START_MOD>uutils<END_MOD>.log.JavaLoggingUtils.parseLevel(levelName)); }
private java.lang.Integer calcMaxVCpu() {<START_MOD> org.ovirt.engine.core.common.businessentities.ArchitectureType architecture = vm.getClusterArch().getFamily();<END_MOD> return org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu(vm.getStaticData(), vm.getClusterCompatibilityVersion()<START_MOD>, architecture<END_MOD>); }
<START_MOD>private static int bitWidth(int n) { return n == 0 ? 0 : 32 - (java.lang.Integer.numberOfLeadingZeros(n)); }<END_MOD>
<START_MOD>public static boolean validateCpuCounts(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.businessentities.ArchitectureType architecture = vm.getClusterArch().getFamily(); if (architecture == (org.ovirt.engine.core.common.businessentities.ArchitectureType.x86)) { return (org.ovirt.engine.core.common.utils.VmCpuCountHelper.bitWidth(((org.ovirt.engine.core.common.utils.VmCpuCountHelper.bitWidth(vm.getThreadsPerCpu())) + (org.ovirt.engine.core.common.utils.VmCpuCountHelper.bitWidth(vm.getCpuPerSocket()))))) <= (org.ovirt.engine.core.common.utils.VmCpuCountHelper.maxBitWidth); } return true; }<END_MOD>
private void writevCpu(org.ovirt.engine.core.utils.ovf.xml.XmlTextWriter writer, java.util.Map<java.lang.String, java.lang.Object> createInfo, org.ovirt.engine.core.common.businessentities.VM vm) { writer.writeStartElement("vcpu"); writer.writeAttributeString("current", java.lang.String.valueOf(vm.getNumOfCpus())); writer.writeRaw((org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.HotPlugCpuSupported, vm.getCompatibilityVersion(), vm.getClusterArch()) ? org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu(vm.getStaticData(), vm.getClusterCompatibilityVersion()<START_MOD>, vm.getClusterArch().getFamily()<END_MOD>).toString() : java.lang.String.valueOf(vm.getNumOfCpus()))); writer.writeEndElement(); }
<START_MOD>public void updateSuggestedLabels() { suggestedLabels = new java.util.TreeSet<>(suggestedLabelsCache); suggestedLabels.removeAll(computeSelecetedLabels()); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : getItems()) { labelModel.setItems(suggestedLabels, labelModel.getSelectedItem()); } }<END_MOD>
@java.lang.Override protected void onAdd(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value, org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor widget) { super.onAdd(value, widget); value.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsNicLabelWidget.this, null); <START_MOD>model.updateSuggestedLabels(); <END_MOD>} }); }
@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value, org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor widget) { super.onRemove(value, widget); com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, null); <START_MOD>model.updateSuggestedLabels(); <END_MOD>}
@java.lang.Override protected void init(<START_MOD>final <END_MOD>org.ovirt.engine.ui.uicommonweb.models.hosts.VfsNicLabelModel model) { super.init(model); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : model.getItems()) { labelModel.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsNicLabelWidget.this, null); <START_MOD>model.updateSuggestedLabels(); } }); } }<END_MOD>
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.VfsNicLabelModel model) { super.edit(model); }
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> createGhostValue() { org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); value.setItems(<START_MOD>flush().getSuggestedLabels()<END_MOD>); value.setSelectedItem(""); return value; }
@org.junit.Before public void init() { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.String>> initialHashes = new java.util.ArrayList<>(); initialHashes.add(new org.ovirt.engine.core.common.utils.Pair(org.ovirt.engine.core.vdsbroker.monitoring.VmDevicesMonitoringTest.VM_ID, org.ovirt.engine.core.vdsbroker.monitoring.VmDevicesMonitoringTest.INITIAL_HASH)); doReturn(initialHashes).when(vmDynamicDao).getAllDevicesHashes(); }
<START_MOD>protected org.ovirt.engine.core.common.vdscommands.VDSCommandType getLeaseAction() { return org.ovirt.engine.core.common.vdscommands.VDSCommandType.AddVmLease; }<END_MOD>
protected boolean removeVmLease(org.ovirt.engine.core.compat.Guid leaseStorageDomainId, org.ovirt.engine.core.compat.Guid vmId) { if (leaseStorageDomainId == null) { return true; } return <START_MOD>runInternalAction<END_MOD>(<START_MOD>VdcActionType<END_MOD>.RemoveVmLease, new org.ovirt.engine.core.common.<START_MOD>action<END_MOD>.<START_MOD>VmLeaseParameters<END_MOD>(getStoragePoolId(), leaseStorageDomainId, vmId)).getSucceeded(); }
protected boolean addVmLease(org.ovirt.engine.core.compat.Guid leaseStorageDomainId, org.ovirt.engine.core.compat.Guid vmId) { if (leaseStorageDomainId == null) { return true; } return <START_MOD>runInternalAction<END_MOD>(<START_MOD>VdcActionType<END_MOD>.AddVmLease, new org.ovirt.engine.core.common.<START_MOD>action<END_MOD>.<START_MOD>VmLeaseParameters<END_MOD>(getStoragePoolId(), leaseStorageDomainId, vmId)).getSucceeded(); }
<START_MOD>protected org.ovirt.engine.core.common.vdscommands.VDSCommandType getLeaseAction() { return org.ovirt.engine.core.common.vdscommands.VDSCommandType.RemoveVmLease; }<END_MOD>
<START_MOD>@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.getForStoragePool(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getStoragePoolId()); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); return (validate(validator.isDomainExistAndActive())) && (validate(validator.isDataDomain())); }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionCheckSubjects = new java.util.ArrayList<>(); permissionCheckSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getLeaseStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getActionType().getActionGroup())); return permissionCheckSubjects; }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getParentCommand()); org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters params = new org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getVmId()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(getLeaseAction(), params); if (returnValue.getSucceeded()) { org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getTaskIdList().add(createTask(taskId, returnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getActionType(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getLeaseStorageDomainId())); } setSucceeded(returnValue.getSucceeded()); }<END_MOD>
<START_MOD>@org.junit.Test public void networkInUseBySingleVm() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VM vm = mock(org.ovirt.engine.core.common.businessentities.VM.class); when(vm.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); networkNotUsedByVmsTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.failsWithOneNetworkInUse(), java.util.Collections.singletonList(vm)); }<END_MOD>
@org.junit.Test public void networkInUseByTemplates() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmTemplate template = mock(org.ovirt.engine.core.common.businessentities.VmTemplate.class); when(template.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); networkNotUsedByTemplatesTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.<START_MOD>failsWithOneNetworkInUse<END_MOD>(), java.util.Collections.singletonList(template)); }
@org.junit.Test public void networkInUseByHosts() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VDS host = mock(org.ovirt.engine.core.common.businessentities.VDS.class); when(host.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); networkNotUsedByHostsTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.<START_MOD>failsWithOneNetworkInUse<END_MOD>(), java.util.Collections.singletonList(host)); }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()) != null) { vmPoolDao.removeVmFromVmPool(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmId()); if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isUpdatePrestartedVms()) { vmPoolDao.boundVmPoolPrestartedVms(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()); } <START_MOD>if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isRemovePoolUponDetachAllVMs()) { removeVmPool(); } <END_MOD>org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); } }
<START_MOD>protected void removeVmPool() { try { lockManager.acquireLockWait(new org.ovirt.engine.core.utils.lock.EngineLock(getExclusiveLockForPoolDetach())); if ((vmPoolDao.getVmPoolsMapByVmPoolId(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()).size()) == 0) { org.ovirt.engine.core.common.action.VmPoolParametersBase removePoolParam = new org.ovirt.engine.core.common.action.VmPoolParametersBase(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()); removePoolParam.setSessionId(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().getSessionId()); if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isUpdatePrestartedVms()) { removePoolParam.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); } org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.RemoveVmPool, removePoolParam); } } finally { lockManager.releaseLock(new org.ovirt.engine.core.utils.lock.EngineLock(getExclusiveLockForPoolDetach())); } org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); }<END_MOD>
<START_MOD>@org.junit.Test public void replaceProductKey_definedKeyShouldBeReplaced() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "someKey", false); assertThat(res, containsString("<Key><![CDATA[someKey]]></Key>")); }<END_MOD>
<START_MOD>@org.junit.Test public void replaceProductKey_emptyKeyShouldRemoveTheWholeSection() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "", false); assertThat(res, not(containsString("<ProductKey>"))); assertThat(res, not(containsString("</ProductKey>"))); }<END_MOD>
<START_MOD>@org.junit.Test public void replaceProductKey_emptyKeyShouldNotRemoveTheWholeSectionForCustomScript() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "", true); assertThat(res, containsString("<ProductKey>")); assertThat(res, containsString("</ProductKey>")); }<END_MOD>
<START_MOD>@org.junit.Test public void testLimit() { java.lang.Integer maxVCpu = org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu(null, new java.lang.Integer(16), new java.lang.Integer(100), 2, 8); assertEquals(new java.lang.Integer(100), maxVCpu); }<END_MOD>
@com.google.gwt.uibinder.client.UiHandler("container") void onPanelDragDrop(com.google.gwt.event.dom.client.DropEvent event) { <START_MOD>java.lang.String vmGid = event.getData("VM_GID"); if (!(vmGid.isEmpty())) { <END_MOD>org.ovirt.engine.core.compat.Guid vmGuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(<START_MOD>vmGid); boolean pinned = java.lang.Boolean.valueOf(<END_MOD>event.getData(<START_MOD>"PINNED")); int vNumaNodeIndex = java.lang.Integer.parseInt(event.getData("INDEX")); container.removeStyleName(style.dragOver()); event.preventDefault(); org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(this, vmGuid,<END_MOD> pinned<START_MOD>,<END_MOD> vNumaNodeIndex, pNumaNodeIndex); }<START_MOD> }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityValue(org.ovirt.engine.core.common.businessentities.StoragePool object) { java.util.List<com.google.gwt.safehtml.shared.SafeHtml> imagesHtml = new java.util.ArrayList(getSafeHtmlStringMap(object).keySet()); if (!(imagesHtml.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getValue(imagesHtml); } return null; }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityTooltip(org.ovirt.engine.core.common.businessentities.StoragePool object) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = getSafeHtmlStringMap(object); if (!(imagesToText.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getDataCenterTooltip(imagesToText); } return null; }<END_MOD>
<START_MOD>public boolean isClusterCompatibilityLevelUpgradeNeeded() { return clusterCompatibilityLevelUpgradeNeeded; }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.webadmin.Template("<span style='position: relative; margin-left: 3px; margin-right: 3px; white-space: nowrap; height: 14px; line-height: 14px;'>{0}</span></span>") com.google.gwt.safehtml.shared.SafeHtml text(java.lang.String text);<END_MOD>
<START_MOD>public void setClusterCompatibilityLevelUpgradeNeeded(boolean clusterCompatibilityLevelUpgradeNeeded) { this.clusterCompatibilityLevelUpgradeNeeded = clusterCompatibilityLevelUpgradeNeeded; }<END_MOD>
<START_MOD>protected com.google.gwt.safehtml.shared.SafeHtml getImageSafeHtml(org.gwtbootstrap3.client.ui.constants.IconType iconType) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString((("<i class='fa " + (iconType.getCssName())) + "' style='font-size:16px;color:orange'></i>")); }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityTooltip(org.ovirt.engine.core.common.businessentities.Cluster object) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = getSafeHtmlStringMap(object); if (!(imagesToText.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getDataCenterTooltip(imagesToText); } return null; }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityValue(org.ovirt.engine.core.common.businessentities.Cluster object) { java.util.List<com.google.gwt.safehtml.shared.SafeHtml> imagesHtml = new java.util.ArrayList(getSafeHtmlStringMap(object).keySet()); if (!(imagesHtml.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getValue(imagesHtml); } return null; }<END_MOD>
private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { <START_MOD>java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(( v1, v2) -> v1.compareTo(v2)); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters =<END_MOD> genericSearch(storagePoolDao, true); <START_MOD>if (retVal.isPresent()) { org.ovirt.engine.core.compat.Version version = retVal.get(); dataCenters.stream().forEach(( dataCenter) -> dataCenter.setClusterCompatibilityLevelUpgradeNeeded(((version.compareTo(dataCenter.getCompatibilityVersion())) > 0))); <END_MOD>}<START_MOD> return dataCenters; }<END_MOD>
<START_MOD>java.lang.String dcUpgradeNeeded();<END_MOD>
protected org.ovirt.engine.core.common.businessentities.VMStatus createVm() { initParametersForExternalNetworks(); initParametersForPassthroughVnics(); org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = ((org.ovirt.engine.core.common.businessentities.VMStatus) (org.ovirt.engine.core.bll.RunVmCommand.getVdsBroker().runAsyncVdsCommand(VDSCommandType.Create, buildCreateVmParameters(), this).getReturnValue())); memoryFromSnapshotUsed = (vmStatus.isRunning()) || (vmStatus == (org.ovirt.engine.core.common.businessentities.VMStatus.RestoringState)); return vmStatus; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmOnceParams)) { return false; } org.ovirt.engine.core.common.action.RunVmOnceParams other = ((org.ovirt.engine.core.common.action.RunVmOnceParams) (obj)); return (((((((<START_MOD>(((<END_MOD>super.equals(obj)) && (java.util.Objects.equals(sysPrepDomainName, other.sysPrepDomainName))) && (java.util.Objects.equals(sysPrepUserName, other.sysPrepUserName))) && (java.util.Objects.equals(sysPrepPassword, other.sysPrepPassword))) && (java.util.Objects.equals(vmInit, other.vmInit))) && (java.util.Objects.equals(destinationVdsId, other.destinationVdsId))) && (java.util.Objects.equals(customEmulatedMachine, other.customEmulatedMachine))) && (java.util.Objects.equals(customCpuName, other.customCpuName))<START_MOD>) && (java.util.Objects.equals(bootMenuEnabled, other.bootMenuEnabled))) && (java.util.Objects.equals(spiceFileTransferEnabled, other.spiceFileTransferEnabled))) && (java.util.Objects.equals(spiceCopyPasteEnabled, other.spiceCopyPasteEnabled))<END_MOD>; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), sysPrepDomainName, sysPrepUserName, sysPrepPassword, vmInit, destinationVdsId, customEmulatedMachine, customCpuName<START_MOD>, bootMenuEnabled, spiceFileTransferEnabled, spiceCopyPasteEnabled<END_MOD>); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmParams)) { return false; } org.ovirt.engine.core.common.action.RunVmParams other = ((org.ovirt.engine.core.common.action.RunVmParams) (obj)); return (((((((((((((((((java.util.Objects.equals(getVmId(), other.getVmId())) && ((bootSequence) == (other.bootSequence))) && (java.util.Objects.equals(diskPath, other.diskPath))) && (java.util.Objects.equals(runAndPause, other.runAndPause))) && ((acpiEnable) == (other.acpiEnable))) && (java.util.Objects.equals(win2kHackEnable, other.win2kHackEnable))) && (java.util.Objects.equals(customProperties, other.customProperties))) && (java.util.Objects.equals(floppyPath, other.floppyPath))) && (java.util.Objects.equals(clientIp, other.clientIp))) && (java.util.Objects.equals(requestingUser, other.requestingUser))) && ((initializationType) == (other.initializationType))) && (java.util.Objects.equals(runAsStateless, other.runAsStateless))) && (java.util.Objects.equals(initrdUrl, other.initrdUrl))) && (java.util.Objects.equals(kernelUrl, other.kernelUrl))) && (java.util.Objects.equals(kernelParams, other.kernelParams))) && (java.util.Objects.equals(payload, other.payload))) && ((balloonEnabled) == (other.balloonEnabled))) && ((cpuShares) == (other.cpuShares)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(getVmId(), bootSequence, diskPath, runAndPause, acpiEnable, win2kHackEnable, customProperties, floppyPath, clientIp, requestingUser, initializationType, runAsStateless, initrdUrl, kernelUrl, kernelParams, payload, balloonEnabled, cpuShares); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmOnceParams)) { return false; } org.ovirt.engine.core.common.action.RunVmOnceParams other = ((org.ovirt.engine.core.common.action.RunVmOnceParams) (obj)); return (((((((<START_MOD>(<END_MOD>super.equals(obj)) && (<START_MOD>(bootSequence) == (other.bootSequence))) && (<END_MOD>java.util.Objects.equals(sysPrepDomainName, other.sysPrepDomainName))) && (java.util.Objects.equals(sysPrepUserName, other.sysPrepUserName))) && (java.util.Objects.equals(sysPrepPassword, other.sysPrepPassword))) && (java.util.Objects.equals(vmInit, other.vmInit))) && (java.util.Objects.equals(destinationVdsId, other.destinationVdsId))) && (java.util.Objects.equals(customEmulatedMachine, other.customEmulatedMachine))) && (java.util.Objects.equals(customCpuName, other.customCpuName)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), sysPrepDomainName, sysPrepUserName, sysPrepPassword, vmInit, destinationVdsId, customEmulatedMachine, customCpuName<START_MOD>, bootSequence<END_MOD>); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmParams)) { return false; } org.ovirt.engine.core.common.action.RunVmParams other = ((org.ovirt.engine.core.common.action.RunVmParams) (obj)); return ((((((((((((((java.util.Objects.equals(getVmId(), other.getVmId())) && (java.util.Objects.equals(diskPath, other.diskPath))) && (java.util.Objects.equals(runAndPause, other.runAndPause))) && (java.util.Objects.equals(customProperties, other.customProperties))) && (java.util.Objects.equals(floppyPath, other.floppyPath))) && (java.util.Objects.equals(clientIp, other.clientIp))) && (java.util.Objects.equals(requestingUser, other.requestingUser))) && ((initializationType) == (other.initializationType))) && (java.util.Objects.equals(runAsStateless, other.runAsStateless))) && (java.util.Objects.equals(initrdUrl, other.initrdUrl))) && (java.util.Objects.equals(kernelUrl, other.kernelUrl))) && (java.util.Objects.equals(kernelParams, other.kernelParams))) && (java.util.Objects.equals(payload, other.payload))) && ((balloonEnabled) == (other.balloonEnabled))) && ((cpuShares) == (other.cpuShares)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(getVmId(), diskPath, runAndPause, customProperties, floppyPath, clientIp, requestingUser, initializationType, runAsStateless, initrdUrl, kernelUrl, kernelParams, payload, balloonEnabled, cpuShares); }
private java.lang.String messageFormatter(java.lang.String msg, java.lang.String vmid<START_MOD>, java.lang.String module, java.lang.String callType<END_MOD>) { org.codehaus.jackson.node.ObjectNode vmDetailNode = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); vmDetailNode.put("status", msg); vmDetailNode.put("hash", java.lang.Integer.toString(vmid.hashCode())); org.codehaus.jackson.node.ObjectNode paramsNode = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); paramsNode.put(vmid.toString(), vmDetailNode); org.codehaus.jackson.node.ObjectNode node = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); node.put("params", paramsNode); node.put("jsonrpc", "2.0"); node.put("method", (<START_MOD>(((("|" + module) + "|") + callType) + "|")<END_MOD> + vmid)); return node.toString(); }
private void vmUpdateStatus(final org.ovirt.vdsmfake.domain.VM vm, final org.ovirt.vdsmfake.domain.VM.VMStatus status, final long delay, final java.lang.String msg, final boolean removeClient) throws java.lang.InterruptedException { java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newFixedThreadPool(5); java.util.concurrent.Future<java.lang.Void> future = ((java.util.concurrent.Future<java.lang.Void>) (executor.submit(() -> { try { java.util.concurrent.TimeUnit.MILLISECONDS.sleep(delay); vm.setStatus(status); sendNotification(msg, vm.getId(), removeClient<START_MOD>, "virt", "VmStatus"<END_MOD>); org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.info( {} set to {} vm.getId(), msg); if (isUpdateRequired(status)) { org.ovirt.vdsmfake.domain.VdsmManager.getInstance().updateHost(vm.getHost()); } } catch (java.lang.Exception e) { e.printStackTrace(); } }))); try { future.get(); } catch (java.util.concurrent.ExecutionException e) { e.printStackTrace(); } }
private boolean isUpdateRequired(org.ovirt.vdsmfake.domain.VM.VMStatus status) { <START_MOD>if<END_MOD> <START_MOD>(((<END_MOD>status == (VM.VMStatus.Up)<START_MOD>)<END_MOD> <START_MOD>||<END_MOD> <START_MOD>(<END_MOD>status == (VM.VMStatus.PoweringDown)<START_MOD>))<END_MOD> <START_MOD>||<END_MOD> <START_MOD>(<END_MOD>status == (VM.VMStatus.Paused)<START_MOD>))<END_MOD> <START_MOD>{ return<END_MOD> true<START_MOD>;<END_MOD> <START_MOD>} return<END_MOD> false; }
private void sendNotification(java.lang.String message, java.lang.String vmId, boolean removeClient<START_MOD>, java.lang.String module, java.lang.String callType<END_MOD>) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if (message == null) { org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.warn( message has arrived, ignore empty messages } send(messageFormatter(message, vmId<START_MOD>, module, callType<END_MOD>), vmId, removeClient); }
protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setInitializationType(<START_MOD>InitializationType.None); if ((((<END_MOD>initializationType)<START_MOD> == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.CloudInit); }<END_MOD> return parameters; }
protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.setPassthroughVnicToVfMap(initParametersForPassthroughVnics()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setVmPayload(vmPayload); <START_MOD>parameters.setHibernationVolHandle(getMemoryFromActiveSnapshot()); <END_MOD>if ((((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }
<START_MOD>private void refresh() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> allVds = vdsDao.getAll(org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.getUserID(), org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.getParameters().isFiltered()); java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.businessentities.VDS vds : allVds) { if ((sb.length()) > 0) { sb.append(','); } sb.append(HTTPS); sb.append(vds.getHostName()); } cachedResult = sb.toString(); org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.log.debug("Default list of origins refreshed to: {}", cachedResult); }<END_MOD>
<START_MOD>private java.lang.String mergeOrigins(java.lang.String fromConfig, java.lang.String fromDefault) { if ("*".equals(fromConfig)) { return fromConfig; } if (org.apache.commons.lang.StringUtils.isEmpty(fromConfig)) { return fromDefault; } return (fromConfig + ",") + fromDefault; }<END_MOD>
<START_MOD>private java.lang.String getDefaultAllowedOrigins() throws javax.servlet.ServletException { org.ovirt.engine.core.common.queries.VdcQueryReturnValue value = backend.runPublicQuery(VdcQueryType.GetDefaultAllowedOrigins, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase()); if (!(value.getSucceeded())) { throw new javax.servlet.ServletException("Can't get list of default origins"); } return value.getReturnValue(); }<END_MOD>
<START_MOD>private void refreshIfNeeded() { long now = java.lang.System.currentTimeMillis(); if (((lastRefresh) + (DELAY)) < now) { refresh(); lastRefresh = now; } }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runPublicQuery(org.ovirt.engine.core.common.queries.VdcQueryType actionType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters) { parameters.setRefresh(false); switch (actionType) { case GetAAAProfileList : case RegisterVds : case CheckDBConnection : case GetDbUserBySession : case GetEngineSessionIdForSsoToken : case ValidateSession : <START_MOD>case GetDefaultAllowedOrigins : <END_MOD>return runQueryImpl(actionType, parameters, false); case GetConfigurationValue : org.ovirt.engine.core.common.queries.GetConfigurationValueParameters configParameters = ((org.ovirt.engine.core.common.queries.GetConfigurationValueParameters) (parameters)); switch (configParameters.getConfigValue()) { case VdcVersion : case ProductRPMVersion : case ApplicationMode : case UserSessionTimeOutInterval : case CORSSupport : case CORSAllowedOrigins : return runQueryImpl(actionType, parameters, false); default : break; } default : break; } return getErrorQueryReturnValue(EngineMessage.USER_CANNOT_RUN_QUERY_NOT_PUBLIC); }
<START_MOD>@java.lang.Override protected void executeQueryCommand() { refreshIfNeeded(); org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.getQueryReturnValue().setReturnValue(cachedResult); }<END_MOD>
protected <START_MOD>java.util.Map<<END_MOD>org.ovirt.engine.core.<START_MOD>compat<END_MOD>.<START_MOD>Guid, java<END_MOD>.<START_MOD>lang.String> initParametersForPassthroughVnics<END_MOD>()<START_MOD> { java<END_MOD>.<START_MOD>util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> result = <END_MOD>getVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommand.getVdsId()); vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); <START_MOD>return result; <END_MOD>}
protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.<START_MOD>setPassthroughVnicToVfMap(initParametersForPassthroughVnics()); parameters.<END_MOD>setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setVmPayload(vmPayload); if ((((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }
<START_MOD>public int getControllerForScsiDisk(org.ovirt.engine.core.common.businessentities.VmDevice disk, org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Map<java.lang.String, java.lang.String> address = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(disk.getAddress()); java.lang.String controllerStr = address.get(VdsProperties.Controller); int defaultIndex = getDefaultVirtioScsiIndex(vm); if (org.apache.commons.lang.StringUtils.isNotEmpty(controllerStr)) { return java.lang.Integer.parseInt(controllerStr); } if (((vm.getNumOfIoThreads()) > 0) && (org.ovirt.engine.core.common.FeatureSupported.virtioScsiIoThread(vm.getCompatibilityVersion()))) { int numOfDisks = ((vm.getDiskMap()) != null) ? vm.getDiskMap().values().size() : 0; return (numOfDisks % (vm.getNumOfIoThreads())) + defaultIndex; } return defaultIndex; }<END_MOD>
<START_MOD>private java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMapForController(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.Integer, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer>> vmDeviceUnitMap) { int controllerId = vmInfoBuildUtils.getControllerForScsiDisk(vmDevice, org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVm()); if (!(vmDeviceUnitMap.containsKey(controllerId))) { return new java.util.HashMap<>(); } return vmDeviceUnitMap.get(controllerId); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult defaultRouteNetworkCannotBeExternal(org.ovirt.engine.core.common.businessentities.network.Network network) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_ROUTE_NETWORK_CANNOT_BE_EXTERNAL, java.lang.String.format(org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase.NETWORK_NAME_REPLACEMENT, network.getName())).when(((networkCluster.isManagement()) && (network.isExternal()))); }<END_MOD>
<START_MOD>private org.ovirt.engine.core.bll.ValidationResult checkVmNumaCpuAssignment(int cpuCores, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) { java.util.ArrayList<java.lang.Integer> cpuIds = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { cpuIds.addAll(node.getCpuIds()); } if (cpuIds.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } int minId = java.util.Collections.min(cpuIds); int maxId = java.util.Collections.max(cpuIds); if ((minId < 0) || (maxId >= cpuCores)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_INVALID_CPU_ID, java.lang.String.format("$cpuIndex %d", (minId < 0 ? minId : maxId)), java.lang.String.format("$cpuIndexMax %d", (cpuCores - 1))); } java.util.Collections.sort(cpuIds); for (int i = 0; i < ((cpuIds.size()) - 1); ++i) { if (cpuIds.get(i).equals(cpuIds.get((i + 1)))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_DUPLICATE_CPU_ID, java.lang.String.format("$cpuIndex %d", cpuIds.get(i))); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
<START_MOD>@org.junit.Test public void shouldDetectDupliciteCpuAssignment() { vmNumaNodes.get(0).setCpuIds(java.util.Collections.singletonList(0)); vmNumaNodes.get(1).setCpuIds(java.util.Collections.singletonList(0)); assertValidationFailure(underTest.checkVmNumaNodesIntegrity(vm, vm.getvNumaNodeList()), EngineMessage.VM_NUMA_NODE_DUPLICATE_CPU_ID); }<END_MOD>
<START_MOD>private void storeIp(java.lang.StringBuilder output, org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.IpInfoFetcher ipInfoFetcher) { output.append(java.lang.String.format("iface %s inet%s %s\n", ipInfoFetcher.fetchName(), ipInfoFetcher.getIpStackVersion(), ipInfoFetcher.fetchBootProtocol())); if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchIp())) { output.append(java.lang.String.format(" address %s\n", ipInfoFetcher.fetchIp())); } if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchNetmask())) { output.append(java.lang.String.format(" netmask %s\n", ipInfoFetcher.fetchNetmask())); } if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchGateway())) { output.append(java.lang.String.format(" gateway %s\n", ipInfoFetcher.fetchGateway())); } }<END_MOD>
<START_MOD>private void storeIpv4(java.lang.StringBuilder output, org.ovirt.engine.core.common.businessentities.VmInitNetwork iface) { storeIp(output, new org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.Ipv4InfoFetcher(iface)); }<END_MOD>
private void storeNetwork() throws java.io.UnsupportedEncodingException { java.lang.StringBuilder output = new java.lang.StringBuilder(); if ((vmInit.getNetworks()) != null) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInitNetwork> networks = vmInit.getNetworks(); for (org.ovirt.engine.core.common.businessentities.VmInitNetwork iface : networks) { if (java.lang.Boolean.TRUE.equals(iface.getStartOnBoot())) { output.append( ").append(iface.getName()).append(" } <START_MOD>storeIpv4(output, <END_MOD>iface<START_MOD>);<END_MOD> if ((vmInit.getDnsServers()) != null) { output.append( dns-nameservers").append("   output.append("\n"); } if ((vmInit.getDnsSearch()) != null) { output.append( dns-search").append("   output.append("\n"); } <START_MOD>storeIpv6(output, iface); <END_MOD>} } interfaces = output.toString(); if (!(interfaces.isEmpty())) { metaData.put("network-interfaces", interfaces); storeNextFile(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.CloudInitFileMode.NETWORK, "/etc/network/interfaces", interfaces.getBytes("US-ASCII")); } }
<START_MOD>private void storeIpv6(java.lang.StringBuilder output, org.ovirt.engine.core.common.businessentities.VmInitNetwork iface) { storeIp(output, new org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.Ipv6InfoFetcher(iface)); }<END_MOD>
private int calculateValue(org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster) { int res = 0; if (networkCluster != null) {<START_MOD> if (networkCluster.isDefaultRoute()) { res += 16; }<END_MOD> if (networkCluster.isManagement()) { res += 10; } if (networkCluster.isDisplay()) { res += 4; } if (networkCluster.isMigration()) { res += 2; } if (networkCluster.isGluster()) { res += 1; } } return res; }
<START_MOD>private HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.CommandBase<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info("Command {} id: '{}': attempting to determine the job status by polling the entity.", cmd.getActionType(), cmd.getCommandId()); return pollEntity(cmd); } if (jobsReportedByHost) { log.error(("Command {} id: '{}': entity polling isn't supported and the job isn't reported by the host," + "assuming it failed so that the command execution will end."), cmd.getActionType(), cmd.getCommandId()); return HostJobInfo.HostJobStatus.failed; } log.error("Command {} id: '{}': entity polling isn't supported, will retry to poll the job soon", cmd.getActionType(), cmd.getCommandId()); return null; }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.compat.Guid getHostJobId() { return getStorageJobId(); }<END_MOD>
<START_MOD>protected abstract HostJobInfo.HostJobType getHostJobType();<END_MOD>
<START_MOD>protected org.ovirt.engine.core.bll.CommandBase<?> getCommand(org.ovirt.engine.core.compat.Guid cmdId) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand(cmdId); }<END_MOD>
<START_MOD>private HostJobInfo.HostJobStatus pollEntity(org.ovirt.engine.core.bll.CommandBase<?> cmd) { try { return ((org.ovirt.engine.core.bll.storage.EntityPollingCommand) (cmd)).poll(); } catch (java.lang.Exception e) { log.error("Command {} id: '{}': failed to poll the command entity", cmd.getActionType(), cmd.getCommandId()); } return null; }<END_MOD>
<START_MOD>public static java.util.Map<java.lang.String, java.lang.Object> createVmMemoryDeviceMap(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice) { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Object> memDeviceData = new java.util.HashMap<>(); data.put("vmId", vmDevice.getVmId().toString()); memDeviceData.put(VdsProperties.Type, vmDevice.getType().getValue()); memDeviceData.put(VdsProperties.Device, vmDevice.getDevice()); if (org.apache.commons.lang.StringUtils.isNotBlank(vmDevice.getAddress())) { memDeviceData.put(VdsProperties.Address, org.ovirt.engine.core.utils.StringMapUtils.string2Map(vmDevice.getAddress())); } memDeviceData.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); memDeviceData.put(VdsProperties.DeviceId, vmDevice.getId().getDeviceId().toString()); memDeviceData.put("size", vmDevice.getSpecParams().get("size")); memDeviceData.put("node", vmDevice.getSpecParams().get("node")); data.put("memory", memDeviceData); return data; }<END_MOD>
<START_MOD>@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.getBroker().hotUnplugMemory(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createVmMemoryDeviceMap(org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.getParameters().getMemoryDeviceToUnplug())); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.setVdsRuntimeErrorAndReport(e); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.getVDSReturnValue().setExceptionString(null); } }<END_MOD>
@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getBroker().hotplugMemory(<START_MOD>org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createVmMemoryDeviceMap<END_MOD>(<START_MOD>org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getMemoryDevice()<END_MOD>)); org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.setVdsRuntimeErrorAndReport(e); org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getVDSReturnValue().setExceptionString(null); } }
@org.junit.Before public void init() { syncJob.setLogUtil(logUtil); org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.injectorRule.bind(org.ovirt.engine.core.utils.lock.LockManager.class, lockManager); doReturn(clusterDao).when(syncJob).getClusterDao(); doReturn(vdsDao).when(syncJob).getVdsDao(); doReturn(geoRepDao).when(syncJob).getGeoRepDao(); doReturn(volumeDao).when(syncJob).getVolumeDao(); doReturn(getClusters()).when(clusterDao).getAll(); doReturn(getVolume()).when(volumeDao).getByName(any(org.ovirt.engine.core.compat.Guid.class), anyString()); doReturn(getVolume()).when(volumeDao).getById(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(getServer()).when(glusterUtil).getRandomUpServer(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(glusterUtil).when(syncJob).getGlusterUtil(); doReturn(getSessions(2, true)).when(geoRepDao).getGeoRepSessionsInCluster(org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.CLUSTER_GUID); }
@org.junit.Before public void init() { syncJob.setLogUtil(logUtil); org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.injectorRule.bind(org.ovirt.engine.core.utils.lock.LockManager.class, lockManager); doReturn(getClusters()).when(clusterDao).getAll(); doReturn(getVolume()).when(volumeDao).getByName(any(org.ovirt.engine.core.compat.Guid.class), anyString()); doReturn(getVolume()).when(volumeDao).getById(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(getServer()).when(glusterUtil).getRandomUpServer(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(glusterUtil).when(syncJob).getGlusterUtil(); doReturn(getSessions(2, true)).when(geoRepDao).getGeoRepSessionsInCluster(org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.CLUSTER_GUID); }
private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.Optional<org.ovirt.engine.core.compat.Version> <START_MOD>optionalVersion<END_MOD> = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(<START_MOD>java.util.Comparator.naturalOrder(<END_MOD>)); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); <START_MOD>optionalVersion.ifPresent(( version) -> dataCenters.forEach(( dataCenter) -><END_MOD> { <START_MOD>dataCenter.setStoragePoolCompatibilityLevelUpgradeNeeded(((version.compareTo(dataCenter.getCompatibilityVersion())) > 0)); dataCenter.setMacPoolId(dcSingleMacPoolFinder.find(dataCenter.getId())); })); return <END_MOD>dataCenters; }
<START_MOD>private static void populateModelWithIpv6Details(org.ovirt.engine.core.common.businessentities.VmInitNetwork entity, org.ovirt.engine.api.model.NicConfiguration model) { if ((entity.getIpv6BootProtocol()) != null) { model.setIpv6BootProtocol(org.ovirt.engine.api.restapi.types.Ipv6BootProtocolMapper.map(entity.getIpv6BootProtocol())); } model.setIp(org.ovirt.engine.api.restapi.types.InitializationMapper.createIpModel(new org.ovirt.engine.core.common.network.vm.VmInitNetworkIpv6InfoFetcher(entity))); }<END_MOD>
<START_MOD>private static void populateModelWithIpv4Details(org.ovirt.engine.core.common.businessentities.VmInitNetwork entity, org.ovirt.engine.api.model.NicConfiguration model) { if ((entity.getBootProtocol()) != null) { model.setBootProtocol(org.ovirt.engine.api.restapi.types.Ipv4BootProtocolMapper.map(entity.getBootProtocol())); } model.setIp(org.ovirt.engine.api.restapi.types.InitializationMapper.createIpModel(new org.ovirt.engine.core.common.network.vm.VmInitNetworkIpv4InfoFetcher(entity))); }<END_MOD>
<START_MOD>private static org.ovirt.engine.api.model.Ip createIpModel(org.ovirt.engine.core.common.network.vm.VmInitNetworkIpInfoFetcher ipInfoFetcher) { org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); ip.setAddress(ipInfoFetcher.fetchIp()); ip.setNetmask(ipInfoFetcher.fetchNetmask()); ip.setGateway(ipInfoFetcher.fetchGateway()); return ip; }<END_MOD>
<START_MOD>private java.lang.String getCompatVersion() { int version = java.lang.Integer.parseInt(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStoragePool().getStoragePoolFormatType().getValue()); if (version >= 4) { return org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.VDSM_COMPAT_VERSION_1_1; } return org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.VDSM_COMPAT_DEFAULT_VERSION; }<END_MOD>
private java.util.Map<java.lang.String, java.lang.Object> createVmProperties() { java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(); map.put(VdsProperties.vm_name, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVmName()); map.put(VdsProperties.PoolId, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getStoragePoolId().toString()); map.put(VdsProperties.DomainId, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getStorageDomainId().toString()); map.put(VdsProperties.<START_MOD>compat_version, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getCompatVersion()); map.put(VdsProperties.<END_MOD>vm_disks, getDisksProperties()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getDisks()) { map.put(VdsProperties.Format, diskImage.getVolumeFormat().toString()); map.put(VdsProperties.DISK_ALLOCATION, diskImage.getVolumeType().toString()); break; } if ((org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVirtioIsoPath()) != null) { map.put(VdsProperties.VIRTIO_ISO_PATH, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVirtioIsoPath()); } return map; }
private void initCommandBase() { initUser(); org.ovirt.engine.core.bll.job.ExecutionContext executionContext = context.getExecutionContext(); if ((executionContext.getJob()) != null) { setJobId(executionContext.getJob().getId()); } else if ((executionContext.getStep()) != null) { setJobId(executionContext.getStep().getJobId()); } <START_MOD>if ((parameters.getParentParameters()) != null) { parameters.setCorrelationId(parameters.getParentParameters().getCorrelationId()); } <END_MOD>setCorrelationId(parameters.getCorrelationId()); }
<START_MOD>public long getMinimum() { return privateMinimum; }<END_MOD>
<START_MOD>public void setMinimum(long value) { privateMinimum = value; }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if ((value != null) && (((value instanceof java.lang.String) && (!(((java.lang.String) (value)).equals("")))) || (value instanceof java.lang.Long))) { java.lang.Long longValue = (value instanceof java.lang.String) ? org.ovirt.engine.core.compat.LongCompat.tryParse(((java.lang.String) (value))) : ((java.lang.Long) (value)); java.lang.String msg = ""; java.lang.String prefixMsg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().thisFieldMustContainNumberInvalidReason(); if (longValue == null) { result.setSuccess(false); msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberBetweenInvalidReason(prefixMsg, getMinimum(), getMaximum()); result.getReasons().add(msg); } else if ((longValue < (getMinimum())) || (longValue > (getMaximum()))) { if (((getMinimum()) != (java.lang.Long.MIN_VALUE)) && ((getMaximum()) != (java.lang.Long.MAX_VALUE))) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberBetweenInvalidReason(prefixMsg, getMinimum(), getMaximum()); } else if ((getMinimum()) != (java.lang.Long.MIN_VALUE)) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberGreaterInvalidReason(prefixMsg, getMinimum()); } else if ((getMaximum()) != (java.lang.Long.MAX_VALUE)) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberLessInvalidReason(prefixMsg, getMaximum()); } result.setSuccess(false); result.getReasons().add(msg); } } return result; }<END_MOD>
<START_MOD>@org.junit.Test public void tryParse() { org.junit.Assert.assertNull(org.ovirt.engine.core.compat.LongCompat.tryParse("")); org.junit.Assert.assertNull(org.ovirt.engine.core.compat.LongCompat.tryParse("no good")); org.junit.Assert.assertNull(org.ovirt.engine.core.compat.LongCompat.tryParse("$1")); org.junit.Assert.assertEquals(java.lang.Long.valueOf(1), org.ovirt.engine.core.compat.LongCompat.tryParse("1")); org.junit.Assert.assertEquals(java.lang.Long.valueOf((-1)), org.ovirt.engine.core.compat.LongCompat.tryParse("-1")); org.junit.Assert.assertEquals(java.lang.Long.valueOf(0), org.ovirt.engine.core.compat.LongCompat.tryParse("0")); }<END_MOD>
<START_MOD>public void setMaximum(long value) { privateMaximum = value; }<END_MOD>
<START_MOD>public long getMaximum() { return privateMaximum; }<END_MOD>
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.createVnicProfileValidator(); <START_MOD>boolean useDefaultNetworkFilterId = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFiterId(); <END_MOD>return (((((((((<START_MOD>(<END_MOD>validate(validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileForVmNetworkOnly()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.passthroughProfileContainsSupportedProperties()))) && (validate(validator.validUseDefaultNetworkFilterFlag(<START_MOD>useDefaultNetworkFilterId<END_MOD>)))) && (validate(validator.validNetworkFilterId()))<START_MOD>) && (validate(validator.validNetworkFilterForPassthroughProfile(useDefaultNetworkFilterId)))<END_MOD>; }
<START_MOD>java.lang.String ACTION_TYPE_FAILED_INVALID_VNIC_PROFILE_NETWORK_FILTER_CANNOT_BE_USED_WITH_PASSTHROUGH();<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult validNetworkFilterForPassthroughProfile(boolean useDefaultNetworkFilterId) { if (!(vnicProfile.isPassthrough())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_INVALID_VNIC_PROFILE_NETWORK_FILTER_CANNOT_BE_USED_WITH_PASSTHROUGH; boolean allowedState = ((vnicProfile.getNetworkFilterId()) == null) && (!useDefaultNetworkFilterId); return org.ovirt.engine.core.bll.ValidationResult.failWith(engineMessage).unless(allowedState); }<END_MOD>
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.UpdateVnicProfileCommand.createVnicProfileValidator(); return ((((((((((<START_MOD>(<END_MOD>validate(validator.vnicProfileIsSet())) && (validate(validator.vnicProfileExists()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.networkNotChanged()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.portMirroringNotChangedIfUsedByVms()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.UpdateVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.passthroughNotChangedIfUsedByVms()))) && (validate(validator.passthroughProfileContainsSupportedProperties()))) && (validate(validator.validNetworkFilterId()))<START_MOD>) && (validate(validator.validNetworkFilterForPassthroughProfile(false)))<END_MOD>; }
private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(java.util.Comparator.naturalOrder()); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); if (retVal.isPresent()) { dataCenters.forEach(( dataCenter) -> dataCenter.setStoragePoolCompatibilityLevelUpgradeNeeded(((retVal.get().compareTo(dataCenter.getCompatibilityVersion())) > 0))); } return dataCenters; }
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult memoryOptimizationConfiguration() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_AND_BALLOONING).when(((((cluster.getMaxVdsMemoryOverCommit()) > 100) || ((cluster.getMaxVdsMemoryOverCommit()) <= 0)) && (!((cluster.isEnableKsm()) || (cluster.isEnableBallooning()))))); }<END_MOD>
<START_MOD>@org.junit.Test public void memoryOptimizationLowerThenZeroWithoutKsmOrBallooning() { final org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.UpdateClusterCommandTest.createDefaultCluster(); cluster.setMaxVdsMemoryOverCommit((-52)); cluster.setEnableKsm(false); cluster.setEnableBallooning(false); createCommand(cluster); cpuExists(); validateFailedWithReason(EngineMessage.CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_AND_BALLOONING); }<END_MOD>
<START_MOD>java.lang.String CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_AND_BALLOONING();<END_MOD>
<START_MOD>@org.junit.Test public void memoryOptimizationWithoutKsmOrBallooning() { final org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.UpdateClusterCommandTest.createDefaultCluster(); cluster.setMaxVdsMemoryOverCommit(150); cluster.setEnableKsm(false); cluster.setEnableBallooning(false); createCommand(cluster); cpuExists(); validateFailedWithReason(EngineMessage.CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_AND_BALLOONING); }<END_MOD>
private void setDiskProfilesList(java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> diskProfiles) { if ((diskProfiles != null) && (!(diskProfiles.isEmpty()))) { getDiskProfile().setItems(diskProfiles); } org.ovirt.engine.core.compat.Guid defaultProfileId = (((<START_MOD>(<END_MOD>getDisk()) != null) && (<START_MOD>isExistingDisk())) && (<END_MOD>(getDisk().getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE))) ? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getDiskProfileId() : null; if (defaultProfileId != null) { for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile profile : diskProfiles) { if (profile.getId().equals(defaultProfileId)) { getDiskProfile().setSelectedItem(profile); return; } } org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile = new org.ovirt.engine.core.common.businessentities.profiles.DiskProfile(); diskProfile.setId(defaultProfileId); if ((getDisk()) != null) { diskProfile.setName(getDiskImage().getDiskProfileName()); } diskProfiles.add(diskProfile); getDiskProfile().setItems(diskProfiles); getDiskProfile().setSelectedItem(diskProfile); } }
@java.lang.Override public org.ovirt.engine.api.model.Vm update(org.ovirt.engine.api.model.Vm incoming) { validateParameters(incoming); if ((incoming.isSetCluster()) && ((incoming.getCluster().isSetId()) || (incoming.getCluster().isSetName()))) { org.ovirt.engine.core.compat.Guid clusterId = lookupClusterId(incoming); if (!(clusterId.toString().equals(get().getCluster().getId()))) { performAction(VdcActionType.ChangeVMCluster, new org.ovirt.engine.core.common.action.ChangeVMClusterParameters(clusterId, guid, null)); } } if (!(isFiltered())) { if (incoming.isSetPlacementPolicy()) { parent.validateAndUpdateHostsInPlacementPolicy(incoming.getPlacementPolicy()); } } else { incoming.setPlacementPolicy(null); } org.ovirt.engine.api.model.Vm vm = performUpdate(incoming, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetVmByVmId, org.ovirt.engine.core.common.queries.IdQueryParameters.class), VdcActionType.UpdateVm, new org.ovirt.engine.api.restapi.resource.BackendVmResource.UpdateParametersProvider()); if (<START_MOD>isNextRunRequested()) { org.ovirt.engine.core.common.businessentities.VM entity = getEntity(org.ovirt.engine.core.common.businessentities.VM.class, VdcQueryType.GetVmNextRunConfiguration, new org.ovirt.engine.core.common.queries.IdQueryParameters(guid), id, true); <END_MOD>vm <START_MOD>= addLinks(populate(org.ovirt.engine.api.restapi.types.VmMapper.map(entity, null, false), entity)); } if (vm <END_MOD>!= null) { org.ovirt.engine.api.restapi.util.DisplayHelper.adjustDisplayData(this, vm, false); removeRestrictedInfo(vm); } return vm; }
public void refresh() { try { refreshVdsRunTimeInfo(); } finally { try { if (((firstStatus) != (vds.getStatus())) && ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { vdsManager.cancelRecoveryJob(); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug( '{}' ({}) firing up event. vds.getName(), vds.getId()); vdsManager.setIsSetNonOperationalExecuted((!(getVdsEventListener().vdsUpEvent(vds)))); } saveDataToDb(); } catch (org.ovirt.engine.core.vdsbroker.irsbroker.IRSErrorException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Exception", ex); } catch (java.lang.RuntimeException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.<START_MOD>debug<END_MOD>("Exception", ex); } } }
<START_MOD>@org.junit.Test public void testListWithCustomGlobalHeaderOverridden() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(1); headers.put("my", "local"); clustersService.list().headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }<END_MOD>
<START_MOD>public org.ovirt.engine.sdk4.ConnectionBuilder headers(java.util.Map<java.lang.String, java.lang.String> headers) { this.headers = headers; return this; }<END_MOD>
<START_MOD>@org.junit.Test public void testAddWithCustomGlobalHeader() { clustersService.add().cluster(cluster()).send(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }<END_MOD>
<START_MOD>@org.junit.Test public void testLGetWithCustomGlobalHeader() { clusterService.get().send(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }<END_MOD>
<START_MOD>@org.junit.Before public void setUp() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(); headers.put("my", "value"); setXmlResponse("clusters", 200, "<clusters/>"); setXmlResponse("clusters/123", 200, "<cluster id=\"123\"><name>test</name></cluster>"); startServer(); connection = ((org.ovirt.engine.sdk4.internal.HttpConnection) (testConnectionBuilder().headers(headers).build())); clustersService = connection.systemService().clustersService(); clusterService = clustersService.clusterService("123"); }<END_MOD>
<START_MOD>@org.junit.Test public void testListWithCustomGlobalHeader() { clustersService.list().send(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }<END_MOD>
<START_MOD>@org.junit.Test public void testRemoveWithCustomGlobalHeader() { clusterService.remove().send(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }<END_MOD>
<START_MOD>@org.junit.Test public void testRemoveWithCustomGlobalHeaderOverridden() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(1); headers.put("my", "local"); clusterService.remove().headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }<END_MOD>
<START_MOD>private void generateAdditionalHeadersParameters() { buffer.addLine(); buffer.addLine("if (headers != null) {"); buffer.addLine("for (Map.Entry<String, String> header : headers.entrySet()) {"); buffer.addLine("request.setHeader(header.getKey(), header.getValue());"); buffer.addLine("}"); buffer.addLine("}"); buffer.addLine(); }<END_MOD>
<START_MOD>private void generateAdditionalQueryParameters() { buffer.addLine("if (query != null) {"); buffer.addLine("for (Map.Entry<String, String> queryParam : query.entrySet()) {"); buffer.addLine("uriBuilder.addParameter(queryParam.getKey(), queryParam.getValue());"); buffer.addLine("}"); buffer.addLine("}"); }<END_MOD>
private void injectHeaders(org.apache.http.client.methods.HttpUriRequest request) { for (java.util.Map.Entry<java.lang.String, java.lang.String> header : headers.entrySet()) { request.<START_MOD>addHeader<END_MOD>(header.getKey(), header.getValue()); } java.util.List<org.apache.http.Header> updated = excludeNullHeaders(request.getAllHeaders()); if ((updated != null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(new org.apache.http.Header[updated.size()])); } for (org.apache.http.NameValuePair nameValuePair : org.apache.http.client.utils.URLEncodedUtils.parse(request.getURI(), HTTP.UTF_8)) { if (nameValuePair.getName().equalsIgnoreCase("all_content")) { request.addHeader("All-Content", nameValuePair.getValue()); } } request.addHeader("Version", "4"); request.addHeader("Content-type", "application/xml"); request.addHeader("User-Agent", "JavaSDK"); request.addHeader("Accept", "application/xml"); request.addHeader("Authorization", (   + (getAccessToken()))); }
<START_MOD>@org.junit.Test public void testGetWithCustomGlobalHeaderOverridden() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(1); headers.put("my", "local"); clusterService.get().headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }<END_MOD>
<START_MOD>@org.junit.Test public void testListWithTwoCustomQueryParam() { java.util.Map<java.lang.String, java.lang.String> query = new java.util.HashMap<>(2); query.put("first", "value1"); query.put("second", "value2"); vmsService.list().query(query).send(); assertEquals("first=value1&second=value2", getLastRequestQuery()); }<END_MOD>
private void injectHeaders(org.apache.http.client.methods.HttpUriRequest request) {<START_MOD> for (java.util.Map.Entry<java.lang.String, java.lang.String> header : headers.entrySet()) { request.setHeader(header.getKey(), header.getValue()); }<END_MOD> java.util.List<org.apache.http.Header> updated = excludeNullHeaders(request.getAllHeaders()); if ((updated != null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(new org.apache.http.Header[updated.size()])); } for (org.apache.http.NameValuePair nameValuePair : org.apache.http.client.utils.URLEncodedUtils.parse(request.getURI(), HTTP.UTF_8)) { if (nameValuePair.getName().equalsIgnoreCase("all_content")) { request.addHeader("All-Content", nameValuePair.getValue()); } } request.addHeader("Version", "4"); request.addHeader("Content-type", "application/xml"); request.addHeader("User-Agent", "JavaSDK"); request.addHeader("Accept", "application/xml"); request.addHeader("Authorization", (   + (getAccessToken()))); }
<START_MOD>@org.junit.Test public void testListWithCustomQueryParam() { java.util.Map<java.lang.String, java.lang.String> query = new java.util.HashMap<>(1); query.put("my", "value"); vmsService.list().query(query).send(); assertEquals("my=value", getLastRequestQuery()); }<END_MOD>
private void generateRequestInterface(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); java.lang.String request = getRequestName(method); java.lang.String response = getResponseName(method); javaBuffer.addLine( interface %1$s extends Request<%1$s, %2$s> { request, response); method.parameters().filter(Parameter::isIn).sorted().forEach(this::generateRequestParameterInterface); javaBuffer.<START_MOD>addImport(java.util.Map.class); javaBuffer.addDocComment( HTTP headers. javaBuffer.addLine( headers(Map<String, String> headers); request); javaBuffer.addDocComment( URL query parameters. javaBuffer.addLine( query(Map<String, String> query); request); javaBuffer.<END_MOD>addLine("}"); javaBuffer.addLine(); }
<START_MOD>@org.junit.Test public void testAddWithCustomGlobalHeaderOverridden() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(1); headers.put("my", "local"); clustersService.add().cluster(cluster()).headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }<END_MOD>
private void generateRequestImplementation(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Name name = method.getName(); java.lang.String request = getRequestName(method); java.lang.String requestImpl = getRequestImplName(method); buffer.addLine( class %1$s implements %2$s { requestImpl, request); method.parameters().filter(Parameter::isIn).sorted().forEach(this::generateRequestParameterImplementation); buffer.<START_MOD>addImport(java.util.Map.class); buffer.addLine( Map<String, String> headers; buffer.addLine( %1s headers(Map<String, String> headers) { request); buffer.addLine( = headers; buffer.addLine( this; buffer.addLine("}"); buffer.addLine( Map<String, String> query; buffer.addLine( %1s query(Map<String, String> query) { request); buffer.addLine( = query; buffer.addLine( this; buffer.addLine("}"); buffer.<END_MOD>addLine( %1$s send() { getResponseName(method)); if (org.ovirt.sdk.java.ServicesImplGenerator.ADD.equals(name)) { generateAddRequestImplementation(method); } else if ((org.ovirt.sdk.java.ServicesImplGenerator.GET.equals(name)) || (org.ovirt.sdk.java.ServicesImplGenerator.LIST.equals(name))) { generateListRequestImplementation(method); } else if (org.ovirt.sdk.java.ServicesImplGenerator.REMOVE.equals(name)) { generateRemoveRequestImplementation(method); } else if (org.ovirt.sdk.java.ServicesImplGenerator.UPDATE.equals(name)) { generateUpdateRequestImplementation(method); } else { generateActionRequestImplementation(method); } buffer.addLine("}"); buffer.addLine(); buffer.addLine("}"); buffer.addLine(); }
@java.lang.Override public javax.ws.rs.core.Response ticket(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.businessentities.GraphicsType graphicsType = deriveGraphicsType(); <START_MOD>if (graphicsType == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason( Failed fault.setDetail(localize(Messages.CANNOT_GET_TICKET_FOR_DOWN_VM)); return javax.ws.rs.core.Response.status(Response.Status.CONFLICT).entity(fault).build(); } <END_MOD>java.lang.String consoleId = org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.asConsoleId(graphicsType); return getGraphicsConsolesResource().getConsoleResource(consoleId).ticket(action); }
public boolean isAction() { <START_MOD>java.util.List<java.lang.String><END_MOD> <START_MOD>nonActionMethodNames = new java.util.ArrayList<>(java.util.Arrays.asList("add", "get", "list", "update", "remove")); if ((nonActionMethodNames.contains<END_MOD>(getName().toString().toLowerCase())<START_MOD>) || (((base) != null) && (nonActionMethodNames.contains(base.getName().toString().toLowerCase()))))<END_MOD> { return false; <START_MOD>}<END_MOD> <START_MOD>else {<END_MOD> return true; } }
private void generateUpdateMethod(org.ovirt.api.metamodel.concepts.Method method<START_MOD>,<END_MOD> org.ovirt.api.metamodel.concepts.<START_MOD>Name helperClassName, boolean base) { org.ovirt.api.metamodel.concepts.<END_MOD>Parameter mainParameter = <START_MOD>org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) { java.lang.System.err.println(((   + method) +   doesn have any struct parameter return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter<END_MOD>.getType()<START_MOD>; org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.PUT.class); javaBuffer.addImports(mainTypeReference.getImports()); generateDoc(method); javaBuffer.addLine("@PUT"); javaBuffer.addLine( %s }) generateMediaTypes()); java.lang.String parameterName = javaNames.getJavaMemberStyleName(mainParameter.getName()<END_MOD>); if (<START_MOD>base) { javaBuffer.addLine( %s update(%s %s) { mainTypeReference.getText(), mainTypeReference.getText(), parameterName); writeHelperInvocation(helperClassName, parameterName, method.getName()); javaBuffer.addLine("}"); } else {<END_MOD> addMethod(mainTypeReference.getText(),   %s) mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); <START_MOD>} javaBuffer.addLine(); }<END_MOD>
private void generateAddMethod(org.ovirt.api.metamodel.concepts.Method method<START_MOD>, org.ovirt.api.metamodel.concepts.Name helperClassName, boolean base<END_MOD>) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = <START_MOD>org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainAddParameter(<END_MOD>method); if (mainParameter == null) { java.lang.System.err.println(((   + method) +   doesn have any struct parameter return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.POST.class); javaBuffer.addImport(javax.ws.rs.core.Response.class); javaBuffer.addImports(mainTypeReference.getImports()); generateDoc(method); javaBuffer.addLine("@POST"); javaBuffer.addLine( %s }) generateMediaTypes()); <START_MOD>java.lang.String parameterName = javaNames.getJavaMemberStyleName(mainParameter.getName()); if (base) { javaBuffer.addLine( Response add(<END_MOD>%s<START_MOD> %s) {<END_MOD> mainTypeReference.getText(), <START_MOD>parameterName); writeHelperInvocation(helperClassName, parameterName, method.getName()); javaBuffer.addLine("}"); } else { addResponseReturnMethod( %s) mainTypeReference.getText(), <END_MOD>javaNames.getJavaMemberStyleName(mainParameter.getName())); }<START_MOD> javaBuffer.addLine("}"); javaBuffer.addLine(); }<END_MOD>
private void generateGetMethod(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = <START_MOD>org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) { java.lang.System.err.println(((   + method) +   doesn have any struct parameter return; } org.ovirt.api.metamodel.concepts.Service service = method.getDeclaringService(); boolean isRoot = service == (service.getModel().getRoot()); generateDoc(method); javaBuffer.addImport(javax.ws.rs.GET.class); javaBuffer.addLine("@GET"); if (isRoot) { javaBuffer.addImport(javax.ws.rs.core.Response.class); addResponseReturnMethod("get()"); } else { org.ovirt.api.metamodel.concepts.Type mainType = mainParameter<END_MOD>.getType()<START_MOD>; org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImports(mainTypeReference.getImports()); addMethod(mainTypeReference.getText(), "get()")<END_MOD>; } javaBuffer.addLine(); }
private void generateMethod(org.ovirt.api.metamodel.concepts.Method method<START_MOD>,<END_MOD> org.ovirt.api.metamodel.concepts.Name <START_MOD>helperClassName, java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods) { boolean base<END_MOD> = <START_MOD>baseMethods.containsKey(method); org.ovirt.api.metamodel.concepts.Name name = <END_MOD>method.getName(); if (<START_MOD>JaxrsGeneratorUtils.ADD.equals(name)) { generateAddMethod(method, helperClassName, base); } else if (JaxrsGeneratorUtils.GET.equals(name)) { generateGetMethod(method); } else if (JaxrsGeneratorUtils.LIST.equals(name)) { generateListMethod(method); } else if (JaxrsGeneratorUtils.REMOVE.equals(name)) { generateRemoveMethod(method); } else if (JaxrsGeneratorUtils.UPDATE.equals(name)) { generateUpdateMethod(method, helperClassName, base); } else if (<END_MOD>org.ovirt.api.metamodel.tool.<START_MOD>util.JaxrsGeneratorUtils.isAddSignature(method)) { generateAddSignature<END_MOD>(method); } else if (org.ovirt.api.metamodel.tool.<START_MOD>util.JaxrsGeneratorUtils.isUpdateSignature(method)) { generateUpdateSignature<END_MOD>(method); } else if (org.ovirt.api.metamodel.tool.<START_MOD>util.JaxrsGeneratorUtils.isActionSignature(method)) { generateActionSignature<END_MOD>(method); } else { generateActionMethod(method<START_MOD>, helperClassName, base); } }<END_MOD>
private void generateActionMethod(org.ovirt.api.metamodel.concepts.Method method<START_MOD>, org.ovirt.api.metamodel.concepts.Name helperClassName, boolean base<END_MOD>) { javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.POST.class); javaBuffer.addImport(javax.ws.rs.Path.class); javaBuffer.addImport(javax.ws.rs.core.Response.class); javaBuffer.addImport(javaPackages.getXjcPackageName(), "Action"); javaBuffer.addImport(javaPackages.getXjcPackageName(), "Actionable"); generateDoc(method); javaBuffer.addLine("@POST"); javaBuffer.addLine( %s }) generateMediaTypes()); javaBuffer.addLine("@Actionable"); javaBuffer.addLine("@Path(\"%s\")", jaxrsNames.getActionPath(method.getName())); <START_MOD>java.lang.String methodName = jaxrsNames.getMethodName(method.getName()); if (base) { javaBuffer.addLine( Response %s(Action action) { methodName); writeHelperInvocation(helperClassName, "action", method.getName()); javaBuffer.addLine("}"); } else { <END_MOD>addResponseReturnMethod(((jaxrsNames.getMethodName(method.getName())) +   action) }<START_MOD> javaBuffer.addLine(); }<END_MOD>
<START_MOD>private void generateUpdateSignature(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) { java.lang.System.err.println((("Method \"" + method) + "\" doesn\'t have any struct parameter")); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); java.lang.String methodName = concatenateName(method, method.getBase().getName()); javaBuffer.addLine((("default %s " + methodName) + "(%s %s) {"), mainTypeReference.getText(), mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); javaBuffer.addLine("throw new UnsupportedOperationException();"); javaBuffer.addLine("}"); }<END_MOD>
<START_MOD>private void initVariables(org.ovirt.api.metamodel.concepts.Service service) { resourceName = jaxrsNames.getInterfaceName(service); helperName = new org.ovirt.api.metamodel.tool.JavaClassName(resourceName.getPackageName(), ((resourceName.getSimpleName()) + "Helper")); serviceMethods = service.getDeclaredMethods(); baseMethods = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getBaseMethodsMap(serviceMethods); javaBuffer = new org.ovirt.api.metamodel.tool.JavaClassBuffer(); javaBuffer.setClassName(helperName); javaBuffer.addImport(resourceName); }<END_MOD>
<START_MOD>private void writeHelperInvocation(org.ovirt.api.metamodel.concepts.Name helperClassName, java.lang.String parameterName, org.ovirt.api.metamodel.concepts.Name methodName) { java.lang.String helperMethodName = ("get" + (javaNames.getJavaClassStyleName(methodName))) + "Signature"; javaBuffer.addLine("try {"); javaBuffer.addLine((((((((("return (Response)" + (javaNames.getJavaClassStyleName(helperClassName))) + ".") + helperMethodName) + "(") + parameterName) + ").invoke(this, ") + parameterName) + ");")); javaBuffer.addLine("} catch(Exception e) {"); javaBuffer.addLine("throw new IllegalStateException(\"Failed to find or invoke API method. The failure is in auto-generated code and indicates a bug in the JAX-RS intrafaces generation process\", e);"); javaBuffer.addLine("}"); }<END_MOD>
<START_MOD>private void writeActionValidationMethodName(org.ovirt.api.metamodel.concepts.Method method) { javaBuffer.addLine("public static void validate%s(Action action) {", javaNames.getJavaClassStyleName(method.getName())); }<END_MOD>
<START_MOD>private static void updateBaseMethodsMap(org.ovirt.api.metamodel.concepts.Method method, java.util.List<org.ovirt.api.metamodel.concepts.Method> methods, java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods) { for (org.ovirt.api.metamodel.concepts.Method currentMethod : methods) { if (((currentMethod.getBase()) != null) && (currentMethod.getBase().equals(method))) { org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.add(baseMethods, method, currentMethod); } } }<END_MOD>
<START_MOD>public static boolean isActionSignature(org.ovirt.api.metamodel.concepts.Method method) { return (((method.getBase()) != null) && (!(method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.ADD)))) && (!(method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.UPDATE))); }<END_MOD>
<START_MOD>private static void add(java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods, org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Method currentMethod) { if (!(baseMethods.containsKey(method))) { baseMethods.put(method, new java.util.HashSet()); } java.util.Set<org.ovirt.api.metamodel.concepts.Method> signatures = ((java.util.Set<org.ovirt.api.metamodel.concepts.Method>) (baseMethods.get(method))); signatures.add(currentMethod); }<END_MOD>
<START_MOD>private void generateValidationMethodName(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter parameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainAddParameter(method); javaBuffer.addImports(schemaNames.getXjcTypeReference(parameter.getType()).getImports()); javaBuffer.addLine("public static void validate%s(%s %s) {", javaNames.getJavaClassStyleName(method.getName()), javaNames.getJavaClassStyleName(parameter.getName()), javaNames.getJavaMemberStyleName(parameter.getName())); }<END_MOD>
<START_MOD>public static org.ovirt.api.metamodel.concepts.Parameter getMainAddParameter(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = method.getParameters().stream().filter(( x) -> ((x.getType()) instanceof org.ovirt.api.metamodel.concepts.StructType) || ((x.getType()) instanceof org.ovirt.api.metamodel.concepts.ListType)).findFirst().orElse(null); return mainParameter; }<END_MOD>
<START_MOD>public static boolean isAddSignature(org.ovirt.api.metamodel.concepts.Method method) { return ((method.getBase()) != null) && (method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.ADD)); }<END_MOD>
<START_MOD>public static org.ovirt.api.metamodel.concepts.Parameter getMainUpdateParameter(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = method.getParameters().stream().filter(( x) -> (x.getType()) instanceof org.ovirt.api.metamodel.concepts.StructType).findFirst().orElse(null); return mainParameter; }<END_MOD>
<START_MOD>public static boolean isUpdateSignature(org.ovirt.api.metamodel.concepts.Method method) { return ((method.getBase()) != null) && (method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.UPDATE)); }<END_MOD>
<START_MOD>public static java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> getBaseMethodsMap(java.util.List<org.ovirt.api.metamodel.concepts.Method> methods) { java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods = new java.util.HashMap<>(); methods.forEach(( x) -> updateBaseMethodsMap(x, methods, baseMethods)); return baseMethods; }<END_MOD>
<START_MOD>private void closeSignatureDetectionMethod() { javaBuffer.addLine("else {"); javaBuffer.addLine("return null;"); javaBuffer.addLine("}"); javaBuffer.addLine("}"); }<END_MOD>
<START_MOD>private void generateAddSignature(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainAddParameter(method); if (mainParameter == null) { java.lang.System.err.println((("Method \"" + method) + "\" doesn\'t have any struct parameter")); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); java.lang.String parameterName = javaNames.getJavaMemberStyleName(mainParameter.getName()); java.lang.String methodName = concatenateName(method, method.getBase().getName()); javaBuffer.addLine((("default Response " + methodName) + "(%s %s) {"), mainTypeReference.getText(), parameterName); javaBuffer.addLine("throw new UnsupportedOperationException();"); javaBuffer.addLine("}"); javaBuffer.addLine(); }<END_MOD>
<START_MOD>private static boolean isAttributesContained(java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> mandatoryAttributes1, java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> mandatoryAttributes2) { return org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.toNames(mandatoryAttributes2).containsAll(org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.toNames(mandatoryAttributes1)); }<END_MOD>
<START_MOD>private static java.util.List<org.ovirt.api.metamodel.concepts.Name> toNames(java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> attributes) { java.util.List<org.ovirt.api.metamodel.concepts.Name> names = new java.util.ArrayList<>(); for (org.ovirt.api.metamodel.concepts.MemberInvolvementTree attribute : attributes) { names.add(((attribute.getAlternative()) == null ? attribute.shallowToString() : org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.combineAlternatives(attribute))); } return names; }<END_MOD>
<START_MOD>private void generateValidation(org.ovirt.api.metamodel.concepts.Method method) { generateValidationMethodName(method); for (org.ovirt.api.metamodel.concepts.Parameter parameter : method.getParameters()) { generateParameterValidation(parameter); } javaBuffer.addLine("}"); }<END_MOD>
<START_MOD>private void generateHelperCode(org.ovirt.api.metamodel.concepts.Method method) { boolean base = baseMethods.containsKey(method); org.ovirt.api.metamodel.concepts.Name name = method.getName(); if ((((((JaxrsGeneratorUtils.GET.equals(name)) || (JaxrsGeneratorUtils.LIST.equals(name))) || (JaxrsGeneratorUtils.REMOVE.equals(name))) || (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isAddSignature(method))) || (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isUpdateSignature(method))) || (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isActionSignature(method))) { return; } if ((JaxrsGeneratorUtils.ADD.equals(name)) || (JaxrsGeneratorUtils.UPDATE.equals(name))) { if (base) { generateSignatureDetection(method); } else { if (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isMandatoryParametersExist(method)) { generateValidation(method); } else { } } } else { if (base) { generateActionSignatureDetection(method, serviceMethods); } else if (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isMandatoryParametersExist(method)) { if (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isMandatoryParametersExist(method)) { generateActionValidation(method); } else { } } } }<END_MOD>
<START_MOD>private void generateActionSignature(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); org.ovirt.api.metamodel.concepts.Name methodName = new org.ovirt.api.metamodel.concepts.Name(method.getBase().getName()); methodName.addWords(method.getName().getWords()); javaBuffer.addLine("Response %s(Action action) {", jaxrsNames.getMethodName(methodName)); javaBuffer.addLine("throw new UnsupportedOperationException();"); javaBuffer.addLine("}"); }<END_MOD>
<START_MOD>private void generateParameterValidation(org.ovirt.api.metamodel.concepts.Parameter parameter) { for (org.ovirt.api.metamodel.concepts.MemberInvolvementTree attribute : parameter.getMandatoryAttributes()) { java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> list = stackAttributeComponents(attribute); java.lang.String attributePath = getAttributePath(list); java.lang.String name = javaNames.getJavaMemberStyleName(parameter.getName()); javaBuffer.addLine((("if (" + name) + "==null")); javaBuffer.addLine(getFullAttributeCheck(javaNames.getJavaMemberStyleName(parameter.getName()), list, org.ovirt.api.metamodel.tool.JaxrsHelperGenerator.Operator.OR)); javaBuffer.addLine(((("throw new IllegalArgumentException(\"Invalid input, " + name) + attributePath) + " is mandatory\");")); javaBuffer.addLine("}"); javaBuffer.addLine(); } }<END_MOD>
<START_MOD>public static boolean isContained(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Method method2) { if (method.getName().equals(method2.getName())) { return false; } if (((method.getBase()) == null) || ((method2.getBase()) == null)) { return false; } if (!(method.getBase().getName().equals(method2.getBase().getName()))) { return false; } return (org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.isParametersContained(method.getMandatoryParameters(), method2.getMandatoryParameters())) && (org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.isAttributesContained(method.getMandatoryAttributes(), method2.getMandatoryAttributes())); }<END_MOD>
<START_MOD>private void generateSignatureDetection(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter parameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainAddParameter(method); javaBuffer.addImports(schemaNames.getXjcTypeReference(parameter.getType()).getImports()); org.ovirt.api.metamodel.concepts.Name methodName = getSignatureDetectionMethodName(method); org.ovirt.api.metamodel.concepts.Name parameterName = parameter.getName(); javaBuffer.addLine("public static Method %s(%s %s) throws NoSuchMethodException, SecurityException {", javaNames.getJavaMemberStyleName(methodName), javaNames.getJavaClassStyleName(parameterName), javaNames.getJavaMemberStyleName(parameterName)); generateParameterValidation(parameter); java.util.Set<org.ovirt.api.metamodel.concepts.Method> signatures = baseMethods.get(method); org.ovirt.api.metamodel.tool.JaxrsHelperGenerator.CyclicIterator iterator = new org.ovirt.api.metamodel.tool.JaxrsHelperGenerator.CyclicIterator(signatures); while (iterator.hasNext()) { org.ovirt.api.metamodel.concepts.Method signature = iterator.next(); if (!(org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.isContained(signature, signatures))) { handleSignature(method.getName(), signature, parameterName); iterator.remove(); } } closeSignatureDetectionMethod(); }<END_MOD>
<START_MOD>private java.lang.String getFullAttributeCheck(java.lang.String paramName, java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> list, org.ovirt.api.metamodel.tool.JaxrsHelperGenerator.Operator operator) { java.lang.StringBuilder builder = new java.lang.StringBuilder(); for (int i = 0; i < (list.size()); i++) { builder.append(operator.getPaddedSign()).append(paramName).append(getAttributePath(list.subList(0, (i + 1)))).append(operator.comaprison).append("null"); } java.lang.String attributeCheck = builder.toString(); if (attributeCheck.endsWith(".size()!=0!=null")) { attributeCheck = attributeCheck.substring(0, ((attributeCheck.length()) - 6)); } return attributeCheck; }<END_MOD>
<START_MOD>private void generateActionValidation(org.ovirt.api.metamodel.concepts.Method method) { writeActionValidationMethodName(method); for (org.ovirt.api.metamodel.concepts.Parameter parameter : method.getParameters()) { generateActionParameterValidation(parameter); } javaBuffer.addLine("}"); }<END_MOD>
<START_MOD>private java.lang.String getAttributePath(java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> list) { java.lang.StringBuilder attributePath = new java.lang.StringBuilder(); for (int i = 0; i < (list.size()); i++) { org.ovirt.api.metamodel.concepts.MemberInvolvementTree current = list.get(i); attributePath.append(".get").append(javaNames.getJavaClassStyleName(current.getName())).append("()"); if (current.isCollection()) { if (i == ((list.size()) - 1)) { attributePath.append(".get").append(javaNames.getJavaClassStyleName(current.getName())).append("().size()!=0"); } else { attributePath.append(".get").append(javaNames.getJavaClassStyleName(current.getName())).append("().get(0)"); } } } return attributePath.toString(); }<END_MOD>
<START_MOD>private void generateHelper(org.ovirt.api.metamodel.concepts.Service service) { initVariables(service); serviceMethods.forEach(( x) -> generateHelperCode(x)); try { javaBuffer.write(outDir); } catch (java.io.IOException exception) { exception.printStackTrace(); } }<END_MOD>
<START_MOD>public static boolean isContained(org.ovirt.api.metamodel.concepts.Method method, java.util.Collection<org.ovirt.api.metamodel.concepts.Method> methods) { for (org.ovirt.api.metamodel.concepts.Method currentMethod : methods) { if (org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.isContained(method, currentMethod)) { return true; } } return false; }<END_MOD>
<START_MOD>private static boolean isParametersContained(java.util.List<org.ovirt.api.metamodel.concepts.Parameter> mandatoryParameters1, java.util.List<org.ovirt.api.metamodel.concepts.Parameter> mandatoryParameters2) { java.util.List<org.ovirt.api.metamodel.concepts.Name> names1 = new java.util.ArrayList<>(); java.util.List<org.ovirt.api.metamodel.concepts.Name> names2 = new java.util.ArrayList<>(); for (org.ovirt.api.metamodel.concepts.Parameter p : mandatoryParameters1) { names1.add(p.getName()); } for (org.ovirt.api.metamodel.concepts.Parameter p : mandatoryParameters2) { names2.add(p.getName()); } return mandatoryParameters2.containsAll(mandatoryParameters1); }<END_MOD>
<START_MOD>private static org.ovirt.api.metamodel.concepts.Name combineAlternatives(org.ovirt.api.metamodel.concepts.MemberInvolvementTree attribute) { org.ovirt.api.metamodel.concepts.Name name1 = attribute.shallowToString(); org.ovirt.api.metamodel.concepts.Name name2 = attribute.getAlternative().shallowToString(); if ((name1.toString().compareTo(name2.toString())) < 0) { name1.addWords(name2.getWords()); return name1; } else { name2.addWords(name1.getWords()); return name2; } }<END_MOD>
public void updateInitialRunFields() { getIsSysprepPossible().setEntity(getIsWindowsOS()); getIsSysprepEnabled().setEntity(((getInitializationType()) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep))); getIsCloudInitPossible().setEntity((!(getIsWindowsOS()))); getIsCloudInitEnabled().setEntity(((getInitializationType()) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit))); getIsCloudInitEnabled().setIsAvailable((!(getIsWindowsOS()))); <START_MOD>if ((getIsSysprepPossible().getEntity()) && (getIsSysprepEnabled().getEntity())) { getVmInitModel().updateSysprepDomain(null); <END_MOD>}<START_MOD> }<END_MOD>
private void vmInitEnabledChanged() { if (!(getVmInitEnabled().getEntity())) { getSysprepEnabled().setEntity(false); getCloudInitEnabled().setEntity(false); } else { getSysprepEnabled().setEntity(getIsWindowsOS()); getCloudInitEnabled().setEntity((!(getIsWindowsOS()))); autoSetHostname(); <START_MOD>if (getSysprepEnabled().getEntity()) { getVmInitModel().updateSysprepDomain(null); <END_MOD>} }<START_MOD> }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<java.lang.String> addMacs(java.util.List<java.lang.String> macs) { java.util.List<java.lang.String> notAddedMacs = new java.util.ArrayList<>(macs.size()); for (java.lang.String mac : macs) { if (addMac(mac)) { notAddedMacs.add(mac); } } return notAddedMacs; }<END_MOD>
public void moveMacsOfUpdatedCluster(org.ovirt.engine.core.compat.Guid <START_MOD>sourceMacPoolId<END_MOD>, org.ovirt.engine.core.compat.Guid <START_MOD>targetMacPoolId<END_MOD>, org.ovirt.engine.core.compat.Guid <START_MOD>idOfClusterHavingSourceMacPool<END_MOD>, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(<START_MOD>sourceMacPoolId<END_MOD>); java.util.Objects.requireNonNull(<START_MOD>targetMacPoolId<END_MOD>); if (needToMigrateMacs(<START_MOD>sourceMacPoolId<END_MOD>, <START_MOD>targetMacPoolId<END_MOD>)) { <START_MOD>java.util.List<java.lang.String> macToMigrate = vmNicDao.getAllMacsByClusterId<END_MOD>(<START_MOD>idOfClusterHavingSourceMacPool); migrateMacsToAnotherMacPool(sourceMacPoolId<END_MOD>, <START_MOD>targetMacPoolId<END_MOD>, <START_MOD>macToMigrate<END_MOD>, commandContext); } }
private void <START_MOD>migrateMacsToAnotherMacPool<END_MOD>(org.ovirt.engine.core.compat.Guid <START_MOD>sourceMacPoolId<END_MOD>, org.ovirt.engine.core.compat.Guid <START_MOD>targetMacPoolId<END_MOD>, <START_MOD>java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>List<java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String><END_MOD> <START_MOD>macToMigrate<END_MOD>, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(<START_MOD>macToMigrate<END_MOD>); org.ovirt.engine.core.bll.network.macpool.MacPool sourcePool = poolPerCluster.getMacPoolById(<START_MOD>sourceMacPoolId<END_MOD>, commandContext); org.ovirt.engine.core.bll.network.macpool.MacPool targetPool = poolPerCluster.getMacPoolById(<START_MOD>targetMacPoolId<END_MOD>, commandContext); for (java.lang.String mac : <START_MOD>macToMigrate<END_MOD>) { sourcePool.freeMac(mac); targetPool.forceAddMac(mac); } }
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); final boolean shouldSetNewMacPoolOnAllClusters = newMacPoolId != null; if (shouldSetNewMacPoolOnAllClusters) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { this.<START_MOD>moveMacs<END_MOD>.updateClusterAndMoveMacs(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()); } } }
public org.ovirt.engine.api.model.Disks list() { <START_MOD>throw<END_MOD> new <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs.WebApplicationException(javax.ws.rs<END_MOD>.core.<START_MOD>Response<END_MOD>.<START_MOD>status(Response<END_MOD>.<START_MOD>Status.NOT_IMPLEMENTED).build<END_MOD>()); }
@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error( to add VM. The reasons are: {} java.lang.String.join(",", errorMessages)); return; } if (!(addVmLease(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.AddVmCommand.getVmId()))) { return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); <START_MOD>getVmDeviceUtils().updateVirtioScsiController(getVm().getStaticData(), getParameters().isVirtioScsiEnabled()); <END_MOD>setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } discardHelper.logIfDisksWithIllegalPassDiscardExist(org.ovirt.engine.core.bll.AddVmCommand.getVmId()); }
@org.junit.Test public void statusSupportedForHostUpgrade() { assertThat(validator.statusSupportedForHostUpgrade(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
<START_MOD>private void removeImage() { org.ovirt.engine.core.common.action.RemoveImageParameters removeImageParams = new org.ovirt.engine.core.common.action.RemoveImageParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotFromTemplateCommand.getParameters().getDestinationImageId()); removeImageParams.setStorageDomainId(getDestinationStorageDomainId()); removeImageParams.setParentCommand(VdcActionType.RemoveImage); removeImageParams.setDbOperationScope(ImageDbOperationScope.NONE); removeImageParams.setShouldLockImage(false); removeImageParams.setCorrelationId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotFromTemplateCommand.getParameters().getCorrelationId()); removeImageParams.setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.compat.Guid.newGuid())); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalActionWithTasksContext(VdcActionType.RemoveImage, removeImageParams); if (!(returnValue.getSucceeded())) { addAuditLogOnRemoveFailure(); } }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(@javax.validation.constraints.NotNull org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Paused)) { return hosts; } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> goodHosts = new java.util.ArrayList<>(); final int allowedSwapUsage = org.apache.commons.lang.math.NumberUtils.toInt(parameters.get(PolicyUnitParameter.MAX_ALLOWED_SWAP_USAGE.getDbName()), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BlockMigrationOnSwapUsagePercentage)); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { if (isHostSwapping(vds, allowedSwapUsage)) { org.ovirt.engine.core.bll.scheduling.policyunits.SwapFilterPolicyUnit.log.debug("Host '{}' is swapping more than allowed. Ignoring it.", vds.getName()); messages.addMessage(vds.getId(), EngineMessage.VAR__DETAIL__SWAP_VALUE_ILLEGAL.toString()); continue; } goodHosts.add(vds); } return goodHosts; }<END_MOD>
<START_MOD>private boolean isHostSwapping(@javax.validation.constraints.NotNull org.ovirt.engine.core.common.businessentities.VDS host, int allowedSwapUsage) { if (!(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableSwapCheck))) { return false; } if (((((((host.getSwapTotal()) == null) || ((host.getSwapFree()) == null)) || ((host.getMemAvailable()) == null)) || ((host.getMemAvailable()) <= 0)) || ((host.getPhysicalMemMb()) == null)) || ((host.getPhysicalMemMb()) <= 0)) { return false; } long swap_total = host.getSwapTotal(); long swap_free = host.getSwapFree(); long mem_available = host.getMemAvailable(); long physical_mem_mb = host.getPhysicalMemMb(); return ((((swap_total - swap_free) - mem_available) * 100) / physical_mem_mb) > allowedSwapUsage; }<END_MOD>
@org.junit.Test public void externalNetworkNameChanged() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = mockExternalNetwork(); assertThat(validator.externalNetworkDetailsUnchanged(externalNetwork), isValid()); }
@org.junit.Test public void externalNetworkDescriptionChanged() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = mockExternalNetwork(); assertThat(validator.externalNetworkDetailsUnchanged(externalNetwork), isValid()); }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { <START_MOD>log.debug( non-compensation state, immediately releasing <END_MOD>macs<START_MOD> {}<END_MOD>.<START_MOD> macs); macPool.freeMacs<END_MOD>(<START_MOD>macs<END_MOD>); }
@java.lang.Override public void cleaningCompensationDataAfterSuccess() { <START_MOD>log.debug(( successfully executed, releasing macs: {} + (<END_MOD>macsToReleaseOnCommit<START_MOD>))); macPool<END_MOD>.<START_MOD>freeMacs<END_MOD>(<START_MOD>macsToReleaseOnCommit<END_MOD>); }
<START_MOD>private void mockThatDuringAddingToTargetPoolOnlyFirstMacWillBeAdded() { when(targetMacPool.addMacs(anyList())).thenAnswer(( invocation) -> { List<java.lang.String> macs = invocation.getArgument(0); return java.util.Collections.singletonList(macs.get(1)); }); }<END_MOD>
<START_MOD>private void mockLockObjectFactoryToDisableLocking() { when(lockedObjectFactory.createLockingInstance(any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any(java.util.concurrent.locks.ReentrantReadWriteLock.class))).thenAnswer(org.mockito.AdditionalAnswers.returnsArgAt(0)); }<END_MOD>
@java.lang.Override public java.lang.String toString() { java.lang.String prefix = ((TotalMilliseconds) < 0) <START_MOD>?<END_MOD> "-"<START_MOD> : ""<END_MOD>; return java.lang.String.format("%s%d.%02d:%02d:%02d.%03d", prefix, Days, Hours, Minutes, Seconds, Milliseconds); }
<START_MOD>@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { org.ovirt.engine.core.compat.Guid originalHostId = org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds(); return hostLocking.getSetupNetworksLock(originalHostId); }<END_MOD>
protected boolean perform() { try { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setStartTime(new java.util.Date()<START_MOD>); destinationHostLock = new org.ovirt.engine.core.utils.lock.EngineLock(hostLocking.getSetupNetworksLock(getDestinationVdsId())); lockManager.acquireLockWait(destinationHostLock<END_MOD>); if (((unplugPassthroughNics()) && (connectLunDisks(getDestinationVdsId()))) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } runningFailed(); return false; } catch (java.lang.Exception e) { runningFailed(); throw e; } }
public java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSetupNetworksLock(org.ovirt.engine.core.compat.Guid hostId) { return java.util.Collections.singletonMap(((LockingGroup.HOST_NETWORK.name()) + (hostId.toString())), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.HOST_NETWORK, EngineMessage.<START_MOD>ACTION_TYPE_FAILED_SETUP_NETWORKS_OR_REFRESH_OR_MIGRATION_IN_PROGRESS<END_MOD>)); }
@java.lang.Override protected void runningFailed() { try { cleanupPassthroughVnics(getDestinationVdsId()); } finally { super.runningFailed(); <START_MOD>lockManager.releaseLock(destinationHostLock); <END_MOD>} }
java.lang.String <START_MOD>ACTION_TYPE_FAILED_SETUP_NETWORKS_OR_REFRESH_OR_MIGRATION_IN_PROGRESS<END_MOD>();
@java.lang.Override public void runningSucceded() { try { getDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugPassthroughNics(); } finally { super.runningSucceded(); <START_MOD>lockManager.releaseLock(destinationHostLock); <END_MOD>} }
<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn sealDisks(java.lang.String vmId, java.lang.String jobId, java.util.List<java.util.Map<java.lang.String, java.lang.String>> volumes);<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { if (getDiskImages().isEmpty()) { org.ovirt.engine.core.bll.SealVmTemplateCommand.setSucceeded(true); return; } org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters(); parameters.setVmId(org.ovirt.engine.core.bll.SealVmTemplateCommand.getParameters().getVmTemplateId()); parameters.setJobId(org.ovirt.engine.core.bll.SealVmTemplateCommand.getParameters().getHostJobId()); getDiskImages().forEach(( diskImage) -> parameters.addVolume(diskImage.getStorageIds().get(0), diskImage.getId(), diskImage.getImageId())); lockTemplateInDb(); lockDiskImagesInDb(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithFailover(VDSCommandType.SealDisks, parameters, getDiskImages().get(0).getStoragePoolId(), this); if (!(vdsReturnValue.getSucceeded())) { setCommandStatus(CommandStatus.FAILED); unlockDiskImagesInDb(); unlockTemplateInDb(); } setSucceeded(vdsReturnValue.getSucceeded()); }<END_MOD>
@java.lang.Override protected void endSuccessfully() { setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getVmTemplateId()); setVmId(getVmIdFromImageParameters()); isVmInDb = (org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm()) != null; vmStaticDao.incrementDbGeneration(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); for (org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getImagesParameters()) { org.ovirt.engine.core.bll.Backend.getInstance().endAction(p.getCommandType(), p, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); } if ((reloadVmTemplateFromDB()) != null) { endDefaultOperations(); } checkTrustedService(); <START_MOD>sealVmTemplate(); <END_MOD>org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded(true); }
private void endSuccessfullySynchronous() { if ((reloadVmTemplateFromDB()) != null) { endDefaultOperations(); } <START_MOD>sealVmTemplate(); <END_MOD>org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded(true); }
<START_MOD>private void sealVmTemplate() { if (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().isSealTemplate())) { return; } org.ovirt.engine.core.common.action.SealVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.SealVmTemplateParameters(); parameters.setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(VdcActionType.SealVmTemplate, parameters, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn sealDisks(java.lang.String vmId, java.lang.String jobId, java.util.List<java.util.Map<java.lang.String, java.lang.String>> volumes) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.seal").withParameter("vmID", vmId).withParameter("job_id", jobId).withOptionalParameterAsList("volumes", volumes).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }<END_MOD>
<START_MOD>private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImages() { if ((diskImages) == null) { diskImages = diskDao.getAllForVm(org.ovirt.engine.core.bll.SealVmTemplateCommand.getVmTemplateId()).stream().map(( disk) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))).collect(java.util.stream.Collectors.toList()); } return diskImages; }<END_MOD>
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("vmId", vmId).append("jobId", jobId).append("volumes", volumes); }<END_MOD>
<START_MOD>@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> locks = new java.util.HashMap<>(); locks.put(org.ovirt.engine.core.bll.SealVmTemplateCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.TEMPLATE, EngineMessage.VMT_SEALING)); getDiskImages().forEach(( diskImage) -> locks.put(diskImage.getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, EngineMessage.VMT_SEALING))); return locks; }<END_MOD>
<START_MOD>public void addVolume(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid imageId, org.ovirt.engine.core.compat.Guid volumeId) { volumes.add(new org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters.VolumeAddress(storageDomainId, imageId, volumeId)); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeVdsBrokerCommand() { result = org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getBroker().sealDisks(org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getParameters().getVmId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getParameters().getJobId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getParameters().getVolumes().stream().map(this::mapToEndpoint).collect(java.util.stream.Collectors.toList())); org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.proceedProxyReturnValue(); }<END_MOD>
<START_MOD>@java.lang.Override protected void endWithFailure() { super.endWithFailure(); unlockDiskImagesInDb(); unlockTemplateInDb(); }<END_MOD>
<START_MOD>private void lockDiskImagesInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { getDiskImages().forEach(( diskImage) -> { getCompensationContext().snapshotEntityStatus(diskImage.getImage()); diskImage.setImageStatus(ImageStatus.LOCKED); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(diskImage.getImageId(), ImageStatus.LOCKED); }); getCompensationContext().stateChanged(); return null; }); }<END_MOD>
<START_MOD>private java.util.Map<java.lang.String, java.lang.String> mapToEndpoint(org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters.VolumeAddress volumeAddress) { java.util.Map<java.lang.String, java.lang.String> endpoint = new java.util.HashMap<>(); endpoint.put("sd_id", volumeAddress.getStorageDomainId().toString()); endpoint.put("img_id", volumeAddress.getImageId().toString()); endpoint.put("vol_id", volumeAddress.getVolumeId().toString()); return endpoint; }<END_MOD>
<START_MOD>private void unlockDiskImagesInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { getDiskImages().forEach(( diskImage) -> { diskImage.setImageStatus(ImageStatus.OK); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(diskImage.getImageId(), ImageStatus.OK); }); return null; }); }<END_MOD>
<START_MOD>public java.util.List<org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters.VolumeAddress> getVolumes() { return volumes; }<END_MOD>
<START_MOD>@java.lang.Override protected void endSuccessfully() { super.endSuccessfully(); unlockDiskImagesInDb(); unlockTemplateInDb(); }<END_MOD>
<START_MOD>private void assignLegalAndShared(boolean legalAndShared) { org.ovirt.engine.core.common.action.UpdateAllTemplateDisksParameters parameters = new org.ovirt.engine.core.common.action.UpdateAllTemplateDisksParameters(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId(), legalAndShared, (legalAndShared ? org.ovirt.engine.core.common.businessentities.storage.CopyVolumeType.SharedVol : null)); parameters.setParentCommand(org.ovirt.engine.core.bll.AddVmTemplateCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters()); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(VdcActionType.UpdateAllTemplateDisks, parameters, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); }<END_MOD>
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if (completedChildCount < (org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.AddVmTemplateCommand.getCommandId()).size())) { return false; } switch (org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getPhase()) { case CREATE_TEMPLATE : <START_MOD>if (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().isSealTemplate())) { <END_MOD>return true; } org.ovirt.engine.core.bll.AddVmTemplateCommand.<START_MOD>getParameters().setPhase(Phase.ASSIGN_ILLEGAL); break; case ASSIGN_ILLEGAL : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().setPhase(Phase.SEAL); break; case SEAL : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().setPhase(Phase.ASSIGN_LEGAL_SHARED); break; case ASSIGN_LEGAL_SHARED : return true; } org.ovirt.engine.core.bll.AddVmTemplateCommand.<END_MOD>persistCommandIfNeeded(); executeNextOperation(); return false; }
<START_MOD>private void sealVmTemplate() { org.ovirt.engine.core.common.action.SealVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.SealVmTemplateParameters(); parameters.setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); parameters.setParentCommand(org.ovirt.engine.core.bll.AddVmTemplateCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters()); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(VdcActionType.SealVmTemplate, parameters, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); }<END_MOD>
private static void switchTab(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.<START_MOD>gwtbootstrap3.client.ui.TabListItem<END_MOD>> mapping, org.ovirt.engine.ui.common.view.TabbedView view) { int lowestIndex = java.lang.Integer.MAX_VALUE; java.util.List<org.<START_MOD>gwtbootstrap3.client.ui.TabListItem<END_MOD>> allTabs = view.getTabPanel().getTabs(); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if ((allTabs.indexOf(mapping.get(invalidTabName))) < lowestIndex) { lowestIndex = allTabs.indexOf(mapping.get(invalidTabName)); } } if (lowestIndex != (java.lang.Integer.MAX_VALUE)) { view.getTabPanel().switchTab(allTabs.get(lowestIndex)); } }
@java.lang.Override public void onValidationComplete(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent event) { if (((event.getModel()) != null) && (event.getModel().equals(presenterWidget.getModel()))) { java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs = presenterWidget.getModel().getInvalidTabs(); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.<START_MOD>gwtbootstrap3.client.ui.TabListItem> mapping = view.getTabNameMapping(); org.<END_MOD>ovirt.engine.ui.common.<START_MOD>utils.ValidationTabSwitchHelper.markTabs(invalidTabs, mapping); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if (<END_MOD>view.<START_MOD>getTabPanel().getActiveTab().equals(mapping.get(invalidTabName))) { return; } }<END_MOD> org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.<START_MOD>switchTab(invalidTabs, mapping, <END_MOD>view<START_MOD>); } }<END_MOD>
public static com.google.gwt.event.shared.HandlerRegistration registerValidationHandler(final com.google.gwt.event.shared.EventBus eventBus, final org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?, ?> presenterWidget, final org.ovirt.engine.ui.common.view.TabbedView view) { return eventBus.addHandler(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent.getType(), new org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent.ValidationCompleteEventHandler() { @java.lang.Override public void onValidationComplete(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent event) { if (((event.getModel()) != null) && (event.getModel().equals(presenterWidget.getModel()))) { java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs = presenterWidget.getModel().getInvalidTabs(); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.<START_MOD>gwtbootstrap3.client.ui.TabListItem> mapping = view.getTabNameMapping(); org.<END_MOD>ovirt.engine.ui.common.<START_MOD>utils.ValidationTabSwitchHelper.markTabs(invalidTabs,<END_MOD> mapping<START_MOD>); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if (view.getTabPanel().getActiveTab().equals(mapping.get(invalidTabName))) { return; } }<END_MOD> org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.<START_MOD>switchTab<END_MOD>(invalidTabs, mapping<START_MOD>, view); } } }); }<END_MOD>
private void updateTabVisibilities(org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel object) { generalTab.setVisible(object.isGeneralTabVisible()); scheduleTab.setVisible(object.isScheduleTabVisible()); if ((object.getRecurrence().getSelectedItem()) != (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotScheduleRecurrence.UNKNOWN)) { } }
@java.lang.Override public java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.<START_MOD>gwtbootstrap3<END_MOD>.<START_MOD>client<END_MOD>.ui.<START_MOD>TabListItem<END_MOD>> getTabNameMapping() { return ((org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget) (getContentWidget())).getTabNameMapping(); }
@java.lang.Override public void init(java.lang.String title, java.lang.String width, java.lang.String height, boolean closeIconVisible) { asWidget().setWidth(width); asWidget().setHeight(height); asWidget().setCloseIconButtonVisible(closeIconVisible); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel object) { driver.edit(object); initLists(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (propName.equals("IsValid")) { onIsValidPropertyChange(object); } else if (propName.equals("IsGrouppedByTarget")) { updateListByGropping(object); } } }); iscsiTargetToLunView.edit(object); iscsiLunToTargetView.edit(object); <START_MOD>dialogTabPanel.switchTab((object.getIsGrouppedByTarget() ? <END_MOD>targetsToLunTab<START_MOD> :<END_MOD> lunToTargetsTab)); updateListByGropping(object); }
@java.lang.Override public java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.<START_MOD>gwtbootstrap3<END_MOD>.<START_MOD>client<END_MOD>.ui.<START_MOD>TabListItem<END_MOD>> getTabNameMapping() { return tabMap; }
@java.lang.Override public void <START_MOD>show<END_MOD>() { <START_MOD>super<END_MOD>.<START_MOD>show<END_MOD>(); <START_MOD>contentScrollPanel.getElement().getStyle().setHeight(((getOffsetHeight())<END_MOD> <START_MOD>- 100), Unit.PX); contentPanel.getElement().getStyle().setProperty("minHeight", ((getOffsetHeight()) - 100), Unit.PX<END_MOD>); }
@<START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>Override<END_MOD> public void <START_MOD>setHeight<END_MOD>(<START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String<END_MOD> <START_MOD>height<END_MOD>) { <START_MOD>super<END_MOD>.<START_MOD>setHeight<END_MOD>(<START_MOD>height<END_MOD>); }
@java.lang.Override @com.google.gwt.uibinder.client.UiChild(tagname = "header", limit = 1) public void setHeader(<START_MOD>java.lang.String headerTitle) { <END_MOD>com.google.gwt.user.client.ui.<START_MOD>HTMLPanel<END_MOD> <START_MOD>headerTitlePanel<END_MOD> <START_MOD>=<END_MOD> <START_MOD>new com<END_MOD>.<START_MOD>google.gwt.user.client.ui.HTMLPanel<END_MOD>(<START_MOD>"H4", headerTitle<END_MOD>); headerTitlePanel.<START_MOD>addStyleName<END_MOD>(<START_MOD>Styles.MODAL_TITLE);<END_MOD> <START_MOD>if ((header.getWidgetCount()) > 1) { header.remove(((header.getWidgetCount()) - 1)<END_MOD>); }<START_MOD> header.add(headerTitlePanel); }<END_MOD>
public java.util.List<org.<START_MOD>gwtbootstrap3<END_MOD>.<START_MOD>client<END_MOD>.ui.<START_MOD>TabListItem<END_MOD>> getTabs() { java.util.List<org.<START_MOD>gwtbootstrap3<END_MOD>.<START_MOD>client<END_MOD>.ui.<START_MOD>TabListItem<END_MOD>> tabs = new java.util.ArrayList<>(); for (int i = 0; i < (<START_MOD>navTabs<END_MOD>.getWidgetCount()); i++) { com.google.gwt.user.client.ui.Widget tab = <START_MOD>navTabs<END_MOD>.getWidget(i); if (tab instanceof org.<START_MOD>gwtbootstrap3<END_MOD>.<START_MOD>client<END_MOD>.ui.<START_MOD>TabListItem<END_MOD>) { tabs.add(((org.<START_MOD>gwtbootstrap3<END_MOD>.<START_MOD>client<END_MOD>.ui.<START_MOD>TabListItem<END_MOD>) (tab))); } } return tabs; }
@java.lang.Override public void setHelpCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { }
@java.lang.Override public final java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.<START_MOD>gwtbootstrap3<END_MOD>.<START_MOD>client<END_MOD>.ui.<START_MOD>TabListItem<END_MOD>> getTabNameMapping() { return tabMap; }
public <START_MOD>org.gwtbootstrap3.client.ui.TabListItem<END_MOD> <START_MOD>getTabListItem<END_MOD>() { <START_MOD>return<END_MOD> <START_MOD>tabListItem<END_MOD>; }
java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.<START_MOD>gwtbootstrap3<END_MOD>.<START_MOD>client<END_MOD>.ui.<START_MOD>TabListItem<END_MOD>> getTabNameMapping();
public void <START_MOD>setNoScroll<END_MOD>(<START_MOD>boolean<END_MOD> <START_MOD>value<END_MOD>) { <START_MOD>if<END_MOD> <START_MOD>(value)<END_MOD> <START_MOD>{<END_MOD> <START_MOD>contentScrollPanel<END_MOD>.<START_MOD>getElement<END_MOD>(<START_MOD>).getStyle<END_MOD>()<START_MOD>.setOverflow(Overflow.VISIBLE<END_MOD>); }<START_MOD> }<END_MOD>
private static void markTabs(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.<START_MOD>gwtbootstrap3<END_MOD>.<START_MOD>client<END_MOD>.ui.<START_MOD>TabListItem<END_MOD>> mapping) { for (java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.TabName, org.<START_MOD>gwtbootstrap3<END_MOD>.<START_MOD>client<END_MOD>.ui.<START_MOD>TabListItem<END_MOD>> entry : mapping.entrySet()) { if (invalidTabs.contains(entry.getKey())) { } else { } } }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ManagePolicyUnitModel flush() { return <START_MOD>null<END_MOD>; }
private void revealDiskPanel(final org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel disk) { boolean isInVm = (disk.getVm()) != null; <START_MOD>radioButtonsPanel<END_MOD>.setVisible(isNewLunDiskEnabled); externalDiskPanel.setVisible(((isNewLunDiskEnabled) && ((disk.getDiskStorageType().getEntity()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN)))); aliasEditor.setFocus((!isInVm)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ("IsChangable".equals(propName)) { if ((disk.getDiskStorageType().getIsChangable()) && (disk.isEditEnabled())) { enableWidget(<START_MOD>radioButtonsPanel<END_MOD>); } else { disableWidget(<START_MOD>radioButtonsPanel<END_MOD>); } } }
@java.lang.Override public void <START_MOD>onValueChange<END_MOD>(com.google.gwt.event.<START_MOD>logical<END_MOD>.<START_MOD>shared<END_MOD>.<START_MOD>ValueChangeEvent<java.lang.Boolean><END_MOD> event) { disk.getDiskStorageType().setEntity(DiskStorageType.LUN); revealStorageView(disk); revealDiskPanel(disk); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (disk.getIsModelDisabled().getEntity()) { disableWidget(getWidget()); enableWidget(<START_MOD>radioButtonsPanel<END_MOD>); enableWidget(datacenterEditor); disk.getDefaultCommand().setIsExecutionAllowed(false); disk.setIsChangeable(false); } else { enableWidget(getWidget()); disk.getDefaultCommand().setIsExecutionAllowed(true); disk.setIsChangeable(true); driver.edit(disk); } }
@java.lang.Override public void <START_MOD>onValueChange<END_MOD>(com.google.gwt.event.<START_MOD>logical<END_MOD>.<START_MOD>shared<END_MOD>.<START_MOD>ValueChangeEvent<java.lang.Boolean><END_MOD> event) { disk.getDiskStorageType().setEntity(DiskStorageType.LUN); revealDiskPanel(disk); }
@java.lang.Override public java.lang.String getRawValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel model) { return (java.lang.String.valueOf(model.getSize())) + <START_MOD>(org.ovirt.engine.ui.common.widget.uicommon.storage.SanStorageTargetToLunList.constants.gb())<END_MOD>; }
@java.lang.Override public java.lang.String getRawValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel model) { return (java.lang.String.valueOf(model.getSize())) + <START_MOD>(org.ovirt.engine.ui.common.widget.uicommon.storage.SanStorageLunToTargetList.constants.gb())<END_MOD>; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VM object) { return (<START_MOD>(<END_MOD>java.lang.String.valueOf(object.getVmMemSizeMb())) +   <START_MOD>  + (org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageVmBackupView.constants.mb());<END_MOD> }
private java.lang.String renderMemory(double memory) { if (memory <= 0) { return "0"; } return memory > (java.lang.Math.abs(((org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.MB_GB_THRESHOLD) * (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.GIGA)))) ? org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.diskSizeRenderer.render((memory / (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.GIGA))) : ((int) (memory)) + <START_MOD>(org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.constants.mb())<END_MOD>; }
private java.lang.String renderHumanReadableSize(long size) { long sizeInBytes = org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.BYTES).longValue(); if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_GB)) { return (<START_MOD>(<END_MOD>org.ovirt.engine.core.common.utils.SizeConverter.convert(sizeInBytes, SizeUnit.BYTES, SizeUnit.GiB).longValue()) +   <START_MOD>  + (org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.constants.gb());<END_MOD> } else if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_MB)) { return (<START_MOD>(<END_MOD>org.ovirt.engine.core.common.utils.SizeConverter.convert(sizeInBytes, SizeUnit.BYTES, SizeUnit.MiB).longValue()) +   <START_MOD>  + (org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.constants.mb());<END_MOD> } else if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_KB)) { return (<START_MOD>(<END_MOD>org.ovirt.engine.core.common.utils.SizeConverter.convert(sizeInBytes, SizeUnit.BYTES, SizeUnit.KiB).longValue()) +   <START_MOD>  + (org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.constants.kb());<END_MOD> } else { return <START_MOD>(sizeInBytes +     + (org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.constants.bytes2());<END_MOD> } }
@java.lang.Override public java.lang.String render(T sizeInMB) { return sizeInMB != null ? (<START_MOD>(<END_MOD>sizeInMB.toString()) +   <START_MOD>  + (org.ovirt.engine.ui.common.widget.renderer.MemorySizeRenderer.constants.mb())<END_MOD> : org.ovirt.engine.ui.common.widget.renderer.MemorySizeRenderer.constants.unAvailablePropertyLabel(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData object) { return (<START_MOD>(<END_MOD>java.lang.String.valueOf(object.getVm().getVmMemSizeMb())) +   <START_MOD>  + (constants.mb());<END_MOD> }
@java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return   1 <START_MOD>  + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.AbstractFindStoragePopupView.constants.gb());<END_MOD> } return <START_MOD>(<END_MOD>(storage.getAvailableDiskSize()) +   <START_MOD>  + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.AbstractFindStoragePopupView.constants.gb());<END_MOD> }
private java.lang.String renderGigabyteSize(long size) { long sizeInGB = ((unit) == (org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit.GiB)) ? size : org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.GiB).longValue(); return <START_MOD>((<END_MOD>sizeInGB >= 1 ? sizeInGB :   1 <START_MOD>+     + (org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.constants.gb());<END_MOD> }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData) { int size = registerVmData.getVm().getVmMemSizeMb(); return <START_MOD>(<END_MOD>size +   <START_MOD>  + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterVmPopupView.constants.mb());<END_MOD> }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VM object) { return (<START_MOD>(<END_MOD>java.lang.String.valueOf(object.getVmMemSizeMb())) +   <START_MOD>  + (org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageRegisterVmView.constants.mb());<END_MOD> }
@java.lang.Override public java.lang.String getValue(java.lang.Object object) { int size = getEntity(object).getMemSizeMb(); return <START_MOD>(<END_MOD>size +   <START_MOD>  + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterTemplatePopupView.constants.mb());<END_MOD> }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Quota object) { double value; double allocated = 0; double used = 0; if ((object.getGlobalQuotaStorage()) != null) { allocated = object.getGlobalQuotaStorage().getStorageSizeGB(); used = object.getGlobalQuotaStorage().getStorageSizeGBUsage(); } else { for (org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage : object.getQuotaStorages()) { if (!(QuotaStorage.UNLIMITED.equals(quotaStorage.getStorageSizeGB()))) { allocated += quotaStorage.getStorageSizeGB(); used += quotaStorage.getStorageSizeGBUsage(); } else { allocated = org.ovirt.engine.core.common.businessentities.QuotaStorage.UNLIMITED; break; } } } value = allocated - used; java.lang.String returnVal; if (allocated < 0) { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.unlimited(); } else if (value <= 0) { returnVal =   <START_MOD>  + (org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.gb());<END_MOD> } else { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.diskSizeRenderer.render(value); } return returnVal; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return (<START_MOD>(<END_MOD>java.lang.String.valueOf(object.getMemSizeMb())) +   <START_MOD>  + (org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageTemplateBackupView.constants.mb());<END_MOD> }
private void initTable() { org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain> nameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { return storage.getStorageName(); } }; storageDomainItems.setColumnWidth(nameColumn, "280px"); storageDomainItems.addColumn(nameColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.nameStorage()); org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain> freeSpaceColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return   1 <START_MOD>  + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.gb());<END_MOD> } return (<START_MOD>(<END_MOD>storage.getAvailableDiskSize()) +   <START_MOD>  + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.gb());<END_MOD> } }; storageDomainItems.setColumnWidth(freeSpaceColumn, "80px"); storageDomainItems.addColumn(freeSpaceColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.freeSpaceStorage()); }
@java.lang.Override public java.lang.String getValue(java.lang.Object object) { return <START_MOD>(<END_MOD>(java.lang.String.valueOf(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm().getVmMemSizeMb())) +   <START_MOD>  + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmFromExportDomainPopupView.constants.mb());<END_MOD> }
@java.lang.Override public java.lang.String getValue(java.lang.Object object) { return <START_MOD>(<END_MOD>(java.lang.String.valueOf(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData) (object)).getTemplate().getMemSizeMb())) +   <START_MOD>  + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportTemplatePopupView.constants.mb());<END_MOD> }
<START_MOD>java.lang.String bytes2();<END_MOD>
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Quota object) { int value; long allocated = 0; long used = 0; if ((object.getGlobalQuotaCluster()) != null) { allocated = object.getGlobalQuotaCluster().getMemSizeMB(); used = object.getGlobalQuotaCluster().getMemSizeMBUsage(); } else { for (org.ovirt.engine.core.common.businessentities.QuotaCluster quotaCluster : object.getQuotaClusters()) { if (!(QuotaCluster.UNLIMITED_MEM.equals(quotaCluster.getMemSizeMB()))) { allocated += ((quotaCluster.getMemSizeMB()) != null) ? quotaCluster.getMemSizeMB() : 0; used += quotaCluster.getMemSizeMBUsage(); } else { allocated = org.ovirt.engine.core.common.businessentities.QuotaCluster.UNLIMITED_MEM; break; } } } value = ((int) (allocated - used)); java.lang.String returnVal; if (allocated < 0) { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.unlimited(); } else if (value <= 0) { returnVal =   <START_MOD>  + (org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.mb());<END_MOD> } else if (value <= (5 * 1024)) { returnVal = value + <START_MOD>(org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.mb())<END_MOD>; } else { returnVal = (org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.decimalFormat.format((((double) (value)) / 1024))) + <START_MOD>(org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.gb())<END_MOD>; } return returnVal; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (((java.lang.Double) (asVm(entity).getActualDiskWithSnapshotsSize())).intValue()) + <START_MOD>(org.ovirt.engine.ui.userportal.widget.resources.VmTable.constants.gb())<END_MOD>; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return (<START_MOD>(<END_MOD>java.lang.String.valueOf(object.getMemSizeMb())) +   <START_MOD>  + (org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageRegisterTemplateView.constants.mb());<END_MOD> }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (((java.lang.Double) (asVm(entity).getDiskSize())).intValue()) + <START_MOD>(org.ovirt.engine.ui.userportal.widget.resources.VmTable.constants.gb())<END_MOD>; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (((java.lang.Double) (asDisk(entity).getActualDiskWithSnapshotsSize())).intValue()) + <START_MOD>(org.ovirt.engine.ui.userportal.widget.resources.VmTable.constants.gb())<END_MOD>; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (asDisk(entity).getSizeInGigabytes()) + <START_MOD>(org.ovirt.engine.ui.userportal.widget.resources.VmTable.constants.gb())<END_MOD>; }
@java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return   1 <START_MOD>  + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.gb());<END_MOD> } return <START_MOD>(<END_MOD>(storage.getAvailableDiskSize()) +   <START_MOD>  + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.gb());<END_MOD> }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.DiskImage object) { return (<START_MOD>(<END_MOD>java.lang.String.valueOf(object.getSizeInGigabytes())) +   <START_MOD>  + (org.ovirt.engine.ui.common.widget.uicommon.template.TemplateDiskListModelTable.constants.gb());<END_MOD> }
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().updateVmwareVisible(model.getVmwarePropertiesModel().getIsAvailable()); } }<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().updateDataCenterVisible(model.getDataCenter().getIsAvailable()); } }<END_MOD>
<START_MOD>void updateDataCenterVisible(boolean isAvailable);<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().updateKvmVisible(model.getKvmPropertiesModel().getIsAvailable()); } }<END_MOD>
<START_MOD>public void updateDataCenterVisible(boolean isAvailable) { if (isAvailable) { typeEditorRow.removeStyleName(style.headerSeparator()); datacenterEditorRow.addStyleName(style.headerSeparator()); } else { typeEditorRow.addStyleName(style.headerSeparator()); datacenterEditorRow.removeStyleName(style.headerSeparator()); } }<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().updateXenVisible(model.getXenPropertiesModel().getIsAvailable()); } }<END_MOD>
@java.lang.Override protected boolean validateImageTransfer(org.ovirt.engine.core.compat.Guid imageId) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(imageId))); org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = getDiskValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = getDiskImagesValidator(diskImage); <START_MOD>org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator StorageDomainValidator = getStorageDomainValidator(storageDomainDao.getForStoragePool(diskImage.getStorageIds().get(0), diskImage.getStoragePoolId())); <END_MOD>return (((<START_MOD>(<END_MOD>validate(diskValidator.isDiskExists())) && (validate(diskValidator.isDiskAttachedToAnyVm()))) && (validate(diskImagesValidator.diskImagesNotIllegal()))) && (validate(diskImagesValidator.diskImagesNotLocked()))<START_MOD>) && (validate(StorageDomainValidator.isDomainExistAndActive()))<END_MOD>; }
protected void initializeSuppliedImage() { super.initSuppliedImage(transferImageCommand); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); doReturn(diskImage).when(diskDao).get(any()); doReturn(diskValidator).when(getCommand()).getDiskValidator(any()); doReturn(diskImagesValidator).when(getCommand()).getDiskImagesValidator(any()); doReturn(ValidationResult.VALID).when(diskValidator).isDiskAttachedToAnyVm(); doReturn(ValidationResult.VALID).when(diskValidator).isDiskExists(); doReturn(ValidationResult.VALID).when(diskImagesValidator).diskImagesNotLocked(); doReturn(ValidationResult.VALID).when(diskImagesValidator).diskImagesNotIllegal(); <START_MOD>doReturn(ValidationResult.VALID).when(storageDomainValidator).isDomainExistAndActive(); <END_MOD>}
private boolean updateVms() { for (org.ovirt.engine.core.common.businessentities.VmStatic vm : vmsLockedForUpdate) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); updateParams.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); upgradeGraphicsDevices(vm, updateParams); updateRngDeviceIfNecessary(vm.getId(), vm.getCustomCompatibilityVersion(), updateParams); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { <START_MOD>addCustomValue("VmName", vm.getName()); org.ovirt.engine.core.bll.UpdateClusterCommand.addCustomValue("Message", "todo"); auditLogDirector.log(this, AuditLogType.CLUSTER_CANNOT_UPDATE_VM_COMPATIBILITY_VERSION); vm.setCustomCompatibilityVersion(oldCluster.getCompatibilityVersion()); vmStaticDao.update(vm); } }<END_MOD> return <START_MOD>true<END_MOD>; }
private boolean updateTemplates() { for (org.ovirt.engine.core.common.businessentities.VmTemplate template : templatesLockedForUpdate) { template.setClusterCompatibilityVersion(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()); final org.ovirt.engine.core.common.action.UpdateVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.UpdateVmTemplateParameters(template); parameters.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); parameters.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); updateRngDeviceIfNecessary(template.getId(), template.getCustomCompatibilityVersion(), parameters); if (!(parameters.isUpdateRngDevice())) { continue; } final org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVmTemplate, parameters, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { <START_MOD>addCustomValue("TemplateName", template.getName()); org.ovirt.engine.core.bll.UpdateClusterCommand.addCustomValue("Message", "todo"); auditLogDirector.log(this, AuditLogType.CLUSTER_CANNOT_UPDATE_TEMPLATE_COMPATIBILITY_VERSION); template.setCustomCompatibilityVersion(oldCluster.getCompatibilityVersion()); vmTemplateDao.update(template); } }<END_MOD> return <START_MOD>true<END_MOD>; }
@java.lang.Override public void initialize() throws org.quartz.SchedulerConfigException { executorService = new java.util.concurrent.ThreadPoolExecutor(10, count, 60L, java.util.concurrent.TimeUnit.SECONDS, new java.util.concurrent.ArrayBlockingQueue<java.lang.Runnable>(<START_MOD>queueSize<END_MOD>), new org.ovirt.engine.core.utils.timer.SchedulerThreadPool.SchedulerThreadFactory(this)); }
private void <START_MOD>generateParameterSpec<END_MOD>(org.ovirt.api.metamodel.concepts.Parameter parameter) { org.ovirt.api.metamodel.concepts.Type type = parameter.getType(); <START_MOD>org.ovirt.api.metamodel.concepts.Name name = parameter.getName(); java.lang.String symbol = rubyNames.getMemberStyleName(name); java.lang.String clazz = null; if (type instanceof org.ovirt.api.metamodel.concepts.PrimitiveType) { org.ovirt.api.metamodel.concepts.Model model = type.getModel(); if (type == (model.getStringType())) { clazz = "String"; } else if (type == (model.getBooleanType())) { clazz = "TrueClass"; } else if (type == (model.getIntegerType())) { clazz = "Fixnum"; } else if (type == (model.getDecimalType())) { clazz = "Float"; } else if (type == (model.getDateType())) { clazz = "DateTime"; } else { throw new java.lang.IllegalArgumentException((( know how to generate the parameter spec for type   + type) + "\"")); } } else if (type instanceof org.ovirt.api.metamodel.concepts.ListType) { clazz = "List"; } if (clazz != null) { <END_MOD>buffer.addLine( %<START_MOD>2<END_MOD>$s<START_MOD>].freeze, symbol, clazz); } }<END_MOD>
protected void setQcowCompat(org.ovirt.engine.core.common.businessentities.storage.Image diskImage, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newStorageDomainID, <START_MOD>java.util.List<org.ovirt.engine.core.compat.Guid> hostsForExecution, <END_MOD>boolean shouldPrepareAndTeardown) { diskImage.setQcowCompat(QcowCompat.QCOW2_V2); if (org.ovirt.engine.core.common.FeatureSupported.qcowCompatSupported(org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand.getStoragePool().getCompatibilityVersion())) { org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, <START_MOD>hostsForExecution, <END_MOD>shouldPrepareAndTeardown); if (qemuImageInfo != null) { diskImage.setQcowCompat(qemuImageInfo.getQcowCompat()); } } }
private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { log.info( successful transfer for {} getTransferDescription()); if (stopImageTransferSession(context.entity)) { org.ovirt.engine.core.compat.Guid transferingVdsId = context.entity.getVdsId(); if (verifyImage(transferingVdsId)) { setVolumeLegalityInStorage(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.LEGAL_IMAGE); if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getVolumeFormat().equals(VolumeFormat.COW)) { setQcowCompat(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImageId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStorageDomainId(), <START_MOD>java.util.Collections.emptyList(), <END_MOD>false); imageDao.update(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage()); } org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.unLockImage(); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); } else { setImageStatus(ImageStatus.ILLEGAL); updateEntityPhase(ImageTransferPhase.FINALIZING_FAILURE); } tearDownImage(context.entity.getVdsId()); } }
<START_MOD>private void setQcowCompatByQemuImageInfo(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newStorageDomainID) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIdToExecuteQemuImageInfo = java.util.Collections.emptyList(); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> attachedVmsInfo = vmDao.getVmsWithPlugInfo(getDestinationDiskImage().getId()); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice> pair : attachedVmsInfo) { org.ovirt.engine.core.common.businessentities.VM vm = pair.getFirst(); if (java.lang.Boolean.TRUE.equals(pair.getSecond().isPlugged())) { if (vm.isStartingOrUp()) { hostIdToExecuteQemuImageInfo.add(vm.getRunOnVds()); break; } } } setQcowCompat(getDestinationDiskImage().getImage(), storagePoolId, newImageGroupId, newImageId, newStorageDomainID, hostIdToExecuteQemuImageInfo, (hostIdToExecuteQemuImageInfo == null)); }<END_MOD>
private void showPanelItems(boolean show) { securityCheckbox.setVisible(show); bugCheckbox.setVisible(show); enhancementCheckbox.setVisible(show); <START_MOD>enhancementCheckboxIcon<END_MOD>.setVisible(show); <START_MOD>bugCheckboxIcon<END_MOD>.setVisible(show); <START_MOD>securityCheckboxIcon<END_MOD>.setVisible(show); }
@java.lang.Override public <START_MOD>org.gwtbootstrap3.client.ui.constants.IconType getValue(org.ovirt.engine.core.common.businessentities.Erratum erratum) { if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.BUGFIX)) { getCell().setColor(<END_MOD>com.google.gwt.<START_MOD>safehtml.shared.SafeHtmlUtils.fromTrustedString("ORANGERED")); return org.gwtbootstrap3.client.ui.constants.IconType.BUG; } else<END_MOD> if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.<START_MOD>ENHANCEMENT)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString("BLUE")); return org.gwtbootstrap3.client.ui.constants.IconType.PLUS_SQUARE<END_MOD>; } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.SECURITY)) { <START_MOD>getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString("DARKORANGE")); return org.gwtbootstrap3.client.ui.constants.IconType.WARNING<END_MOD>; } return null; }
<START_MOD>protected com.google.gwt.safehtml.shared.SafeHtml getRenderedImage(org.gwtbootstrap3.client.ui.constants.IconType value, java.lang.String color) { return org.ovirt.engine.ui.common.widget.table.cell.IconTypeCell.TEMPLATE.icon(value.getCssName(), color); }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.common.widget.table.cell.Template("<span class=\"fa {0} inline-icon\" style=\"color: {1}\"/>") com.google.gwt.safehtml.shared.SafeHtml icon(java.lang.String className, java.lang.String color);<END_MOD>
<START_MOD>private void setQcowCompatByQemuImageInfo(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newStorageDomainID) { org.ovirt.engine.core.compat.Guid hostIdToExecuteQemuImageInfo = null; java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> attachedVmsInfo = vmDao.getVmsWithPlugInfo(getDestinationDiskImage().getId()); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice> pair : attachedVmsInfo) { org.ovirt.engine.core.common.businessentities.VM vm = pair.getFirst(); if (java.lang.Boolean.TRUE.equals(pair.getSecond().isPlugged())) { if (vm.isStartingOrUp()) { hostIdToExecuteQemuImageInfo = vm.getRunOnVds(); break; } } } setQcowCompat(getDestinationDiskImage().getImage(), storagePoolId, newImageGroupId, newImageId, newStorageDomainID, hostIdToExecuteQemuImageInfo); }<END_MOD>
<START_MOD>@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(disk().format()); optional(disk().alias()); optional(disk().bootable()); optional(disk().description()); optional(disk().propagateErrors()); optional(disk().quota().id()); optional(disk().shareable()); optional(disk().sparse()); optional(disk().wipeAfterDelete()); }<END_MOD>
<START_MOD>@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(attachment().id()); optional(attachment().active()); optional(attachment().disk().readOnly()); }<END_MOD>
<START_MOD>@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(attachment().id()); mandatory(attachment().disk().snapshot().id()); optional(attachment().active()); }<END_MOD>
public static int getCdDeviceIndex(java.lang.String cdInterface) { switch (cdInterface) { case "scsi" : return <START_MOD>2<END_MOD>; case "ide" : return 2; case "sata" : return <START_MOD>2<END_MOD>; default : return -1; } }
<START_MOD>public boolean hasDiscardZeroesTheDataSupport() { return java.lang.Boolean.TRUE.equals(getDiscardZeroesData()); }<END_MOD>
<START_MOD>public boolean supportsDiscard() { return ((getDiscardMaxSize()) != null) && ((getDiscardMaxSize()) > 0); }<END_MOD>
private java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> getAddedLuns(java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> lunModels<START_MOD>, boolean selectedLuns, boolean includedLuns<END_MOD>) { java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = new java.util.LinkedList<>(); for (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lun : lunModels) { if ((<START_MOD>selectedLuns && <END_MOD>(lun.getIsSelected())<START_MOD>) || ((includedLuns<END_MOD> && (lun.getIsIncluded())) && ((org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(luns, new org.ovirt.engine.ui.uicommonweb.Linq.LunPredicate(lun))) == null))<START_MOD>)<END_MOD> { luns.add(lun); } } return luns; }
<START_MOD>private boolean isStorageDomainSupportDiscard(java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns) { for (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lun : luns) { java.lang.Long discardMaxSize = lun.getEntity().getDiscardMaxSize(); if ((discardMaxSize != null) && (discardMaxSize == 0)) { return false; } } return true; }<END_MOD>
<START_MOD>private void validateDiscardAfterDelete() { if ((getDiscardAfterDelete().getIsAvailable()) && (getDiscardAfterDelete().getEntity())) { org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase sanStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) (getCurrentStorageItem())); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = sanStorageModel.getAddedLuns(); if ((luns != null) && (!(isStorageDomainSupportDiscard(luns)))) { getDiscardAfterDelete().setIsValid(false); getDiscardAfterDelete().getInvalidityReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel.constants.discardIsNotSupportedByUnderlyingStorage()); return; } } getDiscardAfterDelete().setIsValid(true); }<END_MOD>
<START_MOD>public void updateLunWarningForDiscardAfterDelete() { if (getContainer().getDiscardAfterDelete().getEntity()) { for (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lunModel : getAddedLuns()) { if (!(lunSupportsDiscard(lunModel.getEntity()))) { setSelectedLunWarning(org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase.uiConstants.discardIsNotSupportedByUnderlyingStorage()); return; } } } setSelectedLunWarning(org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase.uiConstants.emptyString()); }<END_MOD>
<START_MOD>private boolean lunSupportsDiscard(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { return ((lun.getDiscardMaxSize()) != null) && ((lun.getDiscardMaxSize()) > 0); }<END_MOD>
<START_MOD>@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, T value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { org.gwtbootstrap3.client.ui.Icon icon = new org.gwtbootstrap3.client.ui.Icon(); org.gwtbootstrap3.client.ui.base.helper.StyleHelper.addEnumStyleName(icon, iconType); if (org.ovirt.engine.ui.common.widget.table.cell.AbstractIconButtonCell.isEnabled(value)) { icon.getElement().getStyle().setProperty("color", enabledColor); icon.getElement().getStyle().setProperty("cursor", "pointer"); } else { icon.getElement().getStyle().setProperty("color", disabledColor); icon.getElement().getStyle().setProperty("cursor", "default"); } sb.append(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(icon.toString())); }<END_MOD>
@java.lang.Override public void setInSlot(java.lang.Object slot, com.gwtplatform.mvp.client.PresenterWidget<?> content) { super.setInSlot(slot, content); if (slot == (tabContentSlot)) { try { com.gwtplatform.mvp.client.Presenter<?, ?> presenter = ((com.gwtplatform.mvp.client.Presenter<?, ?>) (content)); com.gwtplatform.mvp.client.proxy.TabContentProxy<?> proxy = ((com.gwtplatform.mvp.client.proxy.TabContentProxy<?>) (presenter.getProxy())); org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.getView().setActiveTabHistoryToken(proxy.getTargetHistoryToken()); <START_MOD>org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.getView().setActiveTab(proxy.getTab()); <END_MOD>} catch (java.lang.Exception e) { org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.logger.log(java.util.logging.Level.SEVERE,   while updating tab view e); } } }
@org.junit.Test public void testSetStatusForRequiredNetworksAbsentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = java.util.Arrays.asList(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1), createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID2, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME2)); <START_MOD>when(vdsStaticDao.countHostsInClusterThatMissNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, VDSStatus.Up)).thenReturn(666); underTest.setStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, <END_MOD>networks); verify(networkClusterDao).updateStatus(same(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.NON_OPERATIONAL)); }
@org.junit.Before public void setUp() { networkCluster = createNetworkCluster(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1); when(networkClusterDao.get(networkCluster.getId())).thenReturn(networkCluster); managementNetworkCluster = createNetworkCluster(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID); managementNetwork = createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_NAME); when(managementNetworkUtil.getManagementNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID)).thenReturn(managementNetwork); when(networkClusterDao.get(new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID))).thenReturn(managementNetworkCluster); <START_MOD>when(vdsDynamicDao.countHostsInClusterWithStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, VDSStatus.Up)).thenReturn(666); <END_MOD>}
@org.junit.Test public void testSetStatusForRequiredNetworkAbsentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); <START_MOD>when(vdsStaticDao.countHostsInClusterThatMissNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, VDSStatus.Up)).thenReturn(666); underTest.setStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, java.util.Collections.singletonList<END_MOD>(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1)<START_MOD>)<END_MOD>); verify(networkClusterDao).updateStatus(same(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.NON_OPERATIONAL)); }
@org.junit.Test public void testSetStatusForRequiredNetworkPresentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); <START_MOD>underTest.setStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, java.util.Collections.singletonList<END_MOD>(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1)<START_MOD>)); verify(vdsStaticDao).countHostsInClusterThatMissNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID<END_MOD>, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1<START_MOD>, VDSStatus.Up<END_MOD>); verify(networkClusterDao, never()).updateStatus(same(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.OPERATIONAL)); }
public void setStatus(org.ovirt.engine.core.compat.Guid clusterId, final java.util.Collection<org.ovirt.engine.core.common.businessentities.network.Network> networks) { <START_MOD>for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster<END_MOD> = <START_MOD>networkClusterDao.get(<END_MOD>new org.ovirt.engine.core.<START_MOD>common.businessentities.network.NetworkClusterId<END_MOD>(clusterId<START_MOD>, network.getId())); boolean doUpdateNetworkClusterStatus<END_MOD> = <START_MOD>networkCluster != null; if (<END_MOD>doUpdateNetworkClusterStatus<START_MOD>) {<END_MOD> if (networkCluster.isRequired()) { <START_MOD>updateStatusOfRequiredNetworkCluster<END_MOD>(networkCluster, network.getName()); } else { updateNetworkClusterStatus(networkCluster, NetworkStatus.OPERATIONAL); } } } }
public static java.lang.Long determineImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.Image sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid dstDomain, org.ovirt.engine.core.compat.Guid imageGroupID) { if (org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isInitialSizeSupportedForFormat(destFormat, dstDomain)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromStorage = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(storagePoolId, srcDomain, imageGroupID, sourceImage.getId()); return <START_MOD>(sourceImage.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW) ? <END_MOD>org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(imageInfoFromStorage.getActualSizeInBytes()<START_MOD>) : imageInfoFromStorage.getActualSizeInBytes(<END_MOD>); } return null; }
public static void redirectToModule(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException { org.ovirt.engine.core.sso.utils.SsoUtils.log.debug( redirectToModule try { org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request); org.ovirt.engine.core.uutils.net.URLBuilder redirectUrl = new org.ovirt.engine.core.uutils.net.URLBuilder(org.ovirt.engine.core.sso.utils.SsoUtils.getRedirectUrl(request).toString()).addParameter("code", ssoSession.getAuthorizationCode()); java.lang.String appUrl = ssoSession.getAppUrl(); if (org.apache.commons.lang.StringUtils.isNotEmpty(appUrl)) { redirectUrl.addParameter("app_url", appUrl); } <START_MOD>java.lang.String state = ssoSession.getState(); if (org.apache.commons.lang.StringUtils.isNotEmpty(state)) { redirectUrl.addParameter("state", state); } <END_MOD>response.sendRedirect(redirectUrl.build()); org.ovirt.engine.core.sso.utils.SsoUtils.log.debug( back to module: {} redirectUrl); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.SsoUtils.log.error( redirecting back to module: {} ex.getMessage()); org.ovirt.engine.core.sso.utils.SsoUtils.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex); } finally { org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request).cleanup(); } }
private static java.lang.String createTmpSsoClientConfFile(java.lang.String clientId, java.lang.String clientSecret, java.lang.String certificateFile, java.lang.String callbackPrefix) throws java.io.FileNotFoundException { <START_MOD>if (!(org.ovirt.engine.ssoreg.core.SsoLocalConfig.getInstance().getTmpDir().exists())) { org.ovirt.engine.ssoreg.core.SsoLocalConfig.getInstance().getTmpDir().mkdirs(); } <END_MOD>java.io.File tmpFile = new java.io.File(org.ovirt.engine.ssoreg.core.SsoLocalConfig.getInstance().getTmpDir(), java.lang.String.format("99_sso_client_%s.conf", java.lang.System.currentTimeMillis())); try (java.io.PrintWriter pw = new java.io.PrintWriter(new java.io.FileOutputStream(tmpFile))) { pw.println(java.lang.String.format("SSO_CLIENT_ID=%s", clientId)); pw.println(java.lang.String.format("SSO_CLIENT_SECRET=%s", clientSecret)); pw.println(java.lang.String.format("SSO_CLIENT_CERTIFICATE_FILE=%s", certificateFile)); pw.println(java.lang.String.format("SSO_CLIENT_CALLBACK_PREFIX=%s", callbackPrefix)); } return tmpFile.getAbsolutePath(); }
<START_MOD>public static java.lang.String createJWT(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession, java.lang.String clientId) throws java.security.NoSuchAlgorithmException { java.lang.String serverName = request.getServerName(); java.lang.String issuer = java.lang.String.format("%s://%s:%s", request.getScheme(), (org.apache.http.conn.util.InetAddressUtils.isIPv6Address(serverName) ? java.lang.String.format("[%s]", serverName) : serverName), request.getServerPort()); io.jsonwebtoken.JwtBuilder builder = io.jsonwebtoken.Jwts.builder().setId(ssoSession.getPrincipalRecord().<java.lang.String>get(Authz.PrincipalRecord.ID)).setIssuedAt(new java.util.Date(java.lang.System.currentTimeMillis())).setIssuer(issuer).setSubject(java.lang.String.format("%s@%s", ssoSession.getUserId(), ssoSession.getProfile())).setAudience(clientId).signWith(SignatureAlgorithm.HS256, org.ovirt.engine.core.sso.utils.SsoUtils.base64SecretBytes); io.jsonwebtoken.Claims claims = io.jsonwebtoken.Jwts.claims(); claims.put("sub", java.lang.String.format("%s@%s", ssoSession.getUserId(), ssoSession.getProfile())); claims.put("preferred_username", java.lang.String.format("%s@%s", ssoSession.getUserId(), ssoSession.getProfile())); claims.put("email", ssoSession.getPrincipalRecord().<java.lang.String>get(Authz.PrincipalRecord.EMAIL)); claims.put("name", ssoSession.getPrincipalRecord().<java.lang.String>get(Authz.PrincipalRecord.FIRST_NAME)); builder.setClaims(claims); return builder.compact(); }<END_MOD>
<START_MOD>protected java.lang.String findBestMatchForEmulatedMachine(java.lang.String currentEmulatedMachine, java.util.List<java.lang.String> candidateEmulatedMachines) { if (candidateEmulatedMachines.contains(currentEmulatedMachine)) { return currentEmulatedMachine; } return candidateEmulatedMachines.stream().max(org.ovirt.engine.core.bll.Comparator.comparingInt(( s) -> org.apache.commons.lang.StringUtils.indexOfDifference(currentEmulatedMachine, s))).orElse(currentEmulatedMachine); }<END_MOD>
<START_MOD>private void setQcowCompatForSnapshot(org.ovirt.engine.core.common.businessentities.storage.DiskImage snapshot) { try { org.ovirt.engine.core.common.businessentities.storage.DiskImage newImageIRS = getVolumeInfo(snapshot.getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), snapshot.getId(), snapshot.getImageId()); if ((newImageIRS != null) && (newImageIRS.getVolumeFormat().equals(VolumeFormat.COW))) { setQcowCompatByQemuImageInfo(snapshot.getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), snapshot.getId(), snapshot.getImageId()); } } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Unable to update the image info for image '{}' (image group: '{}') on domain '{}'", snapshot.getImageId(), snapshot.getId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId()); } }<END_MOD>
@java.lang.Override protected void endSuccessfully() { if (shouldUpdateStorageDisk()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = diskImageDao.getAllSnapshotsForImageGroup(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getDestImageGroupId()); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.setSnapshotForShareableDisk(snapshots); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage snapshot : snapshots) { imageStorageDomainMapDao.remove(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMapId(snapshot.getImageId(), snapshot.getStorageIds().get(0))); imageStorageDomainMapDao.save(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap(snapshot.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getQuotaId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getDiskProfileId())); <START_MOD>setQcowCompatForSnapshot(snapshot); <END_MOD>} } super.endSuccessfully(); }
@org.junit.Test public void testBadGuid() throws java.lang.Exception { try { new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResource(<START_MOD>org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.DATA_CENTER_ID<END_MOD>, <START_MOD>"foo"<END_MOD>); fail( WebApplicationException } catch (javax.ws.rs.WebApplicationException wae) { verifyNotFoundException(wae); } }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Network network) { validateParameters(network, "id|name"); java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = getNetworks(); <START_MOD>org.ovirt.engine.core.common.businessentities.network.Network net = null; <END_MOD>if (network.isSetId()) { <START_MOD>net = getNetworkById(network.getId(), networks); if (net == null) { notFound(org.ovirt.engine.api.model.Network.class); } } else if (network.isSetName()) { net = getNetworkByName(network.getName(), networks); if (net == null) { notFound(org.ovirt.engine.api.model.Network.class); } } return performCreate(VdcActionType.AttachNetworkToCluster, new <END_MOD>org.ovirt.engine.core.common.<START_MOD>action.AttachNetworkToClusterParameter(getCluster(), net), new org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResource.AttachedNetworkResolver(net<END_MOD>.getId()<START_MOD>)); }<END_MOD>
@java.lang.Override <START_MOD>public<END_MOD> <START_MOD>org.ovirt.engine.api.resource.DataCenterNetworkResource getNetworkResource(<END_MOD>java.lang.String <START_MOD>id<END_MOD>) { return <START_MOD>inject(<END_MOD>new <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.api.restapi.resource.BackendDataCenterNetworkResource(dataCenterId,<END_MOD> <START_MOD>id))<END_MOD>; }
protected boolean setAndValidateCpuProfile() { getVm().getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getClusterId()); getVm().getStaticData().setCpuProfileId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getCpuProfileId()); return validate(cpuProfileHelper.setAndValidateCpuProfile(getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.<START_MOD>getUserIdIfExternal<END_MOD>())); }
protected boolean setAndValidateCpuProfile() { if ((isInstanceType()) || (org.ovirt.engine.core.bll.UpdateVmTemplateCommand.isBlankTemplate())) { return true; } return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.<START_MOD>getUserIdIfExternal<END_MOD>())); }
protected boolean setAndValidateCpuProfile() { getVmTemplate().setClusterId(getClusterId()); getVmTemplate().setCpuProfileId(getParameters().getCpuProfileId()); return validate(cpuProfileHelper.setAndValidateCpuProfile(getVmTemplate(), <START_MOD>getUserIdIfExternal<END_MOD>())); }
protected boolean setAndValidateCpuProfile() { return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.CommonVmPoolCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.CommonVmPoolCommand.<START_MOD>getUserIdIfExternal<END_MOD>())); }
protected boolean setAndValidateCpuProfile() { return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.VmManagementCommandBase.<START_MOD>getUserIdIfExternal<END_MOD>())); }
<START_MOD>public org.ovirt.engine.core.compat.Guid getUserIdIfExternal() { return isInternalExecution() ? null : getUserId(); }<END_MOD>
protected boolean setAndValidateCpuProfile() { if ((org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getTemplateType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE)) { return true; } return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getMasterVm(), org.ovirt.engine.core.bll.AddVmTemplateCommand.<START_MOD>getUserIdIfExternal<END_MOD>())); }
@javax.ws.rs.PUT @javax.ws.rs.Consumes({ "application/xml", "application/json" }) public org.ovirt.engine.api.v3.types.V3Host update(org.ovirt.engine.api.v3.types.V3Host host) { <START_MOD>host =<END_MOD> adaptUpdate(getDelegate()::update, host); <START_MOD>org.ovirt.engine.api.v3.helpers.V3HostHelper.addStatistics(host); return host; <END_MOD>}
<START_MOD>private void registerExternalProvidersTrustStore(org.apache.http.impl.client.DefaultHttpClient httpClient) { try { java.security.KeyStore trustStore = java.security.KeyStore.getInstance(java.security.KeyStore.getDefaultType()); java.io.FileInputStream inputStream = new java.io.FileInputStream(new java.io.File(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStore().getAbsolutePath())); try { trustStore.load(inputStream, org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStorePassword().toCharArray()); } finally { inputStream.close(); } org.apache.http.conn.ssl.SSLSocketFactory socketFactory = new org.apache.http.conn.ssl.SSLSocketFactory(trustStore); org.apache.http.conn.scheme.Scheme sch = new org.apache.http.conn.scheme.Scheme("https", 443, socketFactory); httpClient.getConnectionManager().getSchemeRegistry().register(sch); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.provider.network.openstack.CustomizedRESTEasyConnector.log.warn("Cannot register external providers trust store: ", ex); } }<END_MOD>
<START_MOD>private void registerExternalProvidersTrustStore(org.apache.http.impl.client.DefaultHttpClient httpClient) { try { java.security.KeyStore trustStore = java.security.KeyStore.getInstance(java.security.KeyStore.getDefaultType()); java.io.FileInputStream inputStream = new java.io.FileInputStream(new java.io.File(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStore().getAbsolutePath())); try { trustStore.load(inputStream, org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStorePassword().toCharArray()); } finally { inputStream.close(); } org.apache.http.conn.ssl.SSLSocketFactory socketFactory = new org.apache.http.conn.ssl.SSLSocketFactory(trustStore); org.apache.http.conn.scheme.Scheme sch = new org.apache.http.conn.scheme.Scheme("https", 443, socketFactory); httpClient.getConnectionManager().getSchemeRegistry().register(sch); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.warn("Cannot register external providers trust store: ", ex); } }<END_MOD>
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) == null) { return false; } switch (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) { case GEO_REP : org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters(getSession().getMasterVolumeId(), getSession().getId()); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getActionType()); <START_MOD>parameters.setParentParameters(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters()); <END_MOD>org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(DRStep.REMOVE_TMP_SNAPSHOTS); <START_MOD>org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand<END_MOD>(VdcActionType.GlusterStorageGeoRepSyncInternal, parameters<START_MOD>, org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.cloneContextAndDetachFromParent()<END_MOD>); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; case REMOVE_TMP_SNAPSHOTS : removeDRSnapshots(); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(null); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; } return true; }
<START_MOD>public static boolean isValidCredentials(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials credentials) throws org.ovirt.engine.core.sso.utils.AuthenticationException { return org.ovirt.engine.core.sso.utils.SsoUtils.isValidCredentials(request, credentials, false); }<END_MOD>
<START_MOD>public static boolean isValidCredentials(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials credentials, boolean isInteractiveAuth) throws org.ovirt.engine.core.sso.utils.AuthenticationException { org.ovirt.engine.core.sso.utils.SsoContext ssoContext = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoContext(request); if (org.apache.commons.lang.StringUtils.isEmpty(credentials.getUsername())) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize((isInteractiveAuth ? SsoConstants.APP_ERROR_NO_USER_NAME_IN_CREDENTIALS_INTERACTIVE_AUTH : SsoConstants.APP_ERROR_NO_USER_NAME_IN_CREDENTIALS), ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } if (!(credentials.isProfileValid())) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_NO_VALID_PROFILE_IN_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } if (org.apache.commons.lang.StringUtils.isEmpty(credentials.getProfile())) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_NO_PROFILE_IN_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } return true; }<END_MOD>
private java.lang.String authenticateUser(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, org.ovirt.engine.core.sso.utils.Credentials userCredentials) throws java.io.IOException, javax.servlet.ServletException, org.ovirt.engine.core.sso.utils.AuthenticationException { if ((userCredentials == null) || (!(<START_MOD>org.ovirt.engine.core.sso.utils.SsoUtils.isValidCredentials(request, <END_MOD>userCredentials<START_MOD>, true<END_MOD>)))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_INVALID_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } try { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug( user using credentials response.addCookie(new javax.servlet.http.Cookie("profile", userCredentials.getProfile())); org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(ssoContext, request, userCredentials); return (request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_REDIRECT_TO_MODULE_URI); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { throw ex; } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.error( Server Error: {} ex.getMessage()); org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex.getMessage(), ex); } }
@java.lang.Override public org.ovirt.engine.core.sso.utils.AuthResult doAuth(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.NonInteractiveAuth.log.debug( Basic Auth org.ovirt.engine.core.sso.utils.Credentials credentials = org.ovirt.engine.core.sso.utils.SsoUtils.getUserCredentialsFromHeader(request); org.ovirt.engine.core.sso.utils.AuthResult retVal = new org.ovirt.engine.core.sso.utils.AuthResult(); if ((credentials == null) || (!(<START_MOD>org.ovirt.engine.core.sso.utils.SsoUtils.isValidCredentials(request, credentials<END_MOD>)))) { retVal.setStatus(Authn.AuthResult.CREDENTIALS_INVALID); } else { retVal.setCredentials(credentials); org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(org.ovirt.engine.core.sso.utils.SsoUtils.getSsoContext(request), request, credentials); retVal.setToken(((java.lang.String) (request.getAttribute(SsoConstants.HTTP_REQ_ATTR_ACCESS_TOKEN)))); if ((retVal.getToken()) != null) { org.ovirt.engine.core.sso.utils.NonInteractiveAuth.log.debug( authentication succeeded retVal.setStatus(Authn.AuthResult.SUCCESS); } else { retVal.setStatus(Authn.AuthResult.CREDENTIALS_INVALID); } } return retVal; }
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug( basic auth credentials from header org.ovirt.engine.core.sso.utils.Credentials credentials = org.ovirt.engine.core.sso.utils.SsoUtils.getUserCredentialsFromHeader(request); boolean credentialsValid = false; try { credentialsValid = (credentials != null) && (<START_MOD>org.ovirt.engine.core.sso.utils.SsoUtils.isValidCredentials(request, credentials<END_MOD>)); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.error( validating credentials: {} ex.getMessage()); org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug("Exception", ex); } if (credentialsValid) { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug( Valid redirecting to url: {} SsoConstants.INTERACTIVE_LOGIN_URI); org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request).setTempCredentials(credentials); response.sendRedirect(((request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_LOGIN_URI))); } else { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug( to url: {} SsoConstants.INTERACTIVE_LOGIN_NEXT_AUTH_URI); response.sendRedirect(((request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_LOGIN_NEXT_AUTH_URI))); } }
public org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid vdsId, boolean shouldPrepareAndTeardown) { if (vdsId == null) { vdsId = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldPrepareAndTeardown) { <START_MOD>prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } try { qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (resourceManager.runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { <END_MOD>org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.<START_MOD>log.error( to get qemu image info from storage e); } finally { if (shouldPrepareAndTeardown) { teardownImage<END_MOD>(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } <START_MOD>} return<END_MOD> qemuImageInfo<START_MOD>; }<END_MOD>
public java.lang.Long determineImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.Image sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid dstDomain, org.ovirt.engine.core.compat.Guid imageGroupID) { if (isInitialSizeSupportedForFormat(destFormat, dstDomain)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromStorage = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(storagePoolId, srcDomain, imageGroupID, sourceImage.getId()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(imageInfoFromStorage.getActualSizeInBytes()); } return null; }
public java.lang.Long determineTotalImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid dstDomain) { if (isInitialSizeSupportedForFormat(destFormat, dstDomain)) { double totalSizeForClonedDisk = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getTotalActualSizeOfDisk(sourceImage, <START_MOD>storageDomainDao<END_MOD>.get(dstDomain).getStorageStaticData()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(java.lang.Double.valueOf(totalSizeForClonedDisk).longValue()); } return null; }
public static java.lang.Long determineTotalImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid <START_MOD>srcDomain<END_MOD>) { if (org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isInitialSizeSupportedForFormat(destFormat, <START_MOD>srcDomain<END_MOD>)) { double totalSizeForClonedDisk = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getTotalActualSizeOfDisk(sourceImage, org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(<START_MOD>srcDomain<END_MOD>).getStorageStaticData()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(sourceImage.getVolumeFormat(), java.lang.Double.valueOf(totalSizeForClonedDisk).longValue()); } return null; }
private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase createEvent() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVds(host); return event; }
<START_MOD>private void verifyAuditLoggableBaseFilledProperly(org.ovirt.engine.core.bll.network.NetworkConfigurator underTest, org.ovirt.engine.core.common.AuditLogType auditLogType) { try { underTest.createManagementNetworkIfRequired(); } catch (org.ovirt.engine.core.bll.network.NetworkConfigurator.NetworkConfiguratorException e) { verify(auditLogDirector).log(auditLogableBaseArgumentCaptor.capture(), eq(auditLogType), anyString()); final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase capturedEvent = auditLogableBaseArgumentCaptor.getValue(); assertThat(capturedEvent.getVdsName(), is(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.HOST_NAME)); return; } fail("The test should lead to NetworkConfiguratorException"); }<END_MOD>
<START_MOD>@org.junit.Test public void testCreateManagementNetworkIfRequiredFailsOnDifferentVlanId() { host.setActiveNic(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_NAME); nic.setVlanId(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_VLAN_ID); managementNetwork.setVlanId(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.MANAGMENT_NETWORK_VLAN_ID); try { underTest.createManagementNetworkIfRequired(); } catch (org.ovirt.engine.core.bll.network.NetworkConfigurator.NetworkConfiguratorException e) { verify(auditLogDirector).log(auditLogableBaseArgumentCaptor.capture(), same(AuditLogType.VLAN_ID_MISMATCH_FOR_MANAGEMENT_NETWORK_CONFIGURATION), anyString()); final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase capturedEvent = auditLogableBaseArgumentCaptor.getValue(); assertThat(capturedEvent.getVdsName(), is(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.HOST_NAME)); final java.util.Map<java.lang.String, java.lang.String> capturedCustomValues = capturedEvent.getCustomValues(); assertThat(capturedCustomValues, hasEntry("vlanid", java.lang.String.valueOf(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_VLAN_ID))); assertThat(capturedCustomValues, hasEntry("mgmtvlanid", java.lang.String.valueOf(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.MANAGMENT_NETWORK_VLAN_ID))); assertThat(capturedCustomValues, hasEntry("interfacename", org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_NAME)); return; } fail("The test should lead to NetworkConfiguratorException"); }<END_MOD>
public static <T> java.util.List<java.lang.String> validateInputs(java.util.List<java.lang.Class<?>> validationGroupList, T parameters) { java.util.List<java.lang.String> messages = java.util.Collections.emptyList(); java.util.Set<javax.validation.ConstraintViolation<T>> violations = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, validationGroupList.toArray(new java.lang.Class<?>[validationGroupList.size()])); if (!(violations.isEmpty())) { messages = new java.util.ArrayList(violations.size()); for (javax.validation.ConstraintViolation<T> constraintViolation : violations) { messages.add(constraintViolation.getMessage()); javax.validation.metadata.ConstraintDescriptor<?> constraintDescriptor = constraintViolation.getConstraintDescriptor(); if (constraintDescriptor != null) { java.util.Map<java.lang.String, java.lang.Object> violationAttributes = constraintDescriptor.getAttributes(); for (java.util.Map.Entry violationAttribute : violationAttributes.entrySet()) { java.lang.String message = java.lang.String.format( %s violationAttribute.getKey(), violationAttribute.getValue()); messages.add(message); } } if ((constraintViolation.getPropertyPath()) != null) { messages.add(EngineMessage.ACTION_TYPE_FAILED_ATTRIBUTE_PATH.name()); messages.add(<START_MOD>org.ovirt.engine.core.common.utils.ValidationUtils.createSetVariableString("path",<END_MOD> constraintViolation.getPropertyPath())); } <START_MOD>messages.add(org.ovirt.engine.core.common.utils.ValidationUtils.createSetVariableString("validatedValue", constraintViolation.getInvalidValue())); <END_MOD>} } return messages; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { setIsFingerprintVerified(false); if (((getGlusterHostAddress().getEntity()) == null) || ((getGlusterHostAddress().getEntity().trim().length()) == 0)) { getGlusterHostFingerprint().setEntity(""); return; } fetchFingerprint(getGlusterHostAddress().getEntity()<START_MOD>, 22<END_MOD>); }
@java.lang.Override public void sendMessage(byte[] message) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { try { waitForConnect(); } finally { <START_MOD>org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message msg = <END_MOD>new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().send().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_DESTINATION, this.getRequestQueue()).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withContent(message)<START_MOD>; send(addCorrelationId(msg)<END_MOD>.build()); } }
@java.lang.Override public void sendMessage(byte[] message) { <START_MOD>org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message msg = <END_MOD>new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().send().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_DESTINATION, this.getRequestQueue()).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withContent(message)<START_MOD>; send(addCorrelationId(msg)<END_MOD>.build()); }
<START_MOD>@java.lang.Override protected void executeCommand() { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_VM_NAME, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()); addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_MEMORY_SIZE_MB, java.lang.String.valueOf(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getMemorySizeMb())); final org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.HotUnplugMemory, new org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.Params(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getRunOnVds(), getDeviceToHotUnplug())); if (!(vdsReturnValue.getSucceeded())) { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_ERROR_MESSAGE, vdsReturnValue.getVdsError().getMessage()); setReturnValueFailure(vdsReturnValue); return; } final org.ovirt.engine.core.common.businessentities.VmStatic nextRunConfigurationStatic = runInternalQuery(VdcQueryType.GetVmNextRunConfiguration, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId())).<org.ovirt.engine.core.common.businessentities.VM>getReturnValue().getStaticData(); final int finalMemorySize = (nextRunConfigurationStatic.getMemSizeMb()) - (org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getMemorySizeMb()); if (finalMemorySize > 0) { updateVm(nextRunConfigurationStatic, finalMemorySize); } org.ovirt.engine.core.bll.HotUnplugMemoryCommand.setSucceeded(true); }<END_MOD>
<START_MOD>@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if ((org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NEEDS_TO_BE_UP, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("vmId", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("vmName", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("currentVmState", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getStatus())); } if ((getDeviceToHotUnplug()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_MEMORY_DEVICE_NOT_FOUND, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("memorySize", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getMemorySizeMb()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("vmId", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("vmName", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getName())); } return true; }<END_MOD>
<START_MOD>private void updateVm(org.ovirt.engine.core.common.businessentities.VmStatic nextRunConfigurationStatic, int finalMemorySize) { nextRunConfigurationStatic.setMemSizeMb(finalMemorySize); final org.ovirt.engine.core.common.action.VmManagementParametersBase updateVmParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(nextRunConfigurationStatic); updateVmParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); runInternalAction(VdcActionType.UpdateVm, updateVmParams); }<END_MOD>
<START_MOD>public void setReturnValueFailure(org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValueFailure) { org.ovirt.engine.core.bll.HotUnplugMemoryCommand.setSucceeded(false); final org.ovirt.engine.core.common.errors.EngineFault engineFault = new org.ovirt.engine.core.common.errors.EngineFault(); engineFault.setError(returnValueFailure.getVdsError().getCode()); engineFault.setMessage(returnValueFailure.getVdsError().getMessage()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getReturnValue().setFault(engineFault); }<END_MOD>
<START_MOD>java.lang.String ACTION_TYPE_FAILED_VM_NEEDS_TO_BE_UP();<END_MOD>
<START_MOD>java.lang.String ACTION_TYPE_FAILED_VM_MEMORY_DEVICE_NOT_FOUND();<END_MOD>
<START_MOD>public static java.lang.Integer getSizeOfMemoryDeviceMb(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if ((memoryDevice.getType()) != (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) { throw new java.lang.RuntimeException(java.lang.String.format("Memory device expected but device %s passed of type %s", memoryDevice, memoryDevice.getType())); } return ((java.lang.Integer) (memoryDevice.getSpecParams().get(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE))); }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { return java.util.Collections.singletonList(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getVmId(), org.ovirt.engine.core.common.VdcObjectType.VM, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getActionType().getActionGroup())); }<END_MOD>
<START_MOD>protected org.ovirt.engine.core.common.businessentities.VmDevice getDeviceToHotUnplug() { if ((deviceToHotUnplug) == null) { deviceToHotUnplug = computeDeviceToHotUnplug(); } return deviceToHotUnplug; }<END_MOD>
<START_MOD>@java.lang.Override protected void init() { super.init(); setVmId(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getVmId()); }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.businessentities.VmDevice computeDeviceToHotUnplug() { final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> memoryDevices = vmDeviceDao.getVmDeviceByVmIdAndType(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId(), VmDeviceGeneralType.MEMORY); final java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmDevice> reversedMemoryDevices = new java.util.ArrayList(memoryDevices); java.util.Collections.reverse(reversedMemoryDevices); return memoryDevices.stream().filter(( device) -> java.util.Objects.equals(getParameters().getMemorySizeMb(), org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(device))).findFirst().orElse(null); }<END_MOD>
<START_MOD>@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { final java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> result = new java.util.HashMap(super.getSharedLocks()); result.put(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_BEING_UPDATED).with("vmName", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()))); return result; }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getReturnValue().getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.MEMORY_HOT_UNPLUGGED : org.ovirt.engine.core.common.AuditLogType.MEMORY_HOT_UNPLUG_FAILED; }<END_MOD>
<START_MOD>private void setQcowCompat(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid volumeId, org.ovirt.engine.core.common.businessentities.storage.DiskImage newDiskImage) { if (newDiskImage.getVolumeFormat().equals(VolumeFormat.COW)) { newDiskImage.setQcowCompat(QcowCompat.QCOW2_V2); org.ovirt.engine.core.common.businessentities.StoragePool sp = storagePoolDao.get(storagePoolId); if ((sp != null) && (org.ovirt.engine.core.common.FeatureSupported.qcowCompatSupported(sp.getCompatibilityVersion()))) { org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(storagePoolId, storageDomainId, diskId, volumeId, null, true); if (qemuImageInfo != null) { newDiskImage.setQcowCompat(qemuImageInfo.getQcowCompat()); } } } }<END_MOD>
<START_MOD>private void setQcowCompat(org.ovirt.engine.core.common.businessentities.storage.DiskImage newDiskImage) { if (newDiskImage.getVolumeFormat().equals(VolumeFormat.COW)) { try { setQcowCompatByQemuImageInfo(newDiskImage.getStoragePoolId(), newDiskImage.getId(), newDiskImage.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getStorageDomainId(), newDiskImage); imageDao.update(newDiskImage.getImage()); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Unable to update the image info for image '{}' (image group: '{}') on domain '{}'", newDiskImage.getImageId(), newDiskImage.getId(), org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getStorageDomainId()); } } }<END_MOD>
protected org.ovirt.engine.core.common.businessentities.VM setUpVm(org.ovirt.engine.core.compat.Guid id) {<START_MOD> org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = control.createMock(org.ovirt.engine.core.common.businessentities.VmStatic.class); expect(vmStatic.getId()).andReturn(id).anyTimes();<END_MOD> org.ovirt.engine.core.common.businessentities.VM vm = control.createMock(org.ovirt.engine.core.common.businessentities.VM.class); expect(vm.getId()).andReturn(id).anyTimes(); <START_MOD>expect(vm.getStaticData()).andReturn(vmStatic).anyTimes(); <END_MOD>return vm; }
private org.ovirt.engine.ui.frontend.server.dashboard.Dashboard populateUtilizationCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Dashboard dashboard = getDashboard(); long endTime = java.lang.System.currentTimeMillis(); dashboardCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_KEY, dashboard, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_CACHE_UPDATE_INTERVAL, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug( utilization cache updated in {}ms (endTime - startTime)); return dashboard; }
private org.ovirt.engine.ui.frontend.server.dashboard.Inventory populateInventoryCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Inventory inventory = lookupInventory(); long endTime = java.lang.System.currentTimeMillis(); inventoryCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_KEY, inventory, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_CACHE_UPDATE_INTERVAL, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug( inventoy cache updated in {}ms (endTime - startTime)); return inventory; }
private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase createAuditLog(final org.ovirt.engine.core.common.businessentities.network.VmNic iface) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.setVmId(iface.getVmId()); logable.addCustomValue("MACAddr", iface.getMacAddress()); logable.addCustomValue("IfaceName", iface.getName()); return logable; }
@java.lang.Override public void init(final T model) { super.init(model); model.getPropertyChangedEvent().addListener(<START_MOD>( ev, sender, args) -><END_MOD> { <START_MOD>org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel model1 = ((org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel) (sender)); <END_MOD>java.lang.<START_MOD>String propertyName = args.propertyName; if ("Message".equals(propertyName)) { getView().setMessageLabel(model1.getMessage()); } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleSubnetVisibility(model.getExport().getEntity()); model.getExport().getEntityChangedEvent().addListener((<END_MOD> ev, sender, args) <START_MOD>-> getView().toggleSubnetVisibility(model.getExport().getEntity())); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleProfilesVisibility(model.getProfiles().getIsAvailable()); model.getProfiles().getPropertyChangedEvent().addListener(( ev, sender, args) -> <END_MOD>{ <START_MOD>if ("IsAvailable".equals(args.<END_MOD>propertyName)) { getView().<START_MOD>toggleProfilesVisibility(model.getProfiles().getIsAvailable<END_MOD>()); } }<START_MOD>); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().setCommand(model.getAddQosCommand()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().addClickHandler(( event) -> getView().getQosButton().getCommand().execute()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().addMtuEditor();<END_MOD> }
public void addMenuItem(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { final com.google.gwt.user.client.ui.MenuItem menuItem = new com.google.gwt.user.client.ui.MenuItem(buttonDef.getText(), <START_MOD>((<END_MOD>com.google.gwt.user.client.Command<START_MOD>) (<END_MOD>() <START_MOD>-><END_MOD> { menuPanelPopup.asPopupPanel().hide(); buttonDef.onClick(null); }<START_MOD>))<END_MOD>); menuItem.setEnabled(buttonDef.isEnabled(null)); buttonDef.addInitializeHandler(( event) <START_MOD>-><END_MOD> menuItem.setEnabled(buttonDef.isEnabled(null))); menuPanelPopup.getMenuBar().addItem(menuItem); }
public boolean invokeAsString(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, JsFunction.RESULT_TYPE_STRING, <START_MOD>((<END_MOD>org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ResultHandler<java.lang.String>) (<START_MOD>(<END_MOD> result) <START_MOD>-> <END_MOD>{ this.resultValue = result; this.resultType = JsFunction.RESULT_TYPE_STRING; }<START_MOD>))<END_MOD>, errorHandler); }
public boolean invokeAsBoolean(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, JsFunction.RESULT_TYPE_BOOLEAN, <START_MOD>((<END_MOD>org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ResultHandler<java.lang.Boolean>) (<START_MOD>(<END_MOD> result) <START_MOD>-> <END_MOD>{ this.resultValue = result; this.resultType = JsFunction.RESULT_TYPE_BOOLEAN; }<START_MOD>))<END_MOD>, errorHandler); }
public boolean invokeAsNumber(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, JsFunction.RESULT_TYPE_NUMBER, <START_MOD>((<END_MOD>org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ResultHandler<java.lang.Double>) (<START_MOD>(<END_MOD> result) <START_MOD>-> <END_MOD>{ this.resultValue = result; this.resultType = JsFunction.RESULT_TYPE_NUMBER; }<START_MOD>))<END_MOD>, errorHandler); }
@java.lang.Override protected void fillMenuBar(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { if (used) { menuBar.addItem( Function <START_MOD>((<END_MOD>com.google.gwt.user.client.Command<START_MOD>) (() -> { org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.<END_MOD>model.removeFunction(<START_MOD>org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.<END_MOD>policyUnit); <START_MOD>org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.<END_MOD>menuPopup.hide(); }<START_MOD>))<END_MOD>); } else { menuBar.addItem( Function <START_MOD>((<END_MOD>com.google.gwt.user.client.Command<START_MOD>) (() -> { org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.<END_MOD>model.addFunction(<START_MOD>org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.<END_MOD>policyUnit); <START_MOD>org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.<END_MOD>menuPopup.hide(); }<START_MOD>))); } }<END_MOD>
private org.ovirt.engine.ui.common.widget.MenuBar menuFor(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item) { org.ovirt.engine.ui.common.widget.MenuBar menu = rootMenu(item); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> operationMap = item.getSetupModel().commandsFor(item); for (final java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> entry : operationMap.entrySet()) { final java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = entry.getValue(); if (entry.getKey().isUnary()) { assert (commands.size()) == 1 :   a NetworkCommand List with more than one Unary Operation menu.addItem(entry.getKey().getVerb(item), <START_MOD>((<END_MOD>com.google.gwt.user.client.Command<START_MOD>) (() -><END_MOD> executeCommand(entry.getKey(), commands.get(0))<START_MOD>))<END_MOD>); } else { java.util.Collections.sort(commands, java.util.Comparator.comparing(NetworkCommand::getName, new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator())); org.ovirt.engine.ui.common.widget.MenuBar subMenu = subMenu(); for (final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand command : commands) { subMenu.addItem(new com.google.gwt.user.client.ui.MenuItem(command.getName(), <START_MOD>((<END_MOD>com.google.gwt.user.client.Command<START_MOD>) (() -><END_MOD> executeCommand(entry.getKey(), command)<START_MOD>))))<END_MOD>; } <START_MOD>menu.addItem(entry.getKey().getVerb(item), subMenu); <END_MOD>} } <START_MOD>return <END_MOD>menu; }
protected void fillMenuBar(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { if (used) { menuBar.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.removeFilter(), <START_MOD>((<END_MOD>com.google.gwt.user.client.Command<START_MOD>) (() -><END_MOD> { model.removeFilter(policyUnit); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); }<START_MOD>))<END_MOD>); } else { menuBar.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.addFilter(), <START_MOD>((<END_MOD>com.google.gwt.user.client.Command<START_MOD>) (() -><END_MOD> { model.addFilter(policyUnit, used, 0); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); }<START_MOD>))); } }<END_MOD>
protected void addSubMenu(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { org.ovirt.engine.ui.common.widget.MenuBar subMenu = new org.ovirt.engine.ui.common.widget.MenuBar(true); if ((position) != 0) { subMenu.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.noPositionFilter(), <START_MOD>((<END_MOD>com.google.gwt.user.client.Command<START_MOD>) (() -><END_MOD> { model.addFilter(policyUnit, used, 0); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); }<START_MOD>))<END_MOD>); } if ((position) >= 0) { subMenu.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.firstFilter(), <START_MOD>((<END_MOD>com.google.gwt.user.client.Command<START_MOD>) (() -><END_MOD> { model.addFilter(policyUnit, used, (-1)); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); }<START_MOD>))<END_MOD>); } if ((position) <= 0) { subMenu.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.lastFilter(), <START_MOD>((<END_MOD>com.google.gwt.user.client.Command<START_MOD>) (() -><END_MOD> { model.addFilter(policyUnit, used, 1); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); }<START_MOD>))<END_MOD>); } menuBar.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.position(), subMenu); }
private com.google.gwt.user.client.ui.PushButton createButton(com.google.gwt.resources.client.ImageResource imageResource) { com.google.gwt.user.client.ui.PushButton result = new com.google.gwt.user.client.ui.PushButton(new com.google.gwt.user.client.ui.Image(imageResource), <START_MOD>((<END_MOD>com.google.gwt.event.dom.client.ClickHandler) (<START_MOD>(<END_MOD> event) <START_MOD>-><END_MOD> toggleVisibleWestPanel()<START_MOD>))<END_MOD>); result.setVisible(false); result.addStyleName(style.sliderButton()); result.addStyleName("tslp_sliderButton_pfly_fix"); return result; }
@java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { eventHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(<START_MOD>( event1) -> {<END_MOD> com.google.gwt.<START_MOD>dom<END_MOD>.client.NativeEvent nativeEvent = <START_MOD>event1<END_MOD>.getNativeEvent(); if ((((nativeEvent.getKeyCode()) == KeyCodes.KEY_ENTER) && (((<START_MOD>event1<END_MOD>.getTypeInt()) == Event.ONKEYPRESS) || ((<START_MOD>event1<END_MOD>.getTypeInt()) == Event.ONKEYDOWN))) && (!(<START_MOD>event1<END_MOD>.isCanceled()))) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); <START_MOD>event1<END_MOD>.cancel(); if ((<START_MOD>event1<END_MOD>.getTypeInt()) == Event.ONKEYDOWN) { enterPressed(); } } }<START_MOD>); }<END_MOD>
private org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionsMenu getRefreshOptionsMenu() { org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionsMenu refreshOptionsMenu = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionsMenu(true); refreshOptionsMenu.setStylePrimaryName(style.refreshRateMenu()); com.google.gwt.user.client.ui.MenuItem title = new com.google.gwt.user.client.ui.MenuItem(org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.constants.refreshRate(), <START_MOD>((<END_MOD>com.google.gwt.user.client.Command<START_MOD>) (() -><END_MOD> { }<START_MOD>))<END_MOD>); title.setEnabled(false); title.setStylePrimaryName(style.refreshMenuTitle()); refreshOptionsMenu.addItem(title); java.util.Set<java.lang.Integer> refreshRates = org.ovirt.engine.ui.common.widget.refresh.AbstractRefreshManager.getRefreshRates(); int itemIndex = 0; for (java.lang.Integer refreshRate : refreshRates) { org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionCommand command = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionCommand(); org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionMenuItem refreshRateOption = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionMenuItem(refreshRate, command); refreshRateOption.setStylePrimaryName(style.refreshRateOption()); command.setMenuItem(refreshRateOption); refreshOptionsMenu.addItem(refreshRateOption); if (itemIndex != ((refreshRates.size()) - 1)) { com.google.gwt.user.client.ui.MenuItemSeparator separator = refreshOptionsMenu.addSeparator(); separator.getElement().getStyle().setBackgroundColor("#E0E9F2"); } itemIndex++; } return refreshOptionsMenu; }
@com.google.gwt.uibinder.client.UiHandler("uploadButton") void onUploadIconButton(com.google.gwt.event.dom.client.ClickEvent event) { hiddenPanel.clear(); final com.google.gwt.user.client.ui.FileUpload inputFileWidget = new com.google.gwt.user.client.ui.FileUpload(); inputFileWidget.getElement().setAttribute("accept", "image/gif,image/jpeg,image/png"); inputFileWidget.addChangeHandler(<START_MOD>(<END_MOD> <START_MOD>event1<END_MOD>) <START_MOD>-><END_MOD> readUploadedIconFile(inputFileWidget.getElement())); inputFileWidget.getElement().setTabIndex((-1)); hiddenPanel.add(inputFileWidget); inputFileWidget.click(); }
private void initMenuPopup(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> actions) { menuPopup = new org.ovirt.engine.ui.common.widget.action.MenuPanelPopup(true); for (final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef : actions) { com.google.gwt.user.client.ui.MenuItem menuItem = new com.google.gwt.user.client.ui.MenuItem(buttonDef.getText(), <START_MOD>((com.google.gwt.user.client.Command) (() -> { menuPopup.asPopupPanel().hide(); buttonDef.onClick(selectedItemsProvider.getSelectedItems()); }))); menuItem.addStyleName(style.menuItem()); updateMenuItem(menuItem, buttonDef, selectedItemsProvider.getSelectedItems()); menuPopup.getMenuBar().addItem(menuItem); items.add(<END_MOD>new <START_MOD>org.ovirt.engine.core.common.utils.Pair(menuItem, buttonDef)); }<END_MOD> menuPopup.asPopupPanel().<START_MOD>setAutoHideEnabled(true); menuPopup.asPopupPanel().addAutoHidePartner(dropdownButton.getElement()); menuPopup.asPopupPanel().addCloseHandler(( event) -> dropdownButton.setDown(false<END_MOD>)); }
private void createMenu(final java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> numaNodeList, int indexToSkip) { menuBar = new org.ovirt.engine.ui.common.widget.MenuBar(true); for (final org.ovirt.engine.core.common.businessentities.VdsNumaNode numaNode : numaNodeList) { final int nodeIndex = numaNode.getIndex(); menuBar.addItem(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.messages.numaNode(nodeIndex), <START_MOD>((<END_MOD>com.google.gwt.user.client.Command<START_MOD>) (() -><END_MOD> { org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(<START_MOD>this, nodeModel.getVm().getId(), true, nodeModel.getIndex(), nodeIndex); <END_MOD>org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.<START_MOD>menuPopup.hide(); }))); } if (nodeModel.isPinned()) { menuBar.addSeparator(); menuBar.addItem(<END_MOD>org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.constants.unPinNode(), <START_MOD>((<END_MOD>com.google.gwt.user.client.Command<START_MOD>) (() -><END_MOD> { org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(this, nodeModel.getVm().getId(), false, nodeModel.getIndex(), (-1)); org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.menuPopup.hide(); }<START_MOD>))); } }<END_MOD>
<START_MOD>@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (memoryHotUnplugCommand)) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.setConfirmWindow(null); onMemoryHotUnplugConfirmed(); } else if (command == (cancelMemoryHotUnplugCommand)) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.setConfirmWindow(null); } }<END_MOD>
<START_MOD>private void onMemoryHotUnplugConfirmed() { final org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getSelectedItem(); if ((vmDevice == null) || ((vmDevice.getType()) != (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } log(("call MemoryHotUnplugCommand " + vmDevice)); }<END_MOD>
<START_MOD>@java.lang.Override public void initializeHandlers() { super.initializeHandlers(); getView().getHotUnplugColumn().addHandler(new org.ovirt.engine.ui.common.widget.CellClickHandler<org.ovirt.engine.core.common.businessentities.VmDevice>() { @java.lang.Override public void onClick(com.google.gwt.dom.client.NativeEvent event, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice) { getModelProvider().getModel().onHotUnplug(vmDevice); } }); }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.common.widget.uicommon.vm.Template("<button class=\"btn btn-default\" id=\"{0}\"></span>{1}</button>") com.google.gwt.safehtml.shared.SafeHtml button(java.lang.String id, java.lang.String hotUnplugLabel);<END_MOD>
<START_MOD>java.lang.String remove();<END_MOD>
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation(org.ovirt.engine.core.bll.dwh.DwhHeartBeat.DWH_HEART_BEAT_METHOD) public void engineIsRunningNotification() { try { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug( Heart Beat - Start <START_MOD>org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew, () -> { <END_MOD>heartBeatVar.setDateTime(new java.util.Date()); dwhHistoryTimekeepingDao.save(heartBeatVar); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug( Heart Beat - End<START_MOD> return null; });<END_MOD> } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.error( updating DWH Heart Beat: {} ex.getMessage()); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Exception", ex); } }
@java.lang.Override protected void teardown() { <START_MOD>org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(() -> { int sleepTimeInSec = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ServerRebootTimeout); org.ovirt.engine.core.bll.pm.log.info( {<END_MOD>}<START_MOD> seconds, for server to finish boot process. sleepTimeInSec); org.ovirt.engine.core.utils.ThreadUtils.sleep(TimeUnit.SECONDS.toMillis(sleepTimeInSec)); if (getParameters().isChangeHostToMaintenanceOnStart()) { setStatus(VDSStatus.Maintenance); } else { setStatus(VDSStatus.NonResponsive); } }); }<END_MOD>
private void setSessionUser(org.ovirt.engine.api.model.Session session)<START_MOD> { try<END_MOD> { org.ovirt.engine.api.model.User user = getUserResource().getUserByNameAndDomain(session.getUser().getUserName(), session.getUser().getDomain().getName()); if (user != null) { session.getUser().setId(user.getId()); session.getUser().setHref(user.getHref()); session.getUser().getDomain().setId(user.getDomain().getId()); session.getUser().getDomain().setHref(user.getDomain().getHref()); } }<START_MOD> catch (javax.ws.rs.WebApplicationException ex) { } }<END_MOD>
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD> device) { return device.getAddress(); }
private void addPluggedColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.VmDeviceFeEntity<END_MOD>> pluggedColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.VmDeviceFeEntity<END_MOD>>() { @java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.VmDeviceFeEntity<END_MOD> object) { return object.isPlugged(); } @java.lang.Override protected boolean canEdit(org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.VmDeviceFeEntity<END_MOD> object) { return false; } }; pluggedColumn.makeSortable(); getTable().addColumn(pluggedColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.devicePluggedAlias(), "70px"); }
@java.lang.Override public void initializeHandlers() { super.initializeHandlers(); getView().getHotUnplugColumn().addHandler(new org.ovirt.engine.ui.common.widget.CellClickHandler<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD>>() { @java.lang.Override public void onClick(com.google.gwt.dom.client.NativeEvent event, org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD> vmDevice) { getModelProvider().getModel().onHotUnplug(vmDevice); } }); }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.uicommon.vm.Context context, com.google.gwt.dom.client.Element parent, org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.VmDeviceFeEntity<END_MOD> device, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.VmDeviceFeEntity<END_MOD>> valueUpdater) { super.onBrowserEvent(context, parent, device, event, valueUpdater); if (!(BrowserEvents.CLICK.equals(event.getType()))) { return; } if (((parent.getFirstChildElement()) == null) || (!(parent.getFirstChildElement().isOrHasChild(com.google.gwt.dom.client.Element.as(event.getEventTarget()))))) { return; } for (org.ovirt.engine.ui.common.widget.CellClickHandler<org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.VmDeviceFeEntity<END_MOD>> clickHandler : clickHandlers) { clickHandler.onClick(event, device); } }
<START_MOD>@org.ovirt.engine.ui.common.widget.uicommon.vm.Template("<button class=\"btn btn-default\" id=\"{0}\" disabled></span>{1}</button>") com.google.gwt.safehtml.shared.SafeHtml disabledButton(java.lang.String id, java.lang.String hotUnplugLabel);<END_MOD>
@java.lang.Override public java.lang.String toString() { return <START_MOD>getToStringBuilder<END_MOD>().build(); }
<START_MOD>public boolean isBeingUnplugged() { return isBeingUnplugged; }<END_MOD>
<START_MOD>@java.lang.SuppressWarnings("unchecked") protected java.util.Collection<T> convertQueriedData(org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue) { return ((java.util.Collection<T>) (queryReturnValue.getReturnValue())); }<END_MOD>
private void onMemoryHotUnplugConfirmed() { <START_MOD>org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.setConfirmWindow(null); <END_MOD>final org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.VmDeviceFeEntity vmDeviceFeEntity = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getSelectedItem(); if ((vmDeviceFeEntity == null) || ((vmDeviceFeEntity.getType()) != (org.ovirt.engine.<END_MOD>core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } <START_MOD>devicesBeingHotUnplugged.add(vmDeviceFeEntity, new org.ovirt.engine.ui.uicommonweb.models.utils.ExpiringSet.RemovalAction<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public void itemRemoved(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity item) { updateItems(); } }); updateItems(); <END_MOD>log(( MemoryHotUnplugCommand   + <START_MOD>vmDeviceFeEntity)); }<END_MOD>
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder getToStringBuilder() { return super.getToStringBuilder().append("isBeingUnplugged", isBeingUnplugged); }<END_MOD>
<START_MOD>public void setBeingUnplugged(boolean beingUnplugged) { isBeingUnplugged = beingUnplugged; }<END_MOD>
@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD> object) { return object.isManaged(); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { setItems(<START_MOD>convertQueriedData<END_MOD>(returnValue)); }
private void addDeviceTypeColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD>> deviceTypeColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD>>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD> device) { return device.getDevice(); } }; deviceTypeColumn.makeSortable(); getTable().addColumn(deviceTypeColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceType(), "70px"); }
<START_MOD>private void updateItems() { java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> items = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getItems(); for (org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity vmDeviceFeEntity : items) { vmDeviceFeEntity.setBeingUnplugged(devicesBeingHotUnplugged.contains(vmDeviceFeEntity)); } setItems(items); }<END_MOD>
private int toSortingIndex(org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD> vmDevice) { return (vmDevice == null) || (!(org.ovirt.engine.ui.common.widget.uicommon.vm.HotUnplugCell.isHotUnpluggable(vmDevice))) ?   : 1; }
@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD> object) { return object.getReadOnly(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD> device) { return device.getSpecParams().toString(); }
public void onHotUnplug(org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.VmDeviceFeEntity vmDeviceFeEntity) { if ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getEntity()) == null) { return; } if ((vmDeviceFeEntity == null) || ((vmDeviceFeEntity.getType()) != (org.ovirt.engine.<END_MOD>core.common.businessentities.<START_MOD>VmDeviceGeneralType.MEMORY))<END_MOD>) { <START_MOD>return; } final java.lang.Integer memorySizeMb = ((java.lang.Integer) (vmDeviceFeEntity.getSpecParams().get("size"))); <END_MOD>if (<START_MOD>memorySizeMb<END_MOD> == null) { return; } setSelectedItem(<START_MOD>vmDeviceFeEntity<END_MOD>); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); confirmationModel.setTitle(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.constants.memoryHotUnplug()); confirmationModel.setHelpTag(HelpTag.template_not_found_on_export_domain); confirmationModel.setMessage(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.messages.memoryHotUnplugConfirmation(memorySizeMb, org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getEntity().getName())); confirmationModel.getCommands().add(memoryHotUnplugCommand); confirmationModel.getCommands().add(cancelMemoryHotUnplugCommand); setConfirmWindow(confirmationModel); }
@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD> object) { return object.isPlugged(); }
<START_MOD>@java.lang.Override public void itemRemoved(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity item) { updateItems(); }<END_MOD>
private void addAddressColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD>> deviceAddressColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD>>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD> device) { return device.getAddress(); } }; deviceAddressColumn.makeSortable(); getTable().addColumn(deviceAddressColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceAddress(), "395px"); }
private void addManagedColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.VmDeviceFeEntity<END_MOD>> managedColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.VmDeviceFeEntity<END_MOD>>() { @java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.VmDeviceFeEntity<END_MOD> object) { return object.isManaged(); } @java.lang.Override protected boolean canEdit(org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.VmDeviceFeEntity<END_MOD> object) { return false; } }; managedColumn.makeSortable(); getTable().addColumn(managedColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceManagedAlias(), "70px"); }
private void addSpecParamsColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD>> specParamsColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD>>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD> device) { return device.getSpecParams().toString(); } }; specParamsColumn.makeSortable(); getTable().addColumn(specParamsColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceSpecParamsAlias(), "300px"); }
private void addReadOnlyColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.VmDeviceFeEntity<END_MOD>> readonlyColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.VmDeviceFeEntity<END_MOD>>() { @java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.VmDeviceFeEntity<END_MOD> object) { return object.getReadOnly(); } @java.lang.Override protected boolean canEdit(org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.VmDeviceFeEntity<END_MOD> object) { return false; } }; readonlyColumn.makeSortable(); getTable().addColumn(readonlyColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceReadOnlyAlias(), "70px"); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD> device) { return device.getDevice(); }
private void validateUpdateWipeAfterDelete(org.ovirt.engine.core.common.businessentities.VMStatus status) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = createDiskImage(); disk.<START_MOD>setWipeAfterDelete<END_MOD>(false); when(diskDao.get(diskImageGuid)).thenReturn(disk); command.getParameters().getDiskInfo().setWipeAfterDelete(true); initializeCommand(createVm(status)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(command); }
private java.lang.String composeObjectId() { <START_MOD>return<END_MOD> new org.ovirt.engine.core.dal.dbbroker.auditloghandling.<START_MOD>EventKeyComposer<END_MOD>(event, <START_MOD>logType<END_MOD>).<START_MOD>composeObjectId<END_MOD>(); }
private void compose(java.lang.StringBuilder builder, java.lang.String key, java.lang.String value) { if ((builder.length()) > 0) { builder.append(<START_MOD>KEY_PARTS_DELIMITER<END_MOD>); } builder.append(key).append(NAME_VALUE_SEPARATOR).append(value); }
private boolean hasHostExternalStatus() { return ((getEvent().getVdsId()) != null) && ((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()) != null); }
@java.lang.Override protected boolean validate() { if (((getEvent()) == null) || (<START_MOD>AuditLog<END_MOD>.<START_MOD>OVIRT_ORIGIN<END_MOD>.<START_MOD>equalsIgnoreCase<END_MOD>(getEvent().getOrigin()))) { <START_MOD>return failValidation<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLEGAL_ORIGIN); } return <START_MOD>true<END_MOD>; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionList = getPermissionList(getEvent()); if (hasHostExternalStatus()) { permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(getEvent().getVdsId(), org.ovirt.engine.core.common.VdcObjectType.VDS, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_HOST_CONFIGURATION)); } if (hasStorageDomainExternalStatus()) { permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(getEvent().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_STORAGE_DOMAIN_CONFIGURATION)); } return permissionList; }
private boolean hasStorageDomainExternalStatus() { return ((getEvent().getStorageDomainId()) != null) && ((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()) != null); }
protected void addStorageDomainInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageStaticData = getStorageDomain().getStorageStaticData(); org.ovirt.engine.core.bll.storage.domain.storageDomainStaticDao.save(storageStaticData); getCompensationContext().snapshotNewEntity(storageStaticData); org.ovirt.engine.core.common.businessentities.StorageDomainDynamic newStorageDynamic = new org.ovirt.engine.core.common.businessentities.StorageDomainDynamic(null, getStorageDomain().getId(), null); getReturnValue().setActionReturnValue(getStorageDomain().getId()); <START_MOD>storageDomainDynamicDao.save(newStorageDynamic); getCompensationContext().snapshotNewEntity(newStorageDynamic); getCompensationContext().stateChanged(); return null; }); if (<END_MOD>org.ovirt.engine.core.bll.storage.domain.<START_MOD>AddStorageDomainCommand.getStorageDomain().getStorageDomainType().isDataDomain()) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.createDefaultDiskProfile()<END_MOD>; } }
private void doBackupCheck() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastDbBackup = getLastBackupByScope(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.BackupScope.DB); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastFilesBackup = getLastBackupByScope(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.BackupScope.FILES); if ((lastDbBackup == null) || (lastFilesBackup == null)) { auditLogDirector.log(alert, AuditLogType.ENGINE_NO_FULL_BACKUP); } else { java.lang.Integer backupAlertPeriodInDays = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BackupAlertPeriodInDays); java.util.Date lastDbBackupDate = lastDbBackup.getDoneAt(); java.util.Date lastFilesBackupDate = lastFilesBackup.getDoneAt(); java.util.Date lastFullBackupDate = ((lastDbBackupDate.compareTo(lastFilesBackupDate)) < 0) ? lastDbBackupDate : lastFilesBackupDate; long diffInDays = ((java.util.Calendar.getInstance().getTimeInMillis()) - (lastFullBackupDate.getTime())) / (java.util.concurrent.TimeUnit.DAYS.toMillis(1)); if (diffInDays > backupAlertPeriodInDays) { alert.addCustomValue("Date", lastFullBackupDate.toString()); auditLogDirector.log(alert, AuditLogType.ENGINE_NO_WARM_BACKUP); } } }
<START_MOD>private<END_MOD> static java.lang.String getMessageOrNull(org.ovirt.engine.core.common.AuditLogType logType) { final java.lang.String key = logType.name(); try { return org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.resourceBundle.getString(key); } catch (java.lang.Exception e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.error( '{}' is not translated in '{}' key, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getResourceBundleName()); return null; } }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.AuditLog event) { getCallsHandler().executeModification("InsertAuditLog", <START_MOD>(event.isExternal() ? getExternalEventSqlMapper(event) : <END_MOD>getSqlMapper(event))<START_MOD>)<END_MOD>; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent())); event.setExternal(true); java.lang.String message = <START_MOD>truncateMessage(<END_MOD>getEvent().getMessage()<START_MOD>)<END_MOD>; switch (getEvent().getSeverity()) { case NORMAL : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_NORMAL, message); break; case WARNING : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_WARNING, message); break; case ERROR : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_ERROR, message); break; case ALERT : org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.alert(event, AuditLogType.EXTERNAL_ALERT, auditLogDirector, message); break; } org.ovirt.engine.core.common.businessentities.AuditLog auditLog = auditLogDao.getByOriginAndCustomEventId(getEvent().getOrigin(), getEvent().getCustomEventId()); if (auditLog != null) { setActionReturnValue(auditLog.getAuditLogId()); org.ovirt.engine.core.bll.AddExternalEventCommand.setSucceeded(true); } if (hasHostExternalStatus()) { vdsDynamicDao.updateExternalStatus(getEvent().getVdsId(), org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()); } if (hasStorageDomainExternalStatus()) { storageDomainDynamicDao.updateExternalStatus(getEvent().getStorageDomainId(), org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()); } }
private void auditLogFailedToConnect() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); }
public boolean discover() { boolean dbUpdated = false; java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug( updated for external broker. dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn( returned empty result when talking to broker. Disabling external units java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit> failingPolicyUnits = policyUnitDao.getAll().stream().collect(java.util.stream.Collectors.toList()); markExternalPoliciesAsDisabled(failingPolicyUnits); dbUpdated = true; } return dbUpdated; }
private void hotSetMemory(int <START_MOD>currentMemoryMb, int newAmountOfMemoryMb<END_MOD>) { <START_MOD>final int minimalHotPlugDeviceSizeMb = HotSetAmountOfMemoryCommand.HOTPLUG_MEMORY_SIZE_FACTOR_MB; final java.util.List<<END_MOD>org.ovirt.engine.core.common.<START_MOD>businessentities.VmDevice> memoryDevices =<END_MOD> org.ovirt.engine.core.<START_MOD>bll.UpdateVmCommand.getVmDeviceUtils().getMemoryDevices(getVmId()); final boolean minimalMemoryDevicePresent = memoryDevices.stream().anyMatch(( device) -> (org.ovirt.engine.core.<END_MOD>common.<START_MOD>utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(device)) == minimalHotPlugDeviceSizeMb); final int secondPartSizeMb = (newAmountOfMemoryMb - currentMemoryMb) - minimalHotPlugDeviceSizeMb; if (minimalMemoryDevicePresent || (secondPartSizeMb ==<END_MOD> 0)) { <START_MOD>hotPlugMemoryDevice(currentMemoryMb, newAmountOfMemoryMb); return<END_MOD>; } <START_MOD>hotPlugMemoryDevice(currentMemoryMb, (currentMemoryMb + minimalHotPlugDeviceSizeMb)); hotPlugMemoryDevice((currentMemoryMb + minimalHotPlugDeviceSizeMb), newAmountOfMemoryMb<END_MOD>); }
<START_MOD>private void hotPlugMemoryDevice(int currentMemoryMb, int newAmountOfMemoryMb) { org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters params = new org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters(newVmStatic, org.ovirt.engine.core.common.action.PlugAction.PLUG, 0, (newAmountOfMemoryMb - currentMemoryMb)); org.ovirt.engine.core.common.action.VdcReturnValueBase setAmountOfMemoryResult = runInternalAction(VdcActionType.HotSetAmountOfMemory, params, org.ovirt.engine.core.bll.UpdateVmCommand.cloneContextAndDetachFromParent()); if (!(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isHostedEngine())) { newVmStatic.setMemSizeMb((setAmountOfMemoryResult.getSucceeded() ? newAmountOfMemoryMb : currentMemoryMb)); } hotSetMemlog(params, setAmountOfMemoryResult); }<END_MOD>
private void updateDefaultNetworkFilterIfRequired() { if (org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().<START_MOD>isUseDefaultNetworkFilterId<END_MOD>())<START_MOD> { if (org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getVnicProfile().isPassthrough()) { org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.setNetworkFilterId(null); } else<END_MOD> { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = org.ovirt.engine.core.bll.network.cluster.NetworkHelper.resolveVnicProfileDefaultNetworkFilter(networkFilterDao); if (networkFilter != null) { final org.ovirt.engine.core.compat.Guid networkFilterId = networkFilter.getId(); setNetworkFilterId(networkFilterId); } } }<START_MOD> }<END_MOD>
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.createVnicProfileValidator(); boolean useDefaultNetworkFilterId = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().<START_MOD>isUseDefaultNetworkFilterId<END_MOD>(); return (((((((((validate(validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileForVmNetworkOnly()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.passthroughProfileContainsSupportedProperties(useDefaultNetworkFilterId)))) && (validate(validator.validUseDefaultNetworkFilterFlag(useDefaultNetworkFilterId)))) && (validate(validator.validNetworkFilterId())); }
public boolean <START_MOD>isUseDefaultNetworkFilterId<END_MOD>() { return useDefaultNetworkFiterId; }
<START_MOD>public java.lang.String getCompatibilityVersion() { return compatibilityVersion; }<END_MOD>
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcActionType actionToExecute = org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters().getAction(); org.ovirt.engine.core.common.action.VdcActionParametersBase actionParameters = org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters().getActionParameters(); actionParameters.<START_MOD>setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); actionParameters.<END_MOD>setParentCommand(VdcActionType.RunAsyncAction); actionParameters.setParentParameters(org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters()); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(actionToExecute, actionParameters, org.ovirt.engine.core.bll.RunAsyncActionCommand.cloneContextAndDetachFromParent()); org.ovirt.engine.core.bll.RunAsyncActionCommand.setSucceeded(true); }
public boolean isLegal() { if (useTimeout) { java.lang.String keyForCheck = ("".equals(timeoutObjectId)) ? logType.toString() : timeoutObjectId; <START_MOD>java<END_MOD>.<START_MOD>lang.String<END_MOD> <START_MOD>value<END_MOD> <START_MOD>=<END_MOD> org.ovirt.engine.core.dal.utils.CacheManager.getTimeoutBaseCache().<START_MOD>putIfAbsent<END_MOD>(keyForCheck, keyForCheck, endTime, java.util.concurrent.TimeUnit.MILLISECONDS); return <START_MOD>value<END_MOD> <START_MOD>==<END_MOD> <START_MOD>null<END_MOD>; } return true; }
private boolean <START_MOD>validateManagementNetworkAttachment<END_MOD>() { final org.ovirt.engine.core.common.businessentities.network.Network managementNetwork; final org.ovirt.engine.core.compat.Guid managementNetworkId = org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getManagementNetworkId(); if (managementNetworkId == null) { managementNetwork = getDefaultManagementNetworkFinder().findDefaultManagementNetwork(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getStoragePoolId()); if (managementNetwork == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } } else { managementNetwork = networkDao.get(managementNetworkId); if (managementNetwork == null) { addValidationMessage(EngineMessage.NETWORK_NOT_EXISTS); return false; } } managementNetworkCluster = createManagementNetworkCluster(managementNetwork); final org.ovirt.engine.core.bll.network.cluster.UpdateClusterNetworkClusterValidator networkClusterValidator = createManagementNetworkClusterValidator(); return validate(networkClusterValidator.managementNetworkChange()); }
private org.ovirt.engine.core.common.action.ColdMergeCommandParameters buildColdMergeParameters(org.ovirt.engine.core.<START_MOD>common.businessentities.storage.DiskImage baseVolume, org.ovirt.engine.core.common.businessentities.storage.DiskImage topVolume<END_MOD>) { org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo = new org.ovirt.engine.core.common.businessentities.SubchainInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), <START_MOD>baseVolume, topVolume<END_MOD>); org.ovirt.engine.core.common.action.ColdMergeCommandParameters parameters = new org.ovirt.engine.core.common.action.ColdMergeCommandParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStoragePoolId(), subchainInfo); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }
<START_MOD>@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass()) != (o.getClass()))) { return false; } org.ovirt.engine.core.common.businessentities.SubchainInfo that = ((org.ovirt.engine.core.common.businessentities.SubchainInfo) (o)); return ((((java.util.Objects.equals(storageDomainId, that.storageDomainId)) && (java.util.Objects.equals(imageGroupId, that.imageGroupId))) && (java.util.Objects.equals(baseImageGeneration, that.baseImageGeneration))) && (java.util.Objects.equals(baseImage, that.baseImage))) && (java.util.Objects.equals(topImage, that.topImage)); }<END_MOD>
<START_MOD>@java.lang.Override public int hashCode() { return java.util.Objects.hash(storageDomainId, imageGroupId, baseImageGeneration, baseImage, topImage); }<END_MOD>
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksListForStorageAllocations() { return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getSnapshotsDummiesForStorageAllocations(getSourceImages()); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId).append("imageGroupId", imageGroupId).append(<START_MOD>"baseImage"<END_MOD>, <START_MOD>baseImage<END_MOD>).append(<START_MOD>"topImage"<END_MOD>, <START_MOD>topImage<END_MOD>).append("baseImageGeneration", baseImageGeneration).build(); }
<START_MOD>private void updateVmDeviceWithDataReturnedFromHost(org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue) { if ((vdsReturnValue.getSucceeded()) && ((org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getAction()) == (org.ovirt.engine.core.common.action.PlugAction.PLUG))) { org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn vmInfoReturn = ((org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn) (vdsReturnValue.getReturnValue())); if ((vmInfoReturn.getVmInfo()) != null) { java.util.Map<java.lang.String, java.lang.Object> vmInfo = ((java.util.Map<java.lang.String, java.lang.Object>) (vmInfoReturn.getVmInfo())); for (java.lang.Object o : ((java.lang.Object[]) (vmInfo.get(VdsProperties.Devices)))) { java.util.Map<java.lang.String, java.lang.Object> vdsmDevice = ((java.util.Map<java.lang.String, java.lang.Object>) (o)); if (vmDevice.getId().getDeviceId().toString().equals(((java.lang.String) (vdsmDevice.get(VdsProperties.DeviceId))))) { vmDevice.setAddress(vdsmDevice.get(VdsProperties.Address).toString()); vmDevice.setAlias(org.apache.commons.lang.StringUtils.defaultString(((java.lang.String) (vdsmDevice.get(VdsProperties.Alias))))); } } } } }<END_MOD>
<START_MOD>private void updateVmDeviceWithDataReturnedFromHost(org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue) { if ((vdsReturnValue.getSucceeded()) && ((org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getAction()) == (org.ovirt.engine.core.common.action.PlugAction.PLUG))) { org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn vmInfoReturn = ((org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn) (vdsReturnValue.getReturnValue())); if ((vmInfoReturn.getVmInfo()) != null) { java.util.Map<java.lang.String, java.lang.Object> vmInfo = ((java.util.Map<java.lang.String, java.lang.Object>) (vmInfoReturn.getVmInfo())); for (java.lang.Object o : ((java.lang.Object[]) (vmInfo.get(VdsProperties.Devices)))) { java.util.Map<java.lang.String, java.lang.Object> vdsmDevice = ((java.util.Map<java.lang.String, java.lang.Object>) (o)); if (vmDevice.getId().getDeviceId().toString().equals(vdsmDevice.get(VdsProperties.DeviceId))) { vmDevice.setAddress(vdsmDevice.get(VdsProperties.Address).toString()); vmDevice.setAlias(org.apache.commons.lang.StringUtils.defaultString(((java.lang.String) (vdsmDevice.get(VdsProperties.Alias))))); } } } } }<END_MOD>
<START_MOD>@java.lang.Override protected<END_MOD> boolean validateInputManagementNetwork() { <START_MOD>if <END_MOD>(<START_MOD>!(org.ovirt.engine.core.bll.AddClusterCommand.findInputManagementNetwork<END_MOD>())) return false; final org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase networkClusterValidator = createNetworkClusterValidator(); return ((validate(networkClusterValidator.networkBelongsToClusterDataCenter(org.ovirt.engine.core.bll.AddClusterCommand.getCluster(), <START_MOD>managementNetwork<END_MOD>))) && (validate(networkClusterValidator.managementNetworkRequired(<START_MOD>managementNetwork<END_MOD>)))) && (validate(networkClusterValidator.managementNetworkNotExternal(<START_MOD>managementNetwork<END_MOD>))); }
protected boolean validateSpaceRequirements() { if (isUnregisteredDiskExistsForCopyTemplate()) { return true; } org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = createStorageDomainValidator(); if (validate(storageDomainValidator.isDomainWithinThresholds())) { if ((<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getVmEntityType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.TEMPLATE)) { <START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getSnapshots().add(<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage()); } else { <START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getSnapshots().addAll(diskImageDao.getAllSnapshotsForLeaf(<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getImageId())); } return validate(storageDomainValidator.hasSpaceForDiskWithSnapshots(<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage())); } return false; }
protected java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> getVmsWithVmDeviceInfoForDiskId() { if ((cachedVmsDeviceInfo) == null) { cachedVmsDeviceInfo = vmDao.getVmsWithPlugInfo(<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getId()); } return cachedVmsDeviceInfo; }
<START_MOD>@java.lang.Override protected void init() { cachedParamsToDisks = org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getParametersList().stream().collect(java.util.stream.Collectors.toMap(java.util.function.Function.identity(), ( p) -> diskImageDao.get(p.getImageId()))); }<END_MOD>
private boolean isTemplate() { return !(((<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getVmEntityType()) == null) || (!(<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getVmEntityType().isTemplateType()))); }
protected boolean checkTemplateInDestStorageDomain() { if (((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) && (!(Guid.Empty.equals(<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getImageTemplateId())))) { org.ovirt.engine.core.common.businessentities.storage.DiskImage templateImage = diskImageDao.get(<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getImageTemplateId()); if (!(templateImage.getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return true; }
protected boolean isImageExist() { if ((<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST); } return true; }
protected org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator createMultipleDiskVmElementValidator() { return new org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator(<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage(), diskVmElementDao.getAllDiskVmElementsByDiskId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getImageGroupID())); }
private java.lang.String getDiskIsBeingMigratedMessage() { if ((cachedDiskIsBeingMigratedMessage) == null) { cachedDiskIsBeingMigratedMessage = new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_IS_BEING_MIGRATED).withOptional("DiskName", ((<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage()) != null ? getDiskAlias() : null)).toString(); } return cachedDiskIsBeingMigratedMessage; }
protected boolean checkOperationIsCorrect() { if ((((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) && ((<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getVmEntityType()) != null)) && (<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getVmEntityType().isTemplateType())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_IS_NOT_VM_DISK, java.lang.String.format( %2$s "diskAliases", <START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getDiskAlias())); } return true; }
protected org.ovirt.engine.core.bll.validator.storage.DiskValidator createDiskValidator() { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator(<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage()); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(((<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage()) != null ? <START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getId() : org.ovirt.engine.core.compat.Guid.Empty).toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, getDiskIsBeingMigratedMessage())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() { java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> list = new java.util.ArrayList<>(); list.add(new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter(getDestinationQuotaId(), null, QuotaConsumptionParameter.QuotaAction.CONSUME, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), ((double) (<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getSizeInGigabytes())))); if ((org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move) == (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation())) { if (((<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getQuotaId()) != null) && (!(Guid.Empty.equals(<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getQuotaId())))) { list.add(new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter(<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getQuotaId(), null, QuotaConsumptionParameter.QuotaAction.RELEASE, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(), ((double) (<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getSizeInGigabytes())))); } } return list; }
protected boolean setAndValidateDiskProfiles() { <START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().setDiskProfileId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getDiskProfileId()); return validate(diskProfileHelper.setAndValidateDiskProfiles(java.util.Collections.singletonMap(<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getCurrentUser())); }
protected boolean isImageNotLocked() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = <START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage(); if ((diskImage.getImageStatus()) == (org.ovirt.engine.core.common.businessentities.storage.ImageStatus.LOCKED)) { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED, java.lang.String.format( %2$s "diskAliases", diskImage.getDiskAlias())); } else { return failValidation(EngineMessage.VM_TEMPLATE_IMAGE_IS_LOCKED); } } return true; }
protected boolean validateDestStorage() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain()); if ((!(validate(validator.isDomainExistAndActive()))) || (!(validate(validator.domainIsValidDestination())))) { return false; } boolean moveOrCopy = ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) || ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy)); if ((moveOrCopy && (<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().isShareable())) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLUSTERFS))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS, java.lang.String.format( %2$s "diskAlias", <START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getDiskAlias())); } return true; }
@java.lang.Override protected void executeCommand() { if (isUnregisteredDiskExistsForCopyTemplate()) { addDiskMapping(); return; } org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters p = prepareChildParameters(); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = runInternalActionWithTasksContext(getImagesActionType(), p); if (!(vdcRetValue.getSucceeded())) { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.setSucceeded(false); org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getReturnValue().setFault(vdcRetValue.getFault()); } else { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.setSucceeded(true); if (((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy)) && (!(isTemplate()))) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.addDiskImageWithNoVmDevice(<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage()); } } }
protected org.ovirt.engine.core.common.businessentities.VmTemplate getTemplateForImage() { if ((<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage()) == null) { return null; } java.util.Collection<org.ovirt.engine.core.common.businessentities.VmTemplate> templates = vmTemplateDao.getAllForImage(<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getImageId()).values(); return !(templates.isEmpty()) ? templates.iterator().next() : null; }
protected boolean checkIfNeedToBeOverride() { if ((((isTemplate()) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy))) && (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getForceOverride()))) && (<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_ALREADY_EXISTS); } return true; }
protected boolean validateSourceStorageDomain() { org.ovirt.engine.core.compat.Guid sourceDomainId = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(); if ((sourceDomainId == null) || (Guid.Empty.equals(sourceDomainId))) { sourceDomainId = <START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getStorageIds().get(0); org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().setSourceDomainId(sourceDomainId); } org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(storageDomainDao.getForStoragePool(sourceDomainId, <START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getStoragePoolId())); return validate(validator.isDomainExistAndActive()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { if ((cachedPermsList) == null) { cachedPermsList = new java.util.ArrayList(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = <START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage(); org.ovirt.engine.core.compat.Guid diskId = (image == null) ? org.ovirt.engine.core.compat.Guid.Empty : image.getId(); cachedPermsList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(diskId, org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_DISK_STORAGE)); cachedPermsList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return cachedPermsList; }
protected boolean isUnregisteredDiskExistsForCopyTemplate() { if ((isTemplate()) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy))) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk> unregisteredDisks = unregisteredDisksDao.getByDiskIdAndStorageDomainId(<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()); if (!(unregisteredDisks.isEmpty())) { return true; } } return false; }
private void prepareCopyNotTemplate(org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters parameters) { parameters.setAddImageDomainMapping(false); org.ovirt.engine.core.compat.Guid newImageId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.compat.Guid newId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = <START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage(); image.setId(newId); image.setImageId(newImageId); image.setDiskAlias(getDiskAlias()); image.setStorageIds(new java.util.ArrayList()); image.getStorageIds().add(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()); image.setQuotaId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getQuotaId()); image.setDiskProfileId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getDiskProfileId()); image.setImageStatus(ImageStatus.LOCKED); image.setVmSnapshotId(null); image.setParentId(Guid.Empty); image.setImageTemplateId(Guid.Empty); parameters.setDestinationImageId(newImageId); parameters.setDestImageGroupId(newId); }
private void addStorageDomainMapForCopiedTemplateDisk() { imageStorageDomainMapDao.save(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getImageId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getQuotaId(), <START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage().getDiskProfileId())); }
<START_MOD>protected void log() { final javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); try { try { auditLogDirector.log(this, org.ovirt.engine.core.bll.CommandBase.getAuditLogTypeValue()); } catch (final java.lang.RuntimeException ex) { log.error("Error during log command: {}. Exception {}", getClass().getName(), ex.getMessage()); log.debug("Exception", ex); } } finally { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); } }<END_MOD>
<START_MOD>java.lang.String message() default "BAD_IPV4_OR_IPV6_ADDRESS_FORMAT";<END_MOD>
protected static org.dbunit.database.IDatabaseConnection getConnection() throws java.lang.Exception { java.sql.Connection con = org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource.getConnection(); org.dbunit.database.IDatabaseConnection connection = new org.dbunit.database.DatabaseConnection(con<START_MOD>); connection.getConfig().setProperty(DatabaseConfig.FEATURE_ALLOW_EMPTY_FIELDS, true<END_MOD>); connection.getConfig().setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY, org.ovirt.engine.core.dao.BaseDaoTestCase.dataFactory); if (org.ovirt.engine.core.dao.BaseDaoTestCase.needInitializationSql) { try (java.sql.Statement stmt = con.createStatement()) { stmt.executeUpdate(org.ovirt.engine.core.dao.BaseDaoTestCase.initSql); } } return connection; }
<START_MOD>@java.lang.Override <END_MOD>public void setComment(java.lang.String value) { comment = value; }
@java.lang.Override public T mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { T entity = createNetworkEntity(); entity.setId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuidDefaultEmpty(rs, "id")); entity.setName(rs.getString("name")); entity.setDescription(rs.getString("description")); entity.setComment(rs.getString("free_text_comment")); entity.setType(((java.lang.Integer) (rs.getObject("type")))); entity.setAddr(rs.getString("addr")); entity.setSubnet(rs.getString("subnet")); entity.setGateway(rs.getString("gateway")); entity.setVlanId(((java.lang.Integer) (rs.getObject("vlan_id")))); entity.setStp(rs.getBoolean("stp")); entity.setDataCenterId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuidDefaultEmpty(rs, "storage_pool_id")); entity.setMtu(rs.getInt("mtu")); entity.setVmNetwork(rs.getBoolean("vm_network")); org.ovirt.engine.core.compat.Guid providerId = org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuid(rs, "provider_network_provider_id"); if (providerId != null) { entity.setProvidedBy(new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(providerId, rs.getString("provider_network_external_id"))); } entity.setQosId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuid(rs, "qos_id")); entity.setLabel(rs.getString("label")); <START_MOD>entity.setDnsResolverConfiguration(new org.ovirt.engine.core.dao.DnsResolverConfigurationMapper().parseNameServersString(rs.getString("name_servers"))); <END_MOD>return entity; }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper = createIdParameterMapper(networkAttachment.getId()).addValue("network_id", networkAttachment.getNetworkId()).addValue("nic_id", networkAttachment.getNicId()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(networkAttachment.getProperties())); mapIpConfiguration(networkAttachment, mapper); <START_MOD>mapper.addValue("name_servers", new org.ovirt.engine.core.dao.DnsResolverConfigurationMapper().getNameServersString(networkAttachment.getDnsResolverConfiguration())); <END_MOD>return mapper; }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.Network network) { return getCustomMapSqlParameterSource().addValue("addr", network.getAddr()).addValue("description", network.getDescription()).addValue("free_text_comment", network.getComment()).addValue("id", network.getId()).addValue("name", network.getName()).addValue("subnet", network.getSubnet()).addValue("gateway", network.getGateway()).addValue("type", network.getType()).addValue("vlan_id", network.getVlanId()).addValue("stp", network.getStp()).addValue("storage_pool_id", network.getDataCenterId()).addValue("mtu", network.getMtu()).addValue("vm_network", network.isVmNetwork()).addValue("provider_network_provider_id", ((network.getProvidedBy()) == null ? null : network.getProvidedBy().getProviderId())).addValue("provider_network_external_id", ((network.getProvidedBy()) == null ? null : network.getProvidedBy().getExternalId())).addValue("qos_id", network.getQosId()).addValue("label", network.getLabel())<START_MOD>.addValue("name_servers", new org.ovirt.engine.core.dao.DnsResolverConfigurationMapper().getNameServersString(network.getDnsResolverConfiguration()))<END_MOD>; }
<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.VmDevicesListReturn listVmDevices(java.util.List<java.lang.String> vmIds);<END_MOD>
<START_MOD>@java.lang.Override protected void executeVdsBrokerCommand() { vmDevicesListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVmDevicesVDSCommand.getBroker().listVmDevices(org.ovirt.engine.core.vdsbroker.vdsbroker.ListVmDevicesVDSCommand.getParameters().getVmIds()); org.ovirt.engine.core.vdsbroker.vdsbroker.ListVmDevicesVDSCommand.proceedProxyReturnValue(); setReturnValue(vmDevicesListReturn.getDevicesList()); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VmDevicesListReturn listVmDevices(java.util.List<java.lang.String> vmIds) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.getVMDevices").withOptionalParameterAsList("vmList", vmIds).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("vmDevices").withResponseType(java.lang.Object[].class); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmDevicesListReturn(response); }<END_MOD>
<START_MOD>org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.VmStatic, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageLeaseListModel> getSubTabStorageLeaseModelProvider();<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmStatic getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic; }<END_MOD>
<START_MOD>@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.VmStatic, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageLeaseListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageLeasePresenter.constants.storageLeaseSubTabLabel(), 8, modelProvider); }<END_MOD>
<START_MOD>void initTable(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { if (storageDomain == null) { return; } getTable().enableColumnResizing(); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.typeColumn, "", true, "30px"); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.aliasColumn, org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.aliasDisk(), true, "120px"); }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic.getName(); }<END_MOD>
<START_MOD>void initTableColumns() { getTable().enableColumnResizing(); org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.typeColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractColumn<org.ovirt.engine.core.common.businessentities.VmStatic, org.ovirt.engine.core.common.businessentities.VmStatic>(new org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.VmTypeCell()) { @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmStatic getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic; } @java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { } }; org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.aliasColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmStatic>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic.getName(); } }; }<END_MOD>
<START_MOD>@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.Context context, org.ovirt.engine.core.common.businessentities.VmStatic vm, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { com.google.gwt.resources.client.ImageResource image = (Guid.Empty.equals(vm.getVmtGuid())) ? org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.resources.vmImage() : org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.resources.templatesImage(); sb.append(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(image).getHTML())); }<END_MOD>
<START_MOD>@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { setItems(null); return; } super.syncSearch(); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getEntity(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVmsWithLeaseByStorageId, new org.ovirt.engine.core.common.queries.IdQueryParameters(storageDomain.getId()), new org.ovirt.engine.ui.uicommonweb.models.storage.SetItemsAsyncQuery()); }<END_MOD>
private boolean isManagementNetworkChanged(<START_MOD>org.ovirt.engine.core.common.businessentities.network.Network managementNetwork,<END_MOD> java.<START_MOD>util.List<org.ovirt.engine.core.common.vdscommands.HostNetwork> networksToConfigure) { java.<END_MOD>lang.String mgmtNetworkName = <START_MOD>managementNetwork.getName(); for (org.ovirt.engine.core.common.vdscommands.HostNetwork network : networksToConfigure) { if (mgmtNetworkName.equals(network.getNetworkName())) { return true; } } for (org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond : <END_MOD>org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.<START_MOD>getParameters().getCreateOrUpdateBonds()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bondNic = getExistingNicsBusinessEntityMap().get(createOrUpdateBond.getId());<END_MOD> if (<START_MOD>(bondNic != null) && (<END_MOD>mgmtNetworkName.equals(<START_MOD>bondNic<END_MOD>.getNetworkName()))<START_MOD>)<END_MOD> { return true; } } return false; }
private org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters createSetupNetworksParameters(int timeout) { org.ovirt.engine.core.common.network.SwitchType clusterSwitchType = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getCluster().getRequiredSwitchTypeForCluster(); <START_MOD>org.ovirt.engine.core.common.businessentities.network.Network managementNetworkOfThisCluster = managementNetworkUtil.getManagementNetwork(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterId()); java.util.List<org.ovirt.engine.core.common.vdscommands.HostNetwork> networksToConfigure = calculateNetworksToConfigure(managementNetworkOfThisCluster); boolean managementNetworkChanged = isManagementNetworkChanged(managementNetworkOfThisCluster, networksToConfigure); <END_MOD>final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters hostCmdParams = new org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds(), <START_MOD>networksToConfigure<END_MOD>, getAllNetworksToRemove(), org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateOrUpdateBonds(), getRemovedBondNames(), clusterSwitchType); hostCmdParams.setRollbackOnFailure(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().rollbackOnFailure()); hostCmdParams.setConnectivityTimeout(timeout); hostCmdParams.setManagementNetworkChanged(<START_MOD>managementNetworkChanged<END_MOD>); return hostCmdParams; }
<START_MOD>private void testFillReportedConfiguration(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.HostNetworkQos networkQos) { nic.setNetworkName(network.getName()); when(interfaceDao.getAllInterfacesForVds(eq(hostId))).thenReturn(java.util.Arrays.asList(baseNic, vlanNic)); when(networkDao.getAllForCluster(eq(clusterId))).thenReturn(java.util.Collections.singletonList(network)); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); networkAttachment.setNicId(baseNic.getId()); networkAttachment.setNicName(baseNic.getName()); networkAttachment.setNetworkId(network.getId()); when(effectiveHostNetworkQos.getQos(networkAttachment, network)).thenReturn(networkQos); filler.fillReportedConfiguration(networkAttachment, hostId); verify(filler).createNetworkInSyncWithVdsNetworkInterface(networkAttachment, nic, network, vds, cluster); }<END_MOD>
<START_MOD>java.lang.String setDnsConfigurationLabel();<END_MOD>
private void initValues() { if ((networkAttachment) == null) { return; } boolean newAttachment = (networkAttachment.getId()) == null; boolean attachmentNotReportedByTheEngine = (networkAttachment.getReportedConfigurations()) == null; boolean syncedNetwork = attachmentNotReportedByTheEngine || (networkAttachment.getReportedConfigurations().isNetworkInSync()); boolean syncRequestedByUser = (!syncedNetwork) && (java.lang.Boolean.TRUE.equals(getIsToSync().getEntity())); if ((newAttachment || syncedNetwork) || syncRequestedByUser) { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNetworkAttachmentForModel(networkAttachment, networkQos, nic)); } else { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNic(nic)); } <START_MOD>if ((networkAttachment.getDnsResolverConfiguration()) == null) { networkAttachment.setDnsResolverConfiguration(new org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration()); } this.getDnsConfigurationModel().setEntity(networkAttachment.getDnsResolverConfiguration()); }<END_MOD>
@java.lang.Override public void edit(T model) { profilesEditor.edit(model.getProfiles()); subnetWidget.edit(model.getSubnetModel()); <START_MOD>nameServerWidget.edit(model.getDnsConfigurationModel().getNameServerModelListModel()); <END_MOD>}
@java.lang.Override public T flush() { profilesEditor.flush(); subnetWidget.flush(); <START_MOD>nameServerWidget.flush(); <END_MOD>return null; }
@java.lang.Override protected void populateTabMap() { getTabNameMapping().put(TabName.IPV4_TAB, this.ipv4Tab); getTabNameMapping().put(TabName.IPV6_TAB, this.ipv6Tab); getTabNameMapping().put(TabName.QOS_TAB, this.qosTab); getTabNameMapping().put(TabName.CUSTOM_PROPERTIES_TAB, this.customPropertiesTab); <START_MOD>getTabNameMapping().put(TabName.DNS_CONFIGURATION_TAB, this.dnsConfigurationTab); <END_MOD>}
<START_MOD>public void init() { listenToSetDnsConfigurationCheckboxChanges(); boolean shouldSetDnsConfiguration = shouldSetDnsConfiguration(); setDnsConfiguration.setEntity(shouldSetDnsConfiguration); java.util.List<org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel> nameServerModels = new java.util.ArrayList<>(); if (shouldSetDnsConfiguration) { for (org.ovirt.engine.core.common.businessentities.network.NameServer nameServer : getEntity().getNameServers()) { nameServerModels.add(new org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel(nameServer)); } } nameServerModelListModel.setItems(nameServerModels); }<END_MOD>
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel object) { driver.edit(object); qosWidget.edit(object.getQosModel()); enableDisableByBootProtocol(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel) (sender)); java.lang.String propertyName = args.propertyName; if ("BootProtocolsAvailable".equals(propertyName)) { enableDisableByBootProtocol(model); } } }); if (object.getIsToSync().getIsChangable()) { isToSyncInfo.setVisible(true); } customPropertiesTab.setVisible(object.getCustomPropertiesModel().getIsAvailable()); customPropertiesWidget.edit(object.getCustomPropertiesModel()); customPropertiesLabel.setEnabled(object.getCustomPropertiesModel().getIsChangable()); <START_MOD>dnsConfigurationTab.setVisible(true); dnsConfigurationWidget.edit(object.getDnsConfigurationModel()); }<END_MOD>
<START_MOD>private void listenToSetDnsConfigurationCheckboxChanges() { org.ovirt.engine.ui.uicompat.Event<org.ovirt.engine.ui.uicompat.EventArgs> entityChangedEvent = setDnsConfiguration.getEntityChangedEvent(); entityChangedEvent.clearListeners(); entityChangedEvent.addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { nameServerModelListModel.setIsChangeable(setDnsConfiguration.getEntity()); } }); }<END_MOD>
<START_MOD>public boolean validate() { if (!(this.getSetDnsConfiguration().getEntity())) { setIsValid(true); return true; } boolean isValid = true; for (org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel nameServerModel : this.nameServerModelListModel.getItems()) { if (!(nameServerModel.validate())) { isValid = false; } } setIsValid(isValid); return isValid; }<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsChangable".equals(args.propertyName)) { boolean value = getIsChangable(); setDnsConfiguration.setIsChangeable(value); nameServerModelListModel.setIsChangeable(value); } }<END_MOD>
<START_MOD>public org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration flush() { java.lang.Boolean shouldSetDnsConfiguration = this.setDnsConfiguration.getEntity(); if (!shouldSetDnsConfiguration) { return null; } org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration dnsResolverConfiguration = new org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration(); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServers = new java.util.ArrayList<>(); dnsResolverConfiguration.setNameServers(nameServers); for (org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel nameServerModel : this.nameServerModelListModel.getItems()) { nameServers.add(nameServerModel.flush()); } return dnsResolverConfiguration; }<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { init(); }<END_MOD>
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getSetDnsConfiguration() { return setDnsConfiguration; }<END_MOD>
<START_MOD>public boolean validate() { nameServerEntity.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.Ipv4OrIpv6AddressValidation() }); setIsValid(nameServerEntity.getIsValid()); return getIsValid(); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.common.businessentities.network.NameServer flush() { return new org.ovirt.engine.core.common.businessentities.network.NameServer(this.nameServerEntity.getEntity()); }<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { nameServerModelListModel.setIsChangeable(setDnsConfiguration.getEntity()); }<END_MOD>
<START_MOD>void initTable(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { if (storageDomain == null) { return; } getTable().enableColumnResizing(); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.typeColumn, org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.empty(), true, "30px"); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.aliasColumn, org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.aliasDisk(), true, "120px"); }<END_MOD>
<START_MOD>void initTableColumns() { getTable().enableColumnResizing(); org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.typeColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractColumn<org.ovirt.engine.core.common.businessentities.VmBase, org.ovirt.engine.core.common.businessentities.VmBase>(new org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.VmTypeCell()) { @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmBase getValue(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return vmBase; } @java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString((vmBase instanceof org.ovirt.engine.core.common.businessentities.VmStatic ? org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.vm() : org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.template())); } }; org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.aliasColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmBase>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return vmBase.getName(); } }; }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult validateUsbDevices(org.ovirt.engine.core.common.businessentities.VmBase vm) { if ((vm.getUsbPolicy()) == (org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED)) { final java.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> usbControllers = getVmDeviceUtils().getUsbControllers(vm.getId()); final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> unmanagedControllers = usbControllers.stream().filter(( d) -> !(d.isManaged())).collect(java.util.stream.Collectors.toList()); if ((unmanagedControllers.size()) > 1) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_USB_UNMANAGED_DEV_EXCEEDED_LIMIT, java.lang.String.format("$VmName %1$s", vm.getName()), java.lang.String.format("$UnmanagedUsbDevices %1$s", unmanagedControllers)); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
private void setVmLeasesAvailability() { TModel model = getModel(); org.ovirt.engine.core.compat.Version compVer = model.getSelectedCluster().getCompatibilityVersion(); if ((model.getCustomCompatibilityVersion().getSelectedItem()) != null) { compVer = model.getCustomCompatibilityVersion().getSelectedItem(); } <START_MOD>vmLeasesSupported = <END_MOD>org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isVmLeasesFeatureSupported(compVer)<START_MOD>; if (!(vmLeasesSupported)) { model.getLease().setIsChangeable(false<END_MOD>, constants.vmLeasesSupported()); }<START_MOD> else { model.getLease().setIsChangeable(model.getIsHighlyAvailable().getEntity()); } }<END_MOD>
protected void commonInitialize() { priorityUtil = new org.ovirt.engine.ui.uicommonweb.models.vms.PriorityUtil(getModel()); virtioScsiUtil = new org.ovirt.engine.ui.uicommonweb.models.vms.VirtioScsiUtil(getModel()); getModel().getVmId().setIsAvailable(false); getModel().getLease().setIsChangeable(false); getModel().getIsHighlyAvailable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean ha = getModel().getIsHighlyAvailable().getEntity(); getModel().getLease().setIsChangeable(<START_MOD>((vmLeasesSupported) && <END_MOD>ha<START_MOD>)<END_MOD>); if (!ha) { getModel().getLease().setSelectedItem(null); } } }); getModel().getMigrationPolicies().setItems(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getMigrationPolicies(org.ovirt.engine.core.compat.Version.getLast())); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean ha = getModel().getIsHighlyAvailable().getEntity(); getModel().getLease().setIsChangeable(<START_MOD>((vmLeasesSupported) && <END_MOD>ha<START_MOD>)<END_MOD>); if (!ha) { getModel().getLease().setSelectedItem(null); } }
private org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters createParameters() {<START_MOD> org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(diskId, vmId); dve.setReadOnly(true);<END_MOD> org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters parameters = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(); return parameters; }
@org.junit.Test public void testInactiveDomainInList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(StorageDomainStatus.Inactive); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.<START_MOD>getMonitoredOrLockedDomainList<END_MOD>(domainsList); <START_MOD>assertFalse<END_MOD>(listReturned.isEmpty()); }
private void testBusyAndActiveDomainInList(org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(status); domainsList.add(tempStorageDomains); tempStorageDomains.setStatus(StorageDomainStatus.Active); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.<START_MOD>getMonitoredOrLockedDomainList<END_MOD>(domainsList); assertEquals(2, listReturned.size()); }
@org.junit.Test public void testActiveDomainInList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(StorageDomainStatus.Active); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.<START_MOD>getMonitoredOrLockedDomainList<END_MOD>(domainsList); assertTrue((!(listReturned.isEmpty()))); }
protected boolean checkStorageDomainStatus(final org.ovirt.engine.core.common.businessentities.StorageDomainStatus... statuses) { <START_MOD>return<END_MOD> <START_MOD>checkStorageDomainStatus(new<END_MOD> <START_MOD>java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>HashSet<END_MOD>(java.util.Arrays.asList(statuses)<START_MOD>)<END_MOD>); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> <START_MOD>getMonitoredOrLockedDomainList<END_MOD>(java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList) { return domainsList.stream().filter(( d) -> (<START_MOD>StorageConstants.monitoredDomainStatuses.contains<END_MOD>(d.getStatus())) || (d.getStatus().isStorageDomainInProcess())).collect(java.util.stream.Collectors.toList()); }
@org.junit.Test public void testEmptyDomainList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.<START_MOD>getMonitoredOrLockedDomainList<END_MOD>(domainsList); assertTrue(listReturned.isEmpty()); }
private void testBusyDomainInList(org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(status); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.<START_MOD>getMonitoredOrLockedDomainList<END_MOD>(domainsList); assertTrue((!(listReturned.isEmpty()))); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksList() { if ((cachedSelectedActiveDisks) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesAndCinderForVm = getDiskImagesForVm(); if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDisks()) == null) { cachedSelectedActiveDisks = imagesAndCinderForVm; } else { cachedSelectedActiveDisks = <START_MOD>getDiskImagesForVm()<END_MOD>.<START_MOD>stream()<END_MOD>.<START_MOD>filter<END_MOD>(<START_MOD>(<END_MOD> <START_MOD>d) -> <END_MOD>getParameters().getDisks<START_MOD>().contains(d.getId())).collect(java.util.stream.Collectors.toList<END_MOD>()); } } return cachedSelectedActiveDisks; }
@org.junit.Test public void testImagesDoesNotExist() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage1 = org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getNewDiskImage(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage2 = org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getNewDiskImage(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImagesFromParams = new java.util.ArrayList<>(); diskImagesFromParams.addAll(java.util.Arrays.asList(diskImage1, diskImage2)); <START_MOD>java.util.Set<org.ovirt.engine.core.compat.Guid> guidsForDiskImages = diskImagesFromParams.stream().map(DiskImage::getId).collect(java.util.stream.Collectors.toSet()); <END_MOD>cmd.getParameters().setDisks(<START_MOD>guidsForDiskImages<END_MOD>); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST)).when(diskImagesValidator).diskImagesNotExist(<START_MOD>guidsForDiskImages<END_MOD>); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST); }
protected org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.VM vm) { <START_MOD>java.util.Set<org.ovirt.engine.core.compat.Guid> diskIds = vm.getDiskList().stream().map(BaseDisk::getId).collect(java.util.stream.Collectors.toSet()); <END_MOD>org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters params = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(vm.getId(), (((vm.getName()) + (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getStorageDomain().getName())) + (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.DR_SNAPSHOT_NAME_SUFFIX)), false); params.setParentCommand(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getActionType()); params.setSnapshotType(SnapshotType.REGULAR); params.setParentParameters(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters()); params.setDisks(<START_MOD>diskIds<END_MOD>); params.setNeedsLocking(false); params.setEndProcedure(EndProcedure.COMMAND_MANAGED); return params; }
private void fastForwardDisksToActiveSnapshot() { if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDisks()) != null) { getDiskImagesForVm()<START_MOD>.stream().filter(( d) -> !(getParameters().getDisks().contains(d.getId()))).forEach(( d) -><END_MOD> org.ovirt.engine.core.bll.snapshots.imageDao.updateImageVmSnapshotId(<START_MOD>d<END_MOD>.getImageId(), newActiveSnapshotId)<START_MOD>)<END_MOD>; } }
private boolean isSpecifiedDisksExist(java.util.<START_MOD>Set<END_MOD><org.ovirt.engine.core.<START_MOD>compat<END_MOD>.<START_MOD>Guid<END_MOD>> disks) { if ((disks == null) || (disks.isEmpty())) { return true; } org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = createDiskImageValidator(<START_MOD>new java.util.ArrayList<>()<END_MOD>); if (!(validate(diskImagesValidator.diskImagesNotExist(<START_MOD>disks<END_MOD>)))) { return false; } return true; }
@org.junit.Test public void validProviderType() { when(provider.getType()).thenReturn(ProviderType.OPENSTACK_NETWORK); assertThat(validator.<START_MOD>providerTypeIsOpenstack<END_MOD>(), isValid()); }
private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus fetchedStatus) { org.ovirt.engine.core.bll.gluster.GlusterSyncJob.log.debug( that status of brick '{}' in volume '{}' changed from '{}' to '{}' brick.getQualifiedName(), volume.getName(), brick.getStatus(), fetchedStatus); java.util.Map<java.lang.String, java.lang.String> customValues = new java.util.HashMap<>(); customValues.put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); customValues.put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); customValues.put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); logUtil.logAuditMessage(volume.getClusterId(), volume<START_MOD>.getClusterName(), volume<END_MOD>, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, customValues); if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN); } }
public void logServerMessage(final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType) { logAuditMessage((server == null ? org.ovirt.engine.core.compat.Guid.Empty : server.getClusterId()), <START_MOD>(server == null ? null : server.getClusterName()), <END_MOD>null, server, logType, java.util.Collections.emptyMap()); }
public void logAuditMessage(final org.ovirt.engine.core.compat.Guid clusterId, final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType, final org.ovirt.engine.core.compat.Guid brickId, final java.lang.String brickPath) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = <START_MOD>createEvent<END_MOD>(volume<START_MOD>,<END_MOD> <START_MOD>server,<END_MOD> clusterId<START_MOD>,<END_MOD> server.getClusterName()); logable.setBrickId(brickId); logable.setBrickPath(brickPath); auditLogDirector.log(logable, logType); }
public void logAuditMessage(final org.ovirt.engine.core.compat.Guid clusterId<START_MOD>, java.lang.String clusterName<END_MOD>, final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType, final java.util.Map<java.lang.String, java.lang.String> customValues) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.<START_MOD>AuditLogable<END_MOD> logable = <START_MOD>createEvent(volume, <END_MOD>server<START_MOD>, <END_MOD>clusterId<START_MOD>, clusterName<END_MOD>); if (customValues != null) { for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : customValues.entrySet()) { logable.addCustomValue(entry.getKey(), entry.getValue()); } } auditLogDirector.log(logable, logType); }
private java.util.Map<org.ovirt.engine.core.<START_MOD>bll<END_MOD>.storage.<START_MOD>domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler<END_MOD>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid lunFromVgLunId, org.ovirt.engine.core.compat.Guid lunFromDbLunId, org.ovirt.engine.core.compat.Guid lunFromVgPvId, org.ovirt.engine.core.compat.Guid lunFromDbPvId) { setLunsIds(lunFromVgLunId, lunFromDbLunId, lunFromVgPvId, lunFromDbPvId); return getLunsToUpdateInDb(); }
private java.util.Map<org.ovirt.engine.core.<START_MOD>bll<END_MOD>.storage.<START_MOD>domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler<END_MOD>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = java.util.Collections.singletonList(lunFromVg); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = java.util.Collections.singletonList(lunFromDb); return command.getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); }
@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); java.util.Map<<START_MOD>org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler, <END_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>><START_MOD> lunsToUpdateInDb = getLunsToUpdateInDb(lunsFromVgInfo<END_MOD>, <START_MOD>lunsFromDb); boolean dbShouldBeUpdated =<END_MOD> lunsToUpdateInDb<START_MOD>.keySet().stream().anyMatch(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler::requiresDbUpdate); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { updateLunsInDb(lunsToUpdateInDb); refreshLunsConnections(lunsFromVgInfo); cleanupLunsFromDb<END_MOD>(lunsFromVgInfo, lunsFromDb); return null; }); } org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }
protected java.util.Map<<START_MOD>org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler, <END_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>><START_MOD> getLunsToUpdateInDb(<END_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs><START_MOD> lunsFromVgInfo, <END_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDbMap = lunsFromDb.stream().collect(java.util.stream.Collectors.toMap(LUNs::getLUNId, java.util.function.Function.identity())); return lunsFromVgInfo.stream().collect(java.util.stream.Collectors.groupingBy(( lunFromVgInfo) -> { org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDb = lunsFromDbMap.get(lunFromVgInfo.getLUNId()); if (lunFromDb == null) { return saveNewLuns; } boolean lunFromDbHasSamePvId = java.util.Objects.equals(lunFromDb.getPhysicalVolumeId(), lunFromVgInfo.getPhysicalVolumeId()); if (lunFromDbHasSamePvId) { if ((((lunFromDb.getDeviceSize()) != (lunFromVgInfo.getDeviceSize())) || (!(java.util.Objects.equals(lunFromDb.getDiscardMaxSize(), lunFromVgInfo.getDiscardMaxSize())))) || (!(java.util.Objects.equals(lunFromDb.getDiscardZeroesData(), lunFromVgInfo.getDiscardZeroesData())))) { return updateExistingLuns; } return noOp; } return updateExistingLuns; })); }
protected void updateLunsInDb(java.util.Map<<START_MOD>org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler, <END_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>><START_MOD> lunsToUpdateInDbMap) { lunsToUpdateInDbMap.entrySet().forEach(( entry) -> entry.getKey().accept(entry.getValue())); if (lunsToUpdateInDbMap.keySet().stream().anyMatch(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler::affectsDiscardFunctionality)) { java.util.Collection<END_MOD><org.ovirt.engine.core.common.businessentities.storage.LUNs><START_MOD> lunsToUpdateInDb =<END_MOD> lunsToUpdateInDbMap.entrySet().<START_MOD>stream().filter<END_MOD>(( entry) -> entry.getKey().<START_MOD>affectsDiscardFunctionality(<END_MOD>)).map(java.util.Map.Entry::getValue).flatMap(java.util.List::stream).collect(java.util.stream.Collectors.toList()); discardHelper.logIfLunsBreakStorageDomainDiscardFunctionality(lunsToUpdateInDb, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomainId()); } }
<START_MOD>@org.junit.Test public void testGetLunsToUpdateInDbLunExistsInDbButNoInVgInfo() { org.ovirt.engine.core.compat.Guid lunFromDbId = org.ovirt.engine.core.compat.Guid.newGuid(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToRemoveFromDb = getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid.newGuid(), lunFromDbId, org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid()).get(command.removeLuns); assertLunIdInList(lunsToRemoveFromDb, lunFromDbId); }<END_MOD>
@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDb = getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); boolean dbShouldBeUpdated = lunsToUpdateInDb.keySet().stream().anyMatch(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler::requiresDbUpdate); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { updateLunsInDb(lunsToUpdateInDb); refreshLunsConnections(lunsFromVgInfo); return null; }); } org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }
<START_MOD>@org.junit.Test public void testGetLunsToRemoveFromDb() { lunFromVg.setLUNId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); lunFromDb.setLUNId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); org.ovirt.engine.core.common.businessentities.storage.LUNs dummyLun = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); dummyLun.setId(((org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.DUMMY_LUN_ID_PREFIX) + (org.ovirt.engine.core.compat.Guid.newGuid().toString()))); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = java.util.Collections.singletonList(lunFromVg); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = java.util.Arrays.asList(lunFromDb, dummyLun); assertTrue(isEqualCollection(command.getLunsToRemoveFromDb(lunsFromVgInfo, lunsFromDb), java.util.Collections.singletonList(lunFromDb))); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult allDomainsHaveSpaceForMerge(java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo> snapshots, org.ovirt.engine.core.common.action.VdcActionType snapshotActionType) { final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.SubchainInfo> storageToSnapshots = getDomainsToSnapshotsMap(snapshots); return validOrFirstFailure(( entry) -> { org.ovirt.engine.core.compat.Guid sdId = entry.getKey(); org.ovirt.engine.core.common.businessentities.SubchainInfo subchain = storageToSnapshots.get(sdId); return getStorageDomainValidator(entry).hasSpaceForMerge(subchain, snapshotActionType); }); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult hasSpaceForMerge(org.ovirt.engine.core.common.businessentities.SubchainInfo subchain, org.ovirt.engine.core.common.action.VdcActionType snapshotActionType) { if (storageDomain.getStorageType().isCinderDomain()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.lang.Long availableSize = storageDomain.getAvailableDiskSizeInBytes(); double totalSizeForDisks = getRequiredSizeForMerge(subchain, snapshotActionType); return validateRequiredSpace(availableSize, totalSizeForDisks); }<END_MOD>
<START_MOD>private double getRequiredSizeForMerge(org.ovirt.engine.core.common.businessentities.SubchainInfo subchain, org.ovirt.engine.core.common.action.VdcActionType snapshotActionType) { org.ovirt.engine.core.common.businessentities.storage.DiskImage baseSnapshot = subchain.getBaseImage(); org.ovirt.engine.core.common.businessentities.storage.DiskImage topSnapshot = subchain.getTopImage(); if (snapshotActionType == (org.ovirt.engine.core.common.action.VdcActionType.RemoveSnapshotSingleDisk)) { return (java.lang.Math.min(((baseSnapshot.getActualSizeInBytes()) + (topSnapshot.getActualSizeInBytes())), baseSnapshot.getSize())) * (org.ovirt.engine.core.common.constants.StorageConstants.QCOW_OVERHEAD_FACTOR); } org.ovirt.engine.core.common.businessentities.storage.VolumeType volumeType = (snapshotActionType == (org.ovirt.engine.core.common.action.VdcActionType.ColdMergeSnapshotSingleDisk)) ? baseSnapshot.getVolumeType() : topSnapshot.getVolumeType(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(baseSnapshot.getParentId())) { if ((baseSnapshot.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.RAW)) { if (volumeType == (org.ovirt.engine.core.common.businessentities.storage.VolumeType.Preallocated)) { return 0.0; } return java.lang.Math.min(((topSnapshot.getActualSizeInBytes()) / (org.ovirt.engine.core.common.constants.StorageConstants.QCOW_OVERHEAD_FACTOR)), ((baseSnapshot.getSize()) - (baseSnapshot.getActualSizeInBytes()))); } } return java.lang.Math.min((((topSnapshot.getSize()) * (org.ovirt.engine.core.common.constants.StorageConstants.QCOW_OVERHEAD_FACTOR)) - (baseSnapshot.getActualSizeInBytes())), topSnapshot.getActualSizeInBytes()); }<END_MOD>
<START_MOD>private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.SubchainInfo> getDomainsToSnapshotsMap(java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo> snapshots) { return snapshots.stream().collect(java.util.stream.Collectors.toMap(SubchainInfo::getStorageDomainId, java.util.function.Function.identity())); }<END_MOD>
protected javax.ws.rs.core.Response doAction(final org.ovirt.engine.core.common.action.VdcActionType task, final org.ovirt.engine.core.common.action.VdcActionParametersBase params, final org.ovirt.engine.api.model.Action action, org.ovirt.engine.api.restapi.resource.AbstractBackendResource.PollingType pollingType) { awaitGrace(action); try { org.ovirt.engine.core.common.action.VdcReturnValueBase actionResult = doAction(task, params); if ((actionResult.getJobId()) != null) { setJobLink(action, actionResult); } if (<START_MOD>(<END_MOD>actionResult.getHasAsyncTasks()) <START_MOD>|| ((actionResult.getJobId()) != null)) <END_MOD>{ if (expectBlocking(action)) { org.ovirt.engine.api.model.CreationStatus status = awaitCompletion(actionResult, pollingType); return actionStatus(status, action, addLinks(newModel(id))); } else { return actionAsync(actionResult, action); } } else { return actionSuccess(action, addLinks(newModel(id))); } } catch (java.lang.Exception e) { return handleError(e, action); } }
private void cancel() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())<START_MOD>); setWindow(null<END_MOD>); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = windowModel.getCurrentProxies(); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> items = currentModels.getItems(); items.remove(this); currentModels.setItems(<START_MOD>null); currentModels.setItems(<END_MOD>items); }
private void onOk() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())<START_MOD>); setWindow(null<END_MOD>); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = windowModel.getCurrentProxies(); org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel selectedModel = windowModel.getAvailableProxies().getSelectedItem(); setEntity(selectedModel.getEntity()); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> items = currentModels.getItems(); currentModels.setItems(null); currentModels.setItems(items); }
<START_MOD>public boolean checkDomainMetadataDevices(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable, org.ovirt.engine.core.common.businessentities.StorageDomain domain) { if (((domain.getVgMetadataDevice()) == null) || ((domain.getFirstMetadataDevice()) == null)) { auditLogDirector.log(logable, AuditLogType.FAILED_DETERMINE_STORAGE_DOMAIN_METADATA_DEVICES); return false; } return true; }<END_MOD>
public void fillMetadataDevicesInfo(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic, org.ovirt.engine.core.compat.Guid vdsId) { try { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainFromIrs = ((org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid>) (resourceManager.runVdsCommand(VDSCommandType.HSMGetStorageDomainInfo, new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(vdsId, storageDomainStatic.getId())).getReturnValue())).getFirst(); storageDomainStatic.setFirstMetadataDevice(domainFromIrs.getFirstMetadataDevice()); storageDomainStatic.setVgMetadataDevice(domainFromIrs.getVgMetadataDevice()); } catch (java.lang.Exception e) { <START_MOD>storageDomainStatic.setFirstMetadataDevice(null); storageDomainStatic.setVgMetadataDevice(null); <END_MOD>org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info( to get the domain info, ignoring } }
private void validateRetrievedMetadataDevices() { if (<START_MOD>!<END_MOD>(<START_MOD>blockStorageDomainHelper.checkDomainMetadataDevices<END_MOD>(<START_MOD>this, <END_MOD>org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain()))) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GeneralException,   determine the domain metadata devices } }
<START_MOD>private void refreshMetadataDevicesInfo() { java.lang.String oldVgMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice(); java.lang.String oldFirstMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()); if ((!(java.util.Objects.equals(oldVgMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()))) || (!(java.util.Objects.equals(oldFirstMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice())))) { storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } blockStorageDomainHelper.checkDomainMetadataDevices(this, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain()); }<END_MOD>
@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); java.util.Map<java.util.function.Consumer<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDb = getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); boolean dbShouldBeUpdated = (lunsToUpdateInDb.containsKey(updateExistingLuns)) || (lunsToUpdateInDb.containsKey(saveNewLuns)); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { updateLunsInDb(lunsToUpdateInDb); refreshLunsConnections(lunsFromVgInfo); cleanupLunsFromDb(lunsFromVgInfo, lunsFromDb); return null; }); } <START_MOD>refreshMetadataDevicesInfo(); <END_MOD>org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }
<START_MOD>public boolean checkDomainMetadataDevices(org.ovirt.engine.core.common.businessentities.StorageDomain domain) { if (((domain.getVgMetadataDevice()) == null) || ((domain.getFirstMetadataDevice()) == null)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); logable.setStorageDomainName(domain.getName()); auditLogDirector.log(logable, AuditLogType.FAILED_DETERMINE_STORAGE_DOMAIN_METADATA_DEVICES); return false; } return true; }<END_MOD>
<START_MOD>@javax.validation.constraints.NotNull private static org.ovirt.engine.api.model.IpVersion getIpVersion(java.lang.String address) { if (address == null) { throw new java.lang.IllegalArgumentException(("Unable to figure out ip version for address: " + address)); } return address.contains(":") ? org.ovirt.engine.api.model.IpVersion.V4 : org.ovirt.engine.api.model.IpVersion.V6; }<END_MOD>
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DnsResolverConfiguration.class, to = org.ovirt.engine.api.model.DnsResolverConfiguration.class) public static org.ovirt.engine.api.model.DnsResolverConfiguration map(org.ovirt.engine.api.model.DnsResolverConfiguration model, org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration template) { org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration target = new org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration(); if (model.isSetNameServers()) { org.ovirt.engine.api.model.DnsResolverConfiguration.NameServersList nameServersList = model.getNameServers(); if (nameServersList.isSetNameServers()) { java.util.List<java.lang.String> nameServers = nameServersList.getNameServers(); target.setNameServers(nameServers.stream().map(org.ovirt.engine.api.restapi.types.DnsResolverConfigurationMapper::mapNameServer).collect(java.util.stream.Collectors.toList())); } } return target; }<END_MOD>
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DnsResolverConfiguration.class, to = org.ovirt.engine.api.model.DnsResolverConfiguration.class) public static org.ovirt.engine.api.model.DnsResolverConfiguration map(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity, org.ovirt.engine.api.model.DnsResolverConfiguration template) { if (entity == null) { return null; } java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServers = entity.getNameServers(); if (nameServers == null) { return null; } java.util.List<java.lang.String> nameServerList = nameServers.stream().map(NameServer::getAddress).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.api.model.DnsResolverConfiguration.NameServersList nameServersList = new org.ovirt.engine.api.model.DnsResolverConfiguration.NameServersList(); nameServersList.getNameServers().addAll(nameServerList); org.ovirt.engine.api.model.DnsResolverConfiguration dnsResolverConfiguration = new org.ovirt.engine.api.model.DnsResolverConfiguration(); dnsResolverConfiguration.setNameServers(nameServersList); return dnsResolverConfiguration; }<END_MOD>
<START_MOD>private static org.ovirt.engine.core.common.businessentities.network.NameServer mapNameServer(java.lang.String address) { switch (org.ovirt.engine.api.restapi.types.DnsResolverConfigurationMapper.getIpVersion(address)) { case V4 : return new org.ovirt.engine.core.common.businessentities.network.NameServer.NameServerIpv4(address); case V6 : return new org.ovirt.engine.core.common.businessentities.network.NameServer.NameServerIpv6(address); default : throw new java.lang.RuntimeException("Coding error, this should be unreachable."); } }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.ImageTransfer filteredGet(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userId, boolean isFiltered) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource sqlParams = createIdParameterMapper(id); sqlParams.addValue("user_id", userId); sqlParams.addValue("is_filtered", isFiltered); return getCallsHandler().executeRead("GetImageUploadsByCommandId", createEntityRowMapper(), sqlParams); }<END_MOD>
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getQueryReturnValue().setReturnValue(imageTransferDao.<START_MOD>filteredGet<END_MOD>(org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getParameters().getId()<START_MOD>, org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getUserID(), org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getParameters().isFiltered()<END_MOD>)); }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.ImageTransfer get(org.ovirt.engine.core.compat.Guid id) { return filteredGet(id, null, false); }<END_MOD>
<START_MOD>org.ovirt.engine.core.common.businessentities.storage.ImageTransfer filteredGet(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid userId, boolean isFiltered);<END_MOD>
<START_MOD>@org.junit.Test public void testDefaultRouteWhenOutOfSync() { iface.setIpv4DefaultRoute(false); network.setDnsResolverConfiguration(sampleDnsResolverConfiguration); assertThat(createTestedInstance(true, sampleDnsResolverConfiguration).isNetworkInSync(), is(true)); }<END_MOD>
private void addDnsConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { boolean dnsResolverConfigurationSupported = org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.DnsResolverConfigurationSupported, this.cluster.getCompatibilityVersion()); if ((!(isDefaultRouteNetwork)) || (!dnsResolverConfigurationSupported)) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetworkAttachment = getNameServers(networkAttachment.getDnsResolverConfiguration()); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetwork = getNameServers(network.getDnsResolverConfiguration()); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfHost = getNameServers(reportedDnsResolverConfiguration); boolean shouldSetDefaultRoute = new org.ovirt.engine.core.bll.network.host.ShouldSetDefaultRouteFlagAndDnsData().test(true, networkAttachment); boolean engineDefineDnsConfiguration = shouldSetDefaultRoute && ((nameServersOfNetworkAttachment != null) || (nameServersOfNetwork != null)); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> expectedNameServers = (nameServersOfNetworkAttachment != null) ? nameServersOfNetworkAttachment : nameServersOfNetwork; <START_MOD>result.add(org.ovirt.engine.core.utils.DNS_CONFIGURATION, addressesAsString(nameServersOfHost), (<END_MOD>engineDefineDnsConfiguration <START_MOD>? addressesAsString(expectedNameServers) : ""), (!(engineDefineDnsConfiguration <END_MOD>&& (!(java.util.Objects.equals(nameServersOfHost, expectedNameServers)))<START_MOD>)))<END_MOD>; result.add(org.ovirt.engine.core.utils.<START_MOD>DEFAULT_ROUTE, iface.isIpv4DefaultRoute(), isDefaultRouteNetwork, (!(shouldSetDefaultRoute && (!(java.util.Objects.equals(iface.isIpv4DefaultRoute(), isDefaultRouteNetwork))))<END_MOD>)); }
@java.lang.Override protected boolean isGhost(org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel value) { return <START_MOD>(!(ghostsDisabled)) && (<END_MOD>org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(value.getEntity())<START_MOD>)<END_MOD>; }
private boolean canVmNumaPinnedToVds(java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes, org.ovirt.engine.core.common.businessentities.VDS vds) { java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> pNodes = <START_MOD>vdsNumaNodeDao<END_MOD>.getAllVdsNumaNodeByVdsId(vds.getId()); if ((pNodes == null) || (pNodes.isEmpty())) { return false; } java.util.Map<java.lang.Integer, org.ovirt.engine.core.common.businessentities.VdsNumaNode> indexMap = toMap(pNodes); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vNode : nodes) { for (java.lang.Integer pinnedIndex : vNode.getVdsNumaNodeList()) { if ((vNode.getMemTotal()) > (indexMap.get(pinnedIndex).getNumaNodeStatistics().getMemFree())) { return false; } } } return true; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingResources(java.lang.Class<T> type) { java.util.List<T> list = new java.util.ArrayList<>(); <START_MOD>synchronized(this) { <END_MOD>for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : pendingResources.values()) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } <START_MOD>} <END_MOD>return list; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingHostResources(org.ovirt.engine.core.compat.Guid host, java.lang.Class<T> type) { if (!(resourcesByHost.containsKey(host))) { return java.util.Collections.emptyList(); } java.util.List<T> list = new java.util.ArrayList<>(); <START_MOD>synchronized(this) { <END_MOD>for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : resourcesByHost.get(host)) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } <START_MOD>} <END_MOD>return list; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingVmResources(org.ovirt.engine.core.compat.Guid vm, java.lang.Class<T> type) { if (!(resourcesByVm.containsKey(vm))) { return java.util.Collections.emptyList(); } java.util.List<T> list = new java.util.ArrayList<>(); <START_MOD>synchronized(this) { <END_MOD>for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : resourcesByVm.get(vm)) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } <START_MOD>} <END_MOD>return list; }
<START_MOD>@java.lang.Override public void delay(java.util.List<org.ovirt.engine.core.compat.Guid> vdsIds) { if (vdsIds.isEmpty()) { return; } org.ovirt.engine.core.bll.RunVmCommandBase.log.debug("Try to wait for the engine update the hosts memory and cpu stats"); long maxUpdateElapsed = vdsIds.stream().mapToLong(( vdsId) -> resourceManager.getVdsManager(vdsId).getLastUpdateElapsed()).max().getAsLong(); long maxWaitTime = java.lang.Math.min(java.lang.Math.max(maxUpdateElapsed, java.util.concurrent.TimeUnit.SECONDS.toMillis(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(org.ovirt.engine.core.bll.VdsRefreshRate))), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ThrottlerMaxWaitForVdsUpdateInMillis)); long endTime = (java.lang.System.currentTimeMillis()) + maxWaitTime; for (org.ovirt.engine.core.compat.Guid vdsId : vdsIds) { long currentTime = java.lang.System.currentTimeMillis(); if (currentTime >= endTime) { break; } try { getBlockingQueue(vdsId).poll((endTime - currentTime), java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.InterruptedException e) { } } }<END_MOD>
<START_MOD>@org.junit.Test public void testNoAffinityGroups() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); assertThat(policyUnit.filter(cluster, hosts, newVm, null, new org.ovirt.engine.core.common.scheduling.PerHostMessages())).containsExactlyElementsOf(hosts); }<END_MOD>
<START_MOD>private boolean isVmMigratable(org.ovirt.engine.core.common.businessentities.VM vm) { return ((vm.getMigrationSupport()) == (org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE)) && (!(vm.isHostedEngine())); }<END_MOD>
<START_MOD>@org.junit.Test public void testFirstVm() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); org.ovirt.engine.core.common.businessentities.VM vm1 = createVMDown(cluster); org.ovirt.engine.core.common.businessentities.VM vm2 = createVMDown(cluster); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, true, vm1, vm2, newVm)); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); affinityGroups.clear(); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, false, vm1, vm2, newVm)); scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); }<END_MOD>
<START_MOD>@org.junit.Test public void testPositiveAffinity() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); org.ovirt.engine.core.common.businessentities.VM vm1 = createVmRunning(host2); org.ovirt.engine.core.common.businessentities.VM vm2 = createVmRunning(host2); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, true, vm1, vm2, newVm)); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1000)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); affinityGroups.clear(); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, false, vm1, vm2, newVm)); scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1000)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); }<END_MOD>
<START_MOD>@org.junit.Test public void testNoAffinityGroups() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); }<END_MOD>
<START_MOD>@org.junit.Test public void testNegativeAffinity() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2, host3); org.ovirt.engine.core.common.businessentities.VM vm1 = createVmRunning(host1); org.ovirt.engine.core.common.businessentities.VM vm2 = createVmRunning(host3); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.NEGATIVE, true, vm1, vm2, newVm)); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1000)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); assertEquals(((java.lang.Integer) (1000)), scores.get(host3.getId())); affinityGroups.clear(); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.NEGATIVE, false, vm1, vm2, newVm)); scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1000)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); assertEquals(((java.lang.Integer) (1000)), scores.get(host3.getId())); }<END_MOD>
<START_MOD>@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.NetworkFilterParameter parameter) { validateParameters(parameter, "value"); org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter vmNicFilterParameter = map(parameter); vmNicFilterParameter.setVmInterfaceId(nicId); return performCreate(VdcActionType.AddVmNicFilterParameter, new org.ovirt.engine.core.common.action.VmNicFilterParameterParameters(vmId, vmNicFilterParameter), new org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParametersResource.NetworkFilterParameterResolver(parameter.getName())); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.api.resource.NetworkFilterParameterResource getParameterResource(java.lang.String parameterId) { return inject(new org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParameterResource(vmId, nicId, parameterId)); }<END_MOD>
private java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> getDirectoryUser(org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser) { java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> groups = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.Object> response = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.findPrincipalsByIds(org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getSessionDataContainer().getSsoAccessToken(org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getParameters().getSessionId()), dbUser.getDomain(), dbUser.getNamespace(), java.util.Arrays.asList(dbUser.getExternalId()), true, true); java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> principalRecords = java.util.Collections.emptyList(); if (response.containsKey("result")) { principalRecords = ((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (response.get("result"))); } if (!(principalRecords.isEmpty())) { org.ovirt.engine.api.extensions.ExtMap principalRecord = principalRecords.iterator().next(); directoryUtils.flatGroups(principalRecord); for (org.ovirt.engine.api.extensions.ExtMap group : principalRecord.<java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>>get(PrincipalRecord.GROUPS, java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>emptyList())) { groups.add(new org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup(dbUser.getDomain(), group.get(GroupRecord.NAMESPACE), group.get(GroupRecord.NAME)<START_MOD>, group.get(GroupRecord.ID)<END_MOD>)); } } return groups; }
<START_MOD>@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().runInternalQuery(VdcQueryType.GetAuthzGroupsByUserId, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId())); java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> authzGroups = returnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> groupsIds = authzGroups.stream().map(( g) -> dbGroupDao.getByExternalId(g.getAuthz(), g.getId())).filter(java.util.Objects::nonNull).map(( g) -> g.getId()).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getQueryReturnValue().setReturnValue(permissionDao.getAllForAdElementAndGroups(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId(), groupsIds, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().isFiltered())); }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id, java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered) { int appMode = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ApplicationMode); org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("ad_element_id", id).addValue("user_groups", groupIds).addValue("is_filtered", isFiltered).addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetPermissionsByAdElementIdAndGroupIds", org.ovirt.engine.core.dao.PermissionDaoImpl.permissionRowMapper, parameterSource); }<END_MOD>
@org.junit.Test public void testDeallocateIfExternalThrowException() { nic.setName(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_NAME); nic.setId(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_ID); provider.setName(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_NAME); doThrow(new org.ovirt.engine.core.common.errors.EngineException()).when(networkProviderProxy).deallocate(nic); underTest.deallocateIfExternal(); verify(auditLogDirector).log(<START_MOD>auditLogableCaptor<END_MOD>.capture(), same(AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED)); final java.util.Map<java.lang.String, java.lang.String> capturedCustomValues = <START_MOD>auditLogableCaptor<END_MOD>.getValue().getCustomValues(); assertThat(capturedCustomValues, hasEntry("nicname", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_NAME)); assertThat(capturedCustomValues, hasEntry("nicid", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_ID.toString())); assertThat(capturedCustomValues, hasEntry("providername", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_NAME)); }
@java.lang.Override protected void endSuccessfully() { freeVmSnapshotsWithWait(); vmDeviceDao.remove(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getRemovedVolume().getId(), null)); baseDiskDao.remove(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getRemovedVolume().getId()); if (org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getShouldBeLogged()) { <START_MOD>org.ovirt.engine.core.di.Injector.get(<END_MOD>org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector<START_MOD>.class<END_MOD>).log(this, AuditLogType.USER_FINISHED_REMOVE_DISK); } org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.setSucceeded(true); }
private void auditLogFailedToConnect() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); <START_MOD>org.ovirt.engine.core.di.Injector.get(<END_MOD>org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector<START_MOD>.class<END_MOD>).log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); }
private void updateAuditLog(org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand command, org.ovirt.engine.core.common.AuditLogType auditLogType, java.lang.Long imageSizeInGigabytes) { command.addCustomValue("DiskAlias", getDisk(command).getDiskAlias()); command.addCustomValue("NewSize", java.lang.String.valueOf(imageSizeInGigabytes)); <START_MOD>org.ovirt.engine.core.di.Injector.get(<END_MOD>org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector<START_MOD>.class<END_MOD>).log(command, auditLogType); }
public boolean discover() { boolean dbUpdated; java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug( updated for external broker. dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); <START_MOD>org.ovirt.engine.core.di.Injector.get(<END_MOD>org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector<START_MOD>.class<END_MOD>).log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn( returned empty result when talking to broker. Disabling external units java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit> failingPolicyUnits = policyUnitDao.getAll().stream().collect(java.util.stream.Collectors.toList()); markExternalPoliciesAsDisabled(failingPolicyUnits); dbUpdated = true; } return dbUpdated; }
private void processSingleClusterChanges(org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param) { final java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> setupNetworksParams = new java.util.ArrayList<START_MOD>(createNetworkClustersToSetupNetworksParametersTransformer<END_MOD>().transform(param.getAttachments(), param.getDetachments())); org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, setupNetworksParams); }
private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.action.ManageNetworkClustersParameters> mapParametersByClusterId() { final <START_MOD>org.ovirt.engine.core.common.action.ManageNetworkClustersParameters parameters = getParameters(); final <END_MOD>java.util.Map<org.ovirt.engine.core.compat.Guid, <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> attachmentByClusterId = groupByClusterId(parameters.getAttachments()); final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> detachmentByClusterId = groupByClusterId(parameters.getDetachments()); final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> updatesByClusterId = groupByClusterId(parameters.getUpdates()); final java.util.Set<org.ovirt.engine.core.compat.Guid> clusterIds = java.util.stream.Stream.of(attachmentByClusterId, detachmentByClusterId, updatesByClusterId).flatMap(( e) -> e.keySet().stream()).collect(java.util.stream.Collectors.toSet()); return clusterIds.stream().collect(java.util.stream.Collectors.toMap(java.util.function.Function.identity(), ( clusterId) -> new <END_MOD>org.ovirt.engine.core.common.action.ManageNetworkClustersParameters<START_MOD>(nullToEmptyList(<END_MOD>attachmentByClusterId<START_MOD>.get(clusterId)), nullToEmptyList(<END_MOD>detachmentByClusterId<START_MOD>.get(<END_MOD>clusterId<START_MOD>)), nullToEmptyList(updatesByClusterId.get<END_MOD>(clusterId))<START_MOD>))<END_MOD>); }
private void updateRngDeviceIfNecessary(org.ovirt.engine.core.compat.Guid vmBaseId, org.ovirt.engine.core.compat.Version customCompatibilityLevel, org.ovirt.engine.core.common.action.HasRngDevice updateParameters) { final org.ovirt.engine.core.compat.Version oldEffectiveVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(customCompatibilityLevel, () -> oldCluster.getCompatibilityVersion()); final org.ovirt.engine.core.compat.Version newEffectiveVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(customCompatibilityLevel, () -> getCluster().getCompatibilityVersion()); <START_MOD>vmUpdateUtils<END_MOD>.<START_MOD>upgradeRngDevices<END_MOD>(oldEffectiveVersion, newEffectiveVersion, vmBaseId, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContext()<START_MOD>,<END_MOD> updateParameters); }
private boolean updateVm(org.ovirt.engine.core.common.businessentities.VmStatic vm, org.ovirt.engine.core.compat.Version oldClusterVersion, boolean disableLock) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setClusterLevelChangeFromVersion(oldClusterVersion); <START_MOD>return<END_MOD> <START_MOD>updateVm(updateParams,<END_MOD> disableLock); }
private boolean updateClusterCompatibilityVersionToOldCluster(boolean disableLock) { org.ovirt.engine.core.compat.Version oldClusterVersion = org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getClusterCompatibilityVersionOrigin(); <START_MOD>org.ovirt.engine.core.common.businessentities.VmStatic vmFromDb = vmStaticDao.get(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVmId()); <END_MOD>if (((isRestoreMemory()) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCustomCompatibilityVersion()) == null)) && (oldClusterVersion.less(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getClusterCompatibilityVersion()))) { <START_MOD>return updateVm(vmFromDb, oldClusterVersion, disableLock); } else if ((!(isRestoreMemory())) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCustomCompatibilityVersion()) == null)) { <END_MOD>org.ovirt.engine.core.common.<START_MOD>action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(<END_MOD>vmFromDb<START_MOD>); boolean requiresRngUpdate<END_MOD> = <START_MOD>vmUpdateUtils.upgradeRngDevices(oldClusterVersion, org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCompatibilityVersion(), org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getId(), org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.cloneContext(), updateParams); boolean requiresGraphicsUpdate = vmUpdateUtils.upgradeGraphicsDevices(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getStaticData(), updateParams, oldClusterVersion); if (requiresRngUpdate || requiresGraphicsUpdate) {<END_MOD> return updateVm(<START_MOD>updateParams<END_MOD>, disableLock); } <START_MOD>} <END_MOD>return true; }
private boolean updateVms() { for (org.ovirt.engine.core.common.businessentities.VmStatic vm : vmsLockedForUpdate) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); updateParams.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); <START_MOD>vmUpdateUtils.<END_MOD>upgradeGraphicsDevices(vm, updateParams<START_MOD>, oldCluster.getCompatibilityVersion()<END_MOD>); updateRngDeviceIfNecessary(vm.getId(), vm.getCustomCompatibilityVersion(), updateParams); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { java.util.List<java.lang.String> params = new java.util.ArrayList<>(); params.add( Update params.add( VM params.add(parseErrorMessage(result.getValidationMessages())); java.util.List<java.lang.String> messages = org.ovirt.engine.core.bll.Backend.getInstance().getErrorsTranslator().translateErrorText(params); failedUpgradeEntities.put(vm.getName(), getFailedMessage(messages)); } } return true; }
@java.lang.Override protected void executeQueryCommand() { if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isAdminUser(org.ovirt.engine.core.bll.GetVmPayloadQuery.getUser())) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> disks = dao.getVmDeviceByVmIdAndType(org.ovirt.engine.core.bll.GetVmPayloadQuery.getParameters().getId(), VmDeviceGeneralType.DISK); for (org.ovirt.engine.core.common.businessentities.VmDevice disk : disks) { if (<START_MOD>(disk.isManaged()) && (<END_MOD>org.ovirt.engine.core.common.businessentities.VmPayload.isPayload(disk.getSpecParams(<START_MOD>)<END_MOD>))) { org.ovirt.engine.core.common.businessentities.VmPayload payload = new org.ovirt.engine.core.common.businessentities.VmPayload(disk); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : payload.getFiles().entrySet()) { entry.setValue(new java.lang.String(org.apache.commons.codec.binary.Base64.decodeBase64(entry.getValue()))); } org.ovirt.engine.core.bll.GetVmPayloadQuery.getQueryReturnValue().setReturnValue(payload); } } } }
@org.junit.runners.Parameterized.Parameters public static java.lang.Object[][] comparisonParameters() { return new java.lang.Object[][]{ new java.lang.Object[]{ null, false }, new java.lang.Object[]{ "", false }, new java.lang.Object[]{ "http://", false }, new java.lang.Object[]{ "www.redhat.com", false }, new java.lang.Object[]{ "192.168.0.1", false }, new java.lang.Object[]{ "ftp://www.redhat.com", false }, new java.lang.Object[]{ "ftp://192.168.0.1", false }, new java.lang.Object[]{ <START_MOD>"http://www.redhat.com:/main", false }, new java.lang.Object[]{ "http://www.redhat.com:123456/main", false }, new java.lang.Object[]{ "http://www.redhat.com:9/main", false }, new java.lang.Object[]{ <END_MOD>"http://1.2.3.4:666", true }, new java.lang.Object[]{ "http://1.2.3.4", true }, new java.lang.Object[]{ "http://[1:2:3:4:5:6:7:8]", true }, new java.lang.Object[]{ "http://[1:2:3:4:5:6:7:8]:666", true }, new java.lang.Object[]{ "http://www.redhat.com", true }, new java.lang.Object[]{ "http://www.redhat.com/main", true }, new java.lang.Object[]{ "http://www.redhat.com/main/index.html", true }, new java.lang.Object[]{ "http://www.redhat.com:80", true }, new java.lang.Object[]{ "http://www.redhat.com:80/main", true }, new java.lang.Object[]{ "http://www.redhat.com:80/main/index.html", true } }; }
<START_MOD>@org.junit.Test public void testToBigPort() { final org.ovirt.engine.ui.uicommonweb.UriAuthority underTest = new org.ovirt.engine.ui.uicommonweb.UriAuthority((((org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.IPV6_ADDRESS) + (org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.COLON)) + (org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.TO_BIG_PORT))); assertThat(underTest.isValid(), is(false)); }<END_MOD>
@org.junit.Test public void validateDiskIsOvfStore() { initializeCommand(new org.ovirt.engine.core.common.businessentities.storage.DiskImage()); initVmDiskImage(false); command.getImage().setContentType(DiskContentType.OVF_STORE); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.<START_MOD>ACTION_TYPE_FAILED_DISK_CONTENT_TYPE_NOT_SUPPORTED_FOR_OPERATION<END_MOD>); }
<START_MOD>@org.junit.Test public void testMoveOrCopyMemoryDiskFails() { initializeCommand(new org.ovirt.engine.core.common.businessentities.storage.DiskImage()); initVmDiskImage(false); command.getImage().setContentType(DiskContentType.MEMORY_DUMP_VOLUME); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_DISK_CONTENT_TYPE_NOT_SUPPORTED_FOR_OPERATION); }<END_MOD>
<START_MOD>private static boolean isExternalVM(java.lang.String ovfData) { org.ovirt.engine.core.common.businessentities.OriginType origin = org.ovirt.engine.core.utils.OvfUtils.getVmOrigin(ovfData); if (origin == (org.ovirt.engine.core.common.businessentities.OriginType.EXTERNAL)) { return true; } return false; }<END_MOD>
public <START_MOD>org.ovirt.engine.core.common.businessentities.VDS<END_MOD> refreshHost() { refreshHost(cachedVds); <START_MOD>return cachedVds; <END_MOD>}
<START_MOD>private void setQcowCompatForQcowImage() { org.ovirt.engine.core.common.businessentities.storage.Image image = imageDao.get(getDiskImage().getImageId()); if (((getDiskImage().getDiskStorageType()) == (DiskStorageType.IMAGE)) && (getDiskImage().getVolumeFormat().equals(VolumeFormat.COW))) { setQcowCompat(image, getDiskImage().getStoragePoolId(), getDiskImage().getId(), getDiskImage().getImageId(), getStorageDomainId(), null); imageDao.update(image); } }<END_MOD>
@java.lang.Override public void endSuccessfully() { <START_MOD>setQcowCompatForQcowImage<END_MOD>(); if (org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImportAsTemplate()) { org.ovirt.engine.core.compat.Guid newTemplateId = createTemplate(); if (newTemplateId != null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.setSucceeded(true); }
@org.junit.Before public void setUp() { nic = new org.ovirt.engine.core.common.businessentities.network.VmNic(); network = createNetwork(); underTest = spy(new org.ovirt.engine.core.bll.network.ExternalNetworkManager(nic, network)); injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); when(providerDao.get(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); <START_MOD>when<END_MOD>(providerProxyFactory.create(provider)).thenReturn(networkProviderProxy); }
public static org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy getFromStorageDomainId(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getDbFacade().getStorageDomainDao().get(storageDomainId, userID, isFiltered); if (storageDomain != null) { org.ovirt.engine.core.common.businessentities.Provider provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomain.getStorage())); return org.ovirt.engine.core.bll.provider.<START_MOD>storage<END_MOD>.<START_MOD>OpenStackVolumeProviderProxy.providerProxyFactory<END_MOD>.create(provider); } return null; }
public static org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy getFromStorageDomainId(org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = getDbFacade().getStorageDomainStaticDao().get(storageDomainId); if (storageDomainStatic != null) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomainStatic.getStorage())); return org.ovirt.engine.core.bll.provider.<START_MOD>storage<END_MOD>.<START_MOD>OpenStackImageProviderProxy.providerProxyFactory<END_MOD>.create(provider); } return null; }
private static org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy getProviderFromStorageDomainStatic(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic) { org.ovirt.engine.core.common.businessentities.Provider provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomainStatic.getStorage())); return org.ovirt.engine.core.bll.provider.<START_MOD>storage<END_MOD>.<START_MOD>OpenStackVolumeProviderProxy.providerProxyFactory<END_MOD>.create(provider); }
public void deallocateIfExternal() { if (((getNetwork()) != null) && (getNetwork().isExternal())) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = getProviderDao().get(getNetwork().getProvidedBy().getProviderId()); org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy providerProxy = <START_MOD>providerProxyFactory<END_MOD>.create(provider); try { providerProxy.deallocate(nic); } catch (org.ovirt.engine.core.common.errors.EngineException e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase removePortFailureEvent = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); removePortFailureEvent.addCustomValue("NicName", nic.getName()); removePortFailureEvent.addCustomValue("NicId", nic.getId().toString()); removePortFailureEvent.addCustomValue("ProviderName", provider.getName()); getAuditLogDirector().log(removePortFailureEvent, AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED); } } }
<START_MOD>@java.lang.Override protected void updateStorageDomainDiscardAfterDelete(org.ovirt.engine.core.compat.Version compatibilityVersion) { if ((org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommon.getStorageDomain().getDiscardAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommon.getStorageDomain().setDiscardAfterDelete(false); } }<END_MOD>
<START_MOD>@java.lang.Override protected void updateStorageDomainDiscardAfterDelete(org.ovirt.engine.core.compat.Version compatibilityVersion) { if ((org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getDiscardAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setDiscardAfterDelete(org.ovirt.engine.core.common.FeatureSupported.discardAfterDeleteSupported(compatibilityVersion)); } }<END_MOD>
<START_MOD>@java.lang.Override public void init() { super.init(); updateStorageDomainDiscardAfterDelete(getTargetStoragePool().getCompatibilityVersion()); }<END_MOD>
<START_MOD>protected abstract void updateStorageDomainDiscardAfterDelete(org.ovirt.engine.core.compat.Version compatibilityVersion);<END_MOD>
<START_MOD>protected boolean validateAttachedDirectLuns() { if ((org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getAttachedDirectLunsIds()) == null) { return true; } java.util.Set<java.lang.String> idsOfDirectLunsAttachedToVmsInPool = getIdsOfDirectLunsAttachedToVmsInPool(); java.util.Collection<java.lang.String> directLunsNotAttachedToVmInPool = org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getAttachedDirectLunsIds().stream().filter(( lunId) -> !(idsOfDirectLunsAttachedToVmsInPool.contains(lunId))).collect(java.util.stream.Collectors.toList()); return (directLunsNotAttachedToVmInPool.isEmpty()) || (failValidation(EngineMessage.ACTION_TYPE_FAILED_CANNOT_SYNC_DIRECT_LUNS_NOT_ATTACHED_TO_VM_IN_POOL, java.lang.String.format("$lunIds %s", directLunsNotAttachedToVmInPool.stream().sorted().collect(java.util.stream.Collectors.joining(","))), java.lang.String.format("$storagePoolId %s", org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getStoragePoolId()))); }<END_MOD>
<START_MOD>private void mockDirectLunsAttachedToVmsInPool(java.lang.String... LunsIds) { doReturn(new java.util.HashSet(java.util.Arrays.asList(LunsIds))).when(command).getIdsOfDirectLunsAttachedToVmsInPool(); }<END_MOD>
<START_MOD>@org.junit.Test public void testGetLunsToUpdateInDb() { command.getParameters().setDeviceList(java.util.Arrays.asList(lun1, lun2, lun3)); mockDirectLunsAttachedToVmsInPool("lun1", "lun2"); assertEquals(java.util.Arrays.asList(lun1, lun2), command.getLunsToUpdateInDb()); }<END_MOD>
<START_MOD>protected java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsToUpdateInDb() { java.util.Set<java.lang.String> idsOfDirectLunsAttachedToVmsInPool = getIdsOfDirectLunsAttachedToVmsInPool(); java.util.List<java.lang.String> lunsIds = java.util.Optional.ofNullable(org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getAttachedDirectLunsIds()).map(java.util.ArrayList::new).orElse(null); return org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getDeviceList(lunsIds).stream().filter(( lun) -> idsOfDirectLunsAttachedToVmsInPool.contains(lun.getId())).peek(( lun) -> lun.setVolumeGroupId("")).collect(java.util.stream.Collectors.toList()); }<END_MOD>
<START_MOD>@org.junit.Test public void validateAttachedDirectLunsWithLunsThatAreNotAttachedToVmInPool() { command.getParameters().setAttachedDirectLunsIds(java.util.Arrays.asList("lun1", "lun3")); mockDirectLunsAttachedToVmsInPool("lun2", "lun3"); assertFalse(command.validateAttachedDirectLuns()); org.ovirt.engine.core.bll.ValidateTestUtils.assertValidationMessages("lun2 is not attached to a vm in the datacenter.", command, EngineMessage.ACTION_TYPE_FAILED_CANNOT_SYNC_DIRECT_LUNS_NOT_ATTACHED_TO_VM_IN_POOL); }<END_MOD>
<START_MOD>public java.util.Collection<java.lang.String> getAttachedDirectLunsIds() { return attachedDirectLunsIds; }<END_MOD>
<START_MOD>public void setAttachedDirectLunsIds(java.util.Collection<java.lang.String> attachedDirectLunsIds) { this.attachedDirectLunsIds = attachedDirectLunsIds; }<END_MOD>
<START_MOD>java.lang.String ACTION_TYPE_FAILED_CANNOT_SYNC_DIRECT_LUNS_NOT_ATTACHED_TO_VM_IN_POOL();<END_MOD>
<START_MOD>protected java.util.Set<java.lang.String> getIdsOfDirectLunsAttachedToVmsInPool() { if ((idsOfDirectLunsAttachedToVmsInPool) == null) { idsOfDirectLunsAttachedToVmsInPool = diskLunMapDao.getDiskLunMapsForVmsInPool(org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getStoragePoolId()).stream().map(DiskLunMap::getLunId).collect(java.util.stream.Collectors.toSet()); } return idsOfDirectLunsAttachedToVmsInPool; }<END_MOD>
<START_MOD>@org.junit.Test public void validateAttachedDirectLunsAllLunsAttachedToVmInPool() { command.getParameters().setAttachedDirectLunsIds(java.util.Arrays.asList("lun1", "lun3")); mockDirectLunsAttachedToVmsInPool("lun1", "lun2", "lun3"); assertTrue(command.validateAttachedDirectLuns()); }<END_MOD>
<START_MOD>@org.junit.Before public void setUp() { lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setId("lun1"); lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setId("lun2"); lun3 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun3.setId("lun3"); }<END_MOD>
@java.lang.SuppressWarnings("unchecked") private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { <START_MOD>if ((SyncLunsInfoForBlockStorageDomainCommand.getParameters().getLunsFromVgInfo()) != null) { return SyncLunsInfoForBlockStorageDomainCommand.getParameters().getLunsFromVgInfo(); } <END_MOD>org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId(), SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); if ((SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()) == null) { return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithoutFailover(VDSCommandType.GetVGInfo, params, SyncLunsInfoForBlockStorageDomainCommand.getStoragePoolId(), null).getReturnValue())); } return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params).getReturnValue())); }
<START_MOD>public java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { return lunsFromVgInfo; }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { lunDao.updateAll(getLunsToUpdateInDb()); org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.setSucceeded(true); }<END_MOD>
public static <START_MOD>int<END_MOD> getSizeOfMemoryDeviceMb(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if ((memoryDevice.getType()) != (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) { throw new java.lang.RuntimeException(((( device expected but device   + memoryDevice) +   passed of type   + (memoryDevice.getType()))); } <START_MOD>final java.lang.String sizeText =<END_MOD> ((java.lang.<START_MOD>String<END_MOD>) (memoryDevice.getSpecParams().get(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE))); <START_MOD>return java.lang.Integer.parseInt(sizeText); <END_MOD>}
private void addImportedOtherDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDeviceToAdd) { boolean hasCd = false; for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmBase.getManagedDeviceMap().values()) { switch (vmDevice.getType()) { case DISK : if (VmDeviceType.CDROM.getName().equals(vmDevice.getDevice())) { hasCd = true; } else { continue; } break; case INTERFACE : continue; case VIDEO : vmDevice.setSpecParams(getVideoDeviceSpecParams(vmBase)); break; case HOSTDEV : continue; } vmDevice.setManaged(true); vmDeviceToAdd.add(vmDevice); } if (!hasCd) { addCdDevice(vmBase.getId()); } <START_MOD>final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> unmanagedDevicesToAdd = vmBase.getUnmanagedDeviceList().stream().filter(org.ovirt.engine.core.bll.utils.VmDeviceUtils::removeMalformedMemoryDevices).collect(java.util.stream.Collectors.toList()); <END_MOD>vmDeviceToAdd.addAll(<START_MOD>unmanagedDevicesToAdd); }<END_MOD>
<START_MOD>private static boolean removeMalformedMemoryDevices(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice) { if ((((vmDevice.getType()) == (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) && (VmDeviceType.MEMORY.getName().equals(vmDevice.getDevice()))) && (((vmDevice.getSpecParams().get(VmDeviceCommonUtils.SPEC_PARAM_SIZE)) == null) || ((vmDevice.getSpecParams().get(VmDeviceCommonUtils.SPEC_PARAM_NODE)) == null))) { return false; } return true; }<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response updateOvfStore(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters params = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters(); params.setStorageDomainId(guid); <START_MOD>params.setProcessOvfUpdateForStoragePool(true); <END_MOD>return performAction(VdcActionType.ProcessOvfUpdateForStorageDomain, params); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Locked, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); if (shouldPerformOvfUpdate()) { org.ovirt.engine.core.common.action.ProcessOvfUpdateForStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStoragePoolParameters(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getStoragePoolId()); <START_MOD>runInternalAction(VdcActionType.ProcessOvfUpdateForStoragePool, <END_MOD>parameters<START_MOD>, null); runInternalActionWithTasksContext<END_MOD>(VdcActionType.<START_MOD>ProcessOvfUpdateForStorageDomain, createProcessOvfUpdateForDomainParams()<END_MOD>, null); } if (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.noAsyncOperations()) { executeDeactivateCommand(); } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() {<START_MOD> if (org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getParameters().isProcessOvfUpdateForStoragePool()) { syncOvfForStoragePool(); }<END_MOD> int missingDiskCount = getMissingDiskCount(); if (missingDiskCount == 0) { setOvfUpdateStep(OvfUpdateStep.OVF_UPLOAD); updateOvfStoreContent(); } else { setOvfUpdateStep(OvfUpdateStep.OVF_STORES_CREATION); createOvfStoreDisks(getMissingDiskCount()); } org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.setSucceeded(true); }
private org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils mockVmPropertiesUtils() throws org.ovirt.engine.core.common.utils.exceptions.InitializationException { org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils utils = spy(new org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils()); doReturn(("sap_agent=^(true|false)$;sndbuf=^[0-9]+$;" + (<START_MOD>(<END_MOD>"vhost=^(([a-zA-Z0-9_]*):(true|false))(,(([a-zA-Z0-9_]*):(true|false)))*$;" + "viodiskcache=^(none|writeback|writethrough)$"<START_MOD>) + "mdev_type=^.*$"<END_MOD>))).when(utils).getPredefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn("").when(utils).getUserdefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn(new java.util.HashSet(java.util.Arrays.asList(Version.v3_6, Version.v4_0))).when(utils).getSupportedClusterLevels(); doReturn(utils).when(runVmValidator).getVmPropertiesUtils(); utils.init(); return utils; }
<START_MOD>public void setSingleSelectionOnly() { singleSelectionOnly = true; }<END_MOD>
<START_MOD>public com.google.gwt.view.client.SelectionModel<T> getSelectionModel() { if ((selectionModel) == null) { if (singleSelectionOnly) { selectionModel = new com.google.gwt.view.client.SingleSelectionModel(new org.ovirt.engine.ui.uicommonweb.models.QueryableEntityKeyProvider()); } else { selectionModel = new org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel(new org.ovirt.engine.ui.uicommonweb.models.QueryableEntityKeyProvider()); } } return selectionModel; }<END_MOD>
protected com.google.gwt.view.client.AsyncDataProvider<T> getDataProvider() { <START_MOD>if (null == (dataProvider)) { dataProvider = new com.google.gwt.view.client.AsyncDataProvider<T>(org.ovirt.engine.ui.common.uicommon.model.DataBoundTabModelProvider.getModel().getSelectionModel()) { @java.lang.Override protected void onRangeChanged(com.google.gwt.view.client.HasData<T> display) { updateData(); } }; } <END_MOD>return dataProvider; }
@java.lang.Override public java.util.List<T> getSelectedItems() { <START_MOD>com.google.gwt.view.client.SelectionModel<T> selectionModel = org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().getSelectionModel(); if (selectionModel instanceof org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel) { return ((org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel<T>) (selectionModel)).getSelectedList(); } else if (selectionModel instanceof com.google.gwt.view.client.SingleSelectionModel) { return <END_MOD>java.util.<START_MOD>Arrays.asList(((com.google.gwt.view.client.SingleSelectionModel<T>) (selectionModel)).getSelectedObject()); } return<END_MOD> java.util.<START_MOD>Collections.EMPTY_LIST<END_MOD>; }
@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener(( ev, sender, args) -> clearSelection()); <START_MOD>getModel().getSelectionModel().addSelectionChangeHandler(( event) -> { this.setSelectedItems(java.util.Arrays.asList(((SingleSelectionModel<org.ovirt.engine.core.common.businessentities.Bookmark>) (getModel().getSelectionModel())).getSelectedObject())); <END_MOD>}<START_MOD>); }<END_MOD>
@java.lang.Override public java.util.List<T> getSelectedItems() { if (org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().isSingleSelectionOnly()) { return ((java.util.List<T>) (java.util.Collections.singletonList(<START_MOD>((com.google.gwt.view.client.SingleSelectionModel<T>) (<END_MOD>org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().<START_MOD>getSelectionModel())<END_MOD>).getSelectedObject()))); } else { return <START_MOD>((org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel<T>) (<END_MOD>org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().<START_MOD>getSelectionModel())<END_MOD>).getSelectedList(); } }
private org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils mockVmPropertiesUtils() throws org.ovirt.engine.core.common.utils.exceptions.InitializationException { org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils utils = spy(new org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils()); doReturn(("sap_agent=^(true|false)$;sndbuf=^[0-9]+$;" + (("vhost=^(([a-zA-Z0-9_]*):(true|false))(,(([a-zA-Z0-9_]*):(true|false)))*$;" + "viodiskcache=^(none|writeback|writethrough)$;") + <START_MOD>"mdev_type=^.*$;hugepages=^(true|false)|([0-9]+)$;hugepagesz=^[0-9]+$"<END_MOD>))).when(utils).getPredefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn("").when(utils).getUserdefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn(new java.util.HashSet(java.util.Arrays.asList(Version.v3_6, Version.v4_0))).when(utils).getSupportedClusterLevels(); doReturn(utils).when(runVmValidator).getVmPropertiesUtils(); utils.init(); return utils; }
public void setHeaderTitle(java.lang.String title) { this.title<START_MOD> = title; this<END_MOD>.<START_MOD>myId = <END_MOD>(title<START_MOD>.replace(   "_"<END_MOD>)<START_MOD>.toLowerCase()) + 1234<END_MOD>; }
<START_MOD>public void setDataToggleInfo(org<END_MOD>.<START_MOD>gwtbootstrap3<END_MOD>.client.<START_MOD>ui.constants.Toggle<END_MOD> <START_MOD>toggle,<END_MOD> <START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String<END_MOD> <START_MOD>parentId<END_MOD>) { <START_MOD>this<END_MOD>.toggle<START_MOD> = toggle; this.parentId = parentId<END_MOD>; }
public void <START_MOD>addNotificationListWidget<END_MOD>(org.ovirt.engine.ui.<START_MOD>webadmin<END_MOD>.<START_MOD>widget.alert.NotificationListWidget<END_MOD> <START_MOD>widget) { widget.setDataToggleInfo(Toggle.COLLAPSE<END_MOD>, org.ovirt.engine.ui.webadmin.widget.alert.<START_MOD>EventsListPopover.EVENT_ACCORDION);<END_MOD> <START_MOD>contentPanel<END_MOD>.<START_MOD>add<END_MOD>(<START_MOD>widget.content<END_MOD>); }
<START_MOD>private boolean checkIfCollapsed() { boolean result = false; if ((titleAnchor) != null) { java.lang.String styleString = titleAnchor.getStyleName(); if (styleString != null) { java.lang.String[] styles = styleString.split(" "); for (java.lang.String style : styles) { if (style.equals(PatternflyConstants.COLLAPSED)) { result = true; break; } } } } else { result = startCollapsed; } return result; }<END_MOD>
private void updatePermissionPanel() { final org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile = getModel().getSelectedItem(); final org.ovirt.engine.ui.common.widget.table.SimpleActionTable<org.ovirt.engine.core.common.businessentities.profiles.CpuProfile> table = getTable(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { if ((permissionPanelVisible) && (cpuProfile == null)) { tableContainer.clear(); tableContainer.add(getContainer()); permissionPanelVisible = false; } else if ((!(permissionPanelVisible)) && (cpuProfile != null)) { tableContainer.clear(); tableContainer.add(getContainer()); tableContainer.add(permissionContainer); permissionPanelVisible = true; } }); }
<START_MOD>public java.lang.String getSearchString(java.lang.String prefix) { java.lang.String result = null; if (prefix != null) { result = searchStringMap.get(prefix); searchStringMap.remove(prefix); } return result; }<END_MOD>
@java.lang.Override public void setSearchPanel(com.google.gwt.user.client.ui.IsWidget searchPanel) { actionPanel.setSearchPanel(searchPanel); <START_MOD>if (searchPanel != null) { actionPanel.setVisible(true); <END_MOD>}<START_MOD> }<END_MOD>
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler(( event) -> { org.ovirt.engine.ui.webadmin.section.main.presenter.modelProvider.setSelectedItems(getSelectedItems()); fireTableSelectionChangeEvent(); if (!(isVisible())) { handlePlaceTransition(); } })); <START_MOD>registerHandler(<END_MOD>org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.<START_MOD>getEventBus().addHandler(org.ovirt.engine.ui.uicommonweb.models.ApplySearchStringEvent.getType(), ( event) -> { applySearchString(event.getSearchString()); })); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.<END_MOD>getView().setDetailPlaceTransitionHandler(this); this.breadCrumbs.setSelectionModel(getTable().getSelectionModel()); <START_MOD>searchStringCollector.markActivePrefix(modelProvider.getModel().getDefaultSearchString()); java.lang.String searchString = searchStringCollector.getSearchString(modelProvider.getModel().getSearchString()); if (searchString != null) { applySearchString(searchString); } }<END_MOD>
<START_MOD>@org.junit.Test public void testCommandClassExistence() { org.ovirt.engine.core.bll.CommandEnumTestUtils.testCommandsExist(org.ovirt.engine.core.common.action.ActionType.class, ( vat) -> org.ovirt.engine.core.bll.CommandsFactory.getCommandClass(vat.name())); }<END_MOD>
<START_MOD>@org.junit.Test public void testAuditLogTypeValueUniqueness() { java.util.BitSet bitset = new java.util.BitSet(org.ovirt.engine.core.bll.ActionTypeTest.bitSetSize); java.util.Set<java.lang.Integer> nonUniqueValues = new java.util.TreeSet<>(); for (org.ovirt.engine.core.common.action.ActionType vat : org.ovirt.engine.core.common.action.ActionType.values()) { if (bitset.get(vat.getValue())) { nonUniqueValues.add(vat.getValue()); } else { bitset.set(vat.getValue()); } } assertTrue(("ActionType contains the following non unique values: " + nonUniqueValues), nonUniqueValues.isEmpty()); }<END_MOD>
<START_MOD>private java.util.Map<java.lang.String, java.lang.Object> parseBalloon(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( dev) -> (dev.getType()) == VmDeviceGeneralType.BALLOON).findFirst(); if (!(db.isPresent())) { return java.util.Collections.emptyMap(); } org.ovirt.engine.core.common.businessentities.VmDevice device = db.get(); org.ovirt.engine.core.utils.ovf.xml.XmlNode node = document.selectSingleNode("//*/memballoon"); java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.Device, "memballoon"); result.put(VdsProperties.DeviceId, device.getId().getDeviceId().toString()); result.put(VdsProperties.Address, parseAddress(node)); result.put(VdsProperties.Alias, parseAlias(node)); return result; }<END_MOD>
<START_MOD>private java.util.Map<java.lang.String, java.lang.Object> parseWatchdog(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( dev) -> (dev.getType()) == VmDeviceGeneralType.WATCHDOG).findFirst(); if (!(db.isPresent())) { return java.util.Collections.emptyMap(); } org.ovirt.engine.core.common.businessentities.VmDevice device = db.get(); org.ovirt.engine.core.utils.ovf.xml.XmlNode node = document.selectSingleNode("//*/watchdog"); java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.Device, "watchdog"); result.put(VdsProperties.DeviceId, device.getId().getDeviceId().toString()); result.put(VdsProperties.Address, parseAddress(node)); result.put(VdsProperties.Alias, parseAlias(node)); return result; }<END_MOD>
<START_MOD>private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parseVideos(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( d) -> (d.getType()) == VmDeviceGeneralType.VIDEO).collect(java.util.stream.Collectors.toList()); if (db.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.ArrayList<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : document.selectNodes("//*/video")) { java.util.Map<java.lang.String, java.lang.Object> dev = new java.util.HashMap<>(); dev.put(VdsProperties.Device, "video"); dev.put(VdsProperties.Address, parseAddress(node)); java.lang.String alias = parseAlias(node); dev.put(VdsProperties.Alias, alias); java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> dbDev = db.stream().filter(( d) -> d.getAlias().equals(alias)).findFirst(); if (dbDev.isPresent()) { dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } else { dbDev = db.stream().filter(( d) -> d.getAlias().isEmpty()).findFirst(); dbDev.get().setAlias(alias); dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } result.add(dev); } return result; }<END_MOD>
<START_MOD>public java.util.Map<java.lang.String, java.lang.Object> convert(org.ovirt.engine.core.compat.Guid vmId, java.lang.String xml) { java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.vm_guid, vmId); result.put(VdsProperties.Devices, parseDevices(xml, vmDeviceDao.getVmDeviceByVmId(vmId))); return result; }<END_MOD>
<START_MOD>private java.lang.String parseMacAddress(XmlNode node) { XmlNode aliasNode = node.selectSingleNode("mac"); return aliasNode.attributes.get("address").getValue(); }<END_MOD>
<START_MOD>private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parseInterfaces(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( d) -> (d.getType()) == VmDeviceGeneralType.INTERFACE).collect(java.util.stream.Collectors.toList()); if (db.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.ArrayList<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : document.selectNodes("//*/interface")) { java.util.Map<java.lang.String, java.lang.Object> dev = new java.util.HashMap<>(); dev.put(VdsProperties.Device, "interface"); java.lang.String mac = parseMacAddress(node); dev.put(VdsProperties.Address, parseAddress(node)); java.lang.String alias = parseAlias(node); dev.put(VdsProperties.Alias, alias); java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> dbDev = db.stream().filter(( d) -> d.getAlias().equals(alias)).findFirst(); if (dbDev.isPresent()) { dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } else { dbDev = db.stream().filter(( d) -> d.getAlias().isEmpty()).findFirst(); dbDev.get().setAlias(alias); dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } result.add(dev); } return result; }<END_MOD>
<START_MOD>private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parseChannels(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( d) -> (d.getType()) == VmDeviceGeneralType.CHANNEL).collect(java.util.stream.Collectors.toList()); if (db.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.ArrayList<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : document.selectNodes("//*/channel")) { java.util.Map<java.lang.String, java.lang.Object> dev = new java.util.HashMap<>(); dev.put(VdsProperties.Device, "channel"); dev.put(VdsProperties.Address, parseAddress(node)); java.lang.String alias = parseAlias(node); dev.put(VdsProperties.Alias, alias); java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> dbDev = db.stream().filter(( d) -> d.getAlias().equals(alias)).findFirst(); if (dbDev.isPresent()) { dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } else { dbDev = db.stream().filter(( d) -> d.getAlias().isEmpty()).findFirst(); dbDev.get().setAlias(alias); dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } result.add(dev); } return result; }<END_MOD>
private java.util.Map<java.lang.String, java.lang.Object>[] getVmInfo(org.ovirt.engine.core.compat.Guid vdsId, java.util.List<org.ovirt.engine.core.compat.Guid> vms) { if ((vdsId == null) || (vms.isEmpty())) { return null; } java.util.Map<java.lang.String, java.lang.Object>[] result = new java.util.Map[0]; java.util.List<java.lang.String> vmIds = vms.stream().map(Guid::toString).collect(java.util.stream.Collectors.toList()); <START_MOD>getResourceManager().runVdsCommand(VDSCommandType.ListVmDevices, new org.ovirt.engine.core.vdsbroker.vdsbroker.ListVmDevicesVDSCommand.Params(vdsId, vms)); <END_MOD>org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = getResourceManager().runVdsCommand(VDSCommandType.FullList, new org.ovirt.engine.core.common.vdscommands.FullListVDSCommandParameters(vdsId, vmIds)); if (vdsReturnValue.getSucceeded()) { result = ((java.util.Map<java.lang.String, java.lang.Object>[]) (vdsReturnValue.getReturnValue())); } return result; }
<START_MOD>private java.util.Map<java.lang.String, java.lang.Object>[] parseDevices(java.lang.String xml, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { org.ovirt.engine.core.utils.ovf.xml.XmlDocument document; try { document = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument(xml); } catch (java.lang.Exception e) { return new java.util.Map[0]; } java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.ArrayList<>(); result.add(parseBalloon(document, devices)); result.add(parseRng(document, devices)); result.addAll(parseVideos(document, devices)); result.add(parseWatchdog(document, devices)); result.addAll(parseControllers(document, devices)); result.addAll(parseInterfaces(document, devices)); result.addAll(parseChannels(document, devices)); return result.toArray(new java.util.Map[0]); }<END_MOD>
<START_MOD>private java.util.Map<java.lang.String, java.lang.Object> parseRng(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( dev) -> (dev.getType()) == VmDeviceGeneralType.RNG).findFirst(); if (!(db.isPresent())) { return java.util.Collections.emptyMap(); } org.ovirt.engine.core.common.businessentities.VmDevice device = db.get(); org.ovirt.engine.core.utils.ovf.xml.XmlNode node = document.selectSingleNode("//*/rng"); java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.Device, "rng"); result.put(VdsProperties.DeviceId, device.getId().getDeviceId().toString()); result.put(VdsProperties.Address, parseAddress(node)); result.put(VdsProperties.Alias, parseAlias(node)); return result; }<END_MOD>
private boolean updateVmLease() { if (java.util.Objects.equals(oldVm.getLeaseStorageDomainId(), newVmStatic.getLeaseStorageDomainId())) { return true; } if (<START_MOD>org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isDown()) { if (<END_MOD>!(addVmLease(newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()))) { return false; } removeVmLease(oldVm.getLeaseStorageDomainId(), oldVm.getId()); <START_MOD>} else { if ((oldVm.getLeaseStorageDomainId()) != null) { runVdsCommand(VDSCommandType.HotUnplugLease, new org.ovirt.engine.core.common.vdscommands.LeaseVDSParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds(), oldVm.getId(), oldVm.getLeaseStorageDomainId())); removeVmLease(oldVm.getLeaseStorageDomainId(), oldVm.getId()); } else { org.ovirt.engine.core.common.action.VmLeaseParameters params = new org.ovirt.engine.core.common.action.VmLeaseParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePoolId(), newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()); params.setVdsId(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds()); <END_MOD>return <START_MOD>runInternalAction(VdcActionType.HotPlugLease, params).getSucceeded(); } } return <END_MOD>true; }
public boolean isFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(isFieldUpdatable(name))) { if (((fieldContainer != null) && ((container) != null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values != null) ? values.contains(name) : false; if ((!returnValue) && hotsetEnabled) { returnValue = isHotSetField(name); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn( '{}' can not be updated when status is '{}' name, status); } } return returnValue; }
private boolean updateVmLease() { if (java.util.Objects.equals(oldVm.getLeaseStorageDomainId(), newVmStatic.getLeaseStorageDomainId())) { return true; } if (<START_MOD>org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isNotRunning()) { if (<END_MOD>!(addVmLease(newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()))) { return false; } <START_MOD>} else { if ((oldVm.getLeaseStorageDomainId()) == null) { org.ovirt.engine.core.common.action.VmLeaseParameters params = new org.ovirt.engine.core.common.action.VmLeaseParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePoolId(), newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()); params.setVdsId(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds()); params.setHotPlugLease(true); return runInternalAction(ActionType.AddVmLease, params).getSucceeded(); } boolean hotUnplugSucceeded = false; try { hotUnplugSucceeded = runVdsCommand(VDSCommandType.HotUnplugLease, new org.ovirt.engine.core.common.vdscommands.LeaseVDSParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds(), oldVm.getId(), oldVm.getLeaseStorageDomainId())).getSucceeded(); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error( in hot unplugging a lease to VM {}, message: {} oldVm.getId(), e.getMessage()); } if (!hotUnplugSucceeded) { auditLog(this, AuditLogType.HOT_UNPLUG_LEASE_FAILED); } } <END_MOD>removeVmLease(oldVm.getLeaseStorageDomainId(), oldVm.getId()); return true; }
<START_MOD>@java.lang.Override public void endWithFailure() { org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.setSucceeded(true); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation(getMovedDiskIds(), ImageStatus.OK, ImageStatus.OK, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getCompensationContext()); }<END_MOD>
<START_MOD>private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getAffinityLabels(); for (org.ovirt.engine.core.common.businessentities.Label label : affinityLabels) { label.addVm(org.ovirt.engine.core.bll.AddVmCommand.getVm()); labelDao.update(label); } }<END_MOD>
<START_MOD>private void updateAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.common.businessentities.Label> previouslySelectedLabels = labelDao.getAllByEntityIds(java.util.Collections.singletonList(org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getVdsId())); java.util.Set<org.ovirt.engine.core.common.businessentities.Label> labelsToAdd = new java.util.HashSet(selectedLabels); labelsToAdd.removeAll(previouslySelectedLabels); for (org.ovirt.engine.core.common.businessentities.Label label : labelsToAdd) { label.addHost(org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getVds()); labelDao.update(label); } java.util.Set<org.ovirt.engine.core.common.businessentities.Label> labelsToRemove = new java.util.HashSet(previouslySelectedLabels); labelsToRemove.removeAll(selectedLabels); for (org.ovirt.engine.core.common.businessentities.Label label : labelsToRemove) { label.removeHost(org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getVds()); labelDao.update(label); } }<END_MOD>
@java.lang.Override protected void executeCommand() { if ((isGlusterEnabled()) && ((upServer) != null)) { glusterHostRemove(); if (!(org.ovirt.engine.core.bll.RemoveVdsCommand.getSucceeded())) { return; } } if (!(clusterHasMultipleHosts())) { removeGlusterVolumesFromDb(); removeGlusterHooksFromDb(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { removeVdsStatisticsFromDb(); removeVdsDynamicFromDb(); removeVdsStaticFromDb(); <START_MOD>removeAffinityLabelsFromDb(); <END_MOD>return null; }); removeVdsFromCollection(); org.ovirt.engine.core.bll.RemoveVdsCommand.setSucceeded(true); }
<START_MOD>private void addAffinityLabelsToDb() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getParameters().getAffinityLabels(); for (org.ovirt.engine.core.common.businessentities.Label label : affinityLabels) { label.addHost(org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getVds()); labelDao.update(label); } }<END_MOD>
<START_MOD>private void updateAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.common.businessentities.Label> previouslySelectedLabels = labelDao.getAllByEntityIds(java.util.Collections.singletonList(getVmId())); java.util.Set<org.ovirt.engine.core.common.businessentities.Label> labelsToAdd = new java.util.HashSet(selectedLabels); labelsToAdd.removeAll(previouslySelectedLabels); for (org.ovirt.engine.core.common.businessentities.Label label : labelsToAdd) { label.addVm(org.ovirt.engine.core.bll.UpdateVmCommand.getVm()); labelDao.update(label); } java.util.Set<org.ovirt.engine.core.common.businessentities.Label> labelsToRemove = new java.util.HashSet(previouslySelectedLabels); labelsToRemove.removeAll(selectedLabels); for (org.ovirt.engine.core.common.businessentities.Label label : labelsToRemove) { label.removeVm(org.ovirt.engine.core.bll.UpdateVmCommand.getVm()); labelDao.update(label); } }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel createNewLineModel(java.lang.String key) { org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyValueLineModel = super.createNewLineModel(key); keyValueLineModel.getValue().setIsAvailable(false); keyValueLineModel.getValues().setIsAvailable(false); return keyValueLineModel; }<END_MOD>
public void init() { startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmListByClusterName(new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.model.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.VM>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList) { java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityGroup().getVmIds(); getVmsSelectionModel().init(vmList, (vmIds != null ? vmIds : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); stopProgress(); } }), clusterName); <START_MOD>org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByClusterId(new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.model.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.VDS>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIds = getAffinityGroup().getVdsIds(); java.util.Collections.sort(hostList, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); getHostsSelectionModel().init(hostList, (hostIds != null ? hostIds : new java.util.ArrayList())); stopProgress(); <END_MOD>}<START_MOD> }), clusterId); }<END_MOD>
void onSave() { if (!(validate())) { return; } if ((getProgress()) != null) { return; } org.ovirt.engine.core.common.scheduling.AffinityGroup group = getAffinityGroup(); group.setName(getName().getEntity()); group.setDescription(getDescription().getEntity()); group.setClusterId(clusterId); group.setVmEnforcing(getEnforcing().getEntity()); group.setVmAffinityRule(getVmAffinityRule().getSelectedItem()); group.setVmIds(getVmsSelectionModel().getSelectedVmIds<START_MOD>()); group.setVdsEnforcing(getHostAffinityEnforcing().getEntity()); group.setVdsAffinityRule(getHostAffinityRule().getSelectedItem()); group.setVdsIds(getHostsSelectionModel().getSelectedHostIds<END_MOD>()); startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(saveActionType, new org.ovirt.engine.core.common.scheduling.parameters.AffinityGroupCRUDParameters(group.getId(), group), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { stopProgress(); if (((result != null) && ((result.getReturnValue()) != null)) && (result.getReturnValue().getSucceeded())) { cancel(); } } }, this); }
<START_MOD>@java.lang.Override protected void setValueByKey(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel lineModel, java.lang.String key) { }<END_MOD>
<START_MOD>@java.lang.Override protected void initLineModel(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyValueLineModel, java.lang.String key) { }<END_MOD>
<START_MOD>@java.lang.Override protected boolean isGhost(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value) { return !(model.isKeyValid(value.getKeys().getSelectedItem())); }<END_MOD>
public java.util.List<org.ovirt.engine.core.compat.Guid> getSelectedVmIds() { java.util.List<org.ovirt.engine.core.compat.Guid> list = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyModel : getItems()) { java.lang.String selectedItem = keyModel.getKeys().getSelectedItem(); if (isKeyValid(selectedItem)) { list.add(<START_MOD>allVmNamesMap<END_MOD>.get(selectedItem).getId()); } } return list; }
<START_MOD>@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel createGhostValue() { return model.createNewLineModel(); }<END_MOD>
public void init(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms, java.util.List<org.ovirt.engine.core.compat.Guid> usedVms) { if ((vms == null) || (usedVms == null)) { return; } <START_MOD>allVmNamesMap<END_MOD> = new java.util.HashMap(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> <START_MOD>vmsMap<END_MOD> = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { <START_MOD>allVmNamesMap<END_MOD>.put(vm.getName(), vm); <START_MOD>vmsMap<END_MOD>.put(vm.getId(), vm); } java.util.Set<java.lang.String> usedVmNames = <START_MOD>usedVms.stream().map((<END_MOD> guid<START_MOD>) -> vmsMap.get(guid).getName()).sorted().collect(java.util.stream.Collectors.toSet()); init(allVmNamesMap.keySet(),<END_MOD> usedVmNames); }
<START_MOD>@java.lang.Override public T flush() { super.flush(); for (org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget lineWidget : widgets) { lineWidget.flush(); } return model; }<END_MOD>
<START_MOD>java.lang.String hostsAffinityGroupSelectionLabel();<END_MOD>
<START_MOD>public java.util.List<org.ovirt.engine.core.compat.Guid> getSelectedHostIds() { java.util.List<org.ovirt.engine.core.compat.Guid> list = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyModel : getItems()) { java.lang.String selectedItem = keyModel.getKeys().getSelectedItem(); if (isKeyValid(selectedItem)) { list.add(allHostNamesMap.get(selectedItem).getId()); } } return list; }<END_MOD>
<START_MOD>java.lang.String vmsAffinityGroupSelectionLabel();<END_MOD>
<START_MOD>@java.lang.Override <END_MOD>public void setUsePatternFly(boolean use) { keyField.setUsePatternFly(use); valueField.setUsePatternFly(use); valuesField.setUsePatternFly(use); }
<START_MOD>@java.lang.Override protected void toggleGhost(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value, org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget widget, boolean becomingGhost) { if (!(widget.isEnabled())) { return; } super.toggleGhost(value, widget, becomingGhost); }<END_MOD>
<START_MOD>@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value, org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget widget) { super.onRemove(value, widget); model.updateKeys(); widgets.remove(widget); }<END_MOD>
<START_MOD>@java.lang.Override protected org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget createWidget(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value) { org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget keyLineWidget = new org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget(); keyLineWidget.edit(value); keyLineWidget.setUsePatternFly(usePatternFly); widgets.add(keyLineWidget); return keyLineWidget; }<END_MOD>
<START_MOD>protected void init() { initWidget(org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget.WidgetUiBinder.uiBinder.createAndBindUi(this)); driver.initialize(this); hideLabels(); }<END_MOD>
<START_MOD>@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) { updateKeyTitle(object); object.getKeys().getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget.this, object); updateKeyTitle(object); } }); driver.edit(object); }<END_MOD>
<START_MOD>java.lang.String selectedAffinityLabels();<END_MOD>
<START_MOD>private org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel getModel() { return hostModel; }<END_MOD>
<START_MOD>public void showActiveLabels() { activeLabelList.addStyleName(Styles.LIST_INLINE); activeLabelDiv.add(activeLabelList); activeLabelList.clear(); java.util.List<org.ovirt.engine.core.common.businessentities.Label> labels = getModel().getLabelList().getSelectedItems(); java.util.Collections.sort(labels, ( l1, l2) -> l1.getName().compareTo(l2.getName())); for (org.ovirt.engine.core.common.businessentities.Label label : labels) { activeLabelList.add(createActiveLabelItem(label)); } }<END_MOD>
<START_MOD>@java.lang.Override protected<END_MOD> void <START_MOD>init() { initWidget<END_MOD>(org.ovirt.engine.ui.<START_MOD>common<END_MOD>.<START_MOD>widget<END_MOD>.<START_MOD>form<END_MOD>.key_value.<START_MOD>KeyValueLineWidget.WidgetUiBinder.uiBinder.createAndBindUi(this));<END_MOD> <START_MOD>driver.initialize(this<END_MOD>)<START_MOD>;<END_MOD> <START_MOD>hideLabels<END_MOD>(); }
<START_MOD>public void init(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, java.util.List<org.ovirt.engine.core.compat.Guid> usedHosts) { if ((hosts == null) || (usedHosts == null)) { return; } allHostNamesMap = new java.util.HashMap(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hostsMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { allHostNamesMap.put(host.getName(), host); hostsMap.put(host.getId(), host); } java.util.Set<java.lang.String> usedHostNames = usedHosts.stream().map(( guid) -> hostsMap.get(guid).getName()).sorted().collect(java.util.stream.Collectors.toSet()); init(allHostNamesMap.keySet(), usedHostNames); }<END_MOD>
@java.lang.Override protected void updateDetailsAvailability() { super.updateDetailsAvailability(); org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.getSelectedItem(); getClusterVmListModel().setIsAvailable(((cluster != null) && (cluster.supportsVirtService()))); getClusterServiceModel().setIsAvailable(((cluster != null) && (cluster.supportsGlusterService()))); getClusterGlusterHookListModel().setIsAvailable(((cluster != null) && (cluster.supportsGlusterService()))); getAffinityGroupListModel().setIsAvailable(((cluster != null) && (cluster.supportsVirtService()))); getCpuProfileListModel().setIsAvailable(((cluster != null) && (cluster.supportsVirtService()))); <START_MOD>getAffinityLabelListModel().setIsAvailable(((cluster != null) && (cluster.supportsVirtService()))); <END_MOD>}
<START_MOD>public void init() { startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmListByClusterName(new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.AsyncQuery(( vmList) -> { Set<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityLabel().getVms(); getVmsSelectionModel().init(vmList, (vmIds != null ? new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.ArrayList<>(vmIds) : new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.ArrayList<>())); stopProgress(); }), clusterName); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByClusterId(new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.AsyncQuery(( hostList) -> { Set<org.ovirt.engine.core.compat.Guid> hostIds = getAffinityLabel().getHosts(); java.util.Collections.sort(hostList, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); getHostsSelectionModel().init(hostList, (hostIds != null ? new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.ArrayList<>(hostIds) : new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.ArrayList<>())); stopProgress(); }), clusterId); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label object) { java.lang.String join = join(getVmNames(object), ", "); if (join.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return join; }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label object) { return object.getName(); }<END_MOD>
<START_MOD>protected java.lang.String join(java.util.List<java.lang.String> strings, java.lang.String separator) { java.lang.StringBuilder result = new java.lang.StringBuilder(); if (strings == null) { return result.toString(); } for (java.lang.String s : strings) { if ((result.length()) != 0) { result.append(separator); } result.append(s); } return result.toString(); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label object) { java.lang.String join = join(getHostNames(object), ", "); if (join.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return join; }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.AffinityLabelModel flush() { return driver.flush(); }<END_MOD>
<START_MOD>protected java.util.List<java.lang.String> getVmNames(org.ovirt.engine.core.common.businessentities.Label label) { return new java.util.ArrayList(label.getVmNames()); }<END_MOD>
<START_MOD>protected java.util.List<java.lang.String> getHostNames(org.ovirt.engine.core.common.businessentities.Label label) { return new java.util.ArrayList(label.getHostNames()); }<END_MOD>
<START_MOD>private void updateActionAvailability() { getNewCommand().setIsExecutionAllowed(true); boolean hasSelectedItems = ((org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems()) != null) && ((org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems().size()) > 0); getEditCommand().setIsExecutionAllowed((hasSelectedItems && ((org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems().size()) == 1))); getRemoveCommand().setIsExecutionAllowed(hasSelectedItems); }<END_MOD>
<START_MOD>protected void addCommands() { org.ovirt.engine.ui.uicommonweb.UICommand command = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSave", this); getCommands().add(command); getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); }<END_MOD>
<START_MOD>@java.lang.Override protected void onEntityChanged() { super.onEntityChanged(); org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSearchCommand().execute(); }<END_MOD>
<START_MOD>private void onRemove() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getConfirmWindow())); if ((model.getProgress()) != null) { return; } java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Label affinityLabel : org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems()) { parameters.add(new org.ovirt.engine.core.common.action.LabelActionParameters(affinityLabel)); } model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.RemoveLabel, parameters, ( result) -> { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); }, model); }<END_MOD>
<START_MOD>private void remove() { if ((org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeAffinityLabelsTitle()); model.setHelpTag(HelpTag.remove_affinity_groups); model.setHashName("remove_affinity_labels"); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Label affinityLabel : org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems()) { list.add(affinityLabel.getName()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand command = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnRemove", this); model.getCommands().add(command); model.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); }<END_MOD>
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.VirtualMachineSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.AuditLog, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>, org.ovirt.engine.ui.uicommonweb.models.vms.VmEventListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineEventPresenter.constants.virtualMachineEventSubTabLabel(), <START_MOD>11<END_MOD>, modelProvider, org.ovirt.engine.ui.common.widget.Align.RIGHT); }
<START_MOD>public void activateDetailModel() { getMainModel().addActiveDetailModel(org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider.getModel()); }<END_MOD>
<START_MOD>private void activeDetailModelChanging(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> newValue, boolean stopRefresh) { for (org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> oldValue : activeDetailModels) { if ((oldValue != null) && stopRefresh) { oldValue.setEntity(null); if (oldValue instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (oldValue)).stopRefresh(); } } } if (newValue != null) { newValue.setEntity(provideDetailModelEntity(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.getSelectedItem())); } }<END_MOD>
public void setActiveDetailModel(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> value) { if (<START_MOD>!<END_MOD>(<START_MOD>activeDetailModels.contains(value<END_MOD>)<START_MOD>)<END_MOD>) { activeDetailModelChanging(value, <START_MOD>true<END_MOD>); <START_MOD>activeDetailModels.clear();<END_MOD> <START_MOD>activeDetailModels.add(<END_MOD>value<START_MOD>)<END_MOD>; activeDetailModelChanged(); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs(<START_MOD>org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.ACTIVE_DETAIL_MODEL<END_MOD>)); } }
<START_MOD>public<END_MOD> void <START_MOD>addActiveDetailModel<END_MOD>(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> <START_MOD>value) { if (!(activeDetailModels.contains(value))) { activeDetailModelChanging(value<END_MOD>,<START_MOD> false); activeDetailModels.add(value); activeDetailModelChanged(); onPropertyChanged(new<END_MOD> org.ovirt.engine.ui.<START_MOD>uicompat<END_MOD>.<START_MOD>PropertyChangedEventArgs<END_MOD>(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.<START_MOD>ACTIVE_DETAIL_MODEL<END_MOD>)); } }
<START_MOD>@org.ovirt.api.metamodel.annotations.In java.lang.Boolean volatile_();<END_MOD>
public static java.lang.String encrypt(javax.servlet.ServletContext ctx, java.lang.String rawText) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.<START_MOD>SsoLocalConfig<END_MOD> <START_MOD>config<END_MOD> = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoContext(ctx).<START_MOD>getSsoLocalConfig<END_MOD>(); try (java.io.InputStream in = new java.io.FileInputStream(<START_MOD>config<END_MOD>.<START_MOD>getPKIEngineCert().getAbsoluteFile<END_MOD>())) { return org.ovirt.engine.core.uutils.crypto.EnvelopeEncryptDecrypt.encrypt("AES/OFB/PKCS5Padding", 256, java.security.cert.CertificateFactory.getInstance("X.509").generateCertificate(in), 100, rawText.getBytes(java.nio.charset.StandardCharsets.UTF_8)); } }
<START_MOD>protected java.util.Map<java.lang.String, java.lang.Object> buildResponse(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession, java.lang.String clientId, java.lang.String clientSecret) throws java.lang.Exception { java.util.Map<java.lang.String, java.lang.Object> payload = buildResponse(ssoSession); payload.put("id_token", org.ovirt.engine.core.sso.utils.SsoUtils.createJWT(request, ssoSession, clientId, clientSecret)); return payload; }<END_MOD>
<START_MOD>public static java.lang.String createJWT(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession, java.lang.String clientId, java.lang.String clientSecret) throws com.nimbusds.jose.JOSEException, java.security.NoSuchAlgorithmException { com.nimbusds.jose.JWSSigner signer = new com.nimbusds.jose.crypto.MACSigner(clientSecret); com.nimbusds.jwt.SignedJWT signedJWT = new com.nimbusds.jwt.SignedJWT(new com.nimbusds.jose.JWSHeader(com.nimbusds.jose.JWSAlgorithm.HS256), org.ovirt.engine.core.sso.utils.SsoUtils.createJWTClaimSet(request, ssoSession, clientId)); signedJWT.sign(signer); return signedJWT.serialize(); }<END_MOD>
<START_MOD>public static void sendJsonData(javax.servlet.http.HttpServletResponse response, java.lang.String jsonPayload) throws java.io.IOException { try (java.io.OutputStream os = response.getOutputStream()) { response.setContentType("application/json"); byte[] jsonPayloadBytes = jsonPayload.getBytes(java.nio.charset.StandardCharsets.UTF_8.name()); response.setContentLength(jsonPayloadBytes.length); os.write(jsonPayloadBytes); org.ovirt.engine.core.sso.utils.SsoUtils.log.trace("Sending json data {}", jsonPayload); } }<END_MOD>
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { try { org.ovirt.engine.core.sso.servlets.OAuthAuthorizeServlet.log.debug( AuthorizeServlet QueryString: {}, Parameters : {} request.getQueryString(), org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameters(request)); java.lang.String <START_MOD>responseType<END_MOD> = org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameter(request, SsoConstants.<START_MOD>JSON_RESPONSE_TYPE); if (!(responseType.equals("code"))) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SsoConstants.ERR_CODE_INVALID_REQUEST,<END_MOD> java.lang.String<START_MOD>.format(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_UNSUPPORTED_PARAMETER_IN_REQUEST, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE)))),<END_MOD> responseType<START_MOD>, SsoConstants.JSON_RESPONSE_TYPE)); } login(request, response, buildSsoSession(request)); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.SsoSession ssoSession<END_MOD> = org.ovirt.engine.core.sso.utils.SsoUtils.<START_MOD>getSsoSession(request, true); if ((ssoSession.isOpenIdScope()) || (org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList(<END_MOD>org.ovirt.engine.core.sso.utils.SsoUtils.getScopeRequestParameter(request, "")<START_MOD>).contains(SsoConstants.OPENID_SCOPE))) { ssoSession.setRedirectUri(<END_MOD>request.getParameter(SsoConstants.HTTP_PARAM_REDIRECT_URI)<START_MOD>); } org.ovirt.engine.core.sso.utils.SsoUtils.redirectToErrorPage<END_MOD>(request, response, ex)<START_MOD>; } }<END_MOD>
private java.util.Map<java.lang.String, java.lang.Object> buildResponse(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession, java.lang.String clientId<START_MOD>, java.lang.String clientSecret<END_MOD>) throws java.lang.Exception { java.util.Map<java.lang.String, java.lang.Object> payload = buildResponse(ssoSession); if (org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList(ssoSession.getScope()).contains(SsoConstants.OPENID_SCOPE)) { payload.put("id_token", org.ovirt.engine.core.sso.utils.SsoUtils.createJWT(request, ssoSession, clientId<START_MOD>, clientSecret<END_MOD>)); } return payload; }
<START_MOD>private java.lang.String getTokenFromHeader(javax.servlet.http.HttpServletRequest request) { java.lang.String token = null; java.lang.String headerValue = request.getHeader(SsoConstants.HEADER_AUTHORIZATION); if ((headerValue != null) && (headerValue.startsWith(org.ovirt.engine.core.sso.servlets.OpenIdUserInfoServlet.BEARER))) { token = headerValue.substring("Bearer".length()).trim(); } return token; }<END_MOD>
<START_MOD>@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { try { org.ovirt.engine.core.sso.servlets.OpenIdUserInfoServlet.log.debug("Entered OpenIdUserInfoServlet Query String: {}, Parameters : {}", request.getQueryString(), org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameters(request)); java.lang.String token = request.getParameter(SsoConstants.HTTP_REQ_ATTR_ACCESS_TOKEN); if (token == null) { token = getTokenFromHeader(request); } if (token == null) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SsoConstants.ERROR_CODE, org.ovirt.engine.core.sso.utils.SsoConstants.ERR_CODE_INVALID_REQUEST); } org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSessionFromRequest(request, token); org.ovirt.engine.core.sso.servlets.OpenIdUserInfoServlet.sendJsonData(response, buildResponse(request, ssoSession)); } catch (org.ovirt.engine.core.sso.utils.OAuthException ex) { org.ovirt.engine.core.sso.utils.SsoUtils.sendJsonDataWithMessage(response, ex); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { org.ovirt.engine.core.sso.utils.SsoUtils.sendJsonDataWithMessage(response, SsoConstants.ERR_CODE_ACCESS_DENIED, ex); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.SsoUtils.sendJsonDataWithMessage(response, SsoConstants.ERR_CODE_SERVER_ERROR, ex); } }<END_MOD>
<START_MOD>private java.lang.String buildResponse(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession) throws java.lang.Exception { return org.ovirt.engine.core.sso.utils.SsoUtils.createJWT(request, ssoSession, ssoSession.getClientId()).toString(); }<END_MOD>
<START_MOD>protected org.ovirt.engine.core.sso.utils.SsoSession handleIssueTokenForAuthCode(javax.servlet.http.HttpServletRequest request, java.lang.String clientId, java.lang.String scope) throws java.lang.Exception { org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug("Entered issueTokenForAuthCode"); java.lang.String authCode = org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameter(request, SsoConstants.HTTP_PARAM_AUTHORIZATION_CODE, SsoConstants.HTTP_PARAM_AUTHORIZATION_CODE); java.lang.String accessToken = getTokenForAuthCode(authCode); if (org.apache.commons.lang.StringUtils.isEmpty(accessToken)) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SsoConstants.ERR_CODE_INVALID_GRANT, org.ovirt.engine.core.sso.utils.SsoConstants.ERR_CODE_INVALID_CODE_MSG); } org.ovirt.engine.core.sso.utils.SsoUtils.validateRequestScope(request, accessToken, scope); org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request, clientId, accessToken, true); validateClientAcceptHeader(ssoSession, request); return ssoSession; }<END_MOD>
@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener(( ev, sender, args) -> clearSelection()); getModel().getSelectionModel().addSelectionChangeHandler(( event) -> { <START_MOD>if <END_MOD>(<START_MOD>!<END_MOD>(getModel().<START_MOD>getSelectedObjects().isEmpty<END_MOD>()))<START_MOD> { this<END_MOD>.<START_MOD>getModel<END_MOD>()<START_MOD>.setSelectedItem(getModel().getSelectedObjects().get(0<END_MOD>));<START_MOD> } else { this.getModel().setSelectedItem(null); }<END_MOD> }); }
private static void extractInterfaceStatistics(java.util.Map<java.lang.String, java.lang.Object> dict, org.ovirt.engine.core.common.businessentities.network.NetworkInterface<?> iface) { org.ovirt.engine.core.common.businessentities.network.NetworkStatistics stats = iface.getStatistics(); stats.setReceiveDropRate(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValueWithNullProtection(dict, VdsProperties.rx_dropped)); stats.setReceivedBytes(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignLongValue(dict, VdsProperties.rx_total)); stats.setTransmitDropRate(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValueWithNullProtection(dict, VdsProperties.tx_dropped)); stats.setTransmittedBytes(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignLongValue(dict, VdsProperties.tx_total)); stats.setSampleTime(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValue(dict, VdsProperties.sample_time)); <START_MOD>if (dict.containsKey(VdsProperties.INTERFACE_SPEED)) { <END_MOD>iface.setSpeed(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignIntValue(dict, VdsProperties.INTERFACE_SPEED)); }<START_MOD> }<END_MOD>
<START_MOD>private void writeVmMetadata() { writer.setPrefix(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI); writer.writeStartElement(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI, "vm"); writer.writeNamespace(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI); if (vm.isRunOnce()) { writer.writeStartElement(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI, "destroy_on_reboot"); writer.writeAttributeString("type", "bool"); writer.writeRaw("True"); writer.writeEndElement(); } writer.writeEndElement(); }<END_MOD>
<START_MOD>java.lang.String CANNOT_REMOVE_STORAGE_HOST_IN_MAINTENANCE();<END_MOD>
@java.lang.Override public void setHasSelectedTags(boolean hasSelectedTags) { }
<START_MOD>@java.lang.SuppressWarnings("unchecked") @java.lang.Override protected void showSuggestions(final com.google.gwt.user.client.ui.SuggestBox suggestBox, java.util.Collection<? extends com.google.gwt.user.client.ui.SuggestOracle.Suggestion> suggestions, boolean isDisplayStringHTML, boolean isAutoSelectEnabled, org.ovirt.engine.ui.webadmin.widget.autocomplete.SuggestionCallback callback) { boolean anySuggestions = (suggestions != null) && ((suggestions.size()) > 0); if (!anySuggestions) { hideSuggestions(); return; } if ((suggestionPopup) == null) { suggestionPopup = createPopup(); } if (suggestionPopup.isAttached()) { suggestionPopup.hide(); } if (suggestBox != null) { suggestionPopup.removeAutoHidePartner(suggestBox.getElement()); suggestionPopup.addAutoHidePartner(suggestBox.getElement()); } suggestionsTable = getSuggestionCellList(((java.util.Collection<org.ovirt.engine.ui.webadmin.widget.autocomplete.SearchSuggestion>) (suggestions)), suggestBox, suggestionPopup); suggestionPopup.setWidget(suggestionsTable); suggestionPopup.showRelativeTo(suggestBox); }<END_MOD>
private java.lang.String[] getSearchObjectFilter() { java.util.List<java.lang.String> filter = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<START_MOD><?, ?><END_MOD> list : commonModel.getItems()) { if ((list != null) && (!(list.getIsAvailable()))) { java.lang.String[] searchObjects = list.getSearchObjects(); if (searchObjects != null) { filter.addAll(java.util.Arrays.asList(searchObjects)); } } } return filter.toArray(new java.lang.String[0]); }
private void <START_MOD>syncDirectLunsAttachedToVmsInPool<END_MOD>(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> deviceList) { org.ovirt.engine.core.common.action.<START_MOD>SyncDirectLunsParameters<END_MOD> parameters = new org.ovirt.engine.core.common.action.<START_MOD>SyncDirectLunsParameters<END_MOD>(org.ovirt.engine.core.bll.storage.pool.SyncAllUsedLunsCommand.getParameters().getStoragePoolId()); parameters.setDeviceList(deviceList); runInternalAction(VdcActionType.<START_MOD>SyncDirectLuns<END_MOD>, parameters); }
@java.lang.Override protected boolean validate() { <START_MOD>return<END_MOD> org.ovirt.engine.core.bll.storage.pool.AbstractSyncLunsCommand.checkStoragePool(); }
private void validateRemove() { if (((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.<START_MOD>getVds().getStoragePoolId<END_MOD>()); validateRetrievedMetadataDevices(); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageStaticData()); java.util.List<java.lang.String> metadataDevices = blockStorageDomainHelper.findMetadataDevices(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce()); if (!(metadataDevices.isEmpty())) { org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.setCustomCommaSeparatedValues("deviceIds", metadataDevices); auditLogDirector.log(this, AuditLogType.USER_REDUCE_DOMAIN_DEVICES_FAILED_METADATA_DEVICES); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GeneralException,   perform on metadata devices } } validateFreeSpace(); }
public void fillMetadataDevicesInfo(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic, org.ovirt.engine.core.compat.Guid <START_MOD>storagePoolId<END_MOD>) { try { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainFromIrs = ((org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid>) (<START_MOD>org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithoutFailover<END_MOD>(VDSCommandType.HSMGetStorageDomainInfo, new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(<START_MOD>null<END_MOD>, storageDomainStatic.getId())<START_MOD>, storagePoolId, null<END_MOD>).getReturnValue())).getFirst(); storageDomainStatic.setFirstMetadataDevice(domainFromIrs.getFirstMetadataDevice()); storageDomainStatic.setVgMetadataDevice(domainFromIrs.getVgMetadataDevice()); } catch (java.lang.Exception e) { storageDomainStatic.setFirstMetadataDevice(null); storageDomainStatic.setVgMetadataDevice(null); org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info( to get the domain info } }
protected void updateMetadataDevices() { if (((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getVds().<START_MOD>getStoragePoolId<END_MOD>()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } }
private void refreshMetadataDevicesInfoIfNeeded() { <START_MOD>java.lang.String oldVgMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice(); java.lang.String oldFirstMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStoragePoolId<END_MOD>()); if ((!(java.util.Objects.equals(oldVgMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()))) || (!(java.util.Objects.equals(oldFirstMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice())))) { storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } blockStorageDomainHelper.checkDomainMetadataDevices(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain()); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.initializeStorageDomain(); java.lang.String storage = ((org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage()) != null) ? org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage() : ""; org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(""); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInDb(); if (org.apache.commons.lang.StringUtils.isEmpty(storage)) { storage = createVG(); } org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(storage); if ((org.apache.commons.lang.StringUtils.isNotEmpty(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage())) && (org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInIrs())) { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.updateStorageDomainDynamicFromIrs(); proceedVGLunsInDb(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getVds().<START_MOD>getStoragePoolId<END_MOD>()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData()); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.setSucceeded(true); } }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getDeviceList(java.util.<START_MOD>Set<END_MOD><java.lang.String> lunsIds) { if ((AbstractSyncLunsCommand.getParameters().getDeviceList()) == null) { return runGetDeviceList(lunsIds); } if (lunsIds == null) { return AbstractSyncLunsCommand.getParameters().getDeviceList(); } java.util.Set<java.lang.String> lunsIdsSet = new java.util.HashSet<>(lunsIds); return AbstractSyncLunsCommand.getParameters().getDeviceList().stream().filter(( lun) -> lunsIdsSet.contains(lun.getId())).collect(java.util.stream.Collectors.toList()); }
private org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters createParameters(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.api.model.LogicalUnit> newLuns, boolean force) { org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters params = new org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters(); params.setStorageDomainId(storageDomainId); java.util.<START_MOD>Set<END_MOD><java.lang.String> lunIds = newLuns.stream().map(LogicalUnit::getId).collect(java.util.stream.Collectors.toCollection(java.util.<START_MOD>HashSet<END_MOD>::new)); params.setLunIds(lunIds); params.setForce(force); return params; }
@java.lang.Override protected void writeGeneralData() { super.writeGeneralData(); _writer.<START_MOD>writeElement(OvfProperties.TEMPLATE_ID, _vmTemplate.getId().toString()); org.ovirt.engine.core.common.businessentities.OriginType originType = _vmTemplate.getOrigin(); _writer.writeElement(OvfProperties.ORIGIN, (originType == null ? "" : java.lang.String.valueOf(originType.getValue()))); _writer.writeElement(OvfProperties.TEMPLATE_DEFAULT_DISPLAY_TYPE, java.lang.String.valueOf(_vmTemplate.getDefaultDisplayType().getValue())); _writer.writeElement(OvfProperties.IS_DISABLED, java.lang.String.valueOf(_vmTemplate.isDisabled())); _writer.writeElement(OvfProperties.TRUSTED_SERVICE, java.lang.String.valueOf(_vmTemplate.isTrustedService())); _writer.writeElement(OvfProperties.TEMPLATE_TYPE, _vmTemplate.getTemplateType().name()); _writer.writeElement(OvfProperties.BASE_TEMPLATE_ID, _vmTemplate.getBaseTemplateId().toString()); _writer.writeElement(OvfProperties.TEMPLATE_VERSION_NUMBER, java.lang.String.valueOf(_vmTemplate.getTemplateVersionNumber())); _writer.writeElement(OvfProperties.TEMPLATE_VERSION_NAME, _vmTemplate.getTemplateVersionName<END_MOD>()); _writer.writeEndElement(); }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getSelectedItems())) : null; boolean shouldAllowEdit = true; if (disk != null) { shouldAllowEdit = (!(disk.isOvfStore())) && (!(isDiskLocked(disk))); } getNewCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk != null) && (disks != null)) && ((disks.size()) == 1)) && shouldAllowEdit)); getRemoveCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isRemoveCommandAvailable()))); getScanAlignmentCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isScanAlignmentCommandAvailable()))); getExportCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveCommandAvailability(disks); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems()) != null ? getItems() : null), ((getSelectedItems()) != null ? getSelectedItems() : null), getChangeQuotaCommand()); getCancelUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isCancelAllowed(disks)); getPauseUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isPauseAllowed(disks)); getResumeUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isResumeAllowed(disks)); }
protected void updateDefaultHost() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getModel().getSelectedCluster(); final org.ovirt.engine.ui.uicompat.UIConstants constants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants(); if (cluster == null) { getModel().getDefaultHost().setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); getModel().getDefaultHost().setSelectedItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); return; } getHostListByCluster(cluster, asyncQuery(( hosts) -> { List<org.ovirt.engine.core.common.businessentities.VDS> oldDefaultHosts = getModel().getDefaultHost().getSelectedItems(); <START_MOD>getModel().getDefaultHost().setItems(hosts); <END_MOD>if ((<START_MOD>oldDefaultHosts<END_MOD> != null) && (<START_MOD>!(oldDefaultHosts.isEmpty())<END_MOD>)) { <START_MOD>Set<org.ovirt.engine.core.common.businessentities.VDS> oldSelectedIntersectionNewHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.HashSet<>(oldDefaultHosts); oldSelectedIntersectionNewHosts.retainAll(hosts); oldDefaultHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.ArrayList<>(oldSelectedIntersectionNewHosts); } List<org.ovirt.engine.core.common.businessentities.VDS> hostsToSelect = ((oldDefaultHosts != null) && (!(oldDefaultHosts.isEmpty()))) ? oldDefaultHosts<END_MOD> : <START_MOD>!(<END_MOD>hosts<START_MOD>.isEmpty()) ? java.util.Collections.singletonList(hosts.get(0)) : java.util.Collections.<org.ovirt.engine.core.common.businessentities.VDS>emptyList();<END_MOD> getModel().getDefaultHost().setSelectedItems(<START_MOD>hostsToSelect); changeDefaultHost()<END_MOD>; }<START_MOD>));<END_MOD> }
private void updateActionAvailability() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> items = ((getSelectedItems()) != null) ? getSelectedItems() : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(); org.ovirt.engine.core.common.businessentities.StorageDomain item = getSelectedItem(); getNewDomainCommand().setIsAvailable(true); getEditCommand().setIsExecutionAllowed((((items.size()) == 1) && (isEditAvailable(item)))); getRemoveCommand().setIsExecutionAllowed(((((items.size()) == 1) && (!(items.get(0).getStorageType().isOpenStackDomain()))) && ((items.get(0).getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)))); getDestroyCommand().setIsExecutionAllowed(((((item != null) && ((items.size()) == 1)) && (!(items.get(0).getStorageType().isOpenStackDomain()))) && ((item.getStatus()) != (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)))); getScanDisksCommand().setIsExecutionAllowed((((((item != null) && ((items.size()) == 1)) && (!(items.get(0).getStorageType().isOpenStackDomain()))) && ((item.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active))) && (item.getStorageDomainType().isDataDomain()))); getUpdateOvfsCommand().setIsExecutionAllowed(((((item != null) && ((items.size()) == 1)) && (item.getStorageDomainType().isDataDomain())) && ((item.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)))); }
private void updateActionAvailability() { getCopyCommand().setIsExecutionAllowed(((((getSelectedItems()) != null) && ((getSelectedItems().size()) > 0)) && (isCopyCommandAvailable()))); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems()) != null ? getItems() : null), ((getSelectedItems()) != null ? getSelectedItems() : null), getChangeQuotaCommand()); }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); getNewCommand().setIsExecutionAllowed(true); getAttachCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk != null) && (isSingleDiskSelected())) && (!(isDiskLocked(disk)))) && (((isVmDown()) || (!(disk.getPlugged()))) || (isExtendImageSizeEnabled())))); getRemoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isRemoveCommandAvailable()))); getSparsifyCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isSparsifyCommandAvailable()))); getMoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && ((isMoveCommandAvailable()) || (isLiveMoveCommandAvailable())))); updateScanAlignmentCommandAvailability(); getPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(true)); getUnPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(false)); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems()) != null ? ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getItems())) : null), ((getSelectedItems()) != null ? getSelectedItems() : null), getChangeQuotaCommand()); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainSectionPresenter.TYPE_SetHeader)) { setPanelContent(headerPanel, content); } else if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainSectionPresenter.TYPE_SetMainContent)) { <START_MOD>if (!(placeholderRemoved)) { removeHostPagePlaceholder(); placeholderRemoved = true; } <END_MOD>setPanelContent(mainContentPanel, content); } else { super.setInSlot(slot, content); } }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLogicalUnits() { boolean reportStatus = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendHostStorageResource.REPORT_STATUS, true, true); <START_MOD>org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters<END_MOD> <START_MOD>params =<END_MOD> new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(asGuid(hostId), org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN, reportStatus, null)<START_MOD>; params.setValidateHostStatus(true); return getBackendCollection(VdcQueryType.GetDeviceList, params<END_MOD>); }
<START_MOD>private void getMenuLayout(org.ovirt.engine.ui.webadmin.widget.tab.PrimaryMenuItem[] items, org.ovirt.engine.ui.webadmin.widget.tab.SecondaryMenuItem[] secondaryItems) { layoutMap.clear(); for (org.ovirt.engine.ui.webadmin.widget.tab.PrimaryMenuItem layout : items) { if ((layout.getHref()) != null) { org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails details = new org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails(); details.setPrimaryPriority(layout.getIndex()); details.setSecondaryTitle(layout.getTitle()); details.setIcon(layout.getIcon()); layoutMap.put(layout.getHref(), details); } } for (org.ovirt.engine.ui.webadmin.widget.tab.SecondaryMenuItem subMenu : secondaryItems) { org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails details = new org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails(); details.setPrimaryPriority(subMenu.getPrimaryMenu().getIndex()); details.setPrimaryTitle(subMenu.getPrimaryMenu().getTitle()); details.setSecondaryPriority(subMenu.getPriority()); details.setSecondaryTitle(subMenu.getTitle()); details.setIcon(subMenu.getIcon()); layoutMap.put(subMenu.getHref(), details); } }<END_MOD>
protected void syncSearch(org.ovirt.engine.core.common.queries.<START_MOD>QueryType<END_MOD> vdcQueryType, final java.util.Comparator<? super T> comparator) { if ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity()) == null) { return; } org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity().getId()); parameters.setRefresh(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, parameters, new org.ovirt.engine.ui.uicommonweb.models.storage.SetSortedItemsAsyncQuery(comparator)); }
protected void syncSearch(org.ovirt.engine.core.common.queries.<START_MOD>QueryType<END_MOD> vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase, org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, vdcQueryParametersBase, asyncCallback); setIsQueryFirstTime(false); }
protected void syncSearch(org.ovirt.engine.core.common.queries.<START_MOD>QueryType<END_MOD> vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase) { syncSearch(vdcQueryType, vdcQueryParametersBase, new SetItemsAsyncQuery()); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.<START_MOD>QueryParametersBase<END_MOD> <START_MOD>queryParametersBase<END_MOD>, org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { <START_MOD>queryParametersBase<END_MOD>.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, <START_MOD>queryParametersBase<END_MOD>, asyncCallback); setIsQueryFirstTime(false); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.<START_MOD>QueryParametersBase<END_MOD> <START_MOD>queryParametersBase<END_MOD>) { syncSearch(vdcQueryType, <START_MOD>queryParametersBase<END_MOD>, new SetItemsAsyncQuery()); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLogicalUnits() { boolean reportStatus = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendHostStorageResource.REPORT_STATUS, true, true); return getBackendCollection(<START_MOD>QueryType<END_MOD>.GetDeviceList, new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(asGuid(hostId), org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN, reportStatus, null)); }
java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> runMultipleQueries(java.util.ArrayList<org.ovirt.engine.core.common.queries.<START_MOD>QueryType<END_MOD>> vdcQueryTypeList, java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryParametersBase> paramsList);
protected org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer initializeVdsBroker(org.ovirt.engine.core.compat.Guid vdsId) { org.ovirt.engine.core.vdsbroker.VdsManager vdsmanager = org.ovirt.engine.core.vdsbroker.<START_MOD>vdsbroker.Injector.get(org.ovirt.engine.core.vdsbroker.<END_MOD>ResourceManager.<START_MOD>class<END_MOD>).getVdsManager(vdsId); if (vdsmanager == null) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.RESOURCE_MANAGER_VDS_NOT_FOUND, java.lang.String.format( with id: %1$s was not found vdsId)); } setVdsAndVdsStatic(vdsmanager.getCopyVds()); return vdsmanager.getVdsProxy(); }
@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener(( ev, sender, args) -> clearSelection()); getModel().getSelectionModel().addSelectionChangeHandler(( event) -> { this.setSelectedItems(getModel().getSelectionModel().<START_MOD>getSelectedObjects<END_MOD>()); }); }
<START_MOD>private void writeHostDevice(org.ovirt.engine.core.common.businessentities.VmHostDevice device) { java.lang.String deviceName = device.getDevice(); java.lang.String type = deviceName.substring(0, deviceName.indexOf('_')); switch (type) { case "pci" : writePciHostDevice(device); break; } }<END_MOD>
<START_MOD>private void writePciHostDevice(org.ovirt.engine.core.common.businessentities.VmHostDevice device) { if (device.isIommuPlaceholder()) { return; } writer.writeStartElement("hostdev"); writer.writeAttributeString("managed", "no"); writer.writeAttributeString("mode", "subsystem"); writer.writeAttributeString("type", "pci"); java.lang.String[] nameElements = device.getDevice().split("_"); writer.writeStartElement("source"); writer.writeStartElement("address"); writer.writeAttributeString("domain", java.lang.String.format("0x%s", nameElements[1])); writer.writeAttributeString("bus", java.lang.String.format("0x%s", nameElements[2])); writer.writeAttributeString("slot", java.lang.String.format("0x%s", nameElements[3])); writer.writeAttributeString("function", java.lang.String.format("0x%s", nameElements[4])); writer.writeEndElement(); writer.writeEndElement(); writeAddress(device); writer.writeEndElement(); }<END_MOD>
private void initStorageDomainDiscardAfterDelete() { if ((org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().getDiscardAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().setDiscardAfterDelete(getDefaultDiscardAfterDelete()); } }
protected boolean validateVmNotDuringSnapshot() { <START_MOD>java.util.Set<org.ovirt.engine.core.compat.Guid> mergedSnapshotDisks = getSnapshotDisks(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getParameters().getSnapshotId()); java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> vmLockedSnapshots = getAllVmLockedSnapshots(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVmId()); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : vmLockedSnapshots) { java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotDisks = getSnapshotDisks(snapshot.getId()); if (snapshotDisks.stream().anyMatch(mergedSnapshotDisks::contains)) { <END_MOD>return validate(<START_MOD>new <END_MOD>org.ovirt.engine.core.bll.<START_MOD>ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT<END_MOD>)); }<START_MOD> } return validate(ValidationResult.VALID); }<END_MOD>
<START_MOD>private static boolean isRestApiScope(javax.servlet.http.HttpServletRequest request) { boolean isRestApiScope; try { isRestApiScope = SsoUtils.getSsoSession(request).isRestApiScope(); } catch (org.ovirt.engine.core.sso.utils.OAuthException ex) { isRestApiScope = false; } return isRestApiScope || (SsoUtils.isRestApiScope(SsoUtils.scopeAsList(SsoUtils.getScopeRequestParameter(request, "")))); }<END_MOD>
private void convertCustomPropertiesStrToMaps(org.ovirt.engine.core.compat.Version version, java.lang.String propertiesValue, java.util.Map<java.lang.String, java.lang.String> predefinedPropertiesMap, java.util.Map<java.lang.String, java.lang.String> userDefinedPropertiesMap) { java.util.Map<java.lang.String, java.lang.String> propertiesMap = convertProperties(propertiesValue, allVmProperties.get(version)); java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.String>> propertiesEntries = propertiesMap.entrySet(); java.util.Set<java.lang.String> predefinedPropertiesKeys = predefinedProperties.get(version).keySet(); java.util.Set<java.lang.String> userdefinedPropertiesKeys = userdefinedProperties.get(version).keySet(); for (java.util.Map.Entry<java.lang.String, java.lang.String> propertiesEntry : propertiesEntries) { java.lang.String propertyKey = propertiesEntry.getKey(); java.lang.String propertyValue = <START_MOD>java.util.Optional.ofNullable<END_MOD>(propertiesEntry.getValue())<START_MOD>.orElse("")<END_MOD>; if (predefinedPropertiesKeys.contains(propertyKey)) { predefinedPropertiesMap.put(propertyKey, propertyValue); } if (userdefinedPropertiesKeys.contains(propertyKey)) { userDefinedPropertiesMap.put(propertyKey, propertyValue); } } }
public boolean syntaxErrorInProperties(java.util.Map<java.lang.String, java.lang.String> properties) { boolean error = false; if ((properties != null) && (!(properties.isEmpty()))) { for (java.util.Map.Entry<java.lang.String, java.lang.String> e : properties.entrySet()) { java.lang.String key = e.getKey(); if ((key == null) || (!(key.matches(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.KEY_REGEX)))) { error = true; break; } if (!(<START_MOD>java.util.Optional.ofNullable(e.getValue()).orElse("").matches(<END_MOD>org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.VALUE_REGEX))) { error = true; break; } } } return error; }
public java.lang.String convertProperties(java.util.Map<java.lang.String, java.lang.String> properties) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); if ((properties != null) && (!(properties.isEmpty()))) { for (java.util.Map.Entry<java.lang.String, java.lang.String> e : properties.entrySet()) { sb.append(e.getKey()); sb.append(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.KEY_VALUE_DELIMETER); sb.append(<START_MOD>java.util.Optional.ofNullable(e.getValue()).orElse("")); sb.append(<END_MOD>org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.PROPERTIES_DELIMETER); } sb.deleteCharAt(((sb.length()) - 1)); } return sb.toString(); }
public void validateWithDirectLunIdAndInvalidVds() { command.getParameters().setDirectLunId(org.ovirt.engine.core.compat.Guid.newGuid()); <START_MOD>doReturn(false).<END_MOD>when(<START_MOD>command)<END_MOD>.<START_MOD>validateVds<END_MOD>()<START_MOD>; assertFalse(command<END_MOD>.<START_MOD>validate<END_MOD>()); }
<START_MOD>public boolean validatePMAgentPort() { java.lang.Integer port = getParameters().getAgent().getPort(); java.lang.String portStr = null; if (port == null) { if (getParameters().getAgent().getOptionsMap().containsKey(PORT)) { portStr = getParameters().getAgent().getOptionsMap().get(PORT); } else { return true; } } portStr = (portStr == null) ? port.toString() : portStr; return (portStr.equals("")) || (portStr.matches("\\d+")); }<END_MOD>
<START_MOD>@java.lang.Override protected void createItems() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = getModel().getSelectedItems(); boolean noLabelsSelected = (selectedLabels == null) || (selectedLabels.isEmpty()); if (noLabelsSelected) { addNoLabelsMessage(); return; } itemList.clear(); java.util.Collections.sort(selectedLabels, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); for (org.ovirt.engine.core.common.businessentities.Label label : selectedLabels) { final org.ovirt.engine.core.common.businessentities.Label selectedLabel = label; org.ovirt.engine.ui.common.widget.ItemListItem labelListItem = new org.ovirt.engine.ui.common.widget.ItemListItem(); labelListItem.init(selectedLabel.getName()); labelListItem.getDeactivationAnchor().addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { org.ovirt.engine.ui.common.widget.AffinityLabelListWidget.this.getModel().getSelectedItems().remove(selectedLabel); org.ovirt.engine.ui.common.widget.AffinityLabelListWidget.this.refreshItems(); } }); itemList.add(labelListItem); } itemListPanel.add(itemList); }<END_MOD>
<START_MOD>@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { this.getModel().getSelectedItems().remove(selectedLabel); this.refreshItems(); }<END_MOD>
<START_MOD>private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.stream().map(Label::getId).collect(java.util.stream.Collectors.toList()); labelDao.addVmToLabels(org.ovirt.engine.core.bll.AddVmCommand.getVmId(), labelIds); }<END_MOD>
<START_MOD>java.lang.String affinityLabelsSubTabDeleteButton();<END_MOD>
<START_MOD>@java.lang.Override protected void initTable() { super.initTable(); getTable().addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.core.common.businessentities.Label>(constants.affinityLabelsSubTabDeleteButton()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getRemoveCommand(); } }); }<END_MOD>
<START_MOD>@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList) { java.util.Set<org.ovirt.engine.core.compat.Guid> hostIds = this.getAffinityLabel().getHosts(); java.util.Collections.sort(hostList, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); this.getHostsSelectionModel().init(hostList, (hostIds != null ? new java.util.ArrayList(hostIds) : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); this.stopProgressOnVmsAndHostsInit(); }<END_MOD>
<START_MOD>public void loadEntitiesNameMap() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getEntitiesNameMap(new org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String>>() { @java.lang.Override public void onSuccess(java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> nameMap) { entitiesNameMap.getEntity().clear(); entitiesNameMap.getEntity().putAll(nameMap); entitiesNameMap.getEntityChangedEvent().raise(org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.this, EventArgs.EMPTY); } })); }<END_MOD>
<START_MOD>@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIds = this.getAffinityGroup().getVdsIds(); this.getHostsSelectionModel().init(hostList, (hostIds != null ? hostIds : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); this.stopProgressOnVmsAndHostsInit(); }<END_MOD>
<START_MOD>@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { this.stopProgress(); if (((result != null) && ((result.getReturnValue()) != null)) && (result.getReturnValue().getSucceeded())) { this.cancel(); } }<END_MOD>
<START_MOD>@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList) { java.util.Set<org.ovirt.engine.core.compat.Guid> vmIds = this.getAffinityLabel().getVms(); this.getVmsSelectionModel().init(vmList, (vmIds != null ? new java.util.ArrayList(vmIds) : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); this.stopProgressOnVmsAndHostsInit(); }<END_MOD>
<START_MOD>private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.stream().map(Label::getId).collect(java.util.stream.Collectors.toList()); labelDao.addHostToLabels(org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getVdsId(), labelIds); }<END_MOD>
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.VirtualMachineSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.AuditLog, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>, org.ovirt.engine.ui.uicommonweb.models.vms.VmEventListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineEventPresenter.constants.virtualMachineEventSubTabLabel(), <START_MOD>11<END_MOD>, modelProvider); }
<START_MOD>void onSave() { if ((!(validate())) || ((getProgress()) != null)) { return; } org.ovirt.engine.core.common.businessentities.Label label = getAffinityLabel(); label.setName(getName().getEntity()); label.setVms(new java.util.HashSet(getVmsSelectionModel().getSelectedVmIds())); label.setHosts(new java.util.HashSet(getHostsSelectionModel().getSelectedHostIds())); startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(saveActionType, new org.ovirt.engine.core.common.action.LabelActionParameters(label), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.AffinityLabelModel.this.stopProgress(); if (((result != null) && ((result.getReturnValue()) != null)) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.AffinityLabelModel.this.cancel(); } } }, this); }<END_MOD>
@java.lang.Override protected void executeCommand() { <START_MOD>imagesHandler<END_MOD>.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation(getMovedDiskIds(), ImageStatus.LOCKED, ImageStatus.OK, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getCompensationContext()); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = runInternalAction(ActionType.CreateAllSnapshotsFromVm, getCreateSnapshotParameters(), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getContext())); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().setAutoGeneratedSnapshotId(vdcReturnValue.getActionReturnValue()); persistCommand(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getParentCommand(), ((getCallback()) != null)); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.setSucceeded(true); }
protected boolean checkCanBeMoveInVm() { return validate(new org.ovirt.engine.core.bll.validator.storage.DiskValidator(getImage()).<START_MOD>isDiskPluggedToAnyNonDownVm<END_MOD>(false)); }
protected void initializeCommand(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { when(diskDao.get(any())).thenReturn(disk); org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(VMStatus.Down); when(vmDao.get(any())).thenReturn(vm); doReturn(storageDomainValidator).when(command).createStorageDomainValidator(); doReturn(multipleDiskVmElementValidator).when(command).createMultipleDiskVmElementValidator(); doReturn(diskValidator).when(command).createDiskValidator(disk); doReturn(true).when(command).setAndValidateDiskProfiles(); doReturn(disk.getId()).when(command).getImageGroupId(); doReturn(ActionType.MoveOrCopyDisk).when(command).getActionType(); <START_MOD>command.init(); <END_MOD>}
@java.lang.Override protected void executeVmCommand() { this.setVmName(vmStaticDao.get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getVmId()).getName()); org.ovirt.engine.core.common.businessentities.network.VmNic iface = vmNicDao.get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getInterfaceId()); if (iface != null) { interfaceName = iface.getName(); java.lang.String interType = org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(iface.getType()).getDescription(); if (interType != null) { org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.addCustomValue("InterfaceType", interType); } <START_MOD>org.ovirt.engine.core.bll.network.ExternalNetworkManager.create(iface).deallocateIfExternal(); org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getMacPool().freeMac(iface.getMacAddress()); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.bll.network.vm.vmStaticDao.incrementDbGeneration(getParameters().getVmId()); org.ovirt.engine.core.bll.network.vm.vmNicDao.remove(getParameters().getInterfaceId()); org.ovirt.engine.core.bll.network.vm.vmNetworkStatisticsDao.remove(getParameters().getInterfaceId()); org.ovirt.engine.core.bll.network.vm.vmDeviceDao.remove(<END_MOD>new org.ovirt.engine.core.<START_MOD>common.businessentities.VmDeviceId(getParameters().getInterfaceId(), getParameters().getVmId())); setSucceeded(true); return null<END_MOD>; }<START_MOD>)<END_MOD>; }
private void removeNetworks() { final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = networkDao.getAllForDataCenter(org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { if (network.isExternal()) { for (org.ovirt.engine.core.common.businessentities.network.VmNic nic : vmNicDao.getAllForNetwork(network.getId())) { org.ovirt.engine.core.bll.network.ExternalNetworkManager<START_MOD>.create<END_MOD>(nic, network).deallocateIfExternal(); } } } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { for (final org.ovirt.engine.core.common.businessentities.network.Network net : networks) { List<org.ovirt.engine.core.common.businessentities.network.VnicProfile> profiles = org.ovirt.engine.core.bll.storage.pool.vnicProfileDao.getAllForNetwork(net.getId()); for (org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile : profiles) { getCompensationContext().snapshotEntity(vnicProfile); org.ovirt.engine.core.bll.storage.pool.vnicProfileDao.remove(vnicProfile.getId()); } getCompensationContext().snapshotEntity(net); org.ovirt.engine.core.bll.storage.pool.networkDao.remove(net.getId()); } getCompensationContext().stateChanged(); return null; }); }
private void unplugFromExternalNetwork() { org.ovirt.engine.core.bll.network.ExternalNetworkManager<START_MOD>.create<END_MOD>(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic(), getNetwork()).deallocateIfExternal(); }
protected void removeFromExternalNetworks(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { org.ovirt.engine.core.bll.network.ExternalNetworkManager<START_MOD>.create<END_MOD>(iface).deallocateIfExternal(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); }
@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); when(providerDao.get(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); doReturn(providerProxyFactory).when(underTest).getProviderProxyFactory(); when(providerProxyFactory.create(provider)).thenReturn(networkProviderProxy); }
public org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid vdsId, boolean shouldPrepareAndTeardown) { if (vdsId == null) { vdsId = <START_MOD>vdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldPrepareAndTeardown) { prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } try { qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (resourceManager.runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { <END_MOD>org.ovirt.engine.core.bll.storage.<START_MOD>disk.image.ImagesHandler.log.error( to get qemu image info from storage e); } finally { if (shouldPrepareAndTeardown) { teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } } return<END_MOD> qemuImageInfo<START_MOD>; }<END_MOD>
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.bll.network.dc.networkDao.save(getNetwork()); if ((getNetwork().isVmNetwork()) && (getParameters().isVnicProfileRequired())) { org.ovirt.engine.core.bll.network.dc.vnicProfileDao.save(org.ovirt.engine.core.bll.network.<START_MOD>dc.networkHelper<END_MOD>.createVnicProfile(getNetwork()<START_MOD>)); } org.ovirt.engine.core.bll.network.dc.networkHelper.addPermissionsOnNetwork(getCurrentUser().getId()<END_MOD>, <START_MOD>getNetwork().getId()); return null<END_MOD>; }<START_MOD>); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork<END_MOD>().getId()<START_MOD>); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.setSucceeded(true)<END_MOD>; }
private void chooseHostForExecution(org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase parametersBase, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.bll.CommandBase<?> cmd, java.util.Collection<org.ovirt.engine.core.compat.Guid> executedHosts) { org.ovirt.engine.core.compat.Guid vdsForExecution = getHostForExecution(storagePoolId, executedHosts); parametersBase.setVdsId(vdsForExecution); if (cmd != null) { if (((cmd.getCommandStep()) != null) && ((cmd.getExecutionContext().getStep()) != null)) { org.ovirt.engine.core.compat.Guid stepId = cmd.getExecutionContext().getStep().getId(); if ((cmd.getParameters().getVdsRunningOn()) != null) { <START_MOD>stepSubjectEntityDao<END_MOD>.remove(cmd.getParameters().getVdsRunningOn(), stepId); } if (vdsForExecution != null) { <START_MOD>stepSubjectEntityDao<END_MOD>.saveAll(java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(stepId, org.ovirt.engine.core.common.VdcObjectType.EXECUTION_HOST, vdsForExecution))); } } cmd.getParameters().setVdsRunningOn(vdsForExecution); cmd.persistCommand(cmd.getParameters().getParentCommand(), ((cmd.getCallback()) != null)); } }
private void removeNetworkFromHosts(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.bll.context.CommandContext context, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = <START_MOD>removeNetworkParametersBuilder<END_MOD>.buildParameters(network, nics); if (!(parameters.isEmpty())) { org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(parameters); <START_MOD>backend<END_MOD>.runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, parameters, context); } }
@java.lang.SuppressWarnings("unchecked") private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); if ((org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()) == null) { return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (<START_MOD>vdsCommandsHelper<END_MOD>.runVdsCommandWithoutFailover(VDSCommandType.GetVGInfo, params, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStoragePoolId(), null).getReturnValue())); } return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params).getReturnValue())); }
<START_MOD>public void deallocateIfExternal() { if (((getNetwork()) != null) && (getNetwork().isExternal())) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = providerDao.get(getNetwork().getProvidedBy().getProviderId()); org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy providerProxy = getProviderProxyFactory().create(provider); try { providerProxy.deallocate(nic); } catch (org.ovirt.engine.core.common.errors.EngineException e) {<END_MOD> org.ovirt.engine.core.dal.dbbroker.auditloghandling.<START_MOD>AuditLogableBase removePortFailureEvent = new <END_MOD>org.ovirt.engine.core.dal.dbbroker.auditloghandling.<START_MOD>AuditLogableBase(); removePortFailureEvent.addCustomValue("NicName", nic.getName()); removePortFailureEvent.addCustomValue("NicId", nic.getId().toString()); removePortFailureEvent.addCustomValue("ProviderName", provider.getName()); auditLogDirector.log(removePortFailureEvent, AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED); } } }<END_MOD>
protected boolean validatePMAgentPort() { java.lang.Integer port = getParameters().getAgent().getPort(); if (port == null) { <START_MOD>java.util.HashMap<java.lang.String, java.lang.String> optionsMap = getParameters().getAgent().getOptionsMap(); <END_MOD>if (<START_MOD>(optionsMap != null) && (optionsMap.containsKey(org.ovirt.engine.core.bll.FenceAgentCommandBase.PORT))) { java.lang.String portStr = <END_MOD>getParameters().getAgent().getOptionsMap().<START_MOD>get<END_MOD>(org.ovirt.engine.core.bll.FenceAgentCommandBase.PORT)<START_MOD>; if (org.apache.commons.lang.StringUtils.isNumeric(<END_MOD>portStr<START_MOD>)) { port = java.lang.Integer.valueOf(portStr); } else { return false; } } else { return true; } } return (port == null) || <END_MOD>(org.ovirt.engine.core.common.utils.ValidationUtils.validatePort(port)); }
private void addDnsConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { boolean dnsResolverConfigurationSupported = org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.DnsResolverConfigurationSupported, this.cluster.getCompatibilityVersion()); if (!dnsResolverConfigurationSupported) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetworkAttachment = getNameServers(networkAttachment.getDnsResolverConfiguration()); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetwork = getNameServers(network.getDnsResolverConfiguration()); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfHost = getNameServers(reportedDnsResolverConfiguration); boolean engineDefineDnsConfiguration = (nameServersOfNetworkAttachment != null) || (nameServersOfNetwork != null); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> expectedNameServers = (nameServersOfNetworkAttachment != null) ? nameServersOfNetworkAttachment : nameServersOfNetwork; result.add(org.ovirt.engine.core.utils.DNS_CONFIGURATION, addressesAsString(nameServersOfHost), (engineDefineDnsConfiguration ? addressesAsString(expectedNameServers) : ""), (!(engineDefineDnsConfiguration && (!(java.util.Objects.equals(nameServersOfHost, expectedNameServers)))))); <START_MOD>boolean inSync = (!(isDefaultRouteNetwork)) || (iface.isIpv4DefaultRoute()); java.lang.String expected = (isDefaultRouteNetwork) ? java.lang.Boolean.toString(isDefaultRouteNetwork) : ""; <END_MOD>result.add(org.ovirt.engine.core.utils.DEFAULT_ROUTE, <START_MOD>java.lang.Boolean.toString(<END_MOD>iface.isIpv4DefaultRoute()<START_MOD>), expected, inSync<END_MOD>); }
private void processSingleClusterChanges(org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param) { final java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> setupNetworksParams = new java.util.ArrayList(createNetworkClustersToSetupNetworksParametersTransformer().transform(param.getAttachments(), param.getDetachments()<START_MOD>, param.getUpdates()<END_MOD>)); org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, setupNetworksParams); }
org.ovirt.engine.core.common.action.PersistentHostSetupNetworksParameters buildParameters(org.ovirt.engine.core.compat.Guid vdsId, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> labeledNetworksToBeAdded, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> labeledNetworksToBeRemoved, java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsByLabel<START_MOD>, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, org.ovirt.engine.core.common.businessentities.network.Network>> updatedNetworks<END_MOD>);
@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getUserProfileDao(); existingProfile = dao.get(new org.ovirt.engine.core.compat.Guid("38cb5663-96bc-485c-834a-cbbc03acc820")); deletableProfile = dao.get(new org.ovirt.engine.core.compat.Guid("38cb5663-96bc-485c-834a-cbbc03acc821")); newProfile = new org.ovirt.engine.core.common.businessentities.UserProfile(); newProfile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newProfile.setUserId(new org.ovirt.engine.core.compat.Guid("81940459-2ec4-4afa-bbaa-22549555293c")); newProfile.setSshPublicKeyId(new org.ovirt.engine.core.compat.Guid("67bc5484-d4eb-47ce-8b6a-e9624b70b676")); newProfile.setSshPublicKey("key3"); newProfile.setLoginName(<START_MOD>"user4@testportal.redhat.com@testportal.redhat.com"<END_MOD>); }
@org.junit.Test public void testUpdateLastAdminCheckStatus() { org.ovirt.engine.core.common.businessentities.aaa.DbUser nonAdminUser = dbFacade.getDbUserDao().getByUsernameAndDomain(<START_MOD>"user2@testportal.redhat.com"<END_MOD>, "testportal.redhat.com"); assertNotNull(nonAdminUser); assertFalse(nonAdminUser.isAdmin()); dao.updateLastAdminCheckStatus(nonAdminUser.getId()); nonAdminUser = dbFacade.getDbUserDao().get(nonAdminUser.getId()); assertFalse(nonAdminUser.isAdmin()); org.ovirt.engine.core.common.businessentities.Permission perms = new org.ovirt.engine.core.common.businessentities.Permission(); perms.setRoleType(RoleType.ADMIN); perms.setRoleId(org.ovirt.engine.core.dao.DbUserDaoTest.ADMIN_ROLE_TYPE_FROM_FIXTURE_ID); perms.setAdElementId(nonAdminUser.getId()); perms.setObjectId(org.ovirt.engine.core.dao.DbUserDaoTest.SYSTEM_OBJECT_ID); perms.setObjectType(VdcObjectType.System); dbFacade.getPermissionDao().save(perms); assertNotNull(dbFacade.getPermissionDao().get(perms.getId())); dao.updateLastAdminCheckStatus(nonAdminUser.getId()); nonAdminUser = dbFacade.getDbUserDao().get(nonAdminUser.getId()); assertTrue(nonAdminUser.isAdmin()); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); javax.servlet.http.HttpServletResponse res = ((javax.servlet.http.HttpServletResponse) (response)); if (org.ovirt.engine.core.aaa.filters.FiltersHelper.isAuthenticated(req)) { chain.doFilter(request, response); } else { @java.lang.SuppressWarnings("unchecked") java.util.List<java.lang.String> schemes = ((java.util.List<java.lang.String>) (req.getAttribute(FiltersHelper.Constants.REQUEST_SCHEMES_KEY))); if (schemes == null) { schemes = java.util.Collections.emptyList(); } java.util.Set<java.lang.String> allSchemes = new java.util.HashSet<>(schemes); if ((additionalSchemes) != null) { allSchemes.addAll(additionalSchemes); } for (java.lang.String scheme : allSchemes) { res.setHeader(FiltersHelper.Constants.HEADER_WWW_AUTHENTICATE, scheme); } <START_MOD>if (req.getContextPath().endsWith("/api")) { req.getRequestDispatcher(java.lang.String.format(ERROR_URL_FORMAT, defaultVersion, req.getAttribute(SessionConstants.SSO_AUTHENTICATION_ERR_MSG))).forward(req, <END_MOD>res<START_MOD>); } else { res<END_MOD>.sendError(HttpServletResponse.SC_UNAUTHORIZED); } }<START_MOD> }<END_MOD>
@java.lang.Override public void init(javax.servlet.FilterConfig filterConfig) throws javax.servlet.ServletException { for (java.lang.String paramName : java.util.Collections.list(filterConfig.getInitParameterNames())) { if (paramName.startsWith("scheme")) { additionalSchemes.add(filterConfig.getInitParameter(paramName)); } } <START_MOD>defaultVersion = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_API_DEFAULT_VERSION"); <END_MOD>}
public<START_MOD> static<END_MOD> boolean <START_MOD>isBackedByHugepages<END_MOD>(org.ovirt.engine.core.common.businessentities.VmBase vm) { if (((vm.getCustomProperties()) == null) || (vm.getCustomProperties().isEmpty())) { return false; } java.lang.String hugePage = <START_MOD>org.ovirt.engine.core.common.utils.HugePageUtils.<END_MOD>getHugePageSize(vm); if (hugePage == null) { return false; } try { java.lang.Integer.parseInt(hugePage); return true; } catch (java.lang.NumberFormatException e) { return false; } }
public<START_MOD> static<END_MOD> java.util.Map<java.lang.Integer, java.lang.Integer> getHugePages(org.ovirt.engine.core.common.businessentities.VmBase vm) { if (!(<START_MOD>org.ovirt.engine.core.common.utils.HugePageUtils.isBackedByHugepages<END_MOD>(vm))) { return java.util.Collections.<START_MOD>emptyMap()<END_MOD>; } int hugePageSize = java.lang.Integer.parseInt(<START_MOD>org.ovirt.engine.core.common.utils.HugePageUtils.<END_MOD>getHugePageSize(vm)); int fullPages = (vm.getMemSizeMb()) / hugePageSize; int lastPage = java.lang.Math.min(1, ((vm.getMemSizeMb()) % hugePageSize)); return java.util.Collections.singletonMap(hugePageSize, (fullPages + lastPage)); }
@org.junit.Test public void getHugeMemoryFitsIntoOneHugePage() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setCustomProperties("hugepages=1024"); base.setMemSizeMb(1024); assertThat(<START_MOD>org.ovirt.engine.core.common.<END_MOD>utils<START_MOD>.HugePageUtils<END_MOD>.getHugePages(base).size(), is(1)); assertThat(<START_MOD>org.ovirt.engine.core.common.<END_MOD>utils<START_MOD>.HugePageUtils<END_MOD>.getHugePages(base).get(1024), is(1)); }
@org.junit.Test public void getHugePagesNoHugePagesDefined() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setMemSizeMb(1025); assertThat(<START_MOD>org.ovirt.engine.core.common.<END_MOD>utils<START_MOD>.HugePageUtils<END_MOD>.getHugePages(base).size(), is(0)); }
@org.junit.Test public void getHugePagesMemoryDoesNotFitIntoOne() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setCustomProperties("hugepages=1024"); base.setMemSizeMb(1025); assertThat(<START_MOD>org.ovirt.engine.core.common.<END_MOD>utils<START_MOD>.HugePageUtils<END_MOD>.getHugePages(base).size(), is(1)); assertThat(<START_MOD>org.ovirt.engine.core.common.<END_MOD>utils<START_MOD>.HugePageUtils<END_MOD>.getHugePages(base).get(1024), is(2)); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>> modelProvider) { return new org.ovirt.engine.ui.common.<START_MOD>uicommon<END_MOD>.<START_MOD>model<END_MOD>.<START_MOD>GroupedTabData<END_MOD>(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.SubTabVolumePermissionPresenter.constants.volumePermissionSubTabLabel(), 3); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.disk.DiskSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.disks.DiskListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.storage.Disk>> modelProvider) { return new org.ovirt.engine.ui.common.<START_MOD>uicommon<END_MOD>.<START_MOD>model<END_MOD>.<START_MOD>GroupedTabData<END_MOD>(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.disk.SubTabDiskPermissionPresenter.constants.diskPermissionSubTabLabel(), 4); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.errata.ErrataSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider<org.ovirt.engine.ui.uicommonweb.models.EngineErrataListModel, org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.Erratum>> modelProvider) { return new org.ovirt.engine.ui.common.<START_MOD>uicommon<END_MOD>.<START_MOD>model<END_MOD>.<START_MOD>GroupedTabData<END_MOD>(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.errata.SubTabEngineErrataDetailsPresenter.constants.errataDetailsSubTabLabel(), 1); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.pool.PoolSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.pools.PoolListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.VmPool>> modelProvider) { return new org.ovirt.engine.ui.common.<START_MOD>uicommon<END_MOD>.<START_MOD>model<END_MOD>.<START_MOD>GroupedTabData<END_MOD>(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.pool.SubTabPoolPermissionPresenter.constants.poolPermissionSubTabLabel(), 2); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession, org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel, org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel> modelProvider) { return new org.ovirt.engine.ui.common.<START_MOD>uicommon<END_MOD>.<START_MOD>model<END_MOD>.<START_MOD>GroupedTabData<END_MOD>(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.SubTabVolumeGeoRepPresenter.constants.volumeGeoRepSubTabLabel(), 4); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.VmTemplate, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterTemplateListModel> modelProvider) { return new org.ovirt.engine.ui.common.<START_MOD>uicommon<END_MOD>.<START_MOD>model<END_MOD>.<START_MOD>GroupedTabData<END_MOD>(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageRegisterTemplatePresenter.constants.storageTemplateBackupSubTabLabel(), 3); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.StorageDomain>> modelProvider) { return new org.ovirt.engine.ui.common.<START_MOD>uicommon<END_MOD>.<START_MOD>model<END_MOD>.<START_MOD>GroupedTabData<END_MOD>(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStoragePermissionPresenter.constants.storagePermissionSubTabLabel(), 13); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.StorageDomainDR, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel> modelProvider) { return new org.ovirt.engine.ui.common.<START_MOD>uicommon<END_MOD>.<START_MOD>model<END_MOD>.<START_MOD>GroupedTabData<END_MOD>(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageDRPresenter.constants.storageDRSubTabLabel(), 12); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.DataCenterSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.StoragePool>> modelProvider) { return new org.ovirt.engine.ui.common.<START_MOD>uicommon<END_MOD>.<START_MOD>model<END_MOD>.<START_MOD>GroupedTabData<END_MOD>(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.SubTabDataCenterPermissionPresenter.constants.dataCenterPermissionSubTabLabel(), 5); }
java.lang.String getPrefixedKey(java.lang.String key) { return ((<START_MOD>org.ovirt.engine.ui.common.system.ClientStorageImpl.CLIENT_STORAGE_KEY_PREFIX<END_MOD>) + "_") + key; }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.template.TemplateSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.VmTemplate>> modelProvider) { return new org.ovirt.engine.ui.common.<START_MOD>uicommon<END_MOD>.<START_MOD>model<END_MOD>.<START_MOD>GroupedTabData<END_MOD>(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.template.SubTabTemplatePermissionPresenter.constants.templatePermissionSubTabLabel(), 5); }
<START_MOD>private java.util.Map<java.lang.Integer, java.lang.Integer> substractMaps(java.util.Map<java.lang.Integer, java.lang.Integer> from, java.util.Map<java.lang.Integer, java.lang.Integer> amount) { java.util.Map<java.lang.Integer, java.lang.Integer> result = new java.util.HashMap<>(from); for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> subs : amount.entrySet()) { result.compute(subs.getKey(), ( key, val) -> (val == null ? 0 : val) - (subs.getValue())); } return java.util.Collections.unmodifiableMap(result); }<END_MOD>
<START_MOD>public static java.util.Map<java.lang.Integer, java.lang.Integer> collectForHost(org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager manager, org.ovirt.engine.core.compat.Guid host) { java.util.Map<java.lang.Integer, java.lang.Integer> pageCount = new java.util.HashMap<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages resource : manager.pendingHostResources(host, org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages.class)) { pageCount.compute(resource.getPageSize(), ( hpsize, count) -> (count == null ? 0 : resource.getCount()) + (resource.getCount())); } return java.util.Collections.unmodifiableMap(pageCount); }<END_MOD>
<START_MOD>@java.lang.Override public int hashCode() { return java.util.Objects.hash(getHost(), pageSize); }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if (!(org.ovirt.engine.core.common.utils.HugePageUtils.isBackedByHugepages(vm.getStaticData()))) { return new java.util.ArrayList(hosts); } java.util.Map<java.lang.Integer, java.lang.Integer> requiredPages = org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(vm.getStaticData()); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> newHosts = new java.util.ArrayList(hosts.size()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { java.util.Map<java.lang.Integer, java.lang.Integer> availablePages = substractMaps(prepareHugePageMap(host), org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages.collectForHost(getPendingResourceManager(), host.getId())); if (!(requiredPages.entrySet().stream().allMatch(( pg) -> (availablePages.getOrDefault(pg.getKey(), 0)) >= (pg.getValue())))) { org.ovirt.engine.core.bll.scheduling.policyunits.HugePagesFilterPolicyUnit.log.debug("Host {} does not have enough free hugepages for VM {}", host.getId(), vm.getId()); messages.addMessage(host.getId(), EngineMessage.VAR__DETAIL__NOT_ENOUGH_HUGE_PAGES.name()); } else { newHosts.add(host); } } return newHosts; }<END_MOD>
<START_MOD>@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass()) != (o.getClass()))) { return false; } org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages that = ((org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages) (o)); return ((pageSize) == (that.pageSize)) && (java.util.Objects.equals(getHost(), that.getHost())); }<END_MOD>
<START_MOD>private org.gwtbootstrap3.client.ui.AnchorListItem createSelectionDropDown(com.google.gwt.safehtml.shared.SafeHtml currentName) { org.ovirt.engine.ui.common.view.OvirtBreadCrumbsView.OvirtAnchorListItem dropDown = new org.ovirt.engine.ui.common.view.OvirtBreadCrumbsView.OvirtAnchorListItem(); org.gwtbootstrap3.client.ui.Button exchangeButton = new org.gwtbootstrap3.client.ui.Button(); exchangeButton.setIcon(IconType.EXCHANGE); exchangeButton.addStyleName(org.ovirt.engine.ui.common.view.OvirtBreadCrumbsView.QUICK_SWITCH); org.gwtbootstrap3.client.ui.Anchor anchor = dropDown.getAnchor(); anchor.setText(currentName.asString()); anchor.getElement().getStyle().setFontSize(28, Unit.PX); anchor.addClickHandler(( e) -> { if (popover.isVisible()) { popover.hide(); } else { popover.show(); } }); anchor.add(exchangeButton); createPopover(anchor); dropDown.add(anchor); return dropDown; }<END_MOD>
<START_MOD>public void setCurrentSelectedName(com.google.gwt.safehtml.shared.SafeHtml name) { currentSelectedItemWidget = createSelectionDropDown(name); }<END_MOD>
<START_MOD>void setCurrentSelectedName(com.google.gwt.safehtml.shared.SafeHtml name);<END_MOD>
<START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getName(T item) { java.lang.String result = ""; if (item instanceof org.ovirt.engine.core.common.businessentities.Nameable) { result = ((org.ovirt.engine.core.common.businessentities.Nameable) (item)).getName(); } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(result); }<END_MOD>
<START_MOD>private java.util.List<T> getItemsAsList(M searchableListModel) { return new java.util.ArrayList(searchableListModel.getItems()); }<END_MOD>
<START_MOD>public void previousEntity() { M searchableListModel = listModelProvider.getModel(); T entity = ((T) (searchableListModel.getSelectedItem())); java.util.List<T> itemsAsList = getItemsAsList(searchableListModel); int currentIndex = itemsAsList.indexOf(entity); int newIndex = currentIndex - 1; if (newIndex < 0) { if ((searchableListModel.getSearchPreviousPageCommand().getIsExecutionAllowed()) && (searchableListModel.getSearchPreviousPageCommand().getIsAvailable())) { searchableListModel.executeCommand(searchableListModel.getSearchPreviousPageCommand()); updateToLastRow = true; } } else { selectionModel.setSelected(itemsAsList.get(newIndex), true); } }<END_MOD>
<START_MOD>public void nextEntity() { M searchableListModel = listModelProvider.getModel(); T entity = ((T) (searchableListModel.getSelectedItem())); java.util.List<T> itemsAsList = getItemsAsList(searchableListModel); int currentIndex = itemsAsList.indexOf(entity); int newIndex = currentIndex + 1; if (newIndex >= (itemsAsList.size())) { if ((searchableListModel.getSearchNextPageCommand().getIsExecutionAllowed()) && (searchableListModel.getSearchNextPageCommand().getIsAvailable())) { searchableListModel.executeCommand(searchableListModel.getSearchNextPageCommand()); updateToFirstRow = true; } } else { selectionModel.setSelected(itemsAsList.get(newIndex), true); } }<END_MOD>
<START_MOD>@java.lang.Override public void modelSelected(T model) { org.ovirt.engine.ui.common.presenter.OvirtBreadCrumbsPresenterWidget.getView().hidePopover(); selectionModel.setSelected(model, true); }<END_MOD>
<START_MOD>private void updateSelectedRows() { if (updateToFirstRow) { updateToFirstRow = false; java.util.Collection<T> items = listModelProvider.getModel().getItems(); if (items instanceof java.util.List) { final java.util.List<T> itemsAsList = ((java.util.List<T>) (items)); if (!(itemsAsList.isEmpty())) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { org.ovirt.engine.ui.common.presenter.T firstItem = itemsAsList.get(0); selectionModel.setSelected(firstItem, true); listModelProvider.getModel().setSelectedItem(firstItem); getView().setCurrentSelectedName(getView().getName(firstItem)); }); } } } else if (updateToLastRow) { updateToLastRow = false; java.util.Collection<T> items = listModelProvider.getModel().getItems(); if (items instanceof java.util.List) { final java.util.List<T> itemsAsList = ((java.util.List<T>) (items)); if (!(itemsAsList.isEmpty())) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { org.ovirt.engine.ui.common.presenter.T lastItem = itemsAsList.get(((itemsAsList.size()) - 1)); selectionModel.setSelected(lastItem, true); listModelProvider.getModel().setSelectedItem(lastItem); getView().setCurrentSelectedName(getView().getName(lastItem)); }); } } } if (((listModelProvider.getModel().getSelectedItem()) != null) && (showSelectedName)) { org.ovirt.engine.ui.common.presenter.OvirtBreadCrumbsPresenterWidget.getView().setCurrentSelectedName(org.ovirt.engine.ui.common.presenter.OvirtBreadCrumbsPresenterWidget.getView().getName(((T) (listModelProvider.getModel().getSelectedItem())))); } org.ovirt.engine.ui.common.presenter.OvirtBreadCrumbsPresenterWidget.getView().buildCrumbs(listModelProvider.getModel().getTitle(), listModelProvider.getModel().getApplicationPlace()); }<END_MOD>
<START_MOD>@java.lang.Override protected void onBind() { super.onBind(); M listModel = listModelProvider.getModel(); listModel.getSelectedItemChangedEvent().addListener(( ev, sender, args) -> updateSelectedRows()); listModel.getSelectedItemsChangedEvent().addListener(( ev, sender, args) -> updateSelectedRows()); }<END_MOD>
<START_MOD>private void createPopover(org.gwtbootstrap3.client.ui.Anchor anchor) { popover = new org.ovirt.engine.ui.common.widget.tooltip.OvirtPopover(anchor); popover.setTrigger(Trigger.MANUAL); popover.setPlacement(Placement.BOTTOM); popover.setContainer(anchor); if ((searchBox) == null) { searchBox = createSearchBox(); searchBox.addModelSelectedCallback(selectionCallback); } popover.addContent(searchBox, "searchPanel"); }<END_MOD>
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel)) { if (content != null) { actionPanel.setSearchPanel(content); actionPanel.setVisible(true); } } else <START_MOD>if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetBreadCrumbs)) { if (content != null) { breadCrumbsColumn.clear(); breadCrumbsColumn.add(content); } } else <END_MOD>{ super.setInSlot(slot, content); } }
@java.lang.Override public void onLoad() { super.onLoad(); keyHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(( event) -> { com.google.gwt.dom.client.NativeEvent nativeEvent = event.getNativeEvent(); if ((breadCrumbs) != null) { if ((event.getTypeInt()) == Event.ONKEYDOWN) { if (((nativeEvent.getCharCode()) == 's') || ((nativeEvent.getKeyCode()) == KeyCodes.KEY_S)) { if ((nativeEvent.getCtrlKey()) && (nativeEvent.getAltKey())) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.<START_MOD>getView().<END_MOD>toggleSearchWidget(); event.cancel(); } } else if ((!(this.breadCrumbs.<START_MOD>getView().<END_MOD>isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_DOWN)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.nextEntity(); event.cancel(); } else if ((!(this.breadCrumbs.<START_MOD>getView().<END_MOD>isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_UP)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.previousEntity(); event.cancel(); } } } }); if ((breadCrumbs) != null) { if ((breadCrumbsContainer.getWidgetCount()) == 0) { breadCrumbsContainer.add(breadCrumbs); } } }
<START_MOD>public void buildCrumbs(java.lang.String modelTitle, java.lang.String modelHref) { breadCrumbs.clear(); breadCrumbs.add(new org.gwtbootstrap3.client.ui.AnchorListItem("")); java.lang.String primaryLabel = menuLayout.getPrimaryGroupTitle(modelTitle); if (primaryLabel != null) { breadCrumbs.add(new org.gwtbootstrap3.client.ui.ListItem(primaryLabel)); } org.gwtbootstrap3.client.ui.AnchorListItem mainModelAnchor = new org.gwtbootstrap3.client.ui.AnchorListItem(modelTitle); mainModelAnchor.setHref(("#" + modelHref)); breadCrumbs.add(mainModelAnchor); if ((currentSelectedItemWidget) != null) { breadCrumbs.add(currentSelectedItemWidget); } }<END_MOD>
<START_MOD>public boolean hasActionPanelPresenterWidget() { return (getActionPanelPresenterWidget()) != null; }<END_MOD>
@java.lang.Override protected void onReveal() { super.onReveal(); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.setSubTabPanelVisible(false); getBreadCrumbs().clearActiveSubTab(); getTable().resetScrollPosition(); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setBreadCrumbs(getBreadCrumbs()); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel)) { if (content != null) { <START_MOD>if ((actionPanel) == null) { searchPanel = content; } else { <END_MOD>actionPanel.setSearchPanel(<START_MOD>((com.gwtplatform.mvp.client.PresenterWidget<?>) (content))); } } } else if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetActionPanel)) { if (content != null) { actionSearchPanel.add(content); this.actionPanel = ((org.ovirt.engine.ui.common.presenter.ActionPanelPresenterWidget<T, M>) (content)); if ((searchPanel) != null) { actionPanel.setSearchPanel(((com.gwtplatform.mvp.client.PresenterWidget<?>) (searchPanel))); } addResultPanel(actionPanel<END_MOD>); } } else { super.setInSlot(slot, content); } }
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { }
<START_MOD>@java.lang.Override<END_MOD> <START_MOD>public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (<END_MOD>org.ovirt.engine.ui.<START_MOD>webadmin<END_MOD>.<START_MOD>section<END_MOD>.<START_MOD>main<END_MOD>.<START_MOD>presenter.MainContentPresenter.TYPE_SetMainTabPanelContent))<END_MOD> <START_MOD>{ actionPanelContainer.add(content); } else if (slot == <END_MOD>(org.ovirt.engine.ui.common.<START_MOD>presenter<END_MOD>.<START_MOD>AbstractSubTabPresenter<END_MOD>.<START_MOD>TYPE_SetActionPanel)<END_MOD>) { <START_MOD>if<END_MOD> <START_MOD>(content<END_MOD> <START_MOD>!= null) { actionPanelContainer<END_MOD>.<START_MOD>add<END_MOD>(<START_MOD>content<END_MOD>); }<START_MOD> } else { super.setInSlot(slot, content); } }<END_MOD>
@java.lang.Override protected void onBind() { super.onBind(); org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel<?> tableSelectionModel = ((getTable()) != null) ? getTable().getSelectionModel() : null; if (tableSelectionModel != null) { registerHandler(tableSelectionModel.addSelectionChangeHandler(( event) -> { updateDetailModelSelection(); })); } initializeHandlers(); getSelectedMainItems().registerListener(this); itemChanged(getSelectedMainItems().getSelectedItem()); <START_MOD>setInSlot(org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel, actionPanelPresenterWidget); <END_MOD>}
<START_MOD>@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainContentPresenter.TYPE_SetMainTabPanelContent)) { container.insert(content, 0); } else if (slot == (org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel)) { if (content != null) { container.insert(content, 0); } } else { super.setInSlot(slot, content); } }<END_MOD>
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler(( event) -> { org.ovirt.engine.ui.webadmin.section.main.presenter.modelProvider.setSelectedItems(getSelectedItems()); fireTableSelectionChangeEvent(); if (!(isVisible())) { handlePlaceTransition(); } })); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getEventBus().addHandler(org.ovirt.engine.ui.uicommonweb.models.ApplySearchStringEvent.getType(), ( event) -> { applySearchString(event.getSearchString()); })); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setDetailPlaceTransitionHandler(this); java.lang.String searchString = searchStringCollector.getSearchStringPrefix(modelProvider.getModel().getSearchString()); if (searchString != null) { applySearchString(searchString); } <START_MOD>if (hasSearchPanelPresenterWidget()) { setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel, searchPanelPresenterWidget); } if (hasActionPanelPresenterWidget()) { setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetActionPanel, actionPanelPresenterWidget); } }<END_MOD>
<START_MOD>@java.lang.Override protected void initializeButtons() { org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.addActionButton(new org.ovirt.engine.ui.common.widget.action.UiCommandButtonDefinition<org.ovirt.engine.core.common.businessentities.Permission>(org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.getSharedEventBus(), org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.constants.addPermission()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getModel().getAddCommand(); } }); org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.addActionButton(new org.ovirt.engine.ui.common.widget.action.UiCommandButtonDefinition<org.ovirt.engine.core.common.businessentities.Permission>(org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.getSharedEventBus(), org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.constants.removePermission()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getModel().getRemoveCommand(); } }); }<END_MOD>
@org.junit.Test public void testUpdate() { existingDomain.setStorageName("UpdatedName"); existingDomain.setWipeAfterDelete(true); existingDomain.setWarningLowSpaceIndicator(4); existingDomain.setCriticalSpaceActionBlocker(8); existingDomain.setFirstMetadataDevice(FixturesTool.LUN_ID1); existingDomain.setVgMetadataDevice(FixturesTool.LUN_ID1); <START_MOD>existingDomain.setUseForBackup(true); <END_MOD>dao.update(existingDomain); org.ovirt.engine.core.common.businessentities.StorageDomainStatic after = dao.get(existingDomain.getId()); assertEquals(after, existingDomain); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getStorageDomainStaticDao(); dynamicDao = dbFacade.getStorageDomainDynamicDao(); diskImageDao = dbFacade.getDiskImageDao(); imageDao = dbFacade.getImageDao(); existingDomain = dao.get(new org.ovirt.engine.core.compat.Guid("72e3a666-89e1-4005-a7ca-f7548004a9ab")); newStaticDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); newStaticDomain.setStorageName("NewStorageDomain"); newStaticDomain.setStorage("fDMzhE-wx3s-zo3q-Qcxd-T0li-yoYU-QvVePl"); newStaticDomain.setStorageFormat(StorageFormatType.V1); newStaticDomain.setWipeAfterDelete(true); newStaticDomain.setWarningLowSpaceIndicator(3); newStaticDomain.setCriticalSpaceActionBlocker(9); newStaticDomain.setFirstMetadataDevice(FixturesTool.LUN_ID2); newStaticDomain.setVgMetadataDevice(FixturesTool.LUN_ID2); <START_MOD>newStaticDomain.setUseForBackup(FixturesTool.USE_FOR_BACKUP_FLAG); <END_MOD>}
<START_MOD>public void setUseForBackup(java.lang.Boolean useForBackup) { getStorageStaticData().setUseForBackup(useForBackup); }<END_MOD>
<START_MOD>public java.lang.Boolean getUseForBackup() { return getStorageStaticData().getUseForBackup(); }<END_MOD>
private static org.ovirt.engine.core.common.businessentities.StorageDomainStatic cloneStorageDomainStatic(org.ovirt.engine.core.common.businessentities.StorageDomainStatic instance) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic obj = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); obj.setConnection(instance.getConnection()); obj.setId(instance.getId()); obj.setStorage(instance.getStorage()); obj.setStorageDomainType(instance.getStorageDomainType()); obj.setStorageType(instance.getStorageType()); obj.setStorageName(instance.getStorageName()); obj.setFirstMetadataDevice(instance.getFirstMetadataDevice()); obj.setVgMetadataDevice(instance.getVgMetadataDevice()); obj.setDescription(instance.getDescription()); obj.setComment(instance.getComment()); obj.setStorageFormat(instance.getStorageFormat()); obj.setWipeAfterDelete(instance.getWipeAfterDelete()); obj.setDiscardAfterDelete(instance.isDiscardAfterDelete()); obj.setWarningLowSpaceIndicator(instance.getWarningLowSpaceIndicator()); obj.setCriticalSpaceActionBlocker(instance.getCriticalSpaceActionBlocker()); <START_MOD>obj.setUseForBackup(instance.getUseForBackup()); <END_MOD>return obj; }
private void assertGetResult(org.ovirt.engine.core.common.businessentities.StorageDomain result) { assertNotNull(result); assertEquals(existingDomain, result); assertEquals( committed disk size 8, result.getCommittedDiskSize()); assertEquals( actual disk size 4, result.getActualImagesSize()); assertEquals( first metadata device FixturesTool.LUN_ID_OF_DOMAIN_METADATA, result.getFirstMetadataDevice()); assertEquals( vg metadata device FixturesTool.LUN_ID_OF_DOMAIN_VG_METADATA, result.getVgMetadataDevice()); assertEquals( shared status StorageDomainSharedStatus.Active, result.getStorageDomainSharedStatus()); <START_MOD>assertEquals( backup flag status FixturesTool.USE_FOR_BACKUP_FLAG, result.getUseForBackup()); <END_MOD>}
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain) { return getCustomMapSqlParameterSource().addValue("id", domain.getId()).addValue("storage", domain.getStorage()).addValue("storage_name", domain.getStorageName()).addValue("storage_description", domain.getDescription()).addValue("storage_comment", domain.getComment()).addValue("storage_type", domain.getStorageType()).addValue("storage_domain_type", domain.getStorageDomainType()).addValue("storage_domain_format_type", domain.getStorageFormat()).addValue("last_time_used_as_master", domain.getLastTimeUsedAsMaster()).addValue("wipe_after_delete", domain.getWipeAfterDelete()).addValue("discard_after_delete", domain.isDiscardAfterDelete()).addValue("first_metadata_device", domain.getFirstMetadataDevice()).addValue("vg_metadata_device", domain.getVgMetadataDevice()).addValue("warning_low_space_indicator", domain.getWarningLowSpaceIndicator()).addValue("critical_space_action_blocker", domain.getCriticalSpaceActionBlocker())<START_MOD>.addValue("use_for_backup", domain.getUseForBackup())<END_MOD>; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, autoRecoverable, connection, name, storage, storageFormat, storagePoolType, storageType, description, sanState, wipeAfterDelete, discardAfterDelete, firstMetadataDevice, vgMetadataDevice, warningLowSpaceIndicator, criticalSpaceActionBlocker<START_MOD>, useForBackup<END_MOD>); }
<START_MOD>public void setUseForBackup(java.lang.Boolean useForBackup) { this.useForBackup = useForBackup; }<END_MOD>
<START_MOD>public java.lang.Boolean getUseForBackup() { return useForBackup; }<END_MOD>
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.StorageDomainStatic)) { return false; } org.ovirt.engine.core.common.businessentities.StorageDomainStatic other = ((org.ovirt.engine.core.common.businessentities.StorageDomainStatic) (obj)); return (((((((((((((((<START_MOD>(<END_MOD>java.util.Objects.equals(id, other.id)) && ((autoRecoverable) == (other.autoRecoverable))) && (java.util.Objects.equals(connection, other.connection))) && (java.util.Objects.equals(name, other.name))) && (java.util.Objects.equals(storage, other.storage))) && ((storageFormat) == (other.storageFormat))) && ((storagePoolType) == (other.storagePoolType))) && ((storageType) == (other.storageType))) && ((sanState) == (other.sanState))) && (java.util.Objects.equals(wipeAfterDelete, other.wipeAfterDelete))) && ((discardAfterDelete) == (other.discardAfterDelete))) && (java.util.Objects.equals(firstMetadataDevice, other.firstMetadataDevice))) && (java.util.Objects.equals(vgMetadataDevice, other.vgMetadataDevice))) && (java.util.Objects.equals(description, other.description))) && (java.util.Objects.equals(warningLowSpaceIndicator, other.warningLowSpaceIndicator))) && (java.util.Objects.equals(criticalSpaceActionBlocker, other.criticalSpaceActionBlocker))<START_MOD>) && (java.util.Objects.equals(useForBackup, other.useForBackup))<END_MOD>; }
<START_MOD>private boolean isFeatureSupportedAsAdditionalFeature(org.ovirt.engine.core.compat.Guid clusterId, java.lang.String featureName) { java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> addtionalFeaturesSupported = clusterFeatureDao.getSupportedFeaturesByClusterId(clusterId); for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature supportedFeature : addtionalFeaturesSupported) { if (supportedFeature.getFeature().getName().equalsIgnoreCase(featureName)) { return supportedFeature.isEnabled(); } } return false; }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.api.rsdl.ServiceTreeNode next() { currentPathSegment = pathIterator.next(); if (isID(currentPathSegment, node)) { node = node.getSubService("{id}"); } else if (node.containsSubService(currentPathSegment)) { node = node.getSubService(currentPathSegment); } else { throw new java.lang.IllegalArgumentException((("segment '" + (currentPathSegment)) + "' of path does not exist")); } return node; }<END_MOD>
<START_MOD>public org.ovirt.engine.api.restapi.resource.BaseBackendResource locateResource(java.lang.String href) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.NoSuchMethodException, java.lang.SecurityException, java.lang.reflect.InvocationTargetException { href = removePrefix(href); org.ovirt.engine.api.rsdl.ServiceTreeCrawler crawler = new org.ovirt.engine.api.rsdl.ServiceTreeCrawler(java.util.Arrays.asList(href.split("/"))); org.ovirt.engine.api.restapi.resource.BaseBackendResource resource = org.ovirt.engine.api.restapi.resource.BackendApiResource.getInstance(); org.ovirt.engine.api.rsdl.ServiceTreeNode node = null; while (crawler.hasNext()) { node = crawler.next(); if (node.isCollection()) { java.lang.reflect.Method method = resource.getClass().getMethod(node.getGetter()); resource = ((org.ovirt.engine.api.restapi.resource.BaseBackendResource) (method.invoke(resource))); } else { java.lang.reflect.Method method = resource.getClass().getMethod(node.getGetter(), java.lang.String.class); resource = ((org.ovirt.engine.api.restapi.resource.BaseBackendResource) (method.invoke(resource, crawler.getCurrentPathSegment()))); } } return resource; }<END_MOD>
<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlListReturn getVmLeaseInfo(java.lang.String leaseUUID, java.lang.String sdUUID);<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlListReturn getVmLeaseInfo(java.lang.String leaseUUID, java.lang.String sdUUID) { java.util.HashMap<java.lang.String, java.lang.Object> leaseDict = new java.util.HashMap<>(); leaseDict.put("lease_id", leaseUUID); leaseDict.put("sd_id", sdUUID); org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.info").withParameter("lease", leaseDict).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlListReturn(response); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.Object getReturnValue() { return domainXmlListReturn; }<END_MOD>
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.vdsbroker.vdsbroker.Status getReturnStatus() { return domainXmlListReturn.getStatus(); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeIrsBrokerCommand() { domainXmlListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.getIrsProxy().getVmLeaseInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.getParameters().getLeaseId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.getParameters().getStorageDomainId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.proceedProxyReturnValue(); }<END_MOD>
public static void cleanupSsoSession(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, org.ovirt.engine.core.sso.utils.SsoSession ssoSession, java.util.Set<java.lang.String> associateClientIds) { try { ssoContext.removeSsoSession(ssoSession.getAccessToken()); javax.servlet.http.HttpSession existingSession = ssoSession.getHttpSession(); if (existingSession == null) { org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.debug( existing Session found for token: {}, cannot invalidate session ssoSession.getAccessToken()); } else { org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.debug( Session found for token: {}, invalidating session ssoSession.getAccessToken()); existingSession.invalidate(); } org.ovirt.engine.core.sso.utils.TokenCleanupUtility.invokeAuthnLogout(ssoContext, ssoSession); org.ovirt.engine.core.sso.utils.SsoUtils.notifyClientsOfLogoutEvent(ssoContext, associateClientIds, ssoSession.getAccessToken()); } catch (java.lang.<START_MOD>IllegalStateException<END_MOD> ex) { org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.<START_MOD>debug<END_MOD>( to cleanup SsoSession: {} ex.getMessage()); <START_MOD>} catch (java.lang.Exception ex) { <END_MOD>org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.<START_MOD>error( to cleanup SsoSession: {} ex.getMessage()); org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.<END_MOD>debug("Exception", ex); } }
<START_MOD>public static void setNetworkVdsmName(org.ovirt.engine.core.common.businessentities.network.Network network) { java.lang.String networkName = network.getName(); org.ovirt.engine.core.compat.Guid networkId = network.getId(); if (((networkName.length()) <= (org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.HOST_NIC_NAME_LENGTH)) || (networkId == null)) { network.setVdsmName(networkName); } network.setVdsmName(("on" + (networkId.toString().replaceAll("[^a-zA-Z0-9]+", "").substring(0, ((org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.HOST_NIC_NAME_LENGTH) - 2))))); }<END_MOD>
public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("label", getLabel()).append("priority", getPriority()).<START_MOD>append("groupTitle", groupTitle).append("groupPriority", groupPriority).<END_MOD>toString(); }
<START_MOD>@java.lang.Override public com.gwtplatform.mvp.client.Tab addTab(com.gwtplatform.mvp.client.TabData tabData, java.lang.String historyToken) { com.gwtplatform.mvp.client.Tab tab = addTabImpl(tabData, historyToken); allTabs.put(tabData, tab); return tab; }<END_MOD>
@java.lang.Override public com.gwtplatform.mvp.client.Tab <START_MOD>addTabImpl<END_MOD>(com.gwtplatform.mvp.client.TabData tabData, java.lang.String historyToken) { org.ovirt.engine.ui.common.widget.tab.TabDefinition newTab = createNewTab(tabData); if (tabData instanceof org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) { menuLayout.addMenuItem(((org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) (tabData))); newTab.setTargetHistoryToken(historyToken); newTab.setId(((TabDefinition.TAB_ID_PREFIX) + historyToken)); newTab.setText(tabData.getLabel()); addTabDefinition(newTab, menuLayout.getMenuIndex(((org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) (tabData)))); } else { throw new java.lang.RuntimeException( non GroupedTabData } updateTab(newTab); if (((getActiveTabHistoryToken()) != null) && (getActiveTabHistoryToken().equals(historyToken))) { setActiveTab(newTab); } return newTab; }
<START_MOD>@java.lang.Override protected void onBind() { super.onBind(); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractSubTabPanelPresenter.getEventBus().addHandler(org.ovirt.engine.ui.common.presenter.SetTabVisibleEvent.getType(), ( event) -> { getView().setTabVisible(event.getTabData(), event.isTabVisible()); })); }<END_MOD>
@java.lang.Override public com.gwtplatform.mvp.client.Tab <START_MOD>addTabImpl<END_MOD>(com.gwtplatform.mvp.client.TabData tabData, java.lang.String historyToken) { org.ovirt.engine.ui.common.widget.tab.TabDefinition newTab = createNewTab(tabData); newTab.setTargetHistoryToken(historyToken); newTab.setText(tabData.getLabel()); int index = tabLayout.addGroupedTabData(tabData); addTabDefinition(newTab, index); updateTab(newTab); return newTab; }
<START_MOD>@java.lang.Override public void setTabVisible(com.gwtplatform.mvp.client.TabData tabData, boolean visible) { getTabPanel().getTabWidget(tabData).asWidget().setVisible(visible); }<END_MOD>
public void initializeHandlers() { modelProvider.getModel().getEntityChangedEvent().addListener(( ev, sender, args) -> { java.lang.Object entity = modelProvider.getModel().getEntity(); if (entity != null) { onDetailModelEntityChange(entity); } }); modelProvider.getModel().getPropertyChangedEvent().addListener(( ev, sender, args) -> { if (PropertyChangedEventArgs.PROGRESS.equals(args.propertyName)) { if ((modelProvider.getModel().getProgress()) != null) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { if ((getTable()) != null) { getTable().setLoadingState(LoadingState.LOADING); } }); } } <START_MOD>else if ("IsAvailable".equals(args.propertyName)) { org.ovirt.engine.ui.common.presenter.D detailModel = modelProvider.getModel(); org.ovirt.engine.ui.common.presenter.SetTabVisibleEvent.fire(this, resolveTabData(), detailModel.getIsAvailable()); } }); }<END_MOD>
<START_MOD>protected abstract com.gwtplatform.mvp.client.Tab addTabImpl(com.gwtplatform.mvp.client.TabData tabData, java.lang.String historyToken);<END_MOD>
private void <START_MOD>initSelectedSpiceImpl<END_MOD>() { org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel spiceModel = model.getVmConsoles().getConsoleModel(org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel.class); if (spiceModel == null) { return; } <START_MOD>spiceModel<END_MOD>.<START_MOD>initConsole<END_MOD>()<START_MOD>;<END_MOD> spiceModel.<START_MOD>initConsole<END_MOD>(); }
@java.lang.Override protected void executeVdsBrokerCommand() { buildVmData(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.log.info( {} createInfo); if (((boolean) (org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DomainXML<START_MOD>, vm.getCompatibilityVersion().getValue()<END_MOD>)))) { org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder builder = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(createInfo, vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getVds().getId(), getRunOncePayload(), org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getParameters().isVolatileRun())); java.lang.String libvirtXml = builder.build(); java.lang.String prettyLibvirtXml = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.prettify(libvirtXml); if (prettyLibvirtXml != null) { org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.log.info( {} prettyLibvirtXml); } createInfo.put("xml", libvirtXml); } vmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getBroker().create(createInfo); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(vm.getDynamicData(), vmReturn.vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getVds()); }
@org.ovirt.engine.ui.common.widget.table.cell.Template( <START_MOD>style= hidden; text-overflow: ellipsis; white-space: nowrap; class='{0}' <END_MOD>id=<START_MOD>'{1}'> + ( id='{2}'<END_MOD> href='javascript:;'<START_MOD>>{3}</a><END_MOD> <START_MOD>+<END_MOD> <START_MOD>"</div>"))<END_MOD> com.google.gwt.safehtml.shared.SafeHtml <START_MOD>containerAndLink<END_MOD>(java.lang.String <START_MOD>cellStyle, java.lang.String cellId, java.lang.String linkId, com.google.gwt.safehtml.shared.SafeHtml text<END_MOD>);
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, java.lang.String value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { if (value != null) { <START_MOD>com.google.gwt.safehtml.shared.SafeHtml safeValue = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(value); <END_MOD>sb.append(template.<START_MOD>containerAndLink<END_MOD>(<START_MOD>getStyleClass(<END_MOD>)<START_MOD>,<END_MOD> <START_MOD>getRenderElementId<END_MOD>(context<START_MOD>)<END_MOD>, <START_MOD>id<END_MOD>, <START_MOD>safeValue<END_MOD>)); } }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(cluster().<START_MOD>name()); or(mandatory(cluster().dataCenter().id()), mandatory(cluster().dataCenter().name())); optional(cluster().<END_MOD>cpu().type()); <START_MOD>optional(cluster().ballooningEnabled()); optional(cluster().comment()); optional(cluster().cpu().architecture()); optional(cluster().description()); optional(cluster().display().proxy()); optional(cluster().errorHandling().onError()); optional(cluster().fencingPolicy().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().threshold()); optional(cluster().fencingPolicy().skipIfSdActive().enabled()); optional(cluster().glusterService()); optional(cluster().haReservation()); optional(cluster().ksm().enabled()); optional(cluster().ksm().mergeAcrossNodes()); optional(cluster().maintenanceReasonRequired()); optional(cluster().memoryPolicy().overCommit().percent()); optional(cluster().memoryPolicy().transparentHugePages().enabled()); optional(cluster().threadsAsCores()); optional(cluster().trustedService()); optional(cluster().tunnelMigration()); optional(cluster().virtService()); or(optional(cluster().managementNetwork().id()), optional(cluster().managementNetwork<END_MOD>().name())); or(<START_MOD>optional(cluster().schedulingPolicy<END_MOD>().id()), <START_MOD>optional(cluster().schedulingPolicy<END_MOD>().name())); }
@java.lang.Override public void onLoad() { super.onLoad(); keyHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(( event) -> { com.google.gwt.dom.client.NativeEvent nativeEvent = event.getNativeEvent(); if ((breadCrumbs) != null) { if ((event.getTypeInt()) == Event.ONKEYDOWN) { if (((nativeEvent.getCharCode()) == 's') || ((nativeEvent.getKeyCode()) == KeyCodes.KEY_S)) { if ((nativeEvent.getCtrlKey()) && (nativeEvent.getAltKey())) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.toggleSearch(); event.cancel(); } } else if ((!(this.breadCrumbs.isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_DOWN)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.nextEntity(); event.cancel(); } else if ((!(this.breadCrumbs.isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_UP)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.previousEntity(); event.cancel(); } } } }); if ((<START_MOD>(<END_MOD>breadCrumbs) != null) <START_MOD>&&<END_MOD> ((breadCrumbsContainer.getWidgetCount()) == 0)<START_MOD>) { breadCrumbs.asWidget().getElement().getStyle().setHeight(83, Unit.PX);<END_MOD> breadCrumbsContainer.add(breadCrumbs); } <START_MOD>if (((actionPanel) != null) && ((mainActionPanel.getWidgetCount()) == 0)) { mainActionPanel.add(actionPanel); } }<END_MOD>
private void refreshReposIfNeeded(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType, <START_MOD>java.lang.Boolean<END_MOD> forceRefresh) { org.apache.commons.lang.mutable.MutableLong lastRefreshed = domainsLastRefreshedTime.computeIfAbsent(storageDomainId, ( k) -> new org.apache.commons.lang.mutable.MutableLong((-1))); if (<START_MOD>(shouldForceRefresh(<END_MOD>forceRefresh<START_MOD>))<END_MOD> || (shouldInvalidateCache(lastRefreshed.longValue()))) { synchronized(lastRefreshed) { if (forceRefresh || (shouldInvalidateCache(lastRefreshed.longValue()))) { boolean refreshSucceeded = refreshRepos(storageDomainId, imageType); lastRefreshed.setValue(java.lang.System.currentTimeMillis()); if (!refreshSucceeded) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IMAGES_NOT_SUPPORTED_ERROR); } } } } }
<START_MOD>@java.lang.Override public int compare(java.lang.Comparable a, java.lang.Comparable b) { if (a == null) { return b == null ? 0 : nullFirst ? -1 : 1; } else if (b == null) { return nullFirst ? 1 : -1; } else { return a.compareTo(b); } }<END_MOD>
private void updateMoveWarning(java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> disks) { java.util.List<java.lang.String> liveMigrateDisks = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : disks) { if (diskModel.isPluggedToRunningVm()) { liveMigrateDisks.add(diskModel.getAlias().getEntity()); } } if (!(liveMigrateDisks.isEmpty())) { setMessage(messages.moveDisksWhileVmRunning(<START_MOD>liveMigrateDisks<END_MOD>.<START_MOD>stream()<END_MOD>.<START_MOD>collect(java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>stream<END_MOD>.<START_MOD>Collectors<END_MOD>.<START_MOD>joining<END_MOD>(   } }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel model) { driver.edit(model); if ((model.isShowMemorySnapshotWarning()) && (!(model.isShowPartialSnapshotWarning()))) { com.google.gwt.dom.client.Style dialogStyle = getParent().getParent().getParent().getElement().getStyle(); dialogStyle.setWidth(450, Style.Unit.PX); dialogStyle.setHeight(240, Style.Unit.PX); } partialSnapshotWarningPanel.setVisible(model.isShowPartialSnapshotWarning()); memoryWarningPanel.setVisible(model.isShowMemorySnapshotWarning()); if ((model.getOldClusterVersionOfSnapshotWithMemory()) != null) { messageLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotPreviewPopupWidget.messages.snapshotContainsMemoryIncompatibleCluster(model.getOldClusterVersionOfSnapshotWithMemory().toString())); model.getMemory().setEntity(false); } horizontalSeparator.setVisible(((model.isShowPartialSnapshotWarning()) && (model.isShowMemorySnapshotWarning()))); vmDisksLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotPreviewPopupWidget.messages.vmDisksLabel(model.getVmDisks().size(), org.ovirt.engine.ui.uicommonweb.Linq.getDiskAliases(model.getVmDisks())<START_MOD>.stream().collect(java.util.stream.Collectors.joining(   snapshotDisksLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotPreviewPopupWidget.messages.snapshotDisksLabel(model.getDisks().size()<END_MOD>, <START_MOD>org.ovirt.engine.ui.uicommonweb.Linq.getDiskAliases<END_MOD>(model.getDisks()<START_MOD>).stream().collect(java.util.stream.Collectors.joining(<END_MOD>   }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.storage.Disk object) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(diskImage.getStoragesNames()<START_MOD>.stream().collect(java.util.stream.Collectors.joining(<END_MOD>   }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label label) { java.lang.String hostNames = getHostNames(label)<START_MOD>.stream().collect(java.util.stream.Collectors.joining(<END_MOD>   if (hostNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return hostNames; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label label) { java.lang.String vmNames = getVmNames(label)<START_MOD>.stream().collect(java.util.stream.Collectors.joining(<END_MOD>   if (vmNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return vmNames; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.storage.Disk object) { if ((object.getNumberOfVms()) < 2) { return null; } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(object.getVmNames()<START_MOD>.stream().collect(java.util.stream.Collectors.joining(<END_MOD>   }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.scheduling.AffinityGroup group) { java.lang.String vmNames = getVmNames(group)<START_MOD>.stream().collect(java.util.stream.Collectors.joining(<END_MOD>   if (vmNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityGroupsView.constants.noMembersAffinityGroup(); } return vmNames; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.scheduling.AffinityGroup group) { java.lang.String hostNames = getHostNames(group)<START_MOD>.stream().collect(java.util.stream.Collectors.joining(<END_MOD>   if (hostNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityGroupsView.constants.noMembersAffinityGroup(); } return hostNames; }
private void volumeSelectedItemChanged() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolumes().getSelectedItem(); java.lang.Boolean useLinkGlusterVolume = getLinkGlusterVolume().getEntity(); java.lang.String mountOptions = ""; if ((volume == null) || (!useLinkGlusterVolume)) { return; } java.util.Set<java.lang.String> addressSet = new java.util.LinkedHashSet<>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : volume.getBricks()) { addressSet.add((((brick.getNetworkId()) != null) && (!(brick.getNetworkAddress().isEmpty())) ? brick.getNetworkAddress() : brick.getServerName())); } java.util.List<java.lang.String> addressList = new java.util.ArrayList<>(); addressList.addAll(addressSet); if ((addressList.size()) >= 1) { addressList.remove(0); } if ((addressList.size()) > 0) { mountOptions = ((org.ovirt.engine.core.common.constants.StorageConstants.GLUSTER_BACKUP_SERVERS_MNT_OPTION) + "=") + (<START_MOD>addressList.stream().collect(java.util.stream.Collectors.joining(<END_MOD>":"))<START_MOD>)<END_MOD>; } getMountOptions().setEntity(mountOptions); }
private java.lang.String createActiveBondTooltipMessage(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { java.util.List<java.lang.String> bondProperties = new java.util.ArrayList<>(); java.lang.String adPartnerMac = java.util.Objects.toString(bond.getAdPartnerMac(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondAdPartnerMac(adPartnerMac)); java.lang.String adAggregatorId = java.util.Objects.toString(bond.getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondAdAggregatorId(adAggregatorId)); for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface nic : lineModel.getInterfaces()) { java.lang.String nicName = nic.getName(); java.lang.String nicAggregatorId = java.util.Objects.toString(nic.getInterface().getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondSlaveAdAggregatorId(nicName, nicAggregatorId)); } return <START_MOD>bondProperties.stream().collect(java.util.stream.Collectors.joining(<END_MOD>"\n")<START_MOD>)<END_MOD>; }
@java.lang.Override protected java.lang.String getWarning(java.util.List<java.lang.String> disks) { return messages.cannotMoveDisks(<START_MOD>disks<END_MOD>.<START_MOD>stream()<END_MOD>.<START_MOD>collect(java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>stream<END_MOD>.<START_MOD>Collectors<END_MOD>.<START_MOD>joining<END_MOD>(   }
public static org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk> getQoutaColumn(java.lang.String sortBy) { org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk> column = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) { java.lang.String value = ""; if ((object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); java.util.ArrayList<java.lang.String> quotaNamesArr = diskImage.getQuotaNames(); if (quotaNamesArr != null) { value = quotaNamesArr.<START_MOD>stream().collect(java.util.stream.Collectors.joining(  <END_MOD> } } return value; } }; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable(column, sortBy); }
private void showRemoveTemplateWithDependentVMConfirmationWindow(java.util.Map<java.lang.String, java.util.List<java.lang.String>> problematicVmNames) { java.util.List<java.lang.String> missingTemplatesFromVms = problematicVmNames.entrySet().stream().map(( e) -> org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.messages.templatesWithDependentVMs(e.getKey(), e.getValue()<START_MOD>.stream().collect(java.util.stream.Collectors.joining(<END_MOD>   setConfirmWindow(null); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.constants.removeBackedUpTemplatesWithDependentsVMTitle()); confirmModel.setHelpTag(HelpTag.remove_backed_up_template); confirmModel.setHashName("remove_backed_up_template"); confirmModel.setMessage(org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.constants.theFollowingTemplatesHaveDependentVmsBackupOnExportDomainMsg()); confirmModel.setItems(missingTemplatesFromVms); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("RemoveVmTemplates", this)); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand(org.ovirt.engine.ui.uicommonweb.models.storage.CANCEL_CONFIRMATION_COMMAND, this)); }
public static java.lang.String getDiskLabelList(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { if (disks.isEmpty()) { return null; } final java.util.List<java.lang.String> labels = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { labels.add(disk.getDiskAlias()); } return <START_MOD>labels<END_MOD>.<START_MOD>stream()<END_MOD>.<START_MOD>collect(java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>stream<END_MOD>.<START_MOD>Collectors<END_MOD>.<START_MOD>joining<END_MOD>(   }
private void updateProperties() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getEntity(); setImage(disk.getDiskStorageType().isInternal()); setLun(((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN))); setAlias(disk.getDiskAlias()); setDescription(disk.getDiskDescription()); setDiskId(disk.getId().toString()); if ((disk.getLastAlignmentScan()) != null) { java.lang.String lastScanDate = com.google.gwt.i18n.client.DateTimeFormat.getFormat( HH:mm setAlignment(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().diskAlignment(disk.getAlignment().toString(), lastScanDate)); } else { setAlignment(disk.getAlignment().toString()); } setWipeAfterDelete(disk.isWipeAfterDelete()); if (isImage()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); setDiskProfileName(diskImage.getDiskProfileNames()<START_MOD>.stream().collect(java.util.stream.Collectors.joining(<END_MOD>   setQuotaName(diskImage.getQuotaNames()<START_MOD>.stream().collect(java.util.stream.Collectors.joining(<END_MOD>   setQuotaAvailable((!(diskImage.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)))); } else if (isLun()) { org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk = ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (disk)); setLunId(lunDisk.getLun().getLUNId()); } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) { java.lang.String value = ""; if ((object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); java.util.ArrayList<java.lang.String> quotaNamesArr = diskImage.getQuotaNames(); if (quotaNamesArr != null) { value = quotaNamesArr.<START_MOD>stream().collect(java.util.stream.Collectors.joining(  <END_MOD> } } return value; }
private void updateCurrentValue(final java.util.List<T> value, boolean fireEvents) { lastValues = value; java.util.List<java.lang.String> renderedValues = new java.util.ArrayList<>(); for (T val : value) { renderedValues.add(org.ovirt.engine.ui.common.widget.editor.ListModelMultipleSelectListBox.getRenderer().render(java.util.Arrays.asList(val))); } java.lang.String renderedValue = renderedValues<START_MOD>.stream().collect(java.util.stream.Collectors.joining(<END_MOD>","<START_MOD>)<END_MOD>); if (org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(renderedValue)) { renderedValue = NBSP; } else { renderedValue = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(renderedValue); } ((com.google.gwt.dom.client.Element) (dropdownButton.getElement().getChild(0))).setInnerHTML(renderedValue); dropdownButton.setTitle(renderedValue); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> org.ovirt.engine.ui.common.widget.editor.listPanel.setSelected(value)); if (fireEvents) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, selectedItems()); lastValues = null; }); } else { lastValues = null; } }
protected void handleSetMessageQueryResult(org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult result) { setHelpTag(getRemoveQosHelpTag()); setHashName(getRemoveQosHashName()); int index = 0; int numberOfTimesUsedByDiskProfiles = 0; java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.queries.QueryReturnValue returnValue : result.getReturnValues()) { java.util.List<org.ovirt.engine.core.common.businessentities.Nameable> diskProfileEntities = returnValue.getReturnValue(); java.lang.String qosName = sourceListModel.getSelectedItems().get(index).getName(); if ((diskProfileEntities.size()) == 0) { list.add(qosName); } else { numberOfTimesUsedByDiskProfiles += diskProfileEntities.size(); java.util.List<java.lang.String> diskProfileNames = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Nameable diskProfileEntity : diskProfileEntities) { java.lang.String diskProfileName = diskProfileEntity.getName(); diskProfileNames.add(diskProfileName); } java.lang.String diskProfileNamesAsString = diskProfileNames<START_MOD>.stream().collect(java.util.stream.Collectors.joining(<END_MOD>   list.add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().removeStorageQoSItem(qosName, diskProfileNamesAsString)); } index++; } setMessage(getRemoveQosMessage(numberOfTimesUsedByDiskProfiles)); setItems(list); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); <START_MOD>if<END_MOD> <START_MOD>(!(<END_MOD>org.ovirt.engine.<START_MOD>core<END_MOD>.<START_MOD>compat<END_MOD>.<START_MOD>Regex.isMatch<END_MOD>(((java.lang.String) (value))<START_MOD>, org.ovirt.engine.ui.uicommonweb.validation.EmailValidation.pattern, RegexOptions.IgnoreCase<END_MOD>)<START_MOD>)<END_MOD>) { result.setSuccess(false); result.getReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().invalidEmailAddressInvalidReason()); } return result; }
@java.lang.Override protected java.lang.String getWarning(java.util.List<java.lang.String> disks) { return messages.cannotCopyDisks(<START_MOD>disks<END_MOD>.<START_MOD>stream()<END_MOD>.<START_MOD>collect(java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>stream<END_MOD>.<START_MOD>Collectors<END_MOD>.<START_MOD>joining<END_MOD>(   }
private java.lang.String getOuterClassNames() { java.util.Set<java.lang.String> classNames = new java.util.LinkedHashSet<>(); classNames.add(org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.Defaults.TEMPLATE_CLASS_OUTER); classNames.addAll(extraTooltipClassNames); return <START_MOD>classNames<END_MOD>.<START_MOD>stream()<END_MOD>.<START_MOD>collect(java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>stream<END_MOD>.<START_MOD>Collectors<END_MOD>.<START_MOD>joining<END_MOD>(   }
private void updateDisksWarningByImageStatus(java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> disks, org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus) { java.util.ArrayList<java.lang.String> disksAliases = getDisksAliasesByImageStatus(disks, imageStatus); if (!(disksAliases.isEmpty())) { generalWarningMessage.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget.messages.disksStatusWarning(org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance().translate(imageStatus), <START_MOD>disksAliases<END_MOD>.<START_MOD>stream()<END_MOD>.<START_MOD>collect(java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>stream<END_MOD>.<START_MOD>Collectors<END_MOD>.<START_MOD>joining<END_MOD>(   generalWarningMessage.setVisible(true); } }
private void updateProblematicDisk(org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = diskModel.getStorageDomain().getSelectedItem(); if (storageDomain == null) { return; } java.lang.String diskAlias = diskModel.getDisk().getDiskAlias(); if (storageDomain.getStorageType().isBlockDomain()) { if (!(problematicDisksForWarning.contains(diskAlias))) { problematicDisksForWarning.add(diskAlias); } } else { problematicDisksForWarning.remove(diskAlias); } if (!(problematicDisksForWarning.isEmpty())) { getDynamicWarning().setEntity(messages.moveDisksPreallocatedWarning(<START_MOD>problematicDisksForWarning.stream().collect(java.util.stream.Collectors.joining(  <END_MOD> getDynamicWarning().setIsAvailable(true); } else { getDynamicWarning().setIsAvailable(false); } }
public java.lang.String translateErrorTextSingle(java.lang.String errorMsg, java.lang.Boolean changeIfNotFound) { java.lang.String ret = ""; try { if ((errorMsg != null) && ((errorMsg.length()) > 0)) { java.lang.String errMsgCopy = errorMsg; if (!(isDynamicVariable(errorMsg))) { errorMsg = errorMsg.replace('.', '_'); } java.lang.String errorsString = errors.getString(errorMsg); if (errorsString != null) { ret = errorsString.replace("\n", "<br/>"); } else { if ((isDynamicVariable(errorMsg)) || (!changeIfNotFound)) { ret = errorMsg; } else { errorMsg = errMsgCopy; java.lang.String[] splitted = errorMsg.toLowerCase().split("_"); ret = <START_MOD>java.util.Arrays.stream(<END_MOD>splitted)<START_MOD>.collect(java.util.stream.Collectors.joining(  <END_MOD> } } } } catch (java.util.MissingResourceException e) { ret = errorMsg; } return ret; }
private java.lang.String composeExistingVmsWarningMessage(java.util.List<T> existingVms) { final java.util.List<java.lang.String> list = new java.util.ArrayList<>(); for (T t : existingVms) { list.add(extractNameFromEntity(t)); } return <START_MOD>list<END_MOD>.<START_MOD>stream()<END_MOD>.<START_MOD>collect(java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>stream<END_MOD>.<START_MOD>Collectors<END_MOD>.<START_MOD>joining<END_MOD>(   }
public static java.lang.String renderVmNamesList(java.util.List<java.lang.String> names) { return <START_MOD>names<END_MOD>.<START_MOD>stream()<END_MOD>.<START_MOD>collect(java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>stream<END_MOD>.<START_MOD>Collectors<END_MOD>.<START_MOD>joining<END_MOD>(   }
@java.lang.Override protected void onSelectedItemChanged() { super.onSelectedItemChanged(); java.util.List selectedItem = ((java.util.List) (getSelectedItem())); if (selectedItem != null) { java.util.ArrayList<java.lang.String> items = new java.util.ArrayList<>(); for (java.lang.Object item : selectedItem) { org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel i = ((org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel) (item)); items.add(i.getPartString()); } java.lang.String searchString = items.<START_MOD>stream().collect(java.util.stream.Collectors.joining(<END_MOD>)); if ((getPrefix()) != null) { searchString = searchString.substring(getPrefix().length()); } setSearchString(searchString); } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet object) { return object.getDnsServers()<START_MOD>.stream().collect(java.util.stream.Collectors.joining(<END_MOD>   }
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); final boolean shouldSetNewMacPoolOnAllClusters = newMacPoolId != null; if (shouldSetNewMacPoolOnAllClusters) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { <START_MOD>if (<END_MOD>moveMacs.<START_MOD>migrateMacsToAnotherMacPoolIfNeeded<END_MOD>(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext())<START_MOD>) { cluster.setMacPoolId(newMacPoolId); clusterDao.update(cluster); } } } }<END_MOD>
public <START_MOD>boolean migrateMacsToAnotherMacPoolIfNeeded<END_MOD>(org.ovirt.engine.core.common.businessentities.Cluster sourceCluster, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceCluster); java.util.Objects.requireNonNull(targetMacPoolId); <START_MOD>java.util.Objects.requireNonNull(commandContext); <END_MOD>org.ovirt.engine.core.compat.Guid sourceMacPoolId = <START_MOD>java.util.Objects.requireNonNull(<END_MOD>sourceCluster.getMacPoolId()<START_MOD>)<END_MOD>; org.ovirt.engine.core.compat.Guid clusterId = <START_MOD>java.util.Objects.requireNonNull(<END_MOD>sourceCluster.getId()<START_MOD>); boolean macPoolChanged = !<END_MOD>(sourceMacPoolId<START_MOD>.equals(targetMacPoolId)<END_MOD>); if (<START_MOD>macPoolChanged<END_MOD>) { java.util.List<java.lang.String> macsToMigrate = vmNicDao.getAllMacsByClusterId(clusterId); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macsToMigrate, false, commandContext); } <START_MOD>return macPoolChanged; <END_MOD>}
<START_MOD>private org.ovirt.engine.core.bll.ValidationResult canMigrateMacsToAnotherMacPool(<END_MOD>org.ovirt.engine.core.compat.Guid targetMacPoolId, java.util.List<java.lang.String> macsToMigrate<START_MOD>) { java.util.Objects.requireNonNull(targetMacPoolId); java.util.Objects.requireNonNull(macsToMigrate);<END_MOD> org.ovirt.engine.core.bll.<START_MOD>network.macpool.MacPool targetPool = poolPerCluster.getMacPoolById(targetMacPoolId); if (targetPool.isDuplicateMacAddressesAllowed()<END_MOD>) { <START_MOD>return ValidationResult.VALID; } java.util.Map<java.lang.String, java.lang.Long> occurrenceCount = <END_MOD>macsToMigrate<START_MOD>.stream().collect(java.util.stream.Collectors.groupingBy(java.util.function.Function.identity(), java.util.stream.Collectors.counting()));<END_MOD> java.util.List<java.lang.String> <START_MOD>problematicMacs = macsToMigrate.stream().distinct().filter(( mac) -> (<END_MOD>targetPool.<START_MOD>isMacInUse(mac)) || ((occurrenceCount.get(mac)) > 1)).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = ACTION_TYPE_FAILED_CANNOT_MIGRATE_MACS_DUE_TO_DUPLICATES; java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, problematicMacs); return org.ovirt.engine.core.bll.ValidationResult.failWith(engineMessage, replacements).when((!(problematicMacs<END_MOD>.isEmpty()<START_MOD>)<END_MOD>)); }
<START_MOD>@org.junit.Test public void canMigrateMacsToAnotherMacPoolWhenThereAreThereWontBeDuplicates() { when(vmNicDao.getAllMacsByClusterId(cluster.getId())).thenReturn(macsToMigrate); assertThat(underTest.canMigrateMacsToAnotherMacPool(cluster, targetMacPoolId), isValid()); }<END_MOD>
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = <START_MOD>getNewMacPoolId<END_MOD>(); if (shouldSetNewMacPoolOnAllClusters<START_MOD>(newMacPoolId)<END_MOD>) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { moveMacs.migrateMacsToAnotherMacPoolIfNeeded(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()); cluster.setMacPoolId(newMacPoolId); clusterDao.update(cluster); } } }
public void migrateMacsToAnotherMacPoolIfNeeded(org.ovirt.engine.core.common.businessentities.Cluster sourceCluster, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceCluster); java.util.Objects.requireNonNull(targetMacPoolId); java.util.Objects.requireNonNull(commandContext); org.ovirt.engine.core.compat.Guid sourceMacPoolId = java.util.Objects.requireNonNull(sourceCluster.getMacPoolId()); org.ovirt.engine.core.compat.Guid clusterId = java.util.Objects.requireNonNull(sourceCluster.getId()); boolean macPoolChanged = !(sourceMacPoolId.equals(targetMacPoolId)); if (macPoolChanged) { java.util.List<java.lang.String> macsToMigrate = <START_MOD>getMacsForClusterId<END_MOD>(clusterId); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macsToMigrate, commandContext); } }
<START_MOD>@org.junit.Test public void testGetMacsFromAllClusters() { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = java.util.Arrays.asList(createClusterAndMockMacs(sourceMacPoolId, java.util.Collections.singletonList("mac1")), createClusterAndMockMacs(targetMacPoolId, java.util.Collections.singletonList("mac2")), createClusterAndMockMacs(sourceMacPoolId, java.util.Collections.singletonList("mac1")), createClusterAndMockMacs(targetMacPoolId, java.util.Collections.singletonList("mac2"))); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = ACTION_TYPE_FAILED_CANNOT_MIGRATE_MACS_DUE_TO_DUPLICATES; java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, java.util.Collections.singleton("mac1")); assertThat(underTest.canMigrateMacsToAnotherMacPool(clusters, targetMacPoolId), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(engineMessage, replacements)); }<END_MOD>
private void initNetworkList(org.ovirt.engine.core.compat.Guid dataCenterId) { startProgress(); org.ovirt.engine.core.common.queries.IdQueryParameters queryParams = new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(QueryType.GetAllNetworks, queryParams, new org.ovirt.engine.ui.uicommonweb.models.profiles.AsyncQuery<org.ovirt.engine.core.common.queries.QueryReturnValue>(( returnValue) -> { Collection<org.ovirt.engine.core.common.businessentities.network.Network> networks = returnValue.getReturnValue(); <START_MOD>org.ovirt.engine.core.common.businessentities.network.Network oldSelectedNetwork = <END_MOD>getNetwork().<START_MOD>getSelectedItem(); getNetwork().<END_MOD>setItems(networks); updateNetworks(networks); <START_MOD>if (oldSelectedNetwork != null) { org.ovirt.engine.core.common.businessentities.network.Network newSelectedNetwork = networks.stream().filter(( network) -> java.util.Objects.equals(network.getId(), oldSelectedNetwork.getId())).findFirst().get(); if (!(getNetwork().getSelectedItem().getId().equals(newSelectedNetwork.getId()))) { getNetwork().setSelectedItem(newSelectedNetwork); } } <END_MOD>stopProgress(); })); }
<START_MOD>protected void createAdditionalInfoPanel() { additionalInfoPanel.add(createDetailAdditionalInfo()); additionalInfoPanel.add(createStatisticsAdditionalInfo()); }<END_MOD>
<START_MOD>@java.lang.Override public void restoreStateFromViewItem(org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel> originalViewItem) { org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListViewItem original = ((org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListViewItem) (originalViewItem)); setVlanExpanded(original.getVlanState()); setStatisticsExpanded(original.getStatisticsState()); }<END_MOD>
<START_MOD>@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createBodyPanel(java.lang.String header, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel entity) { descriptionHeaderPanel.getElement().setInnerHTML(header); descriptionHeaderPanel.add(createLinkStatusPanel(isInterfaceUp())); createAdditionalInfoPanel(); return bodyPanel; }<END_MOD>
<START_MOD>@java.lang.Override protected void hideAllDetails() { detailExpand.toggleExpanded(false); statisticsExpand.toggleExpanded(false); }<END_MOD>
<START_MOD>public boolean getStatisticsState() { return statisticsExpand.isActive(); }<END_MOD>
<START_MOD>@java.lang.Override<END_MOD> <START_MOD>protected com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt.user.client<END_MOD>.ui.<START_MOD>IsWidget createBodyPanel(java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String<END_MOD> <START_MOD>header, <END_MOD>org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel <START_MOD>entity<END_MOD>) { com.google.gwt.<START_MOD>user<END_MOD>.client.<START_MOD>ui.IsWidget<END_MOD> <START_MOD>result<END_MOD> = <START_MOD>super.createBodyPanel<END_MOD>(<START_MOD>header,<END_MOD> <START_MOD>entity<END_MOD>); <START_MOD>statusPanel<END_MOD>.<START_MOD>add(getInterfaceNamesPanel(entity<END_MOD>.<START_MOD>getInterfaces<END_MOD>())); return <START_MOD>result<END_MOD>; }
<START_MOD>private com.google.gwt.user.client.ui.IsWidget createStatisticsAdditionalInfo() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); panel.addStyleName(PatternflyConstants.PF_LIST_VIEW_ADDITIONAL_INFO_ITEM); statisticsExpand = new org.ovirt.engine.ui.common.widget.listgroup.ExpandableListViewItem(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListViewItem.constants.statistics(), null); getClickHandlerRegistrations().add(statisticsExpand.addClickHandler(this)); panel.add(statisticsExpand); return panel; }<END_MOD>
private java.lang.String createActiveBondTooltipMessage(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { java.util.List<java.lang.String> bondProperties = new java.util.ArrayList<>(); java.lang.String adPartnerMac = java.util.Objects.toString(bond.getAdPartnerMac(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.<START_MOD>HostNetworkInterfaceBondedListViewItem<END_MOD>.messages.bondAdPartnerMac(adPartnerMac)); java.lang.String adAggregatorId = java.util.Objects.toString(bond.getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.<START_MOD>HostNetworkInterfaceBondedListViewItem<END_MOD>.messages.bondAdAggregatorId(adAggregatorId)); for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface nic : lineModel.getInterfaces()) { java.lang.String nicName = nic.getName(); java.lang.String nicAggregatorId = java.util.Objects.toString(nic.getInterface().getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.<START_MOD>HostNetworkInterfaceBondedListViewItem<END_MOD>.messages.bondSlaveAdAggregatorId(nicName, nicAggregatorId)); } return org.ovirt.engine.ui.uicompat.external.StringUtils.join(bondProperties, "\n"); }
private boolean isAdPartnerMacValid(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.core.common.businessentities.VDS vds) { java.lang.String partnerMac = bond.getAdPartnerMac(); boolean isAdPartnerMacEmpty = ((partnerMac == null) || (partnerMac.isEmpty())) || (partnerMac.equals(org.ovirt.engine.ui.webadmin.widget.host.<START_MOD>HostNetworkInterfaceBondedListViewItem<END_MOD>.INVALID_AD_PARTNER_MAC)); boolean isIfcUp = InterfaceStatus.UP.equals(bond.getStatistics().getStatus()); boolean isBond4 = BondMode.BOND4.equals(org.ovirt.engine.core.common.businessentities.network.BondMode.parseBondMode(bond.getBondOptions())); boolean isAdPartnerSupportedForCluster = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.AdPartnerMacSupported, vds.getClusterCompatibilityVersion().getValue()))); return (((!isAdPartnerMacEmpty) || (!isIfcUp)) || (!isBond4)) || (!isAdPartnerSupportedForCluster); }
<START_MOD>@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createIcon() { org.ovirt.engine.core.common.businessentities.network.InterfaceStatus interfaceStatus = getEntity().getInterface().getStatistics().getStatus(); com.google.gwt.safehtml.shared.SafeHtml bondPropertiesMessage = createBondTooltipMessage(getEntity(), interfaceStatus); com.google.gwt.safehtml.shared.SafeHtml bondMessage = org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.templates.italicWordWrapMaxWidthWithBoldTitle(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.constants.bondProperties(), bondPropertiesMessage); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip iconTooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(new org.ovirt.engine.ui.common.widget.uicommon.network.BondedNetworkIcon(getEntity())); iconTooltip.setHtml(bondMessage); iconPanel.add(iconTooltip); return iconPanel; }<END_MOD>
<START_MOD>protected<END_MOD> <START_MOD>org<END_MOD>.<START_MOD>gwtbootstrap3<END_MOD>.client.ui.<START_MOD>constants.ColumnSize<END_MOD> <START_MOD>calculateColSize<END_MOD>(<START_MOD>int<END_MOD> <START_MOD>itemCount<END_MOD>) { <START_MOD>if ((itemCount % 4) == 3) { return org<END_MOD>.<START_MOD>gwtbootstrap3<END_MOD>.client.ui.<START_MOD>constants.ColumnSize.MD_2;<END_MOD> <START_MOD>}<END_MOD> <START_MOD>return<END_MOD> <START_MOD>org<END_MOD>.<START_MOD>gwtbootstrap3<END_MOD>.client.ui.<START_MOD>constants<END_MOD>.<START_MOD>ColumnSize<END_MOD>.<START_MOD>MD_2<END_MOD>; }
void initTable() { pfActionPanel.addButtonToActionGroup(table.addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel>(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.setupHostNetworksInterface()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getSetupNetworksCommand(); } })); pfActionPanel.addButtonToActionGroup(table.addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel>(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.saveNetConfigInterface()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getSaveNetworkConfigCommand(); } })); pfActionPanel.addButtonToActionGroup(table.addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel>(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.syncAllHostNetworks()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getSyncAllHostNetworksCommand(); } })); <START_MOD>}<END_MOD>
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createBodyPanel(java.lang.String header, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { <START_MOD>descriptionHeaderPanel<END_MOD>.getElement().setInnerHTML(header); statusPanel.add(createLinkStatusPanel((networkInterface != null ? networkInterface.isLinked() : false))); statusPanel.add(createCardPluggedStatusPanel((networkInterface != null ? networkInterface.isPlugged() : false))); createAdditionalInfoPanel(); return bodyPanel; }
private void updateInfoPanel() { if ((getModel().getItems()) instanceof java.util.List) { clearClickHandlers(); selectionModel.clear(); org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.clear(); int i = 0; <START_MOD>java.util.List<<END_MOD>org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T><START_MOD>> newCurrentState = new java.util.ArrayList<>(); for (T item : getModel().getItems()) { org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T><END_MOD> newItem = creator.createListViewItem(item); handlerRegistrations.add(newItem.addClickHandler(this)); if (i < (currentState.size())) { restoreState(currentState.get(i), newItem); if (i == (selectedIndex)) { newItem.addStyleName(Styles.ACTIVE); } } <START_MOD>newCurrentState.<END_MOD>add(newItem); <START_MOD>add(newItem.asListGroupItem()); <END_MOD>i++; } <START_MOD>currentState.clear(); currentState = newCurrentState; <END_MOD>if ((org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.getWidgetCount()) == 0) { org.gwtbootstrap3.client.ui.ListGroupItem noItems = new org.gwtbootstrap3.client.ui.ListGroupItem(); noItems.addStyleName(Styles.LIST_GROUP_ITEM_HEADING); noItems.setText(org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.constants.noItemsToDisplay()); add(noItems); } restoreSelection(selectedIndex); } }
<START_MOD>public void setStatisticsExpanded(boolean value) { statisticsExpand.toggleExpanded(value); toggleExpanded(); }<END_MOD>
<START_MOD>private boolean isInSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails) { boolean managed = false; boolean sync = false; if (networkImplementationDetails != null) { managed = networkImplementationDetails.isManaged(); sync = networkImplementationDetails.isInSync(); } return managed && (!sync); }<END_MOD>
<START_MOD>public boolean getVlanState() { return detailExpand.isActive(); }<END_MOD>
<START_MOD>protected com.google.gwt.user.client.ui.IsWidget createLinkStatusPanel(boolean isLinked) { return new org.ovirt.engine.ui.common.widget.uicommon.vm.LinkStatusPanel(isLinked); }<END_MOD>
<START_MOD>private com.google.gwt.user.client.ui.IsWidget createDetailAdditionalInfo() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); panel.addStyleName(PatternflyConstants.PF_LIST_VIEW_ADDITIONAL_INFO_ITEM); detailExpand = new org.ovirt.engine.ui.common.widget.listgroup.ExpandableListViewItem(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListViewItem.constants.details(), null); getClickHandlerRegistrations().add(detailExpand.addClickHandler(this)); panel.add(detailExpand); return panel; }<END_MOD>
private void setIcon(java.lang.String iconCss<START_MOD>) { if (!(org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(iconCss))<END_MOD>) { org.gwtbootstrap3.client.ui.html.Span iconPanel = new org.gwtbootstrap3.client.ui.html.Span(); iconPanel.addStyleName(getBaseStyle(iconCss)); iconPanel.addStyleName(iconCss); add(iconPanel); }<START_MOD> }<END_MOD>
<START_MOD>public void setVlanExpanded(boolean value) { detailExpand.toggleExpanded(value); toggleExpanded(); }<END_MOD>
private com.google.gwt.user.client.ui.IsWidget createLinkStatusPanel(boolean isLinked) { <START_MOD>return<END_MOD> new org.ovirt.engine.ui.common.widget.uicommon.vm.<START_MOD>LinkStatusPanel<END_MOD>(isLinked); }
<START_MOD>private com.google.gwt.user.client.ui.IsWidget getInterfaceNamesPanel(java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface> bondInterfaces) { com.google.gwt.user.client.ui.FlowPanel interfaceNamesPanel = new com.google.gwt.user.client.ui.FlowPanel(); interfaceNamesPanel.addStyleName(PatternflyConstants.PF_LIST_VIEW_DESCRIPTION); for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface : bondInterfaces) { com.google.gwt.user.client.ui.FlowPanel hostInterfacePanel = new com.google.gwt.user.client.ui.FlowPanel(); hostInterfacePanel.getElement().setInnerSafeHtml(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(hostInterface.getName())); hostInterfacePanel.add(createLinkStatusPanel(((hostInterface.getStatus()) == (org.ovirt.engine.core.common.businessentities.network.InterfaceStatus.UP)))); interfaceNamesPanel.add(hostInterfacePanel); } return interfaceNamesPanel; }<END_MOD>
private void updateProperties() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getEntity(); setImage(disk.getDiskStorageType().isInternal()); setLun(((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN))); setAlias(disk.getDiskAlias()); setDescription(disk.getDiskDescription()); setDiskId(disk.getId().toString()); if ((disk.getLastAlignmentScan()) != null) { java.lang.String lastScanDate = com.google.gwt.i18n.client.DateTimeFormat.getFormat( HH:mm setAlignment(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().diskAlignment(disk.getAlignment().toString(), lastScanDate)); } else { setAlignment(disk.getAlignment().toString()); } setWipeAfterDelete(disk.isWipeAfterDelete()); if (isImage()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); setDiskProfileName(<START_MOD>safeJoin(<END_MOD>diskImage.getDiskProfileNames())); setQuotaName(<START_MOD>safeJoin(<END_MOD>diskImage.getQuotaNames())); setQuotaAvailable((!(diskImage.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)))); } else if (isLun()) { org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk = ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (disk)); setLunId(lunDisk.getLun().getLUNId()); } }
<START_MOD>@java.lang.Override public java.util.Map<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.Model> getWindowProperties() { java.util.Map<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.Model> map = super.getWindowProperties(); map.put(org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.DISK_WINDOW, getDiskWindow()); return map; }<END_MOD>
private void registerHandlers() { model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ((<START_MOD>Model.PROP_WINDOW<END_MOD>.equals(propName)) && ((model.getWindow()) == null)) { if (model.getSpecificClusterQuota().getEntity()) { quotaClusterTable.asEditor().edit(model.getAllDataCenterClusters()); } else { quotaClusterTable.asEditor().edit(model.getQuotaClusters()); } if (model.getSpecificStorageQuota().getEntity()) { quotaStorageTable.asEditor().edit(model.getAllDataCenterStorages()); } else { quotaStorageTable.asEditor().edit(model.getQuotaStorages()); } } } }); model.getSpecificClusterQuota().getEntityChangedEvent().addListener(clusterListener); model.getSpecificStorageQuota().getEntityChangedEvent().addListener(storageListener); }
<START_MOD>@java.lang.Override public void setWindowProperty(java.lang.String propName, org.ovirt.engine.ui.uicommonweb.models.Model value) { if (org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.DISK_WINDOW.equals(propName)) { setDiskWindow(value); } else { super.setWindowProperty(propName, value); } }<END_MOD>
public void addDialogModelListener(final M model) { <START_MOD>init(model<END_MOD>); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(model, propName, windowPopupInstances.get(propName), false); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(model, propName, confirmWindowPopupInstances.get(propName), true); } } }); }
@java.lang.Override protected void onReveal() { org.ovirt.engine.ui.uicompat.Event<org.ovirt.engine.ui.uicompat.EventArgs> entityChangedEvent = getModel().getDiskViewType().getEntityChangedEvent(); if (!(entityChangedEvent.getListeners().contains(getView().getDiskTypeChangedEventListener()))) { entityChangedEvent.addListener(getView().getDiskTypeChangedEventListener()); } <START_MOD>org.ovirt.engine.ui.uicompat.Event<org.ovirt.engine.ui.uicompat.EventArgs> diskContentTypeEntityChangedEvent = getModel().getDiskContentType().getEntityChangedEvent(); if (!(diskContentTypeEntityChangedEvent.getListeners().contains(getView().getDiskTypeChangedEventListener()))) { diskContentTypeEntityChangedEvent.addListener(getView().getDiskContentTypeChangedEventListener()); } <END_MOD>super.onReveal(); getView().handleQuotaColumnVisibility(); }
void initTableOverhead() { disksViewRadioGroup = new org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewRadioGroup(); disksViewRadioGroup.setClickHandler(clickHandler); <START_MOD>disksContentTypeRadioGroup = new org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup(); disksContentTypeRadioGroup.setClickHandler(( event) -> { if (((com.google.gwt.user.client.ui.RadioButton) (event.getSource())).getValue()) { getMainModel().getDiskContentType().setEntity(disksContentTypeRadioGroup.getDiskContentType()); } }); com.google.gwt.user.client.ui.HorizontalPanel overheadPanel = new com.google.gwt.user.client.ui.HorizontalPanel(); overheadPanel.add(disksViewRadioGroup); overheadPanel.add(disksContentTypeRadioGroup); <END_MOD>getTable().setTableOverhead(<START_MOD>overheadPanel<END_MOD>); }
<START_MOD>public void setClickHandler(com.google.gwt.event.dom.client.ClickHandler clickHandler) { for (com.google.gwt.user.client.ui.RadioButton button : buttonToType.keySet()) { button.addClickHandler(clickHandler); } }<END_MOD>
<START_MOD>private com.google.gwt.user.client.ui.Widget getRadioGroupPanel() { buttonToType = new java.util.LinkedHashMap(); com.google.gwt.user.client.ui.RadioButton allButton = new com.google.gwt.user.client.ui.RadioButton("diskContentTypeView"); buttonToType.put(allButton, null); allButton.setText(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.constants.allDisksLabel()); for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { com.google.gwt.user.client.ui.RadioButton button = new com.google.gwt.user.client.ui.RadioButton("diskContentTypeView"); buttonToType.put(button, contentType); } com.google.gwt.user.client.ui.FlowPanel buttonsPanel = new com.google.gwt.user.client.ui.FlowPanel(); buttonsPanel.getElement().getStyle().setProperty("marginLeft", "auto"); buttonsPanel.getElement().getStyle().setProperty("marginRight", "auto"); for (com.google.gwt.user.client.ui.RadioButton button : buttonToType.keySet()) { button.getElement().getStyle().setMarginRight(20, Style.Unit.PX); buttonsPanel.add(button); } setDiskContentType(null); localize(); return buttonsPanel; }<END_MOD>
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getSelectedItems())) : null; boolean shouldAllowEdit = true; if (disk != null) { shouldAllowEdit = (!(disk.isOvfStore())) && (!(isDiskLocked(disk))); } getNewCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk != null) && (disks != null)) && ((disks.size()) == 1)) && shouldAllowEdit)); getRemoveCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isRemoveCommandAvailable()))); getScanAlignmentCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isScanAlignmentCommandAvailable()))); getExportCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveCommandAvailability(disks); getCancelUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isCancelAllowed(disks)); getPauseUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isPauseAllowed(disks)); getResumeUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isResumeAllowed(disks)); <START_MOD>getDownloadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.DownloadImageModel.isDownloadAllowed(disks)); <END_MOD>}
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getNewCommand())) { newEntity(); } else if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getMoveCommand())) { move(); } else if (command == (getCopyCommand())) { copy(); } else if (command == (getScanAlignmentCommand())) { scanAlignment(); } else if (command == (getExportCommand())) { export(); } else if ((RemoveDiskModel.CANCEL_REMOVE.equals(command.getName())) || ("Cancel".equals(command.getName()))) { cancel(); } else if ("CancelConfirm".equals(command.getName())) { cancelConfirm(); } else if (RemoveDiskModel.ON_REMOVE.equals(command.getName())) { onRemove(); } else if (command == (getChangeQuotaCommand())) { changeQuota(); } else if (command.getName().equals("onChangeQuota")) { onChangeQuota(); } else if (command == (getUploadCommand())) { upload(); } else if (command == (getCancelUploadCommand())) { cancelUpload(); } else if ("OnCancelUpload".equals(command.getName())) { onCancelUpload(); } else if (command == (getPauseUploadCommand())) { pauseUpload(); } else if (command == (getResumeUploadCommand())) { resumeUpload(); } <START_MOD>else if (command == (getDownloadCommand())) { download(); } }<END_MOD>
<START_MOD>private void download() { if (((getSelectedItem()) == null) || (!((getSelectedItem()) instanceof org.ovirt.engine.core.common.businessentities.storage.DiskImage))) { return; } org.ovirt.engine.ui.uicommonweb.models.storage.DownloadImageModel model = new org.ovirt.engine.ui.uicommonweb.models.storage.DownloadImageModel(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getSelectedItem()))); model.start(); }<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response remove() { org.ovirt.engine.core.common.businessentities.Provider provider = org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.getProvider(this, id); org.ovirt.engine.core.common.action.ProviderParameters parameters = new org.ovirt.engine.core.common.action.ProviderParameters(provider); <START_MOD>parameters.setForce(isForce()); <END_MOD>return performAction(ActionType.RemoveProvider, parameters); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBricks(org.ovirt.engine.core.compat.Guid volumeId) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricks = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick1 = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick1.setVolumeId(volumeId); brick1.setId(<START_MOD>FixturesTool.GLUSTER_BRICK_UUID1<END_MOD>); brick1.setBrickDirectory("/tmp/test-vol0"); brick1.setServerId(SERVER_ID); brick1.setStatus(GlusterStatus.UP); bricks.add(brick1); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick2 = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick2.setVolumeId(volumeId); brick2.setId(<START_MOD>FixturesTool.GLUSTER_BRICK_UUID1<END_MOD>); brick2.setBrickDirectory("/tmp/test-vol1"); brick2.setServerId(SERVER_ID); brick2.setStatus(GlusterStatus.UP); bricks.add(brick2); return bricks; }
private void onRemove(<START_MOD>boolean force<END_MOD>) { java.util.List<org.ovirt.engine.core.common.action.ActionParametersBase> parameterList = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.Provider provider : providers) { <START_MOD>org<END_MOD>.<START_MOD>ovirt.engine.core.common.action.ProviderParameters providerParameters = <END_MOD>new org.ovirt.engine.core.common.action.ProviderParameters(provider)<START_MOD>; providerParameters.setForce(force); parameterList.add(providerParameters<END_MOD>); } sourceListModel.selectNextItem(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleActions(ActionType.RemoveProvider, parameterList, ( result) -> sourceListModel.getSearchCommand().execute()); cancel(); }
private void updateActionAvailability() { java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> tempVar = getSelectedItems(); java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> selectedItems = (tempVar != null) ? tempVar : new java.util.ArrayList(); getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); <START_MOD>getForceRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); <END_MOD>getAddCommand().setIsAvailable(true); getRemoveCommand().setIsAvailable(true); <START_MOD>getForceRemoveCommand().setIsAvailable(isSelectedProvidersOfType(ProviderType.OPENSTACK_VOLUME)); <END_MOD>}
<START_MOD>private boolean isSelectedProvidersOfType(org.ovirt.engine.core.common.businessentities.ProviderType providerType) { return ((getSelectedItems()) != null) && (getSelectedItems().stream().allMatch(( provider) -> (provider.getType()) == providerType)); }<END_MOD>
@java.lang.Override protected void executeCommand() { setStoragePoolId(getNetwork().getDataCenterId()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { removeVnicProfiles(); removeFromClusters(); <START_MOD>setVdsmNamesInVdsInterfaces(); <END_MOD>getCompensationContext().snapshotEntity(getNetwork()); networkDao.remove(getNetwork().getId()); getCompensationContext().stateChanged(); return null; }); if (getNetwork().isExternal()) { if (org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getParameters().isRemoveFromNetworkProvider()) { removeExternalNetwork(); } } if (org.ovirt.engine.core.bll.network.cluster.NetworkHelper.shouldRemoveNetworkFromHostUponNetworkRemoval(getNetwork())) { removeNetworkFromHosts(); } org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.setSucceeded(true); }
<START_MOD>private void setVdsmNamesInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfacesToUpdate = new java.util.LinkedList<>(); interfaces.stream().filter(( iface) -> java.util.Objects.equals(iface.getNetworkName(), network.getName())).forEach(( iface) -> { iface.setNetworkName(network.getVdsmName()); interfacesToUpdate.add(iface); }); interfaceDao.massUpdateInterfacesForVds(interfacesToUpdate); }<END_MOD>
<START_MOD>public void setVdsmNamesInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.compat.Guid clusterId) { setVdsmNamesInVdsInterfaces(network, interfaceDao.getAllInterfacesByClusterId(clusterId)); }<END_MOD>
<START_MOD>public void setVdsmNamesInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network) { setVdsmNamesInVdsInterfaces(network, interfaceDao.getAllInterfacesByDataCenterId(network.getDataCenterId())); }<END_MOD>
<START_MOD>private java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVmsOnlyOnStorageDomain() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> allVmsRelatedToSD = vmDao.getAllForStorageDomain(getStorageDomainId()); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsWithDisksOnMultipleStorageDomain = vmDao.getAllVMsWithDisksOnOtherStorageDomain(getStorageDomainId()); allVmsRelatedToSD.removeAll(vmsWithDisksOnMultipleStorageDomain); return allVmsRelatedToSD; }<END_MOD>
private java.util.Set<org.ovirt.engine.core.compat.Guid> findNonResponsiveHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts) { final java.util.Set<org.ovirt.engine.core.compat.Guid> nonResponsiveHosts = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if ((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive)) { nonResponsiveHosts.add(host.getId()); } <START_MOD>if ((((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Down)) || ((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Reboot))) && (host.isInFenceFlow())) { host.setStatus(VDSStatus.NonResponsive); nonResponsiveHosts.add(host.getId()); } <END_MOD>} return nonResponsiveHosts; }
<START_MOD>public void setInFenceFlow(boolean isInFenceFlow) { this.isInFenceFlow = isInFenceFlow; }<END_MOD>
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured, reportedDnsResolverConfiguration<START_MOD>, isInFenceFlow<END_MOD>); }
<START_MOD>public boolean isInFenceFlow() { return isInFenceFlow; }<END_MOD>
<START_MOD>private void setInFenceFlow(org.ovirt.engine.core.compat.Guid hostId, boolean isInFenceFlow) { org.ovirt.engine.core.common.businessentities.VdsDynamic vdsDynamic = vdsDynamicDao.get(hostId); vdsDynamic.setInFenceFlow(isInFenceFlow); vdsDynamicDao.update(vdsDynamic); }<END_MOD>
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.AuditLog auditLog = getAuditLog(); auditLogDao.remove(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); setAuditLogDetails(auditLog); auditLog.setUserId(Guid.Empty); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logableToClear = <START_MOD>org.ovirt.engine.core.di.Injector.injectMembers(<END_MOD>new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(auditLog<START_MOD>)<END_MOD>); org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator eventFloodRegulator = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator(logableToClear, auditLog.getLogType()); eventFloodRegulator.evict(); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.setSucceeded(true); }
<START_MOD>public static org.ovirt.engine.core.common.network.FirewallType getDefaultFirewallType(org.ovirt.engine.core.compat.Version clusterCompatibilityVersion) { return clusterCompatibilityVersion.less(Version.v4_2) ? FirewallType.IPTABLES : FirewallType.FIREWALLD; }<END_MOD>
<START_MOD>public static org.ovirt.engine.core.common.network.FirewallType valueOf(int value) { return org.ovirt.engine.core.common.network.FirewallType.map.get(value); }<END_MOD>
<START_MOD>@org.ovirt.api.metamodel.annotations.Link types.DiskSnapshot diskSnapshot();<END_MOD>
<START_MOD>@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(imageTransfer().diskSnapshot().id()); }<END_MOD>
<START_MOD>protected boolean checkDisksNotInBackupStorage() { for (org.ovirt.engine.core.bll.Disk disk : org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic destDomain = storageDomainStaticDao.get(((org.ovirt.engine.core.bll.DiskImage) (disk)).getStorageIds().get(0)); if (org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values().stream().anyMatch(destDomain.isBackup())) { return false; } } } return true; }<END_MOD>
protected void updateStaticDataDefaults() { updateStorageDomainWipeAfterDelete(); updateSpaceThresholds(); <START_MOD>updateStorageDomainBackup(); <END_MOD>}
private void warnIfNotAllDisksPermitSnapshots() { for (org.ovirt.engine.core.<START_MOD>bll<END_MOD>.Disk disk : org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values()) { if (!(disk.isAllowSnapshot())) { auditLogDirector.log(this, AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT); break; } } }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.AuditLog)) { return false; } org.ovirt.engine.core.common.businessentities.AuditLog other = ((org.ovirt.engine.core.common.businessentities.AuditLog) (obj)); return ((((((((((((((((((((((<START_MOD>(<END_MOD>auditLogId) == (other.auditLogId)) && (java.util.Objects.equals(logTime, other.logTime))) && ((logType) == (other.logType))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(storageDomainId, other.storageDomainId))) && (java.util.Objects.equals(storagePoolId, other.storagePoolId))) && ((severity) == (other.severity))) && (java.util.Objects.equals(userId, other.userId))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(quotaId, other.quotaId))) && (java.util.Objects.equals(vmId, other.vmId))) && (java.util.Objects.equals(vmTemplateId, other.vmTemplateId))) && ((processed) == (other.processed))) && (java.util.Objects.equals(correlationId, other.correlationId))) && (java.util.Objects.equals(jobId, other.jobId))) && (java.util.Objects.equals(origin, other.origin))) && ((<START_MOD>customId) == (other.customId))) && ((<END_MOD>customEventId) == (other.customEventId))) && ((eventFloodInSec) == (other.eventFloodInSec))) && (java.util.Objects.equals(customData, other.customData))) && ((external) == (other.external))) && ((deleted) == (other.deleted))) && (java.util.Objects.equals(callStack, other.callStack)); }
<START_MOD>@java.lang.Override public org.ovirt.engine.api.resource.HostNicNeighborResource getNeighborResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendHostNicNeighborServiceResource(guid, parent.getHostId())); }<END_MOD>
@org.junit.Before public void setupEnvironment() { org.ovirt.engine.core.utils.CorrelationIdTracker.clean(); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); when(engineSessionDao.remove(anyLong())).thenReturn(1); <START_MOD>org.ovirt.engine.core.bll.CommandBaseTest.mcr.mockConfigValue(ConfigValues.UserSessionTimeOutInterval, 30); <END_MOD>sessionDataContainer.setUser(session, user); }
@org.junit.Test public void testBlockUseHostCpuWithPPCArch() { when(cpuFlagsManagerHandler.getCpuId(anyString(), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(org.ovirt.engine.core.bll.CPU_ID); when(osRepository.isCpuSupported(anyInt(), any(org.ovirt.engine.core.compat.Version.class), anyString())).thenReturn(true); doNothing().when(cmd).initTemplateDisks(); setupCanAddPpcTest(); cmd.setEffectiveCompatibilityVersion(Version.v4_0); doReturn(java.util.Collections.emptyList()).when(cmd).getImagesToCheckDestinationStorageDomains(); initPpcCluster(); doReturn(true).when(cmd).validateAddVmCommand(); doReturn(true).when(cmd).isVmNameValidLength(any(org.ovirt.engine.core.common.businessentities.VM.class)); when(osRepository.getArchitectureFromOS(anyInt())).thenReturn(ArchitectureType.ppc64); cmd.getParameters().getVm().setClusterArch(ArchitectureType.ppc64); cmd.getParameters().getVm().setUseHostCpuFlags(true); cmd.getParameters().getVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST); cmd.getParameters().getVm().setClusterId(cluster.getId()); cmd.getParameters().getVm().setVmOs(OsType.Other.ordinal()); cmd.init(); <START_MOD>java.util.Map<java.lang.String, java.lang.String> migrationMap = new java.util.HashMap<java.lang.String, java.lang.String>() { { put("undefined", "true"); put("x86", "true"); put("ppc", "true"); } }; mcr.mockConfigValue(ConfigValues.IsMigrationSupported, cmd.getEffectiveCompatibilityVersion(), migrationMap); <END_MOD>org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.USE_HOST_CPU_REQUESTED_ON_UNSUPPORTED_ARCH); }
@java.lang.Override public void setUp() { super.setUp(); generateStorageToDisksMap(); initDestSDs(); <START_MOD>mcr.mockConfigValue(ConfigValues.MaxIoThreadsPerVm, 127); mcr.mockConfigValue(ConfigValues.MaxVmNameLength, 64); mcr.mockConfigValue(ConfigValues.SupportedClusterLevels, new java.util.HashSet(java.util.Arrays.asList(new org.ovirt.engine.core.compat.Version(2, 2), new org.ovirt.engine.core.compat.Version(3, 0)))); mcr.mockConfigValue(ConfigValues.ValidNumOfMonitors, java.util.Arrays.asList("1", "2", "4")); <END_MOD>}
<START_MOD>@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mcr.mockConfigValue(ConfigValues.ConsoleToggleFullScreenKeys, "shift+f11"); mcr.mockConfigValue(ConfigValues.ConsoleReleaseCursorKeys, "shift+f12"); mcr.mockConfigValue(ConfigValues.RemapCtrlAltDelDefault, true); mcr.mockConfigValue(ConfigValues.FullScreenWebadminDefault, false); mcr.mockConfigValue(ConfigValues.EnableSpiceRootCertificateValidation, true); }<END_MOD>
@org.junit.Test public void testNameNotChanged() { prepareVmToPassValidate(); vm.setName("vm1"); mockSameNameQuery(true); mockVmValidator(); command.initEffectiveCompatibilityVersion(); <START_MOD>java.util.Map<java.lang.String, java.lang.String> migrationMap = new java.util.HashMap<java.lang.String, java.lang.String>() { { put("undefined", "true"); put("x86", "true"); put("ppc", "true"); } }; org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.IsMigrationSupported, command.getEffectiveCompatibilityVersion(), migrationMap); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.MaxNumOfCpuPerSocket, command.getEffectiveCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.MaxNumOfThreadsPerCpu, command.getEffectiveCompatibilityVersion(), 8); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.MaxNumOfVmCpus, command.getEffectiveCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.MaxNumOfVmSockets, command.getEffectiveCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.VM32BitMaxMemorySizeInMB, command.getEffectiveCompatibilityVersion(), 20480); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.VM64BitMaxMemorySizeInMB, command.getEffectiveCompatibilityVersion(), 4194304); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.VMPpc64BitMaxMemorySizeInMB, command.getEffectiveCompatibilityVersion(), 1048576); <END_MOD>assertTrue( should have passed. command.validate()); }
@org.junit.Before public void setUp() { when(vmDao.get(vm.getId())).thenReturn(vm); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); cluster.setCpuName( Conroe Family cluster.setArchitecture(ArchitectureType.x86_64); cluster.setId(vm.getClusterId()); cluster.setStoragePoolId(vm.getStoragePoolId()); cluster.setCompatibilityVersion(org.ovirt.engine.core.compat.Version.getLast()); when(clusterDao.get(vm.getClusterId())).thenReturn(cluster); mockOsRepository(); doNothing().when(cmd).separateCustomProperties(any(org.ovirt.engine.core.common.businessentities.VmStatic.class)); doReturn(getDisksList(vm.getStoragePoolId())).when(cmd).getVmDisksFromDB(); doReturn(vmDeviceUtils).when(cmd).getVmDeviceUtils(); <START_MOD>org.ovirt.engine.core.bll.AddVmTemplateCommandTest.mcr.mockConfigValue(ConfigValues.VmPriorityMaxValue, 100); <END_MOD>cmd.init(); }
<START_MOD>@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mcr.mockConfigValue(ConfigValues.OvirtInitialSupportedIsoVersion, "5.8"); mcr.mockConfigValue(ConfigValues.OvirtIsoPrefix, "rhevh"); mcr.mockConfigValue(ConfigValues.OvirtNodeOS, "^ovirt.*$"); mcr.mockConfigValue(ConfigValues.DataDir, "/usr/share/ovirt-engine"); mcr.mockConfigValue(ConfigValues.oVirtISOsRepositoryPath, "/usr/share/rhev-hypervisor"); }<END_MOD>
<START_MOD>private java.lang.String renderPortMirroring(boolean portMirroring) { if (portMirroring) { return org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.yes(); } else { return org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.no(); } }<END_MOD>
<START_MOD>@java.lang.Override public void setEnabled(boolean enabled) { this.enabled = enabled; nameEditor.setEnabled(enabled); valueEditor.setEnabled(enabled); }<END_MOD>
@java.lang.Override protected void init() {<START_MOD> setNetworkFilterParameterWidgetVisible(true);<END_MOD> org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getNicTypeList(getVm().getOsId(), getClusterCompatibilityVersion(), new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { setSupportedVnicTypes(returnValue); postNicInit(); })); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel iface) { driver.edit(iface<START_MOD>); networkFilterParameterWidget.edit(iface.getNetworkFilterParameterListModel()); networkFilterParameterWidget.setEnabled(iface.isNetworkFilterParameterWidgetVisible()); networkFilterParameterWidget.setVisible(iface.isNetworkFilterParameterWidgetVisible()<END_MOD>); hideMacWhenNotEnabled(iface); iface.getMAC().getPropertyChangedEvent().addListener(( ev, sender, args) -> { if ("IsAvailable".equals(args.propertyName)) { hideMacWhenNotEnabled(iface); } }); }
protected void postOnSave() { <START_MOD>stopProgress(); if (saveSuceeded) { cancel(); <END_MOD>}<START_MOD> }<END_MOD>
protected void onSave() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic = createBaseNic(); if ((getProgress()) != null) { return; } if (!(validate())) { return; } nic.setName(getName().getEntity()); org.ovirt.engine.core.common.businessentities.network.VnicProfileView profile = getProfile().getSelectedItem(); nic.setVnicProfileId(profile.getId()); nic.setNetworkName(profile.getNetworkName()); nic.setLinked(getLinked().getEntity()); if ((getNicType().getSelectedItem()) == null) { nic.setType(null); } else { nic.setType(getNicType().getSelectedItem().getValue()); } onSaveMAC(nic); nic.setPlugged(getPlugged().getEntity()); startProgress(); <START_MOD>saveSuceeded = false; <END_MOD>org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(getActionType(), createVdcActionParameters(nic), ( result) -> { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue(); if ((returnValue != null) && (returnValue.getSucceeded())) { <START_MOD>java.lang.Object actionReturnValue = returnValue.getActionReturnValue(); saveSuceeded = true; if ((actionReturnValue != null) && (actionReturnValue instanceof org.ovirt.engine.core.compat.Guid)) { saveNicFilterParameters(((org.ovirt.engine.core.compat.Guid) (actionReturnValue))); } else {<END_MOD> postOnSave(); } }<START_MOD> }<END_MOD>, this); }
<START_MOD>@java.lang.Override protected void init() { setNetworkFilterParameterWidgetVisible(true); super.init(); }<END_MOD>
private void postNicInit() { getName().setEntity(getNic().getName()); initMAC(); initLinked(<START_MOD>); initNetworkFilterParameters(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { if (returnValue != null) { getNetworkFilterParameterListModel().setItems(returnValue); } })<END_MOD>); initProfiles(); getPlugged().setEntity(getNic().isPlugged()); if (!(allowPlug())) { getPlugged().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().nicHotPlugNotSupported(getClusterCompatibilityVersion().toString())); } getPlugged().setIsChangeable(allowPlug()); initCommands(); }
<START_MOD>public org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter flush() { getEntity().setName(name.getEntity()); getEntity().setValue(value.getEntity()); return getEntity(); }<END_MOD>
protected java.util.Map<java.lang.String, java.lang.String> createPortAllocationRuntimeProperties(com.woorea.openstack.quantum.model.Port port) { java.util.Map<java.lang.String, java.lang.String> runtimeProperties = new java.util.HashMap<>(); runtimeProperties.put("vnic_id", port.getId()); java.lang.String providerType = getProvider().getType().name(); runtimeProperties.put("provider_type", providerType); if (((port.getSecurityGroups()) != null) && (!(port.getSecurityGroups().isEmpty()))) { runtimeProperties.put("security_groups", org.apache.commons.lang.StringUtils.join(port.getSecurityGroups(), ',')); } <START_MOD>java.lang.String pluginType = getProvider().getAdditionalProperties().getPluginType(); if (pluginType == null) { pluginType = ""; } runtimeProperties.put("plugin_type", pluginType); <END_MOD>return runtimeProperties; }
<START_MOD>@java.lang.Override public javax.ws.rs.core.Response remove() { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.api.restapi.resource.BackendClusterFeatureHelper.getClusterWithFeatureDisabled(this, clusterId, guid); org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters param = new org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters(cluster); return performAction(ActionType.UpdateCluster, param); }<END_MOD>
<START_MOD>@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.ClusterFeature feature) { validateParameters(feature); org.ovirt.engine.core.common.businessentities.AdditionalFeature featureEntity = map(feature, null); org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.api.restapi.resource.BackendClusterFeatureHelper.getClusterEntity(this, clusterId); org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature supportedFeature = new org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature(); supportedFeature.setFeature(featureEntity); supportedFeature.setEnabled(true); supportedFeature.setClusterId(clusterId); cluster.getAddtionalFeaturesSupported().add(supportedFeature); org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters param = new org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters(cluster); return performCreate(ActionType.UpdateCluster, param, new org.ovirt.engine.api.restapi.resource.BackendClusterEnabledFeaturesResource.ClusterFeatureIdResolver(clusterId, featureEntity.getId())); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.api.model.ClusterFeatures list() { org.ovirt.engine.api.model.ClusterFeatures features = new org.ovirt.engine.api.model.ClusterFeatures(); java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> addlFeatures = getOptionalEntity(java.util.Set.class, QueryType.GetClusterFeaturesByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), clusterId.toString(), false); if (addlFeatures != null) { for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature entity : addlFeatures) { if (entity.isEnabled()) { features.getClusterFeatures().add(addLinks(map(entity.getFeature(), null))); } } } return features; }<END_MOD>
<START_MOD>public static org.ovirt.engine.core.common.businessentities.Cluster getClusterEntity(org.ovirt.engine.api.restapi.resource.BackendResource resource, org.ovirt.engine.core.compat.Guid clusterId) { org.ovirt.engine.core.common.businessentities.Cluster cluster = resource.getEntity(org.ovirt.engine.core.common.businessentities.Cluster.class, QueryType.GetClusterById, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), null, true); return cluster; }<END_MOD>
<START_MOD>public static org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature getEnabledFeature(org.ovirt.engine.api.restapi.resource.BackendResource resource, org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.compat.Guid id) { java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> addlFeatures = resource.getOptionalEntity(java.util.Set.class, QueryType.GetClusterFeaturesByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), clusterId.toString(), false); org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature = addlFeatures.stream().filter(( f) -> (f.getFeature().getId().equals(id)) && (f.isEnabled())).findFirst().orElse(null); return feature; }<END_MOD>
<START_MOD>public static java.util.Set<org.ovirt.engine.core.common.businessentities.AdditionalFeature> getClusterFeatures(org.ovirt.engine.api.restapi.resource.BackendResource resource, java.lang.String version) { java.util.Set<org.ovirt.engine.core.common.businessentities.AdditionalFeature> addlFeatures = new java.util.HashSet<>(); addlFeatures = resource.getEntity(java.util.Set.class, QueryType.GetClusterFeaturesByVersionAndCategory, new org.ovirt.engine.core.common.queries.GetClusterFeaturesByVersionAndCategoryParameters(new org.ovirt.engine.core.compat.Version(version), resource.getCurrent().getApplicationMode()), ("features for version:" + version)); return addlFeatures; }<END_MOD>
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.ImageFileType.class, to = org.ovirt.engine.api.model.ImageFileType.class) public static org.ovirt.engine.api.model.ImageFileType map(org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType, org.ovirt.engine.api.model.ImageFileType template) { switch (imageFileType) { case Unknown : return org.ovirt.engine.api.model.ImageFileType.UNKNOWN; case ISO : return org.ovirt.engine.api.model.ImageFileType.ISO; case Floppy : return org.ovirt.engine.api.model.ImageFileType.FLOPPY; case Disk : return org.ovirt.engine.api.model.ImageFileType.DISK; case All : return org.ovirt.engine.api.model.ImageFileType.ALL; default : return null; } }<END_MOD>
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.storage.RepoImage.class, to = org.ovirt.engine.api.model.Image.class) public static org.ovirt.engine.api.model.Image map(org.ovirt.engine.core.common.businessentities.storage.RepoImage entity, org.ovirt.engine.api.model.Image template) { org.ovirt.engine.api.model.Image model = (template != null) ? template : new org.ovirt.engine.api.model.Image(); model.setId(entity.getRepoImageId()); model.setName(entity.getRepoImageName()); <START_MOD>if ((entity.getSize()) != null) { model.setSize(entity.getSize().intValue()); } if ((entity.getFileType()) != null) { model.setFileType(org.ovirt.engine.api.restapi.types.ImageMapper.map(entity.getFileType(), null)); } <END_MOD>return model; }
@java.lang.Override protected boolean validateImageTransfer() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = <START_MOD>getDiskImage(); org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = getDiskValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = getDiskImagesValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(storageDomainDao.getForStoragePool(diskImage.getStorageIds()<END_MOD>.get(<START_MOD>0), diskImage.getStoragePoolId())); return ((((validate(<END_MOD>diskValidator<START_MOD>.isDiskExists())) && (validate(diskValidator.isDiskPluggedToAnyNonDownVm(false)))) && (validate(<END_MOD>diskImagesValidator<START_MOD>.diskImagesNotIllegal()))) && (validate(diskImagesValidator.diskImagesNotLocked()))) && (validate(<END_MOD>storageDomainValidator.isDomainExistAndActive())); }
<START_MOD>protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImage() { if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId()))) { return super.getDiskImage(); } return ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageGroupID()))); }<END_MOD>
<START_MOD>@java.lang.Override public void init() { super.init(); setImageId(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); setImageGroupId(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageGroupID()); }<END_MOD>
public void proceedCommandExecution(org.ovirt.engine.core.compat.Guid childCmdId) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = imageTransferDao.get(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); if ((entity == null) || ((entity.getPhase()) == null)) { log.error(( transfer status entity corrupt or missing from database +   for image transfer command '{}' org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); setCommandStatus(CommandStatus.FAILED); return; } if ((entity.getDiskId()) != null) { <START_MOD>setImageId<END_MOD>(entity.getDiskId()); } long ts = (java.lang.System.currentTimeMillis()) / 1000; if (pauseTransferIfNecessary(entity, ts)) { return; } executeStateHandler(entity, ts, childCmdId); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> listPermissionSubjects = new java.util.ArrayList<>(); if (org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.isImageProvided()) { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.<START_MOD>getImageGroupId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_DISK_PROPERTIES)); } else { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.<END_MOD>getParameters().<START_MOD>getStorageDomainId<END_MOD>(), org.ovirt.engine.core.common.VdcObjectType.<START_MOD>Storage<END_MOD>, org.ovirt.engine.core.common.businessentities.ActionGroup.<START_MOD>CREATE_DISK<END_MOD>)); } <START_MOD>return listPermissionSubjects<END_MOD>; }
<START_MOD>@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> locks = new java.util.HashMap<>(); locks.put(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getImageGroupId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, EngineMessage.ACTION_TYPE_FAILED_DISK_IS_LOCKED)); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId()))) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = vmDao.getVmsListForDisk(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getImageGroupId(), true); vms.forEach(( vm) -> locks.put(vm.getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, EngineMessage.ACTION_TYPE_FAILED_VM_IS_LOCKED))); } return locks; }<END_MOD>
<START_MOD>@java.lang.Override public javax.ws.rs.core.Response addForSnapshot(org.ovirt.engine.api.model.ImageTransfer imageTransfer) { org.ovirt.engine.core.common.action.TransferDiskImageParameters params = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(); params.setImageId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(imageTransfer.getDiskSnapshot().getId())); return performCreate(imageTransfer, params); }<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response toResponse(org.ovirt.engine.api.restapi.utils.MalformedIdException exception) { org.ovirt.engine.api.restapi.resource.validation.MalformedIdExceptionMapper.log.error( id detected while processing   request for path   request.getMethod(), uriInfo.getPath()); org.ovirt.engine.api.restapi.resource.validation.MalformedIdExceptionMapper.log.error("Exception", exception); <START_MOD>final org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason( Failed fault.setDetail(exception.getCause().getMessage()); <END_MOD>return javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(<START_MOD>fault<END_MOD>).build(); }
<START_MOD>private void disableAnyUsb(org.ovirt.engine.core.common.businessentities.VmBase oldVm, org.ovirt.engine.core.common.businessentities.VmBase newVm) { final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> usbControllers; if ((((((org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED) == (oldVm.getUsbPolicy())) && ((org.ovirt.engine.core.common.businessentities.VmType.HighPerformance) == (oldVm.getVmType()))) && ((usbControllers = getUsbControllers(newVm.getId())) != null)) && ((usbControllers.size()) == 1)) && (UsbControllerModel.NONE.libvirtName.equals(getUsbControllerModelName(usbControllers.get(0))))) { return; } if ((org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE) == (oldVm.getUsbPolicy())) { disableSpiceUsb(newVm.getId()); } else if ((org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED) == (oldVm.getUsbPolicy())) { disableNormalUsb(newVm.getId()); } addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), newVm.getId()), VmDeviceGeneralType.CONTROLLER, VmDeviceType.USB, createUsbControllerSpecParams(UsbControllerModel.NONE.libvirtName, 0), true, false); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.common.businessentities.VmDevice getVmDevice() { java.util.Map<java.lang.String, java.lang.Object> specParams = new java.util.HashMap<>(); specParams.put("action", action.name()); specParams.put("model", model.name()); return new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), id), VmDeviceGeneralType.WATCHDOG, VmDeviceType.WATCHDOG.getName(), "", specParams, true, true, false, "", null, null, null); }<END_MOD>
public void vmTypeChanged(org.ovirt.engine.core.common.businessentities.VmType vmType) { if (basedOnCustomInstanceType()) { getModel().getIsSoundcardEnabled().setEntity((vmType == (org.ovirt.engine.core.common.businessentities.VmType.Desktop))); } getModel().getAllowConsoleReconnect().setEntity((vmType == (org.ovirt.engine.core.common.businessentities.VmType.Server))); <START_MOD>if (vmType == (org.ovirt.engine.core.common.businessentities.VmType.HighPerformance)) { getModel().getIsHeadlessModeEnabled().setEntity(true); getModel().getIsConsoleDeviceEnabled().setEntity(true); getModel().getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED); getModel().getWatchdogModel().setSelectedItem(null); getModel().getWatchdogAction().setSelectedItem(getModel().getWatchdogAction().getItems().iterator().next()); getModel().getIsHighlyAvailable().setEntity(false); <END_MOD>}<START_MOD> }<END_MOD>
private void onDestroy() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); if ((model.getProgress()) != null) { return; } if (!(model.validate())) { return; } org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getSelectedItem(); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.ForceRemoveStorageDomain, new java.util.ArrayList(java.util.Arrays.asList(new org.ovirt.engine.core.common.action.ActionParametersBase[]{ new org.ovirt.engine.core.common.action.<START_MOD>ForceRemoveStorageDomainParameters<END_MOD>(storageDomain.getId()) })), ( result) -> { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); }, model); }
@org.junit.Test public void testRemoveWithDestroy() throws java.lang.Exception { setUpGetEntityExpectations(); javax.ws.rs.core.UriInfo uriInfo = setUpActionExpectations(ActionType.ForceRemoveStorageDomain, org.ovirt.engine.core.common.action.<START_MOD>ForceRemoveStorageDomainParameters<END_MOD>.class, new java.lang.String[]{ "StorageDomainId", "VdsId" }, new java.lang.Object[]{ GUIDS[0], GUIDS[1] }, true, true, false); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(BackendStorageDomainResource.HOST, GUIDS[1].toString()); parameters.put(BackendStorageDomainResource.DESTROY, java.lang.Boolean.TRUE.toString()); uriInfo = addMatrixParameterExpectations(uriInfo, parameters); setUriInfo(uriInfo); verifyRemove(resource.remove()); }
@java.lang.Override protected boolean validate() { boolean returnValue = ((super.validate()) && (org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.checkStorageDomain())) && (((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)) || (checkStorageDomainStatusNotEqual(StorageDomainStatus.Active))); if ((returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master))) && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStoragePool()) != null)) { if ((<START_MOD>(<END_MOD>org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.electNewMaster()) == null) <START_MOD>&& (!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getParameters().isForceRemoveLastMaster()))) <END_MOD>{ returnValue = false; addValidationMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN); } else if (<START_MOD>(<END_MOD>!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.initializeVds())) <START_MOD>&& (!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getParameters().isForceRemoveLastMaster()))) <END_MOD>{ returnValue = false; addValidationMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN_HOST_NOT_ACTIVE); } } if (returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLANCE))) { addValidationMessage(EngineMessage.ERROR_CANNOT_MANAGE_STORAGE_DOMAIN); returnValue = false; } return returnValue; }
@java.lang.Override public javax.ws.rs.core.Response remove() { java.lang.String host = org.ovirt.engine.api.restapi.util.ParametersHelper.getParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.HOST); if (host == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason( parameter is missing throw new javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fault).build()); } get(); org.ovirt.engine.core.compat.Guid hostId = getHostId(host); boolean destroy = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.DESTROY, true, false); boolean format = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.FORMAT, true, false); if (destroy) { org.ovirt.engine.core.common.action.<START_MOD>ForceRemoveStorageDomainParameters<END_MOD> parameters = new org.ovirt.engine.core.common.action.<START_MOD>ForceRemoveStorageDomainParameters<END_MOD>(guid); parameters.setVdsId(hostId); return performAction(ActionType.ForceRemoveStorageDomain, parameters); } else { org.ovirt.engine.core.common.action.RemoveStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.RemoveStorageDomainParameters(guid); parameters.setVdsId(hostId); parameters.setDoFormat(format); return performAction(ActionType.RemoveStorageDomain, parameters); } }
protected boolean isDetachAllowed() { if ((getStoragePoolIsoMap()) == null) { return failValidation(EngineMessage.STORAGE_DOMAIN_NOT_ATTACHED_TO_STORAGE_POOL); } <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = storageDomainDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.getStoragePool().getId()); <END_MOD>if ((<START_MOD>(storageDomains.size()) > 1<END_MOD>) && (isMaster())) { return failValidation(EngineMessage.ERROR_CANNOT_DETACH_LAST_STORAGE_DOMAIN); } return true; }
private <START_MOD>void detachStorageDomain(org.ovirt.engine.core.compat.Guid storageDomainId<END_MOD>) { <START_MOD>log.info( '{}' is already attached to a different storage pool, clean the storage domain metadata. storageDomainId); org.ovirt.engine.core.common.vdscommands.StorageDomainVdsCommandParameters params = new org.ovirt.engine.core.common.vdscommands.StorageDomainVdsCommandParameters(storageDomainId, org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getVds().getId()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = runVdsCommand(VDSCommandType.CleanStorageDomainMetaData, params); <END_MOD>if (<START_MOD>ret.getSucceeded(<END_MOD>)) { <START_MOD>log.info( cleaned metadata <END_MOD>for <START_MOD>storage domain '{}'. storageDomainId); } else<END_MOD> { <START_MOD>log.warn( to clean metadata for storage<END_MOD> domain <START_MOD>'{}'. storageDomainId<END_MOD>); } }
<START_MOD>private void cleanDirtyMetaDataIfNeeded() { if ((org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getStoragePool().getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Maintenance)) { for (org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getStorages()) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.get(storageDomainId); if ((domain.getStorageDomainType().isDataDomain()) && (isStorageDomainAttachedToStoragePool(domain))) { detachStorageDomain(storageDomainId); } } } }<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response remove() { <START_MOD>boolean destroy = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.DESTROY, true, false); if (destroy) { org.ovirt.engine.core.common.action.StorageDomainParametersBase parameters = new org.ovirt.engine.core.common.action.StorageDomainParametersBase(guid); return performAction(ActionType.ForceRemoveStorageDomain, parameters); } else { <END_MOD>java.lang.String host = org.ovirt.engine.api.restapi.util.ParametersHelper.getParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.HOST); if (host == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason( parameter is missing throw new javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fault).build()); } get(); <START_MOD>boolean format = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.FORMAT, true, false); <END_MOD>org.ovirt.engine.core.compat.Guid hostId = getHostId(host); <START_MOD>org.ovirt.engine.core.common.action.RemoveStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.RemoveStorageDomainParameters(guid); parameters.setVdsId(hostId); parameters.setDoFormat(<END_MOD>format); return performAction(ActionType.<START_MOD>RemoveStorageDomain<END_MOD>, parameters); } }
public void setWidgetColSize(org.gwtbootstrap3.client.ui.constants.ColumnSize size) { if ((sizeContainer) != null) { sizeContainer.addStyleName(size.getCssName()); } <START_MOD>else { sizeContainer.removeStyleName(widgetColSize.getCssName()); sizeContainer.addStyleName(size.getCssName()); <END_MOD>}<START_MOD> widgetColSize = size; }<END_MOD>
public void setLabelColSize(org.gwtbootstrap3.client.ui.constants.ColumnSize size) { <START_MOD>if ((labelColSize) == null) { <END_MOD>getFormLabel().setAddStyleNames(size.getCssName()); }<START_MOD> else { getFormLabel().removeStyleName(labelColSize.getCssName()); getFormLabel().setAddStyleNames(size.getCssName()); } labelColSize = size; }<END_MOD>
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(storageDomain().id()), mandatory(storageDomain().name())); optional(storageDomain().<START_MOD>force<END_MOD>()); }
@javax.annotation.PostConstruct private void init() { int quotaCacheIntervalInMinutes = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.QuotaCacheIntervalInMinutes); <START_MOD>executor<END_MOD>.<START_MOD>scheduleWithFixedDelay<END_MOD>(<START_MOD>()<END_MOD> <START_MOD>-><END_MOD> <START_MOD>updateQuotaCache()<END_MOD>, 1, quotaCacheIntervalInMinutes, java.util.concurrent.TimeUnit.MINUTES); }
public void performLoadBalancing() { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.debug( Balancer timer entered. java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = getClusterDao().getAll(); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { org.ovirt.engine.core.common.scheduling.ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId()); org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnit = policyUnits.get(policy.getBalance()); java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> balanceResult = java.util.Optional.empty(); if (policyUnit.getPolicyUnit().isEnabled()) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = getVdsDao().getAllForClusterWithoutMigrating(cluster.getId()); if (policyUnit.getPolicyUnit().isInternal()) { balanceResult = internalRunBalance(policyUnit, cluster, hosts); } else if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.ExternalSchedulerEnabled)) { balanceResult = externalRunBalance(policyUnit, cluster, hosts); } } if ((balanceResult.isPresent()) && (balanceResult.get().isValid())) { migrationHandler.migrateVM(balanceResult.get().getCandidateHosts(), balanceResult.get().getVmToMigrate(), org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getMessage(AuditLogType.MIGRATION_REASON_LOAD_BALANCING)); } } }
private void enableLoadBalancer() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableVdsLoadBalancing)) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info( scheduling to enable vds load balancer <START_MOD>executor<END_MOD>.<START_MOD>scheduleWithFixedDelay<END_MOD>(<START_MOD>(<END_MOD>)<START_MOD> -> performLoadBalancing<END_MOD>(<START_MOD>)<END_MOD>, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsLoadBalancingIntervalInMinutes), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsLoadBalancingIntervalInMinutes), java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info( scheduling to enable vds load balancer } }
<START_MOD>private<END_MOD> void updateVmVersion() { for (org.ovirt.engine.core.compat.Guid vmId : vmDao.getVmIdsForVersionUpdate(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId())) { if (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.<START_MOD>updateVmsJobMap<END_MOD>.containsKey(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId()))) { break; } org.ovirt.engine.core.common.action.UpdateVmVersionParameters params = new org.ovirt.engine.core.common.action.UpdateVmVersionParameters(vmId); params.setSessionId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getSessionId()); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(ActionType.UpdateVmVersion, params, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); } org.ovirt.engine.core.bll.AddVmTemplateCommand.<START_MOD>updateVmsJobMap<END_MOD>.remove(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId()); }
public void scheduleJobs() { int refreshRate = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsRefreshRate)) * 1000; registeredJobs.add(<START_MOD>executor<END_MOD>.<START_MOD>scheduleWithFixedDelay<END_MOD>(this<START_MOD>::refresh<END_MOD>, refreshRate, refreshRate, java.util.concurrent.TimeUnit.MILLISECONDS)); vmsRefresher = getRefresherFactory().create(this); vmsRefresher.startMonitoring(); hostRefresher = new org.ovirt.engine.core.vdsbroker.HostConnectionRefresher(this, resourceManager); hostRefresher.start(); }
public void refresh() { log.debug( Rules Enforcement Manager interval reached. final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmCandidates = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusterDao.getWithoutMigratingVms()) { if (!(cluster.isInUpgradeMode())) { final org.ovirt.engine.core.common.businessentities.VM candidate = rulesEnforcer.chooseNextVmToMigrate(cluster); if (candidate != null) { vmCandidates.add(candidate); } } } for (org.ovirt.engine.core.common.businessentities.VM vm : vmCandidates) { migrateVM(vm); } }
public void backupCheck() { if (lock.tryLock()) { try { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info( check started. doBackupCheck(); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info( check completed. } finally { lock.unlock(); } } }
@org.junit.Before public void setup() { cluster1 = createCluster(); cluster2 = createCluster(); when(clusterDao.getWithoutMigratingVms()).thenReturn(java.util.Arrays.asList(cluster1, cluster2)); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster1))).thenReturn(vm1); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster2))).thenReturn(vm2); <START_MOD>when(arem.getExecutor()).thenReturn(java.util.concurrent.Executors.newScheduledThreadPool(1)); <END_MOD>arem.wakeup(); }
@javax.annotation.PostConstruct private void initialize() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.PMHealthCheckEnabled)) { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info( initializing {} getClass().getSimpleName()); java.lang.Integer pmHealthCheckInterval = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PMHealthCheckIntervalInSec); <START_MOD>executor.scheduleWithFixedDelay(() -> pmHealthCheck()<END_MOD>, pmHealthCheckInterval, pmHealthCheckInterval, java.util.concurrent.TimeUnit.SECONDS); } recover(vdsDao.getAll()); org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info( initializing {} getClass().getSimpleName()); }
public void pmHealthCheck() { if (lock.tryLock()) { try { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info( Management Health Check started. java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().getAll(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.isPmEnabled()) { pmHealthCheck(host); } } org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info( Management Health Check completed. } finally { lock.unlock(); } } }
private void endDefaultOperations() { endUnlockOps(); if (isTemplateVersion()) { java.<START_MOD>util<END_MOD>.<START_MOD>concurrent.ScheduledFuture<END_MOD> <START_MOD>job<END_MOD> = <START_MOD>schedulerService<END_MOD>.<START_MOD>schedule<END_MOD>(this<START_MOD>::updateVmVersion<END_MOD>, 0, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.AddVmTemplateCommand.<START_MOD>updateVmsJobMap<END_MOD>.put(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId(), <START_MOD>job<END_MOD>); } }
public void triggerPoolMonitoringJob() { <START_MOD>try { poolMonitoringJob<END_MOD>.<START_MOD>cancel<END_MOD>(<START_MOD>true<END_MOD>); }<START_MOD> catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.VmPoolMonitor.log.debug( cancelling existing job: {} org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); } poolMonitoringJob = schedulerService.scheduleWithFixedDelay(this::managePrestartedVmsInAllVmPools, 0, vmPoolMonitorIntervalInMinutes, java.util.concurrent.TimeUnit.MINUTES); }<END_MOD>
@javax.annotation.PostConstruct public void scheduleJob() { double interval = org.ovirt.engine.core.common.config.Config.<java.lang.Double>getValue(ConfigValues.CertificationValidityCheckTimeInHours); final int HOURS_TO_MINUTES = 60; long intervalInMinutes = java.lang.Math.round((interval * HOURS_TO_MINUTES)); <START_MOD>executor<END_MOD>.<START_MOD>scheduleWithFixedDelay<END_MOD>(<START_MOD>()<END_MOD> <START_MOD>-><END_MOD> <START_MOD>checkCertificationValidity()<END_MOD>, 10, intervalInMinutes, java.util.concurrent.TimeUnit.MINUTES); }
public void checkCertificationValidity() { try { if ((!(checkCertificate(org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.getCertificate(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKICACert()), AuditLogType.ENGINE_CA_CERTIFICATION_HAS_EXPIRED, AuditLogType.ENGINE_CA_CERTIFICATION_IS_ABOUT_TO_EXPIRE_ALERT, AuditLogType.ENGINE_CA_CERTIFICATION_IS_ABOUT_TO_EXPIRE, null))) ^ (!(checkCertificate(((java.security.cert.X509Certificate) (org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.getCertificate())), AuditLogType.ENGINE_CERTIFICATION_HAS_EXPIRED, AuditLogType.ENGINE_CERTIFICATION_IS_ABOUT_TO_EXPIRE_ALERT, AuditLogType.ENGINE_CERTIFICATION_IS_ABOUT_TO_EXPIRE, null)))) { return; } if (!(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EncryptHostCommunication))) { return; } hostDao.getAll().stream().filter(( host) -> ((host.getStatus()) == VDSStatus.Up) || ((host.getStatus()) == VDSStatus.NonOperational)).forEach(this::checkHostCertificateValidity); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.CertificationValidityChecker.log.error( to check certification validity: {} e.getMessage()); org.ovirt.engine.core.bll.CertificationValidityChecker.log.error("Exception", e); } }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.info( DWH Heart Beat heartBeatVar = new org.ovirt.engine.core.common.businessentities.DwhHistoryTimekeeping(); heartBeatVar.setVariable(DwhHistoryTimekeepingVariable.HEART_BEAT); <START_MOD>executor<END_MOD>.<START_MOD>scheduleWithFixedDelay<END_MOD>(<START_MOD>()<END_MOD> <START_MOD>-><END_MOD> <START_MOD>engineIsRunningNotification()<END_MOD>, 0, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.DwhHeartBeatInterval), java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.info( Heart Beat initialized }
public synchronized void fetchIsoDomains() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> repofileList = repoFileMetaDataDao.getAllRepoFilesForAllStoragePools(StorageDomainType.ISO, StoragePoolStatus.Up, StorageDomainStatus.Active, VDSStatus.Up); resetProblematicList(); java.util.List<java.util.concurrent.Callable<java.lang.Void>> tasks = new java.util.ArrayList<>(); for (final org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage : repofileList) { if (shouldRefreshIsoDomain(repoImage.getLastRefreshed())) { tasks.add(() -> { updateCachedIsoFileListFromVdsm(repoImage); return null; }); } else { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.debug(( refresh process for '{}' file type in storage domain id '{}' was not performed +   since refresh time out did not passed yet. repoImage.getFileType(), repoImage.getRepoDomainId()); } } org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.invokeAll(tasks); handleErrorLog(new java.util.ArrayList(problematicRepoFileList)); }
@javax.annotation.PostConstruct public void scheduleJob() { double availableUpdatesRefreshRate = org.ovirt.engine.core.common.config.Config.<java.lang.Double>getValue(ConfigValues.HostPackagesUpdateTimeInHours); if (availableUpdatesRefreshRate > 0) { final int HOURS_TO_MINUTES = 60; long rateInMinutes = java.lang.Math.round((availableUpdatesRefreshRate * HOURS_TO_MINUTES)); <START_MOD>scheduledExecutor<END_MOD>.<START_MOD>scheduleWithFixedDelay<END_MOD>(<START_MOD>()<END_MOD> <START_MOD>-><END_MOD> <START_MOD>availableUpdates()<END_MOD>, 15, rateInMinutes, java.util.concurrent.TimeUnit.MINUTES); } }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.info( initializing {} getClass().getSimpleName()); isoDomainRefreshRate = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AutoRepoDomainRefreshTime)) * (org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.MIN_TO_MILLISECONDS); <START_MOD>executor<END_MOD>.<START_MOD>scheduleWithFixedDelay<END_MOD>(<START_MOD>()<END_MOD> <START_MOD>-><END_MOD> <START_MOD>fetchIsoDomains()<END_MOD>, 300000, isoDomainRefreshRate, java.util.concurrent.TimeUnit.MILLISECONDS); org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.info( initializing {} getClass().getSimpleName()); }
private void scheduleJobs(long regularInterval, long initialInterval) { <START_MOD>getExecutor()<END_MOD>.<START_MOD>scheduleWithFixedDelay<END_MOD>(<START_MOD>()<END_MOD> <START_MOD>-><END_MOD> <START_MOD>refresh()<END_MOD>, initialInterval, regularInterval, java.util.concurrent.TimeUnit.MINUTES); }
@javax.annotation.PostConstruct private void initialize() { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info( initializing {} getClass().getSimpleName()); java.lang.Integer backupCheckPeriodInHours = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BackupCheckPeriodInHours); if (backupCheckPeriodInHours > 0) { <START_MOD>executor<END_MOD>.<START_MOD>scheduleWithFixedDelay<END_MOD>(<START_MOD>()<END_MOD> <START_MOD>-><END_MOD> <START_MOD>backupCheck()<END_MOD>, backupCheckPeriodInHours, backupCheckPeriodInHours, java.util.concurrent.TimeUnit.HOURS); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info( initializing {} getClass().getSimpleName()); } }
public synchronized void updateQuotaCache() { if (!(isCacheUpdateNeeded())) { return; } log.debug( Quota Cache... long timeStart = java.lang.System.currentTimeMillis(); java.util.List<org.ovirt.engine.core.common.businessentities.Quota> allQuotaIncludingConsumption = getQuotaDao().getAllQuotaIncludingConsumption(); if (allQuotaIncludingConsumption.isEmpty()) { return; } java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.Quota>> newStoragePoolQuotaMap = new java.util.HashMap<>(); java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> newDefaultQuotaIdMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.Quota quota : allQuotaIncludingConsumption) { if (!(newStoragePoolQuotaMap.containsKey(quota.getStoragePoolId()))) { newStoragePoolQuotaMap.put(quota.getStoragePoolId(), new java.util.HashMap()); } newStoragePoolQuotaMap.get(quota.getStoragePoolId()).put(quota.getId(), quota); if (quota.isDefault()) { newDefaultQuotaIdMap.put(quota.getStoragePoolId(), quota.getId()); } } lock.writeLock().lock(); try { storagePoolQuotaMap = newStoragePoolQuotaMap; storagePoolDefaultQuotaIdMap = newDefaultQuotaIdMap; } finally { lock.writeLock().unlock(); } long timeEnd = java.lang.System.currentTimeMillis(); log.info( Cache updated. ({} msec) (timeEnd - timeStart)); }
public void availableUpdates() { hostDao.getAll().stream().filter(( h) -> h.getStatus().isEligibleForCheckUpdates()).forEach(this::submitCheckUpdatesForHost); }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info( initializing {} getClass().getSimpleName()); <START_MOD>executor<END_MOD>.<START_MOD>scheduleWithFixedDelay<END_MOD>(<START_MOD>()<END_MOD> <START_MOD>-><END_MOD> <START_MOD>onTimer()<END_MOD>, 0, 7, java.util.concurrent.TimeUnit.DAYS); org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info( initializing {} getClass().getSimpleName()); }
public void triggerNow() { if ((<START_MOD>updateTimerJob<END_MOD>) != null) { <START_MOD>try { updateTimerJob<END_MOD>.<START_MOD>cancel<END_MOD>(<START_MOD>true); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.storage.ovfstore.OvfDataUpdater.log.debug( cancelling existing job: {} org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)<END_MOD>); } }<START_MOD> updateTimerJob = schedulerService.scheduleWithFixedDelay(this::ovfUpdate, 0, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.OvfUpdateIntervalInMinutes), java.util.concurrent.TimeUnit.MINUTES); }<END_MOD>
public void onTimer() { java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(java.util.Comparator.naturalOrder()); if (retVal.isPresent()) { org.ovirt.engine.core.compat.Version version = retVal.get(); storagePoolDao.getAll().stream().filter(( storagePool) -> (version.compareTo(storagePool.getCompatibilityVersion())) > 0).forEach(( storagePool) -> logAlert(version, storagePool)); } }
<START_MOD>@java.lang.Override public java.util.Date getNextRunTime(javax.enterprise.concurrent.LastExecution lastExecution, java.util.Date date) { java.util.Date nextExecutionDate = generator.next(new java.util.Date()); return nextExecutionDate; }<END_MOD>
@javax.annotation.PostConstruct public void initialize() { org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info( initializing {} getClass().getSimpleName()); succeededJobTime = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SucceededJobCleanupTimeInMinutes); failedJobTime = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.FailedJobCleanupTimeInMinutes); java.lang.Integer cleanupFrequency = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.JobCleanupRateInMinutes); <START_MOD>executor.scheduleWithFixedDelay(() -> cleanCompletedJob()<END_MOD>, cleanupFrequency, cleanupFrequency, java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info( initializing {} getClass().getSimpleName()); }
<START_MOD>private<END_MOD> void managePrestartedVmsInAllVmPools()<START_MOD> { try<END_MOD> { vmPoolDao.getAll().stream().filter(( pool) -> (pool.getPrestartedVms()) > 0).forEach(this::managePrestartedVmsInPool); }<START_MOD> catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.VmPoolMonitor.log.error( managing prestarted VMs in all VM pools: {} org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.VmPoolMonitor.log.debug("Exception", t); } }<END_MOD>
public void engineIsRunningNotification() { try { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug( Heart Beat - Start heartBeatVar.setDateTime(new java.util.Date()); dwhHistoryTimekeepingDao.save(heartBeatVar); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug( Heart Beat - End } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.error( updating DWH Heart Beat: {} ex.getMessage()); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Exception", ex); } }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info( initializing {} getClass().getSimpleName()); java.util.Calendar calendar = new java.util.GregorianCalendar(); java.util.Date commandEntityCleanupTime = org.ovirt.engine.core.common.config.Config.<org.ovirt.engine.core.compat.DateTime>getValue(ConfigValues.CommandEntityCleanupTime); calendar.setTimeInMillis(commandEntityCleanupTime.getTime()); java.lang.String cronExpression = java.lang.String.format( %d %d * * ? calendar.get(java.util.Calendar.SECOND), calendar.get(java.util.Calendar.MINUTE), calendar.get(java.util.Calendar.HOUR_OF_DAY)); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info( command entity cleanup manager to run at: {} cronExpression); <START_MOD>executor.schedule(() -> doCleanup()<END_MOD>, new <START_MOD>org.ovirt.engine.core.common.utils.EngineCronTrigger(<END_MOD>cronExpression<START_MOD>)<END_MOD>); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info( initializing {} getClass().getSimpleName()); }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info( initializing {} getClass().getSimpleName()); pollingRate = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AsyncCommandPollingLoopInSeconds); initCommandExecutor(); <START_MOD>org<END_MOD>.<START_MOD>ovirt.engine.core.bll.tasks.CommandCallbacksPoller.executor.scheduleWithFixedDelay<END_MOD>(<START_MOD>()<END_MOD> <START_MOD>-><END_MOD> <START_MOD>invokeCallbackMethods()<END_MOD>, pollingRate, pollingRate, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info( initializing {} getClass().getSimpleName()); }
public void <START_MOD>ovfUpdate<END_MOD>()<START_MOD> { try<END_MOD> { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> storagePools = storagePoolDao.getAllByStatus(StoragePoolStatus.Up); updateOvfData(storagePools); }<START_MOD> catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.storage.ovfstore.OvfDataUpdater.log.error( updating ovf data: {} org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.storage.ovfstore.OvfDataUpdater.log.debug("Exception", t); } }<END_MOD>
<START_MOD>private<END_MOD> void <START_MOD>doCleanup<END_MOD>() { try { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info( deleteAgedOutCommandEntities org.ovirt.engine.core.compat.DateTime latestTimeToKeep = org.ovirt.engine.core.compat.DateTime.getNow().addDays(((org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.CommandEntityAgingThreshold)) * (-1))); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsBeforeDate(latestTimeToKeep); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info( deleteAgedOutCommandEntities } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.error( failed with exception e); } }
public void cleanCompletedJob() { java.util.Date succeededJobsDeleteTime = new java.util.Date(((java.lang.System.currentTimeMillis()) - (java.util.concurrent.TimeUnit.MILLISECONDS.convert(succeededJobTime, java.util.concurrent.TimeUnit.MINUTES)))); java.util.Date failedJobsDeleteTime = new java.util.Date(((java.lang.System.currentTimeMillis()) - (java.util.concurrent.TimeUnit.MILLISECONDS.convert(failedJobTime, java.util.concurrent.TimeUnit.MINUTES)))); try { jobDao.deleteCompletedJobs(succeededJobsDeleteTime, failedJobsDeleteTime); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.error( to delete completed jobs: {} e.getMessage()); org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.debug("Exception", e); } }
@javax.annotation.PostConstruct private void init() { autoStartVmsToRestart = new java.util.concurrent.CopyOnWriteArraySet<>(getInitialVmsToStart()); int autoStartVmsRunnerIntervalInSeconds = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AutoStartVmsRunnerIntervalInSeconds); <START_MOD>executor<END_MOD>.<START_MOD>scheduleWithFixedDelay<END_MOD>(<START_MOD>()<END_MOD> <START_MOD>-><END_MOD> <START_MOD>startFailedAutoStartVms()<END_MOD>, autoStartVmsRunnerIntervalInSeconds, autoStartVmsRunnerIntervalInSeconds, java.util.concurrent.TimeUnit.SECONDS); }
public org.ovirt.api.metamodel.concepts.Method createMethod(com.thoughtworks.qdox.model.JavaClass javaClass, org.ovirt.api.metamodel.concepts.Service service) { org.ovirt.api.metamodel.concepts.Method method = new org.ovirt.api.metamodel.concepts.Method(); analyzeName(javaClass, method); <START_MOD>if ((org.ovirt.api.metamodel.analyzer.ModelAnalyzer.GET_METHOD_NAME.equals(method.getName())) || (org.ovirt.api.metamodel.analyzer.ModelAnalyzer.LIST_METHOD_NAME.equals(method.getName()))) { addFollowParameter(method); } <END_MOD>analyzeAnnotations(javaClass, method); analyzeDocumentation(javaClass, method); javaClass.getMethods().forEach(( x) -> analyzeMethodMember(x, method)); method.setDeclaringService(service); createSignatures(javaClass, service, method); return method; }
<START_MOD>private void registerIfaceInMacPool(org.ovirt.engine.core.common.businessentities.network.VmNic iface, boolean reassignMac) { if (reassignMac) { iface.setMacAddress(macPool.allocateNewMac()); } else { if (!(macPool.addMac(iface.getMacAddress()))) { auditLogMacInUse(iface); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.MAC_ADDRESS_IS_IN_USE); } } }<END_MOD>
@org.junit.Test public void add() { runAddAndVerify(org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(), false, times(0)); }
@org.junit.Test public void addWithExistingMacAddressSucceed() { org.ovirt.engine.core.common.businessentities.network.VmNic iface = org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(); runAddAndVerify(iface, true, times(1)); }
@org.junit.Test public void removeAll() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces = java.util.Arrays.asList(org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(), org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface()); when(vmNicDao.getAllForVm(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(interfaces); vmInterfaceManager.<START_MOD>removeAllAndReleaseMacAddresses<END_MOD>(org.ovirt.engine.core.compat.Guid.newGuid()); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { verifyRemoveAllDelegatedCorrectly(iface); } }
public org.ovirt.engine.core.bll.network.macpool.MacPool createMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool, boolean engineStartup) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges macPoolUsingRanges = new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges(macPool.getId(), org.ovirt.engine.core.utils.MacAddressRangeUtils.macPoolToRanges(macPool), macPool.isAllowDuplicateMacAddresses(), auditLogDirector); macPoolUsingRanges.initialize(engineStartup, <START_MOD>macsToAllocate<END_MOD>(macPool.getId())); return macPoolUsingRanges; }
protected void removeFromExternalNetworks(java.util.List<<START_MOD>? extends <END_MOD>org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { new org.ovirt.engine.core.bll.network.ExternalNetworkManager(iface).deallocateIfExternal(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); }
protected void addVmInterfaces() { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(macPool); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getClusterId(), org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getStoragePoolId(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_IMPORT_VM_INVALID_INTERFACES); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = getVm().getInterfaces(); vmInterfaceManager.sortVmNics(nics, getVm().getStaticData().getManagedDeviceMap()); if ((!(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().isImportAsNewEntity())) && (isExternalMacsToBeReported())) { reportExternalMacs(); } for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : getVm().getInterfaces()) { initInterface(iface); vnicProfileHelper.updateNicWithVnicProfileForUser(iface, org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCurrentUser()); boolean reassignMac = (shouldMacBeReassigned(iface)) || (org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().isImportAsNewEntity()); vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCompensationContext(), reassignMac); macsAdded.add(iface.getMacAddress()); } vnicProfileHelper.auditInvalidInterfaces(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getVmName()); }
<START_MOD>private void allocateMacsMissingInMacPool(org.ovirt.engine.core.bll.network.macpool.MacPool macPool, java.util.Map<java.lang.String, java.lang.Long> preexistingMacsUsageFrequency, java.util.Map<java.lang.String, java.lang.Long> macsFromRequestUsageFrequency) { java.util.List<java.lang.String> macsToAcquire = new java.util.LinkedList<>(); for (java.util.Map.Entry<java.lang.String, java.lang.Long> entry : macsFromRequestUsageFrequency.entrySet()) { java.lang.String mac = entry.getKey(); java.lang.Long targetUsage = entry.getValue(); java.lang.Long currentUsage = preexistingMacsUsageFrequency.get(mac); long macToAcquire = (currentUsage == null) ? targetUsage : targetUsage - currentUsage; java.util.stream.LongStream.range(0, macToAcquire).forEach(( e) -> macsToAcquire.add(mac)); } macPool.addMacs(macsToAcquire); }<END_MOD>
protected void runAddAndVerify(org.ovirt.engine.core.common.businessentities.network.VmNic iface, boolean reserveExistingMac, org.mockito.verification.VerificationMode addMacVerification) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = mock(org.ovirt.engine.core.common.osinfo.OsRepository.class); when(vmInterfaceManager.getOsRepository()).thenReturn(osRepository); when(osRepository.hasNicHotplugSupport(anyInt(), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(true); vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.context.NoOpCompensationContext.getInstance(), reserveExistingMac); if (reserveExistingMac) { verify(macPool, times(1)).forceAddMac(iface.getMacAddress()); } else { verifyZeroInteractions(macPool); } verifyAddDelegatedCorrectly(iface, addMacVerification); }
@javax.interceptor.AroundInvoke public java.lang.Object manageTransaction(javax.interceptor.InvocationContext ctx) throws java.lang.Exception { long start = java.lang.System.currentTimeMillis(); try { return ctx.proceed(); } catch (java.lang.Exception e) { throw e; } finally { org.ovirt.engine.core.common.di.interceptor.<START_MOD>LoggingInterceptor<END_MOD>.logger.<START_MOD>debug<END_MOD>( {}<START_MOD>, params: {},<END_MOD> elapsed: {}ms ctx.getMethod<START_MOD>().getName(), ctx.getParameters<END_MOD>(), ((java.lang.System.currentTimeMillis()) - start)); } }
<START_MOD>@org.ovirt.engine.core.common.di.interceptor.Loggable <END_MOD>@java.lang.Override public org.ovirt.engine.core.common.queries.QueryReturnValue runQuery(org.ovirt.engine.core.common.queries.QueryType actionType, org.ovirt.engine.core.common.queries.QueryParametersBase parameters) { return runQueryImpl(actionType, parameters, true, null); }
<START_MOD>@org.ovirt.engine.core.common.di.interceptor.Loggable <END_MOD>@java.lang.Override public org.ovirt.engine.core.common.action.ActionReturnValue runAction(org.ovirt.engine.core.common.action.ActionType actionType, org.ovirt.engine.core.common.action.ActionParametersBase parameters) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = notAllowToRunAction(actionType); if (returnValue != null) { return returnValue; } return runActionImpl(actionType, parameters, false, null); }
<START_MOD>private void changeScsiDeviceToVirtioScsi(java.util.Map<java.lang.String, java.lang.Object> vmStruct) { @java.lang.SuppressWarnings("unchecked") java.util.Map<java.lang.String, java.lang.Object>[] devices = ((java.util.Map<java.lang.String, java.lang.Object>[]) (vmStruct.get(VdsProperties.Devices))); java.util.Arrays.stream(devices).filter(( device) -> VdsProperties.Controller.equals(device.get(VdsProperties.Type))).filter(( device) -> VdsProperties.Scsi.equals(device.get(VdsProperties.Device))).filter(( device) -> VdsProperties.VirtioScsi.equals(device.get(VdsProperties.Model))).forEach(( device) -> { device.put(VdsProperties.Device, VdsProperties.VirtioScsi); device.remove(VdsProperties.Model); }); }<END_MOD>
protected void initAppsTable() { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, true); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String> appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String>() { @java.lang.Override public java.lang.String getValue(java.lang.String appName) { return appName; } }; appsTable.addColumn(appNameColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterEntityInfoPanel.constants.nameSnapshot()); appsTable.setRowData(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); appsTable.setSelectionModel(new com.google.gwt.view.client.NoSelectionModel()); }
<START_MOD>private void resizeToFullHeight() { scrollPanel.setHeight(((calculateTotalAvailableSpace()) + (Unit.PX.getType()))); }<END_MOD>
<START_MOD>private void resizeGridToFullHeight() { int top = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getAbsoluteTop(); int windowHeight = com.google.gwt.user.client.Window.getClientHeight(); int contentHeight = this.getTableBodyElement().getOffsetHeight(); if (contentHeight == 0) { contentHeight = org.ovirt.engine.ui.common.widget.table.ActionCellTable.NO_ITEMS_HEIGHT; } else { contentHeight += getGridHeaderHeight(); } if (isHorizontalScrollbarVisible()) { contentHeight += scrollbarThickness; } contentHeight += 3; int maxGridHeight = windowHeight - top; maxGridHeight -= org.ovirt.engine.ui.common.widget.table.ActionCellTable.GRID_SUBTRACT; if ((top > 0) && (top < windowHeight)) { super.setHeight(((java.lang.Math.min(maxGridHeight, contentHeight)) + (Unit.PX.getType()))); } org.ovirt.engine.ui.common.widget.table.ActionCellTable.redraw(); }<END_MOD>
<START_MOD>public static int determineScrollbarThickness() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); panel.getElement().getStyle().setWidth(100, Unit.PX); panel.getElement().getStyle().setHeight(100, Unit.PX); panel.getElement().getStyle().setOverflow(Overflow.SCROLL); com.google.gwt.dom.client.Document.get().getBody().appendChild(panel.getElement()); int scrollbarHeight = (panel.getOffsetHeight()) - (panel.getElement().getClientHeight()); com.google.gwt.dom.client.Document.get().getBody().removeChild(panel.getElement()); return scrollbarHeight; }<END_MOD>
private void initAppsTable() { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, true); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String> appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String>() { @java.lang.Override public java.lang.String getValue(java.lang.String appName) { return appName; } }; appsTable.addColumn(appNameColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotInfoPanel.constants.nameSnapshot()); appsTable.setRowData(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); appsTable.setSelectionModel(new com.google.gwt.view.client.NoSelectionModel()); }
<START_MOD>protected static com.google.gwt.user.client.ui.Widget createDefaultLoadingIndicator(org.ovirt.engine.ui.common.widget.table.Resources resources) { com.google.gwt.resources.client.ImageResource loadingImg = resources.dataGridLoading(); if (loadingImg == null) { return null; } com.google.gwt.user.client.ui.Image image = new com.google.gwt.user.client.ui.Image(loadingImg); image.getElement().getStyle().setMarginTop(30.0, Unit.PX); return image; }<END_MOD>
public void switchTab(org.gwtbootstrap3.client.ui.TabListItem tabItem) { boolean found = false; for (int i = 0; i < (navTabs.getWidgetCount()); i++) { <START_MOD>org.gwtbootstrap3.client.ui.TabListItem tabListItem = ((org.gwtbootstrap3.client.ui.TabListItem) (navTabs.getWidget(i))); <END_MOD>if (tabItem.getText().equals(<START_MOD>tabListItem<END_MOD>.getText())) { <START_MOD>tabListItem<END_MOD>.showTab(); org.gwtbootstrap3.client.ui.TabPane tabPane = ((org.gwtbootstrap3.client.ui.TabPane) (tabContent.getWidget(i))<START_MOD>); tabContent.remove(tabPane); tabContent.insert(tabPane, i<END_MOD>); ((com.google.gwt.user.client.ui.FlowPanel) (tabPane.getWidget(0))).insert(tabHeaderContainer, 0); tabPane.getWidget(0).setHeight(height); tabPane.setActive(true); activeTab = ((org.gwtbootstrap3.client.ui.TabListItem) (navTabs.getWidget(i))); found = true; } else { org.gwtbootstrap3.client.ui.TabPane tabPane = ((org.gwtbootstrap3.client.ui.TabPane) (tabContent.getWidget(i))); ((com.google.gwt.user.client.ui.FlowPanel) (tabPane.getWidget(0))).remove(tabHeaderContainer); tabPane.setActive(false); } } if ((!found) && ((navTabs.getWidgetCount()) > 0)) { ((org.gwtbootstrap3.client.ui.TabListItem) (navTabs.getWidget(0))).showTab(); org.gwtbootstrap3.client.ui.TabPane tabPane = ((org.gwtbootstrap3.client.ui.TabPane) (tabContent.getWidget(0))); ((com.google.gwt.user.client.ui.FlowPanel) (tabPane.getWidget(0))).insert(tabHeaderContainer, 0); tabPane.setActive(true); } }
private void initNetworksTable() { networksTable.enableColumnResizing(); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network> nameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.Network network) { return network.getName(); } }; networksTable.addColumn(nameColumn, org.ovirt.engine.ui.common.widget.uicommon.popup.pool.IscsiBondPopupWidget.constants.name(), "40%"); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network> descriptionColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.Network network) { return network.getDescription(); } }; networksTable.addColumn(descriptionColumn, org.ovirt.engine.ui.common.widget.uicommon.popup.pool.IscsiBondPopupWidget.constants.description(), "60%"); <START_MOD>}<END_MOD>
public void enableColumnResizing() { if (isTableHeaderVisible()) { table.enableColumnResizing(); } }
void updateListHeader(org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel model) { java.lang.String width = "100px"; listHeader = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, ((com.google.gwt.user.cellview.client.<START_MOD>DataGrid<END_MOD>.Resources) (com.google.gwt.core.client.GWT.create(org.ovirt.engine.ui.common.PopupSimpleTableResources.class))), true); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.elementName(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.storageDomainDisk(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.currentQuota(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.quotaDisk(), width); listHeader.setRowData(new java.util.ArrayList()); listHeaderPanel.setWidget(listHeader); }
<START_MOD>@java.lang.SuppressWarnings("unchecked") <END_MOD>private static java.util.List<org.ovirt.engine.api.model.BaseResource> getInlineResources(java.lang.Object obj) { java.util.ArrayList<org.ovirt.engine.api.model.BaseResource> ret = new java.util.ArrayList<>(); for (java.lang.reflect.Method method : org.ovirt.engine.api.restapi.util.LinkHelper.getRelevantMethods(obj.getClass())) { java.lang.Object inline = null; try { inline = method.invoke(obj); } catch (java.lang.Exception e) { } if (inline != null) { if (inline instanceof org.ovirt.engine.api.model.BaseResource) { ret.add(((org.ovirt.engine.api.model.BaseResource) (inline))); } else <START_MOD>if (inline instanceof org.ovirt.engine.api.model.BaseResources) { org.ovirt.engine.api.model.BaseResources entities = ((org.ovirt.engine.api.model.BaseResources) (inline)); java.lang.reflect.Method getter = org.ovirt.engine.api.utils.EntityHelper.getCollectionGetter(entities); try { java.util.List<org.ovirt.engine.api.model.BaseResource> entitiesList = ((java.util.List<org.ovirt.engine.api.model.BaseResource>) (getter.invoke(entities))); for (org.ovirt.engine.api.model.BaseResource entity : entitiesList) <END_MOD>{ ret.<START_MOD>add(entity); } } catch (java.lang.Exception e) { } } else { ret.<END_MOD>addAll(org.ovirt.engine.api.restapi.util.LinkHelper.getInlineResources(inline)); } } } return ret; }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public <T> T getValue(org.ovirt.engine.core.common.config.ConfigValues name, java.lang.String version) { java.util.Map<java.lang.String, java.lang.Object> values = org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.get(name.toString()); if ((values != null) && (values.containsKey(version))) { <START_MOD>return<END_MOD> ((T) (values.get(version))); } <START_MOD>throw<END_MOD> new <START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>IllegalArgumentException<END_MOD>(<START_MOD>((<END_MOD>(name.toString()) <START_MOD>+<END_MOD>   <START_MOD>has<END_MOD> <START_MOD>no value for version:   + version<END_MOD>)); }
@java.lang.Override protected void executeQueryCommand() { <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = diskDao.getAllFromDisksIncludingSnapshotsByDiskId(<END_MOD>org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.<START_MOD>getParameters().getId(), org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getUserID(), org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getParameters().isFiltered()); if (((disks.size()) == 1) && ((disks.get(0)) instanceof org.ovirt.engine.core.common.businessentities.storage.LunDisk)) { org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.<END_MOD>getQueryReturnValue().setReturnValue(<START_MOD>disks<END_MOD>.get(<START_MOD>0)); return; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = new java.util.ArrayList<>(); disks.stream().filter(( disk) -> !(disk instanceof org.ovirt.engine.core.common.businessentities.storage.LunDisk)).map(( disk) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))).forEach(( disk) -> { if (disk.getActive()) { disk.getSnapshots().add(org.ovirt.engine.core.common.businessentities.storage.DiskImage.copyOf(disk)); activeDisk = disk; activeDisk.getSnapshots().addAll(snapshots); } else { if ((activeDisk) != null) { activeDisk.getSnapshots().add(disk); } else { snapshots.add(disk); } } }); <END_MOD>org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.<START_MOD>getQueryReturnValue().setReturnValue(activeDisk); }<END_MOD>
<START_MOD>@java.lang.Override protected void setUpQueryExpectations(java.lang.String query, java.lang.Object failure) throws java.lang.Exception { setUpEntityQueryExpectations(1, failure); }<END_MOD>
<START_MOD>@java.lang.Override protected void setUpQueryExpectations(java.lang.String query) throws java.lang.Exception { setUpEntityQueryExpectations(1); }<END_MOD>
<START_MOD>protected void setUpEntityQueryExpectations(int times, java.lang.Object failure) throws java.lang.Exception { while ((times--) > 0) { setUpEntityQueryExpectations(QueryType.GetAllDisks, org.ovirt.engine.core.common.queries.QueryParametersBase.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, getEntityList(), failure); } }<END_MOD>
<START_MOD>protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> getEntityList() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> entities = new java.util.ArrayList<>(); for (int i = 0; i < (NAMES.length); i++) { entities.add(getEntity(i)); } return entities; }<END_MOD>
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = storageDomainDao.get(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); if (storageDomain.getStorageType().isCinderDomain()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = diskImageDao.getAllForStorageDomain(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getQueryReturnValue().setReturnValue(diskImages); } else { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = diskImageDao.getAllSnapshotsForStorageDomain(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); <START_MOD>org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getQueryReturnValue().setReturnValue(imagesHandler.fillSnapshotsToDiskImages(diskImages)<END_MOD>); } }
@java.lang.Override public org.ovirt.engine.api.model.Disks list() { return mapCollection(getBackendCollection(QueryType.GetAllDisks, new org.ovirt.engine.core.common.queries.QueryParametersBase())); }
<START_MOD>@java.lang.Override public void onBind() { super.onBind(); registerHandler(((org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractOverlayPresenterWidget.ViewDef) (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractOverlayPresenterWidget.getView())).getCloseButton().addClickHandler(( e) -> org.ovirt.engine.ui.webadmin.section.main.presenter.RevealOverlayContentEvent.fire(this, new org.ovirt.engine.ui.webadmin.section.main.presenter.RevealOverlayContentEvent(null)))); }<END_MOD>
private void activateDataCenter() { org.ovirt.engine.core.common.businessentities.StorageDomain masterDomain = storageDomainDao.getStorageDomains(org.ovirt.engine.core.bll.storage.FenceVdsManualyCommand.getStoragePool().getId(), StorageDomainType.Master).stream().findFirst().orElse(null); org.ovirt.engine.core.bll.storage.FenceVdsManualyCommand.calcStoragePoolStatusByDomainsStatus(); <START_MOD>log.info( domain id:'{}' Master domain status:'{}' (masterDomain != null ? masterDomain.getId() : null), (masterDomain != null ? masterDomain.getStatus() : null)); <END_MOD>if ((masterDomain != null) && ((((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)) || ((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Unknown))) || ((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Inactive)))) { <START_MOD>resetSPM<END_MOD>(); } }
public void refresh() { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.clear(); java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list = org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.getVdcOptionDao().getAll(); <START_MOD>list = moveDependentToEnd(list); <END_MOD>for (org.ovirt.engine.core.common.businessentities.VdcOption option : list) { try { if (((!(org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.containsKey(option.getOptionName()))) || (!(org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.get(option.getOptionName()).containsKey(option.getVersion())))) || (org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.isReloadable(option.getOptionName()))) { updateOption(option); } } catch (java.lang.NoSuchFieldException e) { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.log.error( refreshing field '{}': does not exist in class {}. option.getOptionName(), org.ovirt.engine.core.common.config.ConfigValues.class.getSimpleName()); } } }
<START_MOD>private java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> moveDependentToEnd(java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list) { java.util.function.Predicate<org.ovirt.engine.core.common.businessentities.VdcOption> isDependent = ( o) -> { org.ovirt.engine.core.dal.dbbroker.generic.EnumValue parsed = parseEnumValue(o.getOptionName()); if (parsed != null) { org.ovirt.engine.core.common.config.OptionBehaviourAttribute behaviour = parsed.getOptionBehaviour(); if (behaviour == null) { return false; } return (behaviour.behaviour()) == (ValueDependent); } return false; }; java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> optionsList = list.stream().filter(isDependent.negate()).collect(java.util.stream.Collectors.toList()); optionsList.addAll(list.stream().filter(isDependent).collect(java.util.stream.Collectors.toList())); return optionsList; }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() {<START_MOD> addCustomValue("SourceIP", (org.apache.commons.lang.StringUtils.isEmpty(sourceIp) ? UNKNOWN : sourceIp));<END_MOD> return org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_VDC_LOGOUT : org.ovirt.engine.core.common.AuditLogType.USER_VDC_LOGOUT_FAILED; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.aaa.AuthenticationProfile profile = sessionDataContainer.getProfile(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId()); if (profile == null) { org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.setSucceeded(false); } else { <START_MOD>sourceIp = sessionDataContainer.getSourceIp(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId()); <END_MOD>sessionDataContainer.setSessionValid(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId(), false); org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.setSucceeded(true); } }
<START_MOD>public int getTotalNumberOfMacs() { return totalNumberOfMacs; }<END_MOD>
<START_MOD>public int getTotalNumberOfMacs() { int count = 0; for (org.ovirt.engine.core.bll.network.macpool.Range range : ranges) { count += range.getTotalNumberOfMacs(); } return count; }<END_MOD>
<START_MOD>private void updateBackup() { if (((getCurrentStorageItem().getRole()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) || ((getCurrentStorageItem().getRole()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport))) { isBackup().setIsAvailable(false); isBackup().setEntity(false); return; } boolean backupSupported = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.BackupSupported, getDataCenter().getSelectedItem().getCompatibilityVersion().toString()))); isBackup().setIsAvailable(backupSupported); if (isBackup().getIsAvailable()) { if (isNewStorage()) { isBackup().setEntity(false); } else { isBackup().setEntity(getStorage().isBackup()); } } }<END_MOD>
private void saveDefaultedStorageProperties(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model, org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic) { storageDomainStatic.setWipeAfterDelete(model.getWipeAfterDelete().getEntity()); storageDomainStatic.setDiscardAfterDelete(model.getDiscardAfterDelete().getEntity()); storageDomainStatic.setWarningLowSpaceIndicator(model.getWarningLowSpaceIndicator().getEntity()); storageDomainStatic.setCriticalSpaceActionBlocker(model.getCriticalSpaceActionBlocker().getEntity()); <START_MOD>storageDomainStatic.setBackup(model.isBackup().getEntity()); <END_MOD>}
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> isBackup() { return backup; }<END_MOD>
<START_MOD>private void writeMemoryBacking() { if (!(org.ovirt.engine.core.common.utils.HugePageUtils.isBackedByHugepages(vm.getStaticData()))) { return; } writer.writeStartElement("memoryBacking"); writer.writeStartElement("hugepages"); writer.writeStartElement("page"); int hugepageSize = java.lang.Integer.parseInt(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePageSize(vm.getStaticData())); java.util.List<java.lang.Integer> hugepageSizes = hostStatisticsSupplier.get().getHugePages().stream().map(HugePage::getSizeKB).collect(java.util.stream.Collectors.toList()); if (!(hugepageSizes.contains(hugepageSizes))) { switch (vm.getClusterArch().getFamily()) { case x86 : hugepageSize = 2048; break; case ppc : hugepageSize = 16384; break; } } writer.writeAttributeString("size", java.lang.String.valueOf(hugepageSize)); writer.writeEndElement(); writer.writeEndElement(); writer.writeEndElement(); }<END_MOD>
<START_MOD>public java.util.concurrent.Future<org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse> call(org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest req, org.ovirt.vdsm.jsonrpc.client.BrokerCommandCallback callback) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { final org.ovirt.vdsm.jsonrpc.client.internal.Call call = new org.ovirt.vdsm.jsonrpc.client.internal.Call(req, executorService, callback); this.tracker.registerCall(req, call); retryCall(req, call); try { this.getClient().sendMessage(jsonToByteArray(req.toJson())); } finally { retryCall(req, call); } return call; }<END_MOD>
<START_MOD>public void setExecutorService(java.util.concurrent.ExecutorService executorService) { this.executorService = executorService; }<END_MOD>
public void processResponse(org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse response) { org.codehaus.jackson.JsonNode id = response.getId(); if ((org.codehaus.jackson.node.NullNode.class.isInstance(id)) || (id == null)) { this.tracker.processIssue(response); return; } org.ovirt.vdsm.jsonrpc.client.internal.JsonRpcCall call = this.tracker.removeCall(response.getId()); if (call == null) { this.log.error( able to update response for {} response.getId()); return; } call.addResponse(response); <START_MOD>if (((call.getCallback()) != null) && ((call.getExecutor()) != null)) { call.getExecutor().submit(() -> call.getCallback().onResponse(java.util.Collections.emptyMap())); } }<END_MOD>
<START_MOD>void onFailure(java.lang.Throwable t);<END_MOD>
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info( initializing {} getClass().getSimpleName()); pollingRate = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AsyncCommandPollingLoopInSeconds); <START_MOD>repeatEndMethodsOnFailMaxRetries = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.RepeatEndMethodsOnFailMaxRetries); <END_MOD>initCommandExecutor(); schedulerUtil.scheduleAFixedDelayJob(this, "invokeCallbackMethods", new java.lang.Class[]{ }, new java.lang.Object[]{ }, pollingRate, pollingRate, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info( initializing {} getClass().getSimpleName()); }
@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); <START_MOD>provider.setId(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID); provider.setUrl(java.lang.String.format("https://%s/", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_IP)); <END_MOD>when(providerDao.get(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); when(<START_MOD>providerDao.getAllByTypes(ProviderType.EXTERNAL_NETWORK)).thenReturn(java.util.Arrays.asList(provider)); when(<END_MOD>providerProxyFactory.create(provider)).thenReturn(networkProviderProxy); <START_MOD>when(networkDao.getAllForCluster(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.CLUSTER_ID)).thenReturn(java.util.Arrays.asList(createNetwork())); <END_MOD>}
public boolean isGraphicsAndDisplaySupported(int osId, java.util.Collection<org.ovirt.engine.core.common.businessentities.GraphicsType> graphics, org.ovirt.engine.core.common.businessentities.DisplayType displayType, java.util.List<java.lang.String> reasons, org.ovirt.engine.core.compat.Version clusterVersion) { boolean result = <START_MOD>vmValidationUtils<END_MOD>.isGraphicsAndDisplaySupported(osId, clusterVersion, graphics, displayType); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_VM_DISPLAY_TYPE_IS_NOT_SUPPORTED_BY_OS.name()); } return result; }
public boolean isOsTypeSupportedForVirtioScsi(int osId, org.ovirt.engine.core.compat.Version clusterVersion, java.util.List<java.lang.String> reasons) { boolean result = <START_MOD>vmValidationUtils<END_MOD>.isDiskInterfaceSupportedByOs(osId, clusterVersion, DiskInterface.VirtIO_SCSI); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI.name()); } return result; }
public java.util.Set<org.ovirt.engine.core.compat.Guid> fetchVmDisks(org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument) { java.util.Set<org.ovirt.engine.core.compat.Guid> disksIds = new java.util.HashSet<>(); XmlNode references = xmlDocument.selectSingleNode("//*/References"); for (XmlNode file : references.selectNodes("File")) { disksIds.add(org.ovirt.engine.core.compat.Guid.createGuidFromString(file.attributes.get("ovf:href").getValue().substring(0, org.ovirt.engine.core.utils.OvfUtils.GUID_LENGTH))); } return disksIds; }
public boolean isOsTypeSupported(int osId, org.ovirt.engine.core.common.businessentities.ArchitectureType architectureType, java.util.List<java.lang.String> reasons) { boolean result = <START_MOD>vmValidationUtils<END_MOD>.isOsTypeSupported(osId, architectureType); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_IS_NOT_SUPPORTED_BY_ARCHITECTURE_TYPE.toString()); } return result; }
@java.lang.Override public void onLoad() { super.onLoad(); int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getLoadingIndicator()) != null) ? LOADING_HEIGHT : NO_ITEMS_HEIGHT; if (rowCount > 0) { height = rowCount * (ROW_HEIGHT); } updateGridSize(height); }
<START_MOD>@java.lang.Override public void onLoad() { super.onLoad(); int rowCount = org.ovirt.engine.ui.common.widget.editor.ListModelObjectCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.editor.ListModelObjectCellTable.getLoadingIndicator()) != null) ? LOADING_HEIGHT : NO_ITEMS_HEIGHT; if (rowCount > 0) { height = rowCount * (ROW_HEIGHT); } updateGridSize(height); }<END_MOD>
private void resizeGridToContentHeight(int height) { int top = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getAbsoluteTop(); int maxGridHeight = ((com.google.gwt.user.client.Window.getClientHeight()) - top) - (org.ovirt.engine.ui.common.widget.table.ActionCellTable.GRID_SUBTRACT); int contentHeight = <START_MOD>org.ovirt.engine.ui.common.widget.table.ActionCellTable.<END_MOD>determineBrowserHeightAdjustment(height); if (<START_MOD>org.ovirt.engine.ui.common.widget.table.ActionCellTable.isHorizontalScrollbarVisible()) { contentHeight += scrollbarThickness; } if (<END_MOD>contentHeight > maxGridHeight) { contentHeight = maxGridHeight; } if (contentHeight > 0) { super.setHeight((contentHeight + (Unit.PX.getType()))); } org.ovirt.engine.ui.common.widget.table.ActionCellTable.redraw(); }
public void updateGridSize() { int rowCount = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.table.ActionCellTable.getLoadingIndicator()) != null) ? LOADING_HEIGHT : NO_ITEMS_HEIGHT; if (rowCount > 0) { height = rowCount * (ROW_HEIGHT); } updateGridSize(height); }
<START_MOD>public static boolean isHighPerformanceTypeSupported(org.ovirt.engine.core.compat.Version version) { return java.lang.Boolean.parseBoolean(org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.isHighPerformanceTypeSupported, version.getValue())); }<END_MOD>
<START_MOD>@org.junit.Test public void testGetAllClustersByDefaultNetworkProviderId() { assertThat(dao.getAllClustersByDefaultNetworkProviderId(FixturesTool.DEFAULT_NETWORK_PROVIDER_ID).size(), is(3)); }<END_MOD>
<START_MOD>public void setExpires(long expires) { this.expires = expires; }<END_MOD>
<START_MOD>public long getExpires() { return expires; }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.<START_MOD>ImageTicketInformationReturn<END_MOD> <START_MOD>getImageTicket<END_MOD>(java.lang.String ticketId) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder(<START_MOD>"Host.get_image_ticket"<END_MOD>).withParameter(<START_MOD>"uuid"<END_MOD>, ticketId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey(<START_MOD>"ticketInfo"<END_MOD>); return new org.ovirt.engine.core.vdsbroker.vdsbroker.<START_MOD>ImageTicketInformationReturn<END_MOD>(response); }
<START_MOD>private boolean isReduceVolumeSupported() { return org.ovirt.engine.core.common.FeatureSupported.isReduceVolumeSupported(org.ovirt.engine.core.bll.ReduceImageCommand.getStoragePool().getCompatibilityVersion()); }<END_MOD>
@java.lang.Override public void cleaningCompensationDataAfterSuccess() { macPool.freeMacs(macsToReleaseOnCommit); <START_MOD>log.debug(( successfully executed, releasing macs: {<END_MOD>}<START_MOD> + (macsToReleaseOnCommit))); }<END_MOD>
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { macPool.freeMacs(macs); <START_MOD>log.debug( non-compensation state, immediately releasing macs {<END_MOD>}<START_MOD>. macs); }<END_MOD>
<START_MOD>@org.junit.Test public void testReactionToDuplicatesWhenDuplicatesDuringStartup() throws java.lang.Exception { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges macPoolUsingRanges = createMacPoolDisallowingDuplicates(); macPoolUsingRanges.initialize(true, java.util.Arrays.asList(org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRangesTest.MAC_ADDRESS, org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRangesTest.MAC_ADDRESS)); verify(auditLogDirector).log(any(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl.class), eq(AuditLogType.MAC_ADDRESS_VIOLATES_NO_DUPLICATES_SETTING), anyString()); }<END_MOD>
<START_MOD>@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Snapshot s1, org.ovirt.engine.core.common.businessentities.Snapshot s2) { if (((s1.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE)) || ((s1.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.PREVIEW))) { return -1; } if (((s2.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE)) || ((s2.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.PREVIEW))) { return 1; } return s2.getCreationDate().compareTo(s1.getCreationDate()); }<END_MOD>
@java.lang.Override public void setItems(java.util.Collection value) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots = (value != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.Snapshot>cast(value) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot>(); java.util.Collections.sort(snapshots, <START_MOD>comparator<END_MOD>); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot> sortedSnapshots = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = snapshotsMap.get(snapshot.getId()); if (snapshotModel == null) { snapshotModel = new org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel(); snapshotsMap.put(snapshot.getId(), snapshotModel); } snapshotModel.setEntity(snapshot); if (((snapshot.getType()) <START_MOD>!=<END_MOD> (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE)) <START_MOD>||<END_MOD> ((getInType(SnapshotType.PREVIEW, snapshots)) == null)) { sortedSnapshots.add(<START_MOD>snapshot); } } if ((getInPreview(sortedSnapshots)) != null) { updatePreviewedDiskSnapshots(sortedSnapshots<END_MOD>); } else <START_MOD>{ updateItems(<END_MOD>sortedSnapshots<START_MOD>); } }<END_MOD>
public static org.ovirt.engine.api.model.VmType <START_MOD>mapVmType<END_MOD>(org.ovirt.engine.api.model.VmType <START_MOD>type<END_MOD>) {<START_MOD> if (type == null) { return null; }<END_MOD> switch (type) { case <START_MOD>DESKTOP<END_MOD> : return org.ovirt.engine.api.model.<START_MOD>org.ovirt.engine.core.common.businessentities.<END_MOD>VmType; case <START_MOD>SERVER<END_MOD> : return org.ovirt.engine.api.model.<START_MOD>org.ovirt.engine.core.common.businessentities.<END_MOD>VmType; default : <START_MOD>throw<END_MOD> <START_MOD>new java.lang.IllegalArgumentException((( virtual machine type   + type) + "\""))<END_MOD>; } }
<START_MOD>public static org.ovirt.engine.api.model.VmType mapVmType(org.ovirt.engine.core.common.businessentities.VmType type) { if (type == null) { return null; } switch (type) { case Desktop : return org.ovirt.engine.api.model.VmType.DESKTOP; case Server : return org.ovirt.engine.api.model.VmType.SERVER; default : throw new java.lang.IllegalArgumentException((("Unknown virtual machine type \"" + type) + "\"")); } }<END_MOD>
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.VmType.class, to = org.ovirt.engine.api.model.VmType.class) public static org.ovirt.engine.api.model.VmType map(org.ovirt.engine.core.common.businessentities.VmType type, org.ovirt.engine.api.model.VmType incoming) { switch (type) { case Desktop : return org.ovirt.engine.api.model.VmType.DESKTOP; case Server : return org.ovirt.engine.api.model.VmType.SERVER; <START_MOD>case HighPerformance : return org.ovirt.engine.api.model.VmType.HIGH_PERFORMANCE; <END_MOD>default : return null; } }
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.VmType.class, to = org.ovirt.engine.api.model.VmType.class) public static org.ovirt.engine.api.model.VmType map(org.ovirt.engine.api.model.VmType type, org.ovirt.engine.core.common.businessentities.VmType incoming) { switch (type) { case DESKTOP : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.VmType; case SERVER : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.VmType; case HIGH_PERFORMANCE : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.VmType; default : return null; } }<END_MOD>
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getVmtGuid())) { return failValidation(EngineMessage.VM_POOL_CANNOT_CREATE_FROM_BLANK_TEMPLATE); } if (((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getVmType()) == (org.ovirt.engine.core.common.businessentities.VmType.HighPerformance)) && (!(org.ovirt.engine.core.common.FeatureSupported.isHighPerformanceTypeSupported(org.ovirt.engine.core.bll.AddVmPoolCommand.getEffectiveCompatibilityVersion())))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_HIGH_PERFORMANCE_IS_NOT_SUPPORTED, java.lang.String.format( %s org.ovirt.engine.core.bll.AddVmPoolCommand.getEffectiveCompatibilityVersion())); } if (((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmLargeIcon()) != null) && (!(validate(org.ovirt.engine.core.bll.validator.IconValidator.validate(IconValidator.DimensionsType.LARGE_CUSTOM_ICON, org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmLargeIcon()))))) { return false; } <START_MOD>if ((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getNumOfIoThreads()) > 1) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_NUM_OF_IO_THREADS_CANNOT_EXCEED_ONE_VALUE); } <END_MOD>return true; }
@java.lang.Override protected boolean validate() { if (<START_MOD>org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVds().isPmEnabled()) { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents = fenceAgentDao.getFenceAgentsForHost(org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVdsId()); if ((fenceAgents.size()) == 1) { return failValidation(EngineMessage.VDS_REMOVE_LAST_FENCE_AGENT_PM_ENABLED); } } if (<END_MOD>(((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getId()) == null)) { return failValidation(EngineMessage.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } return super.validate(); }
@java.lang.Override protected void executeCommand() { <START_MOD>createSnapshots<END_MOD>(); }
<START_MOD>protected org.ovirt.engine.core.utils.lock.EngineLock lockVmWithWait() { org.ovirt.engine.core.utils.lock.EngineLock liveStorageMigrationEngineLock = new org.ovirt.engine.core.utils.lock.EngineLock(); liveStorageMigrationEngineLock.setExclusiveLocks(java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.LIVE_STORAGE_MIGRATION, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED))); lockManager.acquireLockWait(liveStorageMigrationEngineLock); return liveStorageMigrationEngineLock; }<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response move(org.ovirt.engine.api.model.Action action) { validateParameters(action, "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid storageDomainId = getStorageDomainId(action); org.ovirt.engine.api.model.Disk disk = get(); org.ovirt.engine.core.compat.Guid imageId = getDiskImageId(disk.getImageId()); org.ovirt.engine.core.compat.Guid sourceStorageDomainId = getSourceStorageDomainId(disk); org.ovirt.engine.core.common.action.MoveDiskParameters <START_MOD>params<END_MOD> = new org.ovirt.engine.core.common.action.MoveDiskParameters(imageId, sourceStorageDomainId, storageDomainId); <START_MOD>params<END_MOD>.setImageGroupID(asGuid(disk.getId())); <START_MOD>return doAction(ActionType.MoveDisks,<END_MOD> params, action); }
<START_MOD>@<END_MOD>java.<START_MOD>lang<END_MOD>.<START_MOD>Override public<END_MOD> java.util.List<org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>utils<END_MOD>.<START_MOD>PermissionSubject<END_MOD>> <START_MOD>getPermissionCheckSubjects<END_MOD>() <START_MOD>{<END_MOD> java.util.List<org.ovirt.engine.core.<START_MOD>bll.utils.PermissionSubject> permissionList = new java.util.ArrayList<>(); permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.<END_MOD>common.<START_MOD>VdcObjectType<END_MOD>.<START_MOD>Disk,<END_MOD> org.ovirt.engine.core.common.businessentities.<START_MOD>ActionGroup<END_MOD>.<START_MOD>CONFIGURE_DISK_STORAGE<END_MOD>)); <START_MOD>return<END_MOD> <START_MOD>permissionList<END_MOD>; }
@org.junit.Test public void testMoveById() throws java.lang.Exception { setUpEntityQueryExpectations(QueryType.GetDiskByDiskId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest.DISK_ID }, getEntity(1)); setUriInfo(setUpActionExpectations(ActionType.MoveDisks, org.ovirt.engine.core.common.action.<START_MOD>MoveDiskParameters<END_MOD>.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, true, true, null, null, true)); verifyActionResponse(resource.move(setUpParams(false)), ("disks/" + (org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest.DISK_ID)), false); }
@java.lang.Override protected void executeCommand() { <START_MOD>org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = diskImageDao.get(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getImageId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements = diskVmElementDao.getAllDiskVmElementsByDiskId(diskImage.getImage().getDiskId()); org.ovirt.engine.core.common.action.ActionType actionType = getMoveActionType(diskVmElements<END_MOD>); if (<START_MOD>actionType == (org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk<END_MOD>)) { <START_MOD>org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters = org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters(); moveDiskParameters.setCommandId(null); <END_MOD>actionReturnValues.<START_MOD>add<END_MOD>(org.ovirt.engine.core.bll.Backend.getInstance().<START_MOD>runInternalAction(actionType, moveDiskParameters, org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.cloneContextAndDetachFromParent()<END_MOD>)); } <START_MOD>else<END_MOD> { <START_MOD>org.ovirt.engine.core.compat.Guid vmId = diskVmElements.get(0).getVmId(); engineLock = lockVmWithWait(vmId); <END_MOD>actionReturnValues.<START_MOD>add<END_MOD>(org.ovirt.engine.core.bll.Backend.getInstance().<START_MOD>runInternalAction(actionType, createLiveMigrateDiskParameters(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters(), vmId), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getContext(), engineLock)<END_MOD>)); } handleChildReturnValue(); org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.setSucceeded(true); }
<START_MOD>protected<END_MOD> <START_MOD>org.ovirt.engine.core.common.action.ActionType<END_MOD> <START_MOD>getMoveActionType<END_MOD>(java.util.List<org.ovirt.engine.core.common.<START_MOD>businessentities<END_MOD>.<START_MOD>storage.DiskVmElement<END_MOD>> <START_MOD>diskVmElement<END_MOD>) { <START_MOD>if (diskVmElement.isEmpty<END_MOD>()<START_MOD>)<END_MOD> <START_MOD>{<END_MOD> <START_MOD>return<END_MOD> org.ovirt.engine.core.<START_MOD>common<END_MOD>.<START_MOD>action<END_MOD>.<START_MOD>ActionType<END_MOD>.<START_MOD>MoveOrCopyDisk; } org<END_MOD>.<START_MOD>ovirt.engine.core.common.businessentities.VM vm = vmDao.get(diskVmElement.get(0).getVmId<END_MOD>()); <START_MOD>if ((vm.isDown()) || (!(diskVmElement.get(0).isPlugged()))) { return org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk; <END_MOD>}<START_MOD> return org.ovirt.engine.core.common.action.ActionType.LiveMigrateDisk; }<END_MOD>
private org.ovirt.engine.core.common.action.LiveMigrateDiskParameters createLiveMigrateDiskParameters(org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters, org.ovirt.engine.core.compat.Guid vmId) { return new org.ovirt.engine.core.common.action.LiveMigrateDiskParameters(moveDiskParameters.getImageId(), moveDiskParameters.getSourceDomainId(), moveDiskParameters.getStorageDomainId(), vmId, moveDiskParameters.getQuotaId(), moveDiskParameters.getDiskProfileId(), <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.bll.storage.disk.MoveDisksCommand.getParameters<END_MOD>().<START_MOD>getImageGroupID<END_MOD>()); }
<START_MOD>@java.lang.Override public java.lang.String toString() { java.util.StringJoiner info = new java.util.StringJoiner(", ", java.lang.String.format("Thread pool: %s has ", poolName), ""); threadStateMap.entrySet().stream().forEach(( entry) -> info.add(java.lang.String.format("%s threads in state %s", entry.getValue(), entry.getKey().name()))); return info.toString(); }<END_MOD>
<START_MOD>private void processThread(java.lang.management.ThreadInfo[] threadInfo) { java.util.Arrays.asList(threadInfo).stream().forEach(( tInfo) -> processThread(tInfo)); }<END_MOD>
<START_MOD>private void processThread(java.lang.management.ThreadInfo threadInfo) { if (threadInfo.getThreadName().startsWith("EE")) { java.lang.String[] threadName = threadInfo.getThreadName().split("-"); if ((threadName.length) > 2) { threadPoolInfoMap.putIfAbsent(threadName[2], new org.ovirt.engine.core.bll.utils.ThreadPoolInfo(threadName[2])); threadPoolInfoMap.get(threadName[2]).processThreadInfo(threadInfo); } } }<END_MOD>
<START_MOD>@javax.annotation.PostConstruct public void init() { try { threadMXBean = java.lang.management.ManagementFactory.getThreadMXBean(); } catch (java.lang.Exception e) { throw new java.lang.IllegalStateException(("Problem getting ThreadMXBean:" + e)); } org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Initializing Thread Monitoring Service"); executor.scheduleWithFixedDelay(this::monitorEngineThreadPools, 0, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ThreadPoolMonitoringIntervalInMinutes), java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Thread Monitoring Service initialized"); }<END_MOD>
<START_MOD>private void monitorEngineThreadPools() { try { threadPoolInfoMap.clear(); java.util.Arrays.asList(threadMXBean.getAllThreadIds()).stream().forEach(( threadId) -> processThread(threadMXBean.getThreadInfo(threadId))); java.util.StringJoiner info = new java.util.StringJoiner("\n", "ThreadPools Info\n", ""); threadPoolInfoMap.entrySet().stream().forEach(( entry) -> info.add(entry.getValue().toString())); org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info(info.toString()); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Exception", ex); } }<END_MOD>
<START_MOD>@java.lang.Override protected void writeHeader() { super.writeHeader(); _writer.setPrefix("ovirt", "http://www.ovirt.org/ovf"); _writer.writeNamespace("ovirt", "http://www.ovirt.org/ovf"); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.api.model.SystemOption get() { try { org.ovirt.engine.core.common.config.ConfigValues config = org.ovirt.engine.core.common.config.ConfigValues.valueOf(id); org.ovirt.engine.core.common.queries.GetSystemOptionParameters parameters = new org.ovirt.engine.core.common.queries.GetSystemOptionParameters(config); java.lang.String version = org.ovirt.engine.api.restapi.util.ParametersHelper.getParameter(httpHeaders, uriInfo, "version"); if ((version != null) && (!(version.isEmpty()))) { parameters.setOptionVersion(version); } org.ovirt.engine.core.common.queries.QueryReturnValue result = runQuery(QueryType.GetSystemOption, parameters); if ((result.getReturnValue()) == null) { return handleError(new org.ovirt.engine.api.restapi.resource.EntityNotFoundException(id), true); } return org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(org.ovirt.engine.api.restapi.types.SystemOptionsMapper.map(result.getReturnValue(), id)); } catch (java.lang.IllegalArgumentException ex) { return handleError(new org.ovirt.engine.api.restapi.resource.EntityNotFoundException(id), true); } }<END_MOD>
@org.junit.Test public void validateVmMemoryCantStartOnVdsHostTooSmall() { vds.setMemFree(8835L); boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsHostTooSmallButLowOverhead() { vds.setMemFree(8835L); <START_MOD>doReturn<END_MOD>(0<START_MOD>).when(vmOverheadCalculator).getEnsuredOverhead(any()<END_MOD>); boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsHighPendingButSwapHelps() { vds.setSwapFree(80L); boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Before public void <START_MOD>prepareTest<END_MOD>() { vds = basicHost(); vm = basicVm(); <START_MOD>doReturn(65).when(vmOverheadCalculator).getEnsuredOverhead(any()); doReturn(0).when(vmOverheadCalculator).getPossibleOverhead(any()); when(vmOverheadCalculator.getTotalRequiredMemoryInMb(vm)).thenCallRealMethod(); when(vmOverheadCalculator.getOverheadMb(vm)).thenCallRealMethod(); <END_MOD>}
@org.junit.Test public void validateVmMemoryCantRunOnVdsSmallHost() { vds.setPhysicalMemMb(5000); boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCanStartOnVds() { boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void validateVmMemoryCanRunOnVdsHighMem() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); vds.setPhysicalMemMb(15000); boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void testBalanceCpuLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_hosts_cpu_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "900"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "512"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(<START_MOD>policyUnit, cluster, hosts, vms); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assertNotNull(result); assertNotNull(result.getSecond()); assertEquals(result.getFirst().size(), 1); assertEquals(result.getFirst().get(0), <END_MOD>org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnitTest.DESTINATION_HOST); }
@org.junit.Test public void validateVmMemoryCanRunOnVdsHighMemLowOverhead() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); <START_MOD>doReturn<END_MOD>((-1200<START_MOD>)).when(vmOverheadCalculator).getEnsuredOverhead(any(<END_MOD>)); boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsVmTooBigButLowOverhead() { vm.setMinAllocatedMem(8865); vm.setVmMemSizeMb(8865); <START_MOD>doReturn<END_MOD>(0<START_MOD>).when(vmOverheadCalculator).getEnsuredOverhead(any()<END_MOD>); boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, true); }
public boolean hasPhysMemoryToRunVM(org.ovirt.engine.core.common.businessentities.VDS curVds, org.ovirt.engine.core.common.businessentities.VM vm, int pendingMemory) { if ((curVds.getMemFree()) != null) { double vmMemRequired = (vm.<START_MOD>getVmMemSizeMb<END_MOD>()) + (<START_MOD>vmOverheadCalculator.getEnsuredOverhead(vm<END_MOD>)); double vdsMemLimit = (curVds.getMemFree()) - pendingMemory; org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug( host '{}'; free memory is : {} MB (+ {} MB pending); free swap is: {} MB, required memory is {} MB; Guest overhead {} MB curVds.getName(), vdsMemLimit, pendingMemory, curVds.getSwapFree(), vmMemRequired, <START_MOD>vmOverheadCalculator.getEnsuredOverhead(vm<END_MOD>)); if ((curVds.getSwapFree()) != null) { vdsMemLimit += curVds.getSwapFree(); } org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug( <= ??? {} vmMemRequired, vdsMemLimit); return vmMemRequired <= vdsMemLimit; } else { return false; } }
public boolean hasOvercommitMemoryToRunVM(org.ovirt.engine.core.common.businessentities.VDS curVds, org.ovirt.engine.core.common.businessentities.VM vm) { double vmMemRequired = <START_MOD>vmOverheadCalculator.getTotalRequiredMemoryInMb<END_MOD>(vm); double vdsMemLimit = curVds.getMaxSchedulingMemory(); org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug( host '{}'; max scheduling memory : {} MB; required memory is {} MB; Guest overhead {} MB curVds.getName(), vdsMemLimit, vmMemRequired, <START_MOD>vmOverheadCalculator<END_MOD>.<START_MOD>getOverheadMb<END_MOD>(<START_MOD>vm<END_MOD>)); org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug( <= ??? {} vmMemRequired, vdsMemLimit); return vmMemRequired <= vdsMemLimit; }
@org.junit.Test public void validateVmMemoryCantStartOnVdsBecauseOfPending() { boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsBecauseOfGuestOverhead() { <START_MOD>doReturn<END_MOD>(256<START_MOD>).when(vmOverheadCalculator).getEnsuredOverhead(any()<END_MOD>); boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void testBalanceCpuAndMemoryLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_hosts_cpumem_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "900"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "512"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(<START_MOD>policyUnit<END_MOD>, cluster, hosts, vms); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assert result == null; }
@org.junit.Test public void validateVmMemoryCantRunOnVdsHighOverhead() { <START_MOD>doReturn<END_MOD>(1024<START_MOD>).when(vmOverheadCalculator).getEnsuredOverhead(any()<END_MOD>); boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsBecauseOfLowGuestOverhead() { <START_MOD>doReturn<END_MOD>(0<START_MOD>).when(vmOverheadCalculator).getEnsuredOverhead(any()<END_MOD>); boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void validateVmMemoryCantRunOnVdsNotEnoughMem() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsVmTooBig() { vm.setMinAllocatedMem(8865); vm.setVmMemSizeMb(8865); boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsHighPendingSwapSmall() { vds.setSwapFree(60L); boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, true); }
<START_MOD>public void setVmOverheadCalculator(org.ovirt.engine.core.bll.utils.VmOverheadCalculator vmOverheadCalculator) { this.vmOverheadCalculator = vmOverheadCalculator; }<END_MOD>
private org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getSnapshotType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.StatelessSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm()); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().isSaveMemory()) && (isLiveSnapshotApplicable())) { return new org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getStoragePool(), this<START_MOD>, vmOverheadCalculator<END_MOD>); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }
protected boolean initVdss() { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); org.ovirt.engine.core.compat.Guid vdsToRunOn = schedulingManager.schedule(org.ovirt.engine.core.bll.MigrateVmCommand.getCluster(), org.ovirt.engine.core.bll.MigrateVmCommand.getVm(), getVdsBlackList(), getVdsWhiteList(), getDestinationHostList(), new java.util.ArrayList(), new org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker(this<START_MOD>, slaValidator<END_MOD>), org.ovirt.engine.core.bll.MigrateVmCommand.getCorrelationId()); setDestinationVdsId(vdsToRunOn); if ((vdsToRunOn != null) && (!(Guid.Empty.equals(vdsToRunOn)))) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn); } org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); if ((vdsToRunOn != null) && (vdsToRunOn.equals(Guid.Empty))) { return false; } if (((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } return true; }
@org.junit.Test public void validateVmMemoryCanRunOnVds() { boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, true); }
protected boolean getVdsToRunOn() { org.ovirt.engine.core.compat.Guid vdsToRunOn = schedulingManager.schedule(org.ovirt.engine.core.bll.RunVmCommand.getCluster(), org.ovirt.engine.core.bll.RunVmCommand.getVm(), org.ovirt.engine.core.bll.RunVmCommand.getRunVdssList(), getVdsWhiteList(), getPredefinedVdsIdListToRunOn(), new java.util.ArrayList(), new org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker(this<START_MOD>, slaValidator<END_MOD>), org.ovirt.engine.core.bll.RunVmCommand.getCorrelationId()); setVdsId(vdsToRunOn); if ((vdsToRunOn != null) && (!(Guid.Empty.equals(vdsToRunOn)))) { org.ovirt.engine.core.bll.RunVmCommand.getRunVdssList().add(vdsToRunOn); } org.ovirt.engine.core.bll.RunVmCommand.setVds(null); org.ovirt.engine.core.bll.RunVmCommand.setVdsName(null); if (org.ovirt.engine.core.bll.RunVmCommand.getVdsId().equals(Guid.Empty)) { org.ovirt.engine.core.bll.RunVmCommand.log.error( find VDS to run the VM '{}' on, so this VM will not be run. org.ovirt.engine.core.bll.RunVmCommand.getVmId()); return false; } if ((org.ovirt.engine.core.bll.RunVmCommand.getVds()) == null) { org.ovirt.engine.core.common.errors.EngineException outEx = new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.RESOURCE_MANAGER_VDS_NOT_FOUND); org.ovirt.engine.core.bll.RunVmCommand.log.error( {} getClass().getName(), outEx.getMessage()); return false; } return true; }
@org.junit.Test public void testBalanceNoLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_saving_hosts_no_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_power_saving_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "768"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "128"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(<START_MOD>policyUnit, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(org.ovirt.engine.core.common.businessentities.Cluster<END_MOD>.class<START_MOD>), anyList(), anyList(), anyList(), anyMap()); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(<END_MOD>cluster, <START_MOD>new java.util.ArrayList(<END_MOD>hosts<START_MOD>.values()), parameters, messages); assert result == <END_MOD>null; }
@org.junit.Test public void testBalanceCpuAndMemLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_saving_hosts_cpumem_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_power_saving_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "768"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "128"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(<START_MOD>policyUnit, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(org.ovirt.engine.core.common.businessentities.Cluster<END_MOD>.class<START_MOD>), anyList(), anyList(), anyList(), anyMap()); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(<END_MOD>cluster, <START_MOD>new java.util.ArrayList(<END_MOD>hosts<START_MOD>.values()), parameters, messages); assert result == <END_MOD>null; }
@org.junit.Test public void testBalanceMediumLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_saving_hosts_medium_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_power_saving_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "768"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "128"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(<START_MOD>policyUnit, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(org.ovirt.engine.core.common.businessentities.Cluster<END_MOD>.class<START_MOD>), anyList(), anyList(), anyList(), anyMap()); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(<END_MOD>cluster, <START_MOD>new java.util.ArrayList(<END_MOD>hosts<START_MOD>.values()), parameters, messages); assert result == <END_MOD>null; }
protected int calcEvenDistributionScore(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm, boolean countThreadsAsCores) { int score = (MaxSchedulerWeight) - 1; java.lang.Integer effectiveCpuCores = <START_MOD>slaValidator.getEffectiveCpuCores(vds, countThreadsAsCores); if ((effectiveCpuCores != null) && ((vds.getUsageCpuPercent()) != null)) { score = java.lang.Math.min((((int) (java.lang.Math.round(calcDistributeMetric(vds, vm, effectiveCpuCores)))) + 1), <END_MOD>org.ovirt.engine.core.bll.scheduling.policyunits.MaxSchedulerWeight); } score -= (vds.getMaxSchedulingMemory()) / 100; return score; }
@org.junit.Test public void testBalanceCpuAndHighMemoryLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_hosts_cpumem_medium_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "900"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "512"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(<START_MOD>policyUnit<END_MOD>, cluster, hosts, vms); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assert result == null; }
public void updatePendingData(int pendingMemory, int pendingCpuCount) { synchronized(this) { cachedVds.setPendingVcpusCount(pendingCpuCount); cachedVds.setPendingVmemSize(pendingMemory); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.refreshCommitedMemory(cachedVds, <START_MOD>vmDao<END_MOD>.getAllRunningForVds(getVdsId()), resourceManager); updateDynamicData(cachedVds.getDynamicData()); } }
public void setLastVmsList(java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>VM<END_MOD>> lastVmsList) { this.lastVmsList = lastVmsList; }
@java.lang.Override protected void gatherChangedVms(org.ovirt.engine.core.common.businessentities.<START_MOD>VM<END_MOD> dbVm, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, vdsmVm)); if (org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher.log.isDebugEnabled()) { logBuilder.append(java.lang.String.format(   vdsmVm.getVmDynamic().getId().toString().substring(0, 8), vdsmVm.getVmDynamic().getStatus())); } }
public static boolean refreshCommitedMemory(org.ovirt.engine.core.common.businessentities.VDS host, java.util.<START_MOD>Collection<END_MOD><org.ovirt.engine.core.common.businessentities.<START_MOD>VM<END_MOD>> vms, org.ovirt.engine.core.vdsbroker.ResourceManager resourceManager) { boolean memoryUpdated = false; int memCommited = host.getGuestOverhead(); int vmsCoresCount = 0; for (org.ovirt.engine.core.common.businessentities.<START_MOD>VM<END_MOD> vm : vms) { if (((vm != null) && ((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.WaitForLaunch))) && ((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { <START_MOD>final org.ovirt.engine.core.vdsbroker.VmManager vmManager = resourceManager.getVmManager(vm.getId()); <END_MOD>memCommited += resourceManager.<START_MOD>computeCommitedMemoryInMb(vm); vmsCoresCount += vmManager.getNumOfCpus(); } } if (<END_MOD>memCommited <START_MOD>!= (host.getMemCommited())) { host.setMemCommited(memCommited); memoryUpdated = true; } if (<END_MOD>vmsCoresCount <START_MOD>!= (host.getVmsCoresCount())) { host.setVmsCoresCount(vmsCoresCount<END_MOD>); memoryUpdated = true; } <START_MOD>return<END_MOD> memoryUpdated<START_MOD>; }<END_MOD>
private void gatherNonRunningVms(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.<START_MOD>VM<END_MOD>> dbVms) { for (org.ovirt.engine.core.common.businessentities.<START_MOD>VM<END_MOD> dbVm : dbVms.values()) { if (!(vdsmVms.containsKey(dbVm.getId()))) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, null)); } } }
protected void gatherChangedVms(org.ovirt.engine.core.common.businessentities.<START_MOD>VM<END_MOD> dbVm, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm) { if (statusChanged(dbVm, vdsmVm.getVmDynamic())) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vmStats = getResourceManager().runVdsCommand(VDSCommandType.GetVmStats, new org.ovirt.engine.core.common.vdscommands.GetVmStatsVDSCommandParameters(vdsManager.getVdsId(), vdsmVm.getVmDynamic().getId())); if (vmStats.getSucceeded()) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, ((org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm) (vmStats.getReturnValue())))); } else { if (dbVm != null) { org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher.log.error( to fetch VM '{}' stats. status remain unchanged ({}) dbVm.getId(), dbVm.getStatus()); } } } }
public java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>VM<END_MOD>> getLastVmsList() { return lastVmsList; }
@org.junit.Before public void setup() { org.mockito.MockitoAnnotations.initMocks(this); when(dbFacade.getVdsDao()).thenReturn(vdsDao); when(dbFacade.<START_MOD>getVmDao<END_MOD>()).thenReturn(<START_MOD>vmDao<END_MOD>); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(VmTestPairs.SRC_HOST_ID); when(vdsManager.getCopyVds()).thenReturn(vds); when(vdsManager.getVdsId()).thenReturn(vds.getId()); vmsListFetcher = new org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher(vdsManager, dbFacade, resourceManager); }
private boolean statusChanged(org.ovirt.engine.core.common.businessentities.<START_MOD>VM<END_MOD> dbVm, org.ovirt.engine.core.common.businessentities.VmDynamic vdsmVm) { return (<START_MOD>(<END_MOD>dbVm == null<START_MOD>) || ((dbVm.getDynamicData()) == null)<END_MOD>) || ((dbVm.getStatus()) != (vdsmVm.getStatus())); }
@org.junit.experimental.theories.Theory public void changedVms(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { stubCalls(data); <START_MOD>org.ovirt.engine.core.common.businessentities.VM oldVm = ((data.dbVm()) == null) ? null : new org.ovirt.engine.core.common.businessentities.VM(data.dbVm().getStaticData(), data.dbVm().getDynamicData(), data.dbVm().getStatisticsData()); <END_MOD>assertTrue(vmsListFetcher.fetch()); assumeTrue(((data.dbVm()) != null)); assumeTrue(((data.vdsmVm()) != null)); assumeTrue(((<START_MOD>oldVm<END_MOD>.getStatus()) != (data.vdsmVm().getVmDynamic().getStatus()))); assertEquals(1, vmsListFetcher.getChangedVms().size()); assertSame(vmsListFetcher.getChangedVms().get(0).getFirst(), data.dbVm().getDynamicData()); }
protected void filterVms() { for (org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm : vdsmVms.values()) { org.ovirt.engine.core.common.businessentities.<START_MOD>VM<END_MOD> dbVm = dbVms.get(vdsmVm.getVmDynamic().getId()); gatherChangedVms(dbVm, vdsmVm); } }
@org.junit.experimental.theories.Theory public void lastVmListNotIncludingExternalVm(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { stubCalls(data); assertTrue(vmsListFetcher.fetch()); assumeTrue(((data.vdsmVm()) != null)); assumeTrue(((data.dbVm()) != null)); verify(vdsManager).setLastVmsList(vdsManagerArgumentCaptor.capture()); assertEquals(data.vdsmVm().getVmDynamic(), vdsManagerArgumentCaptor.getValue().get(0)<START_MOD>.getDynamicData()<END_MOD>); }
private void saveLastVmsList(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> vdsmVms) { <START_MOD>vdsManager<END_MOD>.<START_MOD>setLastVmsList<END_MOD>(vdsmVms.values()<START_MOD>.stream().map(VdsmVm::getVmDynamic).filter(( dynamicData<END_MOD>) <START_MOD>-><END_MOD> dbVms.containsKey(<START_MOD>dynamicData<END_MOD>.getId())).<START_MOD>map<END_MOD>(<START_MOD>this::mergeDbAndMonitoring)<END_MOD>.<START_MOD>collect<END_MOD>(<START_MOD>java.util.stream.Collectors.toList()<END_MOD>)); }
public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmDynamic, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm>> getChangedVms() { return changedVms<START_MOD>.stream().map(( r) -> new org.ovirt.engine.core.vdsbroker.monitoring.Pair<>(r.getFirst().getDynamicData(), r.getSecond())).collect(java.util.stream.Collectors.toList())<END_MOD>; }
protected void onFetchVms() { dbVms = <START_MOD>getVmDao<END_MOD>().getAllRunningForVds(vdsManager.getVdsId()).stream().collect(java.util.stream.Collectors.toMap(<START_MOD>VM<END_MOD>::getId, java.util.function.Function.identity())); changedVms = new java.util.ArrayList(); filterVms(); gatherNonRunningVms(dbVms); saveLastVmsList(vdsmVms); }
public org.ovirt.engine.core.dao.<START_MOD>VmDao<END_MOD> <START_MOD>getVmDao<END_MOD>() { return dbFacade.<START_MOD>getVmDao<END_MOD>(); }
private void stubCalls(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { when(resourceManager.runVdsCommand(eq(VDSCommandType.List), any(org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase.class))).thenReturn(getVdsReturnValue(data.vdsmVm())); if ((data.dbVm()) != null) { when(<START_MOD>vmDao<END_MOD>.getAllRunningForVds(VmTestPairs.SRC_HOST_ID)).thenReturn(java.util.Collections.singletonList(data.dbVm())); } if ((data.vdsmVm()) != null) { when(resourceManager.runVdsCommand(eq(VDSCommandType.GetVmStats), any(org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase.class))).thenReturn(getStatsReturnValue(data.vdsmVm())); } }
<START_MOD>void updateVdsNeedsReinstall(org.ovirt.engine.core.compat.Guid vdsStaticId, boolean vdsNeedsReinstall);<END_MOD>
<START_MOD>private boolean needToReinstallVds() { org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getParameters().getVdsStaticData(); org.ovirt.engine.core.common.businessentities.VdsStatic oldVdsStatic = oldHost.getStaticData(); return ((vdsStatic.isVdsNeedsReinstall()) || ((vdsStatic.isPmKdumpDetection()) && (!(oldVdsStatic.isPmKdumpDetection())))) || (!(java.util.Objects.equals(vdsStatic.getCurrentKernelCmdline(), oldVdsStatic.getCurrentKernelCmdline()))); }<END_MOD>
<START_MOD>private void updateHosts() { for (org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic : vdsStaticDao.getAllForCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId())) { vdsStaticDao.updateVdsNeedsReinstall(vdsStatic.getId(), true); } }<END_MOD>
<START_MOD>protected void markVdsReinstalled() { vdsStaticDao.updateVdsNeedsReinstall(org.ovirt.engine.core.bll.VdsCommand.getVds().getStaticData().getId(), false); }<END_MOD>
<START_MOD>public void setVdsNeedsReinstall(boolean vdsNeedsReinstall) { vdsStatic.setVdsNeedsReinstall(vdsNeedsReinstall); }<END_MOD>
<START_MOD>@java.lang.Override public void updateVdsNeedsReinstall(org.ovirt.engine.core.compat.Guid vdsStaticId, boolean vdsNeedsReinstall) { getCallsHandler().executeModification("UpdateVdsNeedsReinstall", getCustomMapSqlParameterSource().addValue("vds_id", vdsStaticId).addValue("vds_needs_reinstall", vdsNeedsReinstall)); }<END_MOD>
<START_MOD>public boolean isVdsNeedsReinstall() { return vdsNeedsReinstall; }<END_MOD>
<START_MOD>public void setVdsNeedsReinstall(boolean vdsNeedsReinstall) { this.vdsNeedsReinstall = vdsNeedsReinstall; }<END_MOD>
private void readCpuItem(org.ovirt.engine.core.utils.ovf.xml.XmlNode node)<START_MOD> { org.ovirt.engine.core.utils.ovf.xml.XmlNode virtualQuantity = selectSingleNode(node, "rasd:VirtualQuantity", _xmlNS); if (virtualQuantity != null) { vmBase.setNumOfSockets(java.lang.Integer.parseInt(virtualQuantity.innerText)); vmBase.setCpuPerSocket(1); vmBase.setThreadsPerCpu(1); } else<END_MOD> { vmBase.setNumOfSockets(java.lang.Integer.parseInt(selectSingleNode(node, "rasd:num_of_sockets", _xmlNS).innerText)); vmBase.setCpuPerSocket(java.lang.Integer.parseInt(selectSingleNode(node, "rasd:cpu_per_socket", _xmlNS).innerText)); vmBase.setThreadsPerCpu(parseNodeInteger(node, "rasd:threads_per_cpu", 1)); }<START_MOD> }<END_MOD>
@java.lang.Override protected void executeCommand() { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_VM_NAME, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_MEMORY_SIZE_MB, java.lang.String.valueOf(getUnpluggedDeviceSize())); addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_DEVICE_ID, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getDeviceId().toString()); final org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.HotUnplugMemory, new org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.Params(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getRunOnVds(), getDeviceToHotUnplug()<START_MOD>, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMinAllocatedMem()<END_MOD>)); if (!(vdsReturnValue.getSucceeded())) { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_ERROR_MESSAGE, vdsReturnValue.getVdsError().getMessage()); setReturnValueFailure(vdsReturnValue); return; } if (((org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMemSizeMb()) - (getUnpluggedDeviceSize())) >= (org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMinAllocatedMem())) { updateVm(); } org.ovirt.engine.core.bll.HotUnplugMemoryCommand.setSucceeded(true); }
@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getBroker().hotUnplugMemory(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createHotplugMemoryParamsMap(org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getParameters().getMemoryDeviceToUnplug(), true<START_MOD>, org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getParameters().getMinAllocatedMem()<END_MOD>)); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.setVdsRuntimeErrorAndReport(e); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getVDSReturnValue().setExceptionString(null); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.SetAmountOfMemory, new org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.Params(org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getId(), createMemoryDevice()<START_MOD>, org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getMinAllocatedMem()<END_MOD>)); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.setSucceeded(true); } else { org.ovirt.engine.core.common.errors.EngineFault fault = new org.ovirt.engine.core.common.errors.EngineFault(); fault.setError(vdsReturnValue.getVdsError().getCode()); fault.setMessage(vdsReturnValue.getVdsError().getMessage()); org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getReturnValue().setFault(fault); } }
public static java.util.Map<java.lang.String, java.lang.Object> createHotplugMemoryParamsMap(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, boolean copyAlias<START_MOD>, int minAllocatedMem<END_MOD>) { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); data.put("vmId", vmDevice.getVmId().toString()); data.put(<START_MOD>"memGuaranteedSize", minAllocatedMem); data.put(<END_MOD>"memory", org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createVmMemoryDeviceMap(vmDevice, copyAlias)); return data; }
<START_MOD>@org.ovirt.api.metamodel.annotations.Link types.HostExternalNetworkProvider[] externalNetworkProviders();<END_MOD>
<START_MOD>@org.ovirt.api.metamodel.annotations.Link types.OpenStackNetworkProvider defaultNetworkProvider();<END_MOD>
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(cluster().name()); or(mandatory(cluster().dataCenter().id()), mandatory(cluster().dataCenter().name())); optional(cluster().version().major()); optional(cluster().version().minor()); optional(cluster().cpu().type()); optional(cluster().ballooningEnabled()); optional(cluster().comment()); optional(cluster().cpu().architecture()); optional(cluster().description()); optional(cluster().display().proxy()); optional(cluster().errorHandling().onError()); optional(cluster().fencingPolicy().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().threshold()); optional(cluster().fencingPolicy().skipIfSdActive().enabled()); optional(cluster().glusterService()); optional(cluster().haReservation()); optional(cluster().ksm().enabled()); optional(cluster().ksm().mergeAcrossNodes()); optional(cluster().maintenanceReasonRequired()); optional(cluster().memoryPolicy().overCommit().percent()); optional(cluster().memoryPolicy().transparentHugePages().enabled()); optional(cluster().threadsAsCores()); optional(cluster().trustedService()); optional(cluster().tunnelMigration()); optional(cluster().virtService()); or(optional(cluster().managementNetwork().id()), optional(cluster().managementNetwork().name())); or(optional(cluster().schedulingPolicy().id()), optional(cluster().schedulingPolicy().name())); <START_MOD>optional(cluster().defaultNetworkProvider()); <END_MOD>}
<START_MOD>@java.lang.Override public org.ovirt.engine.api.resource.HostExternalNetworkProvidersResource getExternalNetworkProvidersResource() { return null; }<END_MOD>
protected void syncChildCommandList(org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters) { java.util.List<org.ovirt.engine.core.compat.Guid> childCommandIds = commandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommandBase.getCommandId()); if ((childCommandIds.size()) != (parameters.getChildCommands().size())) { for (org.ovirt.engine.core.compat.Guid id : childCommandIds) { if (!(parameters.getChildCommands().containsValue(id))) { parameters.getChildCommands().put(parameters.getCommandStep(), id); } } } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getImageGroupId())); java.util.List<org.ovirt.engine.core.compat.Guid> failedGuids = getFailedVolumeIds(); if (failedGuids.isEmpty()) { log.info( images were successfully removed persistCommand(org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getParentCommand()); } else { log.error( following images were not removed: {} failedGuids); <START_MOD>((org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters) (org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getParentParameters())).setNextCommandStep(RemoveSnapshotSingleDiskStep.DESTROY_IMAGE_CHECK); } setCommandStatus(CommandStatus.SUCCEEDED); org.ovirt.engine.core.bll.DestroyImageCheckCommand.setSucceeded(true); }<END_MOD>
<START_MOD>protected<END_MOD> void logException(java.lang.RuntimeException ex) { if (((ex.getMessage()) == null) || (!(ex.getMessage().contains( reset { log.error( '{}' execution failed: {} this, ex.getMessage()); log.debug("Exception", ex); } }
<START_MOD>protected void logTimeoutException(java.util.concurrent.TimeoutException e, org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ex) { logException(ex); log.error("Timeout waiting for VDSM response: {}", e.getMessage()); log.debug("Exception", e); }<END_MOD>
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.HostDevice entity) { return createIdParameterMapper(entity.getId()).addValue("parent_device_name", entity.getParentDeviceName()).addValue("capability", entity.getCapability()).addValue("iommu_group", entity.getIommuGroup()).addValue(<START_MOD>"mdev_types", org.apache.commons.lang.StringUtils.join(entity.getMdevTypes(), ",")).addValue(<END_MOD>"product_name", entity.getProductName()).addValue("product_id", entity.getProductId()).addValue("vendor_name", entity.getVendorName()).addValue("vendor_id", entity.getVendorId()).addValue("physfn", entity.getParentPhysicalFunction()).addValue("total_vfs", entity.getTotalVirtualFunctions()).addValue("net_iface_name", entity.getNetworkInterfaceName()).addValue("driver", entity.getDriver()).addValue("is_assignable", entity.isAssignable()).addValue("address", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(entity.getAddress())); }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.setExecutorService(<START_MOD>new org.ovirt.engine.core.common.utils.EngineThreadPools.InternalThreadExecutor(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_MIN_SIZE"), org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_MAX_SIZE"), org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_QUEUE_SIZE"))<END_MOD>); }
protected void markImagesIllegalIfNotInDb(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.compat.Guid snapshotId) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesInDb = diskImageDao.getAllSnapshotsForVmSnapshot(snapshotId); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesInDbMap = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDiskImagesByIdMap(imagesInDb); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage fromConfigImg : vm.getImages()) { if (((<START_MOD>(<END_MOD>fromConfigImg.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) <START_MOD>|| ((fromConfigImg.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.CINDER))) <END_MOD>&& (!(imagesInDbMap.containsKey(fromConfigImg.getImageId())))) { org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper.log.debug( '{}' of Disk '{}' cannot be found in database. This image will be returned as ILLEGAL from the query fromConfigImg.getImageId(), fromConfigImg.getId()); fromConfigImg.setImageStatus(ImageStatus.ILLEGAL); } else { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInDb = imagesInDbMap.get(fromConfigImg.getImageId()); fromConfigImg.setImageStatus(imageInDb.getImageStatus()); } } }
private org.ovirt.engine.core.common.AuditLogType attemptToAttachDisksToImportedVm(java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { java.util.List<java.lang.String> failedDisks = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = disk.getDiskVmElements().iterator().next(); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(<START_MOD>dve, <END_MOD>disk.<START_MOD>getPlugged()); org.ovirt.engine.core.common.action.ActionReturnValue returnVal = runInternalAction(ActionType.AttachDiskToVm, params<END_MOD>, org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.<START_MOD>cloneContextAndDetachFromParent()); if (!(<END_MOD>returnVal<START_MOD>.getSucceeded())) { failedDisks.add(disk.getDiskAlias()); } }<END_MOD> if (!(<START_MOD>failedDisks.isEmpty<END_MOD>())) { <START_MOD>this.addCustomValue("DiskAliases", org.apache.commons.lang.StringUtils.join(<END_MOD>failedDisks<START_MOD>, ",")); return org.ovirt.engine.core.common.AuditLogType.VM_IMPORT_FROM_CONFIGURATION_ATTACH_DISKS_FAILED<END_MOD>; } <START_MOD>return org.ovirt.engine.core.common.AuditLogType.VM_IMPORT_FROM_CONFIGURATION_EXECUTED_SUCCESSFULLY; <END_MOD>}
private java.util.<START_MOD>Map<END_MOD><org.ovirt.engine.core.compat.Guid<START_MOD>, org.ovirt.engine.core.compat.Guid<END_MOD>> mapDisks(org.ovirt.engine.api.model.DiskAttachments diskAttachments) { java.util.<START_MOD>Map<END_MOD><org.ovirt.engine.core.compat.Guid<START_MOD>, org.ovirt.engine.core.compat.Guid<END_MOD>> <START_MOD>diskToImageIds<END_MOD> = null; if (diskAttachments.isSetDiskAttachments()) { <START_MOD>diskToImageIds<END_MOD> = diskAttachments.getDiskAttachments().stream().map(DiskAttachment::getDisk).filter(java.util.Objects::nonNull).map(( d) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (org.ovirt.engine.api.restapi.types.DiskMapper.map(d, null)))).<START_MOD>collect(java.util.stream.Collectors.toMap<END_MOD>(BaseDisk::getId<START_MOD>, DiskImage::getImageId<END_MOD>)); } return <START_MOD>diskToImageIds<END_MOD>; }
<START_MOD>private java.lang.String maskPassword(java.lang.String queryString) { return queryString.replaceAll("password=[^&]+", "password=****"); }<END_MOD>
<START_MOD>types.ResumeBehavior resumeBehavior();<END_MOD>
private void onUpgrade() { if ((getProgress()) != null) { return; } org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(host.getId()<START_MOD>, getLatch().getEntity().booleanValue()<END_MOD>); invokeHostUpgrade(params); }
@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { <START_MOD>try { org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command<END_MOD> = <START_MOD>new org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder().hostnames(host.getHostName()).logFileDirectory(VdsDeployBase.HOST_DEPLOY_LOG_DIRECTORY).logFilePrefix("ovirt-host-mgmt-ansible").logFileName(host.getHostName()).logFileSuffix(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()).playbook(AnsibleConstants.HOST_UPGRADE_PLAYBOOK); if ((new org.ovirt.engine.core.common.utils.ansible.AnsibleExecutor().runCommand(command).getAnsibleReturnCode()) != (org.ovirt.engine.core.common.utils.ansible.AnsibleReturnCode.OK)) { <END_MOD>org.ovirt.engine.core.bll.host.HostUpgradeManager.<START_MOD>log.error( to update host '{}'. host.getName<END_MOD>()); <START_MOD>throw new java.lang.RuntimeException( to update host '{}'. } } catch (java.lang.InterruptedException | java.io.IOException ex) { throw new java.lang.RuntimeException(ex<END_MOD>); <START_MOD>} }<END_MOD>
<START_MOD>@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(cluster().id()), mandatory(cluster().name())); optional(configuration()); }<END_MOD>
<START_MOD>@org.ovirt.api.metamodel.annotations.In services.RegistrationConfiguration registrationConfiguration();<END_MOD>
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(cluster().id()), mandatory(cluster().name())); optional(clone()); optional(exclusive()); optional(template().name()); <START_MOD>optional(configuration()); <END_MOD>}
<START_MOD>protected boolean validateNetworkProviderConfiguration(org.ovirt.engine.core.compat.Guid providerId, java.lang.String networkMappings) { if (providerId == null) { return true; } else { org.ovirt.engine.core.common.businessentities.Provider provider = providerDao.get(providerId); if (provider == null) { return false; } if (!(((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK)) || ((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.EXTERNAL_NETWORK)))) { return false; } if (((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK)) && (!(validateOpenstackNetworkProviderProperties(providerId, networkMappings)))) { return false; } return true; } }<END_MOD>
<START_MOD>private<END_MOD> boolean validateOpenstackNetworkProviderProperties(org.ovirt.engine.core.compat.Guid providerId, java.lang.String networkMappings) { org.ovirt.engine.core.bll.provider.NetworkProviderValidator validator = new org.ovirt.engine.core.bll.provider.NetworkProviderValidator(providerDao.get(providerId)); return (((validate(validator.providerIsSet())) && (validate(validator.providerTypeIsOpenstack()))) && (validate(validator.networkMappingsProvided(networkMappings)))) && (validate(validator.messagingBrokerProvided())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface) { return (hostInterface.getTxTotal()) != null ? <START_MOD>totalRenderer<END_MOD>.<START_MOD>render<END_MOD>(hostInterface.getTxTotal()) : org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.constants.notAvailableLabel(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface) { return (hostInterface.getRxTotal()) != null ? <START_MOD>totalRenderer<END_MOD>.<START_MOD>render<END_MOD>(hostInterface.getRxTotal()) : org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.constants.notAvailableLabel(); }
@java.lang.Override public javax.ws.rs.core.Response upgrade(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(guid); if (action.isSetImage()) { params.setoVirtIsoFile(action.getImage()); } <START_MOD>if ((action.isReboot()) != null) { params.setReboot(action.isReboot()); } <END_MOD>return doAction(ActionType.UpgradeHost, params, action); }
private org.ovirt.engine.core.common.businessentities.VM readVmFromOvf(java.lang.String ovf) { try { return ovfHelper.readVmFromOvf(ovf<START_MOD>).getFirst(<END_MOD>); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { org.ovirt.engine.core.bll.exportimport.ConvertVmCommand.log.debug(( to parse a given ovf configuration:     + ovf), e); auditLog(this, AuditLogType.IMPORTEXPORT_INVALID_OVF); throw new org.ovirt.engine.core.common.errors.EngineException(); } }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.VM); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { org.ovirt.engine.core.common.businessentities.VM vm = ovfHelper.readVmFromOvf(ovf.getOvfData())<START_MOD>.getFirst()<END_MOD>; vm.setClusterCompatibilityVersion(ovf.getLowestCompVersion()); vm.setClusterArch(ovf.getArchitecture()); vmList.add(vm); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(( to parse a given ovf configuration:   + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setExceptionString(( to parse a given ovf configuration   + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setReturnValue(vmList); }
@java.lang.Override protected void executeQueryCommand() { if (ConfigurationType.OVF.equals(org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getConfigurationType())) { try { org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setReturnValue(ovfHelper.readVmFromOvf(org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getVmConfiguration())<START_MOD>.getFirst()<END_MOD>); org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setSucceeded(true); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(( to parse a given ovf configuration:   + (org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getVmConfiguration())), e); org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setExceptionString(( to parse a given ovf configuration   + (e.getMessage()))); } } }
public org.ovirt.engine.core.common.<START_MOD>utils.Pair<org.ovirt.engine.core.common.<END_MOD>businessentities.VmTemplate<START_MOD>, org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData><END_MOD> readVmTemplateFromOvf(java.lang.String ovf) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { <START_MOD>org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate(); org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(template); ovfManager.importTemplate(ovf, fullEntityOvfData); template.setInterfaces(fullEntityOvfData.getInterfaces()); for (<END_MOD>org.ovirt.engine.core.common.businessentities.storage.DiskImage<START_MOD> disk : fullEntityOvfData.getDiskImages()) { template.getDiskTemplateMap().put(disk.getId(), disk); } return<END_MOD> new <START_MOD>org.ovirt.engine.core.common.utils.Pair(template, fullEntityOvfData<END_MOD>); }
public java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> getVmConfigurationInStatelessSnapshotOfVm(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = snapshotDao.get(vmId, SnapshotType.STATELESS); if (snapshot == null) { return java.util.Optional.empty(); } try { return java.util.Optional.of(ovfHelper.readVmFromOvf(snapshot.getVmConfiguration())<START_MOD>.getFirst()<END_MOD>); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { throw new java.lang.RuntimeException(e); } }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.TEMPLATE); java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> vmTemplates = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { vmTemplates.add(ovfHelper.readVmTemplateFromOvf(ovf.getOvfData())<START_MOD>.getFirst()<END_MOD>); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(( to parse a given ovf configuration:   + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setExceptionString(( to parse a given ovf configuration   + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setReturnValue(vmTemplates); }
@java.lang.Override protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> buildFromOVFs(java.util.List<java.lang.String> ovfList) { java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> templateDisksMap = new java.util.HashMap<>(); for (java.lang.String ovf : ovfList) { try { if (ovfHelper.isOvfTemplate(ovf)) { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = ovfHelper.readVmTemplateFromOvf(ovf)<START_MOD>.getFirst()<END_MOD>; java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDisks = new java.util.ArrayList(vmTemplate.getDiskTemplateMap().values()); templateDisksMap.put(vmTemplate, templateDisks); } } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException ex) { auditLogOvfLoadError(ex.getName(), ex.getMessage()); } } return templateDisksMap; }
private boolean validateMemoryTakenInSupportedVersion() { org.ovirt.engine.core.common.businessentities.VM vmFromSnapshot = null; try { vmFromSnapshot = ovfHelper.readVmFromOvf(getDstSnapshot().getVmConfiguration()<START_MOD>).getFirst(<END_MOD>); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.error( to parse a given ovf configuration: {} e.getMessage()); return false; } org.ovirt.engine.core.compat.Version originalClusterVersion = vmFromSnapshot.getClusterCompatibilityVersionOrigin(); if (org.ovirt.engine.core.compat.Version.getLowest().greater(originalClusterVersion)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_MEMORY_TOO_OLD, java.lang.String.format( %s (originalClusterVersion != null ? originalClusterVersion : "N/A"))); } return true; }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VM> buildFromOVFs(java.util.List<java.lang.String> ovfList) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<>(); for (java.lang.String ovf : ovfList) { try { if (!(ovfHelper.isOvfTemplate(ovf))) { vms.add(ovfHelper.readVmFromOvf(ovf)<START_MOD>.getFirst()<END_MOD>); } } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException ex) { auditLogOvfLoadError(ex.getName(), ex.getMessage()); } } return vms; }
private void removeDiskImages() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getVm().getDiskMap().values(), org.ovirt.engine.core.bll.exportimport.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.exportimport.ONLY_ACTIVE); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images) { image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); image.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); } <START_MOD>java.util.Set<java.lang.String> allMemoryVolumes = org.ovirt.engine.core.bll.memory.MemoryUtils.getMemoryVolumesFromSnapshots(getVm().getSnapshots()); for (java.lang.String memoryVolumes : allMemoryVolumes) { if (!(org.apache.commons.lang.StringUtils.isEmpty(memoryVolumes))) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(memoryVolumes); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = createMemoryDisk(guids.get(2), guids.get(3)); images.add(memoryDisk); org.ovirt.engine.core.common.businessentities.storage.DiskImage metadataDisk = createMemoryDisk(guids.get(4), guids.get(5)); images.add(metadataDisk); } } <END_MOD>removeVmImages(images); }
private <START_MOD>org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid imageId<END_MOD>) { org.ovirt.engine.core.<START_MOD>common.businessentities.storage.DiskImage disk = <END_MOD>new org.ovirt.engine.core.<START_MOD>common.businessentities.storage.DiskImage(); disk.setId(diskId); disk.setImageId(imageId); disk.setStoragePoolId(org.ovirt.engine.core.<END_MOD>bll.<START_MOD>exportimport.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); disk.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(<END_MOD>org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))<START_MOD>); disk.setWipeAfterDelete(false); disk.setActive(true); return disk<END_MOD>; }
<START_MOD>public void setRoleMap(java.util.Map<java.lang.String, java.lang.Object> roleMap);<END_MOD>
<START_MOD>public java.util.Map<java.lang.String, java.lang.Object> getAffinityGroupMap();<END_MOD>
<START_MOD>public java.util.Map<java.lang.String, java.lang.Object> getRoleMap();<END_MOD>
<START_MOD>public java.util.Map<java.lang.String, java.lang.Object> getAffinityLabelMap();<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); <START_MOD>java.util.Map<java.lang.String, java.util.Map> registrationMap = getRegistrationMappings(action); params.setClusterMap(registrationMap.get(ExternalRegistrationConfigurationMapper.CLUSTER_KEY)); params.setDomainMap(registrationMap.get(ExternalRegistrationConfigurationMapper.DOMAIN_KEY)); params.setRoleMap(registrationMap.get(ExternalRegistrationConfigurationMapper.ROLE_KEY)); <END_MOD>params.setContainerId(guid); params.setStorageDomainId(parent.getStorageDomainId()); params.setClusterId(getClusterId(action)); params.setImagesExistOnTargetStorageDomain(true); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmTemplateFromConfiguration, params, action); }
<START_MOD>public void setAffinityLabelMap(java.util.Map<java.lang.String, java.lang.Object> affinityLabelMap);<END_MOD>
<START_MOD>@java.lang.Override <END_MOD>public java.util.Map<java.lang.String, java.lang.Object> getDomainMap() { return domainMap; }
<START_MOD>@java.lang.Override public void setAffinityGroupMap(java.util.Map<java.lang.String, java.lang.Object> affinityGroupMap) { }<END_MOD>
<START_MOD>public void setDomainMap(java.util.Map<java.lang.String, java.lang.Object> domainMap);<END_MOD>
<START_MOD>@java.lang.Override <END_MOD>public void setClusterMap(java.util.Map<java.lang.String, java.lang.Object> clusterMap) { this.clusterMap = clusterMap; }
<START_MOD>@java.lang.Override public java.util.Map<java.lang.String, java.lang.Object> getAffinityLabelMap() { return null; }<END_MOD>
<START_MOD>@java.lang.Override <END_MOD>public java.util.Map<java.lang.String, java.lang.Object> getClusterMap() { return clusterMap; }
<START_MOD>@java.lang.Override public java.util.Map<java.lang.String, java.lang.Object> getAffinityGroupMap() { return null; }<END_MOD>
<START_MOD>@java.lang.Override <END_MOD>public void setDomainMap(java.util.Map<java.lang.String, java.lang.Object> domainMap) { this.domainMap = domainMap; }
<START_MOD>@java.lang.Override public void setAffinityLabelMap(java.util.Map<java.lang.String, java.lang.Object> affinityLabelMap) { }<END_MOD>
<START_MOD>public java.util.Map<java.lang.String, java.lang.Object> getDomainMap();<END_MOD>
<START_MOD>public void setAffinityGroupMap(java.util.Map<java.lang.String, java.lang.Object> affinityGroupMap);<END_MOD>
<START_MOD>public java.util.Map<java.lang.String, java.lang.Object> getExternalLunMap();<END_MOD>
<START_MOD>public void setClusterMap(java.util.Map<java.lang.String, java.lang.Object> clusterMap);<END_MOD>
<START_MOD>public void setExternalLunMap(java.util.Map<java.lang.String, java.lang.Object> externalLunMap);<END_MOD>
<START_MOD>public java.util.Map<java.lang.String, java.lang.Object> getClusterMap();<END_MOD>
<START_MOD>private void mapCluster(java.lang.String clusterName) { if ((org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterMap()) != null) { java.lang.String clusterDest = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterMap().get(clusterName); org.ovirt.engine.core.common.businessentities.Cluster cluster; if (clusterDest != null) { cluster = clusterDao.getByName(clusterDest); } else { cluster = clusterDao.getByName(clusterName); } org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setClusterId(cluster.getId()); } }<END_MOD>
<START_MOD>private java.lang.String generateMetaDataFile(java.util.List<org.ovirt.engine.core.compat.Guid> vmAndTemplatesIds) { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); addStorageDomainStatus(data); addVmsStatus(vmAndTemplatesIds, data); return buildJson(data, true); }<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); validateVnicMappings(action); <START_MOD>validateClusterMappings(action); validateRoleMappings(action); validateDomainMappings(action); validateAffinityGroupMappings(action); validateAffinityLabelMappings(action); validateLunMappings(action); <END_MOD>org.ovirt.engine.core.common.action.ImportVmFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmFromConfParameters(getVnicProfileMappings(action), getReassignBadMacs(action)); org.ovirt.engine.api.restapi.types.ExternalRegistrationConfigurationMapper.mapFromModel(action.getRegistrationConfiguration(), params); params.setContainerId(guid); params.setStorageDomainId(parent.getStorageDomainId()); params.setClusterId(getClusterId(action)); params.setImagesExistOnTargetStorageDomain(true); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmFromConfiguration, params, action); }
<START_MOD>private void validateRoleMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetRoleMappings())) && (action.getRegistrationConfiguration().getRoleMappings().isSetRegistrationRoleMappings())) { action.getRegistrationConfiguration().getRoleMappings().getRegistrationRoleMappings().forEach(this::validateRoleMapping); } }<END_MOD>
<START_MOD>private void validateRoleMapping(org.ovirt.engine.api.model.RegistrationRoleMapping mapping) { if (!(mapping.isSetFrom())) { badRequest("Role name is missing from source."); } if (!(mapping.isSetTo())) { badRequest("Role name is missing from destination."); } }<END_MOD>
<START_MOD>private void validateDomainMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetDomainMappings())) && (action.getRegistrationConfiguration().getDomainMappings().isSetRegistrationDomainMappings())) { action.getRegistrationConfiguration().getDomainMappings().getRegistrationDomainMappings().forEach(this::validateDomainMapping); } }<END_MOD>
<START_MOD>private void validateAffinityGroupMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetAffinityGroupMappings())) && (action.getRegistrationConfiguration().getAffinityGroupMappings().isSetRegistrationAffinityGroupMappings())) { action.getRegistrationConfiguration().getAffinityGroupMappings().getRegistrationAffinityGroupMappings().forEach(this::validateAffinityGroupMapping); } }<END_MOD>
<START_MOD>private void validateLunMapping(org.ovirt.engine.api.model.RegistrationLunMapping mapping) { if (!(mapping.isSetFrom())) { badRequest("Lun name is missing from source."); } if (!(mapping.isSetTo())) { badRequest("Lun name is missing from destination."); } }<END_MOD>
<START_MOD>private void validateAffinityLabelMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetAffinityLabelMappings())) && (action.getRegistrationConfiguration().getAffinityLabelMappings().isSetRegistrationAffinityLabelMappings())) { action.getRegistrationConfiguration().getAffinityLabelMappings().getRegistrationAffinityLabelMappings().forEach(this::validateAffinityLabelMapping); } }<END_MOD>
<START_MOD>private void validateClusterMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetClusterMappings())) && (action.getRegistrationConfiguration().getClusterMappings().isSetRegistrationClusterMappings())) { action.getRegistrationConfiguration().getClusterMappings().getRegistrationClusterMappings().forEach(this::validateClusterMapping); } }<END_MOD>
<START_MOD>private void validateLunMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetLunMappings())) && (action.getRegistrationConfiguration().getLunMappings().isSetRegistrationLunMappings())) { action.getRegistrationConfiguration().getLunMappings().getRegistrationLunMappings().forEach(this::validateLunMapping); } }<END_MOD>
private void writeCpuTune() { writer.writeStartElement("cputune"); @java.lang.SuppressWarnings("unchecked") java.util.Map<java.lang.String, java.lang.Object> cpuPinning = ((java.util.Map<java.lang.String, java.lang.Object>) (createInfo.get(VdsProperties.cpuPinning))); if (cpuPinning != null) { cpuPinning.forEach(( vcpu, cpuset) -> { writer.writeStartElement("vcpupin"); writer.writeAttributeString("vcpu", vcpu); writer.writeAttributeString("cpuset", ((java.lang.String) (cpuset))); writer.writeEndElement(); }); } if ((vm.getCpuShares()) > 0) { writer.writeElement("shares", java.lang.String.valueOf(vm.getCpuShares())); } <START_MOD>java.lang.String ioCpus = ((java.lang.String) (createInfo.get(VdsProperties.ioThreadsPinnning))); if (ioCpus != null) { for (int i = 0; i < (vm.getNumOfIoThreads()); i++) { writer.writeStartElement("iothreadpin"); writer.writeAttributeString("iothread", java.lang.String.valueOf((i + 1))); writer.writeAttributeString("cpuset", ioCpus); <END_MOD>writer.writeEndElement(); }<START_MOD> } java.lang.String emulatorCpus = ((java.lang.String) (createInfo.get(VdsProperties.emulatorThreadsPinnning))); if (emulatorCpus != null) { writer.writeStartElement("emulatorpin"); writer.writeAttributeString("cpuset", emulatorCpus); writer.writeEndElement(); } writer.writeEndElement(); }<END_MOD>
@java.lang.Override public void search() { if ((getEntity()) != null) { <START_MOD>boolean getRunningVms = (viewFilterType.equals(HostVmFilter.all)) || (viewFilterType.equals(HostVmFilter.runningOnHost)); boolean getPinnedVms = (viewFilterType.equals(HostVmFilter.all)) || (viewFilterType.equals(HostVmFilter.pinnedToHost)); new <END_MOD>org.ovirt.engine.ui.uicommonweb.<START_MOD>models<END_MOD>.<START_MOD>hosts<END_MOD>.<START_MOD>HostVmListModel.SearchQuery<END_MOD>(<START_MOD>getRunningVms, getPinnedVms, <END_MOD>new org.ovirt.engine.ui.uicommonweb.models.hosts.SetRawItemsAsyncQuery()).<START_MOD>execute<END_MOD>(); } else { setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>()); } startGridTimer(); }
private void cancel() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())); <START_MOD>setWindow(null); java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>List<END_MOD><org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = <START_MOD>currentProxies<END_MOD>.<START_MOD>getItemsAsList<END_MOD>(); currentModels.remove(this); <START_MOD>currentProxies<END_MOD>.setItems(<START_MOD>java.util.Collections.emptyList()<END_MOD>); <START_MOD>currentProxies.setItems<END_MOD>(<START_MOD>currentModels<END_MOD>); }
<START_MOD>public static org.ovirt.engine.core.common.businessentities.storage.DiskContentType forStorageValue(int value) { return org.ovirt.engine.core.common.businessentities.storage.DiskContentType.storageMappings.get(value); }<END_MOD>
<START_MOD>@org.junit.Test public void testStorageNameLength() { for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType d : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { if (d != (DiskContentType.LEGACY)) { assertEquals(4, d.getStorageValue().length()); } } }<END_MOD>
private com.google.gwt.user.client.ui.Widget getRadioGroupPanel() { buttonToType = new java.util.LinkedHashMap(); org.gwtbootstrap3.client.ui.RadioButton allButton = new org.gwtbootstrap3.client.ui.RadioButton(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.BUTTON_GROUP_NAME); buttonToType.put(allButton, null); allButton.setText(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.constants.allDisksLabel()); for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { <START_MOD>if (contentType != (org.ovirt.engine.core.common.businessentities.storage.DiskContentType.LEGACY)) { <END_MOD>org.gwtbootstrap3.client.ui.RadioButton button = new org.gwtbootstrap3.client.ui.RadioButton(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.BUTTON_GROUP_NAME); buttonToType.put(button, contentType); } <START_MOD>} <END_MOD>org.gwtbootstrap3.client.ui.ButtonGroup buttonGroup = new org.gwtbootstrap3.client.ui.ButtonGroup(); buttonGroup.setDataToggle(Toggle.BUTTONS); buttonToType.entrySet().forEach(( e) -> { buttonGroup.add(e.getKey()); e.getKey().addClickHandler(( event) -> fireChangeHandlers(e.getValue())); }); setDiskContentType(null); localize(); buttonGroup.addStyleName("disk-type-buttons-group"); return buttonGroup; }
private void addVmsStatus(java.util.List<org.ovirt.engine.core.compat.Guid> vmAndTemplatesIds, java.util.Map<java.lang.String, java.lang.Object> data) { java.util.Map<java.lang.String, java.lang.Object> vmsStatus = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid vmId : vmAndTemplatesIds) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vmDynamicDao.get(vmId); if ((vmDynamic != <START_MOD>null) && ((vmDynamic.getStatus()) != <END_MOD>(org.ovirt.engine.core.common.businessentities.VMStatus.Down<START_MOD>)<END_MOD>)) { vmsStatus.put(vmId.toString(), vmDynamic.getStatus().getValue()); log.debug( - Add vm id '{}' with status: '{}' vmId, vmDynamic.getStatus()); } else { log.debug( - Skip <START_MOD>entity<END_MOD> id '{}' with status: '{}' vmId, vmDynamic.getStatus()); } } data.put(OvfInfoFileConstants.VmStatus, vmsStatus); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.VM); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { org.ovirt.engine.core.common.businessentities.VM vm = ovfHelper.readVmFromOvf(ovf.getOvfData()).getVm(); <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageOvfExtraData = storageOvfExtraDataDao.get(org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getParameters().getId(), vm.getId()); if (!(storageOvfExtraData.isEmpty())) { vm.setStatus(org.ovirt.engine.core.common.businessentities.VMStatus.valueOf(storageOvfExtraData.get(0).getEntityValue())); } <END_MOD>vm.setClusterCompatibilityVersion(ovf.getLowestCompVersion()); vm.setClusterArch(ovf.getArchitecture()); vmList.add(vm); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(( to parse a given ovf configuration:   + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setExceptionString(( to parse a given ovf configuration   + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setReturnValue(vmList); }
<START_MOD>private static void initStorageOvfExtraData(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageExtraData, java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> fileEntry) { java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap = new java.util.HashMap<>(); org.ovirt.engine.core.utils.OvfUtils.log.info("Start to analyze metadata File '{}'.", fileEntry.getKey()); java.lang.String storageMetaData = new java.lang.String(fileEntry.getValue().array()); try { diskDescriptionMap = org.ovirt.engine.core.utils.JsonHelper.jsonToMap(storageMetaData); } catch (java.io.IOException e) { org.ovirt.engine.core.utils.OvfUtils.log.error("Failed to convert storage ovf extra data from json to map: '{}'.", storageMetaData); e.printStackTrace(); return; } org.ovirt.engine.core.utils.OvfUtils.fetchStorageStatus(storageDomainId, storageExtraData, diskDescriptionMap); org.ovirt.engine.core.utils.OvfUtils.fetchVmsStatus(storageDomainId, storageExtraData, diskDescriptionMap); org.ovirt.engine.core.utils.OvfUtils.log.info("Finish to analyze metadata File '{}'.", fileEntry.getKey()); }<END_MOD>
private void registerOvfStoreDisks() { for (final org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getStorages()) { if (storageDomainStaticDao.get(storageDomainId).getStorageDomainType().isDataDomain()) { org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.resetOvfStoreAndUnregisteredDisks(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> ovfStoreDiskImages = getAllOVFDisks(storageDomainId, getStoragePool().getId()); registerAllOvfDisks(ovfStoreDiskImages, storageDomainId); List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entitiesFromStorageOvfDisk = getEntitiesFromStorageOvfDisk(storageDomainId, getStoragePool().getId()); for (java.lang.Object ovf : entitiesFromStorageOvfDisk) { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntityData = ((org.ovirt.engine.core.common.businessentities.OvfEntityData) (ovf)); unregisteredOVFDataDao.removeEntity(ovfEntityData.getEntityId(), storageDomainId); unregisteredOVFDataDao.saveOVFData(ovfEntityData); org.ovirt.engine.core.bll.storage.pool.log.info( OVF data of entity id '{}' and entity name '{}' ovfEntityData.getEntityId(), ovfEntityData.getEntityName()); } initUnregisteredDisksToDB(storageDomainId); <START_MOD>initStorageOvfExtraDataToDB(storageDomainId); <END_MOD>return null; }); } } }
private void removeEntitiesFromStorageDomain(final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsForStorageDomain, final java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> vmTemplatesForStorageDomain, final java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksForStorageDomain, final org.ovirt.engine.core.compat.Guid storageDomainId) { <START_MOD>org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { <END_MOD>if (((!(vmsForStorageDomain.isEmpty())) || (!(vmTemplatesForStorageDomain.isEmpty()))) || (!(disksForStorageDomain.isEmpty()))) { <START_MOD>for (org.ovirt.engine.core.common.businessentities.VM vm : vmsForStorageDomain)<END_MOD> { <START_MOD>removeEntityLeftOver(vm.getId(), vm.getName(), storageDomainId); unregisteredOVFDataDao.saveOVFData(new org.ovirt.engine.core.common.businessentities.OvfEntityData(vm.getId(), vm.getName(), VmEntityType.VM, vm.getClusterArch(), vm.getCompatibilityVersion(), storageDomainId, null, null)); } <END_MOD>for (org.ovirt.engine.core.common.businessentities.<START_MOD>VmTemplate vmTemplate<END_MOD> : <START_MOD>vmTemplatesForStorageDomain<END_MOD>) { removeEntityLeftOver(<START_MOD>vmTemplate<END_MOD>.getId(), <START_MOD>vmTemplate<END_MOD>.getName(), storageDomainId); unregisteredOVFDataDao.saveOVFData(new org.ovirt.engine.core.common.businessentities.OvfEntityData(<START_MOD>vmTemplate<END_MOD>.getId(), <START_MOD>vmTemplate<END_MOD>.getName(), VmEntityType.<START_MOD>TEMPLATE, vmTemplate<END_MOD>.getClusterArch(), <START_MOD>clusterDao.get(vmTemplate.getClusterId())<END_MOD>.getCompatibilityVersion(), storageDomainId, null, null)); } <START_MOD>storageDomainDao.removeEntitesFromStorageDomain(storageDomainId<END_MOD>); } <START_MOD>storageOvfExtraDataDao.remove(storageDomainId, null<END_MOD>); return null; }); }
protected void resetOvfStoreAndUnregisteredDisks() { ovfDisks = null; unregisteredDisks = new java.util.ArrayList(); <START_MOD>storageOvfExtraData = new java.util.ArrayList(); <END_MOD>}
<START_MOD>private static void fetchStorageStatus(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageExtraData, java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap) { org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus storageStatus = ((org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus) (diskDescriptionMap.get(OvfInfoFileConstants.DomainStatus))); org.ovirt.engine.core.utils.OvfUtils.log.debug("Storage domain status '{}' fetched from metadata json file for storage id '{}'.", storageStatus, storageDomainId); if (storageStatus != null) { storageExtraData.add(new org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData(storageDomainId, org.ovirt.engine.core.common.VdcObjectType.Storage, storageDomainId, storageStatus.name())); } }<END_MOD>
<START_MOD>private static void fetchVmsStatus(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageExtraData, java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap) { java.util.Map<java.lang.String, java.lang.String> vmsStatus = ((java.util.Map<java.lang.String, java.lang.String>) (diskDescriptionMap.get(OvfInfoFileConstants.VmStatus))); if (vmsStatus == null) { org.ovirt.engine.core.utils.OvfUtils.log.error("VMs status could not be fetched from metadata json file for storage id '{}'.", storageDomainId); } else { for (java.lang.String vmId : vmsStatus.keySet()) { org.ovirt.engine.core.utils.OvfUtils.log.debug("VM '{}' fetched from metadata json file with status '{}' for storage domain id '{}.", vmId, vmsStatus.get(vmId), storageDomainId); storageExtraData.add(new org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData(storageDomainId, org.ovirt.engine.core.common.VdcObjectType.VM, storageDomainId, vmsStatus.get(vmId))); } } }<END_MOD>
private void updateCurrentConfiguration(<START_MOD>org.ovirt.engine.core.common.businessentities.UpdatedMemory updatedMemory<END_MOD>) { final org.ovirt.engine.core.common.businessentities.VmStatic updatedVmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getStaticData()); updatedVmStatic.setMemSizeMb(<START_MOD>updatedMemory<END_MOD>.<START_MOD>getMemoryMb<END_MOD>())<START_MOD>;<END_MOD> <START_MOD>updatedVmStatic.setMinAllocatedMem<END_MOD>(<START_MOD>updatedMemory.getMinMemoryMb<END_MOD>()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmManager().update(updatedVmStatic); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.StoragePoolParametersBase parameters = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStoragePoolId()); <START_MOD>org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = <END_MOD>runInternalAction(ActionType.ProcessOvfUpdateForStoragePool, parameters, org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getContext()); <START_MOD>java.util.HashSet<org.ovirt.engine.core.compat.Guid> proccessedDomains = actionReturnValue.getActionReturnValue(); if (!(proccessedDomains.isEmpty())) { <END_MOD>runInternalActionWithTasksContext(ActionType.ProcessOvfUpdateForStorageDomain, createProcessOvfUpdateForDomainParams()); <START_MOD>} <END_MOD>org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.setSucceeded(true); }
<START_MOD>private void onReplaceConfirmation() { cancelConfirmation(); org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel replaceBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel) (getWindow())); if (replaceBrickModel == null) { return; } if (!(replaceBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getEntity(); if (volumeEntity == null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity existingBrick = getSelectedItem(); if (existingBrick == null) { return; } org.ovirt.engine.core.common.businessentities.VDS server = replaceBrickModel.getServers().getSelectedItem(); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity newBrick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); newBrick.setVolumeId(volumeEntity.getId()); newBrick.setServerId(server.getId()); newBrick.setServerName(server.getHostName()); newBrick.setBrickDirectory(replaceBrickModel.getBrickDirectory().getEntity()); replaceBrickModel.startProgress(); org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters parameter = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters(volumeEntity.getId(), existingBrick, newBrick); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.ReplaceGlusterVolumeBrick, parameter, ( result) -> { org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel) (result.getState())); localModel.stopProgress(); setWindow(null); }, replaceBrickModel); }<END_MOD>
private void invokeHostUpgrade(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters parameters) { <START_MOD>stopGlusterServices(parameters.getVdsId()); <END_MOD>commandCoordinatorUtil.executeAsyncCommand(ActionType.UpgradeHostInternal, createUpgradeParameters(parameters), command.cloneContextAndDetachFromParent()); }
<START_MOD>private void synchronizeSelection() { if (isSingleSelectionOnly()) { setSelectedItem(selectionModel.asSingleSelectionModel().getSelectedObject()); } else { java.util.List<T> selectedItems = selectionModel.asMultiSelectionModel().getSelectedList(); setSelectedItems(selectedItems); if ((selectedItems.size()) == 1) { setSelectedItem(selectedItems.get(0)); } } }<END_MOD>
public void setSelectionModel(org.ovirt.engine.ui.uicommonweb.models.OvirtSelectionModel<T> selectionModel) { this.selectionModel = selectionModel; <START_MOD>if (!(selectionModel.isSingleSelectionOnly())) { selectionModel.asMultiSelectionModel().setDataDisplay(this); selectionModel.asMultiSelectionModel().setMultiSelectEnabled(true); <END_MOD>}<START_MOD> }<END_MOD>
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if ((event.getSource()) instanceof org.gwtbootstrap3.client.ui.ListGroupItem) { org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T> clickedItem = null; for (org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T> item : currentState) { if ((item.asListGroupItem()) == (event.getSource())) { clickedItem = item; break; } } if (clickedItem != null) { <START_MOD>if (<END_MOD>(!(event.isControlKeyDown())) <START_MOD>&& (!(event.isShiftKeyDown()))) { selectionModel.clear(<END_MOD>); selectionModel.setSelected(clickedItem.getEntity(), true); <START_MOD>} else if (event.isControlKeyDown()) { selectionModel.setSelected<END_MOD>(clickedItem.getEntity()<START_MOD>, (!(selectionModel.isSelected<END_MOD>(clickedItem.getEntity())<START_MOD>))); } } } }<END_MOD>
<START_MOD>private void processSelectionChanged() { java.util.List<T> selectedItems = getSelectedItems(); selectedIndexes.clear(); model.getItems().forEach(( item) -> { if (selectedItems.contains(item)) { selectedIndexes.add(model.getItemsAsList().indexOf(item)); } }); updateInfoPanel(); }<END_MOD>
public void setModel(M model) { this.model = model; getModel().<START_MOD>getItemsChangedEvent<END_MOD>().addListener(( ev, sender, args) -> <START_MOD>{ if ((selectionChangedHandler) != null) { selectionChangedHandler.removeHandler(); } getModel().getSelectionModel().clear(); List<org.ovirt.engine.ui.common.widget.listgroup.T> items = getModel().getItemsAsList(); selectedIndexes.forEach(( selectedIndex) -> { if ((selectedIndex > (-1)) && (selectedIndex < (items.size()))) { getModel().getSelectionModel().setSelected(items.get(selectedIndex), true); } }); <END_MOD>updateInfoPanel()<START_MOD>; selectionChangedHandler = selectionModel.addSelectionChangeHandler(( e<END_MOD>) -> <START_MOD>processSelectionChanged()); }); }<END_MOD>
@java.lang.Override protected java.lang.String transform(java.util.ArrayList<java.lang.String> fileNameList, org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.ISO_PREFIX) + (super.transform(repoImage)); }
public static void getUnknownImageList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<java.lang.String>> aQuery, org.ovirt.engine.core.compat.Guid storagePoolId, boolean forceRefresh) { org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.getIrsImageList(aQuery, storagePoolId, forceRefresh, ImageFileType.All, new org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.RepoImageToImageFileNameAsyncConverter() { @java.lang.Override protected java.lang.String transform(java.util.ArrayList<java.lang.String> fileNameList, org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.ISO_PREFIX) + (super.transform(repoImage)); } @java.lang.Override protected boolean desiredImage(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.core.common.businessentities.storage.ImageFileType.Unknown) == (repoImage.getFileType()); } }); }
public void addMainContentView(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, int priority<START_MOD>, boolean defaultPlace<END_MOD>) { menuPresenterWidget.addMenuItem(priority, label, historyToken); dynamicUrlContentProxyFactory.create(historyToken, contentUrl); <START_MOD>if (defaultPlace && ((placeManager) instanceof org.ovirt.engine.ui.webadmin.place.WebAdminPlaceManager)) { ((org.ovirt.engine.ui.webadmin.place.WebAdminPlaceManager) (placeManager)).setDefaultPlace(historyToken); <END_MOD>}<START_MOD> }<END_MOD>
@java.lang.Deprecated public void addMainTab(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { addMainContentView(label, historyToken, contentUrl, options.getPriority().intValue()<START_MOD>, options.getIsDefaultPlace().booleanValue()<END_MOD>); }
@java.lang.Override public void onUserLoginChange(org.ovirt.engine.ui.common.auth.UserLoginChangeEvent event) { <START_MOD>final com<END_MOD>.<START_MOD>gwtplatform.mvp.shared.proxy.PlaceRequest fragmentRequest = getPlaceFromFragment<END_MOD>(); if (<START_MOD>fragmentRequest<END_MOD> != null) { <START_MOD>com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> <END_MOD>revealPlace(<START_MOD>fragmentRequest<END_MOD>)<START_MOD>)<END_MOD>; } else { <START_MOD>revealPlace<END_MOD>(<START_MOD>getDefaultMainSectionPlace()<END_MOD>); } }
<START_MOD>public java.lang.Boolean getIsDefaultPlace() { return getValueAsBoolean("isDefaultPlace", false); }<END_MOD>
private boolean isColdReboot() { <START_MOD>boolean coldReboot = ((org.ovirt.engine.core.bll.RebootVmCommand.getVm().isRunOnce()) && (!(org.ovirt.engine.core.bll.RebootVmCommand.getVm().isVolatileRun()))) || (org.ovirt.engine.core.bll.RebootVmCommand.getVm().isNextRunConfigurationExists()); log.info( '{}' is performing {} reboot; run once: '{}', running as volatile: '{}', has next run configuration: '{}' (coldReboot ? "cold" : "warm"), org.ovirt.engine.core.bll.RebootVmCommand.getVm().isRunOnce(), org.ovirt.engine.core.bll.RebootVmCommand.getVm().isVolatileRun(), org.ovirt.engine.core.bll.RebootVmCommand.getVm().isNextRunConfigurationExists()); <END_MOD>return <START_MOD>coldReboot<END_MOD>; }
private java.lang.Integer getQosBandwidth(org.ovirt.engine.core.compat.Guid clusterId) { final org.ovirt.engine.core.common.businessentities.network.HostNetworkQos migrationHostNetworkQos = <START_MOD>dbFacade<END_MOD>.getHostNetworkQosDao().getHostNetworkQosOfMigrationNetworkByClusterId(clusterId); if (migrationHostNetworkQos == null) { return null; } if ((migrationHostNetworkQos.getOutAverageRealtime()) != null) { return migrationHostNetworkQos.getOutAverageRealtime(); } return migrationHostNetworkQos.getOutAverageUpperlimit(); }
protected org.ovirt.engine.api.model.Disk addLinks(org.ovirt.engine.api.model.Disk model, java.lang.Class<? extends org.ovirt.engine.api.model.BaseResource> suggestedParent, java.lang.String... subCollectionMembersToExclude) { <START_MOD>if ((model.isSetQuota()) && (model.getQuota().isSetId())) { org.ovirt.engine.core.common.businessentities.Quota quota = getEntity(org.ovirt.engine.core.common.businessentities.Quota.class, QueryType.GetQuotaByQuotaId, new org.ovirt.engine.core.common.queries.IdQueryParameters(asGuid(model.getQuota().getId())), "quota"); model.getQuota().setDataCenter(new org.ovirt.engine.api.model.DataCenter()); model.getQuota().getDataCenter().setId(quota.getStoragePoolId().toString()); } <END_MOD>org.ovirt.engine.api.model.Disk disk = super.addLinks(model, suggestedParent, subCollectionMembersToExclude); if (disk.isSetStorageDomains()) { disk.getStorageDomains().getStorageDomains().forEach(( storageDomain) -> org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(storageDomain, null, false)); } return disk; }
protected org.ovirt.engine.api.model.Disks mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> entities) { org.ovirt.engine.api.model.Disks collection = new org.ovirt.engine.api.model.Disks(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : entities) { <START_MOD>org.ovirt.engine.api.model.Disk model = populate(map(disk), disk); if ((model.isSetQuota()) && (disk instanceof org.ovirt.engine.core.common.businessentities.storage.DiskImage)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); model.getQuota().setDataCenter(new org.ovirt.engine.api.model.DataCenter()); model.getQuota().getDataCenter().setId(image.getStoragePoolId().toString()); } <END_MOD>collection.getDisks().add(addLinks(<START_MOD>model<END_MOD>)); } return collection; }
private void selectRow(int shift) { if ((selectedSet.isEmpty()) || ((dataDisplay) == null)) { return; } int shiftSelectedRow = (lastSelectedRow) + shift; int nextRow = (shiftSelectedRow <START_MOD>><END_MOD> 0) ? shiftSelectedRow % (dataDisplay.getRowCount()) : shiftSelectedRow + (dataDisplay.getRowCount()); if (disabledRows.contains(nextRow)) { selectRow((shift >   ? shift + 1 : shift - 1)); return; } setSelected(visibleItemsAsList().get(nextRow), true); }
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult networkNameNotUsedAsVdsmName() { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> conflictingNetworks = getDbFacade().getNetworkDao().getAllForDataCenter(network.getDataCenterId()).stream().filter(( net) -> !(net.getId().equals(network.getId()))).filter(( net) -> net.getVdsmName().equals(network.getName())).collect(java.util.stream.Collectors.toList()); if (conflictingNetworks.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.Collection<java.lang.String> nameReplacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith("ConflictingNetworks", conflictingNetworks); nameReplacements.add(getNetworkNameReplacement()); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_NAME_USED_AS_INTERFACE_NAME, nameReplacements); }<END_MOD>
<START_MOD>@org.junit.Test public void networkNameTakenByVdsmName() { when(network.getName()).thenReturn("vdsm-name"); when(network.getId()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID); org.ovirt.engine.core.common.businessentities.network.Network network2 = new org.ovirt.engine.core.common.businessentities.network.Network(); network2.setVdsmName("vdsm-name"); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); when(networkDao.getAllForDataCenter(any())).thenReturn(java.util.Arrays.asList(network, network2)); assertThat(validator.networkNameNotUsedAsVdsmName(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.NETWORK_NAME_USED_AS_INTERFACE_NAME)); }<END_MOD>
@java.lang.Override protected java.lang.String getColorByProgress(int progress) { return org.ovirt.engine.ui.common.widget.table.column.<START_MOD>TransferDiskImageProgressColumn<END_MOD>.color.asCode(); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid storageDomainId = org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStorageDomainId(); org.ovirt.engine.core.common.action.<START_MOD>ProcessOvfUpdateForStorageDomainCommandParameters<END_MOD> parameters = new org.ovirt.engine.core.common.action.<START_MOD>ProcessOvfUpdateForStorageDomainCommandParameters<END_MOD>(org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStoragePoolId<START_MOD>(), org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStorageDomainId<END_MOD>()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.ProcessOvfUpdateForStoragePool, parameters, org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getContext()); java.util.Set<org.ovirt.engine.core.compat.Guid> proccessedDomains = actionReturnValue.getActionReturnValue(); if (((actionReturnValue.getSucceeded()) && (proccessedDomains != null)) && (proccessedDomains.contains(storageDomainId))) { runInternalActionWithTasksContext(ActionType.ProcessOvfUpdateForStorageDomain, createProcessOvfUpdateForDomainParams()); } else { log.info( update was ignored - nothing to update for storage domain '{}' storageDomainId); } org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.setSucceeded(true); }
protected void proccessDomainsForOvfUpdate(org.ovirt.engine.core.common.businessentities.StoragePool pool) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsInPool = storageDomainDao.getAllForStoragePool(pool.getId()); for (org.ovirt.engine.core.common.businessentities.StorageDomain domain : domainsInPool) { if ((!(domain.getStorageDomainType().isDataDomain())) || ((<START_MOD>(<END_MOD>domain.getStatus()) != (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active<START_MOD>)) && (!(domain.getId().equals(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStoragePoolCommand.getParameters().getStorageDomainId()))<END_MOD>))) { continue; } activeDataDomainsIds.add(domain.getId()); java.lang.Integer ovfStoresCountForDomain = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.StorageDomainOvfStoreCount); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo> storageDomainOvfInfos = storageDomainOvfInfoDao.getAllForDomain(domain.getId()); if ((storageDomainOvfInfos.size()) < ovfStoresCountForDomain) { proccessedDomains.add(domain.getId()); continue; } for (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo storageDomainOvfInfo : storageDomainOvfInfos) { if ((storageDomainOvfInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.OUTDATED)) { proccessedDomains.add(storageDomainOvfInfo.getStorageDomainId()); break; } } } }
<START_MOD>public static org.ovirt.engine.api.model.ResumeBehavior mapResumeBehavior(org.ovirt.engine.api.model.ResumeBehavior resumeBehavior) { if (resumeBehavior == null) { return null; } switch (resumeBehavior) { case AUTO_RESUME : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.ResumeBehavior; case LEAVE_PAUSED : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.ResumeBehavior; case KILL : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.ResumeBehavior; default : throw new java.lang.IllegalArgumentException((("Unknown resume behavior \"" + resumeBehavior) + "\"")); } }<END_MOD>
<START_MOD>public static org.ovirt.engine.api.model.ResumeBehavior mapResumeBehavior(org.ovirt.engine.core.common.businessentities.ResumeBehavior resumeBehavior) { if (resumeBehavior == null) { return null; } switch (resumeBehavior) { case AUTO_RESUME : return org.ovirt.engine.api.model.ResumeBehavior.AUTO_RESUME; case LEAVE_PAUSED : return org.ovirt.engine.api.model.ResumeBehavior.LEAVE_PAUSED; case KILL : return org.ovirt.engine.api.model.ResumeBehavior.KILL; default : throw new java.lang.IllegalArgumentException((("Unknown resume behavior \"" + resumeBehavior) + "\"")); } }<END_MOD>
<START_MOD>private void logNoDeviceToHotUnplug(java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmMemoryDevices) { final org.ovirt.engine.core.common.AuditLogType message = (vmMemoryDevices.isEmpty()) ? org.ovirt.engine.core.common.AuditLogType.NO_MEMORY_DEVICE_TO_HOT_UNPLUG : org.ovirt.engine.core.common.AuditLogType.NO_SUITABLE_MEMORY_DEVICE_TO_HOT_UNPLUG; if (!(vmMemoryDevices.isEmpty())) { final int originalMemoryMb = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getMemSizeMb(); org.ovirt.engine.core.bll.UpdateVmCommand.addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_OLD_MEMORY_MB, java.lang.String.valueOf(originalMemoryMb)); addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_NEW_MEMORY_MB, java.lang.String.valueOf(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm().getMemSizeMb())); final java.lang.String unplugOptions = vmMemoryDevices.stream().filter(VmDeviceCommonUtils::isMemoryDeviceHotUnpluggable).map(( device) -> org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(device).get()).map(( deviceSize) -> java.lang.String.format("%dMB (%dMB)", deviceSize, memoryAfterHotUnplug(originalMemoryMb, deviceSize))).collect(java.util.stream.Collectors.joining(", ")); org.ovirt.engine.core.bll.UpdateVmCommand.addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_MEMORY_HOT_UNPLUG_OPTIONS, unplugOptions); } auditLogDirector.log(this, message); }<END_MOD>
<START_MOD>public static boolean isMemoryDeviceHotUnpluggable(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isMemory(memoryDevice))) { throw new java.lang.RuntimeException((("Memory device expected but device " + memoryDevice) + " obtained.")); } return (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSpecParamsIntValue(memoryDevice, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE).isPresent()) && (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSpecParamsIntValue(memoryDevice, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_NODE).isPresent()); }<END_MOD>
<START_MOD>private void hotUnplugMemory(org.ovirt.engine.core.common.businessentities.VM newVm) { final org.ovirt.engine.core.common.businessentities.VM vmFromDb = org.ovirt.engine.core.bll.UpdateVmCommand.getVm(); final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmMemoryDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(getVmId(), VmDeviceGeneralType.MEMORY, VmDeviceType.MEMORY); final org.ovirt.engine.core.common.businessentities.VmDevice memoryDeviceToUnplug = computeMemoryDeviceToHotUnplug(vmMemoryDevices); final int oldMemoryMb = vmFromDb.getMemSizeMb(); final int oldMinMemoryMb = vmFromDb.getMinAllocatedMem(); if (memoryDeviceToUnplug == null) { logNoDeviceToHotUnplug(vmMemoryDevices); newVmStatic.setMemSizeMb(oldMemoryMb); newVmStatic.setMinAllocatedMem(oldMinMemoryMb); return; } final org.ovirt.engine.core.common.action.ActionReturnValue hotUnplugReturnValue = runInternalAction(ActionType.HotUnplugMemoryWithoutVmUpdate, new org.ovirt.engine.core.common.action.HotUnplugMemoryWithoutVmUpdateParameters(memoryDeviceToUnplug.getId(), newVm.getMinAllocatedMem()), org.ovirt.engine.core.bll.UpdateVmCommand.cloneContextAndDetachFromParent()); if (!(vmFromDb.isHostedEngine())) { final int memoryDeviceSizeMb = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(memoryDeviceToUnplug).get(); final int memoryAfterHotUnplugMb = oldMemoryMb - memoryDeviceSizeMb; newVmStatic.setMemSizeMb((hotUnplugReturnValue.getSucceeded() ? memoryAfterHotUnplugMb : oldMemoryMb)); newVmStatic.setMinAllocatedMem((hotUnplugReturnValue.getSucceeded() ? newVm.getMinAllocatedMem() : oldMinMemoryMb)); } }<END_MOD>
<START_MOD>@java.lang.Override public void runForS390() { diskIndex = 0; }<END_MOD>
<START_MOD>@java.lang.Override public void runForS390() { hasMaximum = (org.ovirt.engine.core.bll.VmCommand.MAX_VIRTIO_CCW_DISKS) == (countDisks(DiskInterface.VirtIO)); }<END_MOD>
<START_MOD>void runForS390();<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitecture() { return org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64; }<END_MOD>
<START_MOD>@java.lang.Override public <T extends org.ovirt.engine.core.utils.archstrategy.ArchCommand> T run(T c) { c.runForS390(); return c; }<END_MOD>
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.HostDeviceView object) { return (object.getMdevTypes()) == null ? "" : java.lang.String.join(   object.getMdevTypes()<START_MOD>.stream().sorted().collect(java.util.stream.Collectors.toList())<END_MOD>); }
public static java.lang.Double <START_MOD>percent2bits<END_MOD>(java.lang.Integer speedValueInMegaBits, java.lang.Double rxTxValueInPrecent) { if ((speedValueInMegaBits == null) || (rxTxValueInPrecent == null)) { return 0.0; } return (speedValueInMegaBits * rxTxValueInPrecent) / 100; }
<START_MOD>@org.junit.Test public void testDefaultRouteWhenOutOfSyncOnOlderCluster() { cluster.setCompatibilityVersion(Version.v4_1); network.setDnsResolverConfiguration(sampleDnsResolverConfiguration); assertThat(createTestedInstance(true, sampleDnsResolverConfiguration).isNetworkInSync(), is(false)); }<END_MOD>
<START_MOD>public static boolean defaultRouteSupported(org.ovirt.engine.core.compat.Version version) { return Version.v4_2.lessOrEquals(version); }<END_MOD>
@java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { <START_MOD>org.ovirt.engine.core.compat.Version clusterVersion = clusterNetworkModel.getCluster().getCompatibilityVersion(); boolean defaultRouteSupported = Version.v4_2.lessOrEquals(clusterVersion); <END_MOD>return (<START_MOD>(defaultRouteSupported && <END_MOD>(clusterNetworkModel.isAttached(<START_MOD>)<END_MOD>)) && (!(clusterNetworkModel.isExternal()))) && (((!(isMultipleSelectionAllowed())) || (!(clusterNetworkModel.isManagement()))) || (!(clusterNetworkModel.getOriginalNetworkCluster().isDefaultRoute()))); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass()) != (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer other = ((org.ovirt.engine.core.common.businessentities.storage.ImageTransfer) (obj)); return ((((((((((<START_MOD>(<END_MOD>java.util.Objects.equals(commandId, other.commandId)) && (java.util.Objects.equals(phase, other.phase))) && (<START_MOD>(type) == (other.type))) && (<END_MOD>java.util.Objects.equals(lastUpdated, other.lastUpdated))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(diskId, other.diskId))) && (java.util.Objects.equals(imagedTicketId, other.imagedTicketId))) && (java.util.Objects.equals(proxyUri, other.proxyUri))) && (java.util.Objects.equals(signedTicket, other.signedTicket))) && (java.util.Objects.equals(bytesSent, other.bytesSent))) && (java.util.Objects.equals(bytesTotal, other.bytesTotal)); }
<START_MOD>private void pollDownloadStatus(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId())); if ((returnValue != null) && (returnValue.getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer imageTransfer = returnValue.getActionReturnValue(); if ((((imageTransfer.getBytesTotal()) != null) && (imageTransfer.getBytesTotal().equals(imageTransfer.getBytesSent()))) && (!(imageTransfer.getActive()))) { if (!(context.entity.getActive())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); updates.setPhase(ImageTransferPhase.FINALIZING_SUCCESS); org.ovirt.engine.core.common.action.TransferImageStatusParameters parameters = new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); parameters.setUpdates(updates); runInternalAction(ActionType.TransferImageStatus, parameters); } } } }<END_MOD>
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass()) != (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer other = ((org.ovirt.engine.core.common.businessentities.storage.ImageTransfer) (obj)); return (((((((((((<START_MOD>(<END_MOD>java.util.Objects.equals(commandId, other.commandId)) && (java.util.Objects.equals(phase, other.phase))) && ((type) == (other.type))) && (java.util.Objects.equals(<START_MOD>active, other.active))) && (java.util.Objects.equals(<END_MOD>lastUpdated, other.lastUpdated))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(diskId, other.diskId))) && (java.util.Objects.equals(imagedTicketId, other.imagedTicketId))) && (java.util.Objects.equals(proxyUri, other.proxyUri))) && (java.util.Objects.equals(signedTicket, other.signedTicket))) && (java.util.Objects.equals(bytesSent, other.bytesSent))) && (java.util.Objects.equals(bytesTotal, other.bytesTotal)); }
private void handleTransferring(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((context.iterationTimestamp) >= ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getSessionExpiration()) - (getHostTicketRefreshAllowance()))) { log.info( transfer ticket for {} getTransferDescription()); <START_MOD>boolean extendSucceeded = <END_MOD>extendImageTransferSession(context.entity); <START_MOD>if (!extendSucceeded) { log.info( to renew transfer ticket for {} getTransferDescription()); if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().isExtendTicketFailed()) { updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setExtendTicketFailed(false); } org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setExtendTicketFailed(true); } <END_MOD>} else { log.debug( yet renewing transfer ticket for {} getTransferDescription()); } resetPeriodicPauseLogTime(0); }
<START_MOD>public boolean isExtendTicketFailed() { return extendTicketFailed; }<END_MOD>
<START_MOD>public void setExtendTicketFailed(boolean extendTicketFailed) { this.extendTicketFailed = extendTicketFailed; }<END_MOD>
<START_MOD>private static org.ovirt.engine.core.common.utils.Pair noneAndNone() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); java.lang.String expectedOutput = "{}"; return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }<END_MOD>
private void storeNetwork() throws java.io.UnsupportedEncodingException { if (<START_MOD>sourceProtocol<END_MOD>.equals(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.<START_MOD>NetConfigSourceProtocol<END_MOD>.<START_MOD>OPENSTACK_METADATA))<END_MOD> <START_MOD>{<END_MOD> <START_MOD>networkData = new org<END_MOD>.<START_MOD>ovirt.engine.core.vdsbroker.vdsbroker.VmInitToOpenStackMetadata<END_MOD>(<START_MOD>vmInit<END_MOD>)<START_MOD>.asMap(); } else { storeNetworkAsEni(<END_MOD>); } }
<START_MOD>private static org.ovirt.engine.core.common.utils.Pair dhcpIPv6() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setIpv6BootProtocol(Ipv6BootProtocol.DHCP); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "{\n" + ((((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"dhcp6\",\n") + " \"link\": \"iface name\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }<END_MOD>
<START_MOD>private static org.ovirt.engine.core.common.utils.Pair staticIPv6() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setIpv6BootProtocol(Ipv6BootProtocol.STATIC_IP); underTest.setIpv6Address(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV6_ADDRESS); underTest.setIpv6Prefix(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV6_PREFIX); underTest.setIpv6Gateway(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV6_GATEWAY); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "{\n" + (((((((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"ipv6\",\n") + " \"link\": \"iface name\",\n") + " \"ip_address\": \"ipv6 address\",\n") + " \"netmask\": 666,\n") + " \"gateway\": \"ipv6 gateway\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }<END_MOD>
<START_MOD>private static org.ovirt.engine.core.common.utils.Pair staticIPv6AddressOnly() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setIpv6BootProtocol(Ipv6BootProtocol.STATIC_IP); underTest.setIpv6Address(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV6_ADDRESS); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "{\n" + (((((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"ipv6\",\n") + " \"link\": \"iface name\",\n") + " \"ip_address\": \"ipv6 address\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }<END_MOD>
<START_MOD>@org.junit.Test public void test() throws java.io.IOException { org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler underTest = new org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler(vmInit, org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.NetConfigSourceProtocol.OPENSTACK_METADATA); final java.util.Map<java.lang.String, byte[]> actual = underTest.getFileData(); java.util.Map<java.lang.String, java.lang.Object> actualNetworkData = parseResult(actual); java.util.Map<java.lang.String, java.lang.Object> expectedNetworkData = org.ovirt.engine.core.utils.JsonHelper.jsonToMap(expected); assertEquals(expectedNetworkData, actualNetworkData); }<END_MOD>
<START_MOD>private static org.ovirt.engine.core.common.utils.Pair dhcpIPv4() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setBootProtocol(Ipv4BootProtocol.DHCP); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "{\n" + ((((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"dhcp4\",\n") + " \"link\": \"iface name\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }<END_MOD>
<START_MOD>private static org.ovirt.engine.core.common.utils.Pair staticIPv4() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setBootProtocol(Ipv4BootProtocol.STATIC_IP); underTest.setIp(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV4_ADDRESS); underTest.setNetmask(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV4_NETMASK); underTest.setGateway(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV4_GATEWAY); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); java.lang.String expectedOutput = "{\n" + (((((((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"ipv4\",\n") + " \"link\": \"iface name\",\n") + " \"ip_address\": \"ipv4 address\",\n") + " \"netmask\": \"ipv4 netmask\",\n") + " \"gateway\": \"ipv4 gateway\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }<END_MOD>
<START_MOD>private static org.ovirt.engine.core.common.utils.Pair dnsServersOnly() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setDnsSearch("search1 search2"); vmInit.setDnsServers("nameserver1 nameserver2 nameserver3"); java.lang.String expectedOutput = "{\n" + ((((((((((((((((((((((" \"services\": [\n" + " {\n") + " \"address\": \"nameserver1\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver2\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver3\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"search1\",\n") + " \"type\": \"dns-search\"\n") + " },\n") + " {\n") + " \"address\": \"search2\",\n") + " \"type\": \"dns-search\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }<END_MOD>
<START_MOD>protected void addUserDomainToVm() { mapDbUsers().forEach(( dbUser) -> { }); }<END_MOD>
<START_MOD>protected void readUserDomainsSection(@java.lang.SuppressWarnings("unused") org.ovirt.engine.core.utils.ovf.xml.XmlNode section) { }<END_MOD>
<START_MOD>protected java.util.List<org.ovirt.engine.core.common.businessentities.aaa.DbUser> mapDbUsers() { java.util.List<org.ovirt.engine.core.common.businessentities.aaa.DbUser> dbUsers = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.String> userDomainsMap = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getDomainMap(); org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getDbUsers().forEach(( dbUser) -> { org.ovirt.engine.core.common.businessentities.aaa.DbUser originalDbUser = dbUserDao.getByUsernameAndDomain(dbUser.getLoginName(), dbUser.getDomain()); if (userDomainsMap != null) { java.lang.String destDomain = userDomainsMap.get(dbUser.getDomain()); if (destDomain != null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser destDbUser = dbUserDao.getByUsernameAndDomain(dbUser.getLoginName(), destDomain); } } }); }<END_MOD>
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData)) { return false; } org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData other = ((org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData) (obj)); return ((((((<START_MOD>(<END_MOD>super.equals(obj)) && (java.util.Objects.equals(diskImages, other.diskImages))) && (java.util.Objects.equals(lunDisks, other.lunDisks))) && (java.util.Objects.equals(interfaces, other.interfaces))) && (java.util.Objects.equals(vmBase, other.vmBase))) && (java.util.Objects.equals(clusterName, other.clusterName))) && (java.util.Objects.equals(affinityGroups, other.affinityGroups))<START_MOD>) && (java.util.Objects.equals(dbUsers, other.dbUsers))<END_MOD>; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), diskImages, lunDisks, interfaces, vmBase, clusterName, affinityGroups<START_MOD>, dbUsers<END_MOD>); }
@java.lang.Override protected void executeCommand() { affinityGroupDao.update(getParameters().getAffinityGroup()); <START_MOD>vmStaticDao.incrementDbGenerationForVms(getAffinityGroup().getVmIds()); <END_MOD>setSucceeded(true); }
<START_MOD>@java.lang.Override public void addVmToAffinityLabels() { mapAffinityLabels().forEach(( affinityLabel) -> { affinityLabel.getVms().add(getParameters().getVm().getId()); labelDao.update(affinityLabel); }); }<END_MOD>
@java.lang.Override public void buildVirtualSystem() { org.ovirt.engine.core.utils.ovf.xml.XmlNode virtualSystem = selectSingleNode(_document, "//*/Content"); consumeReadProperty(virtualSystem, org.ovirt.engine.core.utils.ovf.NAME, ( val) -> fullEntityOvfData.getVmBase().setName(val)); fullEntityOvfData.getVmBase().setOvfVersion(getVersion()); org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = selectNodes(virtualSystem, "Section"); if (list != null) { org.ovirt.engine.core.utils.ovf.xml.XmlNode node = getNode(list, "xsi:type", "ovf:OperatingSystemSection_Type"); if (node != null) { readOsSection(node); if ((!(osRepository.isLinux(fullEntityOvfData.getVmBase().getOsId()))) || ((fullEntityOvfData.getVmBase().getDefaultDisplayType()) != (org.ovirt.engine.core.common.businessentities.DisplayType.qxl))) { fullEntityOvfData.getVmBase().setSingleQxlPci(false); } } node = getNode(list, "xsi:type", "ovf:VirtualHardwareSection_Type"); if (node != null) { readHardwareSection(node); } node = getNode(list, "xsi:type", "ovf:SnapshotsSection_Type"); if (node != null) { readSnapshotsSection(node); } node = getNode(list, "xsi:type", "ovf:AffinityGroupsSection_Type"); if (node != null) { readAffinityGroupsSection(node); } node = getNode(list, "xsi:type", <START_MOD>"ovf:AffinityLabelSection_Type"); if (node != null) { readAffinityLabelsSection(node); } node = getNode(list, "xsi:type", <END_MOD>"ovf:UserDomainsSection_Type"); if (node != null) { readUserDomainsSection(node); } } readGeneralData(virtualSystem); }
@java.lang.Override protected void executeCommand() { labelDao.update(getParameters().getLabel()); <START_MOD>vmStaticDao.incrementDbGenerationForVms(new java.util.ArrayList(getParameters().getLabel().getVms())); <END_MOD>setActionReturnValue(getParameters().getLabel()); setSucceeded(true); }
<START_MOD>@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.Label> mapAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.String> affinityLabelMap = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getAffinityLabelMap(); org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getAffinityLabels().forEach(( affinityLabel) -> { org.ovirt.engine.core.common.businessentities.Label originalAffinityLabel = labelDao.getByName(affinityLabel); if (affinityLabelMap != null) { java.lang.String destName = affinityLabelMap.get(affinityLabel); if (destName != null) { org.ovirt.engine.core.common.businessentities.Label destAffinityLabel = labelDao.getByName(destName); addBusinessEntityToList(affinityLabels, destAffinityLabel, originalAffinityLabel); } else { addBusinessEntityToList(affinityLabels, originalAffinityLabel, null); } } else { addBusinessEntityToList(affinityLabels, originalAffinityLabel, null); } }); return affinityLabels; }<END_MOD>
<START_MOD>@java.lang.Override protected void mapDbUsers() { java.util.Map<java.lang.String, java.lang.String> userDomainsMap = org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.getParameters().getDomainMap(); org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.getParameters().getDbUsers().forEach(( dbUser) -> { org.ovirt.engine.core.common.businessentities.aaa.DbUser originalDbUser = dbUserDao.getByUsernameAndDomain(dbUser.getLoginName(), dbUser.getDomain()); if (userDomainsMap != null) { java.lang.String destDomain = userDomainsMap.get(dbUser.getDomain()); if (destDomain != null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser destDbUser = dbUserDao.getByUsernameAndDomain(dbUser.getLoginName(), destDomain); if (destDbUser != null) { addPermissionsForUser(destDbUser, getParameters().getUserToRoles()); } } else if (originalDbUser != null) { addPermissionsForUser(originalDbUser, getParameters().getUserToRoles()); } } else if (originalDbUser != null) { addPermissionsForUser(originalDbUser, getParameters().getUserToRoles()); } else { org.ovirt.engine.core.common.businessentities.aaa.DbUser newDbUser = new org.ovirt.engine.core.common.businessentities.aaa.DbUser(); newDbUser.setLoginName(dbUser.getLoginName()); newDbUser.setDomain(dbUser.getDomain()); dbUserDao.save(newDbUser); org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.log.debug("User {}@{} does not exist, creating it...", newDbUser.getLoginName(), newDbUser.getDomain()); } }); }<END_MOD>
<START_MOD>private void writeAffinityLabels() { java.util.List<java.lang.String> affinityLabelsNames = fullEntityOvfData.getAffinityLabels(); if ((affinityLabelsNames == null) || (affinityLabelsNames.isEmpty())) { return; } _writer.writeStartElement("Section"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", "ovf:AffinityLabelsSection_Type"); affinityLabelsNames.forEach(( labelName) -> { _writer.writeStartElement(OvfProperties.AFFINITY_GROUP); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "name", labelName); _writer.writeEndElement(); }); _writer.writeEndElement(); }<END_MOD>
<START_MOD>public void enableSelectionElements(boolean enableElements) { selectHostAutomaticallyEditor.setEnabled(enableElements); selectDestinationHostEditor.setEnabled(enableElements); hostsListEditor.setEnabled(enableElements); }<END_MOD>
public <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.VDS><END_MOD> canSchedule(org.ovirt.engine.core.common.businessentities.Cluster cluster, org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.compat.Guid> vdsBlackList, java.util.List<org.ovirt.engine.core.compat.Guid> vdsWhiteList, java.util.List<java.lang.String> messages) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = vdsDao.getAllForClusterWithStatus(cluster.getId(), VDSStatus.Up); vdsList = removeBlacklistedHosts(vdsList, vdsBlackList); vdsList = keepOnlyWhitelistedHosts(vdsList, vdsWhiteList); refreshCachedPendingValues(vdsList); org.ovirt.engine.core.common.scheduling.ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId()); java.util.Map<java.lang.String, java.lang.String> parameters = createClusterPolicyParameters(cluster); vdsList = runFilters(policy.getFilters(), cluster, vdsList, vm, parameters, policy.getFilterPositionMap(), messages, noWaitingVmDelayer, false, null); return vdsList != null<START_MOD> ? vdsList : java.util.Collections.emptyList(<END_MOD>); }
void localize() { selectHostAutomaticallyEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.vmMigratePopupSelectHostAutomaticallyLabel()); selectDestinationHostEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.vmMigratePopupSelectDestinationHostLabel()); hostsListEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.vmMigratePopupHostsListLabel()); clustersEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.hostClusterVmPopup()); message1.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateHostDisabledVMsInServerClusters()); message2.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateSomeVmsAlreadyRunningOnHost()); message3.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateNoAvailableHost()); <START_MOD>message4.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateNoAvailableHeHost()); <END_MOD>}
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel object) { driver.edit(object); updateMessages(object<START_MOD>); enableSelectionElements(object.getEnableSelectionElements()<END_MOD>); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { updateMessages(object); <START_MOD>enableSelectionElements(object.getEnableSelectionElements()); <END_MOD>} }); }
private void updateMessages(org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel object) { message1.setVisible((!(object.getVmsOnSameCluster()))); message2.setVisible(object.getIsSameVdsMessageVisible()); message3.setVisible(object.getNoSelAvailable()); <START_MOD>message4.setVisible(object.getNoHeSelAvailable()); <END_MOD>}
private void removeUnselectableHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.compat.Guid run_on_vds, boolean allRunOnSameVds<START_MOD>, boolean hostedEngineOnlyMigration<END_MOD>) { if ((getVmsOnSameCluster()) && allRunOnSameVds) { org.ovirt.engine.core.common.businessentities.VDS runOnSameVDS = null; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getId().equals(run_on_vds)) { runOnSameVDS = host; } } hosts.remove(runOnSameVDS); } <START_MOD>if (hostedEngineOnlyMigration) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> nonHeHosts = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (!(host.isHostedEngineDeployed())) { nonHeHosts.add(host); } } hosts.removeAll(nonHeHosts); } }<END_MOD>
@java.lang.Override protected void onReveal() { super.onReveal(); setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.TYPE_SetSearchPanel, searchPanelPresenterWidget); setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.TYPE_SetBreadCrumbs, breadCrumbsPresenterWidget); <START_MOD>org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getView().resizeToFullHeight(); <END_MOD>}
@java.lang.Override protected boolean validate() { boolean returnValue = (((super.validate()) && <START_MOD>(validate<END_MOD>(org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.<START_MOD>createStoragePoolValidator<END_MOD>()<START_MOD>.existsAndUp(<END_MOD>)))) && (org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.initializeVds())) && (checkStorageDomainsInPool()); return returnValue; }
<START_MOD>public static boolean isVmLeaseBeHotplugged(org.ovirt.engine.core.common.businessentities.VM source, org.ovirt.engine.core.common.businessentities.VM destination) { return !(java.util.Objects.equals(source.getLeaseStorageDomainId(), destination.getLeaseStorageDomainId())); }<END_MOD>
<START_MOD>private void setAuthenticatedUser(org.ovirt.engine.api.model.Api api) { org.ovirt.engine.core.common.queries.QueryReturnValue returnValue = runQuery(QueryType.GetUserBySessionId, new org.ovirt.engine.core.common.queries.QueryParametersBase()); org.ovirt.engine.core.common.businessentities.aaa.DbUser authenticatedUser = ((org.ovirt.engine.core.common.businessentities.aaa.DbUser) (returnValue.getReturnValue())); org.ovirt.engine.api.model.User user = new org.ovirt.engine.api.model.User(); user.setId(authenticatedUser.getId().toString()); org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(user); api.setAuthenticatedUser(user); }<END_MOD>
@java.lang.Override protected boolean validate() { if ((((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getId()) == null)) { return failValidation(EngineMessage.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVds(); if (host <START_MOD>== null) { return failValidation(EngineMessage.VDS_INVALID_SERVER_ID); } if<END_MOD> (host.isPmEnabled()) { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents = fenceAgentDao.getFenceAgentsForHost(org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVdsId()); if ((fenceAgents.size()) == 1) { return failValidation(EngineMessage.VDS_REMOVE_LAST_FENCE_AGENT_PM_ENABLED); } } return super.validate(); }
<START_MOD>@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(dataCenter().id()); }<END_MOD>
void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(dynamicMessages.ovirtVersionAbout()); <START_MOD>userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.userNameAboutLabel()); <END_MOD>}
void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(<START_MOD>org<END_MOD>.<START_MOD>ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.versionAboutLabel<END_MOD>()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.userNameAboutLabel()); }
<START_MOD>public boolean isHotUnplugMemory() { return hotUnplugMemory; }<END_MOD>
<START_MOD>public void setHotUnplugMemory(boolean hotUnplugMemory) { this.hotUnplugMemory = hotUnplugMemory; }<END_MOD>
void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.versionAboutLabel()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.userNameAboutLabel()); <START_MOD>vendorUrl.setText(dynamicMessages.vendorUrl()); vendorUrl.setHref(dynamicMessages.vendorUrl()); <END_MOD>}
<START_MOD>@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(path()); or(mandatory(host().id()), mandatory(host().name())); }<END_MOD>
<START_MOD>@org.ovirt.api.metamodel.annotations.In java.lang.String path();<END_MOD>
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(network().comment()); optional(network().description()); optional(network().display()); optional(network().ip().address()); optional(network().ip().gateway()); optional(network().ip().netmask()); optional(network().mtu()); optional(network().name()); optional(network().stp()); optional(network().vlan().id()); <START_MOD>optional(network().externalProvider().id()); <END_MOD>}
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(network().id()), mandatory(network().name())); optional(network().comment()); optional(network().description()); optional(network().ip().address()); optional(network().ip().gateway()); optional(network().ip().netmask()); optional(network().mtu()); optional(network().profileRequired()); optional(network().stp()); optional(network().vlan().id()); optional(network().usages()[COLLECTION]); optional(network().externalProvider().id()); <START_MOD>optional(network().physicalNetworkProvider().id()); <END_MOD>}
<START_MOD>@org.ovirt.api.metamodel.annotations.Link types.Network physicalNetworkProvider();<END_MOD>
<START_MOD>public void setClientIp(java.lang.String clientIp) { this.clientIp = clientIp; }<END_MOD>
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { org.ovirt.engine.core.aaa.servlet.SsoLoginServlet.log.debug( SsoLoginServlet java.lang.String scope = java.lang.String.format( ovirt-app-portal ovirt-ext=auth:sequence-priority=%s org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty(authSequencePriorityPropertyName)); java.lang.String redirectUri = java.lang.String.format("%s://%s:%s%s", request.getScheme(), org.ovirt.engine.core.aaa.filters.FiltersHelper.getRedirectUriServerName(request.getServerName()), request.getServerPort(), postActionUrl); org.ovirt.engine.core.uutils.net.URLBuilder urlBuilder = new org.ovirt.engine.core.uutils.net.URLBuilder(org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineSsoUrl(request), "/oauth/authorize").addParameter("client_id", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_CLIENT_ID")).addParameter("response_type", "code").addParameter("app_url", request.getParameter("app_url")).addParameter("engine_url", org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineUrl(request)).addParameter("redirect_uri", redirectUri).addParameter("scope", scope)<START_MOD>.addParameter("client_ip", request.getRemoteAddr())<END_MOD>; if (org.apache.commons.lang.StringUtils.isNotEmpty(request.getParameter("sso_token"))) { urlBuilder.addParameter("sso_token", request.getParameter("sso_token")); } java.lang.String url = urlBuilder.build(); org.ovirt.engine.core.aaa.servlet.SsoLoginServlet.log.debug( to '{}' url); response.sendRedirect(url); }
private static java.lang.String <START_MOD>mapPluginType(java.lang.String entity, org.ovirt.engine.api.model.OpenStackNetworkProviderType type) { if ((type == <END_MOD>(org.ovirt.engine.api.model.<START_MOD>OpenStackNetworkProviderType.EXTERNAL)<END_MOD>) <START_MOD>||<END_MOD> (OpenstackNetworkPluginType.OPEN_VSWITCH.name()<START_MOD>.equalsIgnoreCase(entity))) { return entity<END_MOD>; <START_MOD>}<END_MOD> throw new java.lang.IllegalArgumentException((( network plugin type   + <START_MOD>entity<END_MOD>) + "\"")); }
@java.lang.Override protected org.ovirt.engine.api.model.OpenStackNetworkProvider postPopulate(org.ovirt.engine.api.model.OpenStackNetworkProvider model) { model.setType(OpenStackNetworkProviderType.NEUTRON); model.setPluginType(<START_MOD>OpenstackNetworkPluginType<END_MOD>.<START_MOD>OPEN_VSWITCH<END_MOD>.<START_MOD>toString<END_MOD>()); org.ovirt.engine.api.model.AgentConfiguration agentConfiguration = model.getAgentConfiguration(); agentConfiguration.setBrokerType(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.MessageBrokerType.class)); return model; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.ArchitectureType.class, to = org.ovirt.engine.api.model.Architecture.class) public static org.ovirt.engine.api.model.Architecture map(org.ovirt.engine.core.common.businessentities.ArchitectureType model, java.lang.String template) { if (model != null) { switch (model) { case undefined : return org.ovirt.engine.api.model.Architecture.UNDEFINED; case x86_64 : return org.ovirt.engine.api.model.Architecture.X86_64; case ppc64 : return org.ovirt.engine.api.model.Architecture.PPC64; <START_MOD>case s390 : return org.ovirt.engine.api.model.Architecture.S390; <END_MOD>default : return null; } } return null; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Architecture.class, to = org.ovirt.engine.core.common.businessentities.ArchitectureType.class) public static org.ovirt.engine.core.common.businessentities.ArchitectureType map(org.ovirt.engine.api.model.Architecture model, org.ovirt.engine.core.common.businessentities.ArchitectureType template) { if (model != null) { switch (model) { case UNDEFINED : return org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined; case X86_64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.x86_64; case PPC64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64; <START_MOD>case S390 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.s390; <END_MOD>default : return null; } } return null; }
@java.lang.Override protected void onHide() { getTable().hideContextMenu(); <START_MOD>breadCrumbsPresenterWidget.rebuildBreadCrumbs(); <END_MOD>}
<START_MOD>protected void popuplateSwappedList() { java.lang.String swappedColumnKey = getSwappedColumnListKey(); if (swappedColumnKey != null) { java.lang.String swappedColumns = clientStorage.getLocalItem(swappedColumnKey); if (swappedColumns != null) { java.lang.String[] split = swappedColumns.split(","); for (int i = 0; i < (split.length); i++) { java.lang.String[] tupel = split[i].split("="); if ((tupel.length) == 2) { realToSwappedIndexes.put(java.lang.Integer.valueOf(tupel[1]), java.lang.Integer.valueOf(tupel[0])); maxSwappedIndex = java.lang.Math.max(maxSwappedIndex, java.lang.Integer.valueOf(tupel[0])); } } } } }<END_MOD>
<START_MOD>java.lang.String parseVolumeIdFromPath(java.lang.String path) { if (org.apache.commons.lang.StringUtils.isEmpty(path)) { return ""; } int slashIndex = path.lastIndexOf("/"); if (slashIndex == (-1)) { return ""; } return path.substring((slashIndex + 1)); }<END_MOD>
<START_MOD>private boolean isDomainXmlEnabledForVds() { return ((boolean) (org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DomainXML, vmDao.get(org.ovirt.engine.core.bll.MergeStatusCommand.getParameters().getVmId()).getCompatibilityVersion().toString()))); }<END_MOD>
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.ImageTransfer.class, to = org.ovirt.engine.api.model.ImageTransfer.class) public static org.ovirt.engine.api.model.ImageTransfer map(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, org.ovirt.engine.api.model.ImageTransfer template) { org.ovirt.engine.api.model.ImageTransfer model = (template != null) ? template : new org.ovirt.engine.api.model.ImageTransfer(); if ((entity.getId()) != null) { model.setId(entity.getId().toString()); } if ((entity.getVdsId()) != null) { model.setHost(new org.ovirt.engine.api.model.Host()); model.getHost().setId(entity.getVdsId().toString()); } if ((entity.getDiskId()) != null) { model.setImage(new org.ovirt.engine.api.model.Image()); model.getImage().setId(entity.getDiskId().toString()); } if (((entity.getProxyUri()) != null) && ((entity.getImagedTicketId()) != null)) { model.setProxyUrl(entity.getClientURLForTransfer()); } if ((entity.getSignedTicket()) != null) { model.setSignedTicket(entity.getSignedTicket()); } if ((entity.getPhase()) != null) { model.setPhase(org.ovirt.engine.api.restapi.types.ImageTransferMapper.mapPhase(entity.getPhase())); } if ((entity.getActive()) != null) { model.setActive(entity.getActive()); } <START_MOD>if ((entity.getType()) != null) { model.setDirection(org.ovirt.engine.api.restapi.types.ImageTransferMapper.mapType(entity.getType())); } <END_MOD>return model; }
<START_MOD>private static org.ovirt.engine.api.model.ImageTransferDirection mapType(org.ovirt.engine.core.common.businessentities.storage.TransferType type) { switch (type) { case Download : return org.ovirt.engine.api.model.ImageTransferDirection.DOWNLOAD; case Upload : return org.ovirt.engine.api.model.ImageTransferDirection.UPLOAD; default : return null; } }<END_MOD>
<START_MOD>private void storeSwappedIndexMap() { java.lang.String value = ""; int i = 0; for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> entry : realToSwappedIndexes.entrySet()) { if (i > 0) { value += ","; } i++; value += ((entry.getValue()) + "=") + (entry.getKey()); } if (!("".equals(value))) { java.lang.String swappedColumnKey = getSwappedColumnListKey(); if (swappedColumnKey != null) { clientStorage.setLocalItem(swappedColumnKey, value); } } }<END_MOD>
protected void cluster_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster().getSelectedItem(); if (cluster == null) { return; } getFencingEnabled().setEntity(cluster.getFencingPolicy().isFencingEnabled()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getPmTypeList(new org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncQuery(( pmTypes) -> updatePmTypeList(pmTypes)), cluster.getCompatibilityVersion()); if (((getDataCenter()) != null) && ((getDataCenter().getItems()) != null)) { for (org.ovirt.engine.core.common.businessentities.StoragePool datacenter : getDataCenter().getItems()) { if (datacenter.getId().equals(cluster.getStoragePoolId())) { getDataCenter().setSelectedItem(datacenter, false); break; } } } final org.ovirt.engine.core.common.utils.CpuVendor newCpuVendor = getCurrentCpuVendor(); if ((newCpuVendor != null) && (!(newCpuVendor.equals(lastNonNullCpuVendor)))) { lastNonNullCpuVendor = newCpuVendor; cpuVendorChanged(); } getHostedEngineWarning().setIsAvailable(cluster.getCompatibilityVersion().less(Version.v4_0)); <START_MOD>getNetworkProviderModel().setDefaultProviderById(cluster.getDefaultNetworkProviderId()); }<END_MOD>
<START_MOD>public void setDefaultProviderById(org.ovirt.engine.core.compat.Guid defaultProviderId) { org.ovirt.engine.core.common.businessentities.Provider updatedDefaultProvider = getNetworkProviders().getItems().stream().filter(( provider) -> provider != null).filter(( provider) -> provider.getId().equals(defaultProviderId)).findFirst().orElse(null); if (((defaultProvider) == null) || (defaultProvider.equals(getNetworkProviders().getSelectedItem()))) { getNetworkProviders().setSelectedItem(updatedDefaultProvider); defaultProvider = updatedDefaultProvider; } }<END_MOD>
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { <START_MOD>optional<END_MOD>(cluster()); optional(registrationConfiguration()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { <START_MOD>optional<END_MOD>(cluster()); optional(clone()); optional(exclusive()); optional(template().name()); or(optional(storageDomain().id()), optional(storageDomain().name())); optional(vm().diskAttachments()[COLLECTION].id()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { <START_MOD>optional<END_MOD>(cluster()); optional(clone()); optional(exclusive()); optional(vm().name()); or(optional(storageDomain().id()), optional(storageDomain().name())); optional(vm().diskAttachments()[COLLECTION].disk().format()); optional(vm().diskAttachments()[COLLECTION].id()); optional(vm().diskAttachments()[COLLECTION].disk().sparse()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { <START_MOD>optional<END_MOD>(cluster()); optional(clone()); optional(exclusive()); optional(template().name()); optional(registrationConfiguration()); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadataDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(4), guids.get(5)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(4), guids.get(5)); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMetadataDisk(org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(guids.get(4)); memoryDisk.setImageId(guids.get(5)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); <START_MOD>memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(( d) -> d.isWipeAfterDelete())); <END_MOD>return memoryDisk; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(2), guids.get(3)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(2), guids.get(3)); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMemoryDisk(vm, sd.getStorageType(), vmOverheadCalculator, org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(guids.get(2)); memoryDisk.setImageId(guids.get(3)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); <START_MOD>memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(( d) -> d.isWipeAfterDelete())); <END_MOD>return memoryDisk; }
private org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getSnapshotType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.StatelessSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm()); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().isSaveMemory()) && (isLiveSnapshotApplicable())) { <START_MOD>boolean wipeAfterDelete = getDisksList().stream().anyMatch(( d) -> d.isWipeAfterDelete()); <END_MOD>return new org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getStoragePool(), this, vmOverheadCalculator, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDescription()<START_MOD>, wipeAfterDelete<END_MOD>); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }
private java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> getLuns(boolean selectedLuns, boolean includedLuns) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = new java.util.ArrayList<>(); if (<START_MOD>(getItems()) != null) { if (<END_MOD>getIsGrouppedByTarget()) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel> items = ((java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel>) (getItems())); for (org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel item : items) { <START_MOD>aggregateAddedLuns(item.getLuns(), selectedLuns, includedLuns, <END_MOD>luns<START_MOD>); } } else { java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> items = ((java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>) (getItems())); aggregateAddedLuns(items<END_MOD>, selectedLuns, includedLuns<START_MOD>,<END_MOD> luns<START_MOD>); }<END_MOD> } return luns; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadaaDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.utils.GuidUtils.getGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(4), guids.get(5)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(4), guids.get(5)); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createMetadataDisk(); memoryDisk.setId(guids.get(4)); memoryDisk.setImageId(guids.get(5)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); <START_MOD>memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(DiskImage::isWipeAfterDelete)); <END_MOD>return memoryDisk; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { <START_MOD>switch (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getActionState()) { case END_FAILURE : return org.ovirt.engine.core.common.AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED; default : <END_MOD>return org.ovirt.engine.core.common.AuditLogType.UNASSIGNED; }<START_MOD> }<END_MOD>
private void onMaintenance() {<START_MOD> final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow()));<END_MOD> java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain item : getSelectedItems()) { org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters parameters = new org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(); parameters.setStorageDomainId(getEntity().getId()); parameters.setForceMaintenance(<START_MOD>confirmModel.getForce().getEntity()<END_MOD>); if ((item.getStoragePoolId()) != null) { parameters.setStoragePoolId(item.getStoragePoolId()); } list.add(parameters); } final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); confirmationModel.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.DeactivateStorageDomainWithOvfUpdate, list, ( result) -> { confirmationModel.stopProgress(); setWindow(null); }, null); }
@java.lang.Override public javax.ws.rs.core.Response deactivate(org.ovirt.engine.api.model.Action action) { <START_MOD>boolean forceMaintenance = ((action.isForce()) == null) ? false : action.isForce(); <END_MOD>return doAction(ActionType.DeactivateStorageDomainWithOvfUpdate, new org.ovirt.engine.core.common.action.<START_MOD>DeactivateStorageDomainWithOvfUpdateParameters<END_MOD>(guid, dataCenterId<START_MOD>, forceMaintenance<END_MOD>), action); }
@java.lang.Override protected void endWithFailure() { if ((commandCoordinatorUtil.getCommandExecutionStatus(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCommandId())) != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { changeStorageDomainStatusInTransaction(loadStoragePoolIsoMap(), StorageDomainStatus.Unknown); auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_OVF_UPDATE_INCOMPLETE); } else { <START_MOD>org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap<END_MOD>(<START_MOD>); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Active, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()<END_MOD>); } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }
@java.lang.Override protected void endWithFailure() { if ((commandCoordinatorUtil.getCommandExecutionStatus(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCommandId())) != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { changeStorageDomainStatusInTransaction(loadStoragePoolIsoMap(), StorageDomainStatus.Unknown); auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_OVF_UPDATE_INCOMPLETE); <START_MOD>org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getReturnValue().setEndActionTryAgain(false); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(false); <END_MOD>} else <START_MOD>if (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getParameters().isForceMaintenance()) <END_MOD>{ <START_MOD>executeDeactivateCommand(); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); } else { <END_MOD>org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Active, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); <START_MOD>org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getReturnValue().setEndActionTryAgain(false); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(false); <END_MOD>} }
private void onMaintenance() { java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain item : getSelectedItems()) { org.ovirt.engine.core.common.action.<START_MOD>DeactivateStorageDomainWithOvfUpdateParameters<END_MOD> parameters = new org.ovirt.engine.core.common.action.<START_MOD>DeactivateStorageDomainWithOvfUpdateParameters<END_MOD>(); parameters.setStorageDomainId(getEntity().getId()<START_MOD>); parameters.setForceMaintenance(false<END_MOD>); if ((item.getStoragePoolId()) != null) { parameters.setStoragePoolId(item.getStoragePoolId()); } list.add(parameters); } final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); confirmationModel.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.DeactivateStorageDomainWithOvfUpdate, list, ( result) -> { confirmationModel.stopProgress(); setWindow(null); }, null); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { switch (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getActionState()) { case END_FAILURE : return org.ovirt.engine.core.<START_MOD>bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.UNASSIGNED : org.ovirt.engine.core.<END_MOD>common.AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED; default : return org.ovirt.engine.core.common.AuditLogType.UNASSIGNED; } }
private void handlePaused(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { periodicPauseLog(context.entity, context.iterationTimestamp); if ((context.entity.getImagedTicketId()) != null) { <START_MOD>extendTicketIfNecessary<END_MOD>(context); } }
private void <START_MOD>pollTransferStatus(final <END_MOD>org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { <START_MOD>if ((((context.entity.getVdsId()) == null) || ((context.entity.getImagedTicketId()) == null)) || (!(<END_MOD>org.ovirt.engine.core.common.<START_MOD>FeatureSupported.getImageTicketSupported(vdsDao.get(context.entity.getVdsId()).getClusterCompatibilityVersion()<END_MOD>)))) { return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer <START_MOD>upToDateImageTransfer<END_MOD> = <START_MOD>updateTransferStatusWithImageTicket(context.entity<END_MOD>); if ((<START_MOD>org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download<END_MOD>)) { <START_MOD>finalizeDownloadIfNecessary(context, upToDateImageTransfer<END_MOD>); } }
<START_MOD>private org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateTransferStatusWithImageTicket(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer oldImageTransfer) { org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation ticketInfo = ((org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation) (runVdsCommand(VDSCommandType.GetImageTicket, new org.ovirt.engine.core.common.vdscommands.GetImageTicketVDSCommandParameters(oldImageTransfer.getVdsId(), oldImageTransfer.getImagedTicketId())).getReturnValue())); if ((!(java.util.Objects.equals(oldImageTransfer.getActive(), ticketInfo.isActive()))) || (!(java.util.Objects.equals(oldImageTransfer.getBytesSent(), ticketInfo.getTransferred())))) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updatesFromTicket = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); updatesFromTicket.setBytesSent(ticketInfo.getTransferred()); updatesFromTicket.setActive(ticketInfo.isActive()); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId(), updatesFromTicket)); if ((returnValue == null) || (!(returnValue.getSucceeded()))) { log.debug("Failed to update transfer status."); return oldImageTransfer; } return returnValue.getActionReturnValue(); } return oldImageTransfer; }<END_MOD>
<START_MOD>java.lang.String ACTION_TYPE_FAILED_PROVIDER_USED_IN_CLUSTER_MULTIPLE_TIMES();<END_MOD>
<START_MOD>java.lang.String ACTION_TYPE_FAILED_PROVIDER_USED_IN_CLUSTER_ONCE();<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult providerIsNoDefaultProvider() { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllClustersByDefaultNetworkProviderId(provider.getId()); return clusters.isEmpty() ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(getProviderUsedInClusterValidationMessage(clusters.size()), org.ovirt.engine.core.utils.ReplacementUtils.replaceWithNameable("CLUSTER_NAMES", clusters)); }<END_MOD>
<START_MOD>private org.ovirt.engine.api.model.IscsiDetails mapLogicalUnitToIscsiDetails(org.ovirt.engine.api.model.LogicalUnit logicalUnit) { org.ovirt.engine.api.model.IscsiDetails iscsiDetails = new org.ovirt.engine.api.model.IscsiDetails(); iscsiDetails.setAddress(logicalUnit.getAddress()); iscsiDetails.setPort(logicalUnit.getPort()); iscsiDetails.setTarget(logicalUnit.getTarget()); return iscsiDetails; }<END_MOD>
private javax.ws.rs.core.Response performCreate(org.ovirt.engine.api.model.ImageTransfer imageTransfer, org.ovirt.engine.core.common.action.TransferDiskImageParameters params) { updateTransferType(imageTransfer, params);<START_MOD> if (imageTransfer.isSetHost()) { params.setVdsId(org.ovirt.engine.core.compat.Guid.createGuidFromString(imageTransfer.getHost().getId())); }<END_MOD> return performCreate(ActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
<START_MOD>private org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskForVolumeInfo(org.ovirt.engine.core.common.businessentities.storage.DiskImage disk) { return diskImageDao.getAncestor(disk.getImageId()); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = getDisks(); }<END_MOD>
<START_MOD>@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.column.Context context, org.ovirt.engine.ui.uicommonweb.models.storage.LunModel value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { int additionalAvailableSizeSize = value.getAdditionalAvailableSize(); java.lang.String additionalAvailableSizeSizeString = org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.messages.additionalAvailableSizeInGB(additionalAvailableSizeSize); boolean isGrayedOut = value.getIsGrayedOut(); java.lang.String inputId = id + "_input"; com.google.gwt.safehtml.shared.SafeHtml input = null; if ((!isGrayedOut) && (!(value.getIsSelected()))) { input = templates.toggledUp(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.constants.addSanStorage()); } else if (!isGrayedOut) { input = templates.toggledDown(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.constants.addSanStorage()); } else if (!(value.getIsIncluded())) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.uiConstants.notAvailableLabel(), "color:gray", inputId); } else if (additionalAvailableSizeSize == 0) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.constants.cannotExtendSanStorage(), "color:gray", inputId); } else if (value.isAdditionalAvailableSizeSelected()) { input = templates.toggledDown(inputId, additionalAvailableSizeSizeString); } else { input = templates.toggledUp(inputId, additionalAvailableSizeSizeString); } sb.append(templates.span(id, input)); }<END_MOD>
<START_MOD>java.lang.String addOrExtendSanStorage();<END_MOD>
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements = diskVmElementDao.getAllDiskVmElementsByDiskId(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters().getImageGroupID()); org.ovirt.engine.core.common.action.ActionType actionType = getMoveActionType(diskVmElements); if (actionType == (org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk)) { org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters = org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters(); moveDiskParameters.setCommandId(null); <START_MOD>actionReturnValue = <END_MOD>runInternalAction(actionType, moveDiskParameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getContext(), org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getLock())); } else { org.ovirt.engine.core.compat.Guid vmId = diskVmElements.get(0).getVmId(); engineLock = lockVmWithWait(vmId); <START_MOD>actionReturnValue = <END_MOD>runInternalAction(actionType, createLiveMigrateDiskParameters(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters(), vmId), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getContext(), engineLock)); } handleChildReturnValue(); org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.setSucceeded(true); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Cluster cluster) { validateParameters(cluster, getMandatoryParameters()); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = getDataCenter(cluster); <START_MOD>org.ovirt.engine.api.restapi.resource.ExternalProviderIdCompleter externalProviderIdCompleter = new org.ovirt.engine.api.restapi.resource.ExternalProviderIdCompleter(this); externalProviderIdCompleter.complete(cluster.getExternalNetworkProviders()); <END_MOD>return performCreate(ActionType.AddCluster, createAddCommandParams(cluster, dataCenter), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetClusterById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Host host) { validateParameters(host, "name", "address"); org.ovirt.engine.core.common.businessentities.VdsStatic staticHost = getMapper(org.ovirt.engine.api.model.Host.class, org.ovirt.engine.core.common.businessentities.VdsStatic.class).map(host, null); staticHost.setClusterId(getClusterId(host)); org.ovirt.engine.<START_MOD>api.restapi.resource.ExternalNetworkProviderConfigurationIdCompleter externalNetworkProviderConfigurationIdCompleter = new org.ovirt.engine.api.restapi.resource.ExternalNetworkProviderConfigurationIdCompleter(this); externalNetworkProviderConfigurationIdCompleter.complete(host.getExternalNetworkProviderConfigurations()); org.ovirt.engine.<END_MOD>core.common.action.hostdeploy.AddVdsActionParameters addParams = new org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters(staticHost, host.getRootPassword()); if (host.isSetOverrideIptables()) { addParams.setOverrideFirewall(host.isOverrideIptables()); } addParams.setHostedEngineDeployConfiguration(org.ovirt.engine.api.restapi.resource.HostResourceParametersUtil.getHostedEngineDeployConfiguration(this)); addParams = ((org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters) (getMapper(org.ovirt.engine.api.model.Host.class, org.ovirt.engine.core.common.action.VdsOperationActionParameters.class).map(host, addParams))); return performCreate(ActionType.AddVds, addParams, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetVdsByVdsId, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override public org.ovirt.engine.api.model.Host update(org.ovirt.engine.api.model.Host incoming) { org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid> hostResolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.QueryType.GetVdsByVdsId, org.ovirt.engine.core.common.queries.IdQueryParameters.class); org.ovirt.engine.core.common.businessentities.VDS entity = getEntity(hostResolver, true); <START_MOD>org.ovirt.engine.api.restapi.resource.ExternalNetworkProviderConfigurationIdCompleter externalNetworkProviderConfigurationIdCompleter = new org.ovirt.engine.api.restapi.resource.ExternalNetworkProviderConfigurationIdCompleter(this); externalNetworkProviderConfigurationIdCompleter.complete(incoming.getExternalNetworkProviderConfigurations()); <END_MOD>if ((incoming.getAgents()) == null) { entity.setFenceAgents(null); } if ((incoming.isSetCluster()) && ((incoming.getCluster().isSetId()) || (incoming.getCluster().isSetName()))) { org.ovirt.engine.core.compat.Guid clusterId = lookupClusterId(incoming); if (!(clusterId.equals(entity.getClusterId()))) { performAction(ActionType.ChangeVDSCluster, new org.ovirt.engine.core.common.action.ChangeVDSClusterParameters(clusterId, guid)); entity = getEntity(hostResolver, true); } } org.ovirt.engine.api.model.Host host = performUpdate(incoming, entity, map(entity), hostResolver, ActionType.UpdateVds, new org.ovirt.engine.api.restapi.resource.BackendHostResource.UpdateParametersProvider()); return host; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.Cluster update(org.ovirt.engine.api.model.Cluster incoming) {<START_MOD> org.ovirt.engine.api.restapi.resource.ExternalProviderIdCompleter externalProviderIdCompleter = new org.ovirt.engine.api.restapi.resource.ExternalProviderIdCompleter(this); externalProviderIdCompleter.complete(incoming.getExternalNetworkProviders());<END_MOD> return performUpdate(incoming, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.QueryType.GetClusterById, org.ovirt.engine.core.common.queries.IdQueryParameters.class), ActionType.UpdateCluster, new UpdateParametersProvider()); }
<START_MOD>@java.lang.Override public javax.ws.rs.core.Response exportToPathOnHost(org.ovirt.engine.api.model.Action action) { validateParameters(action, "host.id|name", "path"); org.ovirt.engine.core.common.action.ExportOvaParameters params = new org.ovirt.engine.core.common.action.ExportOvaParameters(); params.setEntityType(VmEntityType.VM); params.setEntityId(guid); params.setProxyHostId(getHostId(action)); params.setPath(action.getPath()); return doAction(ActionType.ExportOva, params, action); }<END_MOD>
<START_MOD>protected void exportOva() { }<END_MOD>
<START_MOD>@java.lang.Override protected void exportOva() { super.exportOva(); org.ovirt.engine.core.common.businessentities.VM selectedEntity = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem(); if (selectedEntity == null) { return; } if ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getWindow()) != null) { return; } org.ovirt.engine.core.common.action.ExportOvaParameters parameters = new org.ovirt.engine.core.common.action.ExportOvaParameters(); parameters.setEntityType(VmEntityType.VM); parameters.setEntityId(selectedEntity.getId()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.ExportOva, parameters); }<END_MOD>
<START_MOD>public boolean isUsingDistinct(java.lang.String obj) { if ((org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter.getEntitySearchInfo(obj)) != null) { return org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter.getEntitySearchInfo(obj).distinct; } return false; }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.common.Source("images/prepare_to_maintenance.png") com.google.gwt.resources.client.ImageResource prepareToMaintenance();<END_MOD>
public boolean isFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(isFieldUpdatable(name))) { if (((fieldContainer != null) && ((container) != null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values != null) ? values.contains(name) : false; if ((<START_MOD>(<END_MOD>!returnValue) && hotsetEnabled) <START_MOD>&& (status == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))) <END_MOD>{ returnValue = isHotSetField(name); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn( '{}' can not be updated when status is '{}' name, status); } } return returnValue; }
public <START_MOD>boolean<END_MOD> createOvfStoreDisks(int missingDiskCount) {<START_MOD> boolean AllOvfStoreDisksCreated = true;<END_MOD> for (int i = 0; i < missingDiskCount; i++) { org.ovirt.engine.core.common.action.CreateOvfVolumeForStorageDomainCommandParameters parameters = createCreateOvfVolumeForStorageDomainParams(); <START_MOD>org.ovirt.engine.core.common.action.ActionReturnValue returnValue = <END_MOD>runInternalAction(ActionType.CreateOvfVolumeForStorageDomain, parameters, org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getContext().clone().withoutLock()); <START_MOD>if (!(returnValue.getSucceeded())) { AllOvfStoreDisksCreated = false; <END_MOD>} }<START_MOD> return AllOvfStoreDisksCreated; }<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.<START_MOD>compat.Guid clusterId = null; if (action.isSetCluster()) { clusterId = getClusterId(action); } org.ovirt.engine.core.<END_MOD>common.action.ImportVmTemplateParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateParameters(parent.getDataCenterId(destStorageDomainId), parent.getStorageDomainId(), destStorageDomainId, <START_MOD>clusterId<END_MOD>, getEntity()); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetTemplate()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } return doAction(ActionType.ImportVmTemplate, params, action); }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.<START_MOD>compat.Guid clusterId = null; if (action.isSetCluster()) { clusterId = getClusterId(action); } org.ovirt.engine.core.<END_MOD>common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), <START_MOD>clusterId<END_MOD>); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(ActionType.ImportVm, params, action); }
<START_MOD>public void updateVDSInterfaceList(java.util.Collection<org.ovirt.engine.core.common.utils.PairQueryable<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, org.ovirt.engine.core.common.businessentities.VDS>> pairCollection, java.lang.Runnable callback) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = pairCollection.stream().map(( pair) -> pair.getSecond()).collect(java.util.stream.Collectors.toList()); updateVDSInterfaceList(vdsList, callback); }<END_MOD>
<START_MOD>public void updateVDSInterfaceList(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList, java.lang.Runnable callback) { java.util.List<org.ovirt.engine.core.common.queries.QueryType> types = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.queries.QueryParametersBase> ids = new java.util.ArrayList<>(); if (!(vdsList.isEmpty())) { vdsList.stream().forEach(( vds) -> { types.add(QueryType.GetVdsInterfacesByVdsId); ids.add(new org.ovirt.engine.core.common.queries.IdQueryParameters(vds.getId())); }); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleQueries(types, ids, ( result) -> { List<org.ovirt.engine.core.common.queries.QueryReturnValue> values = result.getReturnValues(); for (int i = 0; i < (vdsList.size()); i++) { org.ovirt.engine.core.common.queries.QueryReturnValue interfaceQueryValue = values.get(i); if ((interfaceQueryValue.getReturnValue()) != null) { vdsList.get(i).getInterfaces().addAll(interfaceQueryValue.getReturnValue()); callback.run(); } } }); } else { callback.run(); } }<END_MOD>
private java.util.Optional<org.ovirt.engine.core.common.businessentities.storage.DiskImage> traceConfigurationDisk(org.ovirt.engine.core.compat.Guid spId, org.ovirt.engine.core.compat.Guid sdId, java.util.List<org.ovirt.engine.core.compat.Guid> diskIds) { if (diskIds == null) { return java.util.Optional.empty(); } return diskIds.stream().map(( diskId) -> new org.ovirt.engine.core.bll.hostedengine.Pair<>(diskId, ((List<org.ovirt.engine.core.compat.Guid>) (resourceManager.runVdsCommand(VDSCommandType.GetVolumesList, new org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters(spId, sdId, diskId)).getReturnValue())))).flatMap(( diskToVolumes) -> diskToVolumes.getSecond().stream().map(( volumeId) -> getImageInfo(spId, sdId, diskToVolumes.getFirst(), volumeId))).filter(java.util.Objects::nonNull).map(( diskImageCall) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskImageCall.getReturnValue()))).filter(java.util.Objects::nonNull).filter(<START_MOD>this::isHostedEngineConfigVolume<END_MOD>).findAny(); }
<START_MOD>private boolean isHostedEngineConfigVolume(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { final java.lang.String strConfigImageId = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.HostedEngineConfigurationVolumeGuid); final org.ovirt.engine.core.compat.Guid configImageId = (strConfigImageId.isEmpty()) ? null : org.ovirt.engine.core.compat.Guid.createGuidFromString(strConfigImageId); if (configImageId != null) { return diskImage.getImageId().equals(configImageId); } return org.ovirt.engine.core.bll.hostedengine.HostedEngineConfigFetcher.HOSTED_ENGINE_CONFIGURATION_IMAGE.equals(diskImage.getDescription()); }<END_MOD>
private void addImportedDevices(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vm.getStaticData(); vmStatic.setImages(new java.util.ArrayList()); vmStatic.setInterfaces(new java.util.ArrayList()); importUtils.updateGraphicsDevices(vmStatic, ConvertVmCommand.getStoragePool().getCompatibilityVersion()); ConvertVmCommand.getVmDeviceUtils().addImportedDevices(vmStatic, false, false<START_MOD>, null<END_MOD>); saveDiskVmElements(vm); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { initImportClonedTemplateDisks(); addVmTemplateToDb(); mapDbUsers(); updateOriginalTemplateNameOnDerivedVms(); addVmInterfaces(); getCompensationContext().stateChanged(); org.ovirt.engine.core.bll.exportimport.vmHandler.addVmInitToDB(getVmTemplate().getVmInit()); return null; }); boolean doesVmTemplateContainImages = !(getImages().isEmpty()); if (doesVmTemplateContainImages && (!(org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImagesExistOnTargetStorageDomain()))) { moveOrCopyAllImageGroups(getVmTemplateId(), getImages()); } org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getVmDeviceUtils().addImportedDevices(getVmTemplate(), org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImportAsNewEntity(), false<START_MOD>, getImages().stream().map(DiskImage::getId).collect(java.util.stream.Collectors.toList())<END_MOD>); if ((!doesVmTemplateContainImages) || (org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImagesExistOnTargetStorageDomain())) { endMoveOrCopyCommand(); } discardHelper.logIfDisksWithIllegalPassDiscardExist(getVmTemplateId()); checkTrustedService(); org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.setSucceeded(true); }
public void attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot, org.ovirt.engine.core.compat.Guid activeSnapshotId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, org.ovirt.engine.core.bll.context.CompensationContext compensationContext, org.ovirt.engine.core.common.businessentities.aaa.DbUser user, org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager, boolean withMemory) { boolean vmUpdatedFromConfiguration = false; if ((snapshot.getVmConfiguration()) != null) { vmUpdatedFromConfiguration = updateVmFromConfiguration(vm, snapshot.getVmConfiguration()); if (images != null) { vmUpdatedFromConfiguration &= updateImagesByConfiguration(vm, images); } } if (!vmUpdatedFromConfiguration) { if (images == null) { images = diskImageDao.getAllSnapshotsForVmSnapshot(snapshot.getId()); } vm.setImages(new java.util.ArrayList(images)); } vm.setAppList(snapshot.getAppList()); vmDynamicDao.update(vm.getDynamicData()); synchronizeDisksFromSnapshot(vm.getId(), snapshot.getId(), activeSnapshotId, vm.getImages(), vm.getName()); if (vmUpdatedFromConfiguration) { vmStaticDao.update(vm.getStaticData()); boolean macsInSnapshotAreExpectedToBeAlreadyAllocated = SnapshotType.STATELESS.equals(snapshot.getType()); synchronizeNics(vm, compensationContext, user, vmInterfaceManager, macsInSnapshotAreExpectedToBeAlreadyAllocated); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDeviceDao.getVmDeviceByVmId(vm.getId())) { if (deviceCanBeRemoved(vmDevice)) { vmDeviceDao.remove(vmDevice.getId()); } } vmDeviceUtils.addImportedDevices(vm.getStaticData(), false, withMemory<START_MOD>, null); } }<END_MOD>
private void processImages(final boolean useCopyImages) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmImagesAndSnapshots(); addVmExternalLuns(); addMemoryImages(); updateSnapshotsFromExport(); if (useCopyImages) { moveOrCopyAllImageGroups(); } getVmDeviceUtils().addImportedDevices(getVm().getStaticData(), getParameters().isImportAsNewEntity(), false<START_MOD>, null<END_MOD>); if (getParameters().isImportAsNewEntity()) { getParameters().setVm(getVm()); setVmId(getVm().getId()); } return null; }); }
public void addImportedDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, boolean isImportAsNewEntity, boolean withMemory<START_MOD>, java.util.List<org.ovirt.engine.core.compat.Guid> diskIdsToImport<END_MOD>) { if (isImportAsNewEntity) { setNewIdInImportedCollections(vmBase); } java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToAdd = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate = new java.util.ArrayList<>(); addImportedDiskDevices(vmBase, vmDevicesToUpdate<START_MOD>, diskIdsToImport<END_MOD>); addImportedInterfaces(vmBase, vmDevicesToUpdate); addImportedOtherDevices(vmBase, vmDevicesToAdd, withMemory); vmDeviceDao.saveAll(vmDevicesToAdd); vmDeviceDao.updateAll(vmDevicesToUpdate); }
private void addImportedDiskDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate<START_MOD>, java.util.List<org.ovirt.engine.core.compat.Guid> diskIdsToImport<END_MOD>) { final org.ovirt.engine.core.compat.Guid vmId = vmBase.getId(); for (org.ovirt.engine.core.common.businessentities.storage.BaseDisk disk : getDisks(vmBase.getImages())) { org.ovirt.engine.core.compat.Guid deviceId = disk.getId(); <START_MOD>if ((diskIdsToImport != null) && (!(diskIdsToImport.contains(deviceId)))) { continue; } <END_MOD>org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = addDiskDevice(vmId, deviceId, getVmDeviceAddress(vmBase, vmId)); updateImportedVmDevice(vmBase, vmDevice, deviceId, vmDevicesToUpdate); } }
@java.lang.Override public javax.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); <START_MOD>validateVnicMappings(action); <END_MOD>org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); org.ovirt.engine.api.restapi.types.ExternalRegistrationConfigurationMapper.mapFromModel(action.getRegistrationConfiguration(), params); params.setContainerId(guid); params.setStorageDomainId(parent.getStorageDomainId()); params.setClusterId(getClusterId(action)); params.setImagesExistOnTargetStorageDomain(true<START_MOD>); params.setExternalVnicProfileMappings(org.ovirt.engine.api.restapi.types.ExternalVnicProfileMappingMapper.mapFromModel(action.getVnicProfileMappings())<END_MOD>); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmTemplateFromConfiguration, params, action); }
private void init() { leftBound.setEntity(((macRange.getMacFrom()) == null ? "" : macRange.getMacFrom())); rightBound.setEntity(((macRange.getMacTo()) == null ? "" : macRange.getMacTo())); <START_MOD>recalculateMacsCount(); leftBound.getEntityChangedEvent().addListener(( ev, sender, args) -> onMacRangeChange()); rightBound.getEntityChangedEvent().addListener(( ev, sender, args) -> onMacRangeChange()); <END_MOD>}
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.macpool.MacRangeModel model) { driver.edit(model); }
<START_MOD>private static org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable createAuditLogableForHost(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); logable.setVdsId(vds.getId()); logable.setVdsName(vds.getName()); return logable; }<END_MOD>
<START_MOD>private static void createAuditLog(java.util.List<java.lang.String> guids, org.ovirt.engine.core.common.AuditLogType type, org.ovirt.engine.core.common.businessentities.VDS vds) { if (guids.isEmpty()) { return; } org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = org.ovirt.engine.core.vdsbroker.vdsbroker.MultipathHealthHandler.createAuditLogableForHost(vds); logable.addCustomValue("MpathGuids", guids.stream().sorted().collect(java.util.stream.Collectors.joining(", "))); org.ovirt.engine.core.vdsbroker.vdsbroker.MultipathHealthHandler.auditLogDirector.log(logable, type); }<END_MOD>
private void processHeartbeat() { <START_MOD>int incoming = (this.policy.getIncomingHeartbeat()) / 2; <END_MOD>if (((!(this.isInInit())) && (<START_MOD>(getHeartbeatTime()) > incoming)) && (this.half)) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info((((( was no massege from   + (getHostname())) +   for   + incoming) +   milliseconds this.half = false; } if (((!(this.isInInit())) && (<END_MOD>this.policy.isIncomingHeartbeat())) && (this.isIncomingHeartbeatExeeded())) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info((((( exceeded for   + (getHostname())) +   last <START_MOD>message<END_MOD> was   + (getHeartbeatTime())) +   milliseconds ago. this.disconnect( exceeded } }
private void processHeartbeat() { if (((!(this.isInInit())) && (this.policy.isIncomingHeartbeat())) && (this.isIncomingHeartbeatExeeded())) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.<START_MOD>info((((<END_MOD>( exceeded<START_MOD> for   + (getHostname())) +   last response was   + (getHeartbeatTime())) +   milliseconds ago<END_MOD>. this.disconnect( exceeded } }
@java.lang.Override protected void executeCommand() { java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = org.ovirt.engine.core.bll.CreateOvaCommand.getParameters().getDisks(); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> diskIdToPath = prepareImages(disks); fillDiskApparentSize(disks); org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.CreateOvaCommand.getParameters().getVm(); vmHandler.updateNetworkInterfacesFromDb(vm); <START_MOD>vmHandler.updateVmInitFromDB(vm.getStaticData(), true); vmDeviceUtils.setVmDevices(vm.getStaticData()); <END_MOD>org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(vm); fullEntityOvfData.setDiskImages(new java.util.ArrayList(disks)); fullEntityOvfData.setInterfaces(vm.getInterfaces()); java.lang.String ovf = ovfManager.exportOva(vm, fullEntityOvfData, vm.getCompatibilityVersion()); log.debug( OVF: {} ovf); boolean succeeded = runAnsiblePackOvaPlaybook(vm.getName(), ovf, disks, diskIdToPath); org.ovirt.engine.core.bll.CreateOvaCommand.setSucceeded(succeeded); }
@java.lang.Override protected void writeOS() { _writer.writeStartElement("OperatingSystemSection"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI, "id", <START_MOD>java<END_MOD>.<START_MOD>lang.Integer<END_MOD>.toString(<START_MOD>mapOsId(vmBase.getOsId())<END_MOD>)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI, "required", "false"); _writer.writeElement("Info",   Operating System _writer.writeElement("Description", osRepository.getUniqueOsNames().get(vmBase.getOsId())); _writer.writeEndElement(); }
<START_MOD>private java.lang.String runAnsibleQueryOvaInfoPlaybook() { org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command = new org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder().hostnames(vdsStaticDao.get(org.ovirt.engine.core.bll.GetVmFromOvaQuery.getParameters().getVdsId()).getHostName()).variables(new org.ovirt.engine.core.common.utils.Pair("ovirt_query_ova_path", org.ovirt.engine.core.bll.GetVmFromOvaQuery.getParameters().getPath())).enableLogging(false).playbook(AnsibleConstants.QUERY_OVA_PLAYBOOK); boolean succeeded = false; org.ovirt.engine.core.common.utils.ansible.AnsibleReturnValue ansibleReturnValue = null; try { ansibleReturnValue = ansibleExecutor.runCommand(command); succeeded = (ansibleReturnValue.getAnsibleReturnCode()) == (org.ovirt.engine.core.common.utils.ansible.AnsibleReturnCode.OK); } catch (java.io.IOException | java.lang.InterruptedException e) { log.debug("Failed to query OVA info", e); return null; } if (!succeeded) { log.error("Failed to query OVA info. Error: {}", command.logFile()); return null; } return ansibleReturnValue.getStdout(); }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.businessentities.VM readVmFromOva(java.lang.String ovf) { if (ovf == null) { return null; } try { return ovfHelper.readVmFromOva(ovf); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("failed to parse a given ovf configuration: \n" + ovf), e); org.ovirt.engine.core.bll.GetVmFromOvaQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); return null; } }<END_MOD>
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.<START_MOD>common.businessentities.VM vm = getOvaInfoUsingAnsible(); setReturnValue(vm); org.ovirt.engine.core.<END_MOD>bll.GetVmFromOvaQuery.<START_MOD>getQueryReturnValue<END_MOD>(<START_MOD>).setSucceeded<END_MOD>(<START_MOD>(vm != null<END_MOD>)); }
<START_MOD>private java.lang.String parseOvfFromStdout(java.lang.String stdout) { if (stdout == null) { return null; } java.util.regex.Matcher m = org.ovirt.engine.core.bll.GetVmFromOvaQuery.OVF_PATTERN.matcher(stdout); if ((m.matches()) && ((m.groupCount()) > 0)) { java.lang.String ovf = m.group(1); ovf = ovf.replaceAll("\\\\\"", "\""); log.info(ovf); return ovf; } log.error("Failed to parse OVF from:\n{}", stdout); return null; }<END_MOD>
private void setCookie(final javax.servlet.http.<START_MOD>HttpServletRequest<END_MOD> <START_MOD>request<END_MOD>, final javax.servlet.<START_MOD>http.HttpServletResponse<END_MOD> <START_MOD>response<END_MOD>, final java.util.Locale userLocale) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(org.ovirt.engine.core.utils.servlet.LocaleFilter.LOCALE, userLocale.toString()); cookie.setSecure(<START_MOD>"https".equals(request.getScheme())<END_MOD>); cookie.setPath(org.ovirt.engine.core.utils.servlet.LocaleFilter.ROOT_PATH); cookie.setMaxAge(java.lang.Integer.MAX_VALUE); cookie.setHttpOnly(true); response.addCookie(cookie); }
private java.lang.String authenticateUser(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, org.ovirt.engine.core.sso.utils.Credentials userCredentials) throws java.io.IOException, javax.servlet.ServletException, org.ovirt.engine.core.sso.utils.AuthenticationException { if ((userCredentials == null) || (!(org.ovirt.engine.core.sso.utils.SsoUtils.areCredentialsValid(request, userCredentials, true)))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_INVALID_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } try { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug( user using credentials javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie("profile", userCredentials.getProfile()); cookie.setSecure(<START_MOD>"https".equals(request.getScheme())<END_MOD>); response.addCookie(cookie); org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(ssoContext, request, userCredentials); return (request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_REDIRECT_TO_MODULE_URI); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { throw ex; } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.error( Server Error: {} ex.getMessage()); org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex.getMessage(), ex); } }
private void setLangPageShown(<START_MOD>javax.servlet.http.HttpServletRequest request, <END_MOD>javax.servlet.http.HttpServletResponse response, boolean value) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(org.ovirt.engine.core.utils.servlet.DocsServlet.LANG_PAGE_SHOWN, java.lang.Boolean.toString(value)); cookie.setSecure(<START_MOD>"https".equals(request.getScheme())<END_MOD>); cookie.setPath(getServletContext().getContextPath()); cookie.setHttpOnly(true); response.addCookie(cookie); }
<START_MOD>@org.junit.Test public void networkNameNotTakenByVdsmName() { when(network.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_NETWORK_NAME); when(network.getId()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID); org.ovirt.engine.core.common.businessentities.network.Network network2 = new org.ovirt.engine.core.common.businessentities.network.Network(); network2.setVdsmName("vdsm-name"); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); when(networkDao.getAllForDataCenter(any())).thenReturn(org.ovirt.engine.core.bll.validator.Arrays.asList(network, network2)); assertThat(validator.networkNameNotUsedAsVdsmName(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }<END_MOD>
<START_MOD>@org.junit.Test public void networkNameTakenByVdsmName() { when(network.getName()).thenReturn("vdsm-name"); when(network.getId()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID); org.ovirt.engine.core.common.businessentities.network.Network network2 = new org.ovirt.engine.core.common.businessentities.network.Network(); network2.setVdsmName("vdsm-name"); network2.setName("vdsm-name"); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); when(networkDao.getAllForDataCenter(any())).thenReturn(org.ovirt.engine.core.bll.validator.Arrays.asList(network, network2)); assertThat(validator.networkNameNotUsedAsVdsmName(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.NETWORK_NAME_USED_AS_VDSM_NETWORK_NAME)); }<END_MOD>
public org.ovirt.engine.core.common.utils.ansible.AnsibleReturnValue runCommand(org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>... envVars) throws java.io.IOException, java.lang.InterruptedException { return runCommand(command, org.ovirt.engine.core.common.utils.ansible.AnsibleExecutor.ANSIBLE_PLAYBOOK_TIMEOUT, envVars); }
@java.lang.Override public javax.ws.rs.core.Response iscsiLogin(org.ovirt.engine.api.model.Action action) { validateParameters(action, "iscsi.address", "iscsi.target"); org.ovirt.engine.core.common.businessentities.StorageServerConnections cnx = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); org.ovirt.engine.api.model.IscsiDetails iscsiDetails = action.getIscsi(); cnx.setConnection(iscsiDetails.getAddress()); cnx.setIqn(iscsiDetails.getTarget()); cnx.setStorageType(StorageType.ISCSI); if (iscsiDetails.isSetPort()) { cnx.setPort(iscsiDetails.getPort().toString()); } else { cnx.setPort(org.ovirt.engine.api.restapi.resource.BackendHostResource.DEFAULT_ISCSI_PORT); } if (iscsiDetails.<START_MOD>isSetPortal()) { cnx.setPortal(iscsiDetails.getPortal().toString()); } if (iscsiDetails.<END_MOD>isSetUsername()) { cnx.setUserName(iscsiDetails.getUsername()); } if (iscsiDetails.isSetPassword()) { cnx.setPassword(iscsiDetails.getPassword()); } org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase connectionParms = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase(cnx, guid, false); return doAction(ActionType.ConnectStorageToVds, connectionParms, action); }
private void handleFinalizingFailure(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { log.error( failed transfer. {} getTransferDescription()); stopImageTransferSession(context.entity); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageGroupID()))) { setImageStatus(((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Upload) ? org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL : org.ovirt.engine.core.common.businessentities.storage.ImageStatus.OK)); } <START_MOD>if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { tearDownImage(context.entity.getVdsId()); } <END_MOD>updateEntityPhase(ImageTransferPhase.FINISHED_FAILURE); setAuditLogTypeFromPhase(ImageTransferPhase.FINISHED_FAILURE); }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookAdd(java.lang.String url, java.lang.String bearerToken) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookAdd").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }<END_MOD>
<START_MOD>java.lang.String GlusterUpdateWebhookException();<END_MOD>
<START_MOD>@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebhookVDSCommand.getBroker().glusterWebhookAdd(org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebhookVDSCommand.getParameters().getWebhookUrl(), null); org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebhookVDSCommand.proceedProxyReturnValue(); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookDelete(java.lang.String url) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookDelete").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }<END_MOD>
<START_MOD>java.lang.String GlusterSyncWebhookException();<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookSync() { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookSync").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }<END_MOD>
<START_MOD>java.lang.String GlusterAddWebhookException();<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookUpdate(java.lang.String url, java.lang.String bearerToken) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookUpdate").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }<END_MOD>
<START_MOD>java.lang.String GlusterDeleteWebhookException();<END_MOD>
@java.lang.Override protected boolean validate() { if (<START_MOD>!(super.validate())) { return false; } if (<END_MOD>org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget()) { if (!(validateExternalVnicProfileMapping())) { return false; } org.ovirt.engine.core.bll.validator.ImportValidator importValidator = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImportValidator(); if (!(validate(importValidator.validateUnregisteredEntity(vmFromConfiguration, ovfEntityData)))) { return false; } if (!(validate(importValidator.validateStorageExistForUnregisteredEntity(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImages(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().isAllowPartialImport(), imageToDestinationDomainMap, failedDisksToImportForAuditLog)))) { return false; } if (!(validate(importValidator.validateStorageExistsForMemoryDisks(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVm().getSnapshots(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().isAllowPartialImport(), failedDisksToImportForAuditLog)))) { return false; } setImagesWithStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVm().getImages()); } return <START_MOD>true; }<END_MOD>
<START_MOD>types.VnicProfileMapping[] vnicProfileMappings();<END_MOD>
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.Network network) { return getCustomMapSqlParameterSource().addValue("addr", network.getAddr()).addValue("description", network.getDescription()).addValue("free_text_comment", network.getComment()).addValue("id", network.getId()).addValue("name", network.getName()).addValue("vdsm_name", network.getVdsmName()).addValue("subnet", network.getSubnet()).addValue("gateway", network.getGateway()).addValue("type", network.getType()).addValue("vlan_id", network.getVlanId()).addValue("stp", network.getStp()).addValue("storage_pool_id", network.getDataCenterId()).addValue("mtu", network.getMtu()).addValue("vm_network", network.isVmNetwork()).addValue("provider_network_provider_id", ((network.getProvidedBy()) == null ? null : network.getProvidedBy().getProviderId())).addValue("provider_network_external_id", ((network.getProvidedBy()) == null ? null : network.getProvidedBy().getExternalId())).addValue(<START_MOD>"provider_physical_network_id", network.getProviderPhysicalNetworkId()).addValue(<END_MOD>"qos_id", network.getQosId()).addValue("label", network.getLabel()).addValue("dns_resolver_configuration_id", getDnsResolverConfigurationId(network)); }
@java.lang.Override protected void executeCommand() { <START_MOD>if (org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().isSetProviderPhysicalNetworkId()) { loadPhysicalNetworkProviderParameters(org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork()); } <END_MOD>org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy proxy = providerProxyFactory.create(getProvider()); org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().getProvidedBy().setExternalId(proxy.add(org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork())); org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().setVlanId(null); org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().setLabel(null); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { super.executeCommand(); getReturnValue().setActionReturnValue(getNetwork().getId()); return null; }); }
<START_MOD>private void loadPhysicalNetworkProviderParameters(org.ovirt.engine.core.common.businessentities.network.Network network) { org.ovirt.engine.core.common.businessentities.network.Network physicalProviderNetwork = networkDao.get(network.getProviderPhysicalNetworkId()); network.setVlanId(physicalProviderNetwork.getVlanId()); network.setLabel(physicalProviderNetwork.getVdsmName()); }<END_MOD>
<START_MOD>private java.lang.String getAlertTooltipText(org.ovirt.engine.core.common.businessentities.VDS vds) { return "TODO meaningful alert tooltip"; }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VDS vds, com.google.gwt.dom.client.Element parent, com.google.gwt.dom.client.NativeEvent event) { com.google.gwt.dom.client.Element target = event.getEventTarget().cast(); if (ImageElement.TAG.equals(target.getTagName())) { switch (org.ovirt.engine.ui.common.utils.JqueryUtils.index(target)) { case 0 : return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(getStatusTooltipText(vds.getStatus())); case 1 : return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(getAlertTooltipText(vds)); } } return null; }<END_MOD>
@java.lang.SuppressWarnings("unchecked") public void initModelSortHandler(org.ovirt.engine.ui.uicommonweb.models.SortedListModel<T> sortedModel) { org.ovirt.engine.ui.common.widget.table.ColumnResizeCellTable.addColumnSortHandler(( event) -> <START_MOD>applySort(event<END_MOD>, sortedModel)); }
@org.junit.Test public void passDiscardNotSupported() { <START_MOD>testDiscardFieldParsing<END_MOD>(Version.v4_0, null); }
@org.junit.Test public void <START_MOD>discardFieldIsParsed<END_MOD>() { <START_MOD>testDiscardFieldParsing<END_MOD>(Version.v4_1, 1024L); }
@org.junit.Test public void <START_MOD>sparsifyNotSupportedWipeAfterDeleteIsOn<END_MOD>() { createStorageDomainForDisk(StorageType.ISCSI); disk.setWipeAfterDelete(true); assertThat(validator.isSparsifySupported(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_SPARSIFY_NOT_SUPPORTED_BY_UNDERLYING_STORAGE_WHEN_WAD_IS_ENABLED)); }
<START_MOD>public<END_MOD> void applySearchString(java.lang.String searchString) { if ((modelProvider.getModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?, ? extends org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>> listModel = modelProvider.getModel(); if ((org.ovirt.engine.core.compat.StringHelper.isNotNullOrEmpty(searchString)) && (searchString.startsWith(listModel.getDefaultSearchString()))) { listModel.setSearchString(searchString); listModel.getSearchCommand().execute(); org.ovirt.engine.ui.uicommonweb.models.MainModelSelectionChangeEvent.fire(((com.google.gwt.event.shared.HasHandlers) (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getEventBus())), listModel); } } }
<START_MOD>private boolean isBookmarkForCurrentPlace(org.ovirt.engine.core.common.businessentities.Bookmark bookmark, org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter<?, ?, ?, ?> currentPlacePresenter) { java.lang.String searchString = bookmark.getValue(); if (searchString != null) { java.lang.String[] split = searchString.split(":"); java.lang.String result = null; if ((split.length) > 0) { java.lang.String defaultSearchString = split[0]; result = SearchStringMapping.searchToPlaceMap.get(defaultSearchString); } if ((currentPlacePresenter != null) && (currentPlacePresenter.placeMatches(result))) { return true; } } return false; }<END_MOD>
<START_MOD>private java.lang.String getFragmentFromSearchString(java.lang.String searchString) { java.lang.String[] split = searchString.split(":"); java.lang.String result = null; if ((split.length) > 0) { java.lang.String defaultSearchString = split[0]; result = SearchStringMapping.searchToPlaceMap.get(defaultSearchString); if (((split.length) > 1) && (result != null)) { result += ";search="; java.lang.String searchQuery = split[1].trim(); com.gwtplatform.common.client.ClientUrlUtils urlUtils = new com.gwtplatform.common.client.ClientUrlUtils(); searchQuery = urlUtils.encodeQueryString(searchQuery); searchQuery = searchQuery.replaceAll("%3D", "\\\\2"); result += searchQuery; } } return result; }<END_MOD>
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.column.Context context, org.ovirt.engine.ui.uicommonweb.models.storage.LunModel value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { int availableSizeToAdd = value.getAdditionalAvailableSize(); java.lang.String availableSizeToAddString = org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractLunActionsColumn<END_MOD>.messages.additionalAvailableSizeInGB(availableSizeToAdd); boolean isGrayedOut = value.getIsGrayedOut(); java.lang.String inputId = id + "_input"; com.google.gwt.safehtml.shared.SafeHtml input; if ((!isGrayedOut) && (!(value.getIsSelected()))) { input = templates.toggledUp(inputId, org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractLunActionsColumn<END_MOD>.constants.addSanStorage()); } else if (!isGrayedOut) { input = templates.toggledDown(inputId, org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractLunActionsColumn<END_MOD>.constants.addSanStorage()); } else if (!(value.getIsIncluded())) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractLunActionsColumn<END_MOD>.uiConstants.notAvailableLabel(), "color:gray", inputId); } else if (availableSizeToAdd == 0) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractLunActionsColumn<END_MOD>.constants.cannotExtendSanStorage(), "color:gray", inputId); } else if (value.isAdditionalAvailableSizeSelected()) { input = templates.toggledDown(inputId, availableSizeToAddString); } else { input = templates.toggledUp(inputId, availableSizeToAddString); } sb.append(templates.span(id, input)); }
private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if (((<START_MOD>(<END_MOD>!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) || (!(validateDiscardAfterDeleteLegal(storageDomainValidator<START_MOD>)))) || (!(validateDiskOnBackupDomain(<END_MOD>)))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("discardAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); props.remove("backup"); if (!(props.isEmpty())) { log.warn( was an attempt to update the following fields although they are not allowed to be updated: {} org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
<START_MOD>private boolean validateDiskOnBackupDomain() { return validate(new org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator(org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getVm().getStoragePoolId(), java.util.stream.Stream.concat(org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getVm().getDiskMap().values().stream().filter(DisksFilter.ONLY_IMAGES).map(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class::cast).flatMap(( vmDisk) -> vmDisk.getStorageIds().stream()), java.util.stream.Stream.of(org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getVm().getLeaseStorageDomainId()).filter(java.util.Objects::nonNull)).collect(java.util.stream.Collectors.toSet())).allDomainsNotBackupDomains()); }<END_MOD>
<START_MOD>java.lang.String storageIscsiYouCanPerformActionsLabel();<END_MOD>
<START_MOD>java.lang.String storageIscsiYouCanRemoveLUNsLabel();<END_MOD>
@java.lang.Override public final com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { org.ovirt.engine.ui.common.widget.table.cell.ScrollableTextCell.CellTemplate template = com.google.gwt.core.client.GWT.create(ScrollableTextCell.CellTemplate.class); java.lang.String color = ""; if (object != null) { if (<START_MOD>(!(object.getIsIncluded())) && ((!(object.getIsSelected())) || (<END_MOD>object.getIsGrayedOut())<START_MOD>))<END_MOD> { color = "gray"; } else if (<START_MOD>object.getIsSelected()) { color = "midnightblue"; } else if ((<END_MOD>!(object.getIsAccessible())) <START_MOD>&& (!(object.getIsGrayedOut()))) <END_MOD>{ color = "orange"; } else { color = "black"; } } return template.input(getRawValue(object), ("color:" + color), com.google.gwt.user.client.DOM.createUniqueId()); }
private void addAbstractLunAddOrExtendColumn(org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>> table, java.lang.String headerString) { org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractLunActionsColumn<END_MOD> addOrExtendColumn = new org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractLunActionsColumn<END_MOD>() { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.storage.LunModel getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { return object; } }; addOrExtendColumn.makeSortable(); table.addColumn(addOrExtendColumn, headerString, "95px"); }
private void addAbstractLunAddOrExtendColumn(org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>> table, java.lang.String headerString) { table.addColumn(new org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractLunActionsColumn<END_MOD>() { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.storage.LunModel getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { return object; } }, headerString, "85px"); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel object) { driver.edit(object); initLists(object); object.getPropertyChangedEvent().addListener(( ev, sender, args) -> { java.lang.String propName = args.propertyName; if (propName.equals("IsValid")) { onIsValidPropertyChange(object); } else if (propName.equals("IsGrouppedByTarget")) { updateListByGropping(object); } }); iscsiTargetToLunView.edit(object); iscsiLunToTargetView.edit(object); targetsToLunTab.addClickHandler(( event) -> { iscsiLunToTargetView.disableItemsUpdate(); object.setIsGrouppedByTarget(true); }); lunToTargetsTab.addClickHandler(( event) -> { iscsiTargetToLunView.disableItemsUpdate(); object.setIsGrouppedByTarget(false); }); dialogTabPanel.switchTab((object.getIsGrouppedByTarget() ? targetsToLunTab : lunToTargetsTab)); updateListByGropping(object); <START_MOD>if (!(object.getContainer().isNewStorage())) { if ((object.getContainer().getStorage().getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Maintenance)) { mainLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiRemoveLUNsLabel()); subLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiYouCanPerformActionsLabel()); } else if ((object.getContainer().getStorage().getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)) { mainLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiActionsLabel()); subLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiYouCanRemoveLUNsLabel()); } } }<END_MOD>
<START_MOD>private java.net.HttpURLConnection getProxyConnection(java.lang.String url) { org.ovirt.engine.core.uutils.net.HttpURLConnectionBuilder builder; java.net.HttpURLConnection connection; try { builder = new org.ovirt.engine.core.uutils.net.HttpURLConnectionBuilder().setURL(url); builder.setTrustStore(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStore().getAbsolutePath()).setTrustStorePassword(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStorePassword()).setTrustStoreType(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStoreType()).setHttpsProtocol(org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.ExternalCommunicationProtocol)); connection = builder.create(); connection.setDoOutput(true); return connection; } catch (java.lang.Exception ex) { throw new java.lang.RuntimeException(java.lang.String.format("Failed to communicate with ovirt-imageio-proxy: %s", ex.getMessage())); } }<END_MOD>
<START_MOD>private java.util.Map<java.lang.String, java.lang.Object> createDiskUuidsMap(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { java.util.Map<java.lang.String, java.lang.Object> diskUuids = new java.util.HashMap<>(); diskUuids.put("poolID", diskImage.getStoragePoolId()); diskUuids.put("domainID", diskImage.getStorageIds().get(0)); diskUuids.put("imageID", diskImage.getId()); diskUuids.put("volumeID", diskImage.getImageId()); return diskUuids; }<END_MOD>
@java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.shouldSkipCommandExecutionCached()) { return true; } if ((org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.canRunActionOnNonManagedVm())) { return false; } if (!(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().isRunningOrPaused())) { return org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.failVmStatusIllegal(); } if (((isoDomainListSynchronizer.findActiveISODomain(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getStoragePoolId())) == null) && (!(org.apache.commons.lang.StringUtils.isEmpty(cdImagePath)))) { return failValidation(EngineMessage.VM_CANNOT_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO); } if ((org.apache.commons.lang.StringUtils.isNotEmpty(cdImagePath)) && (!(<START_MOD>(<END_MOD>org.apache.commons.lang.StringUtils.endsWithIgnoreCase(cdImagePath, ValidationUtils.ISO_SUFFIX))<START_MOD> || (ValidationUtils.GUID.matches(cdImagePath)))<END_MOD>)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_INVALID_CDROM_DISK_FORMAT); } return true; }
private void setup(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError expectedError) { <START_MOD>org.ovirt.engine.core.compat.Guid validGuid = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.VDS validVds = new org.ovirt.engine.core.common.businessentities.VDS(); validVds.setId(validGuid); if (expectedError == (org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError.NOT_SUPPORTED)) { validVds.setClusterCompatibilityVersion(Version.v4_1); } else { validVds.setClusterCompatibilityVersion(Version.v4_2); } org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface eth0 = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); eth0.setName(vdsInterfacesNames[0]); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface eth1 = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); eth1.setName(vdsInterfacesNames[1]); <END_MOD>when(getQueryParameters().getId()).thenReturn(<START_MOD>validGuid); when(vdsDao.get(eq(validGuid))).thenReturn(validVds); when(interfaceDao.getAllInterfacesForVds(eq(validGuid))).thenReturn(java.util.Arrays.asList(eth0, eth1<END_MOD>)); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); returnValue.setSucceeded(true); returnValue.setReturnValue(creatLldpInfoMap((expectedError != (org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError.LLDP_ENABLE)))); when(vdsBrokerFrontendMocked.runVdsCommand(eq(VDSCommandType.GetLldp), any())).thenReturn(returnValue); }
<START_MOD>private java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.LldpInfo> createEmptyResponse() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ifaces = interfaceDao.getAllInterfacesForVds(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getParameters().getId()); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.LldpInfo> result = new java.util.HashMap<>(); if ((ifaces != null) && (!(ifaces.isEmpty()))) { ifaces.forEach(( iface) -> result.put(iface.getName(), null)); } return result; }<END_MOD>
<START_MOD>@org.junit.Test public void testExecuteQueryNotSupported() { setup(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError.NOT_SUPPORTED); getQuery().executeQueryCommand(); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.LldpInfo> returnValue = getQuery().getQueryReturnValue().getReturnValue(); assertTrue(checkEmptyValuesForIfaces(returnValue)); }<END_MOD>
@java.lang.Override protected void executeQueryCommand(<START_MOD>) { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getParameters().getId(); org.ovirt.engine.core.common.businessentities.VDS vds = vdsDao.get(vdsId); if ((vds != null) && (org.ovirt.engine.core.common.FeatureSupported.isLlldpInformationSupported(vds.getClusterCompatibilityVersion()))<END_MOD>) { java.lang.String[] names = new java.lang.String[0]; org.ovirt.engine.core.common.vdscommands.GetLldpVDSCommandParameters lldpVDSCommandParameters = new org.ovirt.engine.core.common.vdscommands.GetLldpVDSCommandParameters(<START_MOD>vdsId<END_MOD>, names); org.ovirt.engine.core.common.vdscommands.VDSReturnValue command = runVdsCommand(VDSCommandType.GetLldp, lldpVDSCommandParameters); org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getQueryReturnValue().setReturnValue(command.getReturnValue()); }<START_MOD> else { org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getQueryReturnValue().setReturnValue(createEmptyResponse()); } }<END_MOD>
<START_MOD>private void addGlusterWebhook(org.ovirt.engine.core.common.businessentities.VDS vds) { try { backend.runInternalAction(VdcActionType.AddGlusterWebhookInternal, new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters(vds.getClusterId())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Could not refresh storage devices from gluster host '{}'", vds.getName()); } }<END_MOD>
public boolean initGlusterHost(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterHostUUID, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(vds.getId())); if ((returnValue.getSucceeded()) && ((returnValue.getReturnValue()) != null)) { org.ovirt.engine.core.compat.Guid addedServerUuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(((java.lang.String) (returnValue.getReturnValue()))); if (hostUuidExists(vds, addedServerUuid)) { setNonOperational(vds, NonOperationalReason.GLUSTER_HOST_UUID_ALREADY_EXISTS, null); return false; } saveGlusterHostUuid(vds, addedServerUuid); } else { setNonOperational(vds, NonOperationalReason.GLUSTER_HOST_UUID_NOT_FOUND, null); return false; } refreshGlusterStorageDevices(vds); boolean ret = initGlusterPeerProcess(vds); glusterServerDao.updatePeerStatus(vds.getId(), (ret == true ? org.ovirt.engine.core.common.businessentities.gluster.PeerStatus.CONNECTED : org.ovirt.engine.core.common.businessentities.gluster.PeerStatus.DISCONNECTED)); <START_MOD>addGlusterWebhook(vds); <END_MOD>return ret; }
private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus fetchedStatus) { log.debug( that status of brick '{}' in volume '{}' changed from '{}' to '{}' brick.getQualifiedName(), volume.getName(), brick.getStatus(), fetchedStatus); logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, new java.util.HashMap<java.lang.String, java.lang.String>() { { put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); <START_MOD>put("source", "cli"); <END_MOD>} }); if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN); } }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession getGeoRepSession(org.ovirt.engine.core.compat.Guid masterVolumeId, java.lang.String slaveHostName, java.lang.String slaveVolumeName) { return getCallsHandler().executeRead("GetGlusterGeoRepSessionBySlaveHostAndVolume", org.ovirt.engine.core.dao.gluster.GlusterGeoRepDaoImpl.georepSessionRowMapper, getCustomMapSqlParameterSource().addValue("master_volume_id", masterVolumeId).addValue("slave_host_name", slaveHostName).addValue("slave_volume_name", slaveVolumeName)); }<END_MOD>
<START_MOD>private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity vol, org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status, org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { logUtil.logAuditMessage(vol.getClusterId(), vol, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, new java.util.HashMap<java.lang.String, java.lang.String>() { { put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); put(GlusterConstants.OPTION_NEW_VALUE, status.toString()); put("source", "gluster event"); } }); }<END_MOD>
<START_MOD>public boolean isDummyProvider() { return ((type) == (ProviderType.EXTERNAL_NETWORK)) && (((url) == null) || (url.isEmpty())); }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult cpuTypeSupportsVirtService() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_CPU_NOT_FOUND).when(((<START_MOD>(<END_MOD>cluster.supportsVirtService(<START_MOD>)) && ((cluster.getCpuName()) != null<END_MOD>)) && (!(cpuExists())))); }
@java.lang.Override protected void executeCommand() { int missingDiskCount = getMissingDiskCount(); if (missingDiskCount <= 0) { setOvfUpdateStep(OvfUpdateStep.OVF_UPLOAD); updateOvfStoreContent(); setSucceeded(<START_MOD>failedOvfDisks.isEmpty()<END_MOD>); } else { setOvfUpdateStep(OvfUpdateStep.OVF_STORES_CREATION); org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.setSucceeded(createOvfStoreDisks(getMissingDiskCount())); } }
<START_MOD>protected abstract void selectPhysicalDatacentreNetwork();<END_MOD>
<START_MOD>private void onPhysicalRadioButtonChange(java.lang.Object sender) { if (sender == (getPhysicalNetworkDatacentreRB())) { getNeutronPhysicalNetwork().setIsChangeable(false); getDatacentrePhysicalNetwork().setIsChangeable(true); getPhysicalNetworkDatacentre().setEntity(true); } else if (sender == (getPhysicalNetworkCustomRB())) { getNeutronPhysicalNetwork().setIsChangeable(true); getDatacentrePhysicalNetwork().setIsChangeable(false); getPhysicalNetworkDatacentre().setEntity(false); } else if (sender == (getPhysicalNetworkDatacentre())) { boolean datacentre = getPhysicalNetworkDatacentre().getEntity(); getPhysicalNetworkCustomRB().setEntity((!datacentre), false); getPhysicalNetworkDatacentreRB().setEntity(datacentre, false); } }<END_MOD>
<START_MOD>public void setPhysicalNetworkDatacentre(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetworkDatacentre) { this.physicalNetworkDatacentre = physicalNetworkDatacentre; }<END_MOD>
<START_MOD>private boolean isConnectedToPhysicalNetwork() { final org.ovirt.engine.core.common.businessentities.network.Network network = getNetwork(); return false; }<END_MOD>
@java.lang.Override public void updateVisibility() { messageLabel.setVisible(false); <START_MOD>externalLabel<END_MOD>.setVisible(org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly)); <START_MOD>onPhysicalNetworkChange(); <END_MOD>}
<START_MOD>@java.lang.Override protected void selectPhysicalDatacentreNetwork() { final org.ovirt.engine.core.common.businessentities.network.Network network = getNetwork(); }<END_MOD>
<START_MOD>public void setPhysicalNetworkCustomRB(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetworkCustomRB) { this.physicalNetworkCustomRB = physicalNetworkCustomRB; }<END_MOD>
<START_MOD>@java.lang.Override protected void selectPhysicalDatacentreNetwork() { getDatacentrePhysicalNetwork().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(getDatacentrePhysicalNetwork().getItems())); }<END_MOD>
@java.lang.Override protected void executeSave() { final org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(getSelectedDc().getId(), getNetwork()); parameters.setVnicProfileRequired(false); if (<START_MOD>getExternal<END_MOD>().getEntity()) { org.ovirt.engine.core.common.businessentities.Provider<?> externalProvider = getExternalProviders().getSelectedItem(); org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providerNetwork = new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(); providerNetwork.setProviderId(externalProvider.getId()); getNetwork().setProvidedBy(providerNetwork); <START_MOD>if (getPhysicalNetworkDatacentre().getEntity()) { } <END_MOD>org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.AddNetworkOnProvider, parameters, addNetworkCallback(), null); } else { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.AddNetwork, parameters, addNetworkCallback(), null); } }
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getPhysicalNetwork() { return physicalNetwork; }<END_MOD>
@java.lang.Override protected void onExportChanged() { super.onExportChanged(); if (<START_MOD>getExternal<END_MOD>().getEntity()) { getHasVLanTag().setIsChangeable(false); getVLanTag().setIsChangeable(false); getIsVmNetwork().setIsChangeable(false); getNetworkLabel().setIsChangeable(false); getNeutronPhysicalNetwork().setIsChangeable(false); } }
<START_MOD>public void setPhysicalNetwork(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetwork) { this.physicalNetwork = physicalNetwork; }<END_MOD>
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getPhysicalNetworkCustomRB() { return physicalNetworkCustomRB; }<END_MOD>
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getPhysicalNetworkDatacentreRB() { return physicalNetworkDatacentreRB; }<END_MOD>
public void flush() { network.setDataCenterId(getSelectedDc().getId()); network.setName(getName().getEntity()); network.setStp(getIsStpEnabled().getEntity()); network.setDescription(getDescription().getEntity()); network.setComment(getComment().getEntity()); network.setVmNetwork(getIsVmNetwork().getEntity()); java.lang.String label = <START_MOD>getNetworkLabel().getSelectedItem(); if ((getExternal().getEntity()) && (getPhysicalNetwork().getEntity())) { label = (!(getPhysicalNetworkDatacentre().getEntity()<END_MOD>)) ? getNeutronPhysicalNetwork().getEntity() : <START_MOD>null; } network.setLabel(((label == null) || (!(label.isEmpty())) ? label : null)); network.setMtu(0); if (getMtu().getIsChangable()) { network.setMtu(java.lang.Integer.parseInt(getMtu().getEntity().toString())); } network.setDnsResolverConfiguration(getDnsConfigurationModel().flush()); network.setVlanId(null); if (getHasVLanTag().getEntity()) { network.setVlanId(java.lang.Integer.parseInt(getVLanTag().getEntity().toString())); } for (org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel profileModel : getProfiles().getItems()) { profileModel.flush(); } if (getQos().getIsChangable()) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = getQos<END_MOD>().getSelectedItem(); network.<START_MOD>setQosId((qos<END_MOD> == <START_MOD>(org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel.EMPTY_HOST_NETWORK_QOS) ? <END_MOD>null : qos.getId())); } }
protected void onExportChanged() { boolean externalNetwork = <START_MOD>getExternal<END_MOD>().getEntity(); getNetworkLabel().setIsChangeable((!externalNetwork)); getNeutronPhysicalNetwork().setIsChangeable(externalNetwork); getQos().setIsChangeable((!externalNetwork)); getAddQosCommand().setIsExecutionAllowed((!externalNetwork)); <START_MOD>getPhysicalNetwork().setIsChangeable(externalNetwork); getPhysicalNetworkCustomRB().setIsChangeable(externalNetwork); getPhysicalNetworkDatacentreRB().setIsChangeable(externalNetwork); <END_MOD>updateMtuSelectorsChangeability(); }
private void updateAvailability() { if (!(org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly))) { getExternalProviders().setIsAvailable(false); getNeutronPhysicalNetwork().setIsAvailable(false); getCreateSubnet().setIsAvailable(false); getVLanTag().setIsAvailable(false); getHasVLanTag().setIsAvailable(false); <START_MOD>getExternal<END_MOD>().setIsAvailable(false); } }
<START_MOD>private void initPhysicalNetworkList() { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(QueryType.GetAllNetworks, new org.ovirt.engine.core.common.queries.IdQueryParameters(getSelectedDc().getId()), new org.ovirt.engine.ui.uicommonweb.models.datacenters.AsyncQuery<org.ovirt.engine.core.common.queries.QueryReturnValue>(( result) -> { List<org.ovirt.engine.core.common.businessentities.network.Network> networks = result.getReturnValue(); if (networks != null) { getDatacentrePhysicalNetwork().setItems(networks); selectPhysicalDatacentreNetwork(); } })); }<END_MOD>
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.Network> getDatacentrePhysicalNetwork() { return datacentrePhysicalNetwork; }<END_MOD>
<START_MOD>public void setPhysicalNetworkDatacentreRB(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetworkDatacentreRB) { this.physicalNetworkDatacentreRB = physicalNetworkDatacentreRB; }<END_MOD>
<START_MOD>public void setDatacentrePhysicalNetwork(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.Network> datacentrePhysicalNetwork) { this.datacentrePhysicalNetwork = datacentrePhysicalNetwork; }<END_MOD>
private void init() { setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editLogicalNetworkTitle()); setHelpTag(HelpTag.edit_logical_network); setHashName("edit_logical_network"); getName().setEntity(getNetwork().getName()); getDescription().setEntity(getNetwork().getDescription()); getComment().setEntity(getNetwork().getComment()); getIsStpEnabled().setEntity(getNetwork().getStp()); getHasVLanTag().setEntity(((getNetwork().getVlanId()) != null)); getVLanTag().setEntity(getNetwork().getVlanId()); initMtu(); initIsVm(); <START_MOD>getExternal<END_MOD>().setEntity(getNetwork().isExternal()); <START_MOD>getExternal<END_MOD>().setIsChangeable(false); getExternalProviders().setIsChangeable(false); <START_MOD>getPhysicalNetwork().setEntity(isConnectedToPhysicalNetwork()); getPhysicalNetwork().setIsChangeable(false); <END_MOD>if (<START_MOD>isConnectedToPhysicalNetwork()) { getPhysicalNetworkDatacentre().setEntity(false); } getPhysicalNetworkDatacentreRB().setIsChangeable(false); getPhysicalNetworkCustomRB().setIsChangeable(false); getDatacentrePhysicalNetwork().setIsChangeable(false); if ((<END_MOD>getNetwork().isExternal()) <START_MOD>&& (isConnectedToPhysicalNetwork())) <END_MOD>{ getNeutronPhysicalNetwork().setEntity(getNetwork().getLabel()); } else { getNetworkLabel().setSelectedItem(getNetwork().getLabel()); } toggleProfilesAvailability(); }
<START_MOD>java.lang.String physicalNetworkDatacentreLabel();<END_MOD>
<START_MOD>private void setQuotaStorage(org.ovirt.engine.core.common.businessentities.Quota quota) { if (quota.isEmptyStorageQuota()) { quota.setGlobalQuotaStorage(new org.ovirt.engine.core.common.businessentities.QuotaStorage(org.ovirt.engine.core.compat.Guid.newGuid(), quota.getId(), null, (-1L), 0.0)); return; } if ((quota.getGlobalQuotaStorage()) != null) { quota.getGlobalQuotaStorage().setQuotaId(quota.getId()); quota.getGlobalQuotaStorage().setQuotaStorageId(org.ovirt.engine.core.compat.Guid.newGuid()); } if ((quota.getQuotaStorages()) != null) { for (org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage : quota.getQuotaStorages()) { quotaStorage.setQuotaId(quota.getId()); quotaStorage.setQuotaStorageId(org.ovirt.engine.core.compat.Guid.newGuid()); } } }<END_MOD>
private void finalizeDownloadIfNecessary(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context, org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer) { if ((((<START_MOD>org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize<END_MOD>()) != 0) && (<START_MOD>(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()) == <END_MOD>(upToDateImageTransfer.getBytesSent()))) && (!(upToDateImageTransfer.getActive()))) { if (!(context.entity.getActive())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer statusUpdate = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); statusUpdate.setPhase(ImageTransferPhase.FINALIZING_SUCCESS); runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId(), statusUpdate)); } } }
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DiskContentType.class, to = org.ovirt.engine.api.model.DiskContentType.class) public static org.ovirt.engine.api.model.DiskContentType map(org.ovirt.engine.api.model.DiskContentType contentType) { if (contentType == null) { return null; } switch (contentType) { case DATA : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; case ISO : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; case MEMORY_DUMP_VOLUME : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; case MEMORY_METADATA_VOLUME : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; case OVF_STORE : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; default : throw new java.lang.IllegalArgumentException((("Unknown disk content type \"" + contentType) + "\"")); } }<END_MOD>
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DiskContentType.class, to = org.ovirt.engine.api.model.DiskContentType.class) public static org.ovirt.engine.api.model.DiskContentType map(org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType) { switch (contentType) { case DATA : return org.ovirt.engine.api.model.DiskContentType.DATA; case ISO : return org.ovirt.engine.api.model.DiskContentType.ISO; case MEMORY_DUMP_VOLUME : return org.ovirt.engine.api.model.DiskContentType.MEMORY_DUMP_VOLUME; case MEMORY_METADATA_VOLUME : return org.ovirt.engine.api.model.DiskContentType.MEMORY_METADATA_VOLUME; case OVF_STORE : return org.ovirt.engine.api.model.DiskContentType.OVF_STORE; default : return null; } }<END_MOD>
<START_MOD>protected<END_MOD> void updateExternalVnicProfilesPerTargetCluster() { final java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> result = new java.util.HashMap<>(); getEntities().getItems()<START_MOD>.stream().forEach(( importTemplateData<END_MOD>) <START_MOD>-><END_MOD> <START_MOD>updateExternalVnicProfilesPerTargetCluster(importTemplateData<END_MOD>.<START_MOD>getEntity()<END_MOD>.<START_MOD>getInterfaces(),<END_MOD> importTemplateData.getCluster().getSelectedItem()<START_MOD>, result))<END_MOD>; <START_MOD>setExternalVnicProfilesPerTargetCluster<END_MOD>(result); }
<START_MOD>protected<END_MOD> void updateExternalVnicProfilesPerTargetCluster() { final java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> result = new java.util.HashMap<>(); getEntities().getItems()<START_MOD>.stream().forEach(( registerVmData<END_MOD>) <START_MOD>-><END_MOD> <START_MOD>updateExternalVnicProfilesPerTargetCluster(registerVmData<END_MOD>.<START_MOD>getEntity()<END_MOD>.<START_MOD>getInterfaces(),<END_MOD> registerVmData.getCluster().getSelectedItem()<START_MOD>, result))<END_MOD>; <START_MOD>setExternalVnicProfilesPerTargetCluster<END_MOD>(result); }
<START_MOD>protected java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> updateExternalVnicProfilesPerTargetCluster(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces, org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> result) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> clusterVnicProfileMappings; if (result.containsKey(cluster)) { clusterVnicProfileMappings = result.get(cluster); } else { clusterVnicProfileMappings = new java.util.HashSet(); result.put(cluster, clusterVnicProfileMappings); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> previousClusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { previousClusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { previousClusterVnicProfileMappings = new java.util.HashSet(); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> vmVnicProfiles = getNewVnicProfileMappings(interfaces, previousClusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); return result; }<END_MOD>
<START_MOD>public java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> cloneExternalVnicProfiles(org.ovirt.engine.core.common.businessentities.Cluster cluster) { if ((externalVnicProfilesPerTargetCluster.get(cluster)) == null) { return new java.util.ArrayList<>(); } final java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> result = new java.util.ArrayList(externalVnicProfilesPerTargetCluster.get(cluster).size()); externalVnicProfilesPerTargetCluster.get(cluster).stream().forEach(( vnicProfileMappingEntity) -> result.add(vnicProfileMappingEntity.getExternalVnicProfileMapping())); return result; }<END_MOD>
<START_MOD>private java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> getNewVnicProfileMappings(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> previousClusterVnicProfileMappings) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> result = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : interfaces) { final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity(vnic.getNetworkName(), vnic.getVnicProfileName(), null); final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity mapping = previousClusterVnicProfileMappings.stream().filter(( x) -> x.equals(newMapping)).findFirst().orElse(newMapping); result.add(mapping); } return result; }<END_MOD>
<START_MOD>protected void addVnicProfileMappingCommand() { final org.ovirt.engine.ui.uicommonweb.UICommand vnicProfileMappingCommand = createVnicProfileMappingCommand(); org.ovirt.engine.ui.uicommonweb.models.storage.RegisterEntityModel.getCommands().add(vnicProfileMappingCommand); }<END_MOD>
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if ("OnSave".equals(command.getName())) { onSave(); } <START_MOD>if ((command == (getVnicProfileMappingCommand())) && ((org.ovirt.engine.ui.uicommonweb.models.storage.RegisterEntityModel.getWindow()) == null)) { updateExternalVnicProfilesPerTargetCluster(); vnicProfileMappingModel = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingModel(this, externalVnicProfilesPerTargetCluster); vnicProfileMappingModel.initialize(); setWindow(vnicProfileMappingModel); <END_MOD>}<START_MOD> }<END_MOD>
<START_MOD>protected abstract void updateExternalVnicProfilesPerTargetCluster();<END_MOD>
public <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.action.ActionType<END_MOD> getCommandType() { return commandType; }
protected org.ovirt.engine.core.bll.context.DefaultCompensationContext createDefaultCompensationContext() { org.ovirt.engine.core.bll.context.DefaultCompensationContext defaultContext = new org.ovirt.engine.core.bll.context.DefaultCompensationContext(); defaultContext.setCommandId(commandId); defaultContext.setCommandType(<START_MOD>getActionType<END_MOD>()); defaultContext.setBusinessEntitySnapshotDao(businessEntitySnapshotDao); defaultContext.setSnapshotSerializer(org.ovirt.engine.core.utils.SerializationFactory.getSerializer()); return defaultContext; }
@java.lang.Override public java.util.List<org.apache.commons.collections.KeyValue> getAllCommands() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource(); return getCallsHandler().executeReadList("get_all_commands", ( rs, rowNum) -> { org.apache.commons.collections.keyvalue.DefaultKeyValue result = new org.apache.commons.collections.keyvalue.DefaultKeyValue(); result.setKey(getGuidDefaultEmpty(rs, "command_id")); result.setValue(<START_MOD>org.ovirt.engine.core.common.action.ActionType.valueOf(<END_MOD>rs.getString("command_type"<START_MOD>)<END_MOD>)); return result; }, parameterSource); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot entitySnapshot) { org.ovirt.engine.core.compat.Guid id = entitySnapshot.getId(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(id)) { id = org.ovirt.engine.core.compat.Guid.newGuid(); entitySnapshot.setId(id); } org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", entitySnapshot.getId()).addValue("command_id", entitySnapshot.getCommandId()).addValue("command_type", entitySnapshot.getCommandType()<START_MOD>.name()<END_MOD>).addValue("entity_id", entitySnapshot.getEntityId()).addValue("entity_type", entitySnapshot.getEntityType()).addValue("entity_snapshot", entitySnapshot.getEntitySnapshot()).addValue("snapshot_class", entitySnapshot.getSnapshotClass()).addValue("snapshot_type", entitySnapshot.getSnapshotType()).addValue("insertion_order", entitySnapshot.getInsertionOrder()); getCallsHandler().executeModification("insert_entity_snapshot", parameterSource); }
@org.junit.Test public void testInsertSnapshot() { org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot snapshot = new org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot(); org.ovirt.engine.core.compat.Guid commandId = org.ovirt.engine.core.compat.Guid.newGuid(); snapshot.setCommandId(commandId); snapshot.setCommandType(<START_MOD>ActionType.UpdateVds<END_MOD>); snapshot.setEntityId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); snapshot.setEntityType("org.ovirt.engine.core.common.businessentities.VdsStatic"); snapshot.setEntitySnapshot("something"); snapshot.setSnapshotClass("someClass"); dao.save(snapshot); java.util.List<org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot> snapshotsFromDb = dao.getAllForCommandId(commandId); assertNotNull(snapshotsFromDb); assertEquals(1, snapshotsFromDb.size()); assertEquals(snapshot, snapshotsFromDb.get(0)); }
boolean validateCluster() { if ((org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getCluster()) == null) { return failValidation(EngineMessage.VDS_CLUSTER_IS_NOT_VALID); } return true; }
<START_MOD>public void compensate() { java.util.List<org.apache.commons.collections.KeyValue> commandSnapshots = businessEntitySnapshotDao.getAllCommands(); for (org.apache.commons.collections.KeyValue commandSnapshot : commandSnapshots) { try { compensate(((org.ovirt.engine.core.compat.Guid) (commandSnapshot.getKey()))); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.OnStartupCompensation.log.error("Failed to run compensation on startup for Command '{}', Command Id '{}': {}", commandSnapshot.getValue(), commandSnapshot.getKey(), e.getMessage()); org.ovirt.engine.core.bll.OnStartupCompensation.log.error("Exception", e); } org.ovirt.engine.core.bll.OnStartupCompensation.log.info("Running compensation on startup for Command '{}', Command Id '{}'", commandSnapshot.getValue(), commandSnapshot.getKey()); } }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot> getAllForCommandId(org.ovirt.engine.core.compat.Guid commandID) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("command_id", commandID); return getCallsHandler().executeReadList("get_entity_snapshot_by_command_id", ( rs, rowNum) -> { org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot result = new org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot(); result.setId(getGuidDefaultEmpty(rs, "id")); result.setCommandId(getGuidDefaultEmpty(rs, "command_id")); result.setCommandType(<START_MOD>org.ovirt.engine.core.common.action.ActionType.valueOf(<END_MOD>rs.getString("command_type"))<START_MOD>)<END_MOD>; result.setEntityId(rs.getString("entity_id")); result.setEntityType(rs.getString("entity_type")); result.setEntitySnapshot(rs.getString("entity_snapshot")); result.setSnapshotClass(rs.getString("snapshot_class")); result.setSnapshotType(org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot.SnapshotType.values()[rs.getInt("snapshot_type")]); result.setInsertionOrder(rs.getInt("insertion_order")); return result; }, parameterSource); }
private void initDefaultNetworkProvider() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getAllProvidersByType(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(( result) -> { List<org.ovirt.engine.core.common.businessentities.Provider> providers = ((java.util.List) (result)); providers.add(0, <START_MOD>getNoDefaultNetworkProvider()); getDefaultNetworkProvider().setItems(providers); org.ovirt.engine.core.common.businessentities.Cluster cluster = getEntity(); if (cluster != <END_MOD>null)<START_MOD> { org.ovirt.engine.core.common.businessentities.Provider defaultNetworkProvider = providers.stream().filter(( provider) -> java.util.Objects.equals(provider.getId(), cluster.getDefaultNetworkProviderId())).findFirst().orElse(null)<END_MOD>; getDefaultNetworkProvider().<START_MOD>setSelectedItem(<END_MOD>defaultNetworkProvider); } }), ProviderType.OPENSTACK_NETWORK, ProviderType.EXTERNAL_NETWORK); }
public void selectProviderById(org.ovirt.engine.core.compat.Guid providerId) { if ((getNetworkProviders().getItems()) != null) { org.ovirt.engine.core.common.businessentities.Provider provider = getNetworkProviders().getItems().stream().filter(( candidate) -> <START_MOD>java<END_MOD>.<START_MOD>util.Objects.equals<END_MOD>(candidate.getId()<START_MOD>, <END_MOD>providerId)).findFirst().orElse(null); getNetworkProviders().setSelectedItem(provider); } }
<START_MOD>protected boolean canDiskBeMoved() { return validate(createDiskValidator(getImage()).diskCanBeCopied(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getDiskImage(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getDiskImage().getQcowCompat())); }<END_MOD>
@java.lang.Override protected boolean validate() { return (((((((((((((((<START_MOD>(<END_MOD>super.validate(<START_MOD>)) && (canDiskBeMoved()<END_MOD>)) && (isImageExist())) && (checkOperationIsCorrect())) && (checkOperationAllowedOnDiskContentType())) && (isImageNotLocked())) && (isSourceAndDestTheSame())) && (validateSourceStorageDomain())) && (validateDestStorage())) && (checkTemplateInDestStorageDomain())) && (validateSpaceRequirements())) && (validateVmSnapshotStatus())) && (checkCanBeMoveInVm())) && (checkIfNeedToBeOverride())) && (setAndValidateDiskProfiles())) && (setAndValidateQuota())) && (validatePassDiscardSupportedForDestinationStorageDomain()); }
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult diskCanBeCopied(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage, org.ovirt.engine.core.common.businessentities.storage.QcowCompat compat) { if (QcowCompat.QCOW2_V2.equals(compat)) { if (!(Guid.Empty.equals(diskImage.getParentId()))) { org.ovirt.engine.core.common.businessentities.storage.Image parent = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getImageDao().get(diskImage.getParentId()); if ((parent.getSize()) < (diskImage.getSize())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_MOVE_DISK); } } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { try { org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command = new org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder().hostnames(host.getHostName()).logFileDirectory(VdsDeployBase.HOST_DEPLOY_LOG_DIRECTORY).logFilePrefix("ovirt-host-mgmt-ansible").logFileName(host.getHostName()).logFileSuffix(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()).playbook(AnsibleConstants.HOST_UPGRADE_PLAYBOOK); if ((ansibleExecutor.runCommand(command<START_MOD>, org.ovirt.engine.core.bll.host.HostUpgradeManager.UPDATE_PACKAGES_TIMEOUT<END_MOD>).getAnsibleReturnCode()) != (org.ovirt.engine.core.common.utils.ansible.AnsibleReturnCode.OK)) { java.lang.String error = java.lang.String.format( to update host '%1$s'. host.getHostName()); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error(error); throw new java.lang.RuntimeException(error); } } catch (java.lang.InterruptedException | java.io.IOException ex) { throw new java.lang.RuntimeException(ex); } }
@java.lang.Override protected void endSuccessfully() { if (org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().getActive()) { updateRelevantVms(); } else if (org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().hasRawBlock()) { refreshVolume(); } org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getImageInfo(); if ((diskImage != null) && ((org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().getSize()) != (diskImage.getSize()))) { org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getReturnValue().setActionReturnValue(diskImage.getSize()); imageDao.updateImageSize(diskImage.getImageId(), diskImage.getSize()); <START_MOD>completeImageData(diskImage); <END_MOD>updateAuditLog(AuditLogType.USER_EXTEND_DISK_SIZE_SUCCESS, diskImage.getSizeInGigabytes()); } org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.setSucceeded(true); }
protected void <START_MOD>addDbUsers<END_MOD>() { }
private void addPermissions(org.ovirt.engine.core.<START_MOD>bll.storage.ovfstore.DrMappingHelper.PermissionsParamObject permissionsParams, java.util.List<java.lang.String> missingRoles, java.util.List<org.ovirt.engine.core.common.businessentities.Permission> permissionsToAdd) { java.util.Map<java.lang.String<END_MOD>, java.util.Set<java.lang.String><START_MOD>> userToRoles = permissionsParams.userToRoles; userToRoles.getOrDefault(permissionsParams.dbUser.getLoginName(), java.util.Collections.emptySet()).forEach(( roleName) -> { org.ovirt.engine.core.common.businessentities.Permission permission = null; org.ovirt.engine.core.common.businessentities.Role originalRole = roleDao.getByName(roleName); if (permissionsParams.roleMap != null) { org.ovirt.engine.core.common.businessentities.Role destRoleName = ((org.ovirt.engine.core.common.businessentities.Role) (permissionsParams.roleMap.get(roleName))); if (destRoleName != null) { org.ovirt.engine.core.common.businessentities.Role destRole = roleDao.getByName(destRoleName.getName()); permission = new org.ovirt.engine.core.common.businessentities.Permission(permissionsParams.dbUser.getId(), destRole.getId(), permissionsParams.<END_MOD>entityId, <START_MOD>permissionsParams.<END_MOD>objectType<START_MOD>); } else if (originalRole != null) { permission = new org.ovirt.engine.core.common.businessentities.Permission(permissionsParams.dbUser.getId(), originalRole.getId(), permissionsParams.entityId, permissionsParams.objectType); } } else if (originalRole != null) { permission = new org.ovirt.engine.core.common.businessentities.Permission(permissionsParams.dbUser.getId(), originalRole.getId(), permissionsParams.entityId, permissionsParams.objectType); } if (permission != null) { permissionsToAdd.add(permission); } else { missingRoles.add(<END_MOD>roleName)<START_MOD>; } }); }<END_MOD>
protected void <START_MOD>addDbUsers<END_MOD>() { drMappingHelper.mapDbUsers(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getDomainMap(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getDbUsers(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getUserToRoles(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVmId(), VdcObjectType.VM, org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getRoleMap()); }
@java.lang.Override protected void executeVmCommand() { try { addVmToDb(); addVmToAffinityGroups(); addVmToAffinityLabels(); <START_MOD>addDbUsers<END_MOD>(); processImages(); vmHandler.addVmInitToDB(getVm().getStaticData().getVmInit()); discardHelper.logIfDisksWithIllegalPassDiscardExist(getVmId()); } catch (java.lang.RuntimeException e) { macPool.freeMacs(macsAdded); throw e; } org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.setSucceeded(true); org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getReturnValue().setActionReturnValue(getVm()); }
@java.lang.Override protected void executeCommand() { if (shouldSkipCommandExecutionCached()) { org.ovirt.engine.core.bll.VmCommand.setSucceeded(true); return; } <START_MOD>registerHeOvfUpdate(); <END_MOD>executeVmCommand(); }
<START_MOD>private void registerHeOvfUpdate() { if (!(shouldUpdateHostedEngineOvf())) { return; } if (!(org.ovirt.engine.core.bll.VmCommand.getVm().isHostedEngine())) { return; } org.ovirt.engine.core.bll.VmCommand.registerRollbackHandler(new org.ovirt.engine.core.utils.transaction.TransactionCompletionListener() { @java.lang.Override public void onSuccess() { ovfDataUpdater.triggerNow(); } @java.lang.Override public void onRollback() { } }); }<END_MOD>
private java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> getNameServers(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration dnsResolverConfiguration) { if (dnsResolverConfiguration == null) { return <START_MOD>java.util.Collections.EMPTY_LIST<END_MOD>; } java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServers = dnsResolverConfiguration.getNameServers(); if ((nameServers == null) || (nameServers.isEmpty())) { return <START_MOD>java.util.Collections.EMPTY_LIST<END_MOD>; } return nameServers; }
private void dataCenter_SelectedItemChanged() {<START_MOD> if ((getCurrentStorageItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) { org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase sanStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) (getCurrentStorageItem())); sanStorageModel.updateRemovableLuns(getDataCenter().getSelectedItem().getCompatibilityVersion()); sanStorageModel.getRequireTableRefresh().setEntity(null); sanStorageModel.getRequireTableRefresh().setEntity(true); }<END_MOD> updateItemsAvailability(); behavior.updateDataCenterAlert(); }
<START_MOD>public void updateRemovableLuns(org.ovirt.engine.core.compat.Version dcCompatibilityVersion) { setReduceDeviceSupported(((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigValues.ReduceDeviceFromStorageDomain, dcCompatibilityVersion.toString())))); int numOfIncludedLuns = getIncludedLuns().size(); java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> lunModels = getLuns(false, true); lunModels.forEach(( lunModel) -> lunModel.setIsLunRemovable(((isReduceDeviceSupported()) && ((numOfIncludedLuns != 1) && (!(getMetadataDevices().contains(lunModel.getLunId()))))))); }<END_MOD>
@org.junit.Test public void testReadBooleanList() { java.util.List<java.lang.Boolean> expected = java.util.Arrays.asList(true, false); org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader(<START_MOD>"<values><value>true</value><value>false</value></values>"<END_MOD>); java.util.List<java.lang.Boolean> booleans = reader.readBooleans(); assertEquals(expected, booleans); }
@org.junit.Test public void testReadBooleanListEndElement() { org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader(<START_MOD>"<values><value>true</value><value>false</value></values>"<END_MOD>); reader.readBooleans(); assertEquals(javax.xml.stream.XMLStreamConstants.END_ELEMENT, reader.getEventType()); assertEquals(<START_MOD>"values"<END_MOD>, reader.getLocalName()); }
@org.junit.Test public void testReadStringListEndElement() { org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader(<START_MOD>"<values><value>1</value><value>2</value></values>"<END_MOD>); reader.readStrings(); assertEquals(javax.xml.stream.XMLStreamConstants.END_ELEMENT, reader.getEventType()); assertEquals(<START_MOD>"values"<END_MOD>, reader.getLocalName()); }
public java.util.List<java.lang.String> readStrings() { java.util.List<java.lang.String> values = new java.util.ArrayList<>(); java.lang.String startingLocalName = reader.getLocalName(); java.lang.String currentLocalName = startingLocalName; <START_MOD>next(); <END_MOD>while (forward()) { currentLocalName = reader.getLocalName(); if (currentLocalName.equals(startingLocalName)) { <START_MOD>skip<END_MOD>(); } else { <START_MOD>values.add<END_MOD>(<START_MOD>readString()<END_MOD>); } } return values; }
@org.junit.Test public void testReadStringList() { java.util.List<java.lang.String> expected = java.util.Arrays.asList("1", "2"); org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader(<START_MOD>"<values><value>1</value><value>2</value></values>"<END_MOD>); java.util.List<java.lang.String> strings = reader.readStrings(); assertEquals(expected, strings); }
<START_MOD>private static java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> mapVnicProfilesMapping(org.ovirt.engine.api.model.RegistrationVnicProfileMappings model) { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> result = new java.util.ArrayList(model.getRegistrationVnicProfileMappings().size()); model.getRegistrationVnicProfileMappings().forEach(( regMapping) -> { result.add(new org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping(regMapping.getFrom().getNetwork().getName(), regMapping.getFrom().getName(), ((regMapping.getTo()) != null ? new org.ovirt.engine.core.compat.Guid(regMapping.getTo().getId()) : null))); }); return result; }<END_MOD>
<START_MOD>public static void validateRegistrationVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource bs, org.ovirt.engine.api.model.Action action) { if (!(action.isSetRegistrationConfiguration())) { return; } if (!(action.getRegistrationConfiguration().isSetVnicProfileMappings())) { return; } org.ovirt.engine.api.model.RegistrationVnicProfileMappings mappings = action.getRegistrationConfiguration().getVnicProfileMappings(); bs.validateParameters(mappings, "registrationVnicProfileMappings"); for (org.ovirt.engine.api.model.RegistrationVnicProfileMapping mapping : mappings.getRegistrationVnicProfileMappings()) { bs.validateParameters(mapping, "from"); if ((mapping.getFrom().getName()) == null) { bs.validateParameters(mapping, "from.name"); } bs.validateParameters(mapping, "from.network"); if ((mapping.getFrom().getNetwork().getName()) == null) { bs.validateParameters(mapping, "from.network.name"); } if ("".equalsIgnoreCase(mapping.getFrom().getName())) { mapping.getFrom().setName(null); } if ("".equalsIgnoreCase(mapping.getFrom().getNetwork().getName())) { mapping.getFrom().getNetwork().setName(null); } if ((mapping.isSetTo()) && (mapping.getTo().isSetId())) { asGuid(mapping.getTo().getId()); } } }<END_MOD>
<START_MOD>@java.lang.Deprecated <END_MOD>public static void validateVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource br, org.ovirt.engine.api.model.Action action) { if (action.isSetVnicProfileMappings()) { br.validateParameters(action.getVnicProfileMappings(), "vnicProfileMappings"); for (org.ovirt.engine.api.model.VnicProfileMapping mapping : action.getVnicProfileMappings().getVnicProfileMappings()) { if ((mapping.getSourceNetworkName()) == null) { br.validateParameters(mapping, "sourceNetworkName"); } if ((mapping.getSourceNetworkProfileName()) == null) { br.validateParameters(mapping, "sourceNetworkProfileName"); } if ("".equalsIgnoreCase(mapping.getSourceNetworkName())) { mapping.setSourceNetworkName(null); } if ("".equalsIgnoreCase(mapping.getSourceNetworkProfileName())) { mapping.setSourceNetworkProfileName(null); } if ((mapping.isSetTargetVnicProfile()) && (mapping.getTargetVnicProfile().isSetId())) { asGuid(mapping.getTargetVnicProfile().getId()); } } } }
<START_MOD>private java.lang.String formatKernelFeatures(java.util.Map<java.lang.String, java.lang.Object> kernelFeatures) { if (kernelFeatures == null) { return null; } final int vdsmNotAvailable = -1; final java.lang.String concatenatedPairs = kernelFeatures.entrySet().stream().filter(( pair) -> ((pair.getValue()) instanceof java.lang.String) || (((pair.getValue()) instanceof java.lang.Integer) && (!(java.util.Objects.equals(vdsmNotAvailable, pair.getValue()))))).map(( pair) -> java.lang.String.format("%s: %s", pair.getKey(), pair.getValue())).collect(java.util.stream.Collectors.joining(", ")); if (concatenatedPairs.isEmpty()) { return org.ovirt.engine.ui.uicommonweb.models.hosts.HostGeneralModel.constants.notAvailableLabel(); } return concatenatedPairs; }<END_MOD>
<START_MOD>protected java.lang.String getBookContentPath(java.lang.String bookPath, java.lang.String contentPath, java.util.Locale locale) { return (((("/" + (locale.toString())) + "/") + bookPath) + "/html/") + contentPath; }<END_MOD>
<START_MOD>public java.lang.String getDocsSectionTemplate(java.util.Locale locale) { java.lang.String result = ""; try { java.lang.String docsSectionTemplatePath = getDocsSectionTemplatePath(filePath, locale); java.io.File file = new java.io.File(docsSectionTemplatePath); if (((file.exists()) && (file.isFile())) && (file.canRead())) { result = readTemplateFile(docsSectionTemplatePath); } if ((result.isEmpty()) && (!(DEFAULT_US_LOCALE.equals(locale)))) { docsSectionTemplatePath = getDocsSectionTemplatePath(filePath, DEFAULT_US_LOCALE); file = new java.io.File(docsSectionTemplatePath); if (((file.exists()) && (file.isFile())) && (file.canRead())) { result = readTemplateFile(docsSectionTemplatePath); } } if (result.isEmpty()) { docsSectionTemplatePath = getDocsSectionFallbackTemplatePath(filePath); file = new java.io.File(docsSectionTemplatePath); if (((file.exists()) && (file.isFile())) && (file.canRead())) { result = readTemplateFile(docsSectionTemplatePath); } } } catch (java.io.IOException ioe) { org.ovirt.engine.core.branding.BrandingTheme.log.error("Exception loading docs template", ioe); } if (result.isEmpty()) { org.ovirt.engine.core.branding.BrandingTheme.log.warn("code or installation problem -- could not load documentation section for any locale or fallback"); } return result; }<END_MOD>
<START_MOD>protected java.lang.String getBookPdfPath(java.lang.String bookPath, java.util.Locale locale) { return ((((("/" + (locale.toString())) + "/") + bookPath) + "/") + bookPath) + ".pdf"; }<END_MOD>
<START_MOD>protected java.io.File getBookContentFile(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, java.lang.String bookPath, java.lang.String contentPath, java.util.Locale locale) { java.io.File file = null; file = org.ovirt.engine.core.utils.servlet.ServletUtils.makeFileFromSanePath(getBookContentPath(bookPath, contentPath, locale), base); if (!(org.ovirt.engine.core.utils.servlet.ServletUtils.canReadFile(file))) { if (!(DEFAULT_US_LOCALE.equals(locale))) { file = org.ovirt.engine.core.utils.servlet.ServletUtils.makeFileFromSanePath(getBookContentPath(bookPath, contentPath, DEFAULT_US_LOCALE), base); if (!(org.ovirt.engine.core.utils.servlet.ServletUtils.canReadFile(file))) { file = null; } } } return file; }<END_MOD>
<START_MOD>@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { java.lang.String url = request.getPathInfo(); java.util.Locale locale = getLocaleFromRequest(request); java.io.File file = null; java.util.regex.Matcher m = org.ovirt.engine.docs.utils.servlet.DocsServlet.bookHtmlIndexPattern.matcher(url); if (m.matches()) { java.lang.String bookPath = m.group(1); file = getBookIndexFile(request, response, bookPath, locale); } else { m = org.ovirt.engine.docs.utils.servlet.DocsServlet.bookHtmlContentPattern.matcher(url); if (m.matches()) { java.lang.String bookPath = m.group(1); java.lang.String contentPath = m.group(2); file = getBookContentFile(request, response, bookPath, contentPath, locale); } else { m = org.ovirt.engine.docs.utils.servlet.DocsServlet.bookPdfPattern.matcher(url); if (m.matches()) { java.lang.String bookPath = m.group(1); file = getBookPdfFile(request, response, bookPath, locale); } } } if (file == null) { response.sendError(HttpServletResponse.SC_NOT_FOUND); } else { org.ovirt.engine.core.utils.servlet.ServletUtils.sendFile(request, response, file, type); } }<END_MOD>
<START_MOD>protected java.lang.String getBookIndexPath(java.lang.String bookPath, java.util.Locale locale) { return ((("/" + (locale.toString())) + "/") + bookPath) + "/html/index.html"; }<END_MOD>
@java.lang.Override protected void executeVdsBrokerCommand() { <START_MOD>if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.POLL)) { <END_MOD>httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().poll(); }<START_MOD> else if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.POLL2)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().timeBoundPoll2(2, java.util.concurrent.TimeUnit.SECONDS); } else if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.CONFIRM_CONNECTIVITY)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().timeBoundPollConfirmConnectivity(2, java.util.concurrent.TimeUnit.SECONDS); } }<END_MOD>
private org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> invokeSetupNetworksCommand(int timeout) { final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters parameters = createSetupNetworksParameters(timeout); org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> setupNetworksTask = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsBroker().runFutureVdsCommand(FutureVDSCommandType.HostSetupNetworks, parameters); if (parameters.isRollbackOnFailure()) { org.ovirt.engine.core.<START_MOD>common.vdscommands.TimeBoundPollVDSCommandParameters.PollTechnique pt = (org.ovirt.engine.core.common.FeatureSupported.isConfirmConnectivitySupportedByVdsm(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterCompatibilityVersion())) ? CONFIRM_CONNECTIVITY : POLL; org.ovirt.engine.core.bll.network.host.HostPoller<END_MOD> poller = new org.ovirt.engine.core.bll.network.host.<START_MOD>HostPoller(new org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsId(), pt)<END_MOD>); while (!(setupNetworksTask.isDone())) { poller.poll(); } } return setupNetworksTask; }
public boolean check(final org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.<START_MOD>common.vdscommands.TimeBoundPollVDSCommandParameters.PollTechnique pt = (org.ovirt.engine.core.common.FeatureSupported.isPing2SupportedByVdsm(host.getClusterCompatibilityVersion())) ? POLL2 : POLL; org.ovirt.engine.core.<END_MOD>bll.network.host.<START_MOD>HostPoller<END_MOD> poller = new org.ovirt.engine.core.bll.network.host.<START_MOD>HostPoller(new org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters(host.getId(), pt)<END_MOD>); final long startTime = java.lang.System.nanoTime(); while (((java.lang.System.nanoTime()) - startTime) < (org.ovirt.engine.core.bll.host.HostConnectivityChecker.VDSM_RESPONSIVENESS_PERIOD_IN_NANOS)) { if (poller.poll(<START_MOD>)) { org.ovirt.engine.core.bll.host.HostConnectivityChecker.log.info( managed to communicate with VDSM agent on host '{}' with address '{}' ('{}') host.getName(), host.getHostName(), <END_MOD>host.getId()); return true; } } return false; }
<START_MOD>private static org.ovirt.engine.core.common.businessentities.storage.DiskVmElement buildDiskVmElementWithDiskInterfaceFromExternalProvider(java.util.Map<java.lang.String, java.lang.Object> map, org.ovirt.engine.core.common.businessentities.storage.DiskImage image, org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(image.getId(), vmId); java.lang.String diskDevName = ((java.lang.String) (map.get(VdsProperties.DISK_TARGET_DEV_NAME))); diskDevName = ((diskDevName == null) || ((diskDevName.length()) < 3)) ? "" : diskDevName.substring(0, 2); switch (diskDevName) { case "sd" : dve.setDiskInterface(DiskInterface.VirtIO_SCSI); break; case "hd" : dve.setDiskInterface(DiskInterface.IDE); break; case "vd" : default : dve.setDiskInterface(DiskInterface.VirtIO); break; } return dve; }<END_MOD>
<START_MOD>public java.lang.String generateEngineXml(org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String cpuId, java.lang.String emulatedMachine) { vm.setCpuName(cpuId); vm.setEmulatedMachine(emulatedMachine); return new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(vm, vmInfoBuildUtils).buildCreateVm(); }<END_MOD>
private long getTransferSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage image, org.ovirt.engine.core.compat.Guid domainId) { if ((TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromVdsm = imagesHandler.getVolumeInfoFromVdsm(image.getStoragePoolId(), domainId, image.getId(), image.getImageId()); return imageInfoFromVdsm.getApparentSizeInBytes(); } else { <START_MOD>if ((TransferImageCommand.getParameters().getTransferSize()) != 0) { <END_MOD>return TransferImageCommand.getParameters().getTransferSize()<START_MOD>; } else { boolean isOnBlock = TransferImageCommand.getDiskImage().getStorageTypes().get(0).isBlockDomain(); return isOnBlock<END_MOD> ? TransferImageCommand.<START_MOD>getDiskImage().getActualSizeInBytes<END_MOD>() : TransferImageCommand.getDiskImage().<START_MOD>getSize(); } } }<END_MOD>
@java.lang.Override protected void addVmToDb() { super.addVmToDb(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getOrigin()) == (org.ovirt.engine.core.common.businessentities.OriginType.KVM)) { importUtils.updateGraphicsDevices(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStoragePool().getCompatibilityVersion()); if (org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().isImportAsNewEntity()) { for (org.ovirt.engine.core.common.businessentities.VmDevice device : org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values()) { device.getId().setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()); } } vmDeviceDao.saveAll(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values()); <START_MOD>if (!(vmDeviceUtils.hasCdDevice(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()))) { vmDeviceUtils.addCdDevice(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getVirtioIsoName()); } } }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult providerTypeIsNetwork() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_TYPE_NOT_NETWORK).when((!(isNetworking(provider.getType())))); }<END_MOD>
<START_MOD>@org.junit.Test public void openstackIsValidNetworkProviderType() { when(provider.getType()).thenReturn(ProviderType.OPENSTACK_NETWORK); assertThat(validator.providerTypeIsNetwork(), isValid()); }<END_MOD>
@org.junit.Test public void <START_MOD>invalidNetworkProviderType<END_MOD>() { when(provider.getType()).thenReturn(org.ovirt.engine.core.bll.provider.NetworkProviderValidatorTest.NON_NETWORK_PROVIDER_TYPE); assertThat(validator.<START_MOD>providerTypeIsNetwork<END_MOD>(), failsWith(EngineMessage.<START_MOD>ACTION_TYPE_FAILED_PROVIDER_TYPE_NOT_NETWORK<END_MOD>)); }
<START_MOD>java.lang.String ACTION_TYPE_FAILED_PROVIDER_TYPE_NOT_NETWORK();<END_MOD>
<START_MOD>@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { if (org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.isInternalExecution()) { return null; } return networkLocking.getNetworkProviderLock(getProviderId()); }<END_MOD>
@java.lang.Override protected void executeCommand() { <START_MOD>org.ovirt.engine.core.common.action.InternalImportExternalNetworkParameters parameters<END_MOD> = <START_MOD>new<END_MOD> org.ovirt.engine.core.common.<START_MOD>action.InternalImportExternalNetworkParameters(getProvider().getName(), getNetwork(), org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().getDataCenterId(), org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().isPublicUse(), org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().isAttachToAllClusters()); org.ovirt.engine.core.common.action.ActionReturnValue returnValue<END_MOD> = <START_MOD>runInternalAction(ActionType.InternalImportExternalNetwork, parameters<END_MOD>); if (!(<START_MOD>returnValue<END_MOD>.getSucceeded())) { propagateFailure(<START_MOD>runInternalAction(ActionType.InternalImportExternalNetwork, parameters)<END_MOD>); return; } <START_MOD>org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.setSucceeded(true)<END_MOD>; }
<START_MOD>public void setFragmentParameters(java.util.Map<java.lang.String, java.lang.String> params, boolean newItem) { currentEntityParams.clear(); currentEntityParams.putAll(params); java.util.Set<org.ovirt.engine.ui.common.presenter.FragmentParams> paramNames = new java.util.HashSet<>(); paramNames.addAll(org.ovirt.engine.ui.common.presenter.FragmentParams.getParams(currentEntityParams.keySet())); com.gwtplatform.mvp.shared.proxy.PlaceRequest request = new com.gwtplatform.mvp.shared.proxy.PlaceRequest.Builder().nameToken(getCurrentPlaceRequest().getNameToken()).with(currentEntityParams).build(); if (newItem) { com.google.gwt.user.client.History.newItem(buildHistoryToken(request), false); } else { com.google.gwt.user.client.History.replaceItem(buildHistoryToken(request), false); } }<END_MOD>
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.String> event) { <START_MOD>if (!(event.getValue().contains(WebAdminApplicationPlaces.SUB_TAB_PREFIX))) { currentEntityParams.clear(); } <END_MOD>super.onValueChange(event); if (clientAgentType.isFirefox()) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { com.google.gwt.dom.client.Node favicon = com.google.gwt.user.client.DOM.getElementById("id-link-favicon"); if (favicon != null) { com.google.gwt.dom.client.Node parent = favicon.getParentNode(); favicon.removeFromParent(); parent.appendChild(favicon); } }); } }
<START_MOD>protected java.util.Map<java.lang.String, java.lang.String> getFragmentParamsFromEntity(T item) { java.util.Map<java.lang.String, java.lang.String> result = new java.util.HashMap<>(); result.put(FragmentParams.NAME.getName(), ((org.ovirt.engine.core.common.businessentities.Nameable) (item)).getName()); return result; }<END_MOD>
public void applySearchString(java.lang.String searchString) { if ((modelProvider.getModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?, ? extends org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>> listModel = modelProvider.getModel(); if ((org.ovirt.engine.core.compat.StringHelper.isNotNullOrEmpty(searchString)) && (searchString.startsWith(listModel.getDefaultSearchString()))) { <START_MOD>placeManager.setFragmentParameters(getFragmentParams(searchString), false); <END_MOD>listModel.setSearchString(searchString); listModel.getSearchCommand().execute(); } } }
<START_MOD>private java.util.Map<<END_MOD>java.lang.<START_MOD>String,<END_MOD> <START_MOD>java.lang.String><END_MOD> <START_MOD>getFragmentParams(java.lang.String<END_MOD> <START_MOD>searchString<END_MOD>) { <START_MOD>java.util.Map<java.lang.String, java.lang.String> result = new java.util.HashMap<>(); <END_MOD>if (<START_MOD>searchString.startsWith<END_MOD>(<START_MOD>modelProvider.getModel<END_MOD>()<START_MOD>.getDefaultSearchString<END_MOD>())) { <START_MOD>searchString = searchString<END_MOD>.<START_MOD>substring<END_MOD>(<START_MOD>modelProvider.getModel().getDefaultSearchString().length<END_MOD>()); } <START_MOD>result<END_MOD>.<START_MOD>put<END_MOD>(<START_MOD>FragmentParams<END_MOD>.<START_MOD>SEARCH<END_MOD>.<START_MOD>getName<END_MOD>()<START_MOD>, searchString<END_MOD>); <START_MOD>return result;<END_MOD> }
<START_MOD>private static boolean canExecute(org.ovirt.engine.core.common.businessentities.BusinessEntityWithStatus<?, ?> entity, java.lang.Class type, org.ovirt.engine.core.common.action.ActionType action) { java.util.Set<org.ovirt.engine.core.common.action.ActionType> actions = org.ovirt.engine.core.common.ActionUtils._matrix.get(type).get(entity.getStatus()); if ((actions != null) && (actions.contains(action))) { return false; } return true; }<END_MOD>
<START_MOD>default <END_MOD>void onRollback()<START_MOD> { }<END_MOD>
<START_MOD>default <END_MOD>void onSuccess()<START_MOD> { }<END_MOD>
<START_MOD>@org.ovirt.api.metamodel.annotations.In java.lang.Boolean restoreLease();<END_MOD>
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(snapshot().id()); optional(restoreMemory<START_MOD>()); optional(restoreLease<END_MOD>()); optional(disks()[COLLECTION].id()); optional(disks()[COLLECTION].imageId()); optional(disks()[COLLECTION].snapshot().id()); }
public void persistCommand(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity, org.ovirt.engine.core.bll.context.CommandContext cmdContext) { initChildHierarchy(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getId())) { return; } persistCommand(cmdEntity); if (cmdContext != null) { contextsCache.<START_MOD>get().<END_MOD>put(cmdEntity.getId(), cmdContext); } }
public boolean hasCommandEntitiesWithRootCommandId(org.ovirt.engine.core.compat.Guid rootCommandId) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.<START_MOD>get().<END_MOD>keySet()) { cmdEntity = commandsCache<START_MOD>.get()<END_MOD>.get(cmdId); if ((((cmdEntity != null) && (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getRootCommandId())))) && (!(cmdEntity.getRootCommandId().equals(cmdId)))) && (cmdEntity.getRootCommandId().equals(rootCommandId))) { return true; } } return false; }
public void removeCommand(org.ovirt.engine.core.compat.Guid commandId) { commandsCache.<START_MOD>get().<END_MOD>remove(commandId); contextsCache<START_MOD>.get()<END_MOD>.remove(commandId); updateCmdHierarchy(commandId); }
public java.util.List<org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity> getCommandAssociatedEntities(org.ovirt.engine.core.compat.Guid cmdId) { return commandsCache.<START_MOD>get().<END_MOD>getCommandAssociatedEntities(cmdId); }
public java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> getCommands(boolean onlyWithCallbackEnabled) { java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> cmdEntities = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.<START_MOD>get().<END_MOD>keySet()) { cmdEntity = commandsCache<START_MOD>.get()<END_MOD>.get(cmdId); if ((!onlyWithCallbackEnabled) || (commandsCache<START_MOD>.get()<END_MOD>.get(cmdId).isCallbackEnabled())) { cmdEntities.add(cmdEntity); } } return cmdEntities; }
public java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> getChildCmdsByParentCmdId(org.ovirt.engine.core.compat.Guid cmdId) { return commandsCache.<START_MOD>get().<END_MOD>getChildCmdsByParentCmdId(cmdId); }
public void updateCommandExecuted(org.ovirt.engine.core.compat.Guid commandId) { commandsCache.<START_MOD>get().<END_MOD>updateCommandExecuted(commandId); }
public java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsByEntityId(org.ovirt.engine.core.compat.Guid entityId) { return commandsCache.<START_MOD>get().<END_MOD>getCommandIdsByEntityId(entityId); }
public void updateCallbackNotified(final org.ovirt.engine.core.compat.Guid commandId) { commandsCache.<START_MOD>get().<END_MOD>updateCallbackNotified(commandId); }
public void persistCommand(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getId())) { return; } org.ovirt.engine.core.common.businessentities.CommandEntity existingCmdEntity = commandsCache.get(<START_MOD>).get(<END_MOD>cmdEntity.getId()); if (existingCmdEntity != null) { cmdEntity.setExecuted(existingCmdEntity.isExecuted()); cmdEntity.setCallbackNotified(existingCmdEntity.isCallbackNotified()); } commandsCache.<START_MOD>get().<END_MOD>put(cmdEntity); if ((cmdEntity.isCallbackEnabled()) || (((!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getParentCommandId()))) && ((commandsCache.get(<START_MOD>).get(<END_MOD>cmdEntity.getParentCommandId())) != null)) && (commandsCache.get(<START_MOD>).get(<END_MOD>cmdEntity.getParentCommandId()).isCallbackEnabled()))) { buildCmdHierarchy(cmdEntity); if (!(cmdEntity.isCallbackNotified())) { addToCallbackMap(cmdEntity); } } }
public org.ovirt.engine.core.bll.CommandBase<?> retrieveCommand(org.ovirt.engine.core.compat.Guid commandId) { return retrieveCommand(commandsCache.get(<START_MOD>).get(<END_MOD>commandId), retrieveCommandContext(commandId)); }
public void persistCommandAssociatedEntities(java.util.Collection<org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity> cmdAssociatedEntities) { commandsCache.<START_MOD>get().<END_MOD>persistCommandAssociatedEntities(cmdAssociatedEntities); }
public org.ovirt.engine.core.bll.context.CommandContext retrieveCommandContext(org.ovirt.engine.core.compat.Guid cmdId) { return contextsCache.get(<START_MOD>).get(<END_MOD>cmdId); }
public void updateCommandData(org.ovirt.engine.core.compat.Guid commandId, java.util.Map<java.lang.String, java.io.Serializable> data) { commandsCache.<START_MOD>get().<END_MOD>updateCommandData(commandId, data); }
public org.ovirt.engine.core.common.businessentities.CommandEntity getCommandEntity(org.ovirt.engine.core.compat.Guid commandId) { return org.ovirt.engine.core.compat.Guid.isNullOrEmpty(commandId) ? null : commandsCache.get(<START_MOD>).get(<END_MOD>commandId); }
public java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsBySessionSeqId(long engineSessionSeqId) { java.util.List<org.ovirt.engine.core.compat.Guid> cmdIds = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.<START_MOD>get().<END_MOD>keySet()) { cmdEntity = commandsCache.get(<START_MOD>).get(<END_MOD>cmdId); if (((cmdEntity != null) && ((cmdEntity.getEngineSessionSeqId()) != (org.ovirt.engine.core.bll.aaa.SsoSessionUtils.EMPTY_SESSION_SEQ_ID))) && ((cmdEntity.getEngineSessionSeqId()) == engineSessionSeqId)) { cmdIds.add(cmdId); } } return cmdIds; }
<START_MOD>public<END_MOD> void handleUnmanagedCommands() { java.util.List<org.ovirt.engine.core.common.businessentities.AsyncTask> asyncTasks = asyncTaskDao.getAll(); java.util.Set<org.ovirt.engine.core.compat.Guid> asyncTaskManagerManagedCommands = asyncTasks.stream().filter(( x) -> (x.getVdsmTaskId()) != null).map(( x) -> x.getRootCommandId()).collect(java.util.stream.Collectors.toSet()); asyncTaskManagerManagedCommands.addAll(asyncTasks.stream().filter(( x) -> (x.getVdsmTaskId()) != null).map(( x) -> x.getCommandId()).collect(java.util.stream.Collectors.toSet())); getCommands(false).stream().filter(( x) -> !(x.isCallbackEnabled())).filter(( x) -> (x.getCommandStatus()) == CommandStatus.ACTIVE).filter(( x) -> !(asyncTaskManagerManagedCommands.contains(x.getId()))).forEach(( x) -> commandsCache.<START_MOD>get().<END_MOD>updateCommandStatus(x.getId(), CommandStatus.ENDED_WITH_FAILURE)); getCommands(false).stream().filter(( x) -> x.isCallbackEnabled()).filter(( x) -> !(x.isCallbackNotified())).filter(( x) -> x.getCommandStatus().isDuringExecution()).filter(( x) -> !(asyncTaskManagerManagedCommands.contains(x.getId()))).map(( x) -> retrieveCommand(x.getId())).filter(java.util.Objects::nonNull).forEach(CommandBase::reacquireLocks); }
public void removeAllCommandsBeforeDate(final org.ovirt.engine.core.compat.DateTime cutoff) { commandsCache.<START_MOD>get().<END_MOD>removeAllCommandsBeforeDate(cutoff); synchronized(LOCK) { childHierarchyInitialized = false; } }
public org.ovirt.engine.core.compat.CommandStatus getCommandStatus(final org.ovirt.engine.core.compat.Guid commandId) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = commandsCache.get(<START_MOD>).get(<END_MOD>commandId); if (cmdEntity != null) { return cmdEntity.getCommandStatus(); } return org.ovirt.engine.core.compat.CommandStatus.UNKNOWN; }
public void updateCommandStatus(final org.ovirt.engine.core.compat.Guid commandId, final org.ovirt.engine.core.compat.CommandStatus status) { commandsCache.<START_MOD>get().<END_MOD>updateCommandStatus(commandId, status); }
private java.lang.String <START_MOD>renderGibibyteSize<END_MOD>(long size) { long sizeInGB = ((unit) == (org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit.GiB)) ? size : org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.GiB).longValue(); return org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.messages.<START_MOD>gibibytes<END_MOD>((sizeInGB >= 1 ? java.lang.String.valueOf(sizeInGB) :   1 }
protected boolean isLunsAlreadyInUse(java.util.Set<java.lang.String> lunIds) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAll(); java.<START_MOD>lang.StringBuilder lunsUsedBySDs = new java.lang.StringBuilder(); java.lang.StringBuilder lunsUsedByDisks = new java.lang.StringBuilder(); lunsFromDb.stream().filter(( lun) -> lunIds.contains(lun.getLUNId())).forEach(( lun) -> { if ((lun.getStorageDomainId()) != null) { addFormattedLunId(lunsUsedBySDs, lun, <END_MOD>org.ovirt.engine.core.common.businessentities.storage.LUNs<START_MOD>::getStorageDomainName); } if ((lun.getDiskId()) != null) { addFormattedLunId(lunsUsedByDisks, lun, <END_MOD>org.ovirt.engine.core.common.businessentities.storage.LUNs<START_MOD>::getDiskAlias); } });<END_MOD> if (<START_MOD>(lunsUsedBySDs.length()) != 0) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_LUNS_ALREADY_PART_OF_STORAGE_DOMAINS); org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.addValidationMessageVariable("lunIds", lunsUsedBySDs.toString()); }<END_MOD> if ((<START_MOD>lunsUsedByDisks.length()) != 0<END_MOD>) { addValidationMessage(EngineMessage.<START_MOD>ACTION_TYPE_FAILED_LUNS_ALREADY_USED_BY_DISKS); org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.<END_MOD>addValidationMessageVariable("lunIds", <START_MOD>lunsUsedByDisks.toString());<END_MOD> } return (<START_MOD>(lunsUsedBySDs.length()) != 0<END_MOD>) || (<START_MOD>(lunsUsedByDisks.length()) != 0); }<END_MOD>
protected <START_MOD>void addFormattedLunId(<END_MOD>java.lang.<START_MOD>StringBuilder<END_MOD> <START_MOD>sb, <END_MOD>org.ovirt.engine.core.common.businessentities.storage.LUNs lun, java.<START_MOD>util.function.Function<org.ovirt.engine.core.common.businessentities.storage.LUNs, java.<END_MOD>lang.String<START_MOD>><END_MOD> <START_MOD>nameGetter<END_MOD>) { <START_MOD>if<END_MOD> <START_MOD>((sb.length()) != 0) { sb.append(   } sb.append(<END_MOD>java.lang.String.format( (%2$s) lun.getLUNId(), <START_MOD>nameGetter.apply(lun))<END_MOD>); }
@org.junit.Test public void validateVmShareableDisk() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); <START_MOD>org.ovirt.engine.core.bll.storage.lsm.ValidateTestUtils.runAndAssertValidateFailure<END_MOD>(command<START_MOD>,<END_MOD> EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED); }
@org.junit.Test public void validateInvalidDestinationDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(dstStorageId); dstStorageDomain.setStorageDomainType(StorageDomainType.ISO); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }
@org.junit.Test public void validateVmHavingDeviceSnapshotsPluggedToOtherVmsThatAreNotDown() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN)).when(diskValidator).isDiskPluggedToAnyNonDownVm(anyBoolean()); <START_MOD>org.ovirt.engine.core.bll.storage.lsm.ValidateTestUtils.runAndAssertValidateFailure<END_MOD>(command<START_MOD>,<END_MOD> EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN); }
@java.lang.Override protected boolean validate() { boolean validate = <START_MOD>(<END_MOD>super.validate(<START_MOD>)) && (validate(new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getStorageDomain()).isNotBackupDomain())<END_MOD>); if (!validate) { auditLogDirector.log(this, AuditLogType.USER_MOVED_DISK_FINISHED_FAILURE); <START_MOD>return false; <END_MOD>} if (!(getVm().isRunningAndQualifyForDisksMigration())) { return failValidation(EngineMessage.CANNOT_LIVE_MIGRATE_VM_SHOULD_BE_IN_PAUSED_OR_UP_STATUS); } setStoragePoolId(getVm().getStoragePoolId()); if (!(validateDestDomainsSpaceRequirements())) { return false; } org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getReturnValue().setValid(((isDiskNotShareable(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageId())))); if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getReturnValue().isValid())) { return false; } if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.setAndValidateDiskProfiles())) { return false; } return (validateCreateAllSnapshotsFromVmCommand()) && validate; }
@org.junit.Test public void validateCantLiveMigrateToBackupDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(srcStorageId); dstStorageDomain.setBackup(true); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_VM_DISKS_ON_BACKUP_STORAGE); }
@org.junit.Test public void validateInvalidDestinationDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(dstStorageId); dstStorageDomain.setStatus(StorageDomainStatus.Active); dstStorageDomain.setStorageDomainType(StorageDomainType.ISO); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); <START_MOD>org.ovirt.engine.core.bll.storage.lsm.ValidateTestUtils.runAndAssertValidateFailure<END_MOD>(command<START_MOD>,<END_MOD> EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }
@org.junit.Test public void validateVmShareableDisk() { initStorageDomain(srcStorageId); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED); }
<START_MOD>@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getBroker().getVdsStats(new GetStatsVDSCommandCallback()); }<END_MOD>
<START_MOD>@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { continueRefreshVdsStats(((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result")))); refreshVdsRunTimeInfo(true); } catch (java.lang.Throwable t) { onFailure(t); } }<END_MOD>
<START_MOD>@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetHardwareInfoAsyncVDSCommand.getBroker().getHardwareInfo(new GetHardwareInfoVDSCommandCallback()); }<END_MOD>
@java.lang.Override protected void executeVdsBrokerCommand()<START_MOD> { try<END_MOD> { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getBroker().getVdsStats(new GetStatsVDSCommandCallback()); }<START_MOD> catch (java.lang.Throwable t) { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getParameters().getCallback().onFailure(t); } }<END_MOD>
<START_MOD>@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesAsyncVDSCommand.getBroker().getCapabilities(new GetCapabilitiesVDSCommandCallback()); }<END_MOD>
@java.lang.<START_MOD>SuppressWarnings("incomplete-switch")<END_MOD> <START_MOD>private<END_MOD> void <START_MOD>executeNextOperation<END_MOD>() { <START_MOD>switch (<END_MOD>org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.<START_MOD>getParameters<END_MOD>().<START_MOD>getPhase<END_MOD>()<START_MOD>) { case CONVERT :<END_MOD> convert(); <START_MOD>break<END_MOD>; }<START_MOD> }<END_MOD>
protected void convert() { org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.<START_MOD>freeLock(); runInternalAction(ActionType.ConvertVm, buildConvertVmParameters<END_MOD>()); }
@java.lang.Override protected void convert() { boolean useVirtV2V = (org.ovirt.engine.core.bll.exportimport.ImportVmFromOvaCommand.getParameters().getVm().getOrigin()) != (org.ovirt.engine.core.common.businessentities.OriginType.OVIRT); if (useVirtV2V) { org.ovirt.engine.core.bll.exportimport.ImportVmFromOvaCommand.<START_MOD>freeLock(); runInternalAction(ActionType.ConvertOva, buildConvertOvaParameters<END_MOD>()); } else { <START_MOD>runInternalAction<END_MOD>(ActionType.ExtractOva, buildExtractOvaParameters()); } }
<START_MOD>@java.lang.Override<END_MOD> <START_MOD>public<END_MOD> <START_MOD>boolean performNextOperation<END_MOD>(<START_MOD>int completedChildCount<END_MOD>) { <START_MOD>switch<END_MOD> (org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.<START_MOD>getParameters<END_MOD>()<START_MOD>.getPhase())<END_MOD> <START_MOD>{ case CREATE_DISKS :<END_MOD> org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.<START_MOD>getParameters<END_MOD>()<START_MOD>.setPhase(Phase.CONVERT<END_MOD>); <START_MOD>break; case CONVERT : return false; default : <END_MOD>}<START_MOD> org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.persistCommandIfNeeded(); executeNextOperation(); return true; }<END_MOD>
protected org.ovirt.engine.core.common.action.AddDiskParameters buildAddDiskParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { image.setDiskAlias(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.renameDiskAlias(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getOrigin(), image.getDiskAlias())); org.ovirt.engine.core.common.action.AddDiskParameters diskParameters = new org.ovirt.engine.core.common.action.AddDiskParameters(image.getDiskVmElementForVm(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()), image); diskParameters.setStorageDomainId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStorageDomainId()); diskParameters.setParentCommand(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getActionType()); diskParameters.setParentParameters(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters()); diskParameters.setShouldRemainIllegalOnFailedExecution(true); diskParameters.setStorageDomainId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getDestDomainId()); <START_MOD>diskParameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); <END_MOD>return diskParameters; }
<START_MOD>protected org.ovirt.engine.core.bll.context.CommandContext createConversionStepContext(org.ovirt.engine.core.common.job.StepEnum step) { org.ovirt.engine.core.bll.context.CommandContext commandCtx = null; try { java.util.Map<java.lang.String, java.lang.String> values = java.util.Collections.singletonMap(VdcObjectType.VM.name().toLowerCase(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmName()); org.ovirt.engine.core.common.job.Step removeVmStep = executionHandler.addSubStep(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getExecutionContext(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getExecutionContext().getJob().getStep(StepEnum.EXECUTING), step, org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveStepMessage(step, values)); org.ovirt.engine.core.bll.job.ExecutionContext ctx = new org.ovirt.engine.core.bll.job.ExecutionContext(); ctx.setStep(removeVmStep); ctx.setMonitored(true); commandCtx = org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.cloneContext().withoutCompensationContext().withExecutionContext(ctx).withoutLock(); } catch (java.lang.RuntimeException e) { log.error("Failed to create command context of converting VM '{}': {}", org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmName(), e.getMessage()); log.debug("Exception", e); } return commandCtx; }<END_MOD>
<START_MOD>@java.lang.Override public boolean isRequiredNetworkAffected(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2) { final org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel logicalNetworkModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel) (op1)); return ((logicalNetworkModel.getNetwork().getCluster()) != null) && (logicalNetworkModel.getNetwork().getCluster().isRequired()); }<END_MOD>
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.<START_MOD>DiskImage> imagesByGuid = new java.util.ArrayList<>(); if ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks()) != null) { for (org.ovirt.engine.core.compat.Guid guid : org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = diskImageDao.getSnapshotById(guid); imagesByGuid.add(image); } imagesToPreview = imagesByGuid; } else { imagesToPreview = diskImageDao.getAllSnapshotsForVmSnapshot(getDstSnapshot().getId()); } java.util.List<org.ovirt.engine.core.common.businessentities.storage.<END_MOD>CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(imagesToPreview, org.ovirt.engine.core.bll.snapshots.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.snapshots.ONLY_SNAPABLE); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }
@java.lang.Override public javax.ws.rs.core.Response previewSnapshot(org.ovirt.engine.api.model.Action action) { validateParameters(action, "snapshot.id"); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(guid, asGuid(action.getSnapshot().getId())); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { <START_MOD>java.util.Set<org.ovirt.engine.core.compat.Guid> disksGuid = new java.util.HashSet<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = getParent().mapDisks(action.getDisks()); if (disks != null) { disksGuid = disks.stream().map(DiskImage::getImageId).collect(java.util.stream.Collectors.toSet()); } <END_MOD>tryBackParams.setDisks(<START_MOD>disksGuid<END_MOD>); } javax.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action); return response; }
private void runTryBackToAllSnapshotsOfVm(final org.ovirt.engine.ui.uicommonweb.models.Model model, org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot, boolean memory, java.util.<START_MOD>Set<END_MOD><org.ovirt.engine.core.<START_MOD>compat.Guid> disks) { if (model != null) { model.startProgress(); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.TryBackToAllSnapshotsOfVm, new org.ovirt.engine.core.<END_MOD>common.<START_MOD>action.TryBackToAllSnapshotsOfVmParameters(vm.getId(), snapshot.getId(), memory,<END_MOD> disks)<START_MOD>, ( result) -><END_MOD> { if (model != null) { model.<START_MOD>stopProgress(); } if (<END_MOD>result.getReturnValue().getSucceeded()) { cancel(); } }); }
private void onCustomPreview() { org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel previewSnapshotModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel) (getWindow())); org.ovirt.engine.core.common.businessentities.Snapshot snapshot = previewSnapshotModel.getSnapshotModel().getEntity(); boolean memory = java.lang.Boolean.TRUE.equals(previewSnapshotModel.getSnapshotModel().getMemory().getEntity()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = previewSnapshotModel.getSelectedDisks(); <START_MOD>java.util.Set<org.ovirt.engine.core.compat.Guid> diskImages = disks.stream().map(DiskImage::getImageId).collect(java.util.stream.Collectors.toSet()); <END_MOD>runTryBackToAllSnapshotsOfVm(previewSnapshotModel, vm, snapshot, memory, <START_MOD>diskImages<END_MOD>); }
private void onPreview() { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSelectedItem(); if (snapshot == null) { cancel(); return; } org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel) (getWindow())); boolean memory = false; java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks<START_MOD>; java.util.Set<org.ovirt.engine.core.compat.Guid> diskImages = new java.util.HashSet<>(); if (snapshotModel.isShowPartialSnapshotWarning()) { switch (snapshotModel.getPartialPreviewSnapshotOptions().getSelectedItem()) { case preserveActiveDisks : disks = snapshotModel.getDisks(); disks.addAll(org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel.imagesSubtract(getVmDisks(), disks)); diskImages = disks.stream().map(DiskImage::getImageId).collect(java.util.stream.Collectors.toSet()); break; case excludeActiveDisks : break; case openCustomPreviewDialog : setWindow(<END_MOD>null<START_MOD>); getCustomPreviewCommand().execute(); return; } }<END_MOD> if (snapshotModel.isShowMemorySnapshotWarning()) { memory = snapshotModel.getMemory().getEntity(); } runTryBackToAllSnapshotsOfVm(snapshotModel, vm, snapshot, memory, <START_MOD>diskImages); }<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response restore(org.ovirt.engine.api.model.Action action) { action.setAsync(false); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(parentId, guid); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { <START_MOD>java.util.Set<org.ovirt.engine.core.compat.Guid> disksGuid = new java.util.HashSet<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = collection.mapDisks(action.getDisks()); if (disks != null) { disksGuid = disks.stream().map(DiskImage::getImageId).collect(java.util.stream.Collectors.toSet()); } <END_MOD>tryBackParams.setDisks(<START_MOD>disksGuid<END_MOD>); } tryBackParams.setCorrelationId(org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESTORE_SNAPSHOT_CORRELATION_ID); javax.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action, PollingType.JOB); if ((response.getStatus()) == (Response.Status.OK.getStatusCode())) { org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters restoreParams = new org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters(parentId, org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT); restoreParams.setCorrelationId(org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESTORE_SNAPSHOT_CORRELATION_ID); javax.ws.rs.core.Response response2 = doAction(ActionType.RestoreAllSnapshots, restoreParams, action); if ((response2.getStatus()) != (Response.Status.OK.getStatusCode())) { return response2; } } return response; }
<START_MOD>private boolean updateLeaseInfo(org.ovirt.engine.core.compat.Guid snapshotLeaseDomainId) { if (snapshotLeaseDomainId == null) { vmStaticDao.updateVmLeaseInfo(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), null); return true; } org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = null; try { retVal = runVdsCommand(VDSCommandType.GetVmLeaseInfo, new org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getStoragePoolId(), snapshotLeaseDomainId, org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Failure in getting lease info for VM {}, message: {}", org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), e.getMessage()); } if ((retVal == null) || (!(retVal.getSucceeded()))) { log.error("Failed to get info on the lease of VM {}", org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId()); return false; } vmStaticDao.updateVmLeaseInfo(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), ((java.util.Map<java.lang.String, java.lang.String>) (retVal.getReturnValue()))); return true; }<END_MOD>
<START_MOD>private boolean isRemoveLeaseNeeded(org.ovirt.engine.core.compat.Guid srcLeaseDomainId, org.ovirt.engine.core.compat.Guid dstLeaseDomainId) { if ((org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction()) == (org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.UNDO)) { return (((srcLeaseDomainId != null) && (dstLeaseDomainId != null)) && (!(srcLeaseDomainId.equals(dstLeaseDomainId)))) || ((srcLeaseDomainId == null) && (dstLeaseDomainId != null)); } else if ((org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction()) == (org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT)) { return (((srcLeaseDomainId != null) && (dstLeaseDomainId != null)) && (!(srcLeaseDomainId.equals(dstLeaseDomainId)))) || ((srcLeaseDomainId != null) && (dstLeaseDomainId == null)); } return false; }<END_MOD>
<START_MOD>private boolean isLeaseInfoUpdateNeeded(org.ovirt.engine.core.compat.Guid srcLeaseDomainId, org.ovirt.engine.core.compat.Guid dstLeaseDomainId) { return ((org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction()) == (org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.UNDO)) && (!((srcLeaseDomainId == null) && (dstLeaseDomainId == null))); }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction determineLeaseAction(org.ovirt.engine.core.compat.Guid srcLeaseDomainId, org.ovirt.engine.core.compat.Guid dstLeaseDomainId) { if ((srcLeaseDomainId != null) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getStaticData().getLeaseInfo()) != null)) { if (dstLeaseDomainId != null) { return srcLeaseDomainId.equals(dstLeaseDomainId) ? org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.UPDATE_LEASE_INFO : org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.CREATE_NEW_LEASE; } } return dstLeaseDomainId != null ? org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.CREATE_NEW_LEASE : org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.DO_NOTHING; }<END_MOD>
<START_MOD>private boolean isLeaseInfoUpdateNeeded() { return ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.CREATE_NEW_LEASE)) || ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.UPDATE_LEASE_INFO)); }<END_MOD>
<START_MOD>public static org.ovirt.engine.core.compat.Guid fetchLeaseDomainId(java.lang.String ovfData) { int beginIndexOfEntityLeaseDomainId = ovfData.indexOf(org.ovirt.engine.core.utils.OvfUtils.ENTITY_LEASE_DOMAIN_ID); if (beginIndexOfEntityLeaseDomainId != (-1)) { int endOfIndexOfEntityLeaseDomainId = ovfData.indexOf(org.ovirt.engine.core.utils.OvfUtils.END_ENTITY_LEASE_DOMAIN_ID, beginIndexOfEntityLeaseDomainId); return org.ovirt.engine.core.compat.Guid.createGuidFromString(ovfData.substring((beginIndexOfEntityLeaseDomainId + (org.ovirt.engine.core.utils.OvfUtils.ENTITY_LEASE_DOMAIN_ID.length())), endOfIndexOfEntityLeaseDomainId)); } return null; }<END_MOD>
protected boolean validateSourceStorageDomain() { org.ovirt.engine.core.compat.Guid sourceDomainId = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(); if ((sourceDomainId == null) || (Guid.Empty.equals(sourceDomainId))) { sourceDomainId = getImage().getStorageIds().get(0); org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().setSourceDomainId(sourceDomainId); } <START_MOD>else { if (!(getImage().getStorageIds().contains(sourceDomainId))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_IS_NOT_VALID); } } <END_MOD>org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(storageDomainDao.getForStoragePool(sourceDomainId, getImage().getStoragePoolId())); return validate(validator.isDomainExistAndActive()); }
protected boolean validateDestStorage() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain()); if ((!(validate(validator.isDomainExistAndActive()))) || (!(validate(validator.domainIsValidDestination())))) { return false; } boolean moveOrCopy = (isMoveOperation()) || (isCopyOperation()); if ((moveOrCopy && (getImage().isShareable())) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLUSTERFS))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS, java.lang.String.format( %2$s "diskAlias", getImage().getDiskAlias())); } <START_MOD>if (isMoveOperation()) { if (getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId())) { <END_MOD>return <START_MOD>failValidation(EngineMessage.ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_IS_NOT_VALID); } } return <END_MOD>true; }
<START_MOD>@org.junit.Test public void validateSourceDomainValid() { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); initializeCommand(disk, VmEntityType.VM); initSrcStorageDomain(); initDestStorageDomain(StorageType.NFS); disk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(org.ovirt.engine.core.compat.Guid.newGuid()))); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_IS_NOT_VALID); }<END_MOD>
<START_MOD>java.lang.String ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_IS_NOT_VALID();<END_MOD>
<START_MOD>java.lang.String ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_IS_NOT_VALID();<END_MOD>
<START_MOD>@org.junit.Test public void validateDestinationDomainValid() { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); initializeCommand(disk, VmEntityType.VM); disk.getStorageIds().add(destStorageId); initSrcStorageDomain(); initDestStorageDomain(StorageType.NFS); command.getParameters().setStorageDomainId(destStorageId); command.setStorageDomainId(destStorageId); command.getStorageDomain().setId(destStorageId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_IS_NOT_VALID); }<END_MOD>
@java.lang.Override public void runningSucceded() { try { queryDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugPassthroughNics(); <START_MOD>updateExternalNics(); <END_MOD>} finally { super.runningSucceded(); } }
public static java.lang.String crypt(java.lang.String password) { <START_MOD>byte[] r<END_MOD> = new byte[<START_MOD>org.ovirt.engine.core.uutils.crypto.CryptMD5.SALT_MAX_LENGTH]; char[] salt<END_MOD> = new char[r.length]; <START_MOD>org.ovirt.engine.core.uutils.crypto.CryptMD5.secureRandom<END_MOD>.nextBytes(r); for (int i = 0; i < (r.length); i++) { salt[i] = org.ovirt.engine.core.uutils.crypto.CryptMD5.b64t[(((r[i]) & 255) % (org.ovirt.engine.core.uutils.crypto.CryptMD5.b64t.length))]; } return org.ovirt.engine.core.uutils.crypto.CryptMD5.crypt(password, new java.lang.String(salt)); }
public double getActualDiskSize() { <START_MOD>if ((cachedActualSize) == 0.0) { cachedActualSize =<END_MOD> getDiskImageMap().values().stream().mapToDouble(DiskImage::getActualSize).sum(); }<START_MOD> return cachedActualSize; }<END_MOD>
private void processUnmanagedVm() { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vdsmVm.getVmDynamic(); <START_MOD>if ((vmDynamic.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { destroyVm(); return; } unmanagedVm = true; <END_MOD>vmDynamic.setRunOnVds(vdsManager.getVdsId()); saveDynamic(vmDynamic); }
protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntityPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase) {<START_MOD> if ((phase == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.PAUSED_SYSTEM)) && ((pausedBySystemReason) != null)) { auditLog(this, pausedBySystemReason); }<END_MOD> org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); updates.setPhase(phase); return updateEntity(updates); }
private boolean pauseTransferIfNecessary(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval()) > 0) && (((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.INITIALIZING)) || ((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.TRANSFERRING)))) && ((((entity.getLastUpdated().getTime()) / 1000) + (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval())) < ts)) { log.warn( paused due to no updates in {} seconds. {} (ts - ((entity.getLastUpdated().getTime()) / 1000)), getTransferDescription()); <START_MOD>pausedBySystemReason = org.ovirt.engine.core.common.AuditLogType.TRANSFER_IMAGE_PAUSED_BY_SYSTEM_TIMEOUT; <END_MOD>updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); return true; } return false; }
private void extendTicketIfNecessary(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((context.iterationTimestamp) >= ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getSessionExpiration()) - (getHostTicketRefreshAllowance()))) { log.info( transfer ticket for {} getTransferDescription()); boolean extendSucceeded = extendImageTransferSession(context.entity); if (!extendSucceeded) { log.warn( to renew transfer ticket for {} getTransferDescription()); if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().isRetryExtendTicket()) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setRetryExtendTicket(false); } else { <START_MOD>pausedBySystemReason = org.ovirt.engine.core.common.AuditLogType.TRANSFER_IMAGE_PAUSED_BY_SYSTEM_TICKET_RENEW_FAILURE; <END_MOD>updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setRetryExtendTicket(true); } } } else { log.debug( yet renewing transfer ticket for {} getTransferDescription()); } }
private void pollTransferStatus(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((((context.entity.getVdsId()) == null) || ((context.entity.getImagedTicketId()) == null)) || (!(org.ovirt.engine.core.common.FeatureSupported.getImageTicketSupported(vdsDao.get(context.entity.getVdsId()).getClusterCompatibilityVersion())))) { return; } org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation ticketInfo; try { ticketInfo = ((org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation) (runVdsCommand(VDSCommandType.GetImageTicket, new org.ovirt.engine.core.common.vdscommands.GetImageTicketVDSCommandParameters(context.entity.getVdsId(), context.entity.getImagedTicketId())).getReturnValue())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error( not get image ticket '{}' from vdsm context.entity.getImagedTicketId(), e); <START_MOD>pausedBySystemReason = org.ovirt.engine.core.common.AuditLogType.TRANSFER_IMAGE_PAUSED_BY_SYSTEM_MISSING_TICKET; <END_MOD>updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer = updateTransferStatusWithTicketInformation(context.entity, ticketInfo); if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { finalizeDownloadIfNecessary(context, upToDateImageTransfer); } }
private org.ovirt.engine.core.common.action.TransferDiskImageParameters createInitParams() { org.ovirt.engine.core.common.action.TransferDiskImageParameters parameters = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(); parameters.setTransferType(TransferType.Download); parameters.setImageGroupID(diskImage.getId()); java.lang.String fileExtension = ((diskImage.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW)) ? ".qcow2" : ".raw"; parameters.setDownloadFilename(((diskImage.getDiskAlias()) + fileExtension)); parameters.setTransferSize(diskImage.getActualSizeInBytes()); <START_MOD>parameters.setKeepaliveInterval(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDownloadImageUiInactivityTimeoutInSeconds()); <END_MOD>return parameters; }
private boolean <START_MOD>stopTransferIfNecessary<END_MOD>(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval()) > 0) && (((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.INITIALIZING)) || ((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.TRANSFERRING)))) && ((((entity.getLastUpdated().getTime()) / 1000) + (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval())) < ts)) { <START_MOD>java.lang.String action = "paused"; org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase = org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.PAUSED_SYSTEM; if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { action = "canceled"; phase = org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.CANCELLED; } <END_MOD>log.warn( <START_MOD>was {}<END_MOD> due to no updates in {} seconds. {} <START_MOD>action, <END_MOD>(ts - ((entity.getLastUpdated().getTime()) / 1000)), getTransferDescription()); updateEntityPhase(<START_MOD>phase<END_MOD>); return true; } return false; }
<START_MOD>@java.lang.Override protected boolean validate() { final boolean result = validateImpl(); if (((!result) && (!(org.ovirt.engine.core.bll.RunVmCommandBase.isInternalExecution()))) && (!(org.ovirt.engine.core.bll.RunVmCommandBase.getParameters().isRerun()))) { logValidationFailed(); } return result; }<END_MOD>
private boolean isLeaseInfoUpdateNeeded() { return <START_MOD>(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().isRestoreLease()) && (<END_MOD>((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.CREATE_NEW_LEASE)) || ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.UPDATE_LEASE_INFO))<START_MOD>)<END_MOD>; }
@java.lang.Override public javax.ws.rs.core.Response previewSnapshot(org.ovirt.engine.api.model.Action action) { validateParameters(action, "snapshot.id"); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(guid, asGuid(action.getSnapshot().getId())); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { tryBackParams.setDisks(getParent().mapDisks(action.getDisks())); } <START_MOD>if (action.isSetRestoreLease()) { tryBackParams.setRestoreLease(action.isRestoreLease()); } <END_MOD>javax.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action); return response; }
<START_MOD>private boolean isSortedAndMaxResults() { java.lang.String searchConstraint = org.ovirt.engine.api.restapi.util.QueryHelper.getConstraint(httpHeaders, uriInfo, "", modelType); int max = org.ovirt.engine.api.restapi.util.ParametersHelper.getIntegerParameter(httpHeaders, uriInfo, "max", (-1), (-1)); return (((searchConstraint != null) && (!(searchConstraint.isEmpty()))) && (searchConstraint.toLowerCase().contains("sortby name asc"))) && (max != 0); }<END_MOD>
<START_MOD>@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVMs() { int maxResults = org.ovirt.engine.core.bll.GetAllVmsFilteredAndSortedQuery.getParameters().getMaxResults(); int pageNum = org.ovirt.engine.core.bll.GetAllVmsFilteredAndSortedQuery.getParameters().getPageNum(); int offset = pageNum - (1 * maxResults); int limit = offset + maxResults; return vmDao.getAllSortedAndFiltered(org.ovirt.engine.core.bll.GetAllVmsFilteredAndSortedQuery.getUserID(), offset, limit); }<END_MOD>
@java.lang.Override public org.ovirt.engine.api.model.Vms list() { if (isFiltered())<START_MOD> { if (isSortedAndMaxResults()) { return getVmsFilteredAndSorted(); } else<END_MOD> { return mapCollection(getBackendCollection(QueryType.GetAllVms, new org.ovirt.engine.core.common.queries.QueryParametersBase(), SearchType.VM), true); } <START_MOD>} <END_MOD>else { return mapCollection(getBackendCollection(SearchType.VM), false); } }
<START_MOD>private org.ovirt.engine.api.model.Vms getVmsFilteredAndSorted() { int max = org.ovirt.engine.api.restapi.util.ParametersHelper.getIntegerParameter(httpHeaders, uriInfo, "max", (-1), (-1)); org.ovirt.engine.core.common.queries.GetAllVmsFilteredAndSortedParameters params = new org.ovirt.engine.core.common.queries.GetAllVmsFilteredAndSortedParameters(max); java.lang.String searchConstraint = org.ovirt.engine.api.restapi.util.QueryHelper.getConstraint(httpHeaders, uriInfo, "", modelType); java.lang.Integer pageNum = org.ovirt.engine.api.restapi.util.QueryHelper.parsePageNum(searchConstraint); params.setPageNum((pageNum == null ? -1 : pageNum)); return mapCollection(getBackendCollection(QueryType.GetAllVmsFilteredAndSorted, params), true); }<END_MOD>
<START_MOD>public static java.lang.Integer parsePageNum(java.lang.String searchStr) { if ((searchStr.toLowerCase().indexOf("page ")) == (-1)) { return null; } else { int pos = (searchStr.toLowerCase().indexOf("page ")) + 5; java.lang.StringBuilder pageNumberStr = new java.lang.StringBuilder(); char c = searchStr.charAt(pos); while ((java.lang.Character.isDigit(c)) && (pos < (searchStr.length()))) { pageNumberStr.append(c); pos += 1; if (pos < (searchStr.length())) { c = searchStr.charAt(pos); } } int pageNum = ((pageNumberStr.length()) == 0) ? 1 : java.lang.Integer.valueOf(pageNumberStr.toString()); return pageNum; } }<END_MOD>
public static long greatestCommonDivisor(long a, long b) { while (b != 0) { <START_MOD>long c<END_MOD> = <START_MOD>a<END_MOD>; b = a % b; <START_MOD>a = c; <END_MOD>} return a; }
public org.ovirt.engine.core.bll.ValidationResult canVnicWithExternalNetworkBePlugged() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.PLUGGED_UNLINKED_VM_INTERFACE_WITH_EXTERNAL_NETWORK_IS_NOT_SUPPORTED).when(((((org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.RequiredAction.PLUG) == (getRequiredAction())) && (!(nic.isLinked()))) && (<START_MOD>org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.UpdateVmNicValidator.<END_MOD>isVnicAttachedToExternalNetwork()))); }
@org.junit.Before public void setUp() { prepareNetwork(commandNoCluster.getParameters().getExternalNetwork()); prepareNetwork(commandCluster.getParameters().getExternalNetwork()); when(backend.runInternalAction(eq(ActionType.AddNetwork), any(), any())).thenReturn(getAddNetworkReturnValue()); when(networkHelper.createVnicProfile(any())).thenReturn(new org.ovirt.engine.core.common.businessentities.network.VnicProfile()); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = new org.ovirt.engine.core.common.action.ActionReturnValue(); returnValue.setSucceeded(true); when(<START_MOD>networkHelper.addVnicProfile(any(), anyBoolean())).thenReturn(returnValue); when(networkHelper.attachNetworkToClusters(eq(NETWORK_ID), any())).thenReturn(returnValue); org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = new org.ovirt.engine.core.common.queries.QueryReturnValue(); queryReturnValue.setReturnValue(getClusters()); queryReturnValue.setSucceeded(true); when(<END_MOD>backend.<START_MOD>runInternalQuery<END_MOD>(eq(QueryType.GetClustersByStoragePoolId), any(), any())).thenReturn(queryReturnValue); }
private void verifyCalls(boolean attachToAllClusters) { verify(backend).runInternalAction(eq(ActionType.AddNetwork), any(), any()); verify(networkHelper).createVnicProfile(any()); verify(<START_MOD>networkHelper<END_MOD>).<START_MOD>addVnicProfile<END_MOD>(any(), <START_MOD>anyBoolean<END_MOD>()); org.mockito.verification.VerificationMode expectedNumberOfCalls = (attachToAllClusters) ? times(1) : never(); verify(backend, expectedNumberOfCalls).runInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any(), any()); verify(networkHelper, expectedNumberOfCalls).attachNetworkToClusters(eq(NETWORK_ID), any()); }
<START_MOD>public org.ovirt.engine.core.common.action.ActionReturnValue addVnicProfile(org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, boolean publicUse) { org.ovirt.engine.core.common.action.AddVnicProfileParameters parameters = new org.ovirt.engine.core.common.action.AddVnicProfileParameters(vnicProfile); parameters.setPublicUse(publicUse); return backend.runInternalAction(ActionType.AddVnicProfile, parameters); }<END_MOD>
<START_MOD>public static boolean isMemoryDisksOnDifferentDomainsSupported(org.ovirt.engine.core.compat.Version version) { return org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.IsMemorySnapshotSupported, version); }<END_MOD>
<START_MOD>public java.util.Map<java.lang.String, java.lang.String> build() { if (((((poolId) == null) || ((domainId) == null)) || ((imageGroupId) == null)) || ((volumeId) == null)) { throw new java.lang.IllegalArgumentException("One or more of the PDIV IDs is null"); } java.util.Map<java.lang.String, java.lang.String> pdivMap = new java.util.HashMap<>(); pdivMap.put("poolID", poolId.toString()); pdivMap.put("domainID", domainId.toString()); pdivMap.put("imageID", imageGroupId.toString()); pdivMap.put("volumeID", volumeId.toString()); return pdivMap; }<END_MOD>
<START_MOD>private<END_MOD> <START_MOD>boolean<END_MOD> <START_MOD>shouldRestoreMemory<END_MOD>() { return <START_MOD>((!(memoryFromSnapshotUsed))<END_MOD> <START_MOD>&&<END_MOD> <START_MOD>(<END_MOD>((getFlow()) == (org.ovirt.engine.core.common.action.RunVmParams.RunVmFlow.RESUME_HIBERNATE)) <START_MOD>||<END_MOD> (org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(org.ovirt.engine.core.bll.RunVmCommand.getVm().getClusterArch(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getCompatibilityVersion())))<START_MOD>)<END_MOD> <START_MOD>&&<END_MOD> <START_MOD>(!(<END_MOD>org.apache.commons.lang.StringUtils.<START_MOD>isEmpty(<END_MOD>org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume()<START_MOD>)))<END_MOD>; }
<START_MOD>private void handleRefreshCapabilitiesResponse(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.vdscommands.VDSReturnValue caps) { try { invokeGetHardwareInfo(vds, caps); processRefreshCapabilitiesResponse(new java.util.concurrent.atomic.AtomicBoolean(), vds, vds.clone(), caps); } finally { if (vds != null) { updateDynamicData(vds.getDynamicData()); updateNumaData(vds); monitoringStrategy.processHardwareCapabilities(vds); resourceManager.getEventListener().handleVdsVersion(vds.getId()); } } }<END_MOD>
<START_MOD>public void refreshHostSync(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue caps = resourceManager.runVdsCommand(VDSCommandType.GetCapabilities, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase(vds)); handleRefreshCapabilitiesResponse(vds, caps); }<END_MOD>
<START_MOD>@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue caps = ((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result"))); handleRefreshCapabilitiesResponse(vds, caps); } catch (java.lang.Throwable t) { onFailure(t); } }<END_MOD>
@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { processRefreshVdsStatsResponse(((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result")))); <START_MOD>if (!(isVdsUpOrGoingToMaintenance)) { vdsManager.setStatus(VDSStatus.Up, vds); } <END_MOD>refreshVdsRunTimeInfo(<START_MOD>isVdsUpOrGoingToMaintenance<END_MOD>); } catch (java.lang.Throwable t) { onFailure(t); } }
<START_MOD>public void setSourceProfileName(java.lang.String name) { source.setName(name); }<END_MOD>
<START_MOD>public boolean isSameSourceProfile(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic) { return (java.util.Objects.equals(getSourceNetworkName(), vnic.getNetworkName())) && (java.util.Objects.equals(getSourceProfileName(), vnic.getVnicProfileName())); }<END_MOD>
public java.lang.String <START_MOD>getSourceProfileName<END_MOD>() { return <START_MOD>source.getName()<END_MOD>; }
@org.junit.Test public void testFindMappingEntry() {<START_MOD> org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.NETWORK_NAME); vnic.setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.VNIC_PROFILE1_NAME);<END_MOD> final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(<START_MOD>vnic<END_MOD>, externalVnicProfileMappings); assertThat(actual.get(), sameInstance(externalVnicProfileMapping1)); }
<START_MOD>public void setSourceNetworkName(java.lang.String name) { if ((source.getCustomProperties()) == null) { java.util.HashMap<java.lang.String, java.lang.String> props = new java.util.HashMap<>(1); source.setCustomProperties(props); } source.getCustomProperties().put("networkName", name); }<END_MOD>
@org.junit.Test public void testFindMappingEntryNotFound() {<START_MOD> org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(("not" + (org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.NETWORK_NAME))); vnic.setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.VNIC_PROFILE2_NAME);<END_MOD> final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(<START_MOD>vnic<END_MOD>, externalVnicProfileMappings); assertThat(actual, is(java.util.Optional.empty())); }
public static void validateRegistrationVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource br, org.ovirt.engine.api.model.Action action) { if (!(action.isSetRegistrationConfiguration())) { return; } if (!(action.getRegistrationConfiguration().isSetVnicProfileMappings())) { return; } org.ovirt.engine.api.model.RegistrationVnicProfileMappings mappings = action.getRegistrationConfiguration().getVnicProfileMappings(); br.validateParameters(mappings, "registrationVnicProfileMappings"); for (org.ovirt.engine.api.model.RegistrationVnicProfileMapping mapping : mappings.getRegistrationVnicProfileMappings()) { <START_MOD>org.ovirt.engine.api.restapi.resource.BackendVnicProfileHelper.validateSourceVnicProfile(<END_MOD>br, <START_MOD>mapping<END_MOD>); <START_MOD>org.ovirt.engine.api.restapi.resource.BackendVnicProfileHelper.validateTargetVnicProfile<END_MOD>(mapping); } }
@org.junit.Test public void testFindMappingEntryEmptyInput() {<START_MOD> org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.NETWORK_NAME); vnic.setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.VNIC_PROFILE1_NAME);<END_MOD> final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(<START_MOD>vnic<END_MOD>, java.util.Collections.emptyList()); assertThat(actual, is(java.util.Optional.empty())); }
public org.ovirt.engine.core.compat.Guid <START_MOD>getTargetProfileId<END_MOD>() { return <START_MOD>target.getId()<END_MOD>; }
@org.junit.Test public void testFindMappingEntryEmptySourceVnicProfile() {<START_MOD> org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(null); vnic.setVnicProfileName(null);<END_MOD> final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(<START_MOD>vnic<END_MOD>, java.util.Collections.singletonList(emptySourceMapping)); assertThat(actual.get(), sameInstance(emptySourceMapping)); }
@org.junit.Test public void testFindMappingEntryEmptyExternal() {<START_MOD> org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.NETWORK_NAME); vnic.setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.VNIC_PROFILE1_NAME);<END_MOD> final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(<START_MOD>vnic<END_MOD>, java.util.Collections.singletonList(emptySourceMapping)); assertFalse(actual.isPresent()); }
private void updateVnicFromMapping(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic, org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping mapping) { if ((mapping.<START_MOD>getTargetProfileId<END_MOD>()) != null) { updateVnicUsingProfileId(vnic, mapping.<START_MOD>getTargetProfileId<END_MOD>()); } else { updateVnicSetNoProfile(vnic); } }
public java.lang.String <START_MOD>getSourceNetworkName<END_MOD>() { return <START_MOD>(source.getCustomProperties()) != null ? source.getCustomProperties().get("networkName") : null<END_MOD>; }
public void <START_MOD>setTargetProfileId<END_MOD>(org.ovirt.engine.core.compat.Guid vnicProfileId) { <START_MOD>target<END_MOD>.<START_MOD>setId(<END_MOD>vnicProfileId<START_MOD>)<END_MOD>; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getDataCenter()))) { dataCenter_SelectedItemChanged(); } else if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getCluster()))) { cluster_SelectedItemChanged(); } else if (sender == (getConsoleAddressEnabled())) { consoleAddressChanged(); } else if ((ev.matchesDefinition(HasEntity.entityChangedEventDefinition)) && ((((<START_MOD>(sender == (getKernelCmdlineBlacklistNouveau)) || (<END_MOD>sender == (getKernelCmdlineIommu()))<START_MOD>)<END_MOD> || (sender == (getKernelCmdlineKvmNested()))) || (sender == (getKernelCmdlineUnsafeInterrupts()))) || (sender == (getKernelCmdlinePciRealloc())))) { if (isKernelCmdlineParsable()) { updateKernelCmdlineAccordingToCheckboxes(); } } }
<START_MOD>public void setCacheSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> cacheSize) { this.cacheSize = cacheSize; }<END_MOD>
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.CacheDevicePathType> getCacheDevicePathTypeList() { return cacheDevicePathTypeList; }<END_MOD>
<START_MOD>public void setCacheSize(java.lang.String cacheSize) { this.cacheSize = cacheSize; }<END_MOD>
@java.lang.Override protected void executeCommand() { <START_MOD>try { runAnsibleLvmCachePlaybook(); } catch (<END_MOD>java.<START_MOD>io<END_MOD>.<START_MOD>IOException |<END_MOD> java.lang.<START_MOD>InterruptedException<END_MOD> <START_MOD>e<END_MOD>) { <START_MOD>e<END_MOD>.<START_MOD>printStackTrace<END_MOD>(); } }
@org.junit.Test public void validateFailsForNoStorageDevice() { doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Collections.emptyList()<START_MOD>, org.ovirt.engine.core.common.businessentities.CacheDevicePathType.sdd, org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, "10"<END_MOD>)).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
@org.junit.Test public void validateSucceeds() { doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Collections.singletonList(getStorageDevice("sda"))<START_MOD>, org.ovirt.engine.core.common.businessentities.CacheDevicePathType.sda, org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, "10"<END_MOD>)).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertTrue(cmd.validate()); }
<START_MOD>public org.ovirt.engine.core.common.businessentities.CacheDevicePathType getCacheDevicePath() { return cacheDevicePath; }<END_MOD>
<START_MOD>public java.lang.String getCacheSize() { return cacheSize; }<END_MOD>
<START_MOD>public void setCacheDevicePathTypeList(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.CacheDevicePathType> cacheDevicePathTypeList) { this.cacheDevicePathTypeList = cacheDevicePathTypeList; }<END_MOD>
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> getCacheSize() { return cacheSize; }<END_MOD>
private void initListBoxEditors() { raidTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.RaidType>()); <START_MOD>cacheDevicePathEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.CacheDevicePathType>()); cacheModeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.CacheModeType>()); <END_MOD>}
@org.junit.Test public void validateFailsForDifferentStorageDevice() { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice1 = getStorageDevice("sda"); org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice2 = getStorageDevice("sdb"); storageDevice2.setDevType("SDA"); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Arrays.asList(storageDevice1, storageDevice2)<START_MOD>, org.ovirt.engine.core.common.businessentities.CacheDevicePathType.sdb, org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, "10"<END_MOD>)).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
@org.junit.Test public void validateFailsForDeviceAlreadyInUse() { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice = getStorageDevice("sda"); storageDevice.setCanCreateBrick(false); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Collections.singletonList(storageDevice)<START_MOD>, org.ovirt.engine.core.common.businessentities.CacheDevicePathType.sda, org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, "10"<END_MOD>)).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
<START_MOD>public void setCacheDevicePath(org.ovirt.engine.core.common.businessentities.CacheDevicePathType cacheDevicePath) { this.cacheDevicePath = cacheDevicePath; }<END_MOD>
<START_MOD>@org.junit.Test public void testExecuteQueryCommand() { org.ovirt.engine.core.common.queries.GetDiskImageByDiskAndImageIdsParameters params = getQueryParameters(); when(params.getDiskId()).thenReturn(diskId); when(params.getImageId()).thenReturn(imageId); when(diskImageDao.getDiskImageByDiskAndImageIds(diskId, imageId)).thenReturn(diskImage); org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery<org.ovirt.engine.core.common.queries.GetDiskImageByDiskAndImageIdsParameters> query = getQuery(); query.executeQueryCommand(); org.ovirt.engine.core.common.businessentities.storage.DiskImage returnDiskImage = query.getQueryReturnValue().getReturnValue(); assertTrue(returnDiskImage.equals(diskImage)); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImageByDiskAndImageIds(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid imageId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("disk_id", diskId).addValue("image_id", imageId); return getCallsHandler().executeRead("GetDiskImageByDiskAndImageIds", org.ovirt.engine.core.dao.DiskImageDaoImpl.DiskImageRowMapper.instance, parameterSource); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery.getQueryReturnValue().setReturnValue(diskImageDao.getDiskImageByDiskAndImageIds(org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery.getParameters().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery.getParameters().getImageId())); }<END_MOD>
<START_MOD>@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (!(getGlusterVolume().getVolumeType().isReplicatedType())) { addValidationMessage(EngineMessage.ACTION_TYPE_NOT_SUPPORTED_FOR_VOLUME_TYPE); return false; } if (!(getGlusterVolume().isOnline())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN); return false; } if (((getGlusterVolume().getAsyncTask()) != null) && (((getGlusterVolume().getAsyncTask().getStatus()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.STARTED)) || (((getGlusterVolume().getAsyncTask().getType()) == (org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REMOVE_BRICK)) && ((getGlusterVolume().getAsyncTask().getStatus()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.FINISHED))))) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_HAS_RUNNING_TASKS); return false; } if ((getParameters().getExistingBrick()) == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED); return false; } if (!(isValidVolumeBrick(getParameters().getExistingBrick()))) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_NOT_A_GLUSTER_VOLUME_BRICK); return false; } return true; }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.businessentities.Cluster getCluster() { org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); cluster.setId(clusterId); cluster.setVirtService(false); cluster.setGlusterService(true); return cluster; }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.ResetGlusterVolumeBrick, new org.ovirt.engine.core.common.vdscommands.gluster.ResetGlusterVolumeBrickActionVDSParameters(upServer.getId(), getGlusterVolumeName(), getParameters().getExistingBrick().getQualifiedName())); setSucceeded(returnValue.getSucceeded()); if (getSucceeded()) { glusterBrickDao.resetBrick(getParameters().getExistingBrick()); } else { handleVdsError(AuditLogType.GLUSTER_VOLUME_RESET_BRICK_FAILED, returnValue.getVdsError().getMessage()); return; } }<END_MOD>
<START_MOD>@org.junit.Before public void prepareMocks() { doReturn(getVds(VDSStatus.Up)).when(cmd).getUpServer(); doReturn(getDistributedVolume(volumeId1)).when(volumeDao).getById(volumeId1); doReturn(getDistributedVolume(volumeId2)).when(volumeDao).getById(volumeId2); doReturn(getReplicatedVolume(volumeId3, 2)).when(volumeDao).getById(volumeId3); doReturn(getReplicatedVolume(volumeId4, 4)).when(volumeDao).getById(volumeId4); doReturn(getVdsStatic()).when(vdsStaticDao).get(serverId); doReturn(getCluster()).when(cmd).getCluster(); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getBroker().glusterVolumeResetBrickStart(org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getExistingBrickDir()); status = org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getBroker().glusterVolumeResetBrickCommitForce(org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getExistingBrickDir()); org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.proceedProxyReturnValue(); }<END_MOD>
@java.lang.Override public void testConnection() { try { getClient().execute(new com.woorea.openstack.base.client.OpenStackRequest(getClient(), com.woorea.openstack.base.client.HttpMethod.GET, "", null, org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.ApiRootResponse.class)); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.error( (OpenStack response error code: {}) e.getMessage(), e.getStatus()); org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.debug("Exception", e); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } catch (java.lang.RuntimeException e) { <START_MOD>org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.error( {} e.getMessage(), ((e.getCause()) == null ? null : e.getCause().getMessage())); <END_MOD>throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@org.junit.Test public void canCopyDiskFails() { org.ovirt.engine.core.common.businessentities.StorageDomain domain = createStorageDomainForDisk(StorageType.ISCSI); domain.setStorageFormat(StorageFormatType.V3); disk.setSize(1000); org.ovirt.engine.core.common.businessentities.storage.DiskImage child = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); child.setSize(1000); child.setStorageIds(java.util.Collections.singletonList(domain.getId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage parent = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); parent.setId(org.ovirt.engine.core.compat.Guid.newGuid()); parent.setSize(500); parent.setStorageIds(java.util.Collections.singletonList(domain.getId())); child.setParentId(parent.getParentId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = new java.util.ArrayList<>(2); diskImages.add(parent); diskImages.add(child); when(validator.getDiskImageDao().getAllSnapshotsForImageGroup(disk.getId())).thenReturn(diskImages); assertThat(validator.<START_MOD>childDiskWasExtended<END_MOD>(domain), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.<START_MOD>CANNOT_MOVE_DISK_SNAPSHOTS<END_MOD>)); }
private boolean diskContainsPreExtendSnapshots() { return validate(createDiskValidator(getImage()).<START_MOD>childDiskWasExtended<END_MOD>(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain())); }
@java.lang.Override public void addMenuItem(int index, java.lang.String label, java.lang.String href<START_MOD>, java.lang.String primaryMenuId, java.lang.String iconCssName) { if (primaryMenuId != null) { addSecondaryMenuItem(index, label, href, primaryMenuId); } else<END_MOD> { org.gwtbootstrap3.client.ui.ListGroupItem newMenuItem = new org.gwtbootstrap3.client.ui.ListGroupItem(); org.gwtbootstrap3.client.ui.Anchor menuAnchor = new org.gwtbootstrap3.client.ui.Anchor(hashifyString(href)); <START_MOD>if (index < 0) { index = 0; } <END_MOD>org.gwtbootstrap3.client.ui.html.Span iconSpan = new org.gwtbootstrap3.client.ui.html.Span(); if (<START_MOD>iconCssName != null<END_MOD>) { iconSpan.addStyleName(<START_MOD>determineCssIconBase(iconCssName)); iconSpan.addStyleName(iconCssName); newMenuItem.addStyleName(<END_MOD>Styles.<START_MOD>ACTIVE); } menuAnchor.add(<END_MOD>iconSpan<START_MOD>); org.gwtbootstrap3.client.ui.html.Span labelSpan = new org.gwtbootstrap3.client.ui.html.Span(); labelSpan.setText(label); labelSpan<END_MOD>.addStyleName(<START_MOD>PatternflyStyles.LIST_GROUP_ITEM_VALUE);<END_MOD> menuAnchor.add(labelSpan<START_MOD>); newMenuItem.add(menuAnchor); hrefToGroupLabelMap.put(href, newMenuItem); if (index > (menuListGroup.getWidgetCount())) { menuListGroup.add(newMenuItem); primaryMenuIds.add<END_MOD>(label); <START_MOD>} else { <END_MOD>menuListGroup.insert(newMenuItem, index); <START_MOD>primaryMenuIds.add(index, label); } } }<END_MOD>
<START_MOD>public java.util.List<java.lang.String> getPrimaryMenuIds() { return primaryMenuIds; }<END_MOD>
<START_MOD>private void addSecondaryMenuItem(int index, java.lang.String label, java.lang.String href, java.lang.String primaryMenuId) { int primaryMenuIndex = primaryMenuIds.indexOf(primaryMenuId); if ((primaryMenuIndex > (-1)) && (primaryMenuIndex < (menuListGroup.getWidgetCount()))) { org.gwtbootstrap3.client.ui.ListGroupItem primaryMenuItem = ((org.gwtbootstrap3.client.ui.ListGroupItem) (menuListGroup.getWidget(primaryMenuIndex))); com.google.gwt.user.client.ui.FlowPanel secondaryMenuFlowPanel = null; if ((primaryMenuItem.getWidgetCount()) > 2) { com.google.gwt.user.client.ui.IsWidget widget = primaryMenuItem.getWidget(2); if (widget instanceof com.google.gwt.user.client.ui.FlowPanel) { secondaryMenuFlowPanel = ((com.google.gwt.user.client.ui.FlowPanel) (widget)); } } else { secondaryMenuFlowPanel = createSecondaryMenuHeader(primaryMenuItem); primaryMenuItem.addStyleName(PatternflyStyles.SECONDARY_NAV_ITEM); for (int i = 0; i < (primaryMenuItem.getWidgetCount()); i++) { com.google.gwt.user.client.ui.IsWidget widget = primaryMenuItem.getWidget(i); if ((widget.asWidget()) instanceof org.gwtbootstrap3.client.ui.Anchor) { org.gwtbootstrap3.client.ui.Anchor labelAnchor = ((org.gwtbootstrap3.client.ui.Anchor) (widget.asWidget())); labelAnchor.setHref(org.ovirt.engine.ui.webadmin.section.main.view.MenuView.JAVASCRIPT); } } } if (secondaryMenuFlowPanel != null) { if ((index >= 0) && (index < (secondaryMenuFlowPanel.getWidgetCount()))) { secondaryMenuFlowPanel.insert(createSecondaryMenuItem(label, href), (index + 1)); } else { secondaryMenuFlowPanel.add(createSecondaryMenuItem(label, href)); } } primaryMenuItem.add(secondaryMenuFlowPanel); } }<END_MOD>
void addMenuItem(int index, java.lang.String label, java.lang.String href<START_MOD>, java.lang.String primaryMenuId, java.lang.String iconCssName<END_MOD>);
public void <START_MOD>addContentView<END_MOD>(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, <START_MOD>java.lang.String primaryMenuId, java.lang.String iconCssName, <END_MOD>int priority, boolean defaultPlace) { menuPresenterWidget.addMenuItem(priority, label, historyToken<START_MOD>, primaryMenuId, iconCssName<END_MOD>); dynamicUrlContentProxyFactory.create(historyToken, contentUrl); placeManager.setDefaultPlace(historyToken); }
<START_MOD>java.util.List<java.lang.String> getPrimaryMenuIds();<END_MOD>
<START_MOD>public void addSecondaryMenu(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, java.lang.String primaryMenuId, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { addContentView(label, historyToken, contentUrl, primaryMenuId, options.getIcon(), options.getPriority().intValue(), options.getDefaultPlace().booleanValue()); }<END_MOD>
public void <START_MOD>addPrimaryMenu<END_MOD>(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { <START_MOD>addContentView<END_MOD>(label, historyToken, contentUrl<START_MOD>, null, options.getIcon()<END_MOD>, options.getPriority().intValue(), options.getDefaultPlace().booleanValue()); }
<START_MOD>public java.lang.String[] listPrimaryMenuIds() { java.util.List<java.lang.String> ids = menuPresenterWidget.getPrimaryMenuIds(); return ids.toArray(new java.lang.String[ids.size()]); }<END_MOD>
<START_MOD>public java.util.List<java.lang.String> getPrimaryMenuIds() { return getView().getPrimaryMenuIds(); }<END_MOD>
public void addMenuItem(int index, java.lang.String label, java.lang.String historyToken<START_MOD>, java.lang.String primaryMenuId, java.lang.String iconCssName<END_MOD>) { getView().addMenuItem(index, label, historyToken<START_MOD>, primaryMenuId, iconCssName<END_MOD>); }
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity)<START_MOD> { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -><END_MOD> { super.update(entity); removeNameServersByDnsResolverConfigurationId(entity.getId()); saveNameServersByDnsResolverConfigurationId(entity.getId(), entity.getNameServers()); <START_MOD>return null; <END_MOD>}<START_MOD>); }<END_MOD>
@java.lang.Override public void remove(org.ovirt.engine.core.compat.Guid id) { <START_MOD>org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { <END_MOD>removeNameServersByDnsResolverConfigurationId(id); super.remove(id); <START_MOD>return null; <END_MOD>}<START_MOD>); }<END_MOD>
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity)<START_MOD> { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -><END_MOD> { entity.setId(org.ovirt.engine.core.compat.Guid.newGuid()); super.save(entity); saveNameServersByDnsResolverConfigurationId(entity.getId(), entity.getNameServers()); <START_MOD>return null; <END_MOD>}<START_MOD>); }<END_MOD>
@java.lang.Override protected void writeFileForLunDisk(org.ovirt.engine.core.common.businessentities.storage.LunDisk lun) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.<START_MOD>OVF_OVIRT_URI<END_MOD>, "id", lun.getId().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.<START_MOD>OVF_OVIRT_URI<END_MOD>, "href", org.ovirt.engine.core.utils.ovf.OvfParser.createLunFile(lun)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.<START_MOD>OVF_OVIRT_URI<END_MOD>, "disk_storage_type", lun.getDiskStorageType().name()); }
@java.lang.Override protected void writeHeader() { super.writeHeader(); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.<START_MOD>OVF_OVIRT_URI<END_MOD>, "version", org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdcVersion)); }
protected void writeHeader() { _instanceId = 0; _writer.writeStartDocument(false); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_URI); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.VSSD_PREFIX, org.ovirt.engine.core.utils.ovf.VSSD_URI); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.XSI_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); <START_MOD>writeHeaderWithEnvelope<END_MOD>(); }
<START_MOD>protected void writeHeaderWithEnvelope() { _writer.setPrefix(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI); _writer.writeStartElement(org.ovirt.engine.core.utils.ovf.OVF_URI, "Envelope"); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.VSSD_PREFIX, org.ovirt.engine.core.utils.ovf.VSSD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XSI_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); }<END_MOD>
@java.lang.Override protected void startVirtualSystem() { _writer.writeStartElement("Content"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.<START_MOD>OVF_OVIRT_URI<END_MOD>, "id", "out"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", ((OVF_PREFIX) + ":VirtualSystem_Type")); }
@java.lang.Override protected void writeFile(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.<START_MOD>OVF_OVIRT_URI<END_MOD>, "href", org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(image)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.<START_MOD>OVF_OVIRT_URI<END_MOD>, "id", image.getImageId().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.<START_MOD>OVF_OVIRT_URI<END_MOD>, "size", java.lang.String.valueOf(image.getActualSizeInBytes())); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.<START_MOD>OVF_OVIRT_URI<END_MOD>, "description", org.apache.commons.lang.StringUtils.defaultString(image.getDescription())); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.<START_MOD>OVF_OVIRT_URI<END_MOD>, "disk_storage_type", image.getDiskStorageType().name()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.<START_MOD>OVF_OVIRT_URI<END_MOD>, "cinder_volume_type", org.apache.commons.lang.StringUtils.defaultString(image.getCinderVolumeType())); }
@java.lang.Override protected void writeOS() { _writer.writeStartElement("Section"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.<START_MOD>OVF_OVIRT_URI<END_MOD>, "id", vmBase.getId().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.<START_MOD>OVF_OVIRT_URI<END_MOD>, "required", "false"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", ((OVF_PREFIX) + ":OperatingSystemSection_Type")); _writer.writeElement("Info",   Operating System _writer.writeElement("Description", osRepository.getUniqueOsNames().get(vmBase.getOsId())); _writer.writeEndElement(); }
<START_MOD>@java.lang.Override protected void writeHeaderWithEnvelope() { _writer.setPrefix(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI); _writer.writeStartElement(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "Envelope"); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.VSSD_PREFIX, org.ovirt.engine.core.utils.ovf.VSSD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XSI_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); }<END_MOD>
private void writeDiskParentRef(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { if (image.getParentId().equals(Guid.Empty)) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.<START_MOD>OVF_OVIRT_URI<END_MOD>, "parentRef", ""); } else { int i = 0; while (_images.get(i).getImageId().equals(image.getParentId())) { i++; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> res = _images.subList(i, ((_images.size()) - 1)); if ((res.size()) > 0) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.<START_MOD>OVF_OVIRT_URI<END_MOD>, "parentRef", org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(res.get(0))); } else { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.<START_MOD>OVF_OVIRT_URI<END_MOD>, "parentRef", ""); } } }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { if (isCopyOperation()) { if (!(Guid.Empty.equals(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getVmTemplateId()))) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getVmTemplateId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.TEMPLATE, getDiskIsBeingMigratedMessage())); } } else { <START_MOD>if ((getImage().getContentType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskContentType.ISO)) { java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = vmStaticDao.getAllIdsWithSpecificIsoAttached(getImage().getId()); if (!(vmIds.isEmpty())) { return vmIds.stream().collect(java.util.stream.Collectors.toMap(( p) -> p.toString(), ( p) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, getDiskIsBeingMigratedMessage()))); } } else { <END_MOD>java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> vmsForDisk = getVmsWithVmDeviceInfoForDiskId(); if (!(vmsForDisk.isEmpty())) { return vmsForDisk.stream().collect(java.util.stream.Collectors.toMap(( p) -> p.getFirst().getId().toString(), ( p) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, getDiskIsBeingMigratedMessage()))); } } <START_MOD>} <END_MOD>return null; }
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult isIsoDiskAttachedToAnyNonDownVm() { java.util.List<java.lang.String> vmNames = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStaticDao().getAllRunningNamesWithSpecificIsoAttached(disk.getId()); if (!(vmNames.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ERROR_ISO_DISK_ATTACHED_TO_RUNNING_VMS, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.storage.DiskValidator.DISK_NAME_VARIABLE, disk.getDiskAlias()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.storage.DiskValidator.VM_LIST, vmNames)); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
<START_MOD>@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.aaa.GetAnyDbUserByUserIdQuery.getQueryReturnValue().setReturnValue(dbUserDao.getAnyUserById(org.ovirt.engine.core.bll.aaa.GetAnyDbUserByUserIdQuery.getParameters().getId())); }<END_MOD>
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.queries.QueryReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().runInternalQuery(QueryType.GetAuthzGroupsByUserId, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters()); java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> authzGroups = returnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> groupsIds = authzGroups.stream().map(( g) -> dbGroupDao.getByExternalId(g.getAuthz(), g.getId())).filter(java.util.Objects::nonNull).map(( g) -> g.getId()).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getQueryReturnValue().setReturnValue(permissionDao.getAllForAdElementAndGroups(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId(), <START_MOD>org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getUserID(), <END_MOD>groupsIds, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().isFiltered())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id<START_MOD>, org.ovirt.engine.core.compat.Guid currentUserId<END_MOD>, java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered) { int appMode = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ApplicationMode); org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("ad_element_id", id).addValue(<START_MOD>"user_id", currentUserId).addValue(<END_MOD>"user_groups", createArrayOf("uuid", groupIds.toArray())).addValue("is_filtered", isFiltered).addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetPermissionsByAdElementIdAndGroupIds", org.ovirt.engine.core.dao.PermissionDaoImpl.permissionRowMapper, parameterSource); }
java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id, <START_MOD>org.ovirt.engine.core.compat.Guid currentUserId, <END_MOD>java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered);
@java.lang.Override public void deallocate(org.ovirt.engine.core.common.businessentities.network.VmNic nic) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic); if (port != null) { getClient().ports().delete(port.getId()).execute(); } } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e<START_MOD>, true<END_MOD>); } }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> allocate(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.VDS host, boolean ignoreSecurityGroupsOnUpdate) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic); java.util.List<java.lang.String> securityGroups = getSecurityGroups(vnicProfile); java.lang.String hostId = getHostId(host); if (port == null) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(network.getProvidedBy()); com.woorea.openstack.quantum.model.Port portForCreate = createNewPortForAllocate(nic, securityGroups, hostId, externalNetwork); port = getClient().ports().create(portForCreate).execute(); } else { boolean securityGroupsChanged = (!ignoreSecurityGroupsOnUpdate) && (securityGroupsChanged(port.getSecurityGroups(), securityGroups)); boolean hostChanged = hostChanged(port, hostId); updatePort(port, securityGroupsChanged, hostChanged, securityGroups, hostId, nic); } java.util.Map<java.lang.String, java.lang.String> runtimeProperties = createPortAllocationRuntimeProperties(port); return runtimeProperties; } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e<START_MOD>, true<END_MOD>); } }
@java.lang.Override protected void executeCommand() { if ((getParameters().getRefresh()) || (getSessionDataContainer().isSsoOvirtAppApiScope(getParameters().getSessionId()))) { getSessionDataContainer().updateSessionLastActiveTime(getParameters().getSessionId()); } if (validatePermissions()) { if (validateInputs()) { long start = java.lang.System.currentTimeMillis(); try { returnValue.setSucceeded(true); executeQueryCommand(); } catch (java.lang.RuntimeException ex) { returnValue.setSucceeded(false); java.lang.Throwable th = (ex instanceof org.ovirt.engine.core.common.errors.EngineException) ? ex : ex.getCause(); if (th instanceof org.ovirt.engine.core.common.errors.EngineException) { org.ovirt.engine.core.common.errors.EngineException vdcExc = ((org.ovirt.engine.core.common.errors.EngineException) (th)); if ((<START_MOD>(<END_MOD>vdcExc.getErrorCode()) != null) <START_MOD>&& (!(vdcExc.isUseRootCause()))) <END_MOD>{ returnValue.setExceptionString(vdcExc.getErrorCode().toString()); } else { returnValue.setExceptionString(<START_MOD>(vdcExc.isUseRootCause() ? org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(vdcExc) : <END_MOD>vdcExc.getMessage(<START_MOD>)<END_MOD>)); } log.error( '{}' failed: {} getClass().getSimpleName(), <START_MOD>(vdcExc.isUseRootCause() ? org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(vdcExc) : <END_MOD>vdcExc.getMessage(<START_MOD>)<END_MOD>)); log.error("Exception", vdcExc); } else { returnValue.setExceptionString(ex.getMessage()); log.error( '{}' failed: {} getClass().getSimpleName(), ex.getMessage()); log.error("Exception", ex); } } finally { log.debug( {} took {} ms org.ovirt.engine.core.bll.QueriesCommandBase.getCommandName(), ((java.lang.System.currentTimeMillis()) - start)); } } else { log.error( execution failed due to invalid inputs: {} returnValue.getExceptionString()); } } else { java.lang.String errMessage =   execution failed due to insufficient permissions. log.error(errMessage); returnValue.setExceptionString(errMessage); } }
@java.lang.Override public void addSubnet(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet subnet) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(subnet.getExternalNetwork()); com.woorea.openstack.quantum.model.Subnet subnetForCreate = createNewSubnetEntity(subnet, externalNetwork); try { getClient().subnets().create(subnetForCreate).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e<START_MOD>, true<END_MOD>); } }
@java.lang.Override public void remove(java.lang.String id) { try { getClient().networks().delete(id).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e<START_MOD>, true<END_MOD>); } }
@java.lang.Override public void removeSubnet(java.lang.String id) { try { getClient().subnets().delete(id).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e<START_MOD>, true<END_MOD>); } }
@java.lang.Override public java.lang.String add(org.ovirt.engine.core.common.businessentities.network.Network network) { com.woorea.openstack.quantum.model.Network networkForCreate = createNewNetworkEntity(network); try { com.woorea.openstack.quantum.model.Network createdNetwork = getClient().networks().create(networkForCreate).execute(); return createdNetwork.getId(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e<START_MOD>, true<END_MOD>); } }
@java.lang.Override public void testConnection() { try { getClient().execute(new com.woorea.openstack.base.client.OpenStackRequest(getClient(), com.woorea.openstack.base.client.HttpMethod.GET, "", null, org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.ApiRootResponse.class)); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.error( (OpenStack response error code: {}) e.getMessage(), e.getStatus()); org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.debug("Exception", e); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e<START_MOD>, true<END_MOD>); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e<START_MOD>, true); } }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAll() { try { com.woorea.openstack.quantum.model.Networks networks = getClient().networks().list().execute(); return map(networks.getList()); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e<START_MOD>, true<END_MOD>); } }
private void removeMemoryFromActiveSnapshot() { <START_MOD>if<END_MOD> <START_MOD>(!(<END_MOD>org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().<START_MOD>containsMemory<END_MOD>())) { return; } snapshotDao.removeMemoryFromActiveSnapshot(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); if ((snapshotDao.<START_MOD>getNumOfSnapshotsByDisks<END_MOD>(org.ovirt.engine.core.bll.RunVmCommand.<START_MOD>getActiveSnapshot())) == 0) { <END_MOD>removeMemoryDisks(<START_MOD>org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot()<END_MOD>); } }
private java.util.Collection<org.ovirt.engine.core.common.businessentities.Snapshot> getSnapshotsToBeExportedWithMemory() { if (org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getParameters().getCopyCollapse()) { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = snapshotDao.get(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVmId(), SnapshotType.ACTIVE); return activeSnapshot.<START_MOD>containsMemory(<END_MOD>) ? java.util.Collections.singleton(activeSnapshot) : java.util.Collections.emptyList(); } else { return snapshotDao.getAll(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVmId()).stream().filter(( s) -> s.<START_MOD>containsMemory(<END_MOD>)).collect(java.util.stream.Collectors.toList()); } }
private void copyAllMemoryImages(org.ovirt.engine.core.compat.Guid containerID) { for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshotsWithMemory) { <START_MOD>org.ovirt.engine.core.common.businessentities.storage.DiskImage dumpImage<END_MOD> = <START_MOD>((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get<END_MOD>(snapshot.<START_MOD>getMetadataDiskId())<END_MOD>)); org.ovirt.engine.core.common.action.ActionReturnValue vdcRetValue = runInternalActionWithTasksContext(ActionType.CopyImageGroup, buildMoveOrCopyImageGroupParametersForMemoryDumpImage(containerID, <START_MOD>dumpImage)); if (!(vdcRetValue.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(vdcRetValue.getFault().getError(),   during ExportVmCommand } org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getTaskIdList().addAll(vdcRetValue.getVdsmTaskIdList()); org.ovirt.engine.core.common.businessentities.storage.DiskImage confImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao<END_MOD>.get(<START_MOD>snapshot.getMetadataDiskId()))); vdcRetValue = runInternalActionWithTasksContext(ActionType.CopyImageGroup, buildMoveOrCopyImageGroupParameters(containerID, confImage<END_MOD>)); if (!(vdcRetValue.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(vdcRetValue.getFault().getError(),   during ExportVmCommand } org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getTaskIdList().addAll(vdcRetValue.getVdsmTaskIdList()); } }
private void restoreConfiguration(org.ovirt.engine.core.common.businessentities.Snapshot targetSnapshot) { removedSnapshot = snapshotDao.get(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVmId(), SnapshotType.ACTIVE); snapshotsToRemove.add(removedSnapshot.getId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().removeAllIllegalDisks(removedSnapshot.getId(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVmId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVm(), targetSnapshot, targetSnapshot.getId(), null, org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCompensationContext(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCurrentUser(), new org.ovirt.engine.core.bll.network.VmInterfaceManager(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getMacPool()), <START_MOD>targetSnapshot.containsMemory(<END_MOD>)); snapshotDao.remove(targetSnapshot.getId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().addActiveSnapshot(targetSnapshot.getId(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVm(), SnapshotStatus.LOCKED, <START_MOD>null, null<END_MOD>, org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCompensationContext()); }
@java.lang.Override public int <START_MOD>getNumOfSnapshotsByDisks<END_MOD>(<START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.businessentities.Snapshot<END_MOD> <START_MOD>snapshot<END_MOD>) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue(<START_MOD>"memory_disk_ids"<END_MOD>, <START_MOD>java.util.Arrays.asList<END_MOD>(<START_MOD>snapshot.getMemoryDiskId(), snapshot.getMetadataDiskId()<END_MOD>)); return getCallsHandler().executeRead("GetNumOfSnapshotsByMemoryVolume", org.springframework.jdbc.core.SingleColumnRowMapper.newInstance(java.lang.Integer.class), parameterSource); }
@java.lang.Override protected void executeCommand() { if (isMemoryRemovable()) { <START_MOD>org.ovirt.engine.core.common.action.RemoveDiskParameters removeMemoryDumpDiskParameters<END_MOD> = <START_MOD>new org.ovirt.engine.core.common.action.RemoveDiskParameters<END_MOD>(org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.getParameters().<START_MOD>getSnapshot().getMemoryDiskId(<END_MOD>)); removeMemoryDumpDiskParameters.setShouldBeLogged(false); runInternalAction(ActionType.RemoveDisk, removeMemoryDumpDiskParameters); org.ovirt.engine.core.common.action.RemoveDiskParameters removeMemoryMetadataDiskParameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters(<START_MOD>org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.getParameters().getSnapshot().getMetadataDiskId(<END_MOD>)); removeMemoryMetadataDiskParameters.setShouldBeLogged(false); runInternalAction(ActionType.RemoveDisk, removeMemoryMetadataDiskParameters); } org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.setSucceeded(true); }
private void removeDiskImages() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getVm().getDiskMap().values(), org.ovirt.engine.core.bll.exportimport.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.exportimport.ONLY_ACTIVE); boolean shouldWipe = false; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images) { image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); image.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); shouldWipe |= image.isWipeAfterDelete(); } java.util.List<org.ovirt.engine.core.compat.Guid> <START_MOD>allMemoryDisks<END_MOD> = org.ovirt.engine.core.<START_MOD>bll.memory.MemoryUtils.getMemoryDiskIdsFromSnapshots(getVm().getSnapshots()); for (org.ovirt.engine.core.<END_MOD>compat.Guid<START_MOD> memoryDiskId : allMemoryDisks) {<END_MOD> org.ovirt.engine.core.common.businessentities.storage.DiskImage <START_MOD>metadataDisk<END_MOD> = createMemoryDisk(<START_MOD>memoryDiskId<END_MOD>, shouldWipe); images.add(metadataDisk<START_MOD>); } removeVmImages(<END_MOD>images); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Snapshot.class, to = org.ovirt.engine.api.model.Snapshot.class) public static org.ovirt.engine.api.model.Snapshot map(org.ovirt.engine.core.common.businessentities.Snapshot entity, org.ovirt.engine.api.model.Snapshot template) { org.ovirt.engine.api.model.Snapshot model = (template != null) ? template : new org.ovirt.engine.api.model.Snapshot(); model.setId(entity.getId().toString()); if ((entity.getDescription()) != null) { model.setDescription(entity.getDescription()); } if ((entity.getCreationDate()) != null) { model.setDate(org.ovirt.engine.api.restapi.types.DateMapper.map(entity.getCreationDate(), null)); } if ((entity.getStatus()) != null) { model.setSnapshotStatus(org.ovirt.engine.api.restapi.types.SnapshotMapper.map(entity.getStatus(), null)); } if ((entity.getType()) != null) { model.setSnapshotType(org.ovirt.engine.api.restapi.types.SnapshotMapper.map(entity.getType(), null)); } if (<START_MOD>entity.containsMemory()<END_MOD>) { model.setPersistMemorystate(<START_MOD>true<END_MOD>); } return model; }
private void writeSnapshotsSection() { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots = vm.getSnapshots(); if ((snapshots == null) || (snapshots.isEmpty())) { return; } _writer.writeStartElement("Section"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", "ovf:SnapshotsSection_Type"); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { _writer.writeStartElement("Snapshot"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "id", snapshot.getId().toString()); _writer.writeElement("Type", snapshot.getType().name()); _writer.writeElement("Description", snapshot.getDescription()); _writer.writeElement("CreationDate", org.ovirt.engine.core.utils.ovf.OvfParser.localDateToUtcDateString(snapshot.getCreationDate())); if (<START_MOD>snapshot.containsMemory(<END_MOD>)) { <START_MOD>org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDump = memoryDisks.get(snapshot.getMemoryDiskId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryConf = memoryDisks.get(snapshot.getMetadataDiskId()); java.lang.String memoryVolume = java.lang.String.format("%1$s,%2$s,%3$s,%4$s,%5$s,%6$s", memoryDump.getStorageIds().get(0), memoryDump.getStoragePoolId(), memoryDump.getId(), memoryDump.getImageId(), memoryConf.getId(), memoryConf.getImageId()); <END_MOD>_writer.writeElement("Memory", <START_MOD>memoryVolume<END_MOD>); } if ((snapshot.getAppList()) != null) { _writer.writeElement("ApplicationList", snapshot.getAppList()); } if ((snapshot.getVmConfiguration()) != null) { _writer.writeElement("VmConfiguration", org.apache.commons.codec.binary.Base64.encodeBase64String(snapshot.getVmConfiguration().getBytes())); } _writer.writeEndElement(); } _writer.writeEndElement(); }
@java.lang.Override protected final void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.StorageDomain storage = getStorage(); T returnValue = getAllFromStorage(storage); <START_MOD>java.util.List<org.ovirt.engine.core.compat.Guid> imagesList = ((java.util.List<org.ovirt.engine.core.compat.Guid>) (runVdsCommand(VDSCommandType.GetImagesList, new org.ovirt.engine.core.common.vdscommands.GetImagesListVDSCommandParameters(storage.getId(), storage.getStoragePoolId())).getReturnValue())); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.compat.Guid>> lebil = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid image : imagesList) { org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters getVolumesParameters = new org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters(storage.getStoragePoolId(), storage.getId(), image); java.util.List<org.ovirt.engine.core.compat.Guid> volumesList = ((java.util.List<org.ovirt.engine.core.compat.Guid>) (runVdsCommand(VDSCommandType.GetVolumesList, getVolumesParameters).getReturnValue())); lebil.put(image, volumesList); } <END_MOD>org.ovirt.engine.core.bll.exportimport.GetAllFromExportDomainQuery.getQueryReturnValue().setReturnValue(returnValue); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { <START_MOD>org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, memoryDiskDomainMap.get(snapshot.getMemoryDiskId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, snapshot.getMemoryDiskId()); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMemoryDisk(vm, sd.getStorageType(), vmOverheadCalculator, org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(snapshot.getMemoryDiskId()); memoryDisk.setImageId(org.ovirt.engine.core.compat.Guid.newGuid()); memoryDisk.setStorageIds(new <END_MOD>java.util.<START_MOD>ArrayList(java.util.Collections.singletonList(<END_MOD>sd.getId())<START_MOD>)); memoryDisk.setStoragePoolId(<END_MOD>org.ovirt.engine.core.bll.<START_MOD>exportimport.ImportVmCommand.getStoragePoolId(<END_MOD>)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(DiskImage::isWipeAfterDelete)); return memoryDisk; }
private <START_MOD>org.ovirt.engine.core.compat.Guid<END_MOD> <START_MOD>getMemoryDiskImageId<END_MOD>(<START_MOD>org.ovirt.engine.core.compat.Guid imageGroupId) { <END_MOD>org.ovirt.engine.core.common.<START_MOD>vdscommands<END_MOD>.<START_MOD>StoragePoolDomainAndGroupIdBaseVDSCommandParameters<END_MOD> <START_MOD>getVolumesParameters = new org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters(<END_MOD>)<START_MOD>.getStoragePoolId(),<END_MOD> <START_MOD>org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getStorageDomainId(), imageGroupId);<END_MOD> java.util.List<org.ovirt.engine.core.compat.Guid> <START_MOD>volumesList<END_MOD> = <START_MOD>((java.util.List<<END_MOD>org.ovirt.engine.core.compat.Guid<START_MOD>>) (runVdsCommand(VDSCommandType<END_MOD>.<START_MOD>GetVolumesList, getVolumesParameters).getReturnValue<END_MOD>(<START_MOD>)<END_MOD>)); <START_MOD>return volumesList<END_MOD>.get(<START_MOD>0<END_MOD>); }
private void addMemoryImages() { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getSnapshots().stream().filter(( snapshot) -> snapshot.<START_MOD>containsMemory<END_MOD>()).forEach(( snapshot) -> { addDisk(createMemoryDisk(snapshot)); addDisk(createMetadataDisk(getVm(), snapshot)); }); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadataDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { <START_MOD>org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd<END_MOD> = <START_MOD>validateStorageDomainExistsInDb(snapshot, memoryDiskDomainMap.get(snapshot.getMetadataDiskId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk<END_MOD> = <START_MOD>isMemoryDiskAlreadyExistsInDb<END_MOD>(snapshot, <START_MOD>snapshot.getMetadataDiskId(<END_MOD>)); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMetadataDisk(org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(<START_MOD>snapshot.getMetadataDiskId(<END_MOD>)); memoryDisk.setImageId(<START_MOD>org.ovirt.engine.core.compat.Guid.newGuid(<END_MOD>)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(<START_MOD>sd.getId(<END_MOD>)))); memoryDisk.setStoragePoolId(<START_MOD>org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getStoragePoolId(<END_MOD>)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(DiskImage::isWipeAfterDelete)); return memoryDisk; }
public static java.util.<START_MOD>List<END_MOD><<START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.compat.Guid<END_MOD>> <START_MOD>getMemoryDiskIdsFromSnapshots<END_MOD>(java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots) { java.util.<START_MOD>List<END_MOD><<START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.compat.Guid<END_MOD>> <START_MOD>memoryDiskIds<END_MOD> = new java.util.<START_MOD>ArrayList<END_MOD><>(); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { <START_MOD>if (snapshot.containsMemory()) { memoryDiskIds<END_MOD>.add(snapshot.<START_MOD>getMemoryDiskId()); memoryDiskIds.add(snapshot.getMetadataDiskId<END_MOD>()); } <START_MOD>}<END_MOD> return <START_MOD>memoryDiskIds<END_MOD>; }
protected boolean shouldRestoreMemory() { return ((!(memoryFromSnapshotUsed)) && (((getFlow()) == (org.ovirt.engine.core.common.action.RunVmParams.RunVmFlow.RESUME_HIBERNATE)) || (org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(org.ovirt.engine.core.bll.RunVmCommand.getVm().getClusterArch(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getCompatibilityVersion())))) && ((org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().<START_MOD>getMemoryDiskId<END_MOD>())<START_MOD> != null<END_MOD>); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured, inFenceFlow, kernelFeatures); }
public int getAvailableUnitForScsiDisk(java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, boolean reserveFirstTwoLuns<START_MOD>, boolean reserveForScsiCd<END_MOD>) { int <START_MOD>cdPayloadUnitIndex<END_MOD> = <START_MOD>org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdPayloadDeviceIndex("scsi"); int cdUnitIndex = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdDeviceIndex("scsi"); int unit = <END_MOD>(reserveFirstTwoLuns) ? <START_MOD>reserveForScsiCd ? (java.lang.Math.max(cdPayloadUnitIndex, cdUnitIndex)) + 1 : <END_MOD>2 : 0; if (vmDeviceUnitMap == null) { return unit; } while (<START_MOD>((reserveForScsiCd && (unit == cdPayloadUnitIndex)) || (reserveForScsiCd && (unit == cdUnitIndex))) || (<END_MOD>vmDeviceUnitMap.containsValue(unit))<START_MOD>)<END_MOD> { unit++; } return unit; }
public org.ovirt.engine.core.bll.ValidationResult externalNetworkDetailsUnchanged(org.ovirt.engine.core.common.businessentities.network.Network newNetwork) { return ((((<START_MOD>(<END_MOD>java.util.Objects.equals(network.getVlanId(), newNetwork.getVlanId())) && ((network.<START_MOD>getName()) == (newNetwork.getName()))) && ((network.<END_MOD>getMtu()) == (newNetwork.getMtu()))) && ((network.getStp()) == (newNetwork.getStp()))) && ((network.isVmNetwork()) == (newNetwork.isVmNetwork()))) && (java.util.Objects.equals(network.getProvidedBy(), newNetwork.getProvidedBy())) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_DETAILS_CANNOT_BE_EDITED); }
protected void setDefaultSwitchTypeIfNeeded() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if (cluster.<START_MOD>hasRequiredSwitchType<END_MOD>(<START_MOD>null<END_MOD>)) { org.ovirt.engine.core.common.network.SwitchType defaultSwitchType = org.ovirt.engine.core.common.network.DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } }
private org.ovirt.engine.core.common.action.ActionReturnValue <START_MOD>addNetwork(org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.common.businessentities.network.Network network, boolean <END_MOD>attachToAllClusters<START_MOD>) { org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters params = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(<END_MOD>dataCenterId, <START_MOD>network); params.setVnicProfileRequired(false); if (attachToAllClusters<END_MOD>) { org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = runInternalQuery(QueryType.GetClustersByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId)); java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = queryReturnValue.getReturnValue(); <START_MOD>java.util.List<org.ovirt.engine.core.compat.Guid> clusterIds =<END_MOD> clusters.stream().map(Cluster::getId).collect(java.util.stream.Collectors.toList())<START_MOD>; params.setNetworkClusterList(networkHelper.createNetworkClusters(clusterIds)<END_MOD>); }<START_MOD> return runInternalAction(ActionType.AddNetwork, params); }<END_MOD>
public void updateHostStatusAfterSuccessfulUpgrade() { org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicHostData = vdsDynamicDao.get(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVdsId()); dynamicHostData.setUpdateAvailable(false); vdsDynamicDao.update(dynamicHostData); if ((<START_MOD>(<END_MOD>org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getVdsType()) == (org.ovirt.engine.core.common.businessentities.VDSType.VDS)) <START_MOD>&& (!(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getParameters().isReboot()))) <END_MOD>{ if ((org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getParameters().getInitialStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance)) { setVdsStatus(VDSStatus.Maintenance); } else { if (org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getHighlyAvailableIsConfigured()) { haMaintenanceFailed = !(hostedEngineHelper.updateHaLocalMaintenanceMode(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds(), false)); } setVdsStatus(VDSStatus.Initializing); } } }
public static boolean isStatusOk(java.util.Map<java.lang.String, java.lang.Object> response) { if ((response.get("error")) != null) { <START_MOD>java.lang.String errorCode = ((response.get("error_code")) == null) ? ((java.lang.String) (response.get("error"))) : ((java.lang.String) (response.get("error_code"))); java.lang.String errorDescription = ((response.get("error_description")) == null) ? ((java.lang.String) (response.get("error"))) : ((java.lang.String) (response.get("error_description"))); <END_MOD>throw new java.lang.RuntimeException(java.lang.String.format( %s <START_MOD>errorCode<END_MOD>, <START_MOD>errorDescription<END_MOD>)); } return true; }
<START_MOD>private void createVnicProfile() { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = networkHelper.createVnicProfile(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork()); if (org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().isExternal()) { vnicProfile.setNetworkFilterId(null); } vnicProfileDao.save(vnicProfile); }<END_MOD>
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.utils.NetworkUtils.setNetworkVdsmName(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { networkDao.save(getNetwork()); if ((getNetwork().isVmNetwork()) && (getParameters().isVnicProfileRequired())) { <START_MOD>createVnicProfile(); } <END_MOD>org.ovirt.engine.core.bll.network.dc.networkHelper.<START_MOD>addPermissionsOnNetwork(getUserId(), getNetwork().getId()); return null<END_MOD>; }<START_MOD>); runClusterAttachment(); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.<END_MOD>getNetwork().getId()); <START_MOD>org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.setSucceeded(true)<END_MOD>; }
private org.ovirt.engine.core.common.action.ActionReturnValue addNetwork(org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.common.businessentities.network.Network network, boolean attachToAllClusters) { org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters params = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(dataCenterId, network); if (attachToAllClusters) { params.setNetworkClusterList(networkHelper.createNetworkClusters(getAllClusterIdsInDataCenter(dataCenterId))); } return runInternalAction(ActionType.AddNetwork, params); }
void initialize(boolean engineStartup, java.util.List<java.lang.String> macsForMacPool) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.info( {} this); this.macsStorage = createMacsStorage(this.rangesBoundaries); org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug( {} with macs: {} this, macsForMacPool); java.util.List<java.lang.String> notAddedMacs = addMacs(macsForMacPool); if (!(notAddedMacs.isEmpty())) { if (engineStartup) { java.lang.String auditLogMessage =   MACs violates duplicity restriction, and was pushed into MAC pool without respect to it: + notAddedMacs; auditLogDirector.log(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(), AuditLogType.MAC_ADDRESS_VIOLATES_NO_DUPLICATES_SETTING, auditLogMessage); forceAddMacs(notAddedMacs); } else { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.MAC_POOL_INITIALIZATION_FAILED, <START_MOD>org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.UNABLE_TO_INITIALIZE_MAC_POOL_DUE_TO_EXISTING_DUPLICATES);<END_MOD> } } org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.info( initializing {}. Available MACs in pool: {} this, macsStorage.getAvailableMacsCount()); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } oldMacPool = macPoolDao.get(getMacPoolId()); return <START_MOD>(<END_MOD>((validate(new org.ovirt.engine.core.bll.MacPoolValidator(oldMacPool).macPoolExists())) && (validate(new org.ovirt.engine.core.bll.MacPoolValidator(getMacPoolEntity()).hasUniqueName()))) && (validate(org.ovirt.engine.core.bll.UpdateMacPoolCommand.validateDefaultFlagIsNotChanged(oldMacPool, getMacPoolEntity())))<START_MOD>) && (validate(validateDuplicatesConfiguration()))<END_MOD>; }
@java.lang.Override protected void executeCommand() { registerRollbackHandler(((org.ovirt.engine.core.utils.transaction.TransactionRollbackListener) (() -> org.ovirt.engine.core.<START_MOD>utils.transaction.TransactionSupport.executeInNewTransaction(((TransactionMethod<java.lang.Void>) (() -> { org.ovirt.engine.core.<END_MOD>bll.macPoolPerCluster.<START_MOD>createPool<END_MOD>(oldMacPool<START_MOD>); return null; }))<END_MOD>)))); macPoolDao.update(getMacPoolEntity()); macPoolPerCluster.modifyPool(getMacPoolEntity()); setSucceeded(true); getReturnValue().setActionReturnValue(getMacPoolId()); }
<START_MOD>public void testCreateMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool) { macPoolFactory.createMacPool(macPool, false); }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage cinderDisk) { org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters createParams = new org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (diskDao.get(cinderDisk.getId()))).getImageId()); createParams.setVmSnapshotId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getNewActiveSnapshotId()); createParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); createParams.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDescription()); createParams.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getSnapshotType()); createParams.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getActionType()); createParams.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters()); return createParams; }<END_MOD>
<START_MOD>public org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters.CreateSnapshotStage getCreateSnapshotStage() { return createSnapshotStage; }<END_MOD>
<START_MOD>public void setCreateSnapshotStage(org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters.CreateSnapshotStage createSnapshotStage) { this.createSnapshotStage = createSnapshotStage; }<END_MOD>
<START_MOD>@java.lang.Override public void init() { org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().setUseCinderCommandCallback(isCinderDisksExist()); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.VM, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId())); setSnapshotName(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription()); setStoragePoolId(((org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm()) != null ? org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm().getStoragePoolId() : null)); liveSnapshotSucceeded = false; }<END_MOD>
public void onSave() { if (((getProgress()) != null) || (!(validate()))) { return; } startProgress(); org.ovirt.engine.core.common.businessentities.VM vm = getVm(); java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> params = new java.util.ArrayList<>(); java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotDisksIds = null; if ((getSnapshotDisks().getSelectedItems()) != null) { snapshotDisksIds = getSnapshotDisks().getSelectedItems().stream().map(BaseDisk::getId).collect(java.util.stream.Collectors.toSet()); } org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters param = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(vm.getId(), getDescription().getEntity(), getMemory().getEntity(), snapshotDisksIds); param.setQuotaId(vm.getQuotaId()); params.add(param); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.<START_MOD>CreateSnapshotForVm<END_MOD>, params, ( result) -> { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel) (result.getState())); localModel.stopProgress(); getCancelCommand().execute(); }, this); }
<START_MOD>private void createSnapshotsForDisks() { org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeParameters parameters = new org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeParameters(); parameters.setDiskIdsToIgnoreInChecks(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIdsToIgnoreInChecks()); parameters.setDiskToImageIds(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskToImageIds()); parameters.setNewActiveSnapshotId(newActiveSnapshotId); parameters.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()); parameters.setDiskIds(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIds()); parameters.setVmId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.CreateSnapshotVolume, parameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getContext(), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getLock())); }<END_MOD>
protected javax.ws.rs.core.Response doAdd(org.ovirt.engine.api.model.Snapshot snapshot, boolean block) { validateParameters(snapshot, "description"); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters snapshotParams = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(parentId, snapshot.getDescription()); if (snapshot.isSetPersistMemorystate()) { snapshotParams.setSaveMemory(snapshot.isPersistMemorystate()); } if (snapshot.isSetDiskAttachments()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskToImageIds = mapDisks(snapshot.getDiskAttachments()); snapshotParams.setDiskIds(diskToImageIds.keySet()); snapshotParams.setDiskToImageIds(diskToImageIds); } return performCreate(ActionType.<START_MOD>CreateSnapshotForVm<END_MOD>, snapshotParams, new org.ovirt.engine.api.restapi.resource.BackendSnapshotsResource.SnapshotIdResolver(), block); }
<START_MOD>private org.ovirt.engine.core.common.action.ImagesActionsParametersBase buildCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { org.ovirt.engine.core.common.action.ImagesActionsParametersBase result = new org.ovirt.engine.core.common.action.ImagesActionsParametersBase(image.getImageId()); result.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDescription()); result.setSessionId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getSessionId()); result.setQuotaId(image.getQuotaId()); result.setDiskProfileId(image.getDiskProfileId()); result.setVmSnapshotId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getNewActiveSnapshotId()); result.setEntityInfo(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getEntityInfo()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getActionType()); result.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters()); result.setDestinationImageId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDiskToImageIds().get(image.getId())); if (org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDiskIdsToIgnoreInChecks().contains(image.getId())) { result.setLeaveLocked(true); } return result; }<END_MOD>
<START_MOD>private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImagesForVm() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = diskDao.getAllForVm(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = new java.util.ArrayList(getDiskImages(disks)); allDisks.addAll(imagesHandler.getCinderLeafImages(disks)); return allDisks; }<END_MOD>
private void createStatelessSnapshot() { warnIfNotAllDisksPermitSnapshots(); org.ovirt.engine.core.bll.RunVmCommand.log.info( stateless snapshot for VM '{}' ({}) org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters createAllSnapshotsFromVmParameters = buildCreateSnapshotParameters(); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.<START_MOD>CreateSnapshotForVm<END_MOD>, createAllSnapshotsFromVmParameters, createContextForStatelessSnapshotCreation()); org.ovirt.engine.core.bll.RunVmCommand.setLock(null); setSucceeded(actionReturnValue.getSucceeded()); if (!(actionReturnValue.getSucceeded())) { if (areDisksLocked(actionReturnValue)) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IRS_IMAGE_STATUS_ILLEGAL); } org.ovirt.engine.core.bll.RunVmCommand.getReturnValue().setFault(actionReturnValue.getFault()); org.ovirt.engine.core.bll.RunVmCommand.log.error( to create stateless snapshot for VM '{}' ({}) org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); } }
<START_MOD>private org.ovirt.engine.core.common.action.ImagesActionsParametersBase buildCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { org.ovirt.engine.core.common.action.ImagesActionsParametersBase result = new org.ovirt.engine.core.common.action.ImagesActionsParametersBase(image.getImageId()); result.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription()); result.setSessionId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSessionId()); result.setQuotaId(image.getQuotaId()); result.setDiskProfileId(image.getDiskProfileId()); result.setVmSnapshotId(newActiveSnapshotId); result.setEntityInfo(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getEntityInfo()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getActionType()); result.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters()); result.setDestinationImageId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskToImageIds().get(image.getId())); if (org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIdsToIgnoreInChecks().contains(image.getId())) { result.setLeaveLocked(true); } return result; }<END_MOD>
<START_MOD>private void handleVdsLiveSnapshotFailure(org.ovirt.engine.core.common.errors.EngineException e) { handleVmFailure(e, AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE, ("Could not perform live snapshot due to error, VM will still be configured to the new created" + " snapshot: {}")); }<END_MOD>
<START_MOD>private void removeMemoryVolumesOfSnapshot(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.action.ActionReturnValue retVal = runInternalAction(ActionType.RemoveMemoryVolumes, new org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters(snapshot.getMemoryVolume(), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId()), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.cloneContextAndDetachFromParent()); if (!(retVal.getSucceeded())) { log.error("Failed to remove memory volumes of snapshot '{}' ({})", snapshot.getDescription(), snapshot.getId()); } }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage cinderDisk) { org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters createParams = new org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (diskDao.get(cinderDisk.getId()))).getImageId()); createParams.setVmSnapshotId(newActiveSnapshotId); createParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); createParams.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription()); createParams.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()); createParams.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getActionType()); createParams.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters()); return createParams; }<END_MOD>
<START_MOD>@java.lang.Override protected void endVmCommand() { incrementVmGeneration(); thawVm(); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.endActionOnDisks(); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.setSucceeded(((taskGroupSucceeded) && ((!(liveSnapshotRequired)) || (liveSnapshotSucceeded)))); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getReturnValue().setEndActionTryAgain(false); }<END_MOD>
<START_MOD>protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksList() { if ((cachedSelectedActiveDisks) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesAndCinderForVm = getDiskImagesForVm(); if ((org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDiskIds()) == null) { cachedSelectedActiveDisks = imagesAndCinderForVm; } else { cachedSelectedActiveDisks = getDiskImagesForVm().stream().filter(( d) -> getParameters().getDiskIds().contains(d.getId())).collect(java.util.stream.Collectors.toList()); } } return cachedSelectedActiveDisks; }<END_MOD>
<START_MOD>private org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()) == (Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.StatelessSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm()); } if ((org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().isSaveMemory()) && (isLiveSnapshotApplicable())) { boolean wipeAfterDelete = getDisksList().stream().anyMatch(DiskImage::isWipeAfterDelete); return new org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getStoragePool(), this, vmOverheadCalculator, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription(), wipeAfterDelete); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.businessentities.Snapshot addSnapshotToDB(org.ovirt.engine.core.compat.Guid snapshotId, org.ovirt.engine.core.bll.memory.MemoryImageBuilder memoryImageBuilder) { cachedSelectedActiveDisks = null; return org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getSnapshotsManager().addSnapshot(snapshotId, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription(), Snapshot.SnapshotStatus.LOCKED, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType(), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm(), true, memoryImageBuilder.getVolumeStringRepresentation(), null, getDisksList(), null, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getCompensationContext()); }<END_MOD>
<START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAllExternalNetworksLikedToPhysicalNetwork(org.ovirt.engine.core.compat.Guid physicalNetworkId);<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAllExternalNetworksLikedToPhysicalNetwork(org.ovirt.engine.core.compat.Guid physicalNetworkId) { return getCallsHandler().executeReadList("GetAllNetworksByProviderPhysicalNetworkId", networkRowMapper, getCustomMapSqlParameterSource().addValue("network_id", physicalNetworkId)); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult notLinkedToExternalNetwork() { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> linkedExternalNetworks = getNetworkDao().getAllExternalNetworksLikedToPhysicalNetwork(network.getId()); java.lang.String linkedExternalNetworkNames = linkedExternalNetworks.stream().map(Network::getName).collect(java.util.stream.Collectors.joining(",")); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_PHYSICAL_NETWORK_LINKED_TO_EXTERNAL_NETWORK, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkValidator.NETWORK_LIST_REPLACEMENT, linkedExternalNetworkNames)).when((!(linkedExternalNetworks.isEmpty()))); }<END_MOD>
@org.junit.Test public void defaultProperties() { try { java.lang.String basedir = java.lang.System.getProperty("basedir"); assumeNotNull(basedir,   isn run via Maven. Please set the basedir system property org.ovirt.engine.core.utils.osinfo.OsinfoPropertiesParser.parse(java.nio.file.Paths.get(basedir, "../../../../packaging/conf/osinfo-defaults.properties").toString()); } catch (java.lang.Exception e) { <START_MOD>fail((<END_MOD>( will fail to load with a broken osinfo properties file. <START_MOD>+ <END_MOD>( fix the properties file or osinfo.jj grammar under org.ovirt.engine.core.utils.osinfo. <START_MOD>+   thrown: +<END_MOD> e<START_MOD>))<END_MOD>; } }
private static org.ovirt.engine.core.common.utils.Pair dnsServersOnly() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setStartOnBoot(true); vmInit.setNetworks(java.util.Arrays.asList(underTest)); vmInit.setDnsSearch( search2 vmInit.setDnsServers( nameserver2 nameserver3 java.lang.String expectedOutput = "{\n" + ((((((((((((((   [ +   { +       +       +   }, +   { +       +       +   }, +   { +       +       +   }<START_MOD> +   ] + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit<END_MOD>, expectedOutput); }
private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> mapServices(org.ovirt.engine.core.common.businessentities.VmInit vmInit) { java.util.List<java.util.Map<java.lang.String, java.lang.Object>> services = new java.util.LinkedList<>(); if (<START_MOD>hasDnsServers<END_MOD>(vmInit<START_MOD>)) { for (java.lang.String dnsServer : vmInit<END_MOD>.getDnsServers()<START_MOD>.split(  <END_MOD> { java.<START_MOD>util.Map<java.lang.String, java.lang.Object> service<END_MOD> = <START_MOD>new java.util.HashMap<>(); service.put("type", "dns"); service.put("address",<END_MOD> dnsServer); services.add(service); } } <START_MOD>return services; <END_MOD>}
<START_MOD>private void addDnsData(org.ovirt.engine.core.common.businessentities.VmInit vmInit, java.util.Map<java.lang.String, java.lang.Object> network) { if (network == null) { return; } if (hasDnsServers(vmInit)) { network.put("dns_nameservers", java.util.Arrays.asList(vmInit.getDnsServers().split(" "))); } if (hasDnsSearch(vmInit)) { network.put("dns_search", java.util.Arrays.asList(vmInit.getDnsSearch().split(" "))); } }<END_MOD>
@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.compat.Guid cmdId = command.getCommandId(); if (status == (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { org.ovirt.engine.core.bll.SerialChildExecutingCommand serialChildExecutingCommand = ((org.ovirt.engine.core.bll.SerialChildExecutingCommand) (command)); if ((!anyFailed) || (serialChildExecutingCommand.ignoreChildCommandFailure())) { try { boolean endCommand = !(serialChildExecutingCommand.performNextOperation(completedChildren)); if (!endCommand) { return; } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.<START_MOD>error<END_MOD>( '{}' id: '{}' failed when attempting to perform the next operation, marking as FAILED '{}' command.getActionType(), cmdId, childCmdIds, command.getCommandStatus()<START_MOD>, e<END_MOD>); serialChildExecutingCommand.handleFailure(); anyFailed = true; } } else { serialChildExecutingCommand.handleFailure(); } } else { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.info( '{}' id: '{}' execution didn complete, not proceeding to perform the next operation command.getActionType(), cmdId); } setCommandEndStatus(command, anyFailed, status, childCmdIds); }
<START_MOD>public java.lang.Long getFree() { return free; }<END_MOD>
<START_MOD>@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(directory()); optional(filename()); or(mandatory(host().id()), mandatory(host().name())); }<END_MOD>
public void setProperties(org.ovirt.engine.core.common.businessentities.gluster.BrickProperties brickProperties) { getStatus().setEntity(brickProperties.getStatus()); getPort().setEntity(brickProperties.getPort()); getPid().setEntity(brickProperties.getPid()); getTotalSize().setEntity(brickProperties.getTotalSize()); getFreeSize().setEntity(brickProperties.getFreeSize()); <START_MOD>getConfirmedFreeSize().setEntity(brickProperties.getConfirmedFreeSize()); <END_MOD>getDevice().setEntity(brickProperties.getDevice()); getBlockSize().setEntity(brickProperties.getBlockSize()); getMountOptions().setEntity(brickProperties.getMntOptions()); getFileSystem().setEntity(brickProperties.getFsName()); getRdmaPort().setEntity(brickProperties.getRdmaPort()); }
<START_MOD>public void setConfirmedFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> freeSize) { this.freeSize = freeSize; }<END_MOD>
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> getFreeSize() { return <START_MOD>confirmedFreeSize<END_MOD>; }
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> getConfirmedFreeSize() { return freeSize; }<END_MOD>
public void setFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> <START_MOD>confirmedFreeSize<END_MOD>) { this.<START_MOD>confirmedFreeSize<END_MOD> = <START_MOD>confirmedFreeSize<END_MOD>; }
@java.lang.Override public void setMainSelectedItem(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity selectedItem) { driver.edit(getDetailModel()); replicaFormItem.setIsAvailable(selectedItem.getVolumeType().isReplicatedType()); stripeFormItem.setIsAvailable(selectedItem.getVolumeType().isStripedType()); disperseCountFormItem.setIsAvailable(selectedItem.getVolumeType().isDispersedType()); redundancyCountFormItem.setIsAvailable(selectedItem.getVolumeType().isDispersedType()); java.util.ArrayList<com.google.gwt.user.client.ui.ValueLabel<java.lang.Long>> volumeCapacityDetails = new java.util.ArrayList(java.util.Arrays.<com.google.gwt.user.client.ui.ValueLabel<java.lang.Long>>asList(volumeTotalCapacity, volumeUsedCapacity, volumeFreeCapacity<START_MOD>, volumeConfirmedFreeCapacity<END_MOD>)); volumeCapacityDetailsLabel.setValue(volumeCapacityDetails); formBuilder.update(getDetailModel()); }
<START_MOD>public void update(org.ovirt.engine.core.compat.Guid vdsId, java.util.Map<java.lang.String, java.lang.Object> values) { int entryCount = (values != null) ? values.size() : 0; java.lang.String[] pluginTypes = new java.lang.String[entryCount]; java.lang.String[] bindingIds = new java.lang.String[entryCount]; if (values != null) { int i = 0; for (java.util.Map.Entry<java.lang.String, java.lang.Object> pair : values.entrySet()) { pluginTypes[i] = pair.getKey(); bindingIds[i] = ((java.lang.String) (pair.getValue())); } } org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", vdsId).addValue("plugin_types", pluginTypes).addValue("provider_binding_host_ids", bindingIds); getCallsHandler().executeModification("UpdateHostProviderBinding", parameterSource); }<END_MOD>
<START_MOD>public java.lang.String get(org.ovirt.engine.core.compat.Guid vdsId, java.lang.String pluginType) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", vdsId).addValue("plugin_type", pluginType); return getCallsHandler().executeRead("GetHostProviderBinding", org.ovirt.engine.core.dao.provider.HostProviderBindingDaoImpl.rowMapper, parameterSource); }<END_MOD>
private void persistTopology(org.ovirt.engine.core.common.businessentities.VDS host, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> dbNics, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks, org.ovirt.engine.core.common.vdscommands.UserConfiguredNetworkData userConfiguredData) { vdsDynamicDao.updateDnsResolverConfiguration(host.getId(), host.getReportedDnsResolverConfiguration()); <START_MOD>hostProviderBindingDaoImpl.update(host.getId(), host.getOpenstackBindingHostIds()); <END_MOD>final org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersister networkInterfacesPersister = new org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersisterImpl(interfaceDao, host.getInterfaces(), dbNics, userConfiguredData.getUserOverriddenNicValuesByNicName()); networkInterfacesPersister.persistTopology(); createHostNetworkAttachmentsPersister(host, clusterNetworks, userConfiguredData).persistNetworkAttachments(); }
<START_MOD>@java.lang.Override public java.lang.Long getRawValue(org.ovirt.engine.core.common.businessentities.StorageDomain object) { java.lang.Integer confirmedAvailableSize = object.getConfirmedAvailableDiskSize(); return confirmedAvailableSize == null ? null : java.lang.Long.valueOf(confirmedAvailableSize); }<END_MOD>
protected java.util.Stack<org.ovirt.engine.core.sso.utils.InteractiveAuth> getAuthSeq(org.ovirt.engine.core.sso.utils.SsoSession ssoSession) { java.lang.String scopes = ssoSession.getScope(); java.lang.String appAuthSeq = ssoContext.getSsoLocalConfig().getProperty("SSO_AUTH_LOGIN_SEQUENCE"); java.lang.String authSeq = null; if (!(scopes.contains("ovirt-ext=auth:sequence-priority="))) { authSeq = "~"; } else { for (java.lang.String scope : org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList(scopes)) { if (scope.startsWith("ovirt-ext=auth:sequence-priority=")) { java.lang.String[] tokens = scope.trim().split("=", 3); authSeq = tokens[2]; } } } java.util.List<org.ovirt.engine.core.sso.utils.InteractiveAuth> authSeqList = org.ovirt.engine.core.sso.servlets.OAuthAuthorizeServlet.getAuthListForSeq(authSeq); if ((org.apache.commons.lang.StringUtils.isNotEmpty(authSeq)) && (authSeq.startsWith("~"))) { for (char c : appAuthSeq.toCharArray()) { if (!(authSeqList.contains(org.ovirt.engine.core.sso.utils.InteractiveAuth.valueOf(("" + c))))) { authSeqList.add(org.ovirt.engine.core.sso.utils.InteractiveAuth.valueOf(("" + c))); } } authSeqList.retainAll(org.ovirt.engine.core.sso.servlets.OAuthAuthorizeServlet.getAuthListForSeq(appAuthSeq)); } java.util.Collections.reverse(authSeqList); java.util.Stack<org.ovirt.engine.core.sso.utils.InteractiveAuth> authSeqStack = new java.util.Stack<>(); authSeqStack.addAll(authSeqList); return authSeqStack; }
private void deScheduleTimeout(<START_MOD>org.ovirt.engine.core.compat.Guid poolId<END_MOD>) { <START_MOD>java.util.concurrent.ScheduledFuture<?> scheduledTask = nonOperationalPools.get(poolId); <END_MOD>if (scheduledTask != null<START_MOD>) { synchronized(scheduledTask<END_MOD>) { scheduledTask.cancel(true); <START_MOD>nonOperationalPools.put(poolId,<END_MOD> null<START_MOD>)<END_MOD>; } }<START_MOD> }<END_MOD>
public void poolStatusChanged(org.ovirt.engine.core.compat.Guid poolId, org.ovirt.engine.core.common.businessentities.StoragePoolStatus status) { if ((nonOperationalPools.containsKey(poolId)) && (status != (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational))) { <START_MOD>deScheduleTimeout<END_MOD>(poolId); nonOperationalPools.remove(poolId); } else if (status == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational)) { nonOperationalPools.put(poolId, scheduleTimeout(<START_MOD>poolId<END_MOD>)); } }
protected boolean perform() { try { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().<START_MOD>setTotalMigrationTime<END_MOD>(new java.util.Date()); if (((unplugPassthroughNics()) && (connectLunDisks(getDestinationVdsId()))) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } runningFailed(); return false; } catch (java.lang.Exception e) { runningFailed(); throw e; } }
<START_MOD>private void handleAuditLog(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) { try { java.lang.String clientSecret = request.getParameter("clientSecret"); java.lang.String engineClientSecret = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_CLIENT_SECRET"); if (org.ovirt.engine.core.uutils.crypto.EnvelopePBE.check(clientSecret, engineClientSecret)) { java.lang.String loginErrMsg = request.getParameter("loginErrMsg"); java.lang.String userName = request.getParameter("userName"); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); event.addCustomValue("LoginErrMsg", loginErrMsg); event.setUserName(userName); auditLogDirector.log(event, AuditLogType.USER_LOGIN_FAILED_WITH_MSG); } } catch (java.lang.Exception ex) { response.setStatus(java.net.HttpURLConnection.HTTP_INTERNAL_ERROR); } finally { response.setStatus(java.net.HttpURLConnection.HTTP_OK); } }<END_MOD>
<START_MOD>public java.lang.String getUsernameWithProfile() { java.lang.String user = java.lang.String.format("%s@%s", org.apache.commons.lang.StringUtils.defaultIfEmpty(username, ""), org.apache.commons.lang.StringUtils.defaultIfEmpty(profile, "")); return "@".equals(user) ? "N/A" : user; }<END_MOD>
<START_MOD>public static void notifyClientOfAuditLogEvent(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, java.lang.String clientId, java.lang.String userName, java.lang.String loginErrMsg) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.ClientInfo clientInfo = ssoContext.getClienInfo(clientId); java.lang.String url = clientInfo.getClientNotificationCallback(); if (org.apache.commons.lang.StringUtils.isNotEmpty(url)) { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.sso.utils.SsoUtils.createPost(url); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(3); form.add(new org.apache.http.message.BasicNameValuePair("event", "auditLog")); form.add(new org.apache.http.message.BasicNameValuePair("userName", userName)); form.add(new org.apache.http.message.BasicNameValuePair("loginErrMsg", loginErrMsg)); form.add(new org.apache.http.message.BasicNameValuePair("clientSecret", clientInfo.getClientSecret())); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form, java.nio.charset.StandardCharsets.UTF_8)); org.ovirt.engine.core.sso.utils.SsoUtils.execute(request, ssoContext, clientId); } }<END_MOD>
<START_MOD>private java.util.Optional<java.lang.String> checkExternalNetworkConnection(org.ovirt.engine.core.common.businessentities.network.Network network, java.util.List<java.lang.String> hostNetworks) { if (!(network.getProvidedBy().isSetPhysicalNetworkId())) { return java.util.Optional.empty(); } org.ovirt.engine.core.common.businessentities.network.Network physicalNetwork = networkDao.get(network.getProvidedBy().getPhysicalNetworkId()); return java.util.Optional.ofNullable((hostNetworks.contains(physicalNetwork.getName()) ? null : physicalNetwork.getName())); }<END_MOD>
protected boolean validate() { getName().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(255), new org.ovirt.engine.ui.uicommonweb.validation.I18NNameValidation() }); getDescription().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.AsciiOrNoneValidation() }); <START_MOD>getHostAffinityRule().setIsValid((((getHostAffinityRule().getSelectedItem()) == (org.ovirt.engine.core.common.scheduling.EntityAffinityRule.DISABLED)) || (!(getHostsSelectionModel().getSelectedHostIds().isEmpty())))); <END_MOD>return (<START_MOD>(<END_MOD>getName().getIsValid()) && (getDescription().getIsValid())<START_MOD>) && (getHostAffinityRule().getIsValid())<END_MOD>; }
private java.nio.file.Path createInventoryFile(org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command) throws java.io.IOException { java.nio.file.Path inventoryFile = null; if ((command.inventoryFile()) == null) { org.ovirt.engine.core.common.utils.ansible.AnsibleExecutor.log.debug( hosts: {} command.hostnames()); inventoryFile = java.nio.file.Files.createTempFile("ansible-inventory", ""); java.<START_MOD>lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append("[all]"); sb.append(java.lang.System.lineSeparator()); sb.append(org.apache.commons.lang.StringUtils.join(command.hostnames(), java.lang.System.lineSeparator())); sb.append(java.lang.System.lineSeparator()); sb.append("[all:vars]"); sb.append(java.lang.System.lineSeparator()); sb.append( /dev/null sb.append(java.lang.System.lineSeparator()); java.<END_MOD>nio.file.Files.write(inventoryFile, <START_MOD>sb.toString(<END_MOD>).getBytes()); command.inventoryFile(inventoryFile); } return inventoryFile; }
<START_MOD>public org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData readVmTemplateFromOva(java.lang.String ovf) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate(); org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(template); ovfManager.importTemplateFromOva(ovf, fullEntityOvfData); template.setInterfaces(fullEntityOvfData.getInterfaces()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : fullEntityOvfData.getDiskImages()) { template.getDiskTemplateMap().put(disk.getId(), disk); } return fullEntityOvfData; }<END_MOD>
<START_MOD>public void importTemplateFromOva(java.lang.String ovfstring, org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { org.ovirt.engine.core.utils.ovf.OvfReader ovf = null; try { ovf = new org.ovirt.engine.core.utils.ovf.OvfTemplateReader(new org.ovirt.engine.core.utils.ovf.xml.XmlDocument(ovfstring), fullEntityOvfData, osRepository); ovf.build(); initIcons(fullEntityOvfData.getVmBase()); } catch (java.lang.Exception ex) { java.lang.String message = generateOvfReaderErrorMessage(ovf, ex); logOvfLoadError(message, ovfstring); throw new org.ovirt.engine.core.utils.ovf.OvfReaderException(message); } }<END_MOD>
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createIcon() { org.gwtbootstrap3.client.ui.html.Span iconSpan = new org.gwtbootstrap3.client.ui.html.Span(); iconSpan.addStyleName(Styles.FONT_AWESOME_BASE); if (SnapshotStatus.IN_PREVIEW.equals(getEntity().getStatus())) { iconSpan.addStyleName(IconType.EYE.getCssName()); } else if (SnapshotStatus.LOCKED.equals(getEntity().getStatus())) { iconSpan.addStyleName(IconType.LOCK.getCssName()); } else { iconSpan.addStyleName(<START_MOD>(getEntity().containsMemory() ? IconType.MICROCHIP.getCssName() : <END_MOD>IconType.CAMERA.getCssName())<START_MOD>)<END_MOD>; } iconSpan.addStyleName(PatternflyConstants.PF_LIST_VIEW_ICON_SM); iconPanel.add(iconSpan); return iconPanel; }
protected void <START_MOD>removeVmImages<END_MOD>() { <START_MOD>commandCoordinatorUtil.executeAsyncCommand<END_MOD>(ActionType.<START_MOD>RemoveAllVmImages<END_MOD>, <START_MOD>withRootCommandInfo<END_MOD>(<START_MOD>buildRemoveAllVmImagesParameters<END_MOD>()), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.<START_MOD>cloneContextAndDetachFromParent<END_MOD>()); }
<START_MOD>private org.ovirt.engine.core.common.action.RemoveAllVmImagesParameters buildRemoveAllVmImagesParameters() { org.ovirt.engine.core.common.action.RemoveAllVmImagesParameters params = new org.ovirt.engine.core.common.action.RemoveAllVmImagesParameters(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId(), diskDao.getAllForVm(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()).stream().map(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class::cast).collect(<END_MOD>java.<START_MOD>util.stream.Collectors.toList())); params.setParentCommand(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getActionType()); params.setEntityInfo(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getEntityInfo()); params.setParentParameters(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters());<END_MOD> return <START_MOD>params<END_MOD>; }
@org.junit.Test public void testGetSoundDevice() throws java.lang.Exception { assertEquals(org.ovirt.engine.core.utils.OsRepositoryImplTest.SOUND_DEVICE, OsRepositoryImpl.INSTANCE.getSoundDevice(777, null<START_MOD>, ChipsetType.I440FX<END_MOD>)); }
public org.ovirt.engine.core.common.businessentities.VmDevice addSoundDevice(org.ovirt.engine.core.common.businessentities.VmBase vmBase<START_MOD>, java.util.function.Supplier<org.ovirt.engine.core.common.businessentities.Cluster> clusterSupplier<END_MOD>) { <START_MOD>org.ovirt.engine.core.common.businessentities.ChipsetType chipset = org.ovirt.engine.core.bll.utils.EmulatedMachineUtils.getEffectiveChipset(vmBase, clusterSupplier); if (vmBase instanceof org.ovirt.engine.core.common.businessentities.VmTemplate) { <END_MOD>return addSoundDevice(vmBase.getId(), vmBase.getOsId(), <START_MOD>org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(((org.ovirt.engine.core.common.businessentities.VmBase) (null)), clusterSupplier), chipset); } return addSoundDevice(vmBase.getId(), vmBase.getOsId(), <END_MOD>clusterUtils.getCompatibilityVersion(vmBase)<START_MOD>, chipset<END_MOD>); }
@java.lang.Override public javax.ws.rs.core.Response <START_MOD>exportToPathOnHost<END_MOD>(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.<START_MOD>ExportOvaParameters<END_MOD> params = new org.ovirt.engine.core.common.action.<START_MOD>ExportOvaParameters(); params.setEntityType(VmEntityType.TEMPLATE); params.setEntityId<END_MOD>(guid<START_MOD>);<END_MOD> <START_MOD>params.setProxyHostId(getHostId<END_MOD>(action)); <START_MOD>params.setDirectory<END_MOD>(action.<START_MOD>getDirectory<END_MOD>())<START_MOD>;<END_MOD> <START_MOD>params.setName<END_MOD>(action.<START_MOD>getFilename<END_MOD>()); return doAction(ActionType.<START_MOD>ExportOva<END_MOD>, params, action); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostViolations = getHostViolationCount(false, hosts, vm, new org.ovirt.engine.core.common.scheduling.PerHostMessages()); <START_MOD>org.ovirt.engine.core.compat.Guid currentHostId = vm.getRunOnVds(); int currentHostScore = hostViolations.getOrDefault(currentHostId, org.ovirt.engine.core.bll.scheduling.policyunits.VmToHostAffinityWeightPolicyUnit.DEFAULT_SCORE); <END_MOD>java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> retList = new java.util.ArrayList<>(); <START_MOD>for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { <END_MOD>int score<START_MOD> = hostViolations.getOrDefault(<END_MOD>host<START_MOD>.getId(), org.ovirt.engine.core.bll.scheduling.policyunits.VmToHostAffinityWeightPolicyUnit.DEFAULT_SCORE); if ((score >= currentHostScore) && (!(host.getId().equals(currentHostId)))<END_MOD>) { score <START_MOD>+= 1; } retList.add(new org.ovirt.engine.core.common.utils.Pair<END_MOD>(host.getId()<START_MOD>, score)); } return<END_MOD> retList; }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> allocate(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.VDS host, boolean ignoreSecurityGroupsOnUpdate) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic); java.util.List<java.lang.String> securityGroups = getSecurityGroups(vnicProfile); java.lang.String hostId = getHostId(host); if (port == null) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(network.getProvidedBy()); com.woorea.openstack.quantum.model.Port portForCreate = createNewPortForAllocate(nic, securityGroups, hostId, externalNetwork); port = getClient().ports().create(portForCreate).execute(); } else { boolean securityGroupsChanged = (!ignoreSecurityGroupsOnUpdate) && (securityGroupsChanged(port.getSecurityGroups(), securityGroups)); boolean hostChanged = hostChanged(port, hostId); updatePort(port, securityGroupsChanged, hostChanged, securityGroups, hostId, nic); } java.util.Map<java.lang.String, java.lang.String> runtimeProperties = createPortAllocationRuntimeProperties(<START_MOD>host.getId(), <END_MOD>port); return runtimeProperties; } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
protected java.util.Map<java.lang.String, java.lang.String> createPortAllocationRuntimeProperties(<START_MOD>org.ovirt.engine.core.compat.Guid vdsId, <END_MOD>com.woorea.openstack.quantum.model.Port port) { java.util.Map<java.lang.String, java.lang.String> runtimeProperties = new java.util.HashMap<>(); runtimeProperties.put("vnic_id", port.getId()); java.lang.String providerType = getProvider().getType().name(); runtimeProperties.put("provider_type", providerType); if (((port.getSecurityGroups()) != null) && (!(port.getSecurityGroups().isEmpty()))) { runtimeProperties.put("security_groups", org.apache.commons.lang.StringUtils.join(port.getSecurityGroups(), ',')); } <START_MOD>java.lang.String pluginType = org.apache.commons.lang.StringUtils.defaultString(getProvider().getAdditionalProperties().getPluginType()); <END_MOD>runtimeProperties.put("plugin_type", <START_MOD>pluginType); java.lang.String bindingId = hostProviderBindingDao.get(vdsId, pluginType); if (bindingId != null) { runtimeProperties.put("binding:host_id", bindingId); }<END_MOD> return runtimeProperties; }
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { long lowMemoryLimit = (parameters.containsKey(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName())) ? java.lang.Long.parseLong(parameters.get(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName())) : 0L; long highMemoryLimit = (parameters.containsKey(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName())) ? java.lang.Long.parseLong(parameters.get(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName())) : java.lang.Long.MAX_VALUE; float maxMemory = getMaxMemoryOfVdsInCluster(hosts); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> scores = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { scores.add(new org.ovirt.engine.core.common.utils.Pair(vds.getId(), calcHostScore(vds.getMaxSchedulingMemory(), maxMemory, lowMemoryLimit, highMemoryLimit))); } return scores; }<END_MOD>
<START_MOD>private<END_MOD> int calcHostScore(float <START_MOD>hostSchedulingMem<END_MOD>, <START_MOD>float<END_MOD> <START_MOD>maxMemory, float lowMemoryLimit, float highMemoryLimit<END_MOD>) { <START_MOD>if<END_MOD> <START_MOD>(hostSchedulingMem > highMemoryLimit) { float memOverLimit<END_MOD> = <START_MOD>hostSchedulingMem - highMemoryLimit; hostSchedulingMem = java.lang.Math.max(0, (lowMemoryLimit - memOverLimit)); } return ((int) ((hostSchedulingMem / maxMemory) * (<END_MOD>(MaxSchedulerWeight) - 1))<START_MOD>) + 1<END_MOD>; }
<START_MOD>public javax.ws.rs.core.Response importVmTemplateFromConfiguration(org.ovirt.engine.api.model.Template template) { org.ovirt.engine.api.model.Initialization initialization = template.getInitialization(); org.ovirt.engine.api.model.Configuration config = initialization.getConfiguration(); org.ovirt.engine.core.common.businessentities.VmTemplate templateConfiguration = getEntity(org.ovirt.engine.core.common.businessentities.VmTemplate.class, QueryType.GetVmTemplateFromConfiguration, new org.ovirt.engine.core.common.queries.GetVmFromConfigurationQueryParameters(org.ovirt.engine.api.restapi.types.VmMapper.map(config.getType(), null), config.getData().trim()), ""); org.ovirt.engine.api.restapi.types.TemplateMapper.map(template, templateConfiguration); org.ovirt.engine.core.compat.Guid clusterId = (namedCluster(template)) ? getClusterId(template) : asGuid(template.getCluster().getId()); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters parameters = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); parameters.setVmTemplate(templateConfiguration); parameters.setClusterId(clusterId); if (initialization.isSetRegenerateIds()) { parameters.setImportAsNewEntity(initialization.isRegenerateIds()); } return performCreate(ActionType.ImportVmTemplateFromConfiguration, parameters, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetVmTemplate, org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class)); }<END_MOD>
private static int setNetworkBootOrder(org.ovirt.engine.core.common.businessentities.VM vm, java.util.<START_MOD>Collection<END_MOD><org.ovirt.engine.core.common.businessentities.VmDevice> devices, int bootOrder) { for (org.ovirt.engine.core.common.businessentities.VmDevice pluggedInterface : org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.sortInterfacesByName(vm, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getPluggedManagedInterfaces(devices))) { pluggedInterface.setBootOrder((++bootOrder)); } return bootOrder; }
private static int setDiskBootOrder(org.ovirt.engine.core.common.businessentities.VM vm, java.util.<START_MOD>Collection<END_MOD><org.ovirt.engine.core.common.businessentities.VmDevice> devices, int bootOrder) { java.util.LinkedList<org.ovirt.engine.core.common.businessentities.VmDevice> diskDevices = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.VmDevice device : devices) { if (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isDisk(device)) { org.ovirt.engine.core.compat.Guid id = device.getDeviceId(); if ((id != null) && (!(id.equals(Guid.Empty)))) { if ((device.getSnapshotId()) == null) { diskDevices.addFirst(device); } else { diskDevices.addLast(device); } } } } for (org.ovirt.engine.core.common.businessentities.VmDevice device : diskDevices) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getDiskVmElement(vm, device.getDeviceId()); if ((dve != null) && (dve.isBoot())) { device.setBootOrder((++bootOrder)); } } return bootOrder; }
<START_MOD>private boolean connectStorageServer(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections, boolean sendNetworkEventOnFailure) { if (connections == null) { return true; } org.ovirt.engine.core.common.vdscommands.StorageServerConnectionManagementVDSParameters parameters = new org.ovirt.engine.core.common.vdscommands.StorageServerConnectionManagementVDSParameters(getVds().getId(), getStoragePool().getId(), storageType, connections); parameters.setSendNetworkEventOnFailure(sendNetworkEventOnFailure); java.util.Map<java.lang.String, java.lang.String> retValues = ((java.util.Map<java.lang.String, java.lang.String>) (runVdsCommand(VDSCommandType.ConnectStorageServer, parameters).getReturnValue())); return storageHelperDirector.getItem(storageType).isConnectSucceeded(retValues, connections); }<END_MOD>
<START_MOD>private boolean connectFileStorageServers(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections) { java.util.Map<org.ovirt.engine.core.common.businessentities.StorageDomainType, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections>> connByType = connections.stream().collect(java.util.stream.Collectors.groupingBy(( c) -> storageDomainDao.getAllByConnectionId(org.ovirt.engine.core.compat.Guid.createGuidFromString(c.getId())).get(0).getStorageDomainType())); boolean connectSucceeded = connectStorageServer(storageType, connByType.get(StorageDomainType.Data), true); try { connectStorageServer(storageType, connByType.get(StorageDomainType.ISO), false); connectStorageServer(storageType, connByType.get(StorageDomainType.ImportExport), false); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.info("Ignoring failed connection to domain of type ISO/Import-Export.'"); } return connectSucceeded; }<END_MOD>
<START_MOD>protected void executeVdsCommandWithNetworkEvent(boolean sendNetworkEvent) { try { executeVdsBrokerCommand(); } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); updateNetworkException(ex, ex.getMessage()); if (sendNetworkEvent) { networkError.fire(ex); } throw ex; } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); throw ex; } catch (org.ovirt.engine.core.vdsbroker.TransportRunTimeException ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException networkException = createNetworkException(ex); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); if (sendNetworkEvent) { networkError.fire(networkException); } throw networkException; } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); if ((getAndSetVdsStatic()) == null) { log.error("Failed in '{}' method, for vds id: '{}': {}", org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getCommandName(), org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getParameters().getVdsId(), e.getMessage()); } else { log.error("Failed in '{}' method, for vds: '{}'; host: '{}': {}", org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getCommandName(), getAndSetVdsStatic().getName(), getAndSetVdsStatic().getHostName(), e.getMessage()); } throw e; } }<END_MOD>
<START_MOD>@org.junit.Test public void testExtractIpv4AddressEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractAddress(com.google.common.collect.ImmutableMap.of(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.ADDR, "")), nullValue()); }<END_MOD>
<START_MOD>@org.junit.Test public void testExtractIpv4SubnetEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractSubnet(com.google.common.collect.ImmutableMap.of(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.NETMASK, "")), nullValue()); }<END_MOD>
<START_MOD>@org.junit.Test public void testExtractIpv4GatewayEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractGateway(com.google.common.collect.ImmutableMap.of(VdsProperties.GLOBAL_GATEWAY, "")), nullValue()); }<END_MOD>
<START_MOD>private static java.lang.String extractIPV6gateway(java.util.Map<java.lang.String, java.lang.Object> effectiveProperties) { java.lang.String gateway = ((java.lang.String) (effectiveProperties.get(VdsProperties.IPV6_GLOBAL_GATEWAY))); return org.apache.commons.lang.StringUtils.isEmpty(gateway) ? null : gateway; }<END_MOD>
<START_MOD>static java.lang.String extractGateway(java.util.Map<java.lang.String, java.lang.Object> properties) { java.lang.String gateway = ((java.lang.String) (properties.get(VdsProperties.GLOBAL_GATEWAY))); return org.apache.commons.lang.StringUtils.isEmpty(gateway) ? null : gateway; }<END_MOD>
static java.lang.String extractSubnet(java.util.Map<java.lang.String, java.lang.Object> properties) { <START_MOD>java.lang.String netmask =<END_MOD> ((java.lang.String) (properties.get(<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.NETMASK<END_MOD>))); <START_MOD>return org.apache.commons.lang.StringUtils.isEmpty(netmask) ? null : netmask; <END_MOD>}
<START_MOD>@org.junit.Test public void testExtractIpv6AddressEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractIpv6Address(""), nullValue()); }<END_MOD>
static java.lang.String extractAddress(java.util.Map<java.lang.String, java.lang.Object> properties) { <START_MOD>java.lang.String address =<END_MOD> ((java.lang.String) (properties.get(<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.ADDR<END_MOD>))); <START_MOD>return org.apache.commons.lang.StringUtils.isEmpty(address) ? null : address; <END_MOD>}
@org.junit.Test public void testIsNetworkInSyncWhenIpv4GatewayBothBlank() { initIpv4ConfigurationStaticBootProtocol(Ipv4BootProtocol.STATIC_IP); ipv4Address.setGateway(<START_MOD>null<END_MOD>); iface.setIpv4Gateway(<START_MOD>null<END_MOD>); assertThat(createTestedInstance().isNetworkInSync(), is(true)); }
<START_MOD>private boolean shouldAbortOnClientInactivityTimeout(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts, java.lang.Integer idleTimeFromTicket) { int inactivityTimeout = getTransferImageClientInactivityTimeoutInSeconds(); boolean timeoutExceeded = (idleTimeFromTicket != null) ? idleTimeFromTicket > inactivityTimeout : ts > (((entity.getLastUpdated().getTime()) / 1000) + inactivityTimeout); return (((inactivityTimeout > 0) && timeoutExceeded) && (entity.getPhase().canBePaused())) && (!(entity.getActive())); }<END_MOD>
public static void toStringBuilder(java.util.Map<java.lang.String, ?> map, java.lang.StringBuilder builder) { if (map == null) { <START_MOD>builder.append("{}"); <END_MOD>return; } <START_MOD>builder.append("{"); java.util.Iterator<? extends <END_MOD>java.util.Map.Entry<java.lang.String, ?><START_MOD>> iterator = map.entrySet().iterator(); while (iterator.hasNext()) { java.util.Map.Entry<java.lang.String, ?><END_MOD> entry <START_MOD>= iterator.next(); builder.append(java.lang.String.format("%1$s=", entry.getKey())); org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(entry.getValue(), builder);<END_MOD> if (<START_MOD>iterator.hasNext()) { builder.append(   } } builder.append("}"); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("Private SPM Id", privateSpmId).append("Private SPM Version", privateSpmLVER).append("SPM Status", privateSpmStatus).build(); }<END_MOD>
<START_MOD>public static void toStringBuilder(java.lang.Object object, java.lang.StringBuilder builder) { if (object == null) { return; } if (object instanceof java.lang.Object[]) { org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(((java.lang.Object[]) (object)), builder); } else if (object instanceof java.util.Map) { org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(((java.util.Map<java.lang.String, java.lang.Object>) (object)), builder); } else if ((!(object instanceof java.lang.String)) && (object instanceof java.lang.Iterable)) { org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(((java.lang.Iterable) (object)), builder); } else { builder.append(object.toString()); } }<END_MOD>
@java.lang.Override protected org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.common.businessentities.storage.ImageTransfer> createEntityRowMapper() { return ( rs, rowNum) -> { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); entity.setId(getGuidDefaultEmpty(rs, "command_id")); entity.setCommandType(org.ovirt.engine.core.common.action.ActionType.forValue(rs.getInt("command_type"))); entity.setPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.forValue(rs.getInt("phase"))); entity.setType(org.ovirt.engine.core.common.businessentities.storage.TransferType.forValue(rs.getInt("type"))); entity.setActive(rs.getBoolean("active")); entity.setLastUpdated(new java.util.Date(rs.getTimestamp("last_updated").getTime())); entity.setMessage(rs.getString("message")); entity.setVdsId(getGuid(rs, "vds_id")); entity.setDiskId(getGuid(rs, "disk_id")); entity.setImagedTicketId(getGuid(rs, "imaged_ticket_id")); entity.setProxyUri(rs.getString("proxy_uri")); entity.setDaemonUri(rs.getString("daemon_uri")); entity.setSignedTicket(rs.getString("signed_ticket")); entity.setBytesSent(rs.getLong("bytes_sent")); entity.setBytesTotal(rs.getLong("bytes_total")); <START_MOD>entity.setClientInactivityTimeout(rs.getInt("client_inactivity_timeout")); <END_MOD>return entity; }; }
private javax.ws.rs.core.Response performCreate(org.ovirt.engine.api.model.ImageTransfer imageTransfer, org.ovirt.engine.core.common.action.TransferDiskImageParameters params) { updateTransferType(imageTransfer, params); if ((imageTransfer.isSetHost()) && (imageTransfer.getHost().isSetId())) { params.setVdsId(org.ovirt.engine.core.compat.Guid.createGuidFromString(imageTransfer.getHost().getId()<START_MOD>)); } if (imageTransfer.isSetClientInactivityTimeout()) { params.setClientInactivityTimeout(imageTransfer.getClientInactivityTimeout(<END_MOD>)); } return performCreate(ActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, T vm) { vm.setMemSizeMb(model.getMemSize().getEntity()); vm.setMaxMemorySizeMb(model.getMaxMemorySize().getEntity()); if (model.getIoThreadsEnabled().getEntity()) { vm.setNumOfIoThreads(org.ovirt.engine.ui.uicommonweb.builders.vm.HwOnlyCoreUnitToVmBaseBuilder.DEFAULT_NUM_OF_IOTHREADS); } else { vm.setNumOfIoThreads(0); } vm.setNumOfSockets(model.getNumOfSockets().getSelectedItem()); vm.setCpuPerSocket(model.getCoresPerSocket().getSelectedItem()); vm.setThreadsPerCpu(model.getThreadsPerCore().getSelectedItem()); vm.setDefaultDisplayType(model.getDisplayType().getSelectedItem()); vm.setNumOfMonitors(model.getNumOfMonitors().getSelectedItem()); vm.setSmartcardEnabled(model.getIsSmartcardEnabled().getEntity()); vm.setSsoMethod(model.extractSelectedSsoMethod()); vm.setMinAllocatedMem(model.getMinAllocatedMemory().getEntity()); vm.setDefaultBootSequence(model.getBootSequence()); vm.setSingleQxlPci(model.getIsSingleQxlEnabled().getEntity()); vm.setCustomEmulatedMachine(model.getEmulatedMachine().getSelectedItem()); vm.<START_MOD>setBiosType(BiosType.SEA_BIOS); vm.<END_MOD>setCustomCpuName(model.getCustomCpu().getSelectedItem()); }
public void updateDnsResolverConfiguration(org.ovirt.engine.core.compat.Guid vdsId, org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration reportedDnsResolverConfiguration) { if (reportedDnsResolverConfiguration == null) { dnsResolverConfigurationDao.removeByVdsDynamicId(vdsId); } else { if ((reportedDnsResolverConfiguration.getId()) == null) { <START_MOD>reportedDnsResolverConfiguration.setId(vdsId); <END_MOD>dnsResolverConfigurationDao.save(reportedDnsResolverConfiguration); } else { dnsResolverConfigurationDao.update(reportedDnsResolverConfiguration); } } }
protected java.util.<START_MOD>Map<END_MOD><org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { return java.util.stream.IntStream.range(0, NAMES.length).filter(( x) -> !notFound).boxed().collect(java.util.stream.Collectors.toMap(this::getVmTemplateEntity, java.util.ArrayList::new)); }
protected java.util.<START_MOD>Map<END_MOD><org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { <START_MOD>return <END_MOD>java.util.<START_MOD>stream<END_MOD>.<START_MOD>IntStream<END_MOD>.<START_MOD>range(0, NAMES<END_MOD>.<START_MOD>length)<END_MOD>.<START_MOD>filter(( i) -> !notFound)<END_MOD>.<START_MOD>boxed()<END_MOD>.<START_MOD>collect(java.util.stream.Collectors.toMap(this::getVmTemplateEntity<END_MOD>, java.util.<START_MOD>ArrayList::<END_MOD>new)); }
protected java.util.<START_MOD>Map<END_MOD><org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { <START_MOD>return <END_MOD>java.util.<START_MOD>stream<END_MOD>.<START_MOD>IntStream<END_MOD>.<START_MOD>range(0, NAMES<END_MOD>.<START_MOD>length)<END_MOD>.<START_MOD>filter(( x) -> !notFound)<END_MOD>.<START_MOD>boxed()<END_MOD>.<START_MOD>collect(java.util.stream.Collectors.toMap(this::getEntity<END_MOD>, java.util.<START_MOD>ArrayList::<END_MOD>new)); }
<START_MOD>public void createVolumeSnapshot() { if ((getWindow()) != null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getSelectedItem(); org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel snapshotModel = org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel.createVolumeSnapshotModel(this); setWindow(snapshotModel); snapshotModel.startProgress(); snapshotModel.getClusterName().setEntity(volumeEntity.getClusterName()); snapshotModel.getVolumeName().setEntity(volumeEntity.getName()); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("onCreateSnapshot", this); snapshotModel.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); snapshotModel.getCommands().add(cancelCommand); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getIsGlusterVolumeSnapshotCliScheduleEnabled(new org.ovirt.engine.ui.uicommonweb.models.volumes.AsyncQuery(( isCliScheduleEnabled) -> { snapshotModel.getDisableCliSchedule().setEntity(isCliScheduleEnabled); snapshotModel.stopProgress(); }), volumeEntity.getClusterId()); }<END_MOD>
<START_MOD>public static org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel createVolumeSnapshotModel(org.ovirt.engine.ui.uicommonweb.ICommandTarget commandTarget) { final org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel snapshotModel = new org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel(true, true); snapshotModel.setHelpTag(HelpTag.new_volume_snapshot); snapshotModel.setHashName("new_volume_snapshot"); snapshotModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().createScheduleVolumeSnapshotTitle()); return snapshotModel; }<END_MOD>
<START_MOD>public boolean isDefaultMtu() { return (mtu) == 0; }<END_MOD>
protected int calcEvenDistributionScore(float maxMemoryOfVdsInCluster, org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm, boolean countThreadsAsCores) { java.lang.Integer effectiveCpuCores = slaValidator.getEffectiveCpuCores(vds, countThreadsAsCores); if ((effectiveCpuCores <START_MOD>==<END_MOD> null) <START_MOD>||<END_MOD> ((vds.getUsageCpuPercent()) <START_MOD>==<END_MOD> null)) { <START_MOD>return (MaxSchedulerWeight) - 1; } int <END_MOD>score = ((int) (java.lang.Math.round(<START_MOD>calcHostLoadPerCore<END_MOD>(vds, vm, effectiveCpuCores)))) + 1<START_MOD>; return java.lang.Math.min(score<END_MOD>, <START_MOD>((<END_MOD>MaxSchedulerWeight<START_MOD>) - 1)<END_MOD>); }
<START_MOD>public static int getMtuActualValue(org.ovirt.engine.core.common.businessentities.network.Network network) { return (network.getMtu()) == 0 ? org.ovirt.engine.core.utils.NetworkUtils.getDefaultMtu() : network.getMtu(); }<END_MOD>
public void loadVmFromOva() { clearForLoad(); if (!(validateOvaConfiguration())) { return; } startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmFromOva(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { if (returnValue.getSucceeded()) { <START_MOD>java.lang.Object result = returnValue.getReturnValue(); List<org.ovirt.engine.core.common.businessentities.VM> vms; if (result instanceof org.ovirt.engine.core.common.businessentities.VM) { vms = java.util.Collections.singletonList(((org.ovirt.engine.core.common.businessentities.VM) (result))); } else { Map<org.ovirt.engine.core.common.businessentities.VM, java.lang.String> vmToOva = ((Map<org.ovirt.engine.core.common.businessentities.VM, java.lang.String>) (result)); vms = new org.ovirt.engine.ui.uicommonweb.models.vms.ArrayList<>(vmToOva.keySet()); vmNameToOva = vmToOva.keySet().stream().collect(java.util.stream.Collectors.toMap(org.ovirt.engine.core.common.businessentities.VM::getName, (<END_MOD> vm<START_MOD>) -> vmToOva.get(vm))); }<END_MOD> updateVms(<START_MOD>vms<END_MOD>); } else { setError(messages.failedToLoadOva(getOvaPath().getEntity())); } stopProgress(); }), getHosts().getSelectedItem().getId(), getOvaPath().getEntity()); }
@java.lang.Override protected void executeQueryCommand() { java.lang.String <START_MOD>stdout<END_MOD> = runAnsibleQueryOvaInfoPlaybook(); <START_MOD>stdout<END_MOD> = <START_MOD>stdout<END_MOD>.<START_MOD>trim<END_MOD>(); java.lang.<START_MOD>Object<END_MOD> <START_MOD>result = (stdout.startsWith("{")<END_MOD>) <START_MOD>?<END_MOD> <START_MOD>parseOvfs<END_MOD>(<START_MOD>stdout<END_MOD>) : <START_MOD>parseOvf(stdout<END_MOD>); org.ovirt.engine.core.bll.GetVmFromOvaQuery.setReturnValue(<START_MOD>result<END_MOD>); org.ovirt.engine.core.bll.GetVmFromOvaQuery.getQueryReturnValue().setSucceeded((<START_MOD>result<END_MOD> != null)); }
<START_MOD>private java.util.Map<org.ovirt.engine.core.common.businessentities.VM, java.lang.String> parseOvfs(java.lang.String stdout) { stdout = stdout.substring(1, ((stdout.length()) - 1)); return java.util.Arrays.stream(stdout.split("::")).map(org.ovirt.engine.core.bll.GetVmFromOvaQuery.OVA_TO_OVF_PATTERN::matcher).filter(java.util.regex.Matcher::matches).collect(java.util.stream.Collectors.toMap(( m) -> parseOvf(m.group(2)), ( m) -> m.group(1))); }<END_MOD>
<START_MOD>public java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> getVmUsingMac(org.ovirt.engine.core.compat.Guid macPoolId, java.lang.String mac) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vmsById = getAllVmsInSystem(getIdsOfAllClustersHavingMacPool(macPoolId)).filter(( vm) -> !(vm.isStateless())).collect(java.util.stream.Collectors.toMap(VM::getId, java.util.function.Function.identity())); java.util.Optional<org.ovirt.engine.core.compat.Guid> vmUsingMacId = getVmIdUsingMac(vmsById.keySet().stream().flatMap(( vmId) -> getVmInterfaces(vmId).stream()), mac); return vmUsingMacId.map(vmsById::get); }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult isMacAssignableValidator() { boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); boolean illegalDuplicateMacUsage = (!allowDupMacs) && (macPool.isMacInUse(macAddress)); <START_MOD>if (illegalDuplicateMacUsage) { java.util.Optional<<END_MOD>org.ovirt.engine.core.common.<START_MOD>businessentities.VM> optionalVm = macsUsedAcrossWholeSystem.getVmUsingMac(macPool.getId(), macAddress); if (!(optionalVm.isPresent())) { optionalVm = macsUsedAcrossWholeSystem.getSnapshotUsingMac(macPool.getId(), macAddress); } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.<END_MOD>errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE<START_MOD>, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.MacAddressValidator.VAR_MAC_IN_USE, macAddress), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.MacAddressValidator.VAR_IN_USE_BY, (optionalVm.isPresent() ? optionalVm.get().getName() : ""))); }<END_MOD> return org.ovirt.engine.core.bll.ValidationResult.<START_MOD>VALID<END_MOD>; }
public java.util.List<java.lang.String> getMacsForMacPool(org.ovirt.engine.core.compat.Guid macPoolId) { java.util.List<org.ovirt.engine.core.compat.Guid> idsOfAllClustersHavingMacPool = getIdsOfAllClustersHavingMacPool(macPoolId); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vmsById = <START_MOD>getAllVmsInSystem(<END_MOD>idsOfAllClustersHavingMacPool<START_MOD>).collect(java.util.stream.Collectors.toMap(VM::getId, java.util.function.Function.identity())); java.util.stream.Stream<org.ovirt.engine.core.compat.Guid> idsOfRunningStatelessVMs = getAllStatelessVms(vmsById.values()).map(VM::getId); java.util.stream.Stream<org.ovirt.engine.core.common.businessentities.VM> statelessSnapshotsOfRunningVMs = idsOfRunningStatelessVMs.map(snapshotsManager::getVmConfigurationInStatelessSnapshotOfVm).filter(java.util.Optional::isPresent).map(java.util.Optional::get); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>> snapshottedInterfacesByVmId = statelessSnapshotsOfRunningVMs.collect(java.util.stream.Collectors.toMap(VM::getId, VM::getInterfaces)); java.util.List<java.lang.String> macsToBeAllocated = vmsById.keySet()<END_MOD>.stream().flatMap(( <START_MOD>vmId<END_MOD>) -> <START_MOD>calculateAllMacsUsedInVmAndItsSnapshot(getVmInterfaces(vmId), snapshottedInterfacesByVmId.get(vmId)<END_MOD>)).collect(java.util.stream.Collectors.<START_MOD>toList()); return<END_MOD> macsToBeAllocated; }
<START_MOD>private java.util.stream.Stream<org.ovirt.engine.core.common.businessentities.VM> getAllVmsInSystem(java.util.List<org.ovirt.engine.core.compat.Guid> clustersId) { return clustersId.stream().flatMap(( clusterId) -> vmDao.getAllForCluster(clusterId).stream()); }<END_MOD>
<START_MOD>public java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> getSnapshotUsingMac(org.ovirt.engine.core.compat.Guid macPoolId, java.lang.String mac) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> allVms = getAllVmsInSystem(getIdsOfAllClustersHavingMacPool(macPoolId)).collect(java.util.stream.Collectors.toList()); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> snapshotsById = getAllStatelessVms(allVms).map(VM::getId).map(snapshotsManager::getVmConfigurationInStatelessSnapshotOfVm).filter(java.util.Optional::isPresent).map(java.util.Optional::get).collect(java.util.stream.Collectors.toMap(VM::getId, java.util.function.Function.identity())); java.util.Optional<org.ovirt.engine.core.compat.Guid> snapshotUsingMacId = getVmIdUsingMac(snapshotsById.values().stream().flatMap(( vm) -> vm.getInterfaces().stream()), mac); return snapshotUsingMacId.map(snapshotsById::get); }<END_MOD>
protected org.ovirt.engine.core.bll.ValidationResult macAvailable() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic(); <START_MOD>if (new org.ovirt.engine.core.bll.network.VmInterfaceManager().tooManyPluggedInterfaceWithSameMac(nic, org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getMacPool())) { return new org.ovirt.engine.core.bll.ValidationResult(<END_MOD>org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE<START_MOD>, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.VAR_MAC_IN_USE, nic.getMacAddress()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.VAR_IN_USE_BY, org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm().getName()))<END_MOD>; <START_MOD>} <END_MOD>return org.ovirt.engine.core.bll.ValidationResult.<START_MOD>VALID<END_MOD>; }
protected <START_MOD>com.google.gwt.user.client.ui.IsWidget createMacColumn<END_MOD>(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface<START_MOD>) { org.gwtbootstrap3.client.ui.Column column = new org.gwtbootstrap3.client.ui.Column(org.gwtbootstrap3.client.ui.constants.ColumnSize.SM_4); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLElement(); com.google.gwt.safehtml.shared.SafeHtml mac = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(networkInterface.getMacAddress()); addBoldReverseDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.macVmGuestAgent())<END_MOD>, <START_MOD>mac,<END_MOD> dl<START_MOD>); column.getElement().appendChild(dl); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip tooltip<END_MOD> = new <START_MOD>org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(column); tooltip.setHtml(mac); return tooltip<END_MOD>; }
<START_MOD>protected<END_MOD> com.google.gwt.user.client.ui.IsWidget <START_MOD>createIpv6Column(org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface guestAgentInterface<END_MOD>) { <START_MOD>org.gwtbootstrap3.client.ui.Column column<END_MOD> = new <START_MOD>org.gwtbootstrap3.client.ui.Column(org.gwtbootstrap3.client.ui.constants.ColumnSize.SM_4); column<END_MOD>.addStyleName(<START_MOD>org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLElement(); java.util.StringJoiner ipv6AddressJoiner<END_MOD> = new <START_MOD>java.util.StringJoiner(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER); if ((guestAgentInterface.getIpv6Addresses()) != null) { ipv6AddressJoiner.add(java.lang.String.join(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER, guestAgentInterface.getIpv6Addresses())); } java.lang.String ipv6Address = ipv6AddressJoiner.toString(); if (ipv6Address.isEmpty()) { ipv6Address = org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.notAvailableLabel(); } <END_MOD>com.google.gwt.safehtml.shared.<START_MOD>SafeHtml ipv6 = com.google.gwt.safehtml.shared.<END_MOD>SafeHtmlUtils.fromString(<START_MOD>ipv6Address); addBoldReverseDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(<END_MOD>org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.<START_MOD>ipv6VmGuestAgent()), ipv6, dl); column.getElement().appendChild(dl); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(column); tooltip.setHtml(ipv6<END_MOD>); return <START_MOD>tooltip<END_MOD>; }
<START_MOD>protected<END_MOD> com.google.gwt.user.client.ui.IsWidget <START_MOD>createIpv4Column(org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface guestAgentInterface<END_MOD>) { <START_MOD>org.gwtbootstrap3.client.ui.Column column<END_MOD> = new <START_MOD>org.gwtbootstrap3.client.ui.Column(org.gwtbootstrap3.client.ui.constants.ColumnSize.SM_4); column<END_MOD>.addStyleName(<START_MOD>org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLElement(); java.util.StringJoiner ipv4AddressJoiner<END_MOD> = new <START_MOD>java.util.StringJoiner(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER); if ((guestAgentInterface.getIpv4Addresses()) != null) { ipv4AddressJoiner.add(java.lang.String.join(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER, guestAgentInterface.getIpv4Addresses())); } java.lang.String ipv4Address = ipv4AddressJoiner.toString(); if (ipv4Address.isEmpty()) { ipv4Address = org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.notAvailableLabel(); } <END_MOD>com.google.gwt.safehtml.shared.<START_MOD>SafeHtml ipv4 = com.google.gwt.safehtml.shared.<END_MOD>SafeHtmlUtils.fromString(<START_MOD>ipv4Address); addBoldReverseDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(<END_MOD>org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.<START_MOD>ipv4VmGuestAgent()), ipv4, dl); column.getElement().appendChild(dl); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(column); tooltip.setHtml(ipv4<END_MOD>); return <START_MOD>tooltip<END_MOD>; }
<START_MOD>private void applyVmInterfaceSpecificStyles() { mainInfoPanel.getElement().getStyle().setPaddingBottom(0, Style.Unit.PX); mainInfoPanel.getElement().getStyle().setPaddingTop(0, Style.Unit.PX); detailedInfoContainer.getElement().getStyle().setMarginLeft(0, Style.Unit.PX); detailedInfoContainer.getElement().getStyle().setWidth(100, Style.Unit.PCT); descriptionPanel.getElement().getStyle().setWidth(10, Style.Unit.PCT); descriptionHeaderPanel.getElement().getStyle().setWidth(100, Style.Unit.PCT); descriptionHeaderPanel.getElement().getStyle().setFontSize(20, Style.Unit.PX); descriptionPanel.removeStyleName(PatternflyConstants.PF_LIST_VIEW_DESCRIPTION); }<END_MOD>
<START_MOD>protected<END_MOD> com.google.gwt.user.client.ui.IsWidget <START_MOD>createNetworkNameColumn(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface<END_MOD>) { <START_MOD>org.gwtbootstrap3.client.ui.Column column<END_MOD> = new <START_MOD>org.gwtbootstrap3.client.ui.Column(org.gwtbootstrap3.client.ui.constants.ColumnSize.SM_3); column<END_MOD>.addStyleName(<START_MOD>org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl<END_MOD> = <START_MOD>com.google.gwt.dom.client.Document.get().createDLElement(); com.google.gwt.safehtml.shared.SafeHtml name = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(((networkInterface.getNetworkName()) != null ? networkInterface.getNetworkName() : org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.unAvailablePropertyLabel())); addBoldReverseDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.networkNameInterface()), name, dl); column.getElement().appendChild(dl); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip tooltip = <END_MOD>new org.ovirt.engine.ui.common.widget.<START_MOD>tooltip.WidgetTooltip(column); tooltip.setHtml(name<END_MOD>); return <START_MOD>tooltip<END_MOD>; }
private void updateNics(java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel> nics) { nicList.clear(); java.util.Collections.sort(nics); java.util.List<org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkGroup> groups = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic : nics) { groups.add(new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkGroup(nic, eventBus, style)); } nicList.addAll(groups, (!(rendered))); <START_MOD>nicGroups = groups; <END_MOD>}
private org.ovirt.engine.ui.common.widget.MenuBar menuFor(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item) { org.ovirt.engine.ui.common.widget.MenuBar menu = rootMenu(item); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> operationMap = item.getSetupModel().commandsFor(item); for (final java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> entry : operationMap.entrySet()) { final java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = entry.getValue(); if (entry.getKey().isUnary()) { assert (commands.size()) == 1 :   a NetworkCommand List with more than one Unary Operation menu.addItem(entry.getKey().getVerb(item), () -> executeCommand(entry.getKey(), commands.get(0))); } else { <START_MOD>org.ovirt.engine.ui.common.widget.MenuBar subMenu = subMenu(); for (final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand command : <END_MOD>commands<START_MOD>) { subMenu.addItem(new com.google.gwt.user.client.ui.MenuItem(command.<END_MOD>getName<START_MOD>(), () -> executeCommand(entry.getKey(), command))); } menu.addItem(entry.getKey().getVerb(item),<END_MOD> subMenu); } <START_MOD>} return <END_MOD>menu; }
@org.junit<START_MOD>.jupiter.api<END_MOD>.Test public void testAdd() <START_MOD>{<END_MOD> <START_MOD>try<END_MOD> { javax.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "00000001-0001-0001-0001-000000000011", "nics"); javax.ws.rs.core.Request request = mockRequest("POST"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals( correct usage, see: http: fault.getDetail()); }<START_MOD> catch (java.lang.ClassNotFoundException | java.io.IOException e) { fail(); } }<END_MOD>
@org.junit<START_MOD>.jupiter.api<END_MOD>.Test public void testUpdateWithNonGuidId() <START_MOD>{<END_MOD> <START_MOD>try<END_MOD> { javax.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "00000001-0001-0001-0001-000000000011", "nics", "116"); javax.ws.rs.core.Request request = mockRequest("PUT"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals( correct usage, see: http: fault.getDetail()); }<START_MOD> catch (java.lang.ClassNotFoundException | java.io.IOException e) { fail(); } }<END_MOD>
@org.junit<START_MOD>.jupiter.api<END_MOD>.Test public void testAction() <START_MOD>{<END_MOD> <START_MOD>try<END_MOD> { javax.ws.rs.core.UriInfo uriInfo = mockUri("vms", "00000001-0001-0001-0001-000000000011", "freezefilesystems"); javax.ws.rs.core.Request request = mockRequest("POST"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals( correct usage, see: http: fault.getDetail()); }<START_MOD> catch (java.lang.ClassNotFoundException | java.io.IOException e) { fail(); } }<END_MOD>
<START_MOD>protected org.ovirt.engine.core.common.businessentities.VM getVmFromConfiguration() { org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = runInternalQuery(QueryType.GetVmConfigurationBySnapshot, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getParameters().getSnapshotId())); return queryReturnValue.getSucceeded() ? queryReturnValue.getReturnValue() : null; }<END_MOD>
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmDisksFromDb() { <START_MOD>org.ovirt.engine.core.common.businessentities.VM vmFromConfiguration = getVmFromConfiguration(<END_MOD>); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksFromDb = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(<START_MOD>vmFromConfiguration<END_MOD>.getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.ONLY_SNAPABLE, org.ovirt.engine.core.bll.storage.disk.ONLY_ACTIVE); disksFromDb.addAll(org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.ONLY_PLUGGED)); return disksFromDb; }
public void loadVmFromOva() { clearForLoad(); if (!(validateOvaConfiguration())) { return; } startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmFromOva(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { if (returnValue.getSucceeded()) { <START_MOD>Map<<END_MOD>org.ovirt.engine.core.common.businessentities.VM<START_MOD>, java.lang.String> vmToOva<END_MOD> = returnValue.getReturnValue(); <START_MOD>vmNameToOva = vmToOva.entrySet().stream().collect(org.ovirt.engine.ui.uicommonweb.models.vms.Collectors.toMap(( e) -> e.getKey().getName(), java.util.Map.Entry::getValue)); <END_MOD>updateVms(<START_MOD>vmToOva.keySet(<END_MOD>)); } else { setError(messages.failedToLoadOva(getOvaPath().getEntity())); } stopProgress(); }), getHosts().getSelectedItem().getId(), getOvaPath().getEntity()); }
private void updateVmDynamicData() {<START_MOD> if ((vdsmVm.getVmDynamic().getGuestAgentNicsHash()) != (dbVm.getGuestAgentNicsHash())) { vmGuestAgentNics = vdsmVm.getVmGuestAgentInterfaces(); dbVm.setIp(extractVmIpsFromGuestAgentInterfaces(vmGuestAgentNics)); }<END_MOD> java.util.List<java.lang.String> changedFields = getChangedFields(dbVm, vdsmVm.getVmDynamic()); changedFields.removeAll(org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer.UNCHANGEABLE_FIELDS_BY_VDSM); if ((vdsmVm.getVmDynamic().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { changedFields.remove(VmDynamic.APPLICATIONS_LIST_FIELD_NAME); vdsmVm.getVmDynamic().setAppList(dbVm.getAppList()); } if (!(changedFields.isEmpty())) { dbVm.updateRuntimeData(vdsmVm.getVmDynamic(), vdsManager.getVdsId()); saveDynamic(dbVm); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface> filterGuestAgentInterfaces(java.util.List<org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface> nics) { nics = removeLoopbacks(nics); <START_MOD>nics.forEach(this::filterIpv4Addresses); nics.forEach(this::filterIpv6Addresses); <END_MOD>return nics; }
<START_MOD>private void filterIpv6Addresses(org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface nic) { nic.setIpv6Addresses(nic.getIpv6Addresses().stream().map(this::stripIpv6ZoneIndex).filter(ValidationUtils::isValidIpv6).collect(java.util.stream.Collectors.toList())); }<END_MOD>
protected void destroyVm() {<START_MOD> org.ovirt.engine.core.common.vdscommands.VDSReturnValue actionReturnValue = runVdsCommand(VDSCommandType.DestroyVm, buildDestroyVmVDSCommandParameters(org.ovirt.engine.core.bll.StopVmCommandBase.getVdsId()));<END_MOD> if (((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) && ((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getMigratingToVds()) != null)) { runVdsCommand(VDSCommandType.DestroyVm, buildDestroyVmVDSCommandParameters(org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getMigratingToVds())); } setActionReturnValue(<START_MOD>actionReturnValue<END_MOD>); }
private void initButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, org.ovirt.engine.ui.common.widget.action.ActionButton button<START_MOD>, int order<END_MOD>) { button.setText(buttonDef.getText()); java.lang.String buttonId = buttonDef.getUniqueId(); if (buttonId != null) { button.asWidget().getElement().setId(org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId(getElementId(), buttonId)); } actionFormGroup.remove(actionKebab); <START_MOD>if (order < (actionFormGroup.getWidgetCount())) { java.util.List<com.google.gwt.user.client.ui.Widget> currentButtons = new java.util.ArrayList<>(); for (int i = 0; i < (actionFormGroup.getWidgetCount()); i++) { currentButtons.add(actionFormGroup.getWidget(i)); } actionFormGroup.clear(); currentButtons.add(order, button.asWidget()); currentButtons.forEach(( existingButton) -> actionFormGroup.add(existingButton)<END_MOD>); actionFormGroup.add(actionKebab); <START_MOD>} else { actionFormGroup.add(button); actionFormGroup.add(actionKebab); } <END_MOD>actionItemMap.put(buttonDef, button); }
public org.ovirt.engine.ui.common.widget.action.ActionButton addDropdownComboActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> subActions, org.ovirt.engine.ui.common.widget.action.DropdownActionButton.SelectedItemsProvider<T> selectedItemsProvider) { org.ovirt.engine.ui.common.widget.action.DropdownActionButton<T> dropdownActionButton; if ((buttonDef.getIcon()) instanceof org.gwtbootstrap3.client.ui.constants.IconType) { dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider, true, ((org.gwtbootstrap3.client.ui.constants.IconType) (buttonDef.getIcon()))); } else { dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider, true, null); } initButton(buttonDef, dropdownActionButton<START_MOD>, java.lang.Integer.MAX_VALUE<END_MOD>); return dropdownActionButton; }
@java.lang.Override public org.ovirt.engine.ui.common.widget.action.ActionButton addMenuListItem(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef<START_MOD>, int order<END_MOD>) { org.ovirt.engine.ui.common.widget.action.ActionAnchorListItem menuItem = new org.ovirt.engine.ui.common.widget.action.ActionAnchorListItem(menuItemDef.getText()); java.lang.String menuItemId = menuItemDef.getUniqueId(); if (menuItemId != null) { menuItem.asWidget().getElement().setId(org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId(getElementId(), menuItemId)); } actionItemMap.put(menuItemDef, menuItem); actionKebab.addMenuItem(menuItem<START_MOD>, order<END_MOD>); return menuItem; }
<START_MOD>@java.lang.Override <END_MOD>public org.ovirt.engine.ui.common.widget.action.ActionButton addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef<START_MOD>, int order<END_MOD>) { org.ovirt.engine.ui.common.widget.action.SimpleActionButton newActionButton = createNewActionButton(buttonDef); initButton(buttonDef, newActionButton<START_MOD>, order<END_MOD>); return newActionButton; }
public void addMenuItem(org.ovirt.engine.ui.common.widget.action.ActionButton actionButton<START_MOD>, int order) { if (order > (kebabMenu.getWidgetCount())<END_MOD>) { kebabMenu.add(actionButton); }<START_MOD> else { kebabMenu.insert(actionButton.asWidget(), order); } }<END_MOD>
org.ovirt.engine.ui.common.widget.action.ActionButton addMenuListItem(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef<START_MOD>, int order<END_MOD>);
public void addDetailPlaceActionButton(org.ovirt.engine.ui.webadmin.plugin.entity.EntityType mainTabEntityType, org.ovirt.engine.ui.webadmin.plugin.entity.EntityType subTabEntityType, java.lang.String label, org.ovirt.engine.ui.webadmin.plugin.api.ActionButtonInterface actionButtonInterface) { java.lang.String historyToken = mainTabEntityType.getSubTabHistoryToken(subTabEntityType); if (historyToken != null) { org.ovirt.engine.ui.common.<START_MOD>widget.action.ActionButtonDefinition<?> actionButton = createButtonDefinition(label, actionButtonInterface); actionButton.setPriority(actionButtonInterface.getPriority()); org.ovirt.engine.ui.common.<END_MOD>presenter.AddActionButtonEvent.fire(this, historyToken, <START_MOD>actionButton<END_MOD>); } }
public org.ovirt.engine.ui.common.widget.action.ActionButton addDropdownActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> subActions, org.ovirt.engine.ui.common.widget.action.DropdownActionButton.SelectedItemsProvider<T> selectedItemsProvider) { org.ovirt.engine.ui.common.widget.action.DropdownActionButton<T> dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider); initButton(buttonDef, dropdownActionButton<START_MOD>, java.lang.Integer.MAX_VALUE<END_MOD>); return dropdownActionButton; }
public void addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { addActionButton(buttonDef, <START_MOD>java.lang.Integer.MAX_VALUE<END_MOD>); }
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { if ((getActionPanelPresenterWidget()) != null) { for (org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> buttonDef : pluginActionButtonList) { <START_MOD>int order = 0; if ((buttonDef.getPriority()) > 0) { order = ((int) (buttonDef.getPriority())); } <END_MOD>getActionPanelPresenterWidget().addActionButton(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition) (buttonDef))<START_MOD>, order<END_MOD>); } } }
<START_MOD>public java.lang.Double getPriority() { return getValueAsDouble("priority", java.lang.Double.MAX_VALUE); }<END_MOD>
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { if (hasActionPanelPresenterWidget()) { for (org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> buttonDef : pluginActionButtonList) { org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getActionPanelPresenterWidget().addActionButton(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition) (buttonDef))<START_MOD>, ((int) (buttonDef.getPriority()))<END_MOD>); } } }
<START_MOD>double getPriority();<END_MOD>
public void addMenuPlaceActionButton(org.ovirt.engine.ui.webadmin.plugin.entity.EntityType entityType, java.lang.String label, org.ovirt.engine.ui.webadmin.plugin.api.ActionButtonInterface actionButtonInterface) { java.lang.String historyToken = entityType.getMainHistoryToken(); if (historyToken != null) { org.ovirt.engine.ui.common.<START_MOD>widget.action.ActionButtonDefinition<?> actionButton = createButtonDefinition(label, actionButtonInterface); actionButton.setPriority(actionButtonInterface.getPriority()); org.ovirt.engine.ui.common.<END_MOD>presenter.AddActionButtonEvent.fire(this, historyToken, <START_MOD>actionButton<END_MOD>); } }
public void addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButton actionButton) { notificationKebab.addMenuItem(actionButton<START_MOD>, java.lang.Integer.MAX_VALUE<END_MOD>); notificationKebab.setVisible(((notificationKebab.getWidgetCount()) > 0)); }
public void addMenuListItem(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef) { addMenuListItem(menuItemDef<START_MOD>,<END_MOD> <START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>Integer.MAX_VALUE<END_MOD>); }
org.ovirt.engine.ui.common.widget.action.ActionButton addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef<START_MOD>, int order<END_MOD>);
@org.junit.Before public void setUp()<START_MOD> throws org.ovirt.engine.core.common.utils.exceptions.InitializationException<END_MOD> { vm = createVm(); validator = new org.ovirt.engine.core.bll.validator.VmValidator(vm<START_MOD>); mockVmPropertiesUtils(<END_MOD>); when(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao()).thenReturn(vmNetworkInterfaceDao); when(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVnicProfileDao()).thenReturn(vnicProfileDao); }
public void setLabel(java.lang.String label) { this.label = <START_MOD>(label == null) ? "" : <END_MOD>label; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = new org.ovirt.engine.core.common.action.ActionReturnValue(); final org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getVdsId(); final java.lang.String sessionId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getSessionId(); <START_MOD>returnValue = executeVdsFenceAction(vdsId, sessionId, ActionType.StopVds); <END_MOD>if (<START_MOD>(org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.ActionType.VdsNotRespondingTreatment)) { updateHostInFenceFlow(vdsId, true); } if (wasSkippedDueToPolicy(returnValue)) { org.ovirt.engine.core.bll.pm.RestartVdsResult restartVdsResult = <END_MOD>new org.ovirt.engine.core.bll.pm.<START_MOD>RestartVdsResult(); restartVdsResult.setSkippedDueToFencingPolicy(true); setActionReturnValue(restartVdsResult); org.ovirt.engine.core.bll.pm.RestartVdsCommand<END_MOD>.setSucceeded(<START_MOD>false); setVdsStatus(VDSStatus.NonResponsive); return<END_MOD>; } else <START_MOD>if (returnValue.getSucceeded()) { executeFenceVdsManuallyAction(vdsId, sessionId);<END_MOD> returnValue = executeVdsFenceAction(vdsId, sessionId, ActionType.<START_MOD>StartVds); setSucceeded(returnValue.getSucceeded()); } else { handleError(); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); }<END_MOD> if (<START_MOD>!(org.ovirt.engine.core.bll.pm.RestartVdsCommand.getSucceeded())) { log.warn( host <END_MOD>action<START_MOD> failed, updating host '{}' to '{}' vdsId, VDSStatus.NonResponsive.name()); setVdsStatus(VDSStatus.NonResponsive); }<END_MOD> updateHostInFenceFlow(vdsId, false); <START_MOD>}<END_MOD>
<START_MOD>private void alertActionSkippedAlreadyInStatus(org.ovirt.engine.core.common.businessentities.pm.FenceActionType fenceActionType, org.ovirt.engine.core.common.businessentities.pm.PowerStatus powerStatus) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable auditLogable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); auditLogable.addCustomValue("HostName", fencedHost.getName()); auditLogable.addCustomValue("AgentStatus", powerStatus.name()); auditLogable.addCustomValue("Operation", fenceActionType.getValue()); auditLogDirector.log(auditLogable, AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS); }<END_MOD>
protected org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult fence(org.ovirt.engine.core.common.businessentities.pm.FenceActionType fenceAction, java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents) { org.ovirt.engine.core.bll.pm.PowerManagementHelper.AgentsIterator iterator = createFenceAgentsIterator(fenceAgents); org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result = null; while (iterator.hasNext()) { <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> agents<END_MOD> = <START_MOD>iterator.next(); if (fenceAction != (org.ovirt.engine.core.common.businessentities.pm.FenceActionType.STATUS)) { result = <END_MOD>createFenceActionExecutor(<START_MOD>agents).fence(FenceActionType.STATUS); if (((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.ERROR)) && (<END_MOD>iterator.<START_MOD>hasNext())) { continue; } if (((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS)) && ((result.getPowerStatus()) == (getRequestedPowerStatus(fenceAction)))) { alertActionSkippedAlreadyInStatus(fenceAction, getRequestedPowerStatus(fenceAction)); return result; } } result = createFenceActionExecutor(agents<END_MOD>).fence(fenceAction); if ((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS)) { break; } } return result; }
public static java.util.Map<java.lang.String, java.lang.Long> ioTuneMapFrom(org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos) { java.util.Map<java.lang.String, java.lang.Long> ioTuneMap = new java.util.<START_MOD>LinkedHashMap<END_MOD><>(); ioTuneMap.put(VdsProperties.<START_MOD>ReadBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxReadThroughput())); ioTuneMap.put(VdsProperties.ReadIopsSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertIops(storageQos.getMaxReadIops())); ioTuneMap.put(VdsProperties.<END_MOD>TotalBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxThroughput())); ioTuneMap.put(VdsProperties.<START_MOD>TotalIopsSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertIops(storageQos.getMaxIops())); ioTuneMap.put(VdsProperties.WriteBytesSec<END_MOD>, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxWriteThroughput())); ioTuneMap.put(VdsProperties.<START_MOD>WriteIopsSec<END_MOD>, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertIops(storageQos.getMaxWriteIops())); return ioTuneMap; }
java.lang.String <START_MOD>ACTION_TYPE_FAILED_TEMPLATE_IMAGE_ALREADY_EXISTS<END_MOD>();
protected boolean checkIfNeedToBeOverride() { if ((((isTemplate()) && (isCopyOperation())) && (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getForceOverride()))) && (getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId()))) { return failValidation(EngineMessage.<START_MOD>ACTION_TYPE_FAILED_TEMPLATE_IMAGE_ALREADY_EXISTS<END_MOD>); } return true; }
<START_MOD>public java.lang.Boolean call() throws java.lang.Exception { _deploy.getParser().cliEnvironmentSet(VdsmEnv.ENGINE_HOST_CLUSTER_VERSION, clusterVersion.getValue()); return true; }<END_MOD>
public boolean isSearchUsingTags() { return ((origText.contains("tag")) || (getCrossRefObjList().contains(SearchObjects.VDC_STORAGE_POOL_OBJ_NAME))) || (getCrossRefObjList().contains(SearchObjects.VDC_STORAGE_DOMAIN_OBJ_NAME)); }
public java.lang.String getCpuNameByCpuId(java.lang.String name, org.ovirt.engine.core.compat.Version ver) { final org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager cpuFlagsManager = org.ovirt.engine.core.bll.CpuFlagsManagerHandler.managersDictionary.get(ver); <START_MOD>java.lang.String<END_MOD> <START_MOD>cpuName = (<END_MOD>cpuFlagsManager != null<START_MOD>)<END_MOD> ? cpuFlagsManager.getCpuNameByCpuId(name) : null; <START_MOD>if (org.apache.commons.lang.StringUtils.isNotEmpty(cpuName)) { return cpuName; <END_MOD>}<START_MOD> return cpuFlagsManager != null ? cpuFlagsManager.getCpuNameByCpuId((name + ",+spec-ctrl")) : null; }<END_MOD>
private java.lang.String generateDomainXml() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getNic(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getVmDevice(); org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder builder = new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getVm(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getVds().getId(), nic, vmDevice, vmInfoBuildUtils, (nic.isPassthrough() ? <START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker<END_MOD>.Collections.singletonMap(nic.getId(), vmDevice.getHostDevice()) : <START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker<END_MOD>.Collections.emptyMap())); java.lang.String libvirtXml = builder.buildHotplugNic(); java.lang.String prettyLibvirtXml = org.ovirt.engine.core.utils.XmlUtils.prettify(libvirtXml); if (prettyLibvirtXml != null) { log.info( hot-set: {} prettyLibvirtXml); } return libvirtXml; }
@org.junit.Test public void searchUsingTags() { java.lang.String[] searchTexts = new java.lang.String[]{   type=user and vm.id=12345678-1234-1234-1234-1234-123456789012   type=user and tag = foo   tag=foo }; for (java.lang.String searchText : searchTexts) { assertTrue(new org.ovirt.engine.core.searchbackend.SyntaxChecker().analyzeSyntaxState(searchText, false).isSearchUsingTags()); } }
@org.junit.Test public void searchNotUsingTags() { java.lang.String[] searchTexts = new java.lang.String[]{<START_MOD> "Users:",   type=user   type=group<END_MOD> "Hosts:", "Vms:", "Datacenters:", "Clusters:" }; for (java.lang.String searchText : searchTexts) { assertFalse(new org.ovirt.engine.core.searchbackend.SyntaxChecker().analyzeSyntaxState(searchText, false).isSearchUsingTags()); } }
private java.lang.Integer deserializeValue(java.util.Map<java.lang.String, java.lang.Object> entry, java.lang.String curveKey, <START_MOD>long<END_MOD> conversionRate) { java.util.Map<java.lang.String, java.lang.<START_MOD>Long<END_MOD>> parameters = ((java.util.Map<java.lang.String, java.lang.<START_MOD>Long<END_MOD>>) (entry.get(curveKey))); if (parameters == null) { return null; } java.lang.<START_MOD>Object avg = parameters.get(VdsProperties.HOST_QOS_AVERAGE); java.lang.Long<END_MOD> average = <START_MOD>(avg instanceof java.lang.Long) ? ((java.lang.Long) (avg)) : java.lang.Long.valueOf(java.lang.String.valueOf(avg)<END_MOD>); return average == null ? null : <START_MOD>((int) (<END_MOD>average / conversionRate<START_MOD>))<END_MOD>; }
<START_MOD>public java.lang.String buildHotplugDisk() { writer.writeStartDocument(false); writer.writeStartElement("hotplug"); writer.writeStartElement("devices"); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = disk.getDiskVmElementForVm(vm.getId()); java.lang.String dev = vmInfoBuildUtils.makeDiskName(dve.getDiskInterface().getName(), 0); writeDisk(device, disk, dve, dev, 0); writer.writeEndElement(); writer.writeStartElement("metadata"); writer.setPrefix(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI); writer.writeNamespace(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI); writer.writeStartElement(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI, "vm"); writeDiskMetadata(); writer.writeEndElement(); writer.writeEndElement(); return writer.getStringXML(); }<END_MOD>
<START_MOD>java.lang.String hideVfLabel();<END_MOD>
<START_MOD>public void toggleView() { if (isDefault) { setText(secondText); setIcon(secondIcon); } else { setText(defaultText); setIcon(defaultIcon); } isDefault = !(isDefault); }<END_MOD>
<START_MOD>@java.lang.Override public void setIcon(org.gwtbootstrap3.client.ui.constants.IconType icon) { if (icon != null) { super.setIcon(icon); } }<END_MOD>
<START_MOD>public abstract void handleOnClick(com.google.gwt.event.dom.client.ClickEvent event, boolean isDefault);<END_MOD>
<START_MOD>private int getWarningLowConfirmedSpaceIndicatorValue() { if (isNewStorage()) { return ((java.lang.Integer) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigValues.WarningLowSpaceIndicator))); } return getStorage().getStorageStaticData().getWarningLowConfirmedSpaceIndicator(); }<END_MOD>
<START_MOD>@java.lang.Override protected java.lang.String generateDomainXml() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getParameters().getNic(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getParameters().getVmDevice(); org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder builder = new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getParameters().getVm(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getVds().getId(), nic, vmDevice, vmInfoBuildUtils, java.util.Collections.emptyMap()); java.lang.String libvirtXml = builder.buildHotunplugNic(); java.lang.String prettyLibvirtXml = org.ovirt.engine.core.utils.XmlUtils.prettify(libvirtXml); if (prettyLibvirtXml != null) { log.info("NIC hot-unplug: {}", prettyLibvirtXml); } return libvirtXml; }<END_MOD>
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) == null) { return false; } switch (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) { case GEO_REP : org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters(getSession().getMasterVolumeId(), getSession().getId()); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters()); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(DRStep.REMOVE_TMP_SNAPSHOTS); <START_MOD>org.ovirt.engine.core.common.action.ActionReturnValue vdcRetValue = <END_MOD>runInternalActionWithTasksContext(ActionType.GlusterStorageGeoRepSyncInternal, parameters); <START_MOD>if (!(vdcRetValue.getSucceeded())) { endWithFailure(); } <END_MOD>org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; case REMOVE_TMP_SNAPSHOTS : removeDRSnapshots(); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(null); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; } return true; }