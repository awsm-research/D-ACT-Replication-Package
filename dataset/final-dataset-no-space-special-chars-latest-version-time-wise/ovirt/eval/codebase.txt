
@org.junit.experimental.theories.Theory public void updateRepository_HA_VM_DOWN(org.ovirt.engine.core.vdsbroker.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))); assumeTrue(data.dbVm().isAutoStartup()); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); vmAnalyzer.analyze(); verify(vmsMonitoring, atLeastOnce()).addVmDynamicToList(data.dbVm().getDynamicData()); verify(vmsMonitoring, atLeastOnce()).addVmStatisticsToList(data.dbVm().getStatisticsData()); assertTrue(data.dbVm().getRunOnVds().equals(VmTestPairs.SRC_HOST_ID)); assertTrue(((data.vdsmVm().getVmDynamic().getRunOnVds()) == null)); assertFalse(vmAnalyzer.isRerun()); assertTrue(vmAnalyzer.isAutoVmToRun()); assertTrue(((data.dbVm().getMigratingToVds()) == null)); }
@org.junit.experimental.theories.Theory public void updateRepository_MIGRATION_FROM_TO_DOWN(org.ovirt.engine.core.vdsbroker.VmTestPairs data) { initMocks(data, true); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); verify(vmsMonitoring.getResourceManager(), times(1)).internalSetVmStatus(data.dbVm(), VMStatus.MigratingTo); verify(vmsMonitoring, atLeastOnce()).addVmDynamicToList(data.dbVm().getDynamicData()); verify(vmsMonitoring, atLeastOnce()).addVmStatisticsToList(data.dbVm().getStatisticsData()); assertTrue(data.dbVm().getRunOnVds().equals(VmTestPairs.DST_HOST_ID)); }

private java.lang.String clustersListIntoTokenizedString() { java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> attachedClustersList = getVdsGroupDao().getClustersByClusterPolicyId(getParameters().getClusterPolicyId()); java.util.List<java.lang.String> clusterNamesList = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup : attachedClustersList) clusterNamesList.add(vdsGroup.getName()); return org.apache.commons.lang.StringUtils.join(clusterNamesList, ','); }
public static void registerRollbackHandler(final org.ovirt.engine.core.utils.transaction.RollbackHandler rollbackHandler) { try { org.ovirt.engine.core.utils.transaction.TransactionSupport.current().registerSynchronization(new javax.transaction.Synchronization() { @java.lang.Override public void beforeCompletion() { } @java.lang.Override public void afterCompletion(int status) { if (!(org.ovirt.engine.core.utils.transaction.TransactionSupport.needToRollback(status))) return; rollbackHandler.rollback(); } }); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException("Unable to register synchronization to current transaction", e); } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { this.stopProgress(); java.util.List<java.lang.String> glusterTunedProfiles = new java.util.ArrayList<>(); if (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getSucceeded()) { glusterTunedProfiles.addAll(((java.util.List<java.lang.String>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); } glusterTunedProfile.setItems(glusterTunedProfiles, glusterTunedProfile.getSelectedItem()); glusterTunedProfile.setIsAvailable(((glusterTunedProfile.getItems().size()) > 0)); }
public org.ovirt.engine.core.common.action.VdcReturnValueBase endAction() { if ((!(hasTaskHandlers())) || ((getExecutionIndex()) == ((getTaskHandlers().size()) - 1))) { startFinalizingStep(); } try { initiateLockEndAction(); setActionState(); handleTransactivity(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(endActionScope, this); } catch (javax.ejb.TransactionRolledbackLocalException e) { log.info("endAction: Transaction was aborted in {}", this.getClass().getName()); } finally { freeLockEndAction(); if (getCommandShouldBeLogged()) { logCommand(); } } return getReturnValue(); }
@java.lang.Override public void doPolling(org.ovirt.engine.core.compat.Guid cmdId, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandExecutionStatus(cmdId); if ((status != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) && ((org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandStatus(cmdId)) == (org.ovirt.engine.core.compat.CommandStatus.ACTIVE))) { return; } boolean anyFailed = false; int completedChildren = 0; org.ovirt.engine.core.bll.CommandBase<?> command = getCommand(cmdId); for (org.ovirt.engine.core.compat.Guid childCmdId : childCmdIds) { org.ovirt.engine.core.bll.CommandBase<?> child = getCommand(childCmdId); switch (org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandStatus(childCmdId)) { case NOT_STARTED : case ACTIVE : log.info("Waiting on child command id: '{}' type:'{}' of '{}' (id: '{}') to complete", childCmdId, child.getActionType(), command.getActionType(), cmdId); return; case FAILED : case FAILED_RESTARTED : case UNKNOWN : anyFailed = true; break; default : org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(childCmdId); if ((cmdEntity.isCallbackNotified()) || (!(cmdEntity.isCallbackEnabled()))) { ++completedChildren; break; } else { log.info("Waiting on child command id: '{}' type:'{}' of '{}' (id: '{}') to complete", childCmdId, child.getActionType(), command.getActionType(), cmdId); return; } } } childCommandsExecutionEnded(command, anyFailed, childCmdIds, status, completedChildren); }
private boolean evaluateHostUpgradeInternalCommandProgress(java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.bll.CommandBase<?> rootCommand) { org.ovirt.engine.core.common.businessentities.CommandEntity upgradeCommand = getHostUpgradeInternalCommand(childCmdIds); if (upgradeCommand == null) { return false; } switch (upgradeCommand.getCommandStatus()) { case ACTIVE : case NOT_STARTED : case FAILED : case FAILED_RESTARTED : case UNKNOWN : rootCommand.setCommandStatus(CommandStatus.FAILED); return true; case SUCCEEDED : rootCommand.setCommandStatus(CommandStatus.SUCCEEDED); return true; } return true; }

@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { command.getParameters().setTaskGroupSuccess(((!anyFailed) && (status == (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)))); command.setCommandStatus((command.getParameters().getTaskGroupSuccess() ? org.ovirt.engine.core.compat.CommandStatus.SUCCEEDED : org.ovirt.engine.core.compat.CommandStatus.FAILED)); log.info("Command '{}' id: '{}' child commands '{}' executions were completed, status '{}'", command.getActionType(), command.getCommandId(), childCmdIds, command.getCommandStatus()); }
private org.ovirt.engine.core.common.action.CloneCinderDisksParameters buildCinderChildCommandParameters(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks, org.ovirt.engine.core.compat.Guid vmSnapshotId) { org.ovirt.engine.core.common.action.CloneCinderDisksParameters createParams = new org.ovirt.engine.core.common.action.CloneCinderDisksParameters(cinderDisks, vmSnapshotId, diskInfoDestinationMap); createParams.setParentHasTasks((!(org.ovirt.engine.core.bll.AddVmTemplateCommand.getReturnValue().getVdsmTaskIdList().isEmpty()))); return withRootCommandInfo(createParams); }
private void removeCinderDisks(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks) { org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters removeParam = new org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId(), cinderDisks); removeParam.setParentHasTasks((!(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getReturnValue().getVdsmTaskIdList().isEmpty()))); java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> future = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveAllVmCinderDisks, withRootCommandInfo(removeParam), org.ovirt.engine.core.bll.RemoveVmTemplateCommand.cloneContextAndDetachFromParent(), org.ovirt.engine.core.bll.storage.CINDERStorageHelper.getStorageEntities(cinderDisks)); try { future.get().getActionReturnValue(); } catch (java.lang.InterruptedException | java.util.concurrent.ExecutionException e) { log.error("Exception", e); } }
private org.ovirt.engine.core.common.action.CloneCinderDisksParameters buildCinderChildCommandParameters(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks, org.ovirt.engine.core.compat.Guid vmSnapshotId) { org.ovirt.engine.core.common.action.CloneCinderDisksParameters createParams = new org.ovirt.engine.core.common.action.CloneCinderDisksParameters(cinderDisks, vmSnapshotId, diskInfoDestinationMap); createParams.setParentHasTasks((!(org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getVdsmTaskIdList().isEmpty()))); return withRootCommandInfo(createParams); }
private org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters buildCinderChildCommandParameters(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks) { org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters createParams = new org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters(); createParams.setCinderDisks(cinderDisks); createParams.setParentCommand(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getActionType()); createParams.setParentParameters(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getParameters()); createParams.setShouldBeEndedByParent(false); return createParams; }
private void handleCinderSnapshotDisks(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks) { org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters params = buildCinderChildCommandParameters(cinderDisks); java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> future = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveAllCinderSnapshotDisks, params, org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.cloneContextAndDetachFromParent(), org.ovirt.engine.core.bll.storage.connection.CINDERStorageHelper.getStorageEntities(cinderDisks)); try { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValueBase = future.get(); if (!(vdcReturnValueBase.getSucceeded())) { log.error("Error removing snapshots for Cinder disks"); } } catch (java.lang.InterruptedException | java.util.concurrent.ExecutionException e) { log.error("Error removing snapshots for Cinder disks"); } }


@org.junit.Test public void testRecomputeHostMissing() { org.ovirt.optimizer.solver.problemspace.ClusterSituation start = prepareDummyCluster(); org.ovirt.optimizer.solver.problemspace.Migration m1 = new org.ovirt.optimizer.solver.problemspace.Migration(); org.ovirt.engine.sdk.entities.Host h1 = new org.ovirt.engine.sdk.entities.Host(); h1.setId("host1"); org.ovirt.engine.sdk.entities.VM vm1 = new org.ovirt.engine.sdk.entities.VM(); vm1.setId("vm1"); vm1.setHost(h1); m1.setVm(vm1); m1.recomputeSituationAfter(start); assertEquals("host1", m1.getAssignment("vm1")); assertEquals("host2", m1.getAssignment("vm2")); assertEquals("host1", m1.getAssignment("vm3")); assertEquals("host2", m1.getAssignment("vm4")); assertEquals(false, m1.getHostToVmAssignments().containsKey(null)); assertEquals(2, m1.getHostToVmAssignments().get("host1").size()); assertEquals(2, m1.getHostToVmAssignments().get("host2").size()); }
@org.junit.Test public void testRecomputeChange() { org.ovirt.optimizer.solver.problemspace.ClusterSituation start = prepareDummyCluster(); org.ovirt.optimizer.solver.problemspace.Migration m1 = new org.ovirt.optimizer.solver.problemspace.Migration(); org.ovirt.engine.sdk.entities.Host h1 = new org.ovirt.engine.sdk.entities.Host(); h1.setId("host1"); org.ovirt.engine.sdk.entities.Host h2 = new org.ovirt.engine.sdk.entities.Host(); h2.setId("host2"); org.ovirt.engine.sdk.entities.VM vm1 = new org.ovirt.engine.sdk.entities.VM(); vm1.setId("vm1"); vm1.setHost(h1); m1.setVm(vm1); m1.setDestination(h2); m1.recomputeSituationAfter(start); assertEquals("host2", m1.getAssignment("vm1")); assertEquals("host2", m1.getAssignment("vm2")); assertEquals("host1", m1.getAssignment("vm3")); assertEquals("host2", m1.getAssignment("vm4")); assertEquals(1, m1.getHostToVmAssignments().get("host1").size()); assertEquals(3, m1.getHostToVmAssignments().get("host2").size()); }
private void updateVmAfterMigrationToDifferentCluster() { if (org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getVdsGroupId().equals(org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().getTargetVdsGroupId())) { return; } org.ovirt.engine.core.common.action.ChangeVMClusterParameters params = new org.ovirt.engine.core.common.action.ChangeVMClusterParameters(org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().getTargetVdsGroupId(), org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); setSucceeded(org.ovirt.engine.core.bll.MigrateVmCommand.getBackend().runInternalAction(VdcActionType.ChangeVMCluster, params).getSucceeded()); }

@java.lang.Override protected boolean canDoAction() { if (!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.canRunActionOnNonManagedVm())) { return false; } if ((!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.isInternalExecution())) && (!(org.ovirt.engine.core.utils.ObjectIdentityChecker.CanUpdateField(org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm(), "vdsGroupId", org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm().getStatus())))) { addCanDoActionMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } org.ovirt.engine.core.bll.ChangeVmClusterValidator validator = new org.ovirt.engine.core.bll.ChangeVmClusterValidator(this, org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getClusterId()); return validator.validate(); }

private void processVmsWithDevicesChange() { if (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(vdsManager.getGroupCompatibilityVersion()))) { if (!(vmsWithChangedDevices.isEmpty())) { java.util.ArrayList<java.lang.String> vmsToUpdate = new java.util.ArrayList(vmsWithChangedDevices.size()); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> pair : vmsWithChangedDevices) { org.ovirt.engine.core.compat.Guid vmId = pair.getFirst().getId(); if (vmDynamicToSave.containsKey(vmId)) { vmDynamicToSave.get(vmId).setHash(pair.getSecond().getVmDynamic().getHash()); vmsToUpdate.add(vmId.toString()); } else { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.warn("VM '{}' not in changed list, skipping devices update.", vmId); } } updateVmDevices(vmsToUpdate); } } }
@java.lang.Override public void onDragEnter(com.google.gwt.event.dom.client.DragEnterEvent event) { doDrag(event, false); }

@java.lang.Override public void onDrop(com.google.gwt.event.dom.client.DropEvent event) { event.preventDefault(); doDrag(event, true); table.getElement().removeClassName(style.networkGroupDragOver()); }
@java.lang.Override public void onDragLeave(com.google.gwt.event.dom.client.DragLeaveEvent event) { table.getElement().removeClassName(style.networkGroupDragOver()); }


@java.lang.Override public final void onBootstrap() { java.util.logging.Logger rootLogger = java.util.logging.Logger.getLogger(""); initLocalStorageLogHandler(rootLogger); initUncaughtExceptionHandler(rootLogger); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { performBootstrap(); } }); }

@java.lang.Override public void onUncaughtException(java.lang.Throwable t) { rootLogger.log(java.util.logging.Level.SEVERE, "Uncaught exception: ", t); alertManager.showUncaughtExceptionAlert(t); }
void initUncaughtExceptionHandler(final java.util.logging.Logger rootLogger) { com.google.gwt.core.client.GWT.setUncaughtExceptionHandler(new com.google.gwt.core.client.GWT.UncaughtExceptionHandler() { @java.lang.Override public void onUncaughtException(java.lang.Throwable t) { rootLogger.log(java.util.logging.Level.SEVERE, "Uncaught exception: ", t); alertManager.showUncaughtExceptionAlert(t); } }); }
@org.junit.Test public void testQueryExecution() { org.ovirt.engine.core.common.businessentities.VmTemplate expected = new org.ovirt.engine.core.common.businessentities.VmTemplate(); org.ovirt.engine.core.dao.VmTemplateDao vmTemplateDaoMock = mock(org.ovirt.engine.core.dao.VmTemplateDao.class); when(vmTemplateDaoMock.getTemplatesWithPermittedAction(getUser().getId(), getActionGroup())).thenReturn(java.util.Collections.singletonList(expected)); when(getDbFacadeMockInstance().getVmTemplateDao()).thenReturn(vmTemplateDaoMock); getQuery().executeQueryCommand(); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> actual = ((java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>) (getQuery().getQueryReturnValue().getReturnValue())); assertEquals("Wrong number of VDS Groups", 1, actual.size()); assertEquals("Wrong VDS Groups", expected, actual.get(0)); }
@org.junit.BeforeClass public static void initTestCase() throws java.lang.Exception { if ((org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource) == null) { org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource = org.ovirt.engine.core.dao.BaseDaoTestCase.createDataSource(); org.ovirt.engine.core.dao.BaseDaoTestCase.ejbRule.mockResource(ContainerManagedResourceType.DATA_SOURCE, org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource); final org.dbunit.dataset.IDataSet dataset = org.ovirt.engine.core.dao.BaseDaoTestCase.initDataSet(); DatabaseOperation.CLEAN_INSERT.execute(org.ovirt.engine.core.dao.BaseDaoTestCase.getConnection(), dataset); org.springframework.mock.jndi.SimpleNamingContextBuilder builder = new org.springframework.mock.jndi.SimpleNamingContextBuilder(); builder.bind("java:/ENGINEDataSource", org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource); builder.activate(); } }


protected void logMonitorLockReleased(java.lang.String commandName) { final org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.bll.VdsCommand.getVds(); log.info("{} finished. Lock released. Monitoring can run now for host '{}' from data-center '{}'", commandName, vds.getName(), vds.getStoragePoolName()); }


private void updateAddAndSelectHostAvailability(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> availableHosts) { org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("AddHost", this); tempVar.setIsExecutionAllowed(((clusters.size()) > 0)); org.ovirt.engine.ui.uicommonweb.UICommand addHostAction = tempVar; if (hosts.isEmpty()) { addHostAction.setTitle(DataCenterConfigureHostsAction); getCompulsoryActions().add(addHostAction); } else { addHostAction.setTitle(DataCenterAddAnotherHostAction); getOptionalActions().add(addHostAction); } org.ovirt.engine.ui.uicommonweb.UICommand selectHostAction = new org.ovirt.engine.ui.uicommonweb.UICommand("SelectHost", this); selectHostAction.setIsChangeable(((availableHosts.size()) > 0)); selectHostAction.setIsExecutionAllowed(((availableHosts.size()) > 0)); if ((clusters.size()) > 0) { if (hosts.isEmpty()) { selectHostAction.setTitle(DataCenterSelectHostsAction); getCompulsoryActions().add(selectHostAction); } else { selectHostAction.setTitle(DataCenterSelectHostsAction); getOptionalActions().add(selectHostAction); } } }
@java.lang.Override public void updateAllDiskImageDynamicWithDiskIdByVmId(java.util.Collection<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic>> diskImageDynamicForVm) { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic>> sortedDisks = new java.util.ArrayList<>(); sortedDisks.addAll(diskImageDynamicForVm); java.util.Collections.sort(sortedDisks, new java.util.Comparator<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic>>() { @java.lang.Override public int compare(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic> o1, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic> o2) { return o1.getFirst().compareTo(o2.getFirst()); } }); getCallsHandler().executeStoredProcAsBatch("Updatedisk_image_dynamic_by_disk_id_and_vm_id", sortedDisks, getBatchImageGroupMapper()); }
@java.lang.Override public java.lang.String toString() { return ((serializeId(getFirst())) + '.') + (serializeId(getSecond())); }

@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; if ((getClass()) != (obj.getClass())) return false; org.ovirt.engine.core.common.businessentities.CommandEntity other = ((org.ovirt.engine.core.common.businessentities.CommandEntity) (obj)); return (((java.util.Objects.equals(commandId, other.commandId)) && ((commandType) == (other.commandType))) && (java.util.Objects.equals(getGuid(parentCommandId), getGuid(other.parentCommandId)))) && (java.util.Objects.equals(getGuid(rootCommandId), getGuid(other.rootCommandId))); }
public static org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid userId, org.ovirt.engine.core.compat.Guid commandId, org.ovirt.engine.core.compat.Guid parentCommandId, org.ovirt.engine.core.compat.Guid rootCommandId, org.ovirt.engine.core.compat.Guid jobId, org.ovirt.engine.core.compat.Guid stepId, org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase params, org.ovirt.engine.core.compat.CommandStatus status, boolean callbackEnabled, org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue) { org.ovirt.engine.core.common.businessentities.CommandEntity entity = new org.ovirt.engine.core.common.businessentities.CommandEntity(); entity.setUserId(userId); entity.setId(commandId); entity.setParentCommandId(parentCommandId); entity.setRootCommandId(rootCommandId); entity.setJobId(jobId); entity.setStepId(stepId); entity.setCommandType(actionType); entity.setCommandParameters(params); entity.setCommandStatus(status); entity.setCallbackEnabled(callbackEnabled); entity.setReturnValue(returnValue); return entity; }

@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(commandId) ? 0 : commandId.hashCode()); result = (prime * result) + ((commandType) == null ? 0 : commandType.hashCode()); result = (prime * result) + (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(parentCommandId) ? 0 : parentCommandId.hashCode()); result = (prime * result) + (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(rootCommandId) ? 0 : rootCommandId.hashCode()); return result; }
private org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid rootCommandId, boolean enableCallback) { return org.ovirt.engine.core.common.businessentities.CommandEntity.buildCommandEntity(org.ovirt.engine.core.bll.CommandBase.getUserId(), getCommandId(), ((getParameters().getParentParameters()) == null ? org.ovirt.engine.core.compat.Guid.Empty : getParameters().getParentParameters().getCommandId()), rootCommandId, (((getExecutionContext()) == null) || ((getExecutionContext().getJob()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getJob().getId()), (((getExecutionContext()) == null) || ((getExecutionContext().getStep()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getStep().getId()), getActionType(), getParameters(), commandStatus, enableCallback, getReturnValue()); }






@java.lang.Override protected org.ovirt.engine.core.common.businessentities.CommandEntity generateNewEntity() { org.ovirt.engine.core.common.businessentities.CommandEntity commandEntity = new org.ovirt.engine.core.common.businessentities.CommandEntity(); commandEntity.setCommandType(VdcActionType.AddBond); commandEntity.setCreatedAt(new java.util.Date(java.lang.System.currentTimeMillis())); commandEntity.setId(org.ovirt.engine.core.compat.Guid.newGuid()); commandEntity.setCommandStatus(CommandStatus.ACTIVE); org.ovirt.engine.core.common.action.VdcActionParametersBase params = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); commandEntity.setCommandParameters(params); return commandEntity; }
private boolean validateName(final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData data) { final int maxNameLength = getMaxNameLength(data.getVm()); org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> tmp = new org.ovirt.engine.ui.uicommonweb.models.EntityModel(data.getVm().getName()); tmp.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(maxNameLength), new org.ovirt.engine.ui.uicommonweb.validation.I18NNameValidation(), new org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel.UniqueNameValidator(data), new org.ovirt.engine.ui.uicommonweb.validation.IValidation() { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { return (data.isNameExistsInTheSystem()) && (data.getName().equals(data.getVm().getName())) ? org.ovirt.engine.ui.uicommonweb.validation.ValidationResult.fail(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason()) : org.ovirt.engine.ui.uicommonweb.validation.ValidationResult.ok(); } } }); data.setError((tmp.getIsValid() ? null : org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().invalidName())); return tmp.getIsValid(); }
protected T determineSelectedItems(java.util.List<T> newItems, T lastSelectedItem, java.util.List<T> lastSelectedItems) { T newSelectedItem = null; for (T newItem : newItems) { if (((org.ovirt.engine.core.common.businessentities.IVdcQueryable) (newItem)).getQueryableId().equals(((org.ovirt.engine.core.common.businessentities.IVdcQueryable) (lastSelectedItem)).getQueryableId())) { newSelectedItem = newItem; } else { for (T item : lastSelectedItems) { if (((org.ovirt.engine.core.common.businessentities.IVdcQueryable) (newItem)).getQueryableId().equals(((org.ovirt.engine.core.common.businessentities.IVdcQueryable) (item)).getQueryableId())) { selectedItems.add(newItem); } } } } return newSelectedItem; }



@java.lang.Override public void onNext(java.util.Map<java.lang.String, java.lang.Object> map) { try { printEventInDebug(map); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> changedVms = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> devicesChangedVms = new java.util.ArrayList<>(); convertEvent(changedVms, devicesChangedVms, map); if ((!(changedVms.isEmpty())) || (!(devicesChangedVms.isEmpty()))) { getVmsMonitoring(changedVms, devicesChangedVms).perform(); } } finally { subscription.request(1); } }











@java.lang.SuppressWarnings("unchecked") private void convertEvent(java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> changedVms, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> devicesChangedVms, java.util.Map<java.lang.String, java.lang.Object> map) { java.lang.Double notifyTime = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.removeNotifyTimeFromVmStatusEvent(map); for (java.util.Map.Entry<java.lang.String, java.lang.Object> entry : map.entrySet()) { org.ovirt.engine.core.compat.Guid vmid = new org.ovirt.engine.core.compat.Guid(((java.lang.String) (entry.getKey()))); org.ovirt.engine.core.common.businessentities.VM dbVm = dbFacade.getVmDao().get(vmid); org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData vdsmVm; if (dbVm == null) { vdsmVm = createVmInternalData(vmid, ((java.util.Map<java.lang.String, java.lang.Object>) (map.get(vmid.toString()))), notifyTime); } else { vdsmVm = createVmInternalData(dbVm, ((java.util.Map<java.lang.String, java.lang.Object>) (map.get(vmid.toString()))), notifyTime); if (!(vdsManager.getVdsId().equals(dbVm.getRunOnVds()))) { dbVm = null; } } changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, vdsmVm)); if (org.ovirt.engine.core.vdsbroker.VmsListFetcher.isDevicesChanged(dbVm, vdsmVm)) { devicesChangedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, vdsmVm)); } } }


private void refreshVmStats() { for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> monitoredVm : monitoredVms) { if (tryLockVmForUpdate(monitoredVm)) { org.ovirt.engine.core.vdsbroker.VmAnalyzer vmAnalyzer = getVmAnalyzer(monitoredVm); vmAnalyzers.add(vmAnalyzer); vmAnalyzer.analyze(); } } processVmsWithDevicesChange(); saveVmsToDb(); }
private void saveVmsToDb() { addUnmanagedVms(); getDbFacade().getVmDynamicDao().updateAllInBatch(vmDynamicToSave.values()); getDbFacade().getVmStatisticsDao().updateAllInBatch(vmStatisticsToSave); final java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics> allVmInterfaceStatistics = new java.util.LinkedList<>(); for (java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> list : vmInterfaceStatisticsToSave) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : list) { allVmInterfaceStatistics.add(iface.getStatistics()); } } getDbFacade().getVmNetworkStatisticsDao().updateAllInBatch(allVmInterfaceStatistics); getDbFacade().getDiskImageDynamicDao().updateAllDiskImageDynamicWithDiskIdByVmId(vmDiskImageDynamicToSave); getDbFacade().getLunDao().updateAllInBatch(vmLunDisksToSave); saveVmDevicesToDb(); saveVmGuestAgentNetworkDevices(); saveVmJobsToDb(); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (vdsManager.isMonitoringNeeded()) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = getVmsFetcher(); long fetchTime = java.lang.System.nanoTime(); if (fetcher.fetch()) { getVmsMonitoring(fetcher, fetchTime).perform(); } else { org.ovirt.engine.core.vdsbroker.PollVmStatsRefresher.log.info("Failed to fetch vms info for host '{}' - skipping VMs monitoring.", vdsManager.getVdsName()); } } }


private org.ovirt.engine.core.vdsbroker.VmsMonitoring getVmsMonitoring(java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> changedVms, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> devicesChangedVms) { return new org.ovirt.engine.core.vdsbroker.VmsMonitoring(vdsManager, changedVms, devicesChangedVms, auditLogDirector, java.lang.System.nanoTime()); }
@java.lang.Override public void onNext(java.util.Map<java.lang.String, java.lang.Object> map) { try { printEventInDebug(map); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> changedVms = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> devicesChangedVms = new java.util.ArrayList<>(); convertEvent(changedVms, devicesChangedVms, map); if ((!(changedVms.isEmpty())) || (!(devicesChangedVms.isEmpty()))) { getVmsMonitoring(changedVms, devicesChangedVms).perform(); } } finally { subscription.request(1); } }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (vdsManager.isMonitoringNeeded()) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = getVmsFetcher(); long fetchTime = java.lang.System.nanoTime(); if (fetcher.fetch()) { getVmsMonitoring(fetcher, fetchTime).perform(); } else { org.ovirt.engine.core.vdsbroker.PollVmStatsRefresher.log.info("Failed to fetch vms info for host '{}' - skipping VMs monitoring.", vdsManager.getVdsName()); } } }
private org.ovirt.engine.core.vdsbroker.VmsMonitoring getVmsMonitoring(org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher, long fetchTime) { return new org.ovirt.engine.core.vdsbroker.VmsMonitoring(vdsManager, fetcher.getChangedVms(), fetcher.getVmsWithChangedDevices(), auditLogDirector, fetchTime, isTimeToRefreshStatistics()); }
private void refreshVmStats() { for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> monitoredVm : monitoredVms) { if (tryLockVmForUpdate(monitoredVm)) { org.ovirt.engine.core.vdsbroker.VmAnalyzer vmAnalyzer = getVmAnalyzer(monitoredVm); vmAnalyzers.add(vmAnalyzer); vmAnalyzer.analyze(); } } processVmsWithDevicesChange(); addUnmanagedVms(); flush(); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.VirtualNumaNode model, org.ovirt.engine.api.model.VirtualNumaNode transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getIndex(), transform.getIndex()); assertEquals(model.getMemory(), transform.getMemory()); java.util.List<org.ovirt.engine.api.model.Core> cpus1 = model.getCpu().getCores().getCore(); java.util.List<org.ovirt.engine.api.model.Core> cpus2 = transform.getCpu().getCores().getCore(); assertEquals(cpus1.size(), cpus2.size()); for (int i = 0; i < (cpus1.size()); i++) { assertEquals(cpus1.get(i).getIndex(), cpus2.get(i).getIndex()); } java.util.List<org.ovirt.engine.api.model.NumaNodePin> pins1 = model.getNumaNodePins().getNumaNodePin(); java.util.List<org.ovirt.engine.api.model.NumaNodePin> pins2 = transform.getNumaNodePins().getNumaNodePin(); assertEquals(pins1.size(), pins2.size()); for (int i = 0; i < (pins1.size()); i++) { assertEquals(pins1.get(i).getIndex(), pins2.get(i).getIndex()); } }

public void initMocks(org.ovirt.engine.core.vdsbroker.VmTestPairs vmData, boolean run) { stubDaos(); when(vdsManager.getVdsId()).thenReturn(VmTestPairs.SRC_HOST_ID); when(vdsManager.getClusterId()).thenReturn(VmTestPairs.CLUSTER_ID); when(vdsManager.getCopyVds()).thenReturn(vdsManagerVds); when(vmManager.isColdReboot()).thenReturn(false); when(vmsMonitoring.getVdsManager()).thenReturn(vdsManager); when(vmsMonitoring.getVmManager(any())).thenReturn(vmManager); when(vmsMonitoring.getResourceManager()).thenReturn(resourceManager); when(resourceManager.getVdsManager(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vdsManager); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(true); when(vmsMonitoring.getResourceManager().runVdsCommand(any(org.ovirt.engine.core.common.vdscommands.VDSCommandType.class), any(org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class))).thenReturn(vdsReturnValue); mockDstHostStatus(VDSStatus.Up); mockVmInDbForDstVms(vmData); vmAnalyzer = spy(new org.ovirt.engine.core.vdsbroker.VmAnalyzer(vmData.dbVm(), vmData.vdsmVm(), vmsMonitoring)); doReturn(auditLogDirector).when(vmAnalyzer).getAuditLogDirector(); if (run) { vmAnalyzer.analyze(); } }
public org.ovirt.engine.core.bll.ValidationResult isVirtIoScsiValid(org.ovirt.engine.core.common.businessentities.VM vm) { if ((org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI) != (disk.getDiskInterface())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((disk.getSgio()) != null) { if ((org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE) == (disk.getDiskStorageType())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.SCSI_GENERIC_IO_IS_NOT_SUPPORTED_FOR_IMAGE_DISK); } } if (vm != null) { if (!(org.ovirt.engine.core.common.FeatureSupported.virtIoScsi(vm.getVdsGroupCompatibilityVersion()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL); } if (!(isVirtioScsiControllerAttached(vm.getId()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_PERFORM_ACTION_VIRTIO_SCSI_IS_DISABLED); } return isOsSupportedForVirtIoScsi(vm); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
protected static void reportUnsupportedVnicProfileFeatures(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, java.util.List<org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilderBase.VNIC_PROFILE_PROPERTIES> unsupportedFeatures) { if (unsupportedFeatures.isEmpty()) { return; } org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVmId(vm.getId()); event.setVdsGroupId(vm.getVdsGroupId()); event.setCustomId(nic.getId().toString()); event.setCompatibilityVersion(vm.getVdsGroupCompatibilityVersion().toString()); event.addCustomValue("NicName", nic.getName()); event.addCustomValue("VnicProfile", (vnicProfile == null ? null : vnicProfile.getName())); java.lang.String[] unsupportedFeatureNames = new java.lang.String[unsupportedFeatures.size()]; for (int i = 0; i < (unsupportedFeatures.size()); i++) { unsupportedFeatureNames[i] = unsupportedFeatures.get(i).getFeatureName(); } event.addCustomValue("UnsupportedFeatures", org.apache.commons.lang.StringUtils.join(unsupportedFeatureNames, ", ")); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(event, AuditLogType.VNIC_PROFILE_UNSUPPORTED_FEATURES); }
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { return org.ovirt.engine.core.bll.VmSlaPolicyCommand.failVmStatusIllegal(); } if (!(org.ovirt.engine.core.common.FeatureSupported.vmSlaPolicy(org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm().getVdsGroupCompatibilityVersion()))) { return failCanDoAction(EngineMessage.VM_SLA_POLICY_NOT_SUPPORTED); } return true; }
private java.lang.Boolean getMigrateCompressed() { if (org.ovirt.engine.core.common.FeatureSupported.migrationCompression(MigrateVmCommand.getVm().getVdsGroupCompatibilityVersion())) { if ((MigrateVmCommand.getVm().getMigrateCompressed()) != null) { return MigrateVmCommand.getVm().getMigrateCompressed(); } if ((MigrateVmCommand.getVdsGroup().getMigrateCompressed()) != null) { return MigrateVmCommand.getVdsGroup().getMigrateCompressed(); } return org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DefaultMigrationCompression); } return null; }
protected void getDowntime() { if (org.ovirt.engine.core.common.FeatureSupported.migrateDowntime(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getVdsGroupCompatibilityVersion())) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = runVdsCommand(VDSCommandType.MigrateStatus, new org.ovirt.engine.core.common.vdscommands.MigrateStatusVDSCommandParameters(getDestinationVdsId(), org.ovirt.engine.core.bll.MigrateVmCommand.getVmId())); if (retVal != null) { actualDowntime = ((java.lang.Integer) (retVal.getReturnValue())); } } catch (org.ovirt.engine.core.common.errors.EngineException e) { migrationErrorCode = e.getErrorCode(); } } }
private java.lang.Boolean getAutoConverge() { if (org.ovirt.engine.core.common.FeatureSupported.autoConvergence(MigrateVmCommand.getVm().getVdsGroupCompatibilityVersion())) { if ((MigrateVmCommand.getVm().getAutoConverge()) != null) { return MigrateVmCommand.getVm().getAutoConverge(); } if ((MigrateVmCommand.getVdsGroup().getAutoConverge()) != null) { return MigrateVmCommand.getVdsGroup().getAutoConverge(); } return org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DefaultAutoConvergence); } return null; }
private boolean isTunnelMigrationUsed() { if (!(org.ovirt.engine.core.common.FeatureSupported.tunnelMigration(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getVdsGroupCompatibilityVersion()))) { return false; } return (org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getTunnelMigration()) != null ? org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getTunnelMigration() : org.ovirt.engine.core.bll.MigrateVmCommand.getVdsGroup().isTunnelMigration(); }
private java.lang.String getMigrationNetworkIp() { if (!(org.ovirt.engine.core.common.FeatureSupported.migrationNetwork(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getVdsGroupCompatibilityVersion()))) { return null; } org.ovirt.engine.core.common.businessentities.network.Network migrationNetwork = null; java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> allNetworksInCluster = org.ovirt.engine.core.bll.MigrateVmCommand.getNetworkDao().getAllForCluster(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getVdsGroupId()); for (org.ovirt.engine.core.common.businessentities.network.Network tempNetwork : allNetworksInCluster) { if (tempNetwork.getCluster().isMigration()) { migrationNetwork = tempNetwork; break; } } if (migrationNetwork != null) { if ((getMigrationNetworkAddress(org.ovirt.engine.core.bll.MigrateVmCommand.getVds().getId(), migrationNetwork.getName())) == null) { return null; } return getMigrationNetworkAddress(getDestinationVds().getId(), migrationNetwork.getName()); } return null; }
protected org.ovirt.engine.core.bll.ValidationResult validateDisplayType() { if (!(org.ovirt.engine.core.bll.validator.VmValidationUtils.isGraphicsAndDisplaySupported(vm.getOs(), vm.getVdsGroupCompatibilityVersion(), getVmActiveGraphics(), vm.getDefaultDisplayType()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_VM_DISPLAY_TYPE_IS_NOT_SUPPORTED_BY_OS); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public org.ovirt.engine.core.bll.ValidationResult validateFloppy() { if ((org.apache.commons.lang.StringUtils.isNotEmpty(runVmParam.getFloppyPath())) && (!(org.ovirt.engine.core.bll.validator.VmValidationUtils.isFloppySupported(vm.getOs(), vm.getVdsGroupCompatibilityVersion())))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_FLOPPY_IS_NOT_SUPPORTED_BY_OS); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
protected boolean validateVmProperties(org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String runOnceCustomProperties, java.util.List<java.lang.String> messages) { java.lang.String customProperties = (runOnceCustomProperties != null) ? runOnceCustomProperties : vm.getCustomProperties(); return getVmPropertiesUtils().validateVmProperties(vm.getVdsGroupCompatibilityVersion(), customProperties, messages); }
protected org.ovirt.engine.core.bll.ValidationResult validateMemorySize(org.ovirt.engine.core.common.businessentities.VM vm) { int maxSize; if (getOsRepository().get64bitOss().contains(vm.getOs())) { org.ovirt.engine.core.common.config.ConfigValues config = ((vm.getClusterArch()) == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64)) ? org.ovirt.engine.core.common.config.ConfigValues.VMPpc64BitMaxMemorySizeInMB : org.ovirt.engine.core.common.config.ConfigValues.VM64BitMaxMemorySizeInMB; maxSize = org.ovirt.engine.core.common.config.Config.getValue(config, vm.getVdsGroupCompatibilityVersion().getValue()); } else { maxSize = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VM32BitMaxMemorySizeInMB); } if ((vm.getMemSizeMb()) > maxSize) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_MEMORY_EXCEEDS_SUPPORTED_LIMIT); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
protected boolean pciAndIdeWithinLimit(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> allInterfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> allDisks = org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()); return checkPciAndIdeLimit(vm.getOs(), vm.getVdsGroupCompatibilityVersion(), vm.getNumOfMonitors(), allInterfaces, allDisks, org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasVirtioScsiController(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasWatchdog(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasMemoryBalloon(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasSoundDevice(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getReturnValue().getCanDoActionMessages()); }
public org.ovirt.engine.core.bll.ValidationResult isDiskInterfaceSupported(org.ovirt.engine.core.common.businessentities.VM vm) { if (vm != null) { if (!(org.ovirt.engine.core.bll.validator.VmValidationUtils.isDiskInterfaceSupportedByOs(vm.getOs(), vm.getVdsGroupCompatibilityVersion(), disk.getDiskInterface()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED, java.lang.String.format("$osName %s", org.ovirt.engine.core.bll.validator.storage.DiskValidator.getOsRepository().getOsName(vm.getOs()))); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
protected void synchronizeNics(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.context.CompensationContext compensationContext, org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(getMacPool(vm.getStoragePoolId())); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(vm.getVdsGroupId(), vm.getStoragePoolId(), vm.getVdsGroupCompatibilityVersion(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_SNAPSHOT_VM_INVALID_INTERFACES); vmInterfaceManager.removeAll(vm.getId()); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmInterface : vm.getInterfaces()) { vmInterface.setVmId(vm.getId()); if ((vmInterface.getId()) == null) { vmInterface.setId(org.ovirt.engine.core.compat.Guid.newGuid()); } vnicProfileHelper.updateNicWithVnicProfileForUser(vmInterface, user); vmInterfaceManager.add(vmInterface, compensationContext, true, vm.getOs(), vm.getVdsGroupCompatibilityVersion()); } vnicProfileHelper.auditInvalidInterfaces(vm.getName()); }
private java.lang.Integer calcMaxVCpu() { java.lang.Integer maxSockets = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmSockets, vm.getVdsGroupCompatibilityVersion().getValue()); java.lang.Integer maxVCpus = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmCpus, vm.getVdsGroupCompatibilityVersion().getValue()); maxVCpus = (vm.getCpuPerSocket()) * (java.lang.Math.min(maxSockets, (maxVCpus / (vm.getCpuPerSocket())))); return maxVCpus; }
public boolean isRebootCommandExecutionAllowed(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { if ((vms.isEmpty()) || (!(org.ovirt.engine.core.common.VdcActionUtils.canExecutePartially(vms, org.ovirt.engine.core.common.businessentities.VM.class, VdcActionType.RebootVm)))) { return false; } for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { org.ovirt.engine.core.compat.Version version = vm.getVdsGroupCompatibilityVersion(); org.ovirt.engine.core.compat.Version anyDcVersion = new org.ovirt.engine.core.compat.Version(); boolean compatibleCluster = isCommandCompatible(VdcActionType.RebootVm, version, anyDcVersion); boolean guestAgentPresent = !(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(vm.getVmIp())); boolean acpiEnabled = java.lang.Boolean.TRUE.equals(vm.getAcpiEnable()); if (!(compatibleCluster && (guestAgentPresent || acpiEnabled))) { return false; } } return true; }
public boolean isMemorySnapshotSupported(org.ovirt.engine.core.common.businessentities.VM vm) { if (vm == null) { return false; } boolean archMemorySnapshotSupported = isMemorySnapshotSupportedByArchitecture(vm.getClusterArch(), vm.getVdsGroupCompatibilityVersion()); return ((java.lang.Boolean) (getConfigValuePreConverted(ConfigurationValues.MemorySnapshotSupported, vm.getVdsGroupCompatibilityVersion().toString()))) && archMemorySnapshotSupported; }
private java.lang.String getMemoryFromActiveSnapshot() { if (memoryFromSnapshotUsed) { return org.apache.commons.lang.StringUtils.EMPTY; } if ((getFlow()) == (org.ovirt.engine.core.bll.RunVmCommand.RunVmFlow.RESUME_HIBERNATE)) { return org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume(); } if (!(org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(org.ovirt.engine.core.bll.RunVmCommand.getVm().getClusterArch(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getVdsGroupCompatibilityVersion()))) { return org.apache.commons.lang.StringUtils.EMPTY; } if (!(org.ovirt.engine.core.common.FeatureSupported.memorySnapshot(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVdsGroupCompatibilityVersion()))) { return org.apache.commons.lang.StringUtils.EMPTY; } return org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume(); }
private void edit() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = org.ovirt.engine.ui.uicommonweb.models.vms.EditVmInterfaceModel.createInstance(getEntity().getStaticData(), getEntity(), getEntity().getVdsGroupCompatibilityVersion(), ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>) (getItems())), getSelectedItem(), this); setWindow(model); }
private void newEntity() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = org.ovirt.engine.ui.uicommonweb.models.vms.NewVmInterfaceModel.createInstance(getEntity().getStaticData(), getEntity().getStatus(), getEntity().getStoragePoolId(), getEntity().getVdsGroupCompatibilityVersion(), ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>) (getItems())), this); setWindow(model); }
private void updateHaMaintenanceAvailability(java.util.List items) { if ((items == null) || ((items.size()) != 1)) { setHaMaintenanceAvailability(false); return; } org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem(); if (((vm == null) || (!(vm.isHostedEngine()))) || ((vm.getVdsGroupCompatibilityVersion().compareTo(Version.v3_4)) < 0)) { setHaMaintenanceAvailability(false); } else { setHaMaintenanceAvailability(true); } }
protected void datacenter_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.StoragePool datacenter = getDataCenter().getSelectedItem(); boolean isInVm = (getVm()) != null; if (datacenter == null) { return; } setMessage(null); updateShareableDiskEnabled(datacenter); updateDirectLunDiskEnabled(datacenter); updateInterface((isInVm ? getVm().getVdsGroupCompatibilityVersion() : null)); switch (getDiskStorageType().getEntity()) { case IMAGE : case CINDER : updateStorageDomains(datacenter); break; default : updateHosts(datacenter); break; } }
protected boolean isHotPlugSupported() { if (org.ovirt.engine.core.common.FeatureSupported.hotPlug(org.ovirt.engine.core.bll.VmCommand.getVm().getVdsGroupCompatibilityVersion())) { return true; } return failCanDoAction(EngineMessage.HOT_PLUG_IS_NOT_SUPPORTED); }
protected boolean isDiskSupportedForPlugUnPlug(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { if ((disk.getDiskInterface()) == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.IDE)) { addCanDoActionMessageVariable("diskAlias", disk.getDiskAlias()); addCanDoActionMessageVariable("vmName", org.ovirt.engine.core.bll.VmCommand.getVm().getName()); return failCanDoAction(EngineMessage.HOT_PLUG_IDE_DISK_IS_NOT_SUPPORTED); } java.util.Set<java.lang.String> diskHotpluggableInterfaces = osRepository.getDiskHotpluggableInterfaces(org.ovirt.engine.core.bll.VmCommand.getVm().getOs(), org.ovirt.engine.core.bll.VmCommand.getVm().getVdsGroupCompatibilityVersion()); if ((org.springframework.util.CollectionUtils.isEmpty(diskHotpluggableInterfaces)) || (!(diskHotpluggableInterfaces.contains(disk.getDiskInterface().name())))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); } return true; }
protected boolean isNicSupportedForPlugUnPlug() { if (osRepository.hasNicHotplugSupport(org.ovirt.engine.core.bll.VmCommand.getVm().getOs(), org.ovirt.engine.core.bll.VmCommand.getVm().getVdsGroupCompatibilityVersion())) { return true; } return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); }
public org.ovirt.engine.core.bll.ValidationResult isOsSupportedForVirtIoScsi(org.ovirt.engine.core.common.businessentities.VM vm) { if (!(org.ovirt.engine.core.bll.validator.VmValidationUtils.isDiskInterfaceSupportedByOs(vm.getOs(), vm.getVdsGroupCompatibilityVersion(), DiskInterface.VirtIO_SCSI))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public boolean isLiveMergeSupported(org.ovirt.engine.core.common.businessentities.VM vm) { return (vm != null) && ((java.lang.Boolean) (getConfigValuePreConverted(ConfigurationValues.LiveMergeSupported, vm.getVdsGroupCompatibilityVersion().toString()))); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getSysPrepUserName()) == null) ^ ((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getSysPrepPassword()) == null)) { return failCanDoAction(EngineMessage.VM_CANNOT_RUN_ONCE_WITH_ILLEGAL_SYSPREP_PARAM); } if ((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit()) != null) { if ((!(OsRepositoryImpl.INSTANCE.isWindows(org.ovirt.engine.core.bll.RunVmOnceCommand.getVm().getOs()))) && (!(org.ovirt.engine.core.common.FeatureSupported.cloudInit(org.ovirt.engine.core.bll.RunVmOnceCommand.getVm().getVdsGroupCompatibilityVersion())))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_CLOUD_INIT_IS_NOT_SUPPORTED); } if (org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit().isPasswordAlreadyStored()) { org.ovirt.engine.core.common.businessentities.VmBase temp = new org.ovirt.engine.core.common.businessentities.VmBase(); temp.setId(org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmId()); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(temp, false); org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit().setRootPassword(temp.getVmInit().getRootPassword()); } } return true; }
public boolean canVmsBePaused(java.util.List<org.ovirt.engine.core.common.businessentities.VM> items) { for (org.ovirt.engine.core.common.businessentities.VM vm : items) { if (!(isSuspendSupportedByArchitecture(vm.getClusterArch(), vm.getVdsGroupCompatibilityVersion()))) { return false; } } return true; }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__HOT_SET_CPUS); addCanDoActionMessage(EngineMessage.VAR__TYPE__VM); addCanDoActionMessageVariable("clusterVersion", org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getVdsGroupCompatibilityVersion()); addCanDoActionMessageVariable("architecture", org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getClusterArch()); }
@java.lang.Override protected void buildSysprepVmPayload(java.lang.String sysPrepContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setDeviceType(VmDeviceType.FLOPPY); vmPayload.getFiles().put(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getOsRepository().getSysprepFileName(vm.getOs(), vm.getVdsGroupCompatibilityVersion()), new java.lang.String(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.BASE_64.encode(sysPrepContent.getBytes()), java.nio.charset.Charset.forName(CharEncoding.UTF_8))); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vm.getId()), org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null, null); java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<java.lang.String, java.lang.Object>(); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addFloppyDetails(vmDevice, struct); addDevice(struct, vmDevice, vm.getFloppyPath()); }
private static boolean supportsHostDevicePassthrough(org.ovirt.engine.core.common.businessentities.VM vm) { return org.ovirt.engine.core.common.FeatureSupported.hostDevicePassthrough(vm.getVdsGroupCompatibilityVersion()); }
@java.lang.Override public void init() { super.init(); getIsAutoAssign().setEntity(true); getCustomPropertySheet().setKeyValueMap(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getCustomPropertiesList().get(vm.getVdsGroupCompatibilityVersion())); getCustomPropertySheet().deserialize(vm.getCustomProperties()); loadHosts(); }
protected org.ovirt.engine.core.bll.validator.VmWatchdogValidator getVmWatchdogValidator() { org.ovirt.engine.core.bll.validator.VmWatchdogValidator vmWatchdogValidator = null; org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog = createWatchdogFromParams(); if (org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getParameters().isVm()) { vmWatchdogValidator = new org.ovirt.engine.core.bll.validator.VmWatchdogValidator(org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getVm().getOs(), watchdog, org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getVm().getVdsGroupCompatibilityVersion()); } else { if ((org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getVmTemplate().getVdsGroupId()) != null) { vmWatchdogValidator = new org.ovirt.engine.core.bll.validator.VmWatchdogValidator(org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getVmTemplate().getOsId(), watchdog, org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getEffectiveCompatibilityVersion()); } } return vmWatchdogValidator; }
static void handleIoTune(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskProfileStorageQosMap, java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<java.lang.String, java.lang.Long>> storageQosIoTuneMap) { if (org.ovirt.engine.core.common.FeatureSupported.storageQoS(vm.getVdsGroupCompatibilityVersion())) { java.util.Map<java.lang.String, java.lang.Long> ioTune = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.buildIoTune(diskImage, diskProfileStorageQosMap, storageQosIoTuneMap); if (ioTune != null) { if ((vmDevice.getSpecParams()) == null) { vmDevice.setSpecParams(new java.util.HashMap<java.lang.String, java.lang.Object>()); } vmDevice.getSpecParams().put(VdsProperties.Iotune, ioTune); } } }
protected void buildVmNumaProperties() { final java.lang.String compatibilityVersion = vm.getVdsGroupCompatibilityVersion().toString(); addNumaSetting(compatibilityVersion); }
private static void addCdDetails(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getOsRepository(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getVdsGroupCompatibilityVersion()); if ("scsi".equals(cdInterface)) { struct.put(VdsProperties.Index, "0"); struct.put(VdsProperties.Address, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.createAddressForScsiDisk(0, 0)); } else if ("ide".equals(cdInterface)) { struct.put(VdsProperties.Index, "2"); } struct.put(VdsProperties.INTERFACE, cdInterface); struct.put(VdsProperties.ReadOnly, java.lang.Boolean.TRUE.toString()); struct.put(VdsProperties.Shareable, java.lang.Boolean.FALSE.toString()); }
@java.lang.Override protected void buildVmGraphicsDevices() { boolean graphicsOverriden = ((vm.isRunOnce()) && ((vm.getGraphicsInfos()) != null)) && (!(vm.getGraphicsInfos().isEmpty())); boolean usesGraphicsAsDevice = org.ovirt.engine.core.common.FeatureSupported.graphicsDeviceEnabled(vm.getVdsGroupCompatibilityVersion()); java.util.Map<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.GraphicsInfo> infos = vm.getGraphicsInfos(); java.util.Map<java.lang.String, java.lang.Object> specParamsFromVm = buildVmGraphicsSpecParamsFromVm(infos); if (graphicsOverriden) { buildVmGraphicsDevicesOverriden(infos, usesGraphicsAsDevice, specParamsFromVm); } else { buildVmGraphicsDevicesFromDb(usesGraphicsAsDevice, specParamsFromVm); } }
@java.lang.Override protected void buildVmBootSequence() { if ((managedDevices) != null) { org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.updateVmDevicesBootOrder(vm, (vm.isRunOnce() ? vm.getBootSequence() : vm.getDefaultBootSequence()), managedDevices, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(vm.getVdsGroupCompatibilityVersion())); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : managedDevices) { for (java.util.Map struct : devices) { java.lang.String deviceId = ((java.lang.String) (struct.get(VdsProperties.DeviceId))); if ((deviceId != null) && (deviceId.equals(vmDevice.getDeviceId().toString()))) { if ((vmDevice.getBootOrder()) > 0) { struct.put(VdsProperties.BootOrder, java.lang.String.valueOf(vmDevice.getBootOrder())); } else { struct.keySet().remove(VdsProperties.BootOrder); } break; } } } } }
public static void updateBootOrder(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDao().get(vmId); if (vm != null) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.getVmDeviceByVmId(vmId); for (org.ovirt.engine.core.common.businessentities.VmDevice device : devices) { device.setBootOrder(0); } org.ovirt.engine.core.bll.VmHandler.updateDisksForVm(vm, org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getDiskDao().getAllForVm(vmId)); org.ovirt.engine.core.bll.VmHandler.updateNetworkInterfacesFromDb(vm); boolean isOldCluster = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(vm.getVdsGroupCompatibilityVersion()); org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.updateVmDevicesBootOrder(vm, devices, isOldCluster); org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.updateBootOrderInBatch(devices); } }
public static void updateVmDevices(org.ovirt.engine.core.common.action.VmManagementParametersBase params, org.ovirt.engine.core.common.businessentities.VM oldVm) { org.ovirt.engine.core.common.businessentities.VmBase oldVmBase = oldVm.getStaticData(); org.ovirt.engine.core.common.businessentities.VmBase newVmBase = params.getVmStaticData(); if (newVmBase == null) { return; } org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateCdPath(oldVmBase, newVmBase); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateBootOrder(oldVmBase, newVmBase); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateVideoDevices(oldVmBase, newVmBase); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateUsbSlots(oldVmBase, newVmBase); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateMemoryBalloon(newVmBase.getId(), params.isBalloonEnabled()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateSoundDevice(oldVmBase, newVmBase, oldVm.getVdsGroupCompatibilityVersion(), params.isSoundDeviceEnabled()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateSmartcardDevice(oldVm, newVmBase); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateConsoleDevice(newVmBase.getId(), params.isConsoleEnabled()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateVirtioScsiController(newVmBase.getId(), params.isVirtioScsiEnabled()); }
private boolean isPlugAvailableByDisks(boolean plug) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.Disk>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { boolean isLocked = ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) && ((((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)).getImageStatus()) == (org.ovirt.engine.core.common.businessentities.storage.ImageStatus.LOCKED)); boolean isDiskHotpluggableInterface = false; if ((getEntity()) != null) { isDiskHotpluggableInterface = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDiskHotpluggableInterfaces(getEntity().getOs(), getEntity().getVdsGroupCompatibilityVersion()).contains(disk.getDiskInterface()); } if ((((disk.getPlugged()) == plug) || isLocked) || ((!isDiskHotpluggableInterface) && (!(isVmDown())))) { return false; } } return true; }
private void addDevice(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String path) { boolean isPayload = (org.ovirt.engine.core.common.businessentities.VmPayload.isPayload(vmDevice.getSpecParams())) && (vmDevice.getDevice().equals(VmDeviceType.CDROM.getName())); java.util.Map<java.lang.String, java.lang.Object> specParams = ((vmDevice.getSpecParams()) == null) ? java.util.Collections.<java.lang.String, java.lang.Object>emptyMap() : vmDevice.getSpecParams(); if (path != null) { struct.put(VdsProperties.Path, (isPayload ? "" : path)); } if (isPayload) { java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getVdsGroupCompatibilityVersion()); if ("scsi".equals(cdInterface)) { struct.put(VdsProperties.Index, "1"); struct.put(VdsProperties.Address, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.createAddressForScsiDisk(0, 1)); } else if ("ide".equals(cdInterface)) { struct.put(VdsProperties.Index, "3"); } } struct.put(VdsProperties.SpecParams, specParams); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addBootOrder(vmDevice, struct); devices.add(struct); addToManagedDevices(vmDevice); }
protected void updateExtendImageSizeSupported() { org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); model.setExtendImageSizeSupported(((java.lang.Boolean) (returnValue))); } }); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(query, VdcActionType.ExtendImageSize, vm.getVdsGroupCompatibilityVersion(), dataCenterVersion); }
@java.lang.Override protected void buildVmSoundDevices() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmSoundDevices = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdAndType(vm.getId(), VmDeviceGeneralType.SOUND); if (!(vmSoundDevices.isEmpty())) { createInfo.put(VdsProperties.soundDevice, osRepository.getSoundDevice(vm.getStaticData().getOsId(), vm.getVdsGroupCompatibilityVersion())); } }
@java.lang.Override public void finished(org.ovirt.engine.core.common.businessentities.VmBase source, org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel destination) { getModel().getIsStateless().setIsAvailable(((vm.getVmPoolId()) == null)); getModel().getIsRunAndPause().setIsAvailable(((vm.getVmPoolId()) == null)); getModel().getCpuSharesAmount().setEntity(vm.getCpuShares()); updateCpuSharesSelection(); updateRngDevice(getVm().getId()); updateTimeZone(vm.getTimeZone()); updateGraphics(); getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags()); getModel().getStorageDomain().setIsChangeable(false); getModel().getProvisioning().setIsAvailable(false); getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid())); getModel().getCpuPinning().setEntity(vm.getCpuPinning()); getModel().getCustomPropertySheet().deserialize(vm.getCustomProperties()); if (isHotSetCpuSupported()) { getModel().getTotalCPUCores().getEntityChangedEvent().removeListener(getModel()); getModel().getCoresPerSocket().getSelectedItemChangedEvent().removeListener(getModel()); getModel().getNumOfSockets().getSelectedItemChangedEvent().removeListener(getModel()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostById(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { runningOnHost = ((org.ovirt.engine.core.common.businessentities.VDS) (returnValue)); hostCpu = calculateHostCpus(); updateNumOfSockets(); } }), vm.getRunOnVds()); } updateCpuProfile(vm.getVdsGroupId(), vm.getVdsGroupCompatibilityVersion(), vm.getCpuProfileId()); }
@java.lang.Override public boolean canBeSelected() { boolean hasVmSpiceSupport = java.lang.Boolean.TRUE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().hasSpiceSupport(getEntity().getOs(), getEntity().getVdsGroupCompatibilityVersion())); return (getEntity().getGraphicsInfos().containsKey(GraphicsType.SPICE)) && hasVmSpiceSupport; }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__HOT_SET_MEMORY); addCanDoActionMessage(EngineMessage.VAR__TYPE__VM); addCanDoActionMessageVariable("clusterVersion", org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getVdsGroupCompatibilityVersion()); addCanDoActionMessageVariable("architecture", org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getClusterArch()); }
private org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilderBase createBuilder() { if (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(vm.getVdsGroupCompatibilityVersion())) { return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmOldInfoBuilder(vm, createInfo); } else { return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder(vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getParameters().getVdsId(), createInfo); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((disk.getVm()) == null) { return; } boolean isVirtioScsiEnabled = java.lang.Boolean.TRUE.equals(((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity()); org.ovirt.engine.core.compat.Version clusterVersion = disk.getVm().getVdsGroupCompatibilityVersion(); interfaceInfoIcon.setVisible((((clusterVersion.compareTo(Version.v3_3)) >= 0) && (!isVirtioScsiEnabled))); }
protected void updateLiveStorageMigrationEnabled() { final org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); org.ovirt.engine.core.compat.Version dcCompatibilityVersion = ((dataCenter.getCompatibilityVersion()) != null) ? dataCenter.getCompatibilityVersion() : new org.ovirt.engine.core.compat.Version(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); model.setIsLiveStorageMigrationEnabled(((java.lang.Boolean) (returnValue))); } }), VdcActionType.LiveMigrateVmDisks, vm.getVdsGroupCompatibilityVersion(), dcCompatibilityVersion); } }), vm.getStoragePoolId()); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (target)); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); org.ovirt.engine.core.common.businessentities.VM vm = model.getEntity(); org.ovirt.engine.core.compat.Version minClusterVersion = vm.getVdsGroupCompatibilityVersion(); org.ovirt.engine.core.compat.Version minDcVersion = dataCenter.getCompatibilityVersion(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (target)); model.setIsCloneVmSupported(((java.lang.Boolean) (returnValue))); } }), VdcActionType.AddVmFromSnapshot, minClusterVersion, minDcVersion); }
protected void updateIsCloneVmSupported() { if ((getEntity()) == null) { return; } org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (target)); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); org.ovirt.engine.core.common.businessentities.VM vm = model.getEntity(); org.ovirt.engine.core.compat.Version minClusterVersion = vm.getVdsGroupCompatibilityVersion(); org.ovirt.engine.core.compat.Version minDcVersion = dataCenter.getCompatibilityVersion(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (target)); model.setIsCloneVmSupported(((java.lang.Boolean) (returnValue))); } }), VdcActionType.AddVmFromSnapshot, minClusterVersion, minDcVersion); } }), vm.getStoragePoolId()); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); org.ovirt.engine.core.compat.Version dcCompatibilityVersion = ((dataCenter.getCompatibilityVersion()) != null) ? dataCenter.getCompatibilityVersion() : new org.ovirt.engine.core.compat.Version(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); model.setIsLiveStorageMigrationEnabled(((java.lang.Boolean) (returnValue))); } }), VdcActionType.LiveMigrateVmDisks, vm.getVdsGroupCompatibilityVersion(), dcCompatibilityVersion); }
protected void updateIsDiskHotPlugAvailable() { org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.core.compat.Version clusterCompatibilityVersion = vm.getVdsGroupCompatibilityVersion(); if (clusterCompatibilityVersion == null) { setIsDiskHotPlugSupported(false); } else { setIsDiskHotPlugSupported((!(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDiskHotpluggableInterfaces(getEntity().getOs(), clusterCompatibilityVersion).isEmpty()))); } }
private boolean tryLockVmForUpdate(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> pair, long fetchTime, org.ovirt.engine.core.compat.Guid vdsId) { org.ovirt.engine.core.compat.Guid vmId = getVmId(pair); if (vmId != null) { org.ovirt.engine.core.vdsbroker.VmManager vmManager = getResourceManager().getVmManager(vmId); if (vmManager.trylock()) { if (!(vmManager.isLatestData(pair.getSecond(), vdsId))) { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.warn(("skipping VM '{}' from this monitoring cycle" + " - newer VM data was already processed"), vmId); vmManager.unlock(); } else if (((vmManager.getVmDataChangedTime()) != null) && ((fetchTime - (vmManager.getVmDataChangedTime())) <= 0)) { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.warn(("skipping VM '{}' from this monitoring cycle" + " - the VM data has changed since fetching the data"), vmId); vmManager.unlock(); } else { vmManagers.put(vmId, vmManager); return true; } } else { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.debug(("skipping VM '{}' from this monitoring cycle" + " - the VM is locked by its VmManager "), getVmId(pair)); } } return false; }
public org.ovirt.engine.core.vdsbroker.VmManager getVmManager(org.ovirt.engine.core.compat.Guid vmId) { return vmManagers.get(vmId); }
@java.lang.Override public void updateMinAllocatedMemory() { org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster dataCenterWithCluster = getModel().getDataCenterWithClustersList().getSelectedItem(); if (dataCenterWithCluster == null) { return; } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = dataCenterWithCluster.getCluster(); if (cluster == null) { return; } if ((getModel().getMemSize().getEntity()) < (vm.getVmMemSizeMb())) { double overCommitFactor = 100.0 / (cluster.getMaxVdsMemoryOverCommit()); getModel().getMinAllocatedMemory().setEntity(((int) ((getModel().getMemSize().getEntity()) * overCommitFactor))); } else { getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem()); } }

protected org.ovirt.engine.core.vdsbroker.VmAnalyzer getVmAnalyzer(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> pair, org.ovirt.engine.core.vdsbroker.VdsManager vdsManager, boolean timeToUpdateStatistics) { org.ovirt.engine.core.vdsbroker.VmAnalyzer vmAnalyzer = new org.ovirt.engine.core.vdsbroker.VmAnalyzer(pair.getFirst(), pair.getSecond(), this, timeToUpdateStatistics); vmAnalyzer.setAuditLogDirector(auditLogDirector); vmAnalyzer.setVdsManager(vdsManager); return vmAnalyzer; }






private java.util.function.Predicate<java.lang.reflect.Constructor<?>> getConstructorRequiredByCommandsFactoryPredicate() { java.util.function.Predicate<java.lang.reflect.Constructor<?>> parametersConstructorSignature = createConstructorSignaturePredicate(org.ovirt.engine.core.common.action.VdcActionParametersBase.class); java.util.function.Predicate<java.lang.reflect.Constructor<?>> parametersAndContextConstructorSignature = createConstructorSignaturePredicate(org.ovirt.engine.core.common.action.VdcActionParametersBase.class, org.ovirt.engine.core.bll.context.CommandContext.class); java.util.function.Predicate<java.lang.reflect.Constructor<?>> guidConstructorSignature = createConstructorSignaturePredicate(org.ovirt.engine.core.compat.Guid.class); return parametersConstructorSignature.or(parametersAndContextConstructorSignature).or(guidConstructorSignature); }
private void populateStorageDomainOvfData() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo> storageDomainOvfInfos = org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getDbFacade().getStorageDomainOvfInfoDao().getAllForDomain(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getStorageDomainId()); ovfDiskCount = storageDomainOvfInfos.size(); java.util.Collections.sort(storageDomainOvfInfos, new java.util.Comparator<org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo>() { @java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo storageDomainOvfInfo, org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo storageDomainOvfInfo2) { int compareResult = org.apache.commons.lang.ObjectUtils.compare(storageDomainOvfInfo.getLastUpdated(), storageDomainOvfInfo2.getLastUpdated()); if (compareResult != 0) { return compareResult; } return storageDomainOvfInfo.getOvfDiskId().compareTo(storageDomainOvfInfo2.getOvfDiskId()); } }); for (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo storageDomainOvfInfo : storageDomainOvfInfos) { if ((storageDomainOvfInfo.getStatus()) != (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.DISABLED)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage ovfDisk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getDbFacade().getDiskDao().get(storageDomainOvfInfo.getOvfDiskId()))); domainOvfStoresInfoForUpdate.add(new org.ovirt.engine.core.common.utils.Pair(storageDomainOvfInfo, ovfDisk)); } } }







@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.ImportExportRepoImageBaseModel model) { driver.edit(model); importAsTemplateEditor.setVisible(model.isImportModel()); clusterEditor.setVisible(model.isImportModel()); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (("ImportExportEntities".equals(args.propertyName)) && ((model.getEntities()) != null)) { imageList.setRowData(model.getEntities()); } } }); initTable(model); }

private long findUnusedMac() { int index = usedMacs.nextClearBit(0); return (rangeStart) + index; }

private org.ovirt.engine.core.bll.network.macpoolmanager.Range getRangeWithAvailableMac() { for (org.ovirt.engine.core.bll.network.macpoolmanager.Range range : ranges) { if ((range.getAvailableCount()) > 0) { return range; } } return null; }

public static long macToLong(java.lang.String mac) { return java.lang.Long.parseLong(org.apache.commons.lang.StringUtils.remove(mac, ':'), org.ovirt.engine.core.utils.MacAddressRangeUtils.HEX_RADIX); }



@java.lang.Override public void dataCenterWithClusterSelectedItemChanged() { super.dataCenterWithClusterSelectedItemChanged(); if ((getModel().getSelectedCluster()) != null) { updateCpuProfile(getModel().getSelectedCluster().getId(), getCompatibilityVersion(), vm.getCpuProfileId()); } }
java.lang.String getDetailMessage(T entity);


@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getBroker().convertVmFromExternalSystem(org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getUrl(), org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getUsername(), org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getPassword(), createVmProperties(), org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVmId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.proceedProxyReturnValue(); setReturnValue((org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getVDSReturnValue().getSucceeded() ? org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVmId() : null)); }

private org.ovirt.engine.core.common.vdscommands.ConvertVmVDSParameters buildConvertParameters() { org.ovirt.engine.core.common.vdscommands.ConvertVmVDSParameters parameters = new org.ovirt.engine.core.common.vdscommands.ConvertVmVDSParameters(org.ovirt.engine.core.bll.ConvertVmCommand.getVdsId()); parameters.setUrl(org.ovirt.engine.core.bll.ConvertVmCommand.getParameters().getUrl()); parameters.setUsername(org.ovirt.engine.core.bll.ConvertVmCommand.getParameters().getUsername()); parameters.setPassword(org.ovirt.engine.core.bll.ConvertVmCommand.getParameters().getPassword()); parameters.setDisks(org.ovirt.engine.core.bll.ConvertVmCommand.getParameters().getDisks()); parameters.setVmId(org.ovirt.engine.core.bll.ConvertVmCommand.getVmId()); parameters.setVmName(org.ovirt.engine.core.bll.ConvertVmCommand.getVmName()); parameters.setStoragePoolId(org.ovirt.engine.core.bll.ConvertVmCommand.getStoragePoolId()); parameters.setStorageDomainId(org.ovirt.engine.core.bll.ConvertVmCommand.getStorageDomainId()); parameters.setVirtioIsoPath(getVirtioIsoPath()); return parameters; }



@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The Snapshot type is ${snapshotType} while the operation is supported for Snapshots of the following type(s): ${supportedSnapshotTypes}.") java.lang.String ACTION_TYPE_FAILED_VM_SNAPSHOT_TYPE_NOT_ALLOWED();
public org.ovirt.engine.core.bll.ValidationResult canDisableVirtioScsi(java.util.Collection<? extends org.ovirt.engine.core.common.businessentities.storage.Disk> vmDisks) { if (vmDisks == null) { vmDisks = getDiskDao().getAllForVm(vms.iterator().next().getId(), true); } boolean isVirtioScsiDiskExist = org.apache.commons.collections.CollectionUtils.exists(vmDisks, new org.apache.commons.collections.Predicate() { @java.lang.Override public boolean evaluate(java.lang.Object disk) { return (((org.ovirt.engine.core.common.businessentities.storage.Disk) (disk)).getDiskInterface()) == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI); } }); if (isVirtioScsiDiskExist) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_DISABLE_VIRTIO_SCSI_PLUGGED_DISKS); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }

public org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel getSpecificImportModel() { selectedImportVmModel = null; switch (importSources.getSelectedItem()) { case EXPORT_DOMAIN : importFromExportDomainModel.setEntity(null); importFromExportDomainModel.init(getVmsToImport(), exportDomain.getId()); importFromExportDomainModel.setEntity(exportDomain.getId()); selectedImportVmModel = importFromExportDomainModel; break; case VMWARE : importFromExternalSourceModel.init(getVmsToImport(), getDataCenters().getSelectedItem().getId()); importFromExternalSourceModel.setUrl(getUrl()); importFromExternalSourceModel.setUsername(getUsername().getEntity()); importFromExternalSourceModel.setPassword(getPassword().getEntity()); importFromExternalSourceModel.setProxyHostId(((getProxyHosts().getSelectedItem()) != null ? getProxyHosts().getSelectedItem().getId() : null)); selectedImportVmModel = importFromExternalSourceModel; break; case OVA : importFromOvaModel.init(getVmsToImport(), getDataCenters().getSelectedItem().getId()); importFromOvaModel.setIsoName(getOvaPath().getEntity()); importFromOvaModel.setHostId(getHosts().getSelectedItem().getId()); selectedImportVmModel = importFromOvaModel; break; default : } return selectedImportVmModel; }





@java.lang.Override public boolean isWriteable(java.lang.Class<?> type, java.lang.reflect.Type genericType, java.lang.annotation.Annotation[] annotations, javax.ws.rs.core.MediaType mediaType) { return true; }

@java.lang.Override public boolean isReadable(java.lang.Class<?> type, java.lang.reflect.Type genericType, java.lang.annotation.Annotation[] annotations, javax.ws.rs.core.MediaType mediaType) { return true; }

protected java.lang.String generateVmConfiguration(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices) { if (((vm.getInterfaces()) == null) || (vm.getInterfaces().isEmpty())) { vm.setInterfaces(getVmNetworkInterfaceDao().getAllForVm(vm.getId())); } if (org.apache.commons.lang.StringUtils.isEmpty(vm.getVmtName())) { org.ovirt.engine.core.common.businessentities.VmTemplate t = getVmTemplateDao().get(vm.getVmtGuid()); vm.setVmtName(t.getName()); } if (vmDevices == null) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.setVmDevices(vm.getStaticData()); } else { vm.getStaticData().setManagedDeviceMap(vmDevices); } if (disks == null) { disks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(getDiskDao().getAllForVm(vm.getId()), false, true, true); disks.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getCinderLeafImages(getDiskDao().getAllForVm(vm.getId()), false)); } for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : disks) { image.setStorageIds(null); } return new org.ovirt.engine.core.utils.ovf.OvfManager().exportVm(vm, new java.util.ArrayList(disks), org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vm)); }







private java.lang.String generateTicket() { org.ovirt.engine.core.common.action.SetVmTicketParameters parameters = new org.ovirt.engine.core.common.action.SetVmTicketParameters(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getParameters().getOptions().getVmId(), null, org.ovirt.engine.core.common.console.ConsoleOptions.TICKET_VALIDITY_SECONDS, org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getParameters().getOptions().getGraphicsType()); parameters.setSessionId(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getEngineContext().getSessionId()); parameters.setParametersCurrentUser(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getUser()); org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getBackend().runInternalAction(VdcActionType.SetVmTicket, parameters); if (result.getSucceeded()) { return result.getActionReturnValue(); } return null; }










@org.ovirt.engine.ui.common.DefaultMessage("Some of the changes will be applied only on the vm next start.") java.lang.String nextRunConfigurationExists();



protected java.util.List<java.lang.String> listFiles() { org.ovirt.engine.core.common.queries.GetImagesListParameters queryParams = new org.ovirt.engine.core.common.queries.GetImagesListParameters(asGuid(storageDomainId), org.ovirt.engine.core.common.businessentities.storage.ImageFileType.All); queryParams.setForceRefresh(true); java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> files = getBackendCollection(org.ovirt.engine.core.common.businessentities.storage.RepoImage.class, VdcQueryType.GetImagesList, queryParams); java.util.List<java.lang.String> fileNames = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.storage.RepoImage file : files) { fileNames.add(file.getRepoImageId()); } return fileNames; }
private boolean isUnmanagedVm() { externalVm = ((dbVm) == null) && ((getDbFacade().getVmStaticDao().get(vdsmVm.getVmDynamic().getId())) == null); hostedEngineUnmanaged = ((dbVm) != null) && ((dbVm.getOrigin()) == (org.ovirt.engine.core.common.businessentities.OriginType.HOSTED_ENGINE)); return (externalVm) || (hostedEngineUnmanaged); }
public static org.ovirt.engine.api.model.Statistic setDatum(org.ovirt.engine.api.model.Statistic statistic, java.lang.Double datum) { return org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(statistic, (datum == null ? null : new java.math.BigDecimal(datum, new java.math.MathContext(2)))); }
public static org.ovirt.engine.api.model.Statistic setDatum(org.ovirt.engine.api.model.Statistic statistic, java.lang.Long datum) { return org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(statistic, (datum == null ? null : new java.math.BigDecimal(datum))); }
public org.ovirt.engine.core.bll.ValidationResult interfaceExists() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST).when(((iface) == null)); }
public org.ovirt.engine.core.bll.ValidationResult nicExists() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST).when(((attachment.getNicName()) == null)); }
private org.ovirt.engine.core.bll.ValidationResult nicActuallyExistsOrReferencesNewBond(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { boolean nicActuallyExistsOrReferencesNewBond = isNicActuallyExistsOrReferencesNewBond(attachment.getNicName(), attachment.getNicId()); if (nicActuallyExistsOrReferencesNewBond) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST); }
@org.junit.Test public void testNicExistsWhenNicNameIsNull() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); attachment.setNicName(null); assertThat(createNetworkAttachmentValidator(attachment).nicExists(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST)); }

@org.junit.Test public void testNicExistsWhenNicNameIsNotNull() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); attachment.setNicId(null); attachment.setNicName("whatever"); assertThat(createNetworkAttachmentValidator(attachment).nicExists(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }

@org.junit.Test public void testNetworkAttachedToClusterWhenNotAttached() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network(); network.setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); attachment.setNetworkId(network.getId()); org.ovirt.engine.core.common.businessentities.network.NetworkClusterId networkClusterId = new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(host.getVdsGroupId(), network.getId()); when(networkClusterDaoMock.get(eq(networkClusterId))).thenReturn(null); when(networkDaoMock.get(eq(network.getId()))).thenReturn(network); assertThat(createNetworkAttachmentValidator(attachment).networkAttachedToCluster(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.NETWORK_NOT_EXISTS_IN_CLUSTER)); }
@org.junit.Test public void testInterfaceExistsWhenInterfaceIsNull() throws java.lang.Exception { assertThat(new org.ovirt.engine.core.bll.validator.HostInterfaceValidator(null).interfaceExists(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST)); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The following VMs are actively using the Logical Network(s) '${networkNames}' : '${NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS_LIST}'. Please stop the VMs and try again.") java.lang.String NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS();
@java.lang.Override protected boolean canDoAction() { if ((getNic()) == null) { return failCanDoAction(EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST); } if ((!(org.ovirt.engine.core.utils.NetworkUtils.isLabeled(getNic()))) || (!(getNic().getLabels().contains(getLabel())))) { return failCanDoAction(EngineMessage.INTERFACE_NOT_LABELED); } return true; }
protected java.sql.Array createArrayOf(java.lang.String typeName, java.lang.Object[] array) { try { return getJdbcTemplate().getDataSource().getConnection().createArrayOf(typeName, array); } catch (java.sql.SQLException e) { throw new java.lang.RuntimeException(e); } }
private void prestartVms(org.ovirt.engine.core.compat.Guid vmPoolId, int numOfVmsToPrestart) { java.util.List<org.ovirt.engine.core.common.businessentities.VmPoolMap> vmPoolMaps = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmPoolDao().getVmMapsInVmPoolByVmPoolIdAndStatus(vmPoolId, VMStatus.Down); int failedAttempts = 0; int prestartedVmsCounter = 0; final int maxFailedAttempts = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VmPoolMonitorMaxAttempts); if ((vmPoolMaps != null) && ((vmPoolMaps.size()) > 0)) { for (org.ovirt.engine.core.common.businessentities.VmPoolMap map : vmPoolMaps) { if ((failedAttempts < maxFailedAttempts) && (prestartedVmsCounter < numOfVmsToPrestart)) { if (prestartVm(map.getVmId())) { prestartedVmsCounter++; failedAttempts = 0; } else { failedAttempts++; } } else { logResultOfPrestartVms(prestartedVmsCounter, numOfVmsToPrestart, vmPoolId); break; } } } else { org.ovirt.engine.core.bll.VmPoolMonitor.log.info("No Vms avaialable for prestarting"); } }









public org.ovirt.engine.core.bll.ValidationResult validate() { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure = getAttachmentsToConfigure(); org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID; vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NicLabelValidator(params, existingInterfacesMap, bondsMap, hostSetupNetworksValidatorHelper).validate(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validRemovedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedBonds(); vr = (skipValidation(vr)) ? vr : validRemovedBonds(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : attachmentsDontReferenceSameNetworkDuplicately(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : networksUniquelyConfiguredOnHost(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateNetworkExclusiveOnNics(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NetworkMtuValidator(networkBusinessEntityMap).validateMtu(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateCustomProperties(); vr = (skipValidation(vr)) ? vr : validateQos(attachmentsToConfigure); return vr; }











@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getRemoveCommand())) { remove(); } else if ("OnRemove".equals(command.getName())) { onRemove(); } else if ("Cancel".equals(command.getName())) { cancel(); } }
void initTableActionButtons() { getTable().addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.core.common.businessentities.storage.Disk>(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageDiskView.constants.removeDisk()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getRemoveCommand(); } }); }

@java.lang.Override protected void endSuccessfully() { if (isStatelessSnapshotExistsForVm()) { org.ovirt.engine.core.bll.RunVmCommand.getBackend().endAction(VdcActionType.CreateAllSnapshotsFromVm, buildCreateSnapshotParametersForEndAction(), org.ovirt.engine.core.bll.RunVmCommand.getContext().clone().withoutCompensationContext().withoutExecutionContext().withoutLock()); org.ovirt.engine.core.bll.RunVmCommand.getParameters().setShouldBeLogged(false); org.ovirt.engine.core.bll.RunVmCommand.getParameters().setRunAsStateless(false); setSucceeded(org.ovirt.engine.core.bll.RunVmCommand.getBackend().runInternalAction(org.ovirt.engine.core.bll.RunVmCommand.getActionType(), org.ovirt.engine.core.bll.RunVmCommand.getParameters(), createContextForRunStatelessVm()).getSucceeded()); if (!(org.ovirt.engine.core.bll.RunVmCommand.getSucceeded())) { org.ovirt.engine.core.bll.RunVmCommand.getParameters().setShouldBeLogged(true); org.ovirt.engine.core.bll.RunVmCommand.log.error("Could not run VM '{}' ({}) in stateless mode", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); org.ovirt.engine.core.bll.RunVmCommand.getReturnValue().setEndActionTryAgain(false); } } else { super.endSuccessfully(); } }
@java.lang.Override protected void endWithFailure() { if (isStatelessSnapshotExistsForVm()) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = org.ovirt.engine.core.bll.RunVmCommand.getBackend().endAction(VdcActionType.CreateAllSnapshotsFromVm, buildCreateSnapshotParametersForEndAction(), org.ovirt.engine.core.bll.RunVmCommand.cloneContext().withoutExecutionContext().withoutLock()); setSucceeded(vdcReturnValue.getSucceeded()); } else { super.endWithFailure(); } }

private void collectVmPrestartFailureReasons(java.util.Map<java.lang.String, java.lang.Integer> failureReasons, java.util.List<java.lang.String> messages) { if (org.ovirt.engine.core.bll.VmPoolMonitor.log.isInfoEnabled()) { java.lang.String reason = messages.stream().filter(ErrorMessageUtils::isMessage).collect(java.util.stream.Collectors.joining(", ")); java.lang.Integer count = failureReasons.get(reason); failureReasons.put(reason, (count == null ? 1 : count + 1)); } }

@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((org.ovirt.engine.core.bll.AddUserProfileCommand.getUserProfile()) != null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_PROFILE_ALREADY_EXISTS); } return true; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.UserProfile profile = org.ovirt.engine.core.bll.AddUserProfileCommand.getParameters().getUserProfile(); profile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); profile.setUserId(org.ovirt.engine.core.bll.AddUserProfileCommand.getUserId()); if ((!(org.apache.commons.lang.StringUtils.isEmpty(profile.getSshPublicKey()))) && (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(profile.getSshPublicKeyId()))) { profile.setSshPublicKeyId(org.ovirt.engine.core.compat.Guid.newGuid()); } userProfileDao.save(profile); org.ovirt.engine.core.bll.AddUserProfileCommand.setSucceeded(true); }

public org.ovirt.engine.core.bll.ValidationResult protocolIsNotXmlrpc(org.ovirt.engine.core.common.businessentities.VDSGroup cluster) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.NOT_SUPPORTED_PROTOCOL_FOR_CLUSTER_VERSION).when(((VdsProtocol.XML.equals(host.getProtocol())) && ((Version.v3_6.compareTo(cluster.getCompatibilityVersion())) <= 0))); }
private void doTestSetupNetworksSyncsNetwork(boolean overrideConfiguration, java.util.List<java.lang.String> expectedNetworksToSync) { org.ovirt.engine.api.model.HostNic hostNic = new org.ovirt.engine.api.model.HostNic(); org.ovirt.engine.api.model.Network network = new org.ovirt.engine.api.model.Network(); network.setName(org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.NETWORK_NAME); hostNic.setNetwork(network); hostNic.setOverrideConfiguration(overrideConfiguration); org.ovirt.engine.api.model.HostNics hostNics = control.createMock(org.ovirt.engine.api.model.HostNics.class); expect(hostNics.getHostNics()).andReturn(java.util.Collections.singletonList(hostNic)).anyTimes(); setUriInfo(setUpActionExpectations(VdcActionType.SetupNetworks, org.ovirt.engine.core.common.action.SetupNetworksParameters.class, new java.lang.String[]{ "NetworksToSync" }, new java.lang.Object[]{ expectedNetworksToSync }, true, true)); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setHostNics(hostNics); collection.setupNetworks(action); }
@java.lang.Override public org.ovirt.engine.api.model.HostNics list() { org.ovirt.engine.api.model.HostNics ret = new org.ovirt.engine.api.model.HostNics(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ifaces = getCollection(); java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks = getClusterNetworks(); java.util.Map<java.lang.String, java.lang.String> networkIds = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.network.Network nwk : clusterNetworks) { networkIds.put(nwk.getName(), nwk.getId().toString()); } for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : ifaces) { org.ovirt.engine.api.model.HostNic hostNic = populate(map(iface, ifaces), iface); if (networkIds.containsKey(iface.getNetworkName())) { hostNic.getNetwork().setId(networkIds.get(iface.getNetworkName())); hostNic.getNetwork().setName(null); } ret.getHostNics().add(addLinks(hostNic)); } return addActions(ret); }
private org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface nicsToCustomProperties(java.util.List<org.ovirt.engine.api.model.HostNic> hostNics, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingNicsMapping) { org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface result = new org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface(); for (org.ovirt.engine.api.model.HostNic hostNic : hostNics) { if (hostNic.isSetProperties()) { java.lang.String hostNicName = hostNic.getName(); java.lang.String nicName = (org.apache.commons.lang.StringUtils.isEmpty(hostNicName)) ? existingNicsMapping.get(hostNic.getId()).getName() : hostNicName; result.add(nicName, org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.toMap(hostNic.getProperties())); } } return result; }
private void persistTopology(org.ovirt.engine.core.common.businessentities.VDS host, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> dbNics, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks, org.ovirt.engine.core.common.vdscommands.UserConfiguredNetworkData userConfiguredData) { final org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersister networkInterfacesPersister = new org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersisterImpl(interfaceDao, host.getInterfaces(), dbNics, userConfiguredData); networkInterfacesPersister.persistTopology(); final org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister networkAttachmentPersister = new org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister(networkAttachmentDao, host.getId(), host.getInterfaces(), userConfiguredData.getCustomProperties(), userConfiguredData.getNetworkAttachments(), clusterNetworks); networkAttachmentPersister.persistNetworkAttachments(); }
private void createNetworkAttachmentForReportedNetworksNotHavingOne(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, java.lang.String networkName) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(getBaseInterfaceNicOrThis(nic), clusterNetworks.get(networkName), org.ovirt.engine.core.utils.NetworkUtils.createIpConfigurationFromVdsNetworkInterface(nic)); networkAttachment.setId(org.ovirt.engine.core.compat.Guid.newGuid()); if ((customPropertiesForNics) != null) { networkAttachment.setProperties(customPropertiesForNics.getCustomPropertiesFor(nic)); } networkAttachmentDao.save(networkAttachment); }
public org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface add(java.lang.String name, java.util.Map<java.lang.String, java.lang.String> customProperties) { java.util.Objects.requireNonNull(name); if ((customProperties == null) || (customProperties.isEmpty())) { return this; } this.customProperties.put(name, customProperties); return this; }
public static org.ovirt.engine.core.common.businessentities.network.IpConfiguration createIpConfigurationFromVdsNetworkInterface(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { if (nic == null) { return org.ovirt.engine.core.utils.NetworkUtils.createDefaultIpConfiguration(); } org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); if ((nic.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)) { iPv4Address.setAddress(nic.getAddress()); iPv4Address.setNetmask(nic.getSubnet()); iPv4Address.setGateway(nic.getGateway()); } iPv4Address.setBootProtocol(nic.getBootProtocol()); org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); ipConfiguration.setIPv4Addresses(java.util.Collections.singletonList(iPv4Address)); return ipConfiguration; }
@java.lang.Override public void contextInitialized(javax.servlet.ServletContextEvent event) { org.ovirt.vdsmfake.AppLifecycleListener.log.info("Application initialized."); final java.util.Map<java.lang.String, java.lang.String> paramMap = new java.util.HashMap<java.lang.String, java.lang.String>(); @java.lang.SuppressWarnings("unchecked") final java.util.Enumeration<java.lang.String> paramNames = event.getServletContext().getInitParameterNames(); while (paramNames.hasMoreElements()) { final java.lang.String key = paramNames.nextElement(); paramMap.put(key, event.getServletContext().getInitParameter(key)); } org.ovirt.vdsmfake.AppConfig.getInstance().init(paramMap); final org.ovirt.vdsmfake.task.TaskProcessor taskProcessor = org.ovirt.vdsmfake.task.TaskProcessor.getInstance(); taskProcessor.init(); if (paramMap.containsKey("jsonListenPort")) { int jsonPort = java.lang.Integer.parseInt(paramMap.get("jsonListenPort")); boolean encrypted = java.lang.Boolean.parseBoolean(paramMap.get("jsonSecured")); java.lang.String hostName = paramMap.get("jsonHost"); org.ovirt.vdsmfake.rpc.json.JsonRpcServer server = new org.ovirt.vdsmfake.rpc.json.JsonRpcServer(hostName, jsonPort, encrypted); server.start(); } }
protected org.ovirt.engine.api.model.HostNIC addSlaveLinks(org.ovirt.engine.api.model.HostNIC nic, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ifaces) { if ((nic.getBonding()) == null) nic.setBonding(new org.ovirt.engine.api.model.Bonding()); nic.getBonding().setSlaves(new org.ovirt.engine.api.model.Slaves()); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i : ifaces) { if (i.isPartOfBond(nic.getName())) { nic.getBonding().getSlaves().getSlaves().add(slave(i.getId().toString())); } } return nic; }

private org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface nicsToCustomProperties(java.util.List<org.ovirt.engine.api.model.HostNIC> hostNics, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingNicsMapping) { org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface result = new org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface(); for (org.ovirt.engine.api.model.HostNIC hostNic : hostNics) { if (hostNic.isSetProperties()) { java.lang.String hostNicName = hostNic.getName(); java.lang.String nicName = (org.apache.commons.lang.StringUtils.isEmpty(hostNicName)) ? existingNicsMapping.get(hostNic.getId()).getName() : hostNicName; result.add(nicName, org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.toMap(hostNic.getProperties())); } } return result; }

public static java.util.Collection<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> findAllInterfaceBondNameIsEmpty(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> items) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ret = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i : items) { if (org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(i.getBondName())) { ret.add(i); } } return ret; }

private void migrateAllVdss() { for (org.ovirt.engine.core.compat.Guid vdsId : vdssToMaintenance.keySet()) { org.ovirt.engine.core.common.action.MaintenanceVdsParameters tempVar = new org.ovirt.engine.core.common.action.MaintenanceVdsParameters(vdsId, org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getParameters().getIsInternal()); tempVar.setSessionId(org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getParameters().getSessionId()); tempVar.setCorrelationId(org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getParameters().getCorrelationId()); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.MaintenanceVds, tempVar, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getContext())); if (!(result.isValid())) { org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getReturnValue().getValidationMessages().addAll(result.getValidationMessages()); org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getReturnValue().setValid(false); } } }
public void maintenance() { org.ovirt.engine.core.compat.Guid clusterId = getClusterIdOfSelectedHosts(); if (clusterId == null) { maintenance(false); } else { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.Cluster cluster = ((org.ovirt.engine.core.common.businessentities.Cluster) (returnValue)); if (cluster != null) { maintenance(cluster.isMaintenanceReasonRequired()); } } }), clusterId); } }


@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.Cluster cluster = ((org.ovirt.engine.core.common.businessentities.Cluster) (returnValue)); if (cluster != null) { maintenance(cluster.isMaintenanceReasonRequired()); } }
private void maintenance(boolean isMaintenanceReasonVisible) { if ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getConfirmWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().maintenanceHostsTitle()); model.setHelpTag(HelpTag.maintenance_host); model.setHashName("maintenance_host"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().areYouSureYouWantToPlaceFollowingHostsIntoMaintenanceModeMsg()); model.setReasonVisible(isMaintenanceReasonVisible); java.util.ArrayList<java.lang.String> vdss = new java.util.ArrayList<>(); for (java.lang.Object item : org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VDS vds = ((org.ovirt.engine.core.common.businessentities.VDS) (item)); vdss.add(vds.getName()); } model.setItems(vdss); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnMaintenance", this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("CancelConfirm", this); model.getCommands().add(tempVar2); }
private static java.util.List<org.ovirt.engine.api.extensions.ExtMap> flatGroups(org.ovirt.engine.api.extensions.ExtMap entity, org.ovirt.engine.api.extensions.ExtKey key, java.util.List<org.ovirt.engine.api.extensions.ExtMap> accumulator) { for (org.ovirt.engine.api.extensions.ExtMap group : entity.<java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>>get(key, java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>emptyList())) { accumulator.add(group); org.ovirt.engine.core.bll.aaa.DirectoryUtils.flatGroups(group, GroupRecord.GROUPS, accumulator); } return accumulator; }
public static void flatGroups(org.ovirt.engine.api.extensions.ExtMap principal) { principal.put(PrincipalRecord.GROUPS, org.ovirt.engine.core.bll.aaa.DirectoryUtils.flatGroups(principal, PrincipalRecord.GROUPS, new java.util.ArrayList<org.ovirt.engine.api.extensions.ExtMap>())); }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { java.lang.Integer applicationMode = getApplicationMode(getEngineSessionId(request)); request.setAttribute(org.ovirt.engine.ui.frontend.server.gwt.WebAdminHostPageServlet.ATTR_APPLICATION_MODE, getApplicationModeObject(applicationMode)); java.util.List<org.ovirt.engine.ui.frontend.server.gwt.plugin.PluginData> pluginData = getPluginData(); request.setAttribute(org.ovirt.engine.ui.frontend.server.gwt.WebAdminHostPageServlet.ATTR_PLUGIN_DEFS, getPluginDefinitionsArray(pluginData)); request.setAttribute(org.ovirt.engine.ui.frontend.server.gwt.WebAdminHostPageServlet.ATTR_ENGINE_REPORTS_BASE_URL, getReportInit(reportRedirectUrl.substring(reportBaseUrl.length()), reportRightClickRedirectUrl.substring(reportBaseUrl.length()))); super.doGet(request, response); }

public void showAlert(final org.ovirt.engine.ui.common.widget.panel.AlertPanel.Type type, final com.google.gwt.safehtml.shared.SafeHtml message) { com.google.gwt.core.client.Scheduler.ScheduledCommand command = new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { attachAlert(createAlert(type, message)); } }; if (canShowAlerts) { command.execute(); } else { deferredAlertCommands.add(command); } }



@java.lang.Override public javax.ws.rs.core.Response deactivate(org.ovirt.engine.api.model.Action action) { return doAction(VdcActionType.MaintenanceNumberOfVdss, new org.ovirt.engine.core.common.action.MaintenanceNumberOfVdssParameters(asList(guid), false, (action.isSetReason() ? action.getReason() : null)), action); }


private boolean hasDifferentTimezone(org.ovirt.engine.core.common.businessentities.VM vm) { java.lang.String timeZone = vm.getTimeZone(); if ((timeZone != null) && (!(timeZone.isEmpty()))) { int offset = 0; java.lang.String javaZoneId = null; if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isWindowsOsType(vm.getVmOsId())) { javaZoneId = WindowsJavaTimezoneMapping.windowsToJava.get(timeZone); } else { javaZoneId = timeZone; } if (javaZoneId != null) { offset = TimeZoneType.GENERAL_TIMEZONE.getStandardOffset(javaZoneId); } if ((vm.getGuestOsTimezoneOffset()) != offset) { return true; } } return false; }
private boolean checkStorageDomainsInPool() { if (!(org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getIsInternal())) { boolean hasData = false; org.ovirt.engine.core.common.businessentities.StorageFormatType storageFormat = null; for (org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getStorages()) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(storageDomainId); org.ovirt.engine.core.bll.validator.storage.StorageDomainToPoolRelationValidator storageDomainToPoolRelationValidator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainToPoolRelationValidator(domain.getStorageStaticData(), org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getStoragePool()); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator domainValidator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); if (((isStorageDomainNotNull(domain)) && (validate(domainValidator.checkStorageDomainSharedStatusNotLocked()))) && (validate(storageDomainToPoolRelationValidator.validateDomainCanBeAttachedToPool()))) { if ((domain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Data)) { hasData = true; if (storageFormat == null) { storageFormat = domain.getStorageFormat(); } else if (storageFormat != (domain.getStorageFormat())) { addValidationMessage(EngineMessage.ERROR_CANNOT_ADD_STORAGE_POOL_WITH_DIFFERENT_STORAGE_FORMAT); return false; } } } else { return false; } } if (!hasData) { addValidationMessage(EngineMessage.ERROR_CANNOT_ADD_STORAGE_POOL_WITHOUT_DATA_AND_ISO_DOMAINS); return false; } } return true; }



private boolean isRunningConfigurationNeeded() { return ((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isNextRunConfigurationExists()) || (!(org.ovirt.engine.core.bll.VmHandler.isUpdateValid(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus(), isHotSetEnabled())))) || (!(org.ovirt.engine.core.bll.VmHandler.isUpdateValidForVmDevices(getVmId(), org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters()))); }
public static org.ovirt.engine.core.bll.ValidationResult checkVmNumaNodesIntegrity(org.ovirt.engine.core.common.businessentities.VM paramsVm, org.ovirt.engine.core.common.businessentities.VM actualVm, boolean isNumaChanged) { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> paramVmNumaNodes = paramsVm.getvNumaNodeList(); boolean emptyParamVmNumaNodes = (paramVmNumaNodes == null) || (paramVmNumaNodes.isEmpty()); java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> origVmNumaNodes = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNumaNodeDao().getAllVmNumaNodeByVmId(actualVm.getId()); boolean emptyOrigVmNumaNodes = (origVmNumaNodes == null) || (origVmNumaNodes.isEmpty()); int NUMAnodesCount = 0; if (emptyParamVmNumaNodes && emptyOrigVmNumaNodes) { return ValidationResult.VALID; } if (emptyParamVmNumaNodes && (!emptyOrigVmNumaNodes)) { NUMAnodesCount = origVmNumaNodes.size(); if (isNumaChanged == true) return ValidationResult.VALID; } if (!emptyParamVmNumaNodes) { NUMAnodesCount = paramVmNumaNodes.size(); } int cpuCount = paramsVm.getNumOfCpus(); if (cpuCount < NUMAnodesCount) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_MORE_NODES_THAN_CPUS, java.lang.String.format("$numaNodes %d", NUMAnodesCount), java.lang.String.format("$cpus %d", cpuCount)); } return ValidationResult.VALID; }
@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { updateQuotaByCluster(null, null); updateMemoryBalloon(); updateCpuSharesAvailability(); updateVirtioScsiAvailability(); updateOSValues(); updateTemplate(); updateNumOfSockets(); if ((getModel().getSelectedCluster()) != null) { updateCpuProfile(getModel().getSelectedCluster().getId(), getModel().getSelectedCluster().getCompatibilityVersion(), vm.getCpuProfileId()); } updateCustomPropertySheet(); getModel().getCustomPropertySheet().deserialize(vm.getCustomProperties()); }
@java.lang.Override public void onSuccess(java.lang.Object innerModel, java.lang.Object innerReturnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Quota> quotaList = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (innerReturnValue)).getReturnValue(); if ((quotaList != null) && (!(quotaList.isEmpty()))) { getQuota().setItems(quotaList); } org.ovirt.engine.core.compat.Guid defaultQuota = ((getDisk()) != null) ? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getQuotaId() : null; if (defaultQuota != null) { for (org.ovirt.engine.core.common.businessentities.Quota quota : quotaList) { if (quota.getId().equals(defaultQuota)) { getQuota().setSelectedItem(quota); return; } } org.ovirt.engine.core.common.businessentities.Quota quota = new org.ovirt.engine.core.common.businessentities.Quota(); quota.setId(defaultQuota); if ((getDisk()) != null) { quota.setQuotaName(getDiskImage().getQuotaName()); } quotaList.add(quota); getQuota().setItems(quotaList); getQuota().setSelectedItem(quota); } }
protected void updateDiskImageDynamic(final org.ovirt.engine.core.common.businessentities.storage.DiskImage targetImage) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = runVdsCommand(VDSCommandType.GetImageInfo, new org.ovirt.engine.core.common.vdscommands.GetImageInfoVDSCommandParameters(targetImage.getStoragePoolId(), targetImage.getStorageIds().get(0), targetImage.getId(), targetImage.getImageId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage imageFromIRS = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (ret.getReturnValue())); if (imageFromIRS != null) { completeImageData(imageFromIRS); } else { log.warn("Could not update DiskImage's size with ID '{}'", targetImage.getImageId()); } }
public void onSucceeded() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { syncDbRecords(true); return null; }); org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.log.info("Successfully merged snapshot '{}' images '{}'..'{}'", org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getDiskImage().getImage().getSnapshotId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getDiskImage().getImageId(), ((org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getDestinationDiskImage()) != null ? org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getDestinationDiskImage().getImageId() : "(n/a)")); }
protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getImageInfo(final org.ovirt.engine.core.compat.Guid storagePoolId, final org.ovirt.engine.core.compat.Guid storageId, final org.ovirt.engine.core.compat.Guid diskId, final org.ovirt.engine.core.compat.Guid imageId) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = runVdsCommand(VDSCommandType.GetImageInfo, new org.ovirt.engine.core.common.vdscommands.GetImageInfoVDSCommandParameters(storagePoolId, storageId, diskId, imageId)); return ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (ret.getReturnValue())); }
public java.util.Map createStoragePool(int poolType, java.lang.String spUUID, java.lang.String poolName, java.lang.String masterDom, java.util.List domList, int masterVersion, java.lang.String lockPolicy, int lockRenewalIntervalSec, int leaseTimeSec, int ioOpTimeoutSec, int leaseRetries) { try { final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.domain.Host host = getActiveHost(); host.setSpUUID(spUUID); updateHost(host); dataCenter.setId(spUUID); dataCenter.setName(poolName); dataCenter.setMasterStorageDomainId(masterDom); dataCenter.setMasterVersion(masterVersion); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(masterDom); dataCenter.getStorageDomainMap().put(storageDomain.getId(), storageDomain); setMasterDomain(spUUID, masterDom); log.info("Storage pool {} created, master domain: {}, total domains: {}", new java.lang.Object[]{ spUUID, dataCenter.getMasterStorageDomainId(), dataCenter.getStorageDomainMap().size() }); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }
public synchronized void syncTask(org.ovirt.vdsmfake.service.Host host, org.ovirt.vdsmfake.service.Task task) { if (host == null) { host = getActiveHost(); } try { host.getRunningTasks().put(task.getId(), task); log.debug("sync task:{} to host:{}", task.getName(), host.getName()); org.ovirt.vdsmfake.task.TaskProcessor.setTasksMap(host.getName(), task.getId()); } catch (java.lang.Exception e) { log.error("something went wrong durring task sync {}", e); } }



public java.util.Map connectStorageServer(java.lang.Integer domType, java.lang.String spUUID, java.util.List<java.util.Map> storageDomains) { try { final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.domain.Host host = getActiveHost(); host.setSpUUID(spUUID); updateHost(host); dataCenter.setStorageType(org.ovirt.vdsmfake.domain.StorageDomain.StorageType.getByCode(domType)); updateDataCenter(dataCenter); java.util.Map resultMap = getOKStatus(); java.util.List statusList = new java.util.ArrayList(); resultMap.put("statuslist", statusList); for (int i = 0; (storageDomains != null) && (i < (storageDomains.size())); i++) { final java.util.Map storageDomainMap = storageDomains.get(i); final java.lang.String id = ((java.lang.String) (storageDomainMap.get("id"))); final java.lang.String connection = ((java.lang.String) (storageDomainMap.get("connection"))); log.info("Adding storage domain, spUUID: {} id: {}, connection: {}", new java.lang.Object[]{ spUUID, id, connection }); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(id); storageDomain.setConnection(connection); dataCenter.getStorageDomainMap().put(id, storageDomain); final java.util.Map storageStatusMap = map(); storageStatusMap.put("status", java.lang.Integer.valueOf(0)); storageStatusMap.put("id", id); statusList.add(storageStatusMap); } log.info("Storage server {} connected.", spUUID); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }
public java.util.Map validateStorageServerConnection(java.lang.Integer domType, java.lang.String spUUID, java.util.List<java.util.Map> storageDomains) { try { final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); final java.util.Map resultMap = getOKStatus(); final java.util.List statusList = new java.util.ArrayList(); resultMap.put("statusList", statusList); for (int i = 0; i < (storageDomains.size()); i++) { final java.util.Map storageDomainMap = storageDomains.get(i); final java.lang.String id = ((java.lang.String) (storageDomainMap.get("id"))); final java.lang.String connection = ((java.lang.String) (storageDomainMap.get("connection"))); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(id); storageDomain.setConnection(connection); dataCenter.getStorageDomainMap().put(id, storageDomain); final java.util.Map storageStatusMap = map(); storageStatusMap.put("status", java.lang.Integer.valueOf(0)); storageStatusMap.put("id", id); statusList.add(storageStatusMap); } log.info("Storage server {} validated.", spUUID); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }
public java.util.Map detachStorageDomain(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String msdUUID, int masterVersion) { try { log.info("Detaching storage domain, spUUID: {} sdUUID: {}", new java.lang.Object[]{ spUUID, sdUUID }); final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = dataCenter.getStorageDomainMap().get(sdUUID); storageDomain.setDomainStatus(StorageDomain.DomainStatus.UNATTACHED); dataCenter.getStorageDomainMap().remove(storageDomain.getId()); storageDomain.setDataCenter(null); updateDataCenter(dataCenter); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }
public java.util.Map getStorageDomainsList(java.lang.String spUUID, int domainType, int poolType, java.lang.String path) { try { org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); java.util.Map resultMap = getOKStatus(); java.util.List domlist = lst(); for (org.ovirt.vdsmfake.domain.StorageDomain storageDomain : dataCenter.getStorageDomainMap().values()) { if ((spUUID != null) && (!(storageDomain.getId().equals(spUUID)))) { continue; } if ((domainType != 0) && ((StorageDomain.DomainClass.getByCode(domainType)) != (storageDomain.getDomainClass()))) { continue; } if ((poolType != 0) && ((StorageDomain.StorageType.getByCode(poolType)) != (storageDomain.getStorageType()))) { continue; } if ((path != null) && (!(path.equals(storageDomain.getConnection())))) { continue; } domlist.add(storageDomain.getId()); } resultMap.put("domlist", domlist); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }
public java.util.Map activateStorageDomain(java.lang.String sdUUID, java.lang.String spUUID) { try { log.info("Activating storage domain, spUUID: {} sdUUID: {}", new java.lang.Object[]{ spUUID, sdUUID }); final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = dataCenter.getStorageDomainMap().get(sdUUID); if (storageDomain != null) { storageDomain.setDomainStatus(StorageDomain.DomainStatus.ACTIVE); updateStorageDomain(storageDomain); } return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }
public java.util.Map attachStorageDomain(java.lang.String sdUUID, java.lang.String spUUID) { try { log.info("Attaching storage domain, spUUID: {} sdUUID: {}", new java.lang.Object[]{ spUUID, sdUUID }); final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(sdUUID); storageDomain.setDomainStatus(StorageDomain.DomainStatus.ATTACHED); dataCenter.getStorageDomainMap().put(sdUUID, storageDomain); storageDomain.setDataCenter(dataCenter); updateDataCenter(dataCenter); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }
public java.util.Map spmStop(java.lang.String spUUID) { final org.ovirt.vdsmfake.domain.Host host = getActiveHost(); host.setSpmId((-1)); host.setSpmStatus(Host.SpmStatus.FREE); host.setSpmLver((-1)); updateHost(host); java.util.Map resultMap = getOKStatus(); return resultMap; }
public java.util.Map spmStart(java.lang.String spUUID, java.lang.String prevID, java.lang.String prevLVER, java.lang.String recoveryMode, java.lang.String scsiFencing) { final org.ovirt.vdsmfake.domain.Host host = getActiveHost(); java.util.Map resultMap = getOKStatus(); org.ovirt.vdsmfake.domain.Task task = new org.ovirt.vdsmfake.domain.Task(getUuid()); resultMap.put("uuid", task.getId()); task.setTarget(host); getActiveHost().getRunningTasks().put(task.getId(), task); org.ovirt.vdsmfake.task.TaskProcessor.setTasksMap(host.getName(), task.getId()); org.ovirt.vdsmfake.task.TaskProcessor.getInstance().addTask(new org.ovirt.vdsmfake.task.TaskRequest(org.ovirt.vdsmfake.task.TaskType.FINISH_START_SPM, 10000L, task)); return resultMap; }
public java.util.Map deactivateStorageDomain(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String msdUUID, int masterVersion) { try { log.info("Deactivating storage domain, spUUID: {} sdUUID: {}", new java.lang.Object[]{ spUUID, sdUUID }); final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = dataCenter.getStorageDomainMap().get(sdUUID); storageDomain.setDomainStatus(StorageDomain.DomainStatus.ATTACHED); updateStorageDomain(storageDomain); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }
public java.util.Map getStorageDomainInfo(java.lang.String sdUUID) { try { final org.ovirt.vdsmfake.domain.Host host = getActiveHost(); org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(sdUUID); org.ovirt.vdsmfake.domain.DataCenter dataCenter = storageDomain.getDataCenter(); java.util.Map resultMap = getOKStatus(); java.util.Map infoMap = map(); infoMap.put("uuid", storageDomain.getId()); infoMap.put("lver", host.getSpmLver()); infoMap.put("version", "0"); infoMap.put("role", storageDomain.getDomainRole().getName()); infoMap.put("remotePath", storageDomain.getConnection()); infoMap.put("spm_id", host.getSpmId()); infoMap.put("type", storageDomain.getStorageType().toString()); infoMap.put("class", storageDomain.getDomainClass().getName()); infoMap.put("name", storageDomain.getName()); java.util.List poolList = lst(); if (dataCenter != null) { infoMap.put("master_ver", dataCenter.getMasterVersion()); poolList.add(dataCenter.getId()); poolList.add(getUuid()); poolList.add(getUuid()); } infoMap.put("pool", poolList); resultMap.put("info", infoMap); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }
public java.util.Map createStorageDomain(java.lang.Integer storageType, java.lang.String sdUUID, java.lang.String domainName, java.lang.String typeSpecificArg, java.lang.Integer domClass, java.lang.String storageFormatType) { log.info("Storage domain sdUUID: {}, name: {} created.", sdUUID, domainName); org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(sdUUID); storageDomain.setName(domainName); storageDomain.setConnection(typeSpecificArg); storageDomain.setDomainClass(StorageDomain.DomainClass.getByCode(domClass)); storageDomain.setStorageType(StorageDomain.StorageType.getByCode(storageType)); updateStorageDomain(storageDomain); return getOKStatus(); }
public java.util.Map refreshStoragePool(java.lang.String spUUID, java.lang.String msdUUID, java.lang.Integer masterVersion) { try { log.info("Refreshing storage pool, spUUID: {} msdUUID: {}", new java.lang.Object[]{ spUUID, msdUUID }); final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); dataCenter.setMasterStorageDomainId(msdUUID); dataCenter.setMasterVersion(masterVersion); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(msdUUID); dataCenter.getStorageDomainMap().put(storageDomain.getId(), storageDomain); setMasterDomain(spUUID, msdUUID); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }
public java.util.Map getSpmStatus(java.lang.String uuid) { final org.ovirt.vdsmfake.domain.Host host = getActiveHost(); java.util.Map resultMap = getOKStatus(); java.util.Map infoMap = map(); infoMap.put("spmId", host.getSpmId()); infoMap.put("spmStatus", host.getSpmStatus().getName()); infoMap.put("spmLver", host.getSpmLver()); resultMap.put("spm_st", infoMap); return resultMap; }
public java.util.Map connectStoragePool(java.lang.String spUUID, java.lang.Integer hostID, java.lang.String scsiKey, java.lang.String msdUUID, java.lang.Integer masterVersion) { final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.domain.Host host = getActiveHost(); host.setSpUUID(spUUID); updateHost(host); dataCenter.setMasterStorageDomainId(msdUUID); dataCenter.setMasterVersion(masterVersion); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(msdUUID); dataCenter.getStorageDomainMap().put(storageDomain.getId(), storageDomain); setMasterDomain(spUUID, msdUUID); log.info("Data center {} connected.", spUUID); return getOKStatus(); }
public java.util.Map getVolumeInfo(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String volUUID) { try { org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); org.ovirt.vdsmfake.domain.StorageDomain storageDomain = dataCenter.getStorageDomainMap().get(sdUUID); org.ovirt.vdsmfake.domain.Volume volume = storageDomain.getVolumes().get(volUUID); java.util.Map resultMap = getOKStatus(); java.lang.String cTime = java.lang.Integer.valueOf(((int) ((java.lang.System.currentTimeMillis()) / 1000.0))).toString(); java.util.Map infoMap = map(); infoMap.put("status", "OK"); infoMap.put("domain", sdUUID); infoMap.put("voltype", "LEAF"); infoMap.put("description", volume.getDesc()); infoMap.put("parent", volume.getSrcVolUUID()); infoMap.put("format", "RAW"); infoMap.put("image", imgGUID); infoMap.put("ctime", cTime); infoMap.put("disktype", volume.getDiskType()); infoMap.put("legality", "LEGAL"); infoMap.put("mtime", cTime); infoMap.put("apparentsize", volume.getSize()); infoMap.put("children", lst()); infoMap.put("capacity", volume.getSize()); infoMap.put("uuid", volUUID); infoMap.put("truesize", "0"); infoMap.put("type", "SPARSE"); resultMap.put("info", infoMap); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }

public void init(java.util.Map<java.lang.String, java.lang.String> paramMap) { constantDelay = getLong(paramMap.get("constantDelay")); randomDelay = getLong(paramMap.get("randomDelay")); networkBridgeName = paramMap.get("networkBridgeName"); cacheDir = paramMap.get("cacheDir"); logDir = ((paramMap.get("logDir")) + "/") + (java.lang.System.currentTimeMillis()); forwardVdsmServer = paramMap.get("forwardVdsmServer"); vdsmPort = paramMap.get("vdsmPort"); vmConfAndStatsConstants = paramMap.get("vmConfAndStatsConstants"); vmConfAndStatsUpdateIntervals = paramMap.get("vmConfAndStatsUpdateIntervals"); final java.lang.String notLoggedMethods = paramMap.get("notLoggedMethods"); if ((notLoggedMethods != null) && ((notLoggedMethods.trim().length()) > 0)) { final java.lang.String[] methodNames = notLoggedMethods.split(","); for (java.lang.String methodName : methodNames) { notLoggedMethodSet.add(methodName.trim()); } } makeDir(cacheDir); makeDir(logDir); if (isProxyActive()) { targetServerUrl = (((getForwardVdsmServer()) + ":") + (getVdsmPort())) + "/"; } }

public void run() { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = null; try { request = org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest.fromByteArray(message); org.ovirt.vdsmfake.ContextHolder.init(); org.ovirt.vdsmfake.ContextHolder.setServerName(client.getHostname()); org.ovirt.vdsm.jsonrpc.client.ResponseBuilder builder = new org.ovirt.vdsm.jsonrpc.client.ResponseBuilder(request.getId()); java.lang.String methodName = request.getMethod(); builder = org.ovirt.vdsmfake.rpc.json.CommandFactory.createCommand(methodName).run(request.getParams(), builder); send(builder.build(), request.getMethod()); } catch (java.lang.Throwable e) { org.ovirt.vdsmfake.rpc.json.JsonRpcServer.log.error("Failure in processing request", e); java.util.Map<java.lang.String, java.lang.Object> error = new java.util.HashMap<>(); error.put("code", 100); error.put("message", e.getMessage()); if (request != null) { send(new org.ovirt.vdsm.jsonrpc.client.ResponseBuilder(request.getId()).withError(error).build(), request.getMethod()); } } }
public java.util.Map deleteImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String postZero, java.lang.String force) { return getOKStatusNotImplemented(); }




public java.lang.Integer getMaxVmNameLengthWin() { java.lang.Integer maxVmNameLengthWindows = ((java.lang.Integer) (getConfigValuePreConverted(ConfigurationValues.MaxVmNameLengthWindows))); if (maxVmNameLengthWindows == null) { return 15; } return maxVmNameLengthWindows; }
protected int getMaxNameLength(org.ovirt.engine.core.common.businessentities.VM vm) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isWindowsOsType(vm.getOs()) ? org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getMaxVmNameLengthWin() : org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getMaxVmNameLengthNonWin(); }


@java.lang.Override public java.lang.String toString() { return ((((("<JsonRpcRequest id: " + (this.getId())) + ", method: ") + (this.getMethod())) + ", params: ") + (this.getParams().toString())) + ">"; }

@java.lang.Override public java.lang.String toString() { java.lang.String response = ((this.getResult()) != null) ? " result: " + (this.getResult().toString()) : " error: " + (this.getError().toString()); return (("<JsonRpcResponse id: " + (this.getId())) + response) + ">"; }
@java.lang.Override protected void endWithFailure() { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.getParameters().getDestinationImageId(), ImageStatus.ILLEGAL); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.getParameters().getImageId(), ImageStatus.OK); org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.setSucceeded(true); }
private org.ovirt.engine.core.common.action.CloneCinderDisksParameters buildCinderChildCommandParameters(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks, org.ovirt.engine.core.compat.Guid vmSnapshotId) { org.ovirt.engine.core.common.action.CloneCinderDisksParameters createParams = new org.ovirt.engine.core.common.action.CloneCinderDisksParameters(cinderDisks, vmSnapshotId, diskInfoDestinationMap); return withRootCommandInfo(createParams); }


















































protected org.ovirt.engine.core.bll.ValidationResult validateBondModeVsNetworksAttachedToIt(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> hostInterfacesByNetworkName = org.ovirt.engine.core.common.businessentities.Entities.hostInterfacesByNetworkName(existingInterfaces); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : attachmentsToConfigure) { if (!(mustAttachementBeCheckedForBondMode(attachment, hostInterfacesByNetworkName))) { continue; } org.ovirt.engine.core.common.businessentities.network.Bond bondToCheck = bondsMap.get(attachment.getNicName()); if (bondToCheck == null) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingNetworkInterfaceForAttachement = existingInterfacesMap.get(attachment.getNicName()); if ((existingNetworkInterfaceForAttachement == null) || (!(existingNetworkInterfaceForAttachement.isBond()))) { continue; } bondToCheck = ((org.ovirt.engine.core.common.businessentities.network.Bond) (existingNetworkInterfaceForAttachement)); } java.lang.String networkLabel = networkBusinessEntityMap.get(attachment.getNetworkName()).getLabel(); org.ovirt.engine.core.bll.ValidationResult validationResult = checkBondMode(bondToCheck, networkLabel, attachment.getNetworkName()); if (!(validationResult.isValid())) { return validationResult; } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }

@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveIsNotValid() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond(); bond.setSlaves(java.util.Arrays.asList("slaveA", "slaveB")); org.ovirt.engine.core.bll.ValidationResult cannotBeSlaveValidationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_BOND_OR_VLAN_CANNOT_BE_SLAVE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostInterfaceValidator.VAR_INTERFACE_NAME, bond.getName())); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(bond)).build(); _doTestValidateModifiedBondSlaves(spy(validator), ValidationResult.VALID, cannotBeSlaveValidationResult, failsWith(cannotBeSlaveValidationResult)); }
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNicIdentification(org.ovirt.engine.core.common.businessentities.network.Bond bond) { org.ovirt.engine.core.compat.Guid nicId = bond.getId(); java.lang.String nicName = bond.getName(); org.ovirt.engine.core.common.errors.EngineMessage message = org.ovirt.engine.core.common.errors.EngineMessage.BOND_REFERENCES_NICS_INCOHERENTLY; return hostSetupNetworksValidatorHelper.validateCoherentIdentification(bond.getName(), nicId, nicName, message, existingInterfacesMap); }
@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveInterfaceDoesNotExist() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond(); bond.setSlaves(java.util.Arrays.asList("slaveA", "slaveB")); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(bond)).build(); _doTestValidateModifiedBondSlaves(spy(validator), new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST), ValidationResult.VALID, failsWith(EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST)); }
@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveAlreadySlavesForDifferentBondButItsDetachedFromItAsAPartOfRequest() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond("bond1"); org.ovirt.engine.core.common.businessentities.network.Bond differentBond = createBond("bond2"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveA = createBondSlave(bond, "slaveA"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveB = createBondSlave(differentBond, "slaveB"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveC = createBondSlave(differentBond, "slaveC"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveD = createBondSlave(differentBond, "slaveD"); setBondSlaves(bond, slaveA, slaveB); setBondSlaves(differentBond, slaveC, slaveD); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator build = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(bond, differentBond)).addExistingInterfaces(bond, differentBond, slaveA, slaveB, slaveC, slaveD).build(); _doTestValidateModifiedBondSlaves(spy(build), ValidationResult.VALID, ValidationResult.VALID, isValid()); }
private org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters createSetupNetworksParameters(int timeout) { final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters hostCmdParams = new org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds(), getNetworksToConfigure(), getAllNetworksToRemove(), org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getBonds(), getRemovedBondNames()); hostCmdParams.setRollbackOnFailure(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().rollbackOnFailure()); hostCmdParams.setConectivityTimeout(timeout); boolean hostNetworkQosSupported = org.ovirt.engine.core.common.FeatureSupported.hostNetworkQos(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getVdsGroupCompatibilityVersion()); hostCmdParams.setHostNetworkQosSupported(hostNetworkQosSupported); return hostCmdParams; }
@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveAlreadySlavesForDifferentBond() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond("bond1"); org.ovirt.engine.core.common.businessentities.network.Bond differentBond = createBond("bond2"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveA = createBondSlave(bond, "slaveA"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveB = createBondSlave(differentBond, "slaveB"); setBondSlaves(bond, slaveA, slaveB); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ALREADY_IN_BOND; org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(bond)).addExistingInterfaces(bond, differentBond, slaveA, slaveB).build(); _doTestValidateModifiedBondSlaves(spy(validator), ValidationResult.VALID, ValidationResult.VALID, failsWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(engineMessage, slaveB.getName()))); }
private void removeUnchangedBonds(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingNics) { for (java.util.Iterator<org.ovirt.engine.core.common.businessentities.network.Bond> iterator = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getBonds().iterator(); iterator.hasNext();) { org.ovirt.engine.core.common.businessentities.network.Bond bondFromRequest = iterator.next(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingNic : existingNics) { if ((existingNic.isBond()) && (bondRelatesToAlreadyExistingNic(bondFromRequest, existingNic))) { iterator.remove(); } } } }
public org.ovirt.engine.core.bll.ValidationResult validate() { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure = getAttachmentsToConfigure(); org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID; vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NicLabelValidator(params, existingInterfacesMap, bondsMap, hostSetupNetworksValidatorHelper).validate(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validRemovedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedBonds(); vr = (skipValidation(vr)) ? vr : validRemovedBonds(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : attachmentsDontReferenceSameNetworkDuplicately(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : networksUniquelyConfiguredOnHost(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateNetworkExclusiveOnNics(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NetworkMtuValidator(networkBusinessEntityMap).validateMtu(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateCustomProperties(); vr = (skipValidation(vr)) ? vr : validateQos(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateBondModeVsNetworksAttachedToIt(attachmentsToConfigure); return vr; }
@java.lang.Override public void removeAllCommandsInHierarchy(final org.ovirt.engine.core.compat.Guid commandId) { for (org.ovirt.engine.core.compat.Guid childCmdId : new java.util.ArrayList(getChildCommandIds(commandId))) { removeAllCommandsInHierarchy(childCmdId); } removeCommand(commandId); }
public static java.util.List<java.lang.String> getChangedFields(java.lang.Object source, java.lang.Object destination) { final java.util.List<java.lang.String> returnValue = new java.util.ArrayList<>(); if (source.getClass().isInstance(destination)) { java.lang.Class<?> objectType = source.getClass(); java.util.List<org.ovirt.engine.core.compat.backendcompat.PropertyInfo> properties = org.ovirt.engine.core.compat.backendcompat.TypeCompat.getProperties(objectType); for (org.ovirt.engine.core.compat.backendcompat.PropertyInfo property : properties) { java.lang.Object sourceValue = property.getValue(source, null); java.lang.Object destinationValue = property.getValue(destination, null); if ((property.getCanWrite()) && (!(java.util.Objects.equals(sourceValue, destinationValue)))) { returnValue.add(property.getName()); } } } return returnValue; }

private void flush(java.util.List<org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer> vmAnalyzers) { saveVmDynamic(vmAnalyzers); saveVmStatistics(vmAnalyzers); saveVmInterfaceStatistics(vmAnalyzers); saveVmDiskImageStatistics(vmAnalyzers); saveVmLunDiskStatistics(vmAnalyzers); saveVmGuestAgentNetworkDevices(vmAnalyzers); saveVmJobsToDb(vmAnalyzers); }
@org.junit.Test public void testGetAllForVmWithBlockJob() { java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> jobs = dao.getAllForVm(FixturesTool.VM_RHEL5_POOL_59); assertEquals(1, jobs.size()); assertEquals(FixturesTool.EXISTING_VM_BLOCK_JOB, jobs.get(0).getId()); assertTrue(((jobs.get(0)) instanceof org.ovirt.engine.core.common.businessentities.VmBlockJob)); }
protected org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer getVmAnalyzer(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> monitoredVm) { return new org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer(monitoredVm.getFirst(), monitoredVm.getSecond(), updateStatistics, vdsManager, auditLogDirector, resourceManager, vmStaticDao, vmDynamicDao, vmDao, vmNetworkInterfaceDao, vdsDao, diskDao, vmJobDao, vmNumaNodeDao, vdsNumaNodesSupplier); }
@javax.annotation.PostConstruct private void initSuppliers() { if (updateStatistics) { vdsNumaNodesSupplier = new org.ovirt.engine.core.utils.MemoizingSupplier(() -> { return vdsNumaNodeDao.getAllVdsNumaNodeByVdsId(vdsManager.getVdsId()).stream().collect(toMap(org.ovirt.engine.core.common.businessentities.VdsNumaNode::getIndex, java.util.function.Function.identity())); }); } }
@org.junit.Test public void testDelete() { dao.remove(FixturesTool.EXISTING_VM_JOB); java.util.List<org.ovirt.engine.core.compat.Guid> ids = dao.getAllIds(); assertTrue(ids.remove(FixturesTool.EXISTING_VM_BLOCK_JOB)); assertTrue(ids.isEmpty()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> getAll() { throw new org.apache.commons.lang.NotImplementedException(); }
@org.junit.Test public void testGetAllForVmWithNonExistentVm() { java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> jobs = dao.getAllForVm(Guid.Empty); assertTrue(jobs.isEmpty()); }
@org.junit.Test public void testGetAllForVmWithJob() { java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> jobs = dao.getAllForVm(FixturesTool.VM_RHEL5_POOL_57); assertEquals(1, jobs.size()); assertEquals(FixturesTool.EXISTING_VM_JOB, jobs.get(0).getId()); }
private void assertInsert(org.ovirt.engine.core.common.businessentities.VmJob job) { dao.save(job); java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> jobs = dao.getAllForVm(job.getVmId()); assertThat(jobs, hasItem(job)); dao.remove(job.getId()); }
@org.junit.Test public void testGetAllIds() { java.util.List<org.ovirt.engine.core.compat.Guid> ids = dao.getAllIds(); assertTrue(ids.remove(FixturesTool.EXISTING_VM_JOB)); assertTrue(ids.remove(FixturesTool.EXISTING_VM_BLOCK_JOB)); assertTrue(ids.isEmpty()); }



public static final java.lang.String mapMessageErrorCode(org.ovirt.engine.api.extensions.ExtMap outputMap) { java.lang.String msg = org.ovirt.engine.core.sso.utils.AuthnMessageMapper.USER_FAILED_TO_AUTHENTICATE; int authResult = outputMap.<java.lang.Integer>get(Authn.InvokeKeys.RESULT); if (authResult == (Authn.AuthResult.CREDENTIALS_EXPIRED)) { boolean addedUserPasswordExpired = false; if ((outputMap.<java.lang.String>get(Authn.InvokeKeys.CREDENTIALS_CHANGE_URL)) != null) { msg = java.lang.String.format(org.ovirt.engine.core.sso.utils.AuthnMessageMapper.USER_PASSWORD_EXPIRED_CHANGE_URL_PROVIDED, outputMap.<java.lang.String>get(Authn.InvokeKeys.CREDENTIALS_CHANGE_URL)); addedUserPasswordExpired = true; } if ((outputMap.<java.lang.String>get(Authn.InvokeKeys.USER_MESSAGE)) != null) { msg = java.lang.String.format(org.ovirt.engine.core.sso.utils.AuthnMessageMapper.USER_PASSWORD_EXPIRED_CHANGE_MSG_PROVIDED, outputMap.<java.lang.String>get(Authn.InvokeKeys.USER_MESSAGE)); addedUserPasswordExpired = true; } if (!addedUserPasswordExpired) { msg = org.ovirt.engine.core.sso.utils.AuthnMessageMapper.USER_PASSWORD_EXPIRED; } } return msg; }

public static void changePassword(org.ovirt.engine.core.sso.utils.SSOContext context, javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials credentials) throws org.ovirt.engine.core.sso.utils.AuthenticationException { org.ovirt.engine.core.sso.utils.AuthenticationUtils.ExtensionProfile profile = org.ovirt.engine.core.sso.utils.AuthenticationUtils.getExtensionProfile(context, credentials); java.lang.String user = org.ovirt.engine.core.sso.utils.AuthenticationUtils.mapUser(profile, credentials); org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug("AuthenticationUtils.changePassword invoking CREDENTIALS_CHANGE on authn"); org.ovirt.engine.api.extensions.ExtMap outputMap = profile.authn.invoke(new org.ovirt.engine.api.extensions.ExtMap().mput(Base.InvokeKeys.COMMAND, Authn.InvokeCommands.CREDENTIALS_CHANGE).mput(Authn.InvokeKeys.USER, user).mput(Authn.InvokeKeys.CREDENTIALS, credentials.getCredentials()).mput(Authn.InvokeKeys.CREDENTIALS_NEW, credentials.getCredentialsNew())); if (((outputMap.<java.lang.Integer>get(Base.InvokeKeys.RESULT)) != (Base.InvokeResult.SUCCESS)) || ((outputMap.<java.lang.Integer>get(Authn.InvokeKeys.RESULT)) != (Authn.AuthResult.SUCCESS))) { org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession(request).setChangePasswdCredentials(credentials); org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug("AuthenticationUtils.changePassword CREDENTIALS_CHANGE on authn failed"); throw new org.ovirt.engine.core.sso.utils.AuthenticationException(org.ovirt.engine.core.sso.utils.AuthnMessageMapper.mapMessageErrorCode(request, credentials.getProfile(), outputMap)); } org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug("AuthenticationUtils.changePassword CREDENTIALS_CHANGE on authn succeeded"); }


private java.util.List<org.ovirt.engine.core.aaa.DirectoryUser> searchDirectoryUsers() { org.ovirt.engine.core.bll.QueryData data = initQueryData(true); if (data == null) { return java.util.Collections.emptyList(); } org.ovirt.engine.core.extensions.mgr.ExtensionProxy authz = org.ovirt.engine.core.utils.extensionsmgr.EngineExtensionsManager.getInstance().getExtensionByName(data.getAuthz()); java.util.List<org.ovirt.engine.core.aaa.DirectoryUser> results = new java.util.ArrayList<>(); for (java.lang.String namespace : getNamespaces(data)) { results.addAll(org.ovirt.engine.core.bll.aaa.DirectoryUtils.findDirectoryUsersByQuery(authz, namespace, data.getQuery())); } return results; }

private static org.ovirt.engine.core.sso.utils.AuthenticationUtils.ExtensionProfile getExtensionProfile(org.ovirt.engine.core.sso.utils.SSOContext ssoContext, org.ovirt.engine.core.sso.utils.Credentials credentials) { org.ovirt.engine.core.sso.utils.AuthenticationUtils.ExtensionProfile profile = new org.ovirt.engine.core.sso.utils.AuthenticationUtils.ExtensionProfile(); for (org.ovirt.engine.core.extensions.mgr.ExtensionProxy authn : ssoContext.getSsoExtensionsManager().getExtensionsByService(org.ovirt.engine.api.extensions.aaa.Authn.class.getName())) { java.util.Properties config = authn.getContext().get(Base.ContextKeys.CONFIGURATION); if (credentials.getProfile().equals(config.getProperty(Authn.ConfigKeys.PROFILE_NAME))) { java.lang.String mapperName = authn.getContext().<java.util.Properties>get(Base.ContextKeys.CONFIGURATION).getProperty(Authn.ConfigKeys.MAPPING_PLUGIN); java.lang.String authzName = authn.getContext().<java.util.Properties>get(Base.ContextKeys.CONFIGURATION).getProperty(Authn.ConfigKeys.AUTHZ_PLUGIN); profile.mapper = (mapperName != null) ? ssoContext.getSsoExtensionsManager().getExtensionByName(mapperName) : null; profile.authn = authn; profile.authz = ssoContext.getSsoExtensionsManager().getExtensionByName(authzName); break; } } if (((profile.authn) == null) || ((profile.authz) == null)) { org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug("AuthenticationUtils.getExtensionProfile authn and authz NOT found for profile {}", credentials.getProfile()); throw new java.lang.RuntimeException(java.lang.String.format("Error in obtaining profile %s", credentials.getProfile())); } org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug("AuthenticationUtils.getExtensionProfile authn and authz found for profile %s", credentials.getProfile()); return profile; }

private java.util.List<org.ovirt.engine.core.aaa.DirectoryGroup> searchDirectoryGroups() { org.ovirt.engine.core.bll.QueryData data = initQueryData(true); if (data == null) { return java.util.Collections.emptyList(); } org.ovirt.engine.core.extensions.mgr.ExtensionProxy authz = org.ovirt.engine.core.utils.extensionsmgr.EngineExtensionsManager.getInstance().getExtensionByName(data.getAuthz()); java.util.List<org.ovirt.engine.core.aaa.DirectoryGroup> results = new java.util.ArrayList<>(); for (java.lang.String namespace : getNamespaces(data)) { results.addAll(org.ovirt.engine.core.bll.aaa.DirectoryUtils.findDirectoryGroupsByQuery(authz, namespace, data.getQuery())); } return results; }





private static java.util.Map getData(java.net.HttpURLConnection connection) throws java.lang.Exception { try (java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream()) { try (java.io.InputStream input = connection.getInputStream()) { org.ovirt.engine.core.aaa.filters.FiltersHelper.copy(input, os); } java.lang.ClassLoader loader = java.lang.Thread.currentThread().getContextClassLoader(); java.lang.Thread.currentThread().setContextClassLoader(org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.class.getClassLoader()); try { return new org.ovirt.engine.core.utils.serialization.json.JsonObjectDeserializer().deserialize(new java.lang.String(os.toByteArray(), java.nio.charset.StandardCharsets.UTF_8.name()), java.util.HashMap.class); } finally { java.lang.Thread.currentThread().setContextClassLoader(loader); } } }

private static org.ovirt.engine.api.rsdl.MetaData loadMetaData() throws java.io.IOException { java.io.InputStream stream = org.ovirt.engine.api.rsdl.RsdlManager.class.getResourceAsStream(org.ovirt.engine.api.rsdl.RsdlManager.METADATA_FILE_NAME); org.yaml.snakeyaml.constructor.Constructor constructor = new org.yaml.snakeyaml.constructor.CustomClassLoaderConstructor(java.lang.Thread.currentThread().getContextClassLoader()); org.ovirt.engine.api.rsdl.MetaData metaData = ((org.ovirt.engine.api.rsdl.MetaData) (new org.yaml.snakeyaml.Yaml(constructor).load(stream))); stream.close(); org.ovirt.engine.api.rsdl.RsdlManager.assignDefaults(metaData); for (org.ovirt.engine.api.rsdl.Action action : metaData.getActions()) { java.lang.String name = action.getName(); name = name.replaceAll("^/?", ""); action.setName(name); } return metaData; }

private boolean executeWithoutTransaction() { boolean functionReturnValue = false; boolean exceptionOccurred = true; try { logRunningCommand(); if (hasTaskHandlers()) { getCurrentTaskHandler().execute(); } else { executeCommand(); } functionReturnValue = getSucceeded(); exceptionOccurred = false; } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Command '{}' failed: {}", getClass().getName(), e.getMessage()); log.debug("Exception", e); processExceptionToClient(new org.ovirt.engine.core.common.errors.EngineFault(e, e.getVdsError().getCode())); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { if (_returnValue.getExecuteFailedMessages().isEmpty()) { processExceptionToClient(new org.ovirt.engine.core.common.errors.EngineFault(e, org.ovirt.engine.core.common.errors.EngineError.ENGINE)); } log.error("Command '{}' failed: {}", getClass().getName(), e.getMessage()); log.error("Exception", e); } catch (java.lang.RuntimeException e) { processExceptionToClient(new org.ovirt.engine.core.common.errors.EngineFault(e, org.ovirt.engine.core.common.errors.EngineError.ENGINE)); log.error("Command '{}' failed: {}", getClass().getName(), e.getMessage()); log.error("Exception", e); } finally { if (!exceptionOccurred) { setCommandExecuted(); } if (exceptionOccurred || (!(getSucceeded()))) { setCommandStatus(CommandStatus.FAILED); setSucceeded(false); compensate(); } else { if (((((getTaskType()) == (org.ovirt.engine.core.common.asynctasks.AsyncTaskType.notSupported)) && (getReturnValue().getVdsmTaskIdList().isEmpty())) && ((getCallback()) == null)) && ((commandStatus) == (org.ovirt.engine.core.compat.CommandStatus.ACTIVE))) { setCommandStatus(CommandStatus.SUCCEEDED); } cleanUpCompensationData(); } } return functionReturnValue; }
protected org.ovirt.engine.core.common.queries.VdcQueryReturnValue runQueryImpl(org.ovirt.engine.core.common.queries.VdcQueryType actionType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters, boolean isPerformUserCheck, org.ovirt.engine.core.bll.context.EngineContext engineContext) { if (isPerformUserCheck) { java.lang.String sessionId = parameters.getSessionId(); if ((org.apache.commons.lang.StringUtils.isEmpty(sessionId)) || ((sessionDataContainer.getUser(sessionId, parameters.getRefresh())) == null)) { return getErrorQueryReturnValue(EngineMessage.USER_IS_NOT_LOGGED_IN); } } java.lang.Class<org.ovirt.engine.core.bll.CommandBase<? extends org.ovirt.engine.core.common.action.VdcActionParametersBase>> clazz = org.ovirt.engine.core.bll.CommandsFactory.getQueryClass(actionType.name()); if (clazz.isAnnotationPresent(org.ovirt.engine.core.bll.DisableInMaintenanceMode.class)) { java.lang.String mode = dbFacade.getVdcOptionDao().getByNameAndVersion(ConfigValues.EngineMode.name(), ConfigCommon.defaultConfigurationVersion).getOptionValue(); if (EngineWorkingMode.MAINTENANCE.name().equalsIgnoreCase(mode)) { return getErrorQueryReturnValue(EngineMessage.ENGINE_IS_RUNNING_IN_MAINTENANCE_MODE); } } org.ovirt.engine.core.bll.QueriesCommandBase<?> command = createQueryCommand(actionType, parameters, engineContext); command.setInternalExecution((!isPerformUserCheck)); command.execute(); return command.getQueryReturnValue(); }

private org.ovirt.engine.core.common.action.VdcReturnValueBase runActionImpl(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, boolean runAsInternal, org.ovirt.engine.core.bll.context.CommandContext context) { org.ovirt.engine.core.common.action.VdcReturnValueBase result; if (((!(actionType.isActionMonitored())) && (!(isActionExternal(actionType)))) && (((parameters.getJobId()) != null) || ((parameters.getStepId()) != null))) { result = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); result.getValidationMessages().add(EngineMessage.ACTION_TYPE_NON_MONITORED.toString()); result.setValid(false); result.setSucceeded(false); } else { org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameters, context); result = runAction(command, runAsInternal); } return result; }




















private void updateActionAvailability() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = ((getSelectedItems()) != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.DiskImage>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage>(); getRemoveCommand().setIsExecutionAllowed((((disks.size()) > 0) && (isRemoveCommandAvailable(disks)))); }
































@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ("Message".equals(propName)) { if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(disk.getMessage()))) { disableWidget(getWidget()); enableWidget(diskTypePanel); enableWidget(datacenterEditor); disk.getDefaultCommand().setIsExecutionAllowed(false); disk.setIsChangeable(false); } else { enableWidget(getWidget()); disk.getDefaultCommand().setIsExecutionAllowed(true); disk.setIsChangeable(true); } } }
@java.lang.Override protected void logToAudit() { if (isPolicyResetMessage(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getReturnStatus().message)) { return; } org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(vds.getId()); auditLogableBase.setVds(vds); auditLogableBase.addCustomValue("message", org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getReturnStatus().message); auditLogDirector.log(auditLogableBase, AuditLogType.VDS_BROKER_COMMAND_FAILURE); }
protected void logToAudit() { }
@java.lang.Override protected void logToAudit() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLogableBase.addCustomValue("message", org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.getReturnStatus().message); auditLogDirector.log(auditLogableBase, AuditLogType.IRS_BROKER_COMMAND_FAILURE); }

private static java.util.List<org.ovirt.engine.api.extensions.ExtMap> flatGroups(org.ovirt.engine.api.extensions.ExtMap entity, org.ovirt.engine.api.extensions.ExtKey key, java.util.List<org.ovirt.engine.api.extensions.ExtMap> accumulator) { for (org.ovirt.engine.api.extensions.ExtMap group : entity.<java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>>get(key, java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>emptyList())) { accumulator.add(group); org.ovirt.engine.core.bll.aaa.DirectoryUtils.flatGroups(group, GroupRecord.GROUPS, accumulator); } return accumulator; }
public static org.ovirt.engine.core.compat.Version getCompatibilityVersion(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return (vmBase.getClusterId()) != null ? ClusterUtils.getInstance().getClusterDao().get(vmBase.getClusterId()).getCompatibilityVersion() : org.ovirt.engine.core.compat.Version.v3_0; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((disk.getVm()) == null) { return; } boolean isVirtioScsiEnabled = java.lang.Boolean.TRUE.equals(((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity()); org.ovirt.engine.core.compat.Version clusterVersion = disk.getVm().getCompatibilityVersion(); interfaceInfoIcon.setVisible((((clusterVersion.compareTo(Version.v3_3)) >= 0) && (!isVirtioScsiEnabled))); }
protected void updateCpuPinningVisibility() { if ((getModel().getSelectedCluster()) != null) { java.lang.String compatibilityVersion = getModel().getCompatibilityVersion().toString(); boolean isLocalSD = ((getModel().getSelectedDataCenter()) != null) && (getModel().getSelectedDataCenter().isLocal()); boolean hasCpuPinning = (java.lang.Boolean.FALSE.equals(getModel().getIsAutoAssign().getEntity())) || isLocalSD; if (java.lang.Boolean.FALSE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.CpuPinningEnabled, compatibilityVersion))) { hasCpuPinning = false; } else if (((java.lang.Boolean.FALSE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.CpuPinMigrationEnabled, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDefaultConfigurationVersion()))) && (isVmMigratable())) && (!isLocalSD)) { hasCpuPinning = false; } if (!hasCpuPinning) { if (isLocalSD) { getModel().getCpuPinning().setChangeProhibitionReason(constants.cpuPinningUnavailableLocalStorage()); } else { getModel().getCpuPinning().setChangeProhibitionReason(constants.cpuPinningUnavailable()); } getModel().getCpuPinning().setEntity(""); } getModel().getCpuPinning().setIsChangeable(hasCpuPinning); } }
@org.junit.Before public void mockConfig() { java.util.HashSet<org.ovirt.engine.core.compat.Version> supportedClusters = new java.util.HashSet<>(); supportedClusters.add(version); when(host.getSupportedClusterVersionsSet()).thenReturn(supportedClusters); when(host.getClusterCompatibilityVersion()).thenReturn(version); configRule.mockConfigValue(ConfigValues.DefaultRouteSupported, version, java.lang.Boolean.FALSE); configRule.mockConfigValue(ConfigValues.DefaultMTU, 1500); configRule.mockConfigValue(ConfigValues.HostNetworkQosSupported, version, false); }
private java.util.Map<java.lang.String, java.lang.String> createMigrationInfo() { java.util.Map<java.lang.String, java.lang.String> migrationInfo = new java.util.HashMap<>(); P parameters = org.ovirt.engine.core.vdsbroker.vdsbroker.MigrateBrokerVDSCommand.getParameters(); migrationInfo.put(VdsProperties.vm_guid, parameters.getVmId().toString()); migrationInfo.put(VdsProperties.src, java.lang.String.format("%1$s", parameters.getSrcHost())); migrationInfo.put(VdsProperties.dst, java.lang.String.format("%1$s", parameters.getDstHost())); migrationInfo.put(VdsProperties.method, org.ovirt.engine.core.vdsbroker.vdsbroker.VdsProperties.migrationMethodtoString(parameters.getMigrationMethod())); if (org.ovirt.engine.core.common.FeatureSupported.tunnelMigration(parameters.getClusterVersion())) { migrationInfo.put(VdsProperties.TUNNELED, java.lang.Boolean.toString(parameters.isTunnelMigration())); } if (org.apache.commons.lang.StringUtils.isNotBlank(parameters.getDstQemu())) { migrationInfo.put(VdsProperties.DST_QEMU, parameters.getDstQemu()); } if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.AbortMigrationOnError, parameters.getClusterVersion().getValue())) { migrationInfo.put("abortOnError", java.lang.Boolean.TRUE.toString()); } if ((parameters.getMigrationDowntime()) != 0) { migrationInfo.put(VdsProperties.MIGRATION_DOWNTIME, java.lang.Integer.toString(parameters.getMigrationDowntime())); } if ((parameters.getAutoConverge()) != null) { migrationInfo.put(VdsProperties.AUTO_CONVERGE, parameters.getAutoConverge().toString()); } if ((parameters.getMigrateCompressed()) != null) { migrationInfo.put(VdsProperties.MIGRATE_COMPRESSED, parameters.getMigrateCompressed().toString()); } if ((parameters.getConsoleAddress()) != null) { migrationInfo.put(VdsProperties.CONSOLE_ADDRESS, parameters.getConsoleAddress()); } return migrationInfo; }
private void prepareParameters() { vdsId = org.ovirt.engine.core.compat.Guid.newGuid(); when(getQueryParameters().getId()).thenReturn(vdsId); storageType = org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN; when(getQueryParameters().getStorageType()).thenReturn(storageType); vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setClusterCompatibilityVersion(Version.v3_1); when(vdsDaoMock.get(getQueryParameters().getId())).thenReturn(vds); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = java.util.Collections.emptyList(); when(storageDomainDaoMock.getAll()).thenReturn(domainsList); }
private boolean volumeExists(org.ovirt.engine.core.compat.Guid volumeId) { log.debug("Checking for the existence of volume '{0}' using GetVolumeInfo", volumeId); org.ovirt.engine.core.common.vdscommands.SPMGetVolumeInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.SPMGetVolumeInfoVDSCommandParameters(org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getImageGroupId(), volumeId); try { runVdsCommand(VDSCommandType.SPMGetVolumeInfo, params); } catch (org.ovirt.engine.core.common.errors.EngineException e) { if ((e.getVdsError().getCode()) == (org.ovirt.engine.core.common.errors.EngineError.VolumeDoesNotExist)) { return false; } log.error("Failed to determine volume '{0}' existence using GetVolumeInfo", volumeId, e); } return true; }
@java.lang.Override protected void executeIrsBrokerCommand() { org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.log.info("Executing GetVolumeInfo using the current SPM"); org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getCurrentIrsProxyData().getCurrentVdsId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getImageId()); setVDSReturnValue(resourceManager.runVdsCommand(VDSCommandType.GetVolumeInfo, params)); }

public static boolean supportedInConfig(org.ovirt.engine.core.common.config.ConfigValues feature, org.ovirt.engine.core.compat.Version version, org.ovirt.engine.core.common.businessentities.ArchitectureType arch) { java.util.Map<java.lang.String, java.lang.String> archOptions = org.ovirt.engine.core.common.config.Config.<java.util.Map>getValue(feature, version.getValue()); return java.lang.Boolean.parseBoolean(archOptions.getOrDefault(arch.name(), archOptions.get(arch.getFamily().name()))); }


protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAllOVFDisks(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid storagePoolId) { if ((ovfDisks) == null) { ovfDisks = new java.util.ArrayList(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> unregisteredDisks = getBackend().runInternalQuery(VdcQueryType.GetUnregisteredDisks, new org.ovirt.engine.core.common.queries.GetUnregisteredDisksQueryParameters(storageDomainId, storagePoolId)).getReturnValue(); if (unregisteredDisks == null) { log.error("An error occurred while fetching unregistered disks from Storage Domain id '{}'", storageDomainId); return ovfDisks; } for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : unregisteredDisks) { org.ovirt.engine.core.common.businessentities.storage.DiskImage ovfStoreDisk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); java.lang.String diskDescription = ovfStoreDisk.getDescription(); if (diskDescription.contains(OvfInfoFileConstants.OvfStoreDescriptionLabel)) { java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap; try { diskDescriptionMap = org.ovirt.engine.core.utils.JsonHelper.jsonToMap(diskDescription); } catch (java.io.IOException e) { log.warn("Exception while generating json containing ovf store info: {}", e.getMessage()); log.debug("Exception", e); continue; } if (!(isDomainExistsInDiskDescription(diskDescriptionMap, storageDomainId))) { log.warn("The disk description does not contain the storage domain id '{}'", storageDomainId); continue; } ovfDisks.add(ovfStoreDisk); } } } return ovfDisks; }

@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> getEntitiesFromStorageOvfDisk(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid storagePoolId) { return super.getEntitiesFromStorageOvfDisk(storageDomainId, storagePoolId); }



private org.ovirt.api.metamodel.tool.JavaClassName getEnumName(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName enumName = new org.ovirt.api.metamodel.tool.JavaClassName(); enumName.setPackageName(javaPackages.getXjcPackageName()); enumName.setSimpleName(javaNames.getJavaClassStyleName(type.getName())); return enumName; }




private void writeSchema() { writer.writeStartElement(org.ovirt.api.metamodel.tool.SchemaGenerator.XS_URI, "schema"); writer.writeAttribute("version", "1.0"); writeActionTypes(); java.util.List<org.ovirt.api.metamodel.concepts.StructType> structTypes = new java.util.ArrayList<>(); java.util.List<org.ovirt.api.metamodel.concepts.EnumType> enumTypes = new java.util.ArrayList<>(); for (org.ovirt.api.metamodel.concepts.Type type : model.getTypes()) { if ((type instanceof org.ovirt.api.metamodel.concepts.StructType) && (type != (identifiedType))) { structTypes.add(((org.ovirt.api.metamodel.concepts.StructType) (type))); } if ((type instanceof org.ovirt.api.metamodel.concepts.EnumType) && (schemaNames.isSchemaEnum(type))) { enumTypes.add(((org.ovirt.api.metamodel.concepts.EnumType) (type))); } } writeEnumValues(enumTypes); for (org.ovirt.api.metamodel.concepts.EnumType enumType : enumTypes) { writeEnumType(enumType); } for (org.ovirt.api.metamodel.concepts.StructType structType : structTypes) { writeStructType(structType); } writer.writeEndElement(); }

private static void mapQosToEntity(org.ovirt.engine.api.model.Qos model, org.ovirt.engine.core.common.businessentities.qos.QosBase entity, org.ovirt.engine.api.model.QosType qosType) { switch (qosType) { case STORAGE : org.ovirt.engine.api.restapi.types.QosMapper.mapStorageQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.qos.StorageQos) (entity))); break; case CPU : org.ovirt.engine.api.restapi.types.QosMapper.mapCpuQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.qos.CpuQos) (entity))); break; case NETWORK : org.ovirt.engine.api.restapi.types.QosMapper.mapNetworkQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.network.NetworkQoS) (entity))); break; case HOSTNETWORK : org.ovirt.engine.api.restapi.types.QosMapper.mapHostNetworkQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.network.HostNetworkQos) (entity))); break; default : break; } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Qos.class, to = org.ovirt.engine.core.common.businessentities.qos.QosBase.class) public static org.ovirt.engine.core.common.businessentities.qos.QosBase map(org.ovirt.engine.api.model.Qos model, org.ovirt.engine.core.common.businessentities.qos.QosBase template) { org.ovirt.engine.core.common.businessentities.qos.QosBase entity = (template == null) ? null : template; org.ovirt.engine.api.model.QosType qosType = org.ovirt.engine.api.restapi.types.QosTypeMapper.map(model.getType(), (entity == null ? null : entity.getQosType())); if (entity == null) { entity = org.ovirt.engine.api.restapi.types.QosMapper.createNewQosEntityForQosType(qosType); } if (model.isSetId()) { entity.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.setName(model.getName()); } if ((model.isSetDataCenter()) && (model.getDataCenter().isSetId())) { entity.setStoragePoolId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getDataCenter().getId())); } if (model.isSetDescription()) { entity.setDescription(model.getDescription()); } org.ovirt.engine.api.restapi.types.QosMapper.mapQosToEntity(model, entity, qosType); return entity; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.qos.QosBase.class, to = org.ovirt.engine.api.model.Qos.class) public static org.ovirt.engine.api.model.Qos map(org.ovirt.engine.core.common.businessentities.qos.QosBase entity, org.ovirt.engine.api.model.Qos template) { org.ovirt.engine.api.model.Qos model = (template != null) ? template : new org.ovirt.engine.api.model.Qos(); model.setId(entity.getId().toString()); model.setName(entity.getName()); model.setType(org.ovirt.engine.api.restapi.types.QosTypeMapper.qosTypeToString(entity.getQosType())); org.ovirt.engine.core.compat.Guid storagePoolId = entity.getStoragePoolId(); if (storagePoolId != null) { org.ovirt.engine.api.model.DataCenter dataCenter = new org.ovirt.engine.api.model.DataCenter(); dataCenter.setId(storagePoolId.toString()); model.setDataCenter(dataCenter); } model.setDescription(entity.getDescription()); org.ovirt.engine.api.restapi.types.QosMapper.mapQosTypeToModel(entity, model); return model; }

@java.lang.Override public org.ovirt.engine.ui.common.widget.ImageWithDecorator getValue(org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel item) { org.ovirt.engine.core.common.businessentities.VM vm = item.getVM(); com.google.gwt.resources.client.ImageResource changesImage = null; if ((vm != null) && (vm.isNextRunConfigurationExists())) { changesImage = org.ovirt.engine.ui.userportal.widget.table.column.VmStatusColumn.resources.vmDelta(); } return new org.ovirt.engine.ui.common.widget.ImageWithDecorator(getMainImage(item), changesImage, org.ovirt.engine.ui.userportal.widget.table.column.VmStatusColumn.DECORATOR_POSITION_LEFT, org.ovirt.engine.ui.userportal.widget.table.column.VmStatusColumn.DECORATOR_POSITION_TOP); }
public void fillReportedConfigurations(java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> networkAttachments, org.ovirt.engine.core.compat.Guid hostId) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allInterfacesForHost = interfaceDao.getAllInterfacesForVds(hostId); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> networkNameToNicMap = nicsByNetworkId(allInterfacesForHost); org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Network> networkMap = new org.ovirt.engine.core.common.businessentities.BusinessEntityMap(networkDao.getAllForCluster(vdsDao.get(hostId).getClusterId())); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment : networkAttachments) { fillReportedConfigurations(networkNameToNicMap, networkMap, networkAttachment); } }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.bll.network.host.GetNetworkAttachmentsByHostIdQuery.getParameters().getId(); java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> networkAttachments = networkAttachmentDao.getAllForHost(hostId); reportedConfigurationsFiller.fillReportedConfigurations(networkAttachments, hostId); org.ovirt.engine.core.bll.network.host.GetNetworkAttachmentsByHostIdQuery.getQueryReturnValue().setReturnValue(networkAttachments); }





public static int[] asIntArray(java.util.List<?> l) { int[] ret = new int[l.size()]; int i = 0; for (java.lang.Object o : l) { ret[(i++)] = java.lang.Integer.valueOf(o.toString()); } return ret; }
private org.ovirt.engine.core.common.action.ImportVmParameters createImportParams(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.StorageDomain sd) { org.ovirt.engine.core.common.action.ImportVmParameters parameters = new org.ovirt.engine.core.common.action.ImportVmParameters(vm, sd.getId(), sd.getId(), sd.getStoragePoolId(), vm.getClusterId()); org.ovirt.engine.core.compat.Guid sdProfileId = diskProfileDao.getAllForStorageDomain(sd.getId()).get(0).getId(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : vm.getImages()) { image.setDiskProfileId(sdProfileId); image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(sd.getId()))); image.setVmSnapshotId(org.ovirt.engine.core.compat.Guid.newGuid()); } parameters.setImagesExistOnTargetStorageDomain(true); vm.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); org.ovirt.engine.core.common.businessentities.Cluster cluster = clusterDAO.get(vm.getClusterId()); vm.setClusterArch(cluster.getArchitecture()); vm.setVmCreationDate(new java.util.Date()); vm.setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE); vm.setVmOs(osRepository.getLinuxOss().stream().sorted().findFirst().get()); return parameters; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel> imageLineModels = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue))) { org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel lineModel = new org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel(getModel().getInstanceImages()); lineModel.initialize(disk, getVm()); imageLineModels.add(lineModel); } getModel().getInstanceImages().setItems(imageLineModels); getModel().getInstanceImages().setVm(getVm()); }
private void updateInstanceImages() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmDiskList(new org.ovirt.engine.ui.frontend.AsyncQuery(getModel(), new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel> imageLineModels = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue))) { org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel lineModel = new org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel(getModel().getInstanceImages()); lineModel.initialize(disk, getVm()); imageLineModels.add(lineModel); } getModel().getInstanceImages().setItems(imageLineModels); getModel().getInstanceImages().setVm(getVm()); } }), getVm().getId()); }
public static org.ovirt.engine.core.bll.ValidationResult canRunActionOnNonManagedVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.action.VdcActionType actionType) { org.ovirt.engine.core.bll.ValidationResult validationResult = ValidationResult.VALID; if (((vm.isHostedEngine()) && (!(org.ovirt.engine.core.bll.VmHandler.COMMANDS_ALLOWED_ON_HOSTED_ENGINE.contains(actionType)))) || ((vm.isExternalVm()) && (!(org.ovirt.engine.core.bll.VmHandler.COMMANDS_ALLOWED_ON_EXTERNAL_VMS.contains(actionType))))) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CANNOT_RUN_ACTION_ON_NON_MANAGED_VM); } return validationResult; }

public boolean isHostedEngine() { return ((OriginType.HOSTED_ENGINE) == (getOrigin())) || ((OriginType.MANAGED_HOSTED_ENGINE) == (getOrigin())); }


public boolean isExternalVm() { return OriginType.EXTERNAL.equals(getOrigin()); }
@java.lang.Override public boolean isValid(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, javax.validation.ConstraintValidatorContext context) { org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol bootProtocol = iface.getBootProtocol(); java.lang.String address = iface.getAddress(); if ((bootProtocol != null) && (bootProtocol == (STATIC_IP))) { if (isNullOrEmpty(address)) { context.disableDefaultConstraintViolation(); context.buildConstraintViolationWithTemplate("NETWORK_ADDR_MANDATORY_IN_STATIC_IP").addNode("address").addConstraintViolation(); return false; } } if ((!(org.ovirt.engine.core.common.validation.NetworkInterfaceValidator.isEmpty(iface.getBondName()))) && (!(validateSlave(iface)))) { context.disableDefaultConstraintViolation(); context.buildConstraintViolationWithTemplate("SLAVE_INTERFACE_IS_MISCONFIGURED").addConstraintViolation(); return false; } if (!(validateLabel(iface))) { context.disableDefaultConstraintViolation(); context.buildConstraintViolationWithTemplate("IMPROPER_INTERFACE_IS_LABELED").addConstraintViolation(); } return true; }
@org.junit.Test public void testPersistNetworkAttachmentsWhenNetworkMovedToDifferentNic() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachmentForClusterNetworkA = createNetworkAttachment(clusterNetworkA); org.ovirt.engine.core.compat.Guid notUpToDateNicId = org.ovirt.engine.core.compat.Guid.newGuid(); networkAttachmentForClusterNetworkA.setNicId(notUpToDateNicId); networkAttachmentForClusterNetworkA.setNicName("nonsense"); org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = org.ovirt.engine.core.utils.NetworkUtils.createIpConfigurationFromVdsNetworkInterface(interfaceWithAttachedClusterNetworkA); networkAttachmentForClusterNetworkA.setIpConfiguration(ipConfiguration); networkAttachmentForClusterNetworkA.setProperties(customPropertiesForNics.getCustomPropertiesFor(interfaceWithAttachedClusterNetworkA)); callPersistNetworkAttachmentsAndVerifyThatNetworkAttachmentIsSynced(networkAttachmentForClusterNetworkA, createPersister(java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>emptyList())); }
private void createNetworkAttachmentForReportedNetworksNotHavingOne(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, java.lang.String networkName) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(getBaseInterfaceNicOrThis(nic), clusterNetworks.get(networkName), org.ovirt.engine.core.utils.NetworkUtils.createIpConfigurationFromVdsNetworkInterface(nic)); networkAttachment.setId(org.ovirt.engine.core.compat.Guid.newGuid()); if ((legacyMode) && ((customPropertiesForNics) != null)) { networkAttachment.setProperties(customPropertiesForNics.getCustomPropertiesFor(nic)); } networkAttachmentDao.save(networkAttachment); }
private void callPersistNetworkAttachmentsAndVerifyThatNetworkAttachmentIsSynced(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment, org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister persister) { when(networkAttachmentDao.getAllForHost(eq(hostId))).thenReturn(java.util.Collections.singletonList(attachment)); persister.persistNetworkAttachments(); verify(networkAttachmentDao).getAllForHost(any(org.ovirt.engine.core.compat.Guid.class)); verify(networkAttachmentDao).update(argThat(new org.mockito.ArgumentMatcher<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>() { @java.lang.Override public boolean matches(java.lang.Object o) { if (!(o instanceof org.ovirt.engine.core.common.businessentities.network.NetworkAttachment)) { return false; } org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = org.ovirt.engine.core.utils.NetworkUtils.createIpConfigurationFromVdsNetworkInterface(interfaceWithAttachedClusterNetworkA); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = ((org.ovirt.engine.core.common.businessentities.network.NetworkAttachment) (o)); return ((((((networkAttachment.getId()) != null) && (networkAttachment.getId().equals(attachment.getId()))) && ((networkAttachment.getNicId()) != null)) && (networkAttachment.getNicId().equals(interfaceWithAttachedClusterNetworkA.getId()))) && (java.util.Objects.equals(networkAttachment.getIpConfiguration(), ipConfiguration))) && (java.util.Objects.equals(networkAttachment.getProperties(), customPropertiesForNics.getCustomPropertiesFor(interfaceWithAttachedClusterNetworkA))); } })); verifyNoMoreInteractions(networkAttachmentDao); }
private java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> prepareNicsForUpdate() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsForUpdate = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface dbNic : dbNics) { if (reportedNicsByNames.containsKey(dbNic.getName())) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface reportedNic = reportedNicsByNames.get(dbNic.getName()); reportedNic.setId(dbNic.getId()); if (!(overrideNicWithUserConfiguration(reportedNic, userConfiguredNicsByName))) { reportedNic.overrideEngineManagedAttributes(dbNic); } nicsForUpdate.add(reportedNic); } } return nicsForUpdate; }
private boolean overrideNicWithUserConfiguration(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicForOverride, java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> userConfiguredNicsByName) { if (userConfiguredNicsByName.containsKey(nicForOverride.getName())) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = userConfiguredNicsByName.get(nicForOverride.getName()); nicForOverride.overrideEngineManagedAttributes(nic); return true; } return false; }

private org.ovirt.engine.core.common.action.ImportVmParameters createImportParams(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.StorageDomain sd) { org.ovirt.engine.core.common.action.ImportVmParameters parameters = new org.ovirt.engine.core.common.action.ImportVmParameters(vm, sd.getId(), sd.getId(), sd.getStoragePoolId(), vm.getVdsGroupId()); org.ovirt.engine.core.compat.Guid sdProfileId = diskProfileDao.getAllForStorageDomain(sd.getId()).get(0).getId(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : vm.getImages()) { image.setDiskProfileId(sdProfileId); image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(sd.getId()))); image.setVmSnapshotId(org.ovirt.engine.core.compat.Guid.newGuid()); } parameters.setImagesExistOnTargetStorageDomain(true); vm.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = vdsGroupDAO.get(vm.getVdsGroupId()); vm.setClusterArch(vdsGroup.getArchitecture()); vm.setVmCreationDate(new java.util.Date()); vm.setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE); java.util.ArrayList<java.lang.Integer> linuxOss = osRepository.getLinuxOss(); java.util.Collections.sort(linuxOss); vm.setVmOs(linuxOss.get(0)); return parameters; }







@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { allBonds = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); initNetworkModels(); initDcNetworkParams(); initNicModels(); hostSetupNetworksParametersData.allNics = allNics; hostSetupNetworksParametersData.existingNetworkAttachments = existingNetworkAttachments; stopProgress(); }

public java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> getExistingNetworkAttachments() { return existingNetworkAttachments; }
private org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel createUnmanagedNetworkModel(java.lang.String networkName, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { org.ovirt.engine.core.common.businessentities.network.Network unmanagedNetwork = new org.ovirt.engine.core.common.businessentities.network.Network(); unmanagedNetwork.setName(networkName); unmanagedNetwork.setVlanId(nic.getVlanId()); unmanagedNetwork.setMtu(nic.getMtu()); unmanagedNetwork.setVmNetwork(nic.isBridged()); org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel(unmanagedNetwork, this); networkMap.put(networkName, networkModel); return networkModel; }
public org.ovirt.engine.core.common.businessentities.network.NetworkAttachment getNetworkAttachmentForNetwork(org.ovirt.engine.core.compat.Guid networkId) { if (networkId == null) { return null; } org.ovirt.engine.core.common.businessentities.network.NetworkAttachment updatedAttachment = new org.ovirt.engine.core.common.utils.MapNetworkAttachments(hostSetupNetworksParametersData.newOrModifiedNetworkAttachments).byNetworkId().get(networkId); if (updatedAttachment != null) { return updatedAttachment; } org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingAttachment = getExistingAttachmentByNetworkId(networkId); if ((existingAttachment != null) && (!(shouldBeRemoved(existingAttachment.getId())))) { return existingAttachment; } return null; }
private void queryFreeBonds() { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.setModel(this); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { allBonds = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); initNetworkModels(); initDcNetworkParams(); initNicModels(); hostSetupNetworksParametersData.allNics = allNics; hostSetupNetworksParametersData.existingNetworkAttachments = existingNetworkAttachments; stopProgress(); } }; org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVdsFreeBondsByVdsId, new org.ovirt.engine.core.common.queries.IdQueryParameters(vds.getId()), asyncQuery); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValueObj) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValueObj)); java.lang.Object returnValue2 = returnValue.getReturnValue(); this.existingNetworkAttachments = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>) (returnValue2)); queryVfsConfig(); }
private org.ovirt.engine.core.common.businessentities.network.NetworkAttachment getExistingAttachmentByNetworkId(org.ovirt.engine.core.compat.Guid networkId) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingNetworkAttachment = new org.ovirt.engine.core.common.utils.MapNetworkAttachments(existingNetworkAttachments).byNetworkId().get(networkId); return existingNetworkAttachment; }
private void queryNetworkAttachments() { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.setModel(this); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValueObj) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValueObj)); java.lang.Object returnValue2 = returnValue.getReturnValue(); org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel.this.existingNetworkAttachments = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>) (returnValue2)); queryVfsConfig(); } }; org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters(vds.getId()); params.setRefresh(false); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetNetworkAttachmentsByHostId, params, asyncQuery); }
private void initNetworkModels() { java.util.Map<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> networkModels = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.network.Network network : allNetworks) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel(network, this); networkModels.put(network.getName(), networkModel); if (networkModel.isManagement()) { managementNetworkModel = networkModel; } if (!(network.isExternal())) { java.lang.String label = network.getLabel(); if (label != null) { networkLabelMap.get(label).getNetworks().add(networkModel); } } } setNetworks(networkModels); }


@org.junit.Test public void testGetAllIds() { java.util.List<org.ovirt.engine.core.compat.Guid> ids = dao.getAllIds(); assertTrue(ids.remove(FixturesTool.EXISTING_VM_JOB)); assertTrue(ids.remove(FixturesTool.EXISTING_VM_BLOCK_JOB)); assertTrue(ids.isEmpty()); }
public java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> getVmJobs() { return vmJobs; }


@javax.annotation.PostConstruct private void init() { vmJobDao.getAll().forEach(this::addJobToRepository); }
private void saveVmJobsToDb(java.util.Collection<org.ovirt.engine.core.common.businessentities.VmJob> vmJobsToUpdate, java.util.List<org.ovirt.engine.core.compat.Guid> vmJobIdsToRemove) { vmJobDao.updateAllInBatch(vmJobsToUpdate); if (!(vmJobIdsToRemove.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { vmJobDao.removeAll(vmJobIdsToRemove); return null; }); } }

private void updateVmJobs(org.ovirt.engine.core.compat.Guid vmId, java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> reportedVmJobs, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmJob> vmJobsToUpdate, java.util.List<org.ovirt.engine.core.compat.Guid> vmJobIdsToRemove) { if (reportedVmJobs == null) { org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.debug("No vmJob data returned from VDSM, preserving existing jobs"); return; } java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> vmJobs = jobsRepository.get(vmId); if (vmJobs == null) { return; } java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmJob> jobIdToVmJob = vmJobs.stream().collect(java.util.stream.Collectors.toMap(VmJob::getId, java.util.function.Function.identity())); java.util.Set<org.ovirt.engine.core.compat.Guid> vmJobIdsToIgnore = new java.util.HashSet<>(); reportedVmJobs.stream().filter(( job) -> jobIdToVmJob.containsKey(job.getId())).forEach(( job) -> { if (jobIdToVmJob.get(job.getId()).equals(job)) { vmJobIdsToIgnore.add(job.getId()); org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.info("VM job '{}': In progress (no change)", job.getId()); } else { vmJobsToUpdate.put(job.getId(), job); org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.info("VM job '{}': In progress, updating", job.getId()); } }); jobIdToVmJob.entrySet().stream().filter(( entry) -> (!(vmJobsToUpdate.containsKey(entry.getKey()))) && (!(vmJobIdsToIgnore.contains(entry.getKey())))).forEach(( entry) -> { vmJobs.remove(entry.getValue()); vmJobIdsToRemove.add(entry.getKey()); org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.info("VM job '{}': Deleting", entry.getKey()); }); }
protected void process(java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmJob>> vmIdToVmJobs) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmJob> vmJobsToUpdate = new java.util.HashMap<>(); java.util.List<org.ovirt.engine.core.compat.Guid> vmJobIdsToRemove = new java.util.ArrayList<>(); vmIdToVmJobs.entrySet().forEach(( entry) -> updateVmJobs(entry.getKey(), entry.getValue(), vmJobsToUpdate, vmJobIdsToRemove)); saveVmJobsToDb(vmJobsToUpdate.values(), vmJobIdsToRemove); }
private void addJobToRepository(org.ovirt.engine.core.common.businessentities.VmJob vmJob) { java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> vmJobs = jobsRepository.putIfAbsent(vmJob.getVmId(), new java.util.concurrent.CopyOnWriteArrayList()); vmJobs.add(vmJob); }
private void updateVmJobs() { vmJobs = vdsmVm.getVmStatistics().getVmJobs(); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> getAll() { throw new org.apache.commons.lang.NotImplementedException(); }



public boolean isClusterUpgradePolicy() { return (filters) != null ? filters.contains(org.ovirt.engine.core.common.scheduling.ClusterPolicy.UPGRADE_POLICY_UNIT_GUID) : false; }






@org.junit.Test public void shouldDetectPinnedVM() { invalidVM.setDedicatedVmForVdsList(org.ovirt.engine.core.compat.Guid.newGuid()); invalidVM.setMigrationSupport(org.ovirt.engine.core.bll.validator.PINNED_TO_HOST); assertThat(validator.isVmReadyForUpgrade(invalidVM)).contains(UPGRADE_ERROR.VM_PINNED_TO_HOSTS); }
@org.junit.Test public void shouldDetectSuspendedVM() { invalidVM.setStatus(VMStatus.Suspended); assertThat(validator.isVmReadyForUpgrade(invalidVM)).contains(UPGRADE_ERROR.VM_SUSPENDED); }

@org.junit.Test public void shouldDetectCpuPinning() { invalidVM.setCpuPinning("i am pinned"); assertThat(validator.isVmReadyForUpgrade(invalidVM)).contains(UPGRADE_ERROR.VM_CPUS_PINNED); }


@org.junit.Test public void shouldDetectNumaPinning() { invalidVM.setvNumaNodeList(java.util.Arrays.asList(createVmNumaNode(1, java.util.Arrays.asList(createVdsNumaNode(1))))); assertThat(validator.isVmReadyForUpgrade(invalidVM)).contains(UPGRADE_ERROR.VM_NUMA_PINNED); }
@org.junit.Test public void shouldDetectPassThroughDeviceOnVM() { when(hostDeviceManager.checkVmNeedsDirectPassthrough(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(true); assertThat(validator.isVmReadyForUpgrade(invalidVM)).contains(UPGRADE_ERROR.VM_NEEDS_PASSTHROUGH); }
public java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR> isVmReadyForUpgrade(final org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Objects.requireNonNull(vm); final java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR> errors = new java.util.ArrayList<>(); if (vm.getStatus().isSuspended()) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_SUSPENDED); } if (!(org.apache.commons.lang.StringUtils.isEmpty(vm.getCpuPinning()))) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_CPUS_PINNED); } for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : vm.getvNumaNodeList()) { if (!(org.ovirt.engine.core.utils.NumaUtils.getPinnedNodeIndexList(vmNumaNode.getVdsNumaNodeList()).isEmpty())) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_NUMA_PINNED); break; } } if ((!(vm.getDedicatedVmForVdsList().isEmpty())) && ((org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST) == (vm.getMigrationSupport()))) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_PINNED_TO_HOSTS); } if (hostDeviceManager.checkVmNeedsDirectPassthrough(vm)) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_NEEDS_PASSTHROUGH); } return errors; }
@org.junit.Test public void shouldDetectDifferentOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).isSameOs(new org.ovirt.engine.core.bll.scheduling.OS("os2", new org.ovirt.engine.core.compat.Version("6.3")))).isFalse(); }
@org.junit.Test public void shouldDetectSameOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).isSameOs(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); }

@org.junit.Test public void shouldCreateNiceJsonValidationResult() throws java.io.IOException { invalidVM.setCpuPinning("i am pinned"); invalidVM.setDedicatedVmForVdsList(org.ovirt.engine.core.compat.Guid.newGuid()); invalidVM.setMigrationSupport(org.ovirt.engine.core.bll.validator.PINNED_TO_HOST); invalidVM.setId(Guid.Empty); newHost1.setHostOs("invalid os"); org.ovirt.engine.core.bll.ValidationResult validationResult = validator.isUpgradePossible(java.util.Arrays.asList(newHost1), java.util.Arrays.asList(invalidVM)); assertThat(validationResult.getVariableReplacements().get(0)).contains("VM_CPUS_PINNED", "VM_NOT_MIGRATABLE", "HOST_INVALID_OS"); }
private void removeUserRemovedNetworkAttachments() { for (org.ovirt.engine.core.compat.Guid attachmentId : userRemovedNetworkAttachments) { networkAttachmentDao.remove(attachmentId); } }


public boolean poll(org.ovirt.engine.core.compat.Guid hostId) { long timeBeforePoll = java.lang.System.currentTimeMillis(); org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runFutureVdsCommand(FutureVDSCommandType.Poll, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(hostId)); try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = task.get(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SetupNetworksPollingTimeout), java.util.concurrent.TimeUnit.SECONDS); if (returnValue.getSucceeded()) { return true; } waitBeforeNextPoll(timeBeforePoll); } catch (java.util.concurrent.TimeoutException e) { } return false; }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getDiskImage().getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() { java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> list = new java.util.ArrayList<>(); list.add(new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter(org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getDiskImage().getQuotaId(), null, QuotaConsumptionParameter.QuotaAction.CONSUME, org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getDiskImage().getActualSize())); return list; }






















public java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR> isVmReadyForUpgrade(final org.ovirt.engine.core.common.businessentities.VM vm) { final java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR> errors = new java.util.ArrayList<>(); if (vm.getStatus().isSuspended()) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_SUSPENDED); } if (!(org.apache.commons.lang.StringUtils.isEmpty(vm.getCpuPinning()))) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_CPUS_PINNED); } for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : vm.getvNumaNodeList()) { if (!(org.ovirt.engine.core.utils.NumaUtils.getPinnedNodeIndexList(vmNumaNode.getVdsNumaNodeList()).isEmpty())) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_NUMA_PINNED); break; } } if ((!(vm.getDedicatedVmForVdsList().isEmpty())) && ((org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST) == (vm.getMigrationSupport()))) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_PINNED_TO_HOSTS); } if (hostDeviceManager.checkVmNeedsDirectPassthrough(vm)) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_NEEDS_PASSTHROUGH); } return errors; }
@org.junit.Test public void shouldCheckIfClusterUpgradeIsDone() { oldGroupIsDetachedDefault(); createCommandWithDefaultVdsGroup(); cpuExists(); architectureIsUpdatable(); inUpgradeMode(); cmd.getVdsGroup().setClusterPolicyId(org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.NOT_UPGRADE_POLICY_GUID); assertTrue(cmd.canDoAction()); verify(inClusterUpgradeValidator, times(0)).isUpgradePossible(anyList(), anyList()); verify(inClusterUpgradeValidator, times(1)).isUpgradeDone(anyList()); }
@org.junit.Test public void shouldCheckIfClusterCanBeUpgraded() { oldGroupIsDetachedDefault(); createCommandWithDefaultVdsGroup(); cpuExists(); architectureIsUpdatable(); wantsToStartUpgrade(); cmd.getVdsGroup().setClusterPolicyId(org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.UPGRADE_POLICY_GUID); assertTrue(cmd.canDoAction()); verify(inClusterUpgradeValidator, times(1)).isUpgradePossible(anyList(), anyList()); verify(inClusterUpgradeValidator, times(0)).isUpgradeDone(anyList()); }

@org.junit.Test public void shouldDetectPinnedVM() { invalidVM.setDedicatedVmForVdsList(org.ovirt.engine.core.compat.Guid.newGuid()); invalidVM.setMigrationSupport(org.ovirt.engine.core.bll.validator.PINNED_TO_HOST); assertThat(validator.isVmReadyForUpgrade(invalidVM), hasItem(UPGRADE_ERROR.VM_PINNED_TO_HOSTS)); }
@org.junit.Test public void shouldDetectDifferentOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).isSameOs(new org.ovirt.engine.core.bll.scheduling.OS("os2", new org.ovirt.engine.core.compat.Version("6.3"))), is(false)); }
@org.junit.Test public void shouldDetectSameOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).isSameOs(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3"))), is(true)); }

public static org.ovirt.vdsm.jsonrpc.client.JsonRpcClient createStompClient(java.lang.String hostname, int port, int connectionTimeout, int clientTimeout, int connectionRetry, int heartbeat, boolean isSecure, java.lang.String protocol, java.lang.String requestQueue, java.lang.String responseQueue) { org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy connectionPolicy = new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompClientPolicy(connectionTimeout, connectionRetry, heartbeat, java.io.IOException.class, requestQueue, responseQueue); org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy clientPolicy = new org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy(clientTimeout, connectionRetry, heartbeat, java.io.IOException.class); return org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.createClient(hostname, port, connectionPolicy, clientPolicy, isSecure, ReactorType.STOMP, protocol); }
public static org.ovirt.vdsm.jsonrpc.client.JsonRpcClient createClient(java.lang.String hostname, int port, int connectionTimeout, int clientTimeout, int connectionRetry, int heartbeat, boolean isSecure, org.ovirt.vdsm.jsonrpc.client.reactors.ReactorType type, java.lang.String protocol) { org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy connectionPolicy = new org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy(connectionTimeout, connectionRetry, heartbeat, java.io.IOException.class); org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy clientPolicy = new org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy(clientTimeout, connectionRetry, heartbeat, java.io.IOException.class); return org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.createClient(hostname, port, connectionPolicy, clientPolicy, isSecure, type, protocol); }
private void addImportedDevices(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vm.getStaticData(); vmStatic.setImages(new java.util.ArrayList()); vmStatic.setInterfaces(new java.util.ArrayList()); org.ovirt.engine.core.bll.ImportUtils.updateGraphicsDevices(vmStatic, org.ovirt.engine.core.bll.ConvertVmCommand.getStoragePool().getCompatibilityVersion()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.addImportedDevices(vmStatic, false); org.ovirt.engine.core.bll.ConvertVmCommand.getVmDeviceDao().updateBootOrderInBatch(new java.util.ArrayList(vm.getManagedVmDeviceMap().values())); }





@java.lang.Override protected boolean validate() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.Permission p = org.ovirt.engine.core.bll.RemovePermissionCommand.getPermissionDao().get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getPermission().getId()); if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isLastSuperUserPermission(p.getRoleId())) { org.ovirt.engine.core.bll.RemovePermissionCommand.getReturnValue().getValidationMessages().add(EngineMessage.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString()); returnValue = false; } else if ((p.getRoleType().equals(RoleType.ADMIN)) && (!(org.ovirt.engine.core.bll.RemovePermissionCommand.isSystemSuperUser()))) { addValidationMessage(EngineMessage.PERMISSION_REMOVE_FAILED_ONLY_SYSTEM_SUPER_USER_CAN_REMOVE_ADMIN_ROLES); returnValue = false; } return returnValue; }
@java.lang.Override public javax.ws.rs.core.Response remove() { get(); return performAction(VdcActionType.RemovePermission, new org.ovirt.engine.core.common.action.PermissionsOperationsParameters(getPermissions())); }










private void generateWriteMemberAsAttribute(org.ovirt.api.metamodel.concepts.StructMember member) { org.ovirt.api.metamodel.concepts.Name name = member.getName(); org.ovirt.api.metamodel.concepts.Type type = member.getType(); java.lang.String field = javaNames.getJavaMemberStyleName(name); java.lang.String tag = schemaNames.getSchemaTagName(name); javaBuffer.addLine("if (object.%1$sPresent()) {", field); if (type instanceof org.ovirt.api.metamodel.concepts.PrimitiveType) { org.ovirt.api.metamodel.concepts.Model model = type.getModel(); if (((type == (model.getBooleanType())) || (type == (model.getIntegerType()))) || (type == (model.getDecimalType()))) { javaBuffer.addLine("writer.writeAttribute(\"%1$s\", object.%2$s().toString());", tag, field); } else if (type == (model.getStringType())) { javaBuffer.addLine("writer.writeAttribute(\"%1$s\", object.%2$s());", tag, field); } else if (type == (model.getDateType())) { javaBuffer.addLine("writer.writeAttribute(\"%1$s\", object.%2$s().toString());", tag, field); } } else if (type instanceof org.ovirt.api.metamodel.concepts.EnumType) { javaBuffer.addLine("writer.writeAttribute(\"%1$s\", object.%2$s().toString());", tag, field); } javaBuffer.addLine("}"); }





public static java.lang.String signCertificateRequest(java.lang.String request, java.lang.String name, java.lang.String hostname) throws java.io.IOException { org.ovirt.engine.core.utils.EngineLocalConfig config = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance(); try (final java.io.OutputStream os = new java.io.FileOutputStream(new java.io.File(new java.io.File(config.getPKIDir(), "requests"), java.lang.String.format("%s.req", name)))) { os.write(request.getBytes(java.nio.charset.StandardCharsets.UTF_8)); } if (!(new org.ovirt.engine.core.utils.hostinstall.OpenSslCAWrapper().signCertificateRequest(new java.io.File(new java.io.File(config.getUsrDir(), "bin"), "pki-enroll-request.sh"), name, hostname))) { throw new java.lang.RuntimeException("Certificate enrollment failed"); } return org.ovirt.engine.core.utils.FileUtil.readAllText(new java.io.File(new java.io.File(config.getPKIDir(), "certs"), java.lang.String.format("%s.cer", name)).getPath()); }
private static java.lang.String loadFile(java.lang.String fileName) { java.lang.String content = ""; fileName = org.ovirt.engine.core.common.config.ConfigUtil.resolvePath(org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.getSysprepDir(), fileName); if (new java.io.File(fileName).exists()) { try { content = org.ovirt.engine.core.utils.FileUtil.readAllText(fileName); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.log.error("Failed to read sysprep template '{}': {}", fileName, e.getMessage()); org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.log.debug("Exception", e); } } else { org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.log.error("Sysprep template: '{}' not found", fileName); } return content; }
public static java.lang.String signOpenSSHCertificate(java.lang.String name, java.lang.String hostname, java.lang.String principal) throws java.io.IOException { org.ovirt.engine.core.utils.EngineLocalConfig config = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance(); if (!(new org.ovirt.engine.core.utils.hostinstall.OpenSslCAWrapper().signOpenSSHCertificate(new java.io.File(new java.io.File(config.getUsrDir(), "bin"), "pki-enroll-openssh-cert.sh"), name, hostname, principal))) { throw new java.lang.RuntimeException("OpenSSH certificate enrollment failed"); } return org.ovirt.engine.core.utils.FileUtil.readAllText(new java.io.File(new java.io.File(config.getPKIDir(), "certs"), java.lang.String.format("%s-cert.pub", name)).getPath()); }

public static void endTaskJob(org.ovirt.engine.core.bll.job.ExecutionContext context, boolean exitStatus) { if (context == null) { return; } try { if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsJob)) && ((context.getJob()) != null)) { org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(context, exitStatus); } else { org.ovirt.engine.core.common.job.Step parentStep = context.getStep(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsStep)) && (parentStep != null)) { org.ovirt.engine.core.common.job.Step finalizingStep = parentStep.getStep(StepEnum.FINALIZING); if (finalizingStep != null) { finalizingStep.markStepEnded(exitStatus); org.ovirt.engine.core.bll.job.JobRepositoryFactory.getJobRepository().updateStep(finalizingStep); } parentStep.markStepEnded(exitStatus); org.ovirt.engine.core.bll.job.JobRepositoryFactory.getJobRepository().updateStep(parentStep); java.util.List<org.ovirt.engine.core.common.job.Step> steps = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStepDao().getStepsByJobId(parentStep.getJobId()); boolean hasChildStepsRunning = false; for (org.ovirt.engine.core.common.job.Step step : steps) { if (((step.getStatus()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.STARTED)) && ((step.getParentStepId()) != null)) { hasChildStepsRunning = true; break; } } if (!hasChildStepsRunning) { org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(exitStatus, org.ovirt.engine.core.bll.job.JobRepositoryFactory.getJobRepository().getJob(parentStep.getJobId())); } } } } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.job.ExecutionHandler.log.error("Exception", e); } }

public static boolean validHostname(java.lang.String s) { if ((s == null) || (s.trim().isEmpty())) { return false; } try { java.net.URI host = new java.net.URI(("http://" + s)); return s.equals(host.getHost()); } catch (java.net.URISyntaxException use) { return false; } }









private void generateEnumWriteOne(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getEnumName(type); java.lang.String tag = schemaNames.getSchemaTagName(type.getName()); javaBuffer.addImport(typeName); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.json.JsonWriter.class); javaBuffer.addLine("public static void writeOne(%1$s object, JsonWriter writer) {", typeName.getSimpleName()); javaBuffer.addLine(" writeOne(object, null, writer);"); javaBuffer.addLine("}"); javaBuffer.addLine(); javaBuffer.addLine("public static void writeOne(%1$s object, String name, JsonWriter writer) {", typeName.getSimpleName()); javaBuffer.addLine("if (name != null) {"); javaBuffer.addLine("writer.writeStartObject(name);"); javaBuffer.addLine("}"); javaBuffer.addLine("else {"); javaBuffer.addLine("writer.writeStartObject();"); javaBuffer.addLine("}"); javaBuffer.addLine("writer.writeString(\"%1$s\", object.value());", tag); javaBuffer.addLine("writer.writeEnd();"); javaBuffer.addLine("}"); javaBuffer.addLine(); }
private void generateEnumReadOne(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getEnumName(type); javaBuffer.addImport(typeName); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.json.JsonReader.class); javaBuffer.addImport(JsonParser.Event.class); javaBuffer.addLine("public static %1$s readOne(JsonReader reader) {", typeName.getSimpleName()); javaBuffer.addLine("return readOne(reader, false);"); javaBuffer.addLine("}"); javaBuffer.addLine(); javaBuffer.addLine("public static %1$s readOne(JsonReader reader, boolean started) {", typeName.getSimpleName()); javaBuffer.addLine("if (!started) {"); javaBuffer.addLine("reader.expect(Event.START_OBJECT);"); javaBuffer.addLine("}"); javaBuffer.addLine("return %1$s.fromValue(reader.readString());", typeName.getSimpleName()); javaBuffer.addLine("}"); javaBuffer.addLine(); }
org.ovirt.engine.core.bll.ValidationResult notRemovingLabeledNetworks(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { org.ovirt.engine.core.common.businessentities.network.Network removedNetwork = existingNetworkRelatedToAttachment(attachment); if (!(org.ovirt.engine.core.utils.NetworkUtils.isLabeled(removedNetwork))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } boolean networkAttachedToNicByAnotherAttachment = (networkAttachmentsByNetworkId.get(removedNetwork.getId())) != null; org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_LABELED_NETWORK_FROM_NIC; return org.ovirt.engine.core.bll.ValidationResult.failWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentStringWithMultipleValues(engineMessage, removedNetwork.getName())).when(((!networkAttachedToNicByAnotherAttachment) && (isNicToConfigureContainTheLabel(attachment.getNicName(), removedNetwork.getLabel())))); }
org.ovirt.engine.core.bll.ValidationResult notMovingLabeledNetworkToDifferentNic(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { org.ovirt.engine.core.common.businessentities.network.Network movedNetwork = existingNetworkRelatedToAttachment(attachment); if (!(org.ovirt.engine.core.utils.NetworkUtils.isLabeled(movedNetwork))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingAttachment = attachmentsById.get(attachment.getId()); boolean movedToDifferentNic = !(existingAttachment.getNicId().equals(attachment.getNicId())); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CANNOT_MOVE_LABELED_NETWORK_TO_ANOTHER_NIC; return org.ovirt.engine.core.bll.ValidationResult.failWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.VAR_NETWORK_NAME, movedNetwork.getName()), org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(engineMessage, movedNetwork.getLabel())).when((movedToDifferentNic && (isNicToConfigureContainTheLabel(existingAttachment.getNicName(), movedNetwork.getLabel())))); }
private org.ovirt.engine.core.bll.ValidationResult validRemovedNetworkAttachments() { java.util.List<org.ovirt.engine.core.compat.Guid> invalidIds = org.ovirt.engine.core.common.businessentities.Entities.idsNotReferencingExistingRecords(params.getRemovedNetworkAttachments(), existingAttachments); if (!(invalidIds.isEmpty())) { org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_ATTACHMENTS_NOT_EXISTS; return new org.ovirt.engine.core.bll.ValidationResult(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, invalidIds)); } org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID; java.util.Iterator<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> iterator = removedNetworkAttachments.iterator(); while ((iterator.hasNext()) && (vr.isValid())) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = iterator.next(); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachmentToValidate = attachmentsById.get(attachment.getId()); org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator validator = createNetworkAttachmentValidator(attachmentToValidate); vr = (skipValidation(vr)) ? vr : validator.networkAttachmentIsSet(); vr = (skipValidation(vr)) ? vr : validator.notExternalNetwork(); vr = (skipValidation(vr)) ? vr : validator.notRemovingManagementNetwork(); vr = (skipValidation(vr)) ? vr : notRemovingLabeledNetworks(attachment); vr = (skipValidation(vr)) ? vr : validateNotRemovingUsedNetworkByVms(); } return vr; }


@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.getParameters().getProfile().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.getProfileDao().save(org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.getParameters().getProfile()); org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.getParameters().getProfile().getId()); org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.setSucceeded(true); }



private void generateBaseContainerSource() { org.ovirt.api.metamodel.tool.JavaClassName containerName = javaTypes.getBaseContainerName(); javaBuffer.addLine("public class %1$s {", containerName.getSimpleName()); javaBuffer.addLine("}"); }
private void generateStructReadOne(org.ovirt.api.metamodel.concepts.StructType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getInterfaceName(type); org.ovirt.api.metamodel.tool.JavaClassName containerName = javaTypes.getContainerName(type); javaBuffer.addImport(typeName); javaBuffer.addImport(containerName); javaBuffer.addImport(JsonParser.Event.class); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.json.JsonReader.class); javaBuffer.addLine("public static %1$s readOne(JsonReader reader) {", typeName.getSimpleName()); javaBuffer.addLine("return readOne(reader, false);"); javaBuffer.addLine("}"); javaBuffer.addLine(); java.util.List<org.ovirt.api.metamodel.concepts.StructMember> members = new java.util.ArrayList<>(); members.addAll(type.getAttributes()); members.addAll(type.getLinks()); javaBuffer.addLine("public static %1$s readOne(JsonReader reader, boolean started) {", typeName.getSimpleName()); javaBuffer.addLine("if (!started) {"); javaBuffer.addLine("reader.expect(Event.START_OBJECT);"); javaBuffer.addLine("}"); javaBuffer.addLine("%1$s object = new %1$s();", containerName.getSimpleName()); javaBuffer.addLine("while (reader.next() == Event.KEY_NAME) {"); if (members.isEmpty()) { javaBuffer.addLine("reader.skip();"); } else { javaBuffer.addLine("String name = reader.getString();"); javaBuffer.addLine("switch (name) {"); members.stream().sorted().forEach(this::generateStructReadMember); javaBuffer.addLine("default:"); javaBuffer.addLine("reader.skip();"); javaBuffer.addLine("}"); } javaBuffer.addLine("}"); javaBuffer.addLine("return object;"); javaBuffer.addLine("}"); javaBuffer.addLine(); }
@java.lang.Override public boolean isLink(java.lang.Object object) { for (java.lang.reflect.Method m : object.getClass().getMethods()) { java.lang.System.out.println(m.getName()); if (m.getName().contains("href")) { return true; } } return false; }
@java.lang.Override public <TYPE> TYPE followLink(TYPE object) { if (!(isLink(object))) { throw new java.lang.RuntimeException("Can't follow link because object don't have any."); } try { java.lang.reflect.Method m = object.getClass().getMethod("href"); java.lang.String href = ((java.lang.String) (m.invoke(object))); if (href == null) { throw new java.lang.RuntimeException("Can't follow link because the 'href' attribute does't have a value"); } java.net.URL url = new java.net.URL(getUrl()); java.lang.String prefix = url.getPath(); if (!(prefix.endsWith("/"))) { prefix += "/"; } if (!(href.startsWith(prefix))) { throw new java.lang.RuntimeException((("The URL '" + href) + "' isn't compatible with the base URL of the connection")); } java.lang.String path = href.substring(prefix.length()); org.ovirt.engine.sdk.Service service = systemService().service(path); java.lang.Object getRequest = service.getClass().getMethod("get").invoke(service); java.lang.Object getReponse = getRequest.getClass().getMethod("send").invoke(getRequest); return ((TYPE) (getReponse.getClass().getDeclaredMethods()[0].invoke(getReponse))); } catch (java.lang.NoSuchMethodException ex) { throw new java.lang.RuntimeException(ex); } catch (java.lang.IllegalAccessException ex) { throw new java.lang.RuntimeException(ex); } catch (java.lang.reflect.InvocationTargetException ex) { throw new java.lang.RuntimeException(ex); } catch (java.net.MalformedURLException ex) { throw new java.lang.RuntimeException(ex); } }
boolean isLink(java.lang.Object object);
<TYPE> TYPE followLink(TYPE object);
@java.lang.Override public boolean getSpiceFullScreen() { return placeManager.isMainSectionBasicPlaceVisible(); }
static void handleIoTune(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskProfileStorageQosMap, java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<java.lang.String, java.lang.Long>> storageQosIoTuneMap) { if (org.ovirt.engine.core.common.FeatureSupported.storageQoS(vm.getCompatibilityVersion())) { java.util.Map<java.lang.String, java.lang.Long> ioTune = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.buildIoTune(diskImage, diskProfileStorageQosMap, storageQosIoTuneMap); if (ioTune != null) { if ((vmDevice.getSpecParams()) == null) { vmDevice.setSpecParams(new java.util.HashMap()); } vmDevice.getSpecParams().put(VdsProperties.Iotune, ioTune); } } }
@org.junit.Test public void testGetAllForCpuProfile() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> result = dao.getAllForCpuProfile(FixturesTool.CPU_PROFILE_1); assertNotNull(result); assertEquals(1, result.size()); }
java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllForCpuProfile(org.ovirt.engine.core.compat.Guid cpuProfileId);
java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllForDiskProfile(org.ovirt.engine.core.compat.Guid diskProfileId);
java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAllForDiskProfile(org.ovirt.engine.core.compat.Guid diskProfileId);
@org.junit.Test public void testGetAllDisksByDiskProfile() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = dao.getAllForDiskProfile(FixturesTool.DISK_PROFILE_1); assertNotNull(diskImages); assertEquals(6, diskImages.size()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllForDiskProfile(org.ovirt.engine.core.compat.Guid diskProfileId) { return getCallsHandler().executeReadList("GetAllVmsRelatedToDiskProfile", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("disk_profile_id", diskProfileId)); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllForCpuProfile(org.ovirt.engine.core.compat.Guid cpuProfileId) { return getCallsHandler().executeReadList("GetVmsByCpuProfileId", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("cpu_profile_id", cpuProfileId)); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAllForDiskProfile(org.ovirt.engine.core.compat.Guid diskProfileId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("disk_profile_id", diskProfileId); return getCallsHandler().executeReadList("GetAllForDiskProfile", org.ovirt.engine.core.dao.DiskImageDaoImpl.DiskImageRowMapper.instance, parameterSource); }
@org.junit.Test public void testGetAllForDiskProfile() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> result = dao.getAllForDiskProfile(FixturesTool.DISK_PROFILE_1); assertNotNull(result); assertEquals(2, result.size()); }
@java.lang.Override protected org.ovirt.engine.core.common.action.ProfileParametersBase<org.ovirt.engine.core.common.businessentities.profiles.CpuProfile> getParameters() { return new org.ovirt.engine.core.common.action.CpuProfileParameters(getProfile(), getProfile().getId()); }
@java.lang.Override protected void init() { org.ovirt.engine.core.common.businessentities.VM vmFromConfiguration = org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getVm(); if (vmFromConfiguration != null) { vmFromConfiguration.getStaticData().setVdsGroupId(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getVdsGroupId()); if (!(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget())) { setDisksToBeAttached(vmFromConfiguration); } org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().setContainerId(vmFromConfiguration.getId()); } else { initUnregisteredVM(); } setVdsGroupId(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getVdsGroupId()); org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().setStoragePoolId(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getVdsGroup().getStoragePoolId()); super.init(); }




protected java.util.Map<java.lang.String, java.lang.Object> build() { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put("vmId", org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.getParameters().getVmId().toString()); struct.put("vcpuLimit", java.lang.String.valueOf(org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.getParameters().getCpuLimit())); return struct; }
static void handleIoTune(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskProfileStorageQosMap, java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<java.lang.String, java.lang.Long>> storageQosIoTuneMap) { if (org.ovirt.engine.core.common.FeatureSupported.storageQoS(vm.getClusterCompatibilityVersion())) { java.util.Map<java.lang.String, java.lang.Long> ioTune = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.buildIoTune(diskImage, diskProfileStorageQosMap, storageQosIoTuneMap); if (ioTune != null) { if ((vmDevice.getSpecParams()) == null) { vmDevice.setSpecParams(new java.util.HashMap()); } vmDevice.getSpecParams().put(VdsProperties.Iotune, ioTune); } } }

@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.UpdateVmPolicy, new org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams(org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVmId(), org.ovirt.engine.core.bll.VmSlaPolicyCommand.getParameters().getCpuLimit())); setSucceeded(vdsReturnValue.getSucceeded()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllForCpuProfile(org.ovirt.engine.core.compat.Guid cpuProfileId) { return getCallsHandler().executeReadList("GetVmsByCpuProfileId", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("cpu_profile_id", cpuProfileId)); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllForDiskProfile(org.ovirt.engine.core.compat.Guid diskProfileId) { return getCallsHandler().executeReadList("GetAllVmsRelatedToDiskProfile", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("disk_profile_id", diskProfileId)); }


@java.lang.Override public org.ovirt.engine.core.common.businessentities.qos.CpuQos getCpuQosByVmId(org.ovirt.engine.core.compat.Guid vmId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_id", vmId); return getCallsHandler().executeRead("GetQosByVmId", createEntityRowMapper(), parameterSource); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAllForDiskProfile(org.ovirt.engine.core.compat.Guid diskProfileId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("disk_profile_id", diskProfileId); return getCallsHandler().executeReadList("GetAllForDiskProfile", org.ovirt.engine.core.dao.DiskImageDaoImpl.DiskImageRowMapper.instance, parameterSource); }









@java.lang.Override protected boolean isVmExist() { return (((org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getVmId()) == null) || (Guid.Empty.equals(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getVmId()))) || (super.isVmExist()); }
protected boolean isVmNotLocked() { return ((org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVm()) != null) && (validate(new org.ovirt.engine.core.bll.validator.VmValidator(org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVm()).vmNotLocked())); }
@org.junit.Test public void testVmOvfCreationDefaultGraphicsDevice() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.utils.ovf.OvfManagerTest.createVM(); vm.setDefaultDisplayType(DisplayType.cirrus); vm.setVmOs(org.ovirt.engine.core.utils.ovf.OvfManagerTest.DEFAULT_OS_ID); java.lang.String xml = manager.exportVm(vm, new java.util.ArrayList(), Version.v3_5); assertNotNull(xml); final org.ovirt.engine.core.common.businessentities.VM newVm = new org.ovirt.engine.core.common.businessentities.VM(); manager.importVm(xml, newVm, new java.util.ArrayList(), new java.util.ArrayList()); int graphicsDeviceCount = 0; for (org.ovirt.engine.core.common.businessentities.VmDevice device : newVm.getManagedVmDeviceMap().values()) { if ((device.getType()) == (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.GRAPHICS)) { graphicsDeviceCount++; assertEquals(device.getDevice(), VmDeviceType.VNC.getName()); } } assertEquals(graphicsDeviceCount, 1); }
public org.ovirt.engine.core.bll.ValidationResult isDiskAttachedToVm(org.ovirt.engine.core.compat.Guid vmId) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = getVmDao().getVmsListForDisk(disk.getId(), true); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_ATTACHED_TO_VM).when(vms.stream().noneMatch(( vm) -> vm.getId().equals(vmId))); }













@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean isTenantOrAuthUrlAware = isTypeTenantOrAuthUrlAware(); getTenantName().setIsAvailable(isTenantOrAuthUrlAware); getAuthUrl().setIsAvailable(isTenantOrAuthUrlAware); if (isTenantOrAuthUrlAware) { org.ovirt.engine.core.common.businessentities.TenantProviderProperties properties = ((org.ovirt.engine.core.common.businessentities.TenantProviderProperties) (provider.getAdditionalProperties())); getTenantName().setEntity((properties == null ? null : properties.getTenantName())); } boolean isNeutron = isTypeOpenStackNetwork(); getNeutronAgentModel().setIsAvailable(isNeutron); boolean isVmware = isTypeVmware(); boolean requiresAuth = isTypeRequiresAuthentication(); getRequiresAuthentication().setEntity((isVmware || (java.lang.Boolean.valueOf(requiresAuth)))); getRequiresAuthentication().setIsChangeable((!requiresAuth)); boolean isCinder = isTypeOpenStackVolume(); getDataCenter().setIsAvailable((isCinder || isVmware)); if (isCinder) { updateDatacentersForVolumeProvider(); } getVmwarePropertiesModel().setIsAvailable(isVmware); getRequiresAuthentication().setIsAvailable((!isVmware)); getUrl().setIsAvailable((!isVmware)); if (isVmware) { updateDatacentersForVmwareProvider(); } }

@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean isTenantAware = isTypeTenantAware(); boolean isAuthUrlAware = isTypeAuthUrlAware(); getTenantName().setIsAvailable(isTenantAware); getAuthUrl().setIsAvailable(isAuthUrlAware); if (isTenantAware) { org.ovirt.engine.core.common.businessentities.TenantProviderProperties properties = ((org.ovirt.engine.core.common.businessentities.TenantProviderProperties) (provider.getAdditionalProperties())); getTenantName().setEntity((properties == null ? null : properties.getTenantName())); } boolean isNeutron = isTypeOpenStackNetwork(); getNeutronAgentModel().setIsAvailable(isNeutron); boolean isVmware = isTypeVmware(); boolean requiresAuth = isTypeRequiresAuthentication(); getRequiresAuthentication().setEntity((isVmware || (java.lang.Boolean.valueOf(requiresAuth)))); getRequiresAuthentication().setIsChangeable((!requiresAuth)); boolean isCinder = isTypeOpenStackVolume(); getDataCenter().setIsAvailable((isCinder || isVmware)); if (isCinder) { updateDatacentersForVolumeProvider(); } getVmwarePropertiesModel().setIsAvailable(isVmware); getRequiresAuthentication().setIsAvailable((!isVmware)); getUrl().setIsAvailable((!isVmware)); if (isVmware) { updateDatacentersForVmwareProvider(); } }





















private void initIpConfigurationBootProtocolGateway(org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol networkBootProtocol, boolean syncNetmask) { initIpConfigurationStaticBootProtocol(networkBootProtocol); when(mockedIPv4Address.getGateway()).thenReturn(org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.GATEWAY); iface.setGateway((syncNetmask ? org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.GATEWAY : null)); }
private org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters createBeforeSyncNetParams(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters params = new org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters(); params.setBootProtocol(nic.getBootProtocol()); params.setAddress(nic.getAddress()); params.setSubnet(nic.getSubnet()); params.setGateway(nic.getGateway()); params.setQos(nic.getQos()); params.setQosOverridden(attachment.isQosOverridden()); params.setCustomProperties(attachment.getProperties()); return params; }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { if (!(networkDialogModel.validate())) { return; } nic.setBootProtocol(networkDialogModel.getBootProtocol()); if (networkDialogModel.getIsStaticAddress()) { nic.setAddress(networkDialogModel.getAddress().getEntity()); nic.setSubnet(networkDialogModel.getSubnet().getEntity()); nic.setGateway(networkDialogModel.getGateway().getEntity()); } org.ovirt.engine.core.common.businessentities.network.HostNetworkQos displayedQos = getDisplayedQos(); if (displayedQos != null) { nic.setQos(displayedQos); } if (networkDialogModel.getIsToSync().getEntity()) { networksToSync.add(logicalNetworkModelName); } else { networksToSync.remove(logicalNetworkModelName); } boolean customPropertiesAvailable = networkDialogModel.getCustomPropertiesModel().getIsAvailable(); java.util.Map<java.lang.String, java.lang.String> customProperties = (customPropertiesAvailable) ? org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueModel.convertProperties(networkDialogModel.getCustomPropertiesModel().serialize()) : null; removePreviousNetworkAttachmentInstanceFromRequestAndAddNewOne(logicalNetworkModel, getOverridingHostNetworkQos(displayedQos), customProperties); sourceListModel.setConfirmWindow(null); }
private void addReportedIpConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { if (!(isPrimaryAddressExist())) { return; } org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol definedBootProtocol = getPrimaryAddress().getBootProtocol(); result.add(ReportedConfigurationType.BOOT_PROTOCOL, iface.getBootProtocol(), definedBootProtocol); if ((definedBootProtocol == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)) && ((iface.getBootProtocol()) == definedBootProtocol)) { result.add(ReportedConfigurationType.NETMASK, iface.getSubnet(), getPrimaryAddress().getNetmask(), isNetworkSubnetInSync()); result.add(ReportedConfigurationType.IP_ADDRESS, iface.getAddress(), getPrimaryAddress().getAddress()); result.add(ReportedConfigurationType.GATEWAY, iface.getGateway(), getPrimaryAddress().getGateway()); } }
public boolean isHostExists(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo> glusterServers, org.ovirt.engine.core.common.businessentities.VDS server) { if (org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterHostUuidSupported(server.getVdsGroupCompatibilityVersion())) { org.ovirt.engine.core.common.businessentities.gluster.GlusterServer glusterServer = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getGlusterServerDao().getByServerId(server.getId()); if (glusterServer != null) { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo glusterServerInfo : glusterServers) { if (glusterServerInfo.getUuid().equals(glusterServer.getGlusterServerUuid())) { return true; } } } } else { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo glusterServer : glusterServers) { if (glusterServer.getHostnameOrIp().equals(server.getHostName())) { return true; } try { java.lang.String glusterHostAddr = java.net.InetAddress.getByName(glusterServer.getHostnameOrIp()).getHostAddress(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNwInterface : getVdsInterfaces(server.getId())) { if (glusterHostAddr.equals(vdsNwInterface.getAddress())) { return true; } } } catch (java.net.UnknownHostException e) { log.error("Could not resolve IP address of the host '{}': {}", glusterServer.getHostnameOrIp(), e.getMessage()); } } } return false; }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity = createInterface(rs); entity.setStatistics(org.ovirt.engine.core.dao.network.InterfaceDaoImpl.HostNetworkStatisticsRowMapper.INSTANCE.mapRow(rs, rowNum)); entity.setType(((java.lang.Integer) (rs.getObject("type")))); entity.setIpv4Gateway(rs.getString("gateway")); entity.setIpv4Subnet(rs.getString("subnet")); entity.setIpv4Address(rs.getString("addr")); entity.setNetworkName(rs.getString("network_name")); entity.setName(rs.getString("name")); entity.setVdsId(getGuid(rs, "vds_id")); entity.setVdsName(rs.getString("vds_name")); entity.setId(getGuidDefaultEmpty(rs, "id")); entity.setIpv4BootProtocol(org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.forValue(rs.getInt("boot_protocol"))); entity.setMtu(rs.getInt("mtu")); entity.setBridged(rs.getBoolean("bridged")); entity.setQos(hostNetworkQosDao.get(entity.getId())); entity.setLabels(org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserialize(rs.getString("labels"), java.util.HashSet.class)); return entity; }
public void resolve() { if ((entry) == null) { return; } org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol bootproto = org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.NONE; if (bootProtocolDhcp()) { bootproto = org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.DHCP; } else if (org.apache.commons.lang.StringUtils.isNotEmpty(fetchIpAddress())) { bootproto = org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP; } if (bootproto == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)) { java.lang.String gateway = fetchGateway(); if (org.apache.commons.lang.StringUtils.isNotEmpty(gateway)) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGatewayIfNecessary(iface, host, gateway); } } iface.setIpv4BootProtocol(bootproto); }



public static void setGatewayIfNecessary(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.VDS host, java.lang.String gateway) { final org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtil managementNetworkUtil = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getManagementNetworkUtil(); if (((org.ovirt.engine.core.common.FeatureSupported.multipleGatewaysSupported(host.getClusterCompatibilityVersion())) || (managementNetworkUtil.isManagementNetwork(iface.getNetworkName(), host.getClusterId()))) || (iface.getName().equals(host.getActiveNic()))) { iface.setIpv4Gateway(gateway); } }




protected void addBootProtocolForRoleNetworkAttachment(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { if (org.ovirt.engine.core.utils.NetworkUtils.isRoleNetwork(getNetworkCluster(nic, network))) { if (((attachment.getIpConfiguration()) != null) && (attachment.getIpConfiguration().hasPrimaryAddressSet())) { org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = attachment.getIpConfiguration().getPrimaryAddress(); if (((primaryAddress.getBootProtocol()) == null) || ((primaryAddress.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.NONE))) { primaryAddress.setBootProtocol(NetworkBootProtocol.DHCP); } } else { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration; if ((attachment.getIpConfiguration()) == null) { ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); } else { ipConfiguration = attachment.getIpConfiguration(); } org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); primaryAddress.setBootProtocol(NetworkBootProtocol.DHCP); ipConfiguration.setIPv4Addresses(java.util.Collections.singletonList(primaryAddress)); attachment.setIpConfiguration(ipConfiguration); } } }
private void addBootProtocol(java.util.Map<java.lang.String, java.lang.Object> opts, org.ovirt.engine.core.common.vdscommands.HostNetwork attachment) { switch (attachment.getBootProtocol()) { case DHCP : opts.put(org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.BOOT_PROTOCOL, org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.DHCP_BOOT_PROTOCOL); break; case STATIC_IP : org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.putIfNotEmpty(opts, "ipaddr", attachment.getAddress()); putPrefixOrNetmaskIfNotEmpty(opts, attachment.getNetmask()); org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.putIfNotEmpty(opts, "gateway", attachment.getGateway()); break; default : break; } }


private void assertIpConfiguration(org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration) { org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = ipConfiguration.getPrimaryAddress(); assertThat(primaryAddress.getBootProtocol(), is(interfaceWithAttachedClusterNetworkA.getIpv4BootProtocol())); assertThat(primaryAddress.getAddress(), is(interfaceWithAttachedClusterNetworkA.getIpv4Address())); assertThat(primaryAddress.getNetmask(), is(interfaceWithAttachedClusterNetworkA.getIpv4Subnet())); assertThat(primaryAddress.getGateway(), is(interfaceWithAttachedClusterNetworkA.getIpv4Gateway())); }

@org.junit.Test public void testIsNetworkInSyncWhenIpConfigurationIsEmpty() throws java.lang.Exception { when(mockedIpConfiguration.hasPrimaryAddressSet()).thenReturn(false); assertThat(createTestedInstance().isNetworkInSync(), is(true)); }
private void assertIpConfiguration(org.ovirt.engine.core.common.businessentities.network.IpConfiguration persistedIpConfiguration, org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration) { org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = persistedIpConfiguration.getPrimaryAddress(); assertThat(primaryAddress.getBootProtocol(), is(ipConfiguration.getPrimaryAddress().getBootProtocol())); assertThat(primaryAddress.getAddress(), is(ipConfiguration.getPrimaryAddress().getAddress())); assertThat(primaryAddress.getNetmask(), is(ipConfiguration.getPrimaryAddress().getNetmask())); assertThat(primaryAddress.getGateway(), is(ipConfiguration.getPrimaryAddress().getGateway())); }
private void initIpConfiguration() { when(mockedIpConfiguration.hasPrimaryAddressSet()).thenReturn(true); when(mockedIpConfiguration.getPrimaryAddress()).thenReturn(mockedIPv4Address); }
private boolean primaryAddressNotSet() { return (!(hasIpConfiguration())) || (!(getIpConfiguration().hasPrimaryAddressSet())); }
public org.ovirt.engine.core.bll.ValidationResult bootProtocolSetForRoleNetwork() { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration(); boolean failWhen = (isRoleNetwork()) && (((ipConfiguration == null) || (!(ipConfiguration.hasPrimaryAddressSet()))) || ((ipConfiguration.getPrimaryAddress().getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.NONE))); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL_ENTITY, getNetwork().getName())).when(failWhen); }

@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("defaultRoute", isDefaultRoute()).append("bonding", isBonding()).append("networkName", getNetworkName()).append("nicName", getNicName()).append("vlan", getVlan()).append("mtu", getMtu()).append("vmNetwork", isVmNetwork()).append("stp", isStp()).append("properties", getProperties()).append("bootProtocol", getBootProtocol()).append("address", getAddress()).append("netmask", getNetmask()).append("gateway", getGateway()).build(); }

public org.ovirt.engine.core.bll.ValidationResult validateGateway() { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration(); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.NETWORK_ATTACH_ILLEGAL_GATEWAY).when((((((ipConfiguration != null) && (ipConfiguration.hasPrimaryAddressSet())) && (org.apache.commons.lang.StringUtils.isNotEmpty(ipConfiguration.getPrimaryAddress().getGateway()))) && (!(managementNetworkUtil.isManagementNetwork(getNetwork().getId(), host.getClusterId())))) && (!(org.ovirt.engine.core.common.FeatureSupported.multipleGatewaysSupported(host.getClusterCompatibilityVersion()))))); }
public org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol getBootProtocol() { return (hasIpConfiguration()) && (getIpConfiguration().hasPrimaryAddressSet()) ? getIpConfiguration().getPrimaryAddress().getBootProtocol() : null; }

public org.ovirt.engine.core.common.businessentities.network.IPv4Address getPrimaryAddress() { if (!(hasPrimaryAddressSet())) { throw new java.lang.IllegalStateException("IpConfiguration does not have IPv4 address set."); } return getIPv4Addresses().get(0); }

public boolean hasPrimaryAddressSet() { return (((iPv4Addresses) != null) && (!(iPv4Addresses.isEmpty()))) && ((iPv4Addresses.get(0)) != null); }
private void mapIpConfiguration(org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper, org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration) { boolean hasPrimaryAddressSet = ipConfiguration.hasPrimaryAddressSet(); org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = (hasPrimaryAddressSet) ? ipConfiguration.getPrimaryAddress() : null; mapper.addValue("boot_protocol", (hasPrimaryAddressSet ? org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(primaryAddress.getBootProtocol()) : null)).addValue("address", (hasPrimaryAddressSet ? primaryAddress.getAddress() : null)).addValue("netmask", (hasPrimaryAddressSet ? primaryAddress.getNetmask() : null)).addValue("gateway", (hasPrimaryAddressSet ? primaryAddress.getGateway() : null)); }
private boolean defaultRouteRequired(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration) { return (((managementNetworkUtil.isManagementNetwork(network.getId(), org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterId())) && (ipConfiguration != null)) && (ipConfiguration.hasPrimaryAddressSet())) && (((ipConfiguration.getPrimaryAddress().getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.DHCP)) || (((ipConfiguration.getPrimaryAddress().getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)) && (org.apache.commons.lang.StringUtils.isNotEmpty(ipConfiguration.getPrimaryAddress().getGateway())))); }
private boolean isPrimaryAddressExist() { return ((networkDataCenterIpConfigurationDefinition) != null) && (networkDataCenterIpConfigurationDefinition.hasPrimaryAddressSet()); }
public org.ovirt.engine.core.bll.ValidationResult networkIpAddressWasSameAsHostnameAndChanged(org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingInterfaces) { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration(); if (((ipConfiguration != null) && (ipConfiguration.hasPrimaryAddressSet())) && ((ipConfiguration.getPrimaryAddress().getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP))) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingIface = existingInterfaces.get(attachment.getNicName()); if (existingIface != null) { java.lang.String oldAddress = existingIface.getIpv4Address(); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_NETWORK_ADDRESS_CANNOT_BE_CHANGED, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_ACTION_TYPE_FAILED_NETWORK_ADDRESS_CANNOT_BE_CHANGED_LIST, getNetwork().getName())).when(((org.apache.commons.lang.StringUtils.equals(oldAddress, host.getHostName())) && (!(org.apache.commons.lang.StringUtils.equals(oldAddress, ipConfiguration.getPrimaryAddress().getAddress()))))); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public static org.ovirt.engine.core.common.businessentities.network.IpConfiguration createIpConfigurationFromVdsNetworkInterface(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { if (nic == null) { return org.ovirt.engine.core.utils.NetworkUtils.createDefaultIpConfiguration(); } org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); if ((nic.getIpv4BootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)) { iPv4Address.setAddress(nic.getIpv4Address()); iPv4Address.setNetmask(nic.getIpv4Subnet()); iPv4Address.setGateway(nic.getIpv4Gateway()); } iPv4Address.setBootProtocol(nic.getIpv4BootProtocol()); org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); ipConfiguration.setIPv4Addresses(java.util.Collections.singletonList(iPv4Address)); return ipConfiguration; }

public org.ovirt.engine.core.common.action.HostSetupNetworksParameters createSetupNetworkParams(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { org.ovirt.engine.core.common.action.HostSetupNetworksParameters parameters = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(host.getId()); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment managementAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); managementAttachment.setNetworkId(managementNetwork.getId()); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicNameToNic = org.ovirt.engine.core.common.businessentities.Entities.entitiesByName(host.getInterfaces()); org.ovirt.engine.core.compat.Guid baseNicId = nicNameToNic.get(org.ovirt.engine.core.utils.NetworkUtils.stripVlan(nic)).getId(); managementAttachment.setNicId(baseNicId); org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); ipConfiguration.getIPv4Addresses().add(createIPv4Address(nic)); managementAttachment.setIpConfiguration(ipConfiguration); parameters.getNetworkAttachments().add(managementAttachment); return parameters; }
private static java.lang.String findActiveBridge(java.lang.String ipAddress, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> bridges) { java.lang.String activeBridge = null; if (bridges != null) { for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> entry : bridges.entrySet()) { java.util.Map<java.lang.String, java.lang.Object> bridgeProperties = entry.getValue(); java.lang.String bridgeName = entry.getKey(); if (bridgeProperties != null) { java.lang.String bridgeAddress = ((java.lang.String) (bridgeProperties.get("addr"))); if ((bridgeAddress != null) && (bridgeAddress.equals(ipAddress))) { activeBridge = bridgeName; } } } } return activeBridge; }
private java.lang.String resolveHostManagementNetworkAddress(java.lang.String managementNetworkName) { if (managementNetworkName == null) { return null; } return host.getInterfaces().stream().filter(new org.ovirt.engine.core.utils.network.predicate.InterfaceByNetworkNamePredicate(managementNetworkName)).map(VdsNetworkInterface::getIpv4Address).findFirst().orElse(null); }
protected java.lang.String ip() { return "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"; }


@java.lang.SuppressWarnings("rawtypes") @java.lang.Override public java.util.concurrent.Future<java.util.Map<java.lang.String, java.lang.Object>> setupNetworks(java.util.Map networks, java.util.Map bonding, java.util.Map options, final boolean isPolicyReset) { final org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.setupNetworks").withParameter("networks", networks).withParameter("bondings", bonding).withParameter("options", options).build(); final org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.FutureCallable callable = new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.FutureCallable(() -> { if (isPolicyReset) { updateHeartbeatPolicy(client.getClientRetryPolicy().clone(), false); } return new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withResponseKey("status"); }); java.util.concurrent.FutureTask<java.util.Map<java.lang.String, java.lang.Object>> future = new java.util.concurrent.FutureTask<java.util.Map<java.lang.String, java.lang.Object>>(callable) { @java.lang.Override public boolean isDone() { if (callable.isDone()) { if (isPolicyReset) { updateHeartbeatPolicy(client.getClientRetryPolicy(), true); } return true; } return false; } }; org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(future); return future; }

private void updateActionAvailability() { getRemoveCommand().setIsExecutionAllowed((((getSelectedItems()) != null) && ((getSelectedItems().size()) > 0))); }



@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.NetworkValidator validator = new org.ovirt.engine.core.bll.validator.NetworkValidator(vmDao, org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getNetworkDao().get(getNetwork().getId())); return ((((validate(validator.networkIsSet(org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getParameters().getId()))) && (validate(validator.notRemovingManagementNetwork()))) && (validate(validator.notIscsiBondNetwork()))) && (validate(validator.networkNotUsedByVms()))) && (validate(validator.networkNotUsedByTemplates())); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { java.util.List<org.ovirt.engine.core.common.businessentities.Provider> providers = ((java.util.List<org.ovirt.engine.core.common.businessentities.Provider>) (result)); getExternalProviders().setItems(providers); selectExternalProvider(); }
private void initExternalProviderList() { org.ovirt.engine.ui.frontend.AsyncQuery getProvidersQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { java.util.List<org.ovirt.engine.core.common.businessentities.Provider> providers = ((java.util.List<org.ovirt.engine.core.common.businessentities.Provider>) (result)); getExternalProviders().setItems(providers); selectExternalProvider(); } }); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getAllNetworkProviders(getProvidersQuery); }







@java.lang.Override public java.util.Map<java.lang.String, java.lang.Object> call() throws java.lang.Exception { if (isPolicyReset) { updateHeartbeatPolicy(client.getClientRetryPolicy().clone(), false); } return new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withResponseKey("status"); }
private static org.ovirt.engine.core.common.businessentities.network.IPv4Address mapIpAddressAssignment(org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment) { org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); if (ipAddressAssignment.isSetAssignmentMethod()) { org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(org.ovirt.engine.api.model.BootProtocol.fromValue(ipAddressAssignment.getAssignmentMethod()), null); iPv4Address.setBootProtocol(assignmentMethod); } if (ipAddressAssignment.isSetIp()) { if (ipAddressAssignment.getIp().isSetAddress()) { iPv4Address.setAddress(ipAddressAssignment.getIp().getAddress()); } if (ipAddressAssignment.getIp().isSetGateway()) { iPv4Address.setGateway(ipAddressAssignment.getIp().getGateway()); } if (ipAddressAssignment.getIp().isSetNetmask()) { iPv4Address.setNetmask(ipAddressAssignment.getIp().getNetmask()); } } return iPv4Address; }


private static org.ovirt.engine.api.model.IpAddressAssignment mapIpAddressAssignment(org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address) { org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment = new org.ovirt.engine.api.model.IpAddressAssignment(); org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); if ((iPv4Address.getAddress()) != null) { ip.setAddress(iPv4Address.getAddress()); } if ((iPv4Address.getGateway()) != null) { ip.setGateway(iPv4Address.getGateway()); } if ((iPv4Address.getNetmask()) != null) { ip.setNetmask(iPv4Address.getNetmask()); } ipAddressAssignment.setIp(ip); org.ovirt.engine.api.model.BootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(iPv4Address.getBootProtocol(), null); ipAddressAssignment.setAssignmentMethod((assignmentMethod == null ? null : assignmentMethod.value())); return ipAddressAssignment; }

private static void addBootProtocol(java.util.Map<java.lang.String, java.lang.Object> entry, org.ovirt.engine.core.common.businessentities.VDS host, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface) { org.ovirt.engine.core.vdsbroker.vdsbroker.BootProtocolResolver resolver = (org.ovirt.engine.core.common.FeatureSupported.cfgEntriesDeprecated(host.getClusterCompatibilityVersion())) ? new org.ovirt.engine.core.vdsbroker.vdsbroker.NoCfgBootProtocolResolver(entry, iface) : new org.ovirt.engine.core.vdsbroker.vdsbroker.CfgBootProtocolResolver(entry, iface); resolver.resolve(); }
private static org.ovirt.engine.core.common.businessentities.VmStatic doMapVmBaseHwPartToVmStatic(org.ovirt.engine.core.common.businessentities.VmBase entity, org.ovirt.engine.core.common.businessentities.VmStatic staticVm, org.ovirt.engine.core.compat.Version version) { org.ovirt.engine.core.compat.Version clusterVersion = (version == null) ? org.ovirt.engine.core.compat.Version.getLast() : version; staticVm.setMemSizeMb(entity.getMemSizeMb()); staticVm.setAutoStartup(entity.isAutoStartup()); staticVm.setSmartcardEnabled(entity.isSmartcardEnabled()); staticVm.setDefaultBootSequence(entity.getDefaultBootSequence()); staticVm.setDefaultDisplayType(entity.getDefaultDisplayType()); staticVm.setNumOfSockets(entity.getNumOfSockets()); staticVm.setCpuPerSocket(entity.getCpuPerSocket()); staticVm.setThreadsPerCpu(entity.getThreadsPerCpu()); staticVm.setNumOfMonitors(entity.getNumOfMonitors()); staticVm.setSingleQxlPci(entity.getSingleQxlPci()); staticVm.setPriority(entity.getPriority()); staticVm.setUsbPolicy(entity.getUsbPolicy()); staticVm.setTunnelMigration(entity.getTunnelMigration()); staticVm.setMigrationSupport(entity.getMigrationSupport()); staticVm.setMigrationDowntime(entity.getMigrationDowntime()); staticVm.setMinAllocatedMem(entity.getMinAllocatedMem()); if (org.ovirt.engine.core.common.FeatureSupported.isIoThreadsSupported(clusterVersion)) { staticVm.setNumOfIoThreads(entity.getNumOfIoThreads()); } return staticVm; }
private void issueTokenForLoginOnBehalf(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, java.lang.String scope) throws java.lang.Exception { org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug("Entered issueTokenForLoginOnBehalf"); java.lang.String[] clientIdAndSecret = org.ovirt.engine.core.sso.utils.SSOUtils.getClientIdClientSecret(request); java.lang.String username = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, "username", null); org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug("Attempting to issueTokenForLoginOnBehalf for client: {}, user: {}", clientIdAndSecret[0], username); org.ovirt.engine.core.sso.utils.AuthenticationUtils.loginOnBehalf(ssoContext, request, username); java.lang.String token = ((java.lang.String) (request.getAttribute(SSOConstants.HTTP_REQ_ATTR_ACCESS_TOKEN))); org.ovirt.engine.core.sso.utils.SSOUtils.validateRequestScope(request, token, scope); org.ovirt.engine.core.sso.utils.SSOSession ssoSession = org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession(request, token, true); if (ssoSession == null) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SSOConstants.ERR_CODE_INVALID_GRANT, "The provided authorization grant for the username and password has expired"); } org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug("Sending json response"); org.ovirt.engine.core.sso.utils.SSOUtils.sendJsonData(response, buildResponse(ssoSession)); }

public static final java.lang.String mapMessageErrorCode(javax.servlet.http.HttpServletRequest request, java.lang.String profile, org.ovirt.engine.api.extensions.ExtMap outputMap) { int authResult = outputMap.<java.lang.Integer>get(Authn.InvokeKeys.RESULT); java.lang.String msg = (org.ovirt.engine.core.sso.utils.AuthnMessageMapper.messagesMap.containsKey(authResult)) ? org.ovirt.engine.core.sso.utils.AuthnMessageMapper.messagesMap.get(authResult) : org.ovirt.engine.core.sso.utils.AuthnMessageMapper.USER_FAILED_TO_AUTHENTICATE; if (authResult == (Authn.AuthResult.CREDENTIALS_EXPIRED)) { if (((outputMap.<java.lang.String>get(Authn.InvokeKeys.CREDENTIALS_CHANGE_URL)) != null) || (org.ovirt.engine.core.sso.utils.SSOUtils.getSsoContext(request).getSsoProfilesSupportingPasswdChange().contains(profile))) { msg = java.lang.String.format(org.ovirt.engine.core.sso.utils.AuthnMessageMapper.USER_PASSWORD_EXPIRED_CHANGE_URL_PROVIDED, ((request.getContextPath()) + (SSOConstants.INTERACTIVE_CHANGE_PASSWD_FORM_URI))); } else { msg = org.ovirt.engine.core.sso.utils.AuthnMessageMapper.USER_PASSWORD_EXPIRED; } } return msg; }
public static void handleCredentials(org.ovirt.engine.core.sso.utils.SSOContext ssoContext, javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials credentials) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug("Entered AuthenticationUtils.handleCredentials"); if ((org.apache.commons.lang.StringUtils.isEmpty(credentials.getUsername())) || (org.apache.commons.lang.StringUtils.isEmpty(credentials.getProfile()))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException("Please provide username, password and profile."); } org.ovirt.engine.core.sso.utils.SSOSession ssoSession = org.ovirt.engine.core.sso.utils.AuthenticationUtils.login(ssoContext, request, credentials, null); org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.info("User {}@{} successfully logged in with scopes: {}", credentials.getUsername(), credentials.getProfile(), ssoSession.getScope()); }
private java.lang.String changeUserPasswd(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials userCredentials) throws org.ovirt.engine.core.sso.utils.AuthenticationException { org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.log.debug("Calling Authn to change password for user '{}@{}'.", userCredentials.getUsername(), userCredentials.getProfile()); org.ovirt.engine.core.sso.utils.AuthenticationUtils.changePassword(ssoContext, request, userCredentials); org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession(request).setChangePasswdCredentials(null); if (org.ovirt.engine.core.sso.utils.SSOUtils.isUserAuthenticated(request)) { org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.log.debug("User is authenticated updating password in SSOSession for password-access scope."); org.ovirt.engine.core.sso.utils.SSOUtils.persistUserPassword(request, org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession(request), userCredentials.getNewCredentials()); } else { org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.log.debug("User password change succeeded, redirecting to login page."); org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession(request).setLoginMessage("Change password succeeded, enter new credentials to login."); } return (request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SSOConstants.INTERACTIVE_LOGIN_URI); }
private org.ovirt.engine.core.sso.utils.Credentials getUserCredentials(javax.servlet.http.HttpServletRequest request) throws org.ovirt.engine.core.sso.utils.AuthenticationException { try { java.lang.String username = org.ovirt.engine.core.sso.utils.SSOUtils.getParameter(request, org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.USERNAME); java.lang.String credentials = org.ovirt.engine.core.sso.utils.SSOUtils.getParameter(request, org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.CREDENTIALS); java.lang.String credentialsNew1 = org.ovirt.engine.core.sso.utils.SSOUtils.getParameter(request, org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.CREDENTIALS_NEW1); java.lang.String credentialsNew2 = org.ovirt.engine.core.sso.utils.SSOUtils.getParameter(request, org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.CREDENTIALS_NEW2); java.lang.String profile = org.ovirt.engine.core.sso.utils.SSOUtils.getParameter(request, org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.PROFILE); return ((((org.apache.commons.lang.StringUtils.isNotEmpty(username)) && (org.apache.commons.lang.StringUtils.isNotEmpty(credentials))) && (org.apache.commons.lang.StringUtils.isNotEmpty(credentialsNew1))) && (org.apache.commons.lang.StringUtils.isNotEmpty(credentialsNew2))) && (org.apache.commons.lang.StringUtils.isNotEmpty(profile)) ? new org.ovirt.engine.core.sso.utils.Credentials(username, credentials, credentialsNew1, credentialsNew2, profile) : null; } catch (java.lang.Exception ex) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException("Unable to extract user credentials from request", ex); } }


@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { try { org.ovirt.engine.core.sso.servlets.OAuthAuthorizeServlet.log.debug("Entered AuthorizeServlet QueryString: {}, Parameters : {}", request.getQueryString(), org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameters(request)); java.lang.String clientId = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, SSOConstants.HTTP_PARAM_CLIENT_ID); java.lang.String responseType = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, SSOConstants.JSON_RESPONSE_TYPE); java.lang.String scope = org.ovirt.engine.core.sso.utils.SSOUtils.getScopeRequestParameter(request, ""); java.lang.String state = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, SSOConstants.HTTP_PARAM_STATE, ""); java.lang.String redirectUri = org.ovirt.engine.core.sso.utils.SSOUtils.getParameter(request, SSOConstants.HTTP_PARAM_REDIRECT_URI); org.ovirt.engine.core.sso.utils.SSOUtils.validateClientRequest(request, clientId, null, scope, redirectUri); if (!(responseType.equals("code"))) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SSOConstants.ERR_CODE_INVALID_REQUEST, java.lang.String.format("The request contains unsupported parameter value '%s' for parameter '%s'.", responseType, SSOConstants.JSON_RESPONSE_TYPE)); } login(request, response, clientId, scope, state, redirectUri); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.SSOUtils.redirectToErrorPage(request, response, ex); } }
private java.lang.String authenticateUser(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, org.ovirt.engine.core.sso.utils.Credentials userCredentials) throws java.io.IOException, javax.servlet.ServletException, org.ovirt.engine.core.sso.utils.AuthenticationException { if ((userCredentials == null) || (!(userCredentials.isValid()))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException("Invalid credentials"); } try { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Authenticating user using credentials"); response.addCookie(new javax.servlet.http.Cookie("profile", userCredentials.getProfile())); org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(ssoContext, request, userCredentials); return (request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SSOConstants.INTERACTIVE_REDIRECT_TO_MODULE_URI); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { throw ex; } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.error("Internal Server Error: {}", ex.getMessage()); org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex); } }
private void validateQueryType(javax.servlet.http.HttpServletRequest request) throws java.lang.Exception { java.lang.String queryType = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, SSOConstants.HTTP_PARAM_SEARCH_QUERY_TYPE); if ((!(directoryQueries.containsKey(queryType))) && (!(directoryPublicQueries.containsKey(queryType)))) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SSOConstants.ERR_CODE_INVALID_REQUEST, java.lang.String.format("The request contains unsupported parameter value '%s' for parameter '%s'.", queryType, SSOConstants.HTTP_PARAM_SEARCH_QUERY_TYPE)); } }
@java.lang.Override public void initialize() { try (org.ovirt.engine.core.utils.lock.AutoCloseableLock l = new org.ovirt.engine.core.utils.lock.AutoCloseableLock(lockObj.writeLock())) { if (initialized) { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerRanges.log.error("Trying to initialize {} multiple times.", getClass().getName()); return; } org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerRanges.log.info("Start initializing {}", getClass().getSimpleName()); this.macsStorage = createMacsStorage(rangesBoundaries); initialized = true; org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerRanges.log.info("Finished initializing. Available MACs in pool: {}", macsStorage.getAvailableMacsCount()); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerRanges.log.error("Error in initializing MAC Addresses pool manager: {}", ex.getMessage()); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerRanges.log.debug("Exception", ex); } }
public void addVLans(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { boolean hasVlan = (lineModel.getVlanSize()) != 0; for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostVLan hostVLan : lineModel.getVLans()) { add(new org.ovirt.engine.ui.webadmin.widget.host.VLanElementPanel(hostVLan, isSelectionAvailable)); } if (((!hasVlan) || (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(lineModel.getNetworkName())))) || (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(lineModel.getAddress())))) { add(new org.ovirt.engine.ui.webadmin.widget.host.VLanElementPanel(lineModel)); } }
com.google.gwt.user.client.ui.Grid createRow(final org.ovirt.engine.ui.uicommonweb.models.hosts.HostVLan hostVLan) { com.google.gwt.user.client.ui.HorizontalPanel checkboxPanel = new com.google.gwt.user.client.ui.HorizontalPanel(); checkboxPanel.setWidth("100%"); if (isSelectionAvailable) { checkboxPanel.add(getCheckBox()); } checkboxPanel.add(new com.google.gwt.user.client.ui.Image(org.ovirt.engine.ui.webadmin.widget.host.VLanElementPanel.resources.splitRotateImage())); checkboxPanel.add(new com.google.gwt.user.client.ui.Label(new org.ovirt.engine.ui.webadmin.widget.renderer.HostVLanNameRenderer().render(hostVLan))); com.google.gwt.user.client.ui.Grid row = createBaseVlanRow(checkboxPanel, hostVLan.getInterface().getIsManagement(), hostVLan.getNetworkName(), hostVLan.getInterface().getNetworkImplementationDetails(), hostVLan.getAddress()); return row; }
@org.junit.Test public void testUpdate() { networkAttachment.setNicId(FixturesTool.NETWORK_ATTACHMENT_NIC); dao.save(networkAttachment); org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = networkAttachment.getIpConfiguration(); org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); primaryAddress.setBootProtocol(NetworkBootProtocol.STATIC_IP); primaryAddress.setAddress("192.168.1.2"); primaryAddress.setGateway("192.168.1.1"); primaryAddress.setNetmask("255.255.255.0"); ipConfiguration.setIPv4Addresses(java.util.Collections.singletonList(primaryAddress)); networkAttachment.setIpConfiguration(ipConfiguration); java.util.Map<java.lang.String, java.lang.String> properties = new java.util.HashMap<>(); properties.put("key", "value"); networkAttachment.setProperties(properties); networkAttachment.setNicId(FixturesTool.NETWORK_ATTACHMENT_NIC2); dao.update(networkAttachment); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment result = dao.get(networkAttachment.getId()); assertNotNull(result); assertNetworkAttachmentEquals(networkAttachment, result); }
public org.ovirt.engine.core.common.businessentities.network.IPv4Address createPrimaryAddress() { org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); iPv4Address.setBootProtocol(NetworkBootProtocol.DHCP); return iPv4Address; }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); statsTest = new org.ovirt.engine.core.dao.network.InterfaceDaoTest.HostNetworkStatisticsDaoTest(); dao = dbFacade.getInterfaceDao(); existingVdsInterface = dao.get(FixturesTool.VDS_NETWORK_INTERFACE); newQos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos(); newQos.setOutAverageLinkshare(30); newQos.setOutAverageUpperlimit(30); newQos.setOutAverageRealtime(30); newVdsInterface = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); newVdsInterface.setStatistics(new org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics()); newVdsInterface.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVdsInterface.setName("eth77"); newVdsInterface.setNetworkName("enginet"); newVdsInterface.setIpv4Address("192.168.122.177"); newVdsInterface.setIpv4Subnet("255.255.255.0"); newVdsInterface.setSpeed(1000); newVdsInterface.setType(3); newVdsInterface.setIpv4BootProtocol(NetworkBootProtocol.STATIC_IP); newVdsInterface.setMacAddress("01:C0:81:21:71:17"); newVdsInterface.setIpv4Gateway("192.168.122.1"); newVdsInterface.setMtu(1500); newVdsInterface.setQos(newQos); newVdsStatistics = newVdsInterface.getStatistics(); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.NicConfiguration.class, to = org.ovirt.engine.core.common.businessentities.VmInitNetwork.class) public static org.ovirt.engine.core.common.businessentities.VmInitNetwork map(org.ovirt.engine.api.model.NicConfiguration model, org.ovirt.engine.core.common.businessentities.VmInitNetwork template) { org.ovirt.engine.core.common.businessentities.VmInitNetwork entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); if (model.isSetName()) { entity.setName(model.getName()); } if (model.isOnBoot()) { entity.setStartOnBoot(model.isOnBoot()); } if (model.isSetBootProtocol()) { entity.setBootProtocol(org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(org.ovirt.engine.api.model.BootProtocol.fromValue(model.getBootProtocol()), NetworkBootProtocol.NONE)); } if (model.isSetIp()) { if (model.getIp().isSetAddress()) { entity.setIp(model.getIp().getAddress()); } if (model.getIp().isSetNetmask()) { entity.setNetmask(model.getIp().getNetmask()); } if (model.getIp().isSetGateway()) { entity.setGateway(model.getIp().getGateway()); } } return entity; }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getNetworkAttachmentDao(); networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); networkAttachment.setNicId(FixturesTool.VDS_NETWORK_INTERFACE); networkAttachment.setProperties(new java.util.HashMap()); networkAttachment.setId(org.ovirt.engine.core.compat.Guid.newGuid()); networkAttachment.setNetworkId(FixturesTool.NETWORK_ENGINE); org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); iPv4Address.setBootProtocol(NetworkBootProtocol.DHCP); ipConfiguration.getIPv4Addresses().add(iPv4Address); networkAttachment.setIpConfiguration(ipConfiguration); }
private static void setBootProtocolAndGateway(org.ovirt.engine.core.common.businessentities.VDS host, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.vdsbroker.vdsbroker.BootProtocolResolver bootProtocolResolver, org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher ipInfoFetcher, java.util.function.Consumer<org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol> bootProtocolSetter, java.util.function.Consumer<java.lang.String> gatewaySetter) { final org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol bootProtocol = bootProtocolResolver.resolve(ipInfoFetcher); bootProtocolSetter.accept(bootProtocol); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGateway(iface, host, bootProtocol, ipInfoFetcher, gatewaySetter); }
@org.junit.Before public void setUp() throws java.lang.Exception { clusterNetworkA = createNetworkWithName("clusterNetworkA"); clusterNetworkB = createNetworkWithName("clusterNetworkB"); clusterNetworks = new java.util.ArrayList(java.util.Arrays.asList(clusterNetworkA, clusterNetworkB)); interfaceWithAttachedClusterNetworkA = createVdsNetworkInterfaceWithId("interfaceWithAttachedClusterNetworkA"); interfaceWithAttachedClusterNetworkA.setNetworkName(clusterNetworkA.getName()); customPropertiesForNics.add(interfaceWithAttachedClusterNetworkA, createCustomProperties()); interfaceWithAttachedClusterNetworkA.setIpv4BootProtocol(NetworkBootProtocol.STATIC_IP); interfaceWithAttachedClusterNetworkA.setIpv4Address(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IP_ADDRESS); interfaceWithAttachedClusterNetworkA.setIpv4Subnet(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.NETMASK); interfaceWithAttachedClusterNetworkA.setIpv4Gateway(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.GATEWAY); interfaceWithoutAttachedNetwork = createVdsNetworkInterfaceWithId("interfaceWithoutAttachedNetwork"); }
private static void setGateway(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.VDS host, org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol bootProtocol, org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher ipInfoFetcher, java.util.function.Consumer<java.lang.String> gatewaySetter) { if (bootProtocol == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)) { java.lang.String gateway = ipInfoFetcher.fetchGateway(); if (org.apache.commons.lang.StringUtils.isNotEmpty(gateway)) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGatewayIfNecessary(iface, host, gateway, gatewaySetter); } } }
private org.ovirt.engine.core.common.businessentities.network.IpConfiguration createIpConfiguration() { org.ovirt.engine.core.common.businessentities.network.IPv4Address address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); address.setAddress(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IP_ADDRESS); address.setNetmask(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.NETMASK); address.setGateway(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.GATEWAY); address.setBootProtocol(NetworkBootProtocol.STATIC_IP); org.ovirt.engine.core.common.businessentities.network.IpConfiguration result = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); result.setIPv4Addresses(java.util.Collections.singletonList(address)); return result; }

private void hotSetCpus(int cpuPerSocket, int newNumOfSockets, int newThreadsPerCpu) { int currentSockets = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getNumOfSockets(); int currentCpuPerSocket = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getCpuPerSocket(); int currentThreadsPerCpu = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getThreadsPerCpu(); if (((((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) && (currentSockets != newNumOfSockets)) && (currentCpuPerSocket == cpuPerSocket)) && (currentThreadsPerCpu == newThreadsPerCpu)) { org.ovirt.engine.core.common.action.HotSetNumberOfCpusParameters params = new org.ovirt.engine.core.common.action.HotSetNumberOfCpusParameters(newVmStatic, (currentSockets < newNumOfSockets ? org.ovirt.engine.core.common.action.PlugAction.PLUG : org.ovirt.engine.core.common.action.PlugAction.UNPLUG)); setNumberOfCpusResult = runInternalAction(VdcActionType.HotSetNumberOfCpus, params, org.ovirt.engine.core.bll.UpdateVmCommand.cloneContextAndDetachFromParent()); newVmStatic.setNumOfSockets((setNumberOfCpusResult.getSucceeded() ? newNumOfSockets : currentSockets)); hotSetCpusLog(params); } }
@java.lang.Override public void onSuccess(java.lang.Object thisModel, java.lang.Object returnValue) { java.util.List<java.lang.String> changedFields = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).<java.util.List<java.lang.String>>getReturnValue(); if ((!(changedFields.isEmpty())) || (isVmUnpinned())) { org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel(); if (isVmUnpinned()) { confirmModel.setVmUnpinned(); } confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editNextRunConfigurationTitle()); confirmModel.setHelpTag(HelpTag.edit_next_run_configuration); confirmModel.setHashName("edit_next_run_configuration"); confirmModel.setChangedFields(changedFields); confirmModel.setCpuPluggable((((selectedItem.getCpuPerSocket()) == (getcurrentVm().getCpuPerSocket())) && ((selectedItem.getNumOfSockets()) != (getcurrentVm().getNumOfSockets())))); confirmModel.setMemoryPluggable(((selectedItem.getMemSizeMb()) < (getcurrentVm().getMemSizeMb()))); confirmModel.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("updateExistingVm", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true)); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("CancelConfirmation", this)); setConfirmWindow(confirmModel); } else { updateExistingVm(false); } }
@java.lang.Override public void onSuccess(java.lang.Object thisModel, java.lang.Object returnValue) { java.util.List<java.lang.String> changedFields = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); if (!(changedFields.isEmpty())) { org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel(); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editNextRunConfigurationTitle()); confirmModel.setHelpTag(HelpTag.edit_next_run_configuration); confirmModel.setHashName("edit_next_run_configuration"); confirmModel.setChangedFields(changedFields); confirmModel.setCpuPluggable((((selectedItem.getCpuPerSocket()) == (gettempVm().getCpuPerSocket())) && ((selectedItem.getNumOfSockets()) != (gettempVm().getNumOfSockets())))); confirmModel.setMemoryPluggable(((selectedItem.getMemSizeMb()) < (gettempVm().getMemSizeMb()))); confirmModel.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("updateExistingVm", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true)); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("CancelConfirmation", this)); setConfirmWindow(confirmModel); } else { updateExistingVm(((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel) (thisModel)), false); } }
private void hotSetMemory(int newAmountOfMemory) { int currentMemory = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getMemSizeMb(); if (((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) && (currentMemory != newAmountOfMemory)) { org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters params = new org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters(newVmStatic, (currentMemory < newAmountOfMemory ? org.ovirt.engine.core.common.action.PlugAction.PLUG : org.ovirt.engine.core.common.action.PlugAction.UNPLUG), 0); org.ovirt.engine.core.common.action.VdcReturnValueBase setAmountOfMemoryResult = runInternalAction(VdcActionType.HotSetAmountOfMemory, params, org.ovirt.engine.core.bll.UpdateVmCommand.cloneContextAndDetachFromParent()); newVmStatic.setMemSizeMb((setAmountOfMemoryResult.getSucceeded() ? newAmountOfMemory : currentMemory)); hotSetMemlog(params, setAmountOfMemoryResult); } }
void proceedDownVm() { if ((vdsmVm.getVmDynamic().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { return; } destroyVm(); org.ovirt.engine.core.common.businessentities.VMStatus prevStatus = ((dbVm) != null) ? dbVm.getStatus() : vmDynamicDao.get(vdsmVm.getVmDynamic().getId()).getStatus(); switch (prevStatus) { case SavingState : resourceManager.internalSetVmStatus(dbVm, VMStatus.Suspended); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); afterSuspendTreatment(); break; case MigratingFrom : if ((dbVm) != null) { proceedVmBeforeDeletion(); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); } break; default : if ((dbVm) != null) { clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); } handleVmOnDown(); } if ((dbVm) != null) { removeVmFromCache(); } }
public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl.log.error("Policy unit '{}' function is not implemented", getPolicyUnit().getName()); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> pairs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { pairs.add(new org.ovirt.engine.core.common.utils.Pair(vds.getId(), 1)); } return pairs; }
@java.lang.Override public void processOnVmStop(final java.util.Collection<org.ovirt.engine.core.compat.Guid> vmIds, final org.ovirt.engine.core.compat.Guid hostId) { if (vmIds.isEmpty()) { return; } org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(() -> processOnVmStopInternal(vmIds, hostId)); }
@javax.annotation.PostConstruct void init() { jobsRepository.putAll(getVmJobDao().getAll().stream().collect(java.util.stream.Collectors.toMap(VmJob::getId, java.util.function.Function.identity()))); }

public org.ovirt.engine.core.bll.ValidationResult networkNotUsedByVms() { return networkNotUsed(getVms(), EngineMessage.VAR__ENTITIES__VMS, EngineMessage.VAR__ENTITIES__VM); }
protected org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool() { return poolPerDc.poolForDataCenter(getStoragePoolId()); }
private org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool() { return poolPerDc.poolForDataCenter(org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand.getStoragePoolId()); }
protected org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool() { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.class).poolForDataCenter(params.getStoragePoolId()); }
private void moveMacsOfUpdatedDataCenter(org.ovirt.engine.core.compat.Guid oldMacPoolId, org.ovirt.engine.core.compat.Guid newMacPoolId, java.util.List<java.lang.String> vmInterfaceMacs) { java.util.Objects.requireNonNull(vmInterfaceMacs); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy sourcePool = poolPerDc.getPoolById(oldMacPoolId); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy targetPool = poolPerDc.getPoolById(newMacPoolId); for (java.lang.String mac : vmInterfaceMacs) { sourcePool.freeMac(mac); targetPool.forceAddMac(mac); } }
protected org.ovirt.engine.core.bll.ValidationResult macAvailable() { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy macPool = org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getMacPool(); java.lang.Boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(macPool); if (allowDupMacs || (!(vmInterfaceManager.existsPluggedInterfaceWithSameMac(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic())))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE); } }
private org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool(org.ovirt.engine.core.compat.Guid storagePoolId) { return poolPerDc.poolForDataCenter(storagePoolId); }
protected org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool() { if ((macPool) == null) { macPool = poolPerDc.poolForDataCenter(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getStoragePoolId()); } return macPool; }
public static boolean verifyAddVm(java.util.List<java.lang.String> reasons, int nicsCount, int vmPriority, org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy macPool) { boolean returnValue = true; if ((macPool.getAvailableMacsCount()) < nicsCount) { if (reasons != null) { reasons.add(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES.toString()); } returnValue = false; } else if (!(org.ovirt.engine.core.bll.VmTemplateCommand.isVmPriorityValueLegal(vmPriority, reasons))) { returnValue = false; } return returnValue; }
protected void runAddAndVerify(org.ovirt.engine.core.common.businessentities.network.VmNic iface, boolean reserveExistingMac, org.mockito.verification.VerificationMode addMacVerification, int osId, org.ovirt.engine.core.compat.Version version) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = mock(org.ovirt.engine.core.common.osinfo.OsRepository.class); when(vmInterfaceManager.getOsRepository()).thenReturn(osRepository); when(osRepository.hasNicHotplugSupport(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(true); vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.context.NoOpCompensationContext.getInstance(), reserveExistingMac, osId, version); if (reserveExistingMac) { verify(macPoolManagerStrategy, times(1)).forceAddMac(iface.getMacAddress()); } else { verifyZeroInteractions(macPoolManagerStrategy); } verifyAddDelegatedCorrectly(iface, addMacVerification); }
void forceAddMac(java.lang.String mac);
boolean isMacInUse(java.lang.String mac);
void freeMac(java.lang.String mac);
boolean addMac(java.lang.String mac);
int getAvailableMacsCount();
private org.ovirt.engine.core.bll.network.macpool.MacPool createPoolInternal(org.ovirt.engine.core.common.businessentities.MacPool macPool) { if (macPools.containsKey(macPool.getId())) { throw new java.lang.IllegalStateException(org.ovirt.engine.core.bll.network.macpool.MacPoolPerDc.UNABLE_TO_CREATE_MAC_POOL_IT_ALREADY_EXIST); } org.ovirt.engine.core.bll.network.macpool.MacPool poolForScope = new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges(macPoolToRanges(macPool), macPool.isAllowDuplicateMacAddresses()); macPools.put(macPool.getId(), new org.ovirt.engine.core.bll.network.macpool.MacPoolLockingProxy(poolForScope)); return poolForScope; }
void freeMacs(java.util.List<java.lang.String> macs);
java.util.List<java.lang.String> allocateMacAddresses(int numberOfAddresses);
java.lang.String allocateNewMac();

private static org.ovirt.engine.core.common.businessentities.network.IpV6Address mapIpv6AddressAssignment(org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment) { org.ovirt.engine.core.common.businessentities.network.IpV6Address ipV6Address = new org.ovirt.engine.core.common.businessentities.network.IpV6Address(); if (ipAddressAssignment.isSetAssignmentMethod()) { org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(org.ovirt.engine.api.model.BootProtocol.fromValue(ipAddressAssignment.getAssignmentMethod()), null); ipV6Address.setBootProtocol(assignmentMethod); } if (ipAddressAssignment.isSetIp()) { if (ipAddressAssignment.getIp().isSetAddress()) { ipV6Address.setAddress(ipAddressAssignment.getIp().getAddress()); } if (ipAddressAssignment.getIp().isSetGateway()) { ipV6Address.setGateway(ipAddressAssignment.getIp().getGateway()); } if (ipAddressAssignment.getIp().isSetNetmask()) { ipV6Address.setPrefix(java.lang.Integer.valueOf(ipAddressAssignment.getIp().getNetmask())); } } return ipV6Address; }
private static org.ovirt.engine.api.model.IpAddressAssignment mapIpv6AddressAssignment(org.ovirt.engine.core.common.businessentities.network.IpV6Address ipV6Address) { org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment = new org.ovirt.engine.api.model.IpAddressAssignment(); org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); ip.setVersion(IpVersion.V6.value()); if ((ipV6Address.getAddress()) != null) { ip.setAddress(ipV6Address.getAddress()); } if ((ipV6Address.getGateway()) != null) { ip.setGateway(ipV6Address.getGateway()); } if ((ipV6Address.getPrefix()) != null) { ip.setNetmask(ipV6Address.getPrefix().toString()); } ipAddressAssignment.setIp(ip); org.ovirt.engine.api.model.BootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(ipV6Address.getBootProtocol(), null); ipAddressAssignment.setAssignmentMethod((assignmentMethod == null ? null : assignmentMethod.value())); return ipAddressAssignment; }

private static void addBootProtocol(java.util.Map<java.lang.String, java.lang.Object> nicProperties, org.ovirt.engine.core.common.businessentities.VDS host, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface) { if (nicProperties == null) { return; } final boolean cfgEntriesDeprecated = org.ovirt.engine.core.common.FeatureSupported.cfgEntriesDeprecated(host.getClusterCompatibilityVersion()); final org.ovirt.engine.core.vdsbroker.vdsbroker.BootProtocolResolver resolver = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getBootProtocolResolver(); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setBootProtocolAndGateway(host, iface, resolver, (cfgEntriesDeprecated ? new org.ovirt.engine.core.vdsbroker.vdsbroker.NoCfgIpv4InfoFetcher(nicProperties, iface.getIpv4Address()) : new org.ovirt.engine.core.vdsbroker.vdsbroker.CfgIpv4InfoFetcher(nicProperties)), iface::setIpv4BootProtocol, iface::setIpv4Gateway); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setBootProtocolAndGateway(host, iface, resolver, (cfgEntriesDeprecated ? new org.ovirt.engine.core.vdsbroker.vdsbroker.NoCfgIpv6InfoFetcher(nicProperties, iface.getIpv6Address()) : new org.ovirt.engine.core.vdsbroker.vdsbroker.CfgIpv6InfoFetcher(nicProperties)), iface::setIpv6BootProtocol, iface::setIpv6Gateway); }
private static void setBootProtocolAndGateway(org.ovirt.engine.core.common.businessentities.VDS host, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.vdsbroker.vdsbroker.BootProtocolResolver bootProtocolResolver, org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher ipInfoFetcher, java.util.function.Consumer<org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol> bootProtocolSetter, java.util.function.Consumer<java.lang.String> gatewaySetter) { final org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol bootProtocol = bootProtocolResolver.resolve(ipInfoFetcher); bootProtocolSetter.accept(bootProtocol); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGateway(iface, host, bootProtocol, ipInfoFetcher, gatewaySetter); }



private static void setGateway(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.VDS host, org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol bootProtocol, org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher ipInfoFetcher, java.util.function.Consumer<java.lang.String> gatewaySetter) { if (bootProtocol == (org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.STATIC_IP)) { java.lang.String gateway = ipInfoFetcher.fetchGateway(); if (org.apache.commons.lang.StringUtils.isNotEmpty(gateway)) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGatewayIfNecessary(iface, host, gateway, gatewaySetter); } } }
protected void enableDisableByBootProtocol(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceModel model) { boolean bootProtocolsAvailable = model.getBootProtocolsAvailable(); ipv4BootProtocolLabel.setEnabled(bootProtocolsAvailable); ipv4BootProtocol.setEnabled(bootProtocolsAvailable); ipv4BootProtocol.setEnabled(Ipv4BootProtocol.NONE, model.getNoneBootProtocolAvailable()); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceModel object) { driver.edit(object); qosWidget.edit(object.getQosModel()); enableDisableByBootProtocol(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceModel) (sender)); java.lang.String propertyName = args.propertyName; if (("BootProtocolsAvailable".equals(propertyName)) || ("NoneBootProtocolAvailable".equals(propertyName))) { enableDisableByBootProtocol(model); } } }); if (object.getIsToSync().getIsChangable()) { isToSyncInfo.setVisible(true); } customPropertiesPanel.setVisible(object.getCustomPropertiesModel().getIsAvailable()); customPropertiesWidget.edit(object.getCustomPropertiesModel()); customPropertiesLabel.setEnabled(object.getCustomPropertiesModel().getIsChangable()); }
public void setIpv4BootProtocol(org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol value) { if ((ipv4BootProtocol) != value) { ipv4BootProtocol = value; bootProtocolChanged(); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("BootProtocol")); } }
public void setStaticIpChangeAllowed(boolean staticIpChangeAllowed) { this.staticIpChangeAllowed = staticIpChangeAllowed; updateCanSpecify(); }
private void revertChanges() { if ((originalNetParams) != null) { setIpv4BootProtocol(originalNetParams.getBootProtocol()); getIpv4Address().setEntity(originalNetParams.getAddress()); getIpv4Subnet().setEntity(originalNetParams.getSubnet()); getIpv4Gateway().setEntity(originalNetParams.getGateway()); getQosOverridden().setEntity(originalNetParams.isQosOverridden()); getQosModel().init(originalNetParams.getQos()); getCustomPropertiesModel().deserialize(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueModel.convertProperties(originalNetParams.getCustomProperties())); } }

public org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol getBootProtocol() { return bootProtocol; }
private void updateCanSpecify() { boolean isChangable = (bootProtocolsAvailable) && (getIsStaticAddress()); getIpv4Address().setChangeProhibitionReason((isChangable && (!(staticIpChangeAllowed)) ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().staticIpAddressSameAsHostname() : null)); getIpv4Address().setIsChangeable((isChangable && (staticIpChangeAllowed))); getIpv4Subnet().setIsChangeable(isChangable); getIpv4Gateway().setIsChangeable(isChangable); }


private org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters createBeforeSyncNetParams(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters params = new org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters(); params.setBootProtocol(nic.getIpv4BootProtocol()); params.setAddress(nic.getIpv4Address()); params.setSubnet(nic.getIpv4Subnet()); params.setGateway(nic.getIpv4Gateway()); params.setQos(nic.getQos()); params.setQosOverridden(attachment.isQosOverridden()); params.setCustomProperties(attachment.getProperties()); return params; }

public org.ovirt.engine.core.bll.ValidationResult validateNetworkAttachmentIpConfiguration(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure) { org.ovirt.engine.core.common.businessentities.network.IpConfiguration networkAttachmentIpConfiguration = null; org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = null; for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment : attachmentsToConfigure) { networkAttachmentIpConfiguration = networkAttachment.getIpConfiguration(); if ((networkAttachmentIpConfiguration == null) || (!(networkAttachmentIpConfiguration.hasIpv4PrimaryAddressSet()))) { return incompleteIpConfigurationValidationResult(EngineMessage.NETWORK_ATTACHMENT_MISSING_IP_CONFIGURATION, networkAttachment.getNetworkName(), networkAttachment.getNicName()); } iPv4Address = networkAttachmentIpConfiguration.getIpv4PrimaryAddress(); if ((iPv4Address.getBootProtocol()) == null) { return incompleteIpConfigurationValidationResult(EngineMessage.NETWORK_ATTACHMENT_IP_CONFIGURATION_MISSING_BOOT_PROTOCOL, networkAttachment.getNetworkName(), networkAttachment.getNicName()); } org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol bootProtocol = iPv4Address.getBootProtocol(); if ((bootProtocol == (org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.DHCP)) || (bootProtocol == (org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.NONE))) { if (!(validDhcpOrNoneIpAddressDetails(iPv4Address))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_ATTACHMENT_IP_CONFIGURATION_INCOMPATIBLE_BOOT_PROTOCOL_AND_IP_ADDRESS_DETAILS, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.network.NetworkAttachmentIpConfigurationValidator.VAR_NETWORK_NAME, networkAttachment.getNetworkName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.network.NetworkAttachmentIpConfigurationValidator.VAR_INTERFACE_NAME, networkAttachment.getNicName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.network.NetworkAttachmentIpConfigurationValidator.VAR_BOOT_PROTOCOL, bootProtocol.getDisplayName())); } } if (bootProtocol == (org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.STATIC_IP)) { if (!(validStaticAddressDetails(iPv4Address))) { return incompleteIpConfigurationValidationResult(EngineMessage.NETWORK_ATTACHMENT_IP_CONFIGURATION_STATIC_BOOT_PROTOCOL_MISSING_IP_ADDRESS_DETAILS, networkAttachment.getNetworkName(), networkAttachment.getNicName()); } } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@org.junit.Test public void checkIncompatibleIpAddressDetailsBootProtocolNone() { checkIncompatibleIpAddressDetailsBootProtocol(Ipv4BootProtocol.NONE); }

void removeJobs(java.util.List<org.ovirt.engine.core.compat.Guid> vmJobIdsToRemove) { removeJobsFromDb(vmJobIdsToRemove); vmJobIdsToRemove.forEach(jobsRepository::remove); }

@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return new org.ovirt.engine.core.bll.MergeCommandCallback(); }
@java.lang.Override public void doPolling(org.ovirt.engine.core.compat.Guid cmdId, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { boolean isRunning = false; org.ovirt.engine.core.bll.MergeCommand<org.ovirt.engine.core.common.action.MergeParameters> command = getCommand(cmdId); org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDao().get(command.getParameters().getVmId()).getStatus(); java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> vmJobs = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmJobDao().getAllForVmDisk(command.getParameters().getVmId(), command.getParameters().getImageGroupId()); for (org.ovirt.engine.core.common.businessentities.VmJob vmJob : vmJobs) { if (vmJob.getId().equals(command.getParameters().getVmJobId())) { if (vmStatus == (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmJobDao().remove(vmJob.getId()); org.ovirt.engine.core.bll.MergeCommandCallback.log.info("VM '{}' is down, Merge command '{}' removed", command.getParameters().getVmId(), vmJob.getId()); } else { org.ovirt.engine.core.bll.MergeCommandCallback.log.info("Waiting on merge command to complete"); isRunning = true; } break; } } if (!isRunning) { command.setSucceeded(true); command.setCommandStatus(CommandStatus.SUCCEEDED); command.persistCommand(command.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.MergeCommandCallback.log.info("Merge command has completed for images '{}'..'{}'", command.getParameters().getBaseImage().getImageId(), command.getParameters().getTopImage().getImageId()); } }

@java.lang.Override public void close() throws java.lang.Exception { org.apache.http.client.methods.HttpGet request = new org.apache.http.client.methods.HttpGet(url); this.send(request, true); if ((client) != null) { client.close(); } }
private void injectHeaders(org.apache.http.client.methods.HttpUriRequest request, boolean last) { java.util.List<org.apache.http.Header> updated = excludeNullHeaders(request.getAllHeaders()); if ((updated != null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(new org.apache.http.Header[updated.size()])); } request.addHeader("Version", "4"); request.addHeader("Content-type", "application/xml"); request.addHeader("User-Agent", "JavaSDK"); request.addHeader("Accept", "application/xml"); if (!last) { request.addHeader("Prefer", "persistent-auth"); } }

@java.lang.Override protected org.ovirt.engine.api.model.HostNic postPopulate(org.ovirt.engine.api.model.HostNic model) { org.ovirt.engine.api.model.HostNic hostNIC = super.postPopulate(model); org.ovirt.engine.api.model.Qos qos = hostNIC.getQos(); qos.setType(QosType.HOSTNETWORK); qos.setName(null); qos.setDataCenter(null); return hostNIC; }
@org.junit.Before public void setup() { doReturn(diskValidator).when(command).getDiskValidator(disk); doReturn(ValidationResult.VALID).when(diskValidator).isDiskExists(); doReturn(ValidationResult.VALID).when(diskValidator).isDiskAttachedToVm(vm); }
public void updateUseHostCpuAvailability() { boolean clusterSupportsHostCpu = ((getCompatibilityVersion()) != null) && ((getCompatibilityVersion().compareTo(Version.v3_2)) >= 0); boolean nonMigratable = (org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST) == (getModel().getMigrationMode().getSelectedItem()); if (clusterSupportsHostCpu && nonMigratable) { getModel().getHostCpu().setIsChangeable(true); } else { getModel().getHostCpu().setEntity(false); getModel().getHostCpu().setChangeProhibitionReason(constants.hosCPUUnavailable()); getModel().getHostCpu().setIsChangeable(false); } }











private boolean findDefaultManagementNetwork() { managementNetwork = defaultManagementNetworkFinder.findDefaultManagementNetwork(org.ovirt.engine.core.bll.AddVdsGroupCommand.getVdsGroup().getStoragePoolId()); if ((managementNetwork) == null) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } return true; }



protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImage() { disk.setImageId(diskImageGuid); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> storageIdList = new java.util.ArrayList<>(); storageIdList.add(storageDomainId); disk.setStorageIds(storageIdList); disk.setStoragePoolId(storagePoolId); return disk; }
@org.junit.Before public void setUpContainer() { when(engineSessionDao.remove(any(java.lang.Long.class))).thenReturn(1); when(ssoSessionValidator.isSessionValid(anyString())).thenReturn(true); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); container.setSSOSessionValidaor(ssoSessionValidator); container.setUser(org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID, user); }


private void removeSessionImpl(java.lang.String sessionId, int reason, java.lang.String message, java.lang.Object... msgArgs) { java.lang.String authzName = null; if ((getProfile(sessionId)) != null) { authzName = getProfile(sessionId).getAuthz().getContext().<java.lang.String>get(Base.ContextKeys.INSTANCE_NAME); } org.ovirt.engine.core.aaa.AcctUtils.reportRecords(reason, authzName, getPrincipalName(sessionId), message, msgArgs); engineSessionDao.remove(getEngineSessionSeqId(sessionId)); sessionInfoMap.remove(sessionId); }
@org.junit.Before @java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); actionGroup = org.ovirt.engine.core.utils.RandomUtils.instance().pickRandom(org.ovirt.engine.core.common.businessentities.ActionGroup.values()); when(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.getQueryParameters().getActionGroup()).thenReturn(actionGroup); sessionID = org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10); when(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.getQueryParameters().getSessionId()).thenReturn(sessionID); when(engineSessionDao.save(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.any(org.ovirt.engine.core.common.businessentities.EngineSession.class))).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextLong()); when(engineSessionDao.remove(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.any(java.lang.Long.class))).thenReturn(1); sessionDataContainer.setUser(sessionID, org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.getUser()); }
private org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid rootCommandId, boolean enableCallback) { return org.ovirt.engine.core.common.businessentities.CommandEntity.buildCommandEntity(org.ovirt.engine.core.bll.CommandBase.getUserId(), getCommandId(), ((getParameters().getParentParameters()) == null ? org.ovirt.engine.core.compat.Guid.Empty : getParameters().getParentParameters().getCommandId()), rootCommandId, (((getExecutionContext()) == null) || ((getExecutionContext().getJob()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getJob().getId()), (((getExecutionContext()) == null) || ((getExecutionContext().getStep()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getStep().getId()), getActionType(), getParameters(), commandStatus, enableCallback, getReturnValue(), getCommandData()); }

public static org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid userId, org.ovirt.engine.core.compat.Guid commandId, org.ovirt.engine.core.compat.Guid parentCommandId, org.ovirt.engine.core.compat.Guid rootCommandId, org.ovirt.engine.core.compat.Guid jobId, org.ovirt.engine.core.compat.Guid stepId, org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase params, org.ovirt.engine.core.compat.CommandStatus status, boolean callbackEnabled, org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue, java.util.Map<java.lang.String, java.io.Serializable> data) { org.ovirt.engine.core.common.businessentities.CommandEntity entity = new org.ovirt.engine.core.common.businessentities.CommandEntity(); entity.setUserId(userId); entity.setId(commandId); entity.setParentCommandId(parentCommandId); entity.setRootCommandId(rootCommandId); entity.setJobId(jobId); entity.setStepId(stepId); entity.setCommandType(actionType); entity.setCommandParameters(params); entity.setCommandStatus(status); entity.setCallbackEnabled(callbackEnabled); entity.setReturnValue(returnValue); entity.setData(data); return entity; }

protected void doNonBlockingAction(final org.ovirt.engine.core.common.action.VdcActionType task, final org.ovirt.engine.core.common.action.VdcActionParametersBase params) { setCorrelationId(params); setJobOrStepId(params); org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(() -> { org.ovirt.engine.core.common.action.VdcActionParametersBase sp = sessionize(params); org.ovirt.engine.core.common.businessentities.aaa.DbUser currentUser = getCurrent().getUser(); org.ovirt.engine.core.common.action.VdcActionParametersBase logout = (currentUser != null) ? sessionize(new org.ovirt.engine.core.common.action.VdcActionParametersBase()) : null; try { org.ovirt.engine.api.restapi.resource.backend.runAction(task, sp); } finally { if (currentUser != null) { org.ovirt.engine.api.restapi.resource.backend.logoff(logout); } } }); }


@org.junit.Before public void setUpContainer() { when(engineSessionDao.remove(any(java.lang.Long.class))).thenReturn(1); when(ssoSessionValidator.isSessionValid(anyString())).thenReturn(true); when(ssoSessionUtils.isSessionInUse(anyString())).thenReturn(false); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); container.setSSOSessionUtils(ssoSessionUtils); container.setSSOSessionValidaor(ssoSessionValidator); container.setUser(org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID, user); }
@java.lang.Override public org.ovirt.engine.core.common.job.Job mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.job.Job job = new org.ovirt.engine.core.common.job.Job(); job.setId(getGuidDefaultEmpty(rs, "job_id")); job.setActionType(org.ovirt.engine.core.common.action.VdcActionType.valueOf(rs.getString("action_type"))); job.setDescription(rs.getString("description")); job.setStatus(org.ovirt.engine.core.common.job.JobExecutionStatus.valueOf(rs.getString("status"))); job.setOwnerId(getGuid(rs, "owner_id")); job.setVisible(rs.getBoolean("visible")); job.setStartTime(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.fromDate(rs.getTimestamp("start_time"))); job.setEndTime(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.fromDate(rs.getTimestamp("end_time"))); job.setLastUpdateTime(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.fromDate(rs.getTimestamp("last_update_time"))); job.setCorrelationId(rs.getString("correlation_id")); job.setExternal(rs.getBoolean("is_external")); job.setAutoCleared(rs.getBoolean("is_auto_cleared")); return job; }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.job.Job entity) { return createIdParameterMapper(entity.getId()).addValue("action_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getActionType())).addValue("description", entity.getDescription()).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getStatus())).addValue("owner_id", entity.getOwnerId()).addValue("visible", entity.isVisible()).addValue("start_time", entity.getStartTime()).addValue("end_time", entity.getEndTime()).addValue("last_update_time", entity.getLastUpdateTime()).addValue("correlation_id", entity.getCorrelationId()).addValue("is_external", entity.isExternal()).addValue("is_auto_cleared", entity.isAutoCleared()); }

@org.junit.Before @java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); actionGroup = org.ovirt.engine.core.utils.RandomUtils.instance().pickRandom(org.ovirt.engine.core.common.businessentities.ActionGroup.values()); when(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.getQueryParameters().getActionGroup()).thenReturn(actionGroup); sessionID = org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10); when(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.getQueryParameters().getSessionId()).thenReturn(sessionID); when(engineSessionDao.save(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.any(org.ovirt.engine.core.common.businessentities.EngineSession.class))).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextLong()); when(engineSessionDao.remove(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.any(java.lang.Long.class))).thenReturn(1); when(ssoSessionUtils.isSessionInUse(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.anyString())).thenReturn(false); sessionDataContainer.setSSOSessionUtils(ssoSessionUtils); sessionDataContainer.setUser(sessionID, org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.getUser()); }
public static org.ovirt.engine.core.common.job.Job createJob(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.bll.CommandBase<?> command) { org.ovirt.engine.core.common.job.Job job = new org.ovirt.engine.core.common.job.Job(); job.setId(org.ovirt.engine.core.compat.Guid.newGuid()); job.setActionType(actionType); job.setDescription(org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveJobMessage(actionType, command.getJobMessageProperties())); job.setJobSubjectEntities(org.ovirt.engine.core.bll.job.ExecutionHandler.getSubjectEntities(command.getPermissionCheckSubjects())); job.setOwnerId(command.getUserId()); job.setStatus(JobExecutionStatus.STARTED); job.setStartTime(new java.util.Date()); job.setCorrelationId(command.getCorrelationId()); return job; }

protected Q setUpSpyQuery(P parameters) throws java.lang.Exception { org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacadeMock = org.ovirt.engine.core.bll.AbstractQueryTest.mock(org.ovirt.engine.core.dal.dbbroker.DbFacade.class); org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUserMock = org.ovirt.engine.core.bll.AbstractQueryTest.mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); when(engineSessionDao.save(org.ovirt.engine.core.bll.AbstractQueryTest.any(org.ovirt.engine.core.common.businessentities.EngineSession.class))).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextLong()); when(engineSessionDao.remove(org.ovirt.engine.core.bll.AbstractQueryTest.any(java.lang.Long.class))).thenReturn(1); sessionDataContainer.setUser(parameters.getSessionId(), dbUserMock); java.lang.reflect.Constructor<? extends Q> con = getQueryType().getConstructor(getParameterType()); query = org.ovirt.engine.core.bll.AbstractQueryTest.spy(con.newInstance(parameters)); doReturn(sessionDataContainer).when(query).getSessionDataContainer(); doReturn(dbFacadeMock).when(query).getDbFacade(); doReturn(dbUserMock).when(query).initUser(); initQuery(query); query.postConstruct(); return query; }



private java.util.List<org.ovirt.engine.core.common.businessentities.UserSession> searchSessions() { return genericSearch(org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getEngineSessionDao(), false).stream().map(UserSession::new).collect(java.util.stream.Collectors.toList()); }









public boolean isClientIpChanged() { return clientIpChanged; }






@java.lang.Override protected void endWithFailure() { org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand.setSucceeded(true); }

private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand<T>.StateContext context) { log.info("Finalizing successful upload to {}", getUploadDescription()); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.unLockImage(); stopImageTransferSession(context.entity); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); }
private void stopImageTransferSession(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity) { if ((entity.getImagedTicketId()) == null) { return; } org.ovirt.engine.core.compat.Guid resourceId = entity.getImagedTicketId(); org.ovirt.engine.core.common.vdscommands.RemoveImageTicketVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.RemoveImageTicketVDSCommandParameters(entity.getVdsId(), resourceId); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsRetVal; try { vdsRetVal = org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getBackend().getResourceManager().runVdsCommand(VDSCommandType.RemoveImageTicket, parameters); } catch (java.lang.RuntimeException e) { log.error("Failed to stop image transfer session for ticket '{}': {}", resourceId.toString(), e); return; } if (!(vdsRetVal.getSucceeded())) { log.warn("Failed to stop image transfer session for ticket '{}'", resourceId.toString()); return; } log.info("Successfully stopped image transfer session for ticket '{}'", resourceId.toString()); org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(); updates.setClearResourceId(true); updateEntity(updates); tearDownImage(entity.getVdsId()); }
private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand<T>.StateContext context) { log.info("Finalizing successful upload to {}", getUploadDescription()); stopImageTransferSession(context.entity); org.ovirt.engine.core.compat.Guid transferingVdsId = context.entity.getVdsId(); if (verifyImage(transferingVdsId)) { setVolumeLegalityInStorage(transferingVdsId, true); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.unLockImage(); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); } else { setImageStatus(ImageStatus.ILLEGAL); updateEntityPhase(ImageTransferPhase.FINALIZING_FAILURE); } }
private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand<T>.StateContext context) { log.info("Finalizing successful upload to {}", getUploadDescription()); stopImageTransferSession(context.entity); setVolumeLegalityInStorage(context.entity.getVdsId(), true); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.unLockImage(); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); }
@java.lang.Override protected void executeVmCommand() { org.ovirt.engine.core.bll.VmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.ArrayList<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (canAddVm(errorMessages, destStorages.values())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } } else { log.error("Failed to add vm . The reasons are: {}", org.apache.commons.lang.StringUtils.join(errorMessages, ',')); } }

void proceedDownVm() { if ((vdsmVm.getVmDynamic().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { return; } destroyVm(); if ((dbVm) == null) { return; } switch (dbVm.getStatus()) { case SavingState : resourceManager.internalSetVmStatus(dbVm, VMStatus.Suspended); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); afterSuspendTreatment(); break; case MigratingFrom : proceedVmBeforeDeletion(); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); handOverVM(dbVm); break; default : auditVmOnDownEvent(); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); switch (vdsmVm.getVmDynamic().getExitStatus()) { case Error : if (resourceManager.isVmInAsyncRunningList(vdsmVm.getVmDynamic().getId())) { setRerunFlag(); break; } if (dbVm.isAutoStartup()) { setAutoRunFlag(); break; } break; case Normal : resourceManager.removeAsyncRunningVm(vdsmVm.getVmDynamic().getId()); if (((getVmManager()) != null) && (getVmManager().isColdReboot())) { setColdRebootFlag(); } } } }
private java.lang.String createSpiceInvocationInfo() { return new org.ovirt.engine.ui.common.view.popup.ConsolePopupView.KeyValueHtmlRowMaker(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.auto(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokeAuto()).append(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.nativeClient(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.consoleInvokeNative()).append(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.browserPlugin(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokePlugin()).append(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceHtml5(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokeHtml5()).toString(); }
@java.lang.Override public void setSpicePluginImplEnabled(boolean enabled, java.lang.String reason) { spicePluginImplRadioButton.setEnabled(enabled); if (!enabled) { spicePluginImplRadioButtonTooltip.setText(reason); } }

@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { log.debug("Entered SSORestApiAuthFilter"); javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); if ((!(org.ovirt.engine.core.aaa.filters.FiltersHelper.isAuthenticated(req))) || (!(org.ovirt.engine.core.aaa.filters.FiltersHelper.isSessionValid(((javax.servlet.http.HttpServletRequest) (request)))))) { log.debug("SSORestApiAuthFilter authenticating with sso"); authenticateWithSSO(req, ((javax.servlet.http.HttpServletResponse) (response))); } chain.doFilter(request, response); }
public void setSSOSessionValidaor(org.ovirt.engine.core.bll.aaa.SessionDataContainer.SSOSessionValidator ssoSessionValidator) { this.ssoSessionValidator = ssoSessionValidator; }
@java.lang.Override protected boolean canAddDomain() { if ((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomainStaticDao().get(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getId())) != null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); } java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsOnStorage = getLUNsFromVgInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorage()); if (lunsOnStorage.isEmpty()) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_PROBLEM_WITH_CANDIDATE_INFO); } if (org.apache.commons.collections.CollectionUtils.containsAny(org.ovirt.engine.core.common.businessentities.Entities.getIds(lunsOnStorage), org.ovirt.engine.core.common.businessentities.Entities.getIds(getAllLuns()))) { log.info("There are existing luns in the system which are part of VG id '{}'", org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorage()); return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMPORT_STORAGE_DOMAIN_EXTERNAL_LUN_DISK_EXIST); } return true; }

private java.lang.String getMigrationNetworkIp() { org.ovirt.engine.core.common.businessentities.network.Network migrationNetwork = null; java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> allNetworksInCluster = org.ovirt.engine.core.bll.MigrateVmCommand.getNetworkDao().getAllForCluster(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getClusterId()); for (org.ovirt.engine.core.common.businessentities.network.Network tempNetwork : allNetworksInCluster) { if (tempNetwork.getCluster().isMigration()) { migrationNetwork = tempNetwork; break; } } if (migrationNetwork != null) { if ((getMigrationNetworkAddress(org.ovirt.engine.core.bll.MigrateVmCommand.getVds().getId(), migrationNetwork.getName())) == null) { return null; } return getMigrationNetworkAddress(getDestinationVds().getId(), migrationNetwork.getName()); } return null; }
private void addDefaultNetworks() { org.ovirt.engine.core.common.businessentities.network.Network net = new org.ovirt.engine.core.common.businessentities.network.Network(); net.setId(org.ovirt.engine.core.compat.Guid.newGuid()); net.setName(managementNetworkUtil.getDefaultManagementNetworkName()); net.setDescription(AddClusterCommand.DefaultNetworkDescription); net.setDataCenterId(org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getStoragePool().getId()); net.setVmNetwork(true); org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getNetworkDao().save(net); org.ovirt.engine.core.bll.network.cluster.NetworkHelper.addPermissionsOnNetwork(org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getCurrentUser().getId(), net.getId()); org.ovirt.engine.core.common.businessentities.network.VnicProfile profile = org.ovirt.engine.core.bll.network.cluster.NetworkHelper.createVnicProfile(net); org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getVnicProfileDao().save(profile); org.ovirt.engine.core.bll.network.cluster.NetworkHelper.addPermissionsOnVnicProfile(org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getCurrentUser().getId(), profile.getId(), true); }

@java.lang.Override public int hashCode() { return java.util.Objects.hash(getId(), parentDeviceName, capability, iommuGroup, productName, productId, vendorName, vendorId, parentPhysicalFunction, totalVirtualFunctions, networkInterfaceName, vmId); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.HostDevice)) { return false; } org.ovirt.engine.core.common.businessentities.HostDevice other = ((org.ovirt.engine.core.common.businessentities.HostDevice) (obj)); return (((((((((((java.util.Objects.equals(getId(), other.getId())) && (java.util.Objects.equals(parentDeviceName, other.parentDeviceName))) && (java.util.Objects.equals(capability, other.capability))) && (java.util.Objects.equals(iommuGroup, other.iommuGroup))) && (java.util.Objects.equals(productName, other.productName))) && (java.util.Objects.equals(productId, other.productId))) && (java.util.Objects.equals(vendorName, other.vendorName))) && (java.util.Objects.equals(vendorId, other.vendorId))) && (java.util.Objects.equals(parentPhysicalFunction, other.parentPhysicalFunction))) && (java.util.Objects.equals(totalVirtualFunctions, other.totalVirtualFunctions))) && (java.util.Objects.equals(networkInterfaceName, other.networkInterfaceName))) && (java.util.Objects.equals(vmId, other.vmId)); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.HostDevice entity) { return createIdParameterMapper(entity.getId()).addValue("parent_device_name", entity.getParentDeviceName()).addValue("capability", entity.getCapability()).addValue("iommu_group", entity.getIommuGroup()).addValue("product_name", entity.getProductName()).addValue("product_id", entity.getProductId()).addValue("vendor_name", entity.getVendorName()).addValue("vendor_id", entity.getVendorId()).addValue("physfn", entity.getParentPhysicalFunction()).addValue("total_vfs", entity.getTotalVirtualFunctions()).addValue("net_iface_name", entity.getNetworkInterfaceName()); }
@java.lang.Override protected org.ovirt.engine.core.common.businessentities.HostDevice generateNewEntity() { org.ovirt.engine.core.common.businessentities.HostDevice device = new org.ovirt.engine.core.common.businessentities.HostDevice(); device.setHostId(org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_HOST_ID); device.setDeviceName(((org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME) + "___child")); device.setParentDeviceName(org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME); device.setCapability("pci"); return device; }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("hostId", hostId).append("deviceName", deviceName).append("parentDeviceName", parentDeviceName).append("capability", capability).append("iommuGroup", iommuGroup).append("productName", productName).append("productId", productId).append("vendorName", vendorName).append("vendorId", vendorId).append("parentPhysicalFunction", parentPhysicalFunction).append("totalVirtualFunctions", totalVirtualFunctions).append("networkInterfaceName", networkInterfaceName).append("vmId", vmId).build(); }
protected void map(java.sql.ResultSet rs, org.ovirt.engine.core.common.businessentities.HostDevice device) throws java.sql.SQLException { device.setHostId(org.ovirt.engine.core.dao.HostDeviceDaoImpl.BaseHostDeviceRowMapper.getGuid(rs, "host_id")); device.setDeviceName(rs.getString("device_name")); device.setParentDeviceName(rs.getString("parent_device_name")); device.setCapability(rs.getString("capability")); device.setIommuGroup(((java.lang.Integer) (rs.getObject("iommu_group")))); device.setProductName(rs.getString("product_name")); device.setProductId(rs.getString("product_id")); device.setVendorName(rs.getString("vendor_name")); device.setVendorId(rs.getString("vendor_id")); device.setParentPhysicalFunction(rs.getString("physfn")); device.setTotalVirtualFunctions(((java.lang.Integer) (rs.getObject("total_vfs")))); device.setNetworkInterfaceName(rs.getString("net_iface_name")); device.setVmId(org.ovirt.engine.core.dao.HostDeviceDaoImpl.BaseHostDeviceRowMapper.getGuid(rs, "vm_id")); }

private void createVMFromTemplate() { org.ovirt.engine.core.common.businessentities.VmTemplate template = getSelectedItem(); java.util.List<org.ovirt.engine.ui.uicommonweb.UICommand> commands = new java.util.ArrayList<>(); commands.add(org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSaveVm", this)); commands.add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); setupNewVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewVmFromTemplateModelBehavior(template), this), template.getVmType(), getSystemTreeSelectedItem(), commands); }

@java.lang.Override public void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.Merge, createVDSParameters()); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.compat.Guid jobId = ((org.ovirt.engine.core.compat.Guid) (vdsReturnValue.getReturnValue())); persistBlockJobPlaceholder(jobId); org.ovirt.engine.core.bll.MergeCommand.getParameters().setVmJobId(jobId); org.ovirt.engine.core.bll.MergeCommand.setSucceeded(true); persistCommand(org.ovirt.engine.core.bll.MergeCommand.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.MergeCommand.log.debug("Merge started successfully"); } else { org.ovirt.engine.core.bll.MergeCommand.log.error("Failed to start Merge on VDS"); setCommandStatus(CommandStatus.FAILED); } }

public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> getStorageDomainUtilization() throws java.sql.SQLException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> result = new java.util.ArrayList<>(); try (java.sql.Connection con = dwhDataSource.getConnection();java.sql.PreparedStatement storageUtilizationPS = con.prepareStatement(storageProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.STORAGE_DOMAIN_UTILIZATION));java.sql.ResultSet storageUtilizationRS = storageUtilizationPS.executeQuery()) { while (storageUtilizationRS.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(storageUtilizationRS.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.NAME)); usage.setUsed(storageUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.USED)); usage.setTotal(((storageUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.USED)) + (storageUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.AVAILABLE)))); usage.setPreviousUsed(storageUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.PREVIOUS_USED)); result.add(usage); } } return result; }
public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage> getHourlyStorageHistory() throws java.sql.SQLException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage> history = new java.util.ArrayList<>(); try (java.sql.Connection con = dwhDataSource.getConnection();java.sql.PreparedStatement storageHistoryPS = con.prepareStatement(storageProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.HOURLY_STORAGE_HISTORY));java.sql.ResultSet storageHistoryRS = storageHistoryPS.executeQuery()) { while (storageHistoryRS.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage(); usage.setEpoch(storageHistoryRS.getTimestamp(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.DATE).getTime()); usage.setStorageValue(storageHistoryRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.USED)); history.add(usage); } } return history; }
public static void populateCpuUtilizationHosts(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> resourceUsage = dao.getCpuUtilizationHosts(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : resourceUsage) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed((((usage.getUsed()) * (usage.getTotal())) / 100)); entity.setTotal(usage.getTotal()); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addResource(entity); } }

public java.util.Map<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> getEventStatusCount() throws java.sql.SQLException { java.util.Map<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> result = new java.util.HashMap<>(); try (java.sql.Connection con = engineDataSource.getConnection();java.sql.PreparedStatement cpuSummary = con.prepareStatement(eventProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO.AUDIT_LOG_COUNT));java.sql.ResultSet rs = cpuSummary.executeQuery()) { while (rs.next()) { result.put(org.ovirt.engine.core.common.AuditLogSeverity.forValue(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO.SEVERITY)), rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO.COUNT)); } } return result; }



public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.StorageDomainAverage> getStorageAverage() throws java.sql.SQLException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.StorageDomainAverage> result = new java.util.ArrayList<>(); try (java.sql.Connection con = dwhDataSource.getConnection();java.sql.PreparedStatement storageAveragePS = con.prepareStatement(storageProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.STORAGE_LAST24_AVERAGE));java.sql.ResultSet storageAverageRS = storageAveragePS.executeQuery()) { while (storageAverageRS.next()) { result.add(new org.ovirt.engine.ui.frontend.server.dashboard.models.StorageDomainAverage(storageAverageRS.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.NAME), storageAverageRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.AVERAGE))); } } return result; }


public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getDcInventoryStatus(javax.sql.DataSource engineDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDAO(engineDataSource); return dao.getDcInventoryStatus(); }
public java.lang.Double getTotalStorageCount() throws java.sql.SQLException { java.lang.Double result = 0.0; try (java.sql.Connection con = dwhDataSource.getConnection();java.sql.PreparedStatement totalStoragePS = con.prepareStatement(storageProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.TOTAL_STORAGE_COUNT));java.sql.ResultSet totalStorageRS = totalStoragePS.executeQuery()) { while (totalStorageRS.next()) { result = totalStorageRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.TOTAL); } } return result; }
public static void getCpuAndMemory(org.ovirt.engine.ui.frontend.server.dashboard.HeatMapData utilization, javax.sql.DataSource dataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO(dataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage> averages = dao.getClusterCpuAndMemoryAverage(); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock> cpu = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock> memory = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage data : averages) { cpu.add(new org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock(data.getName(), data.getCpuAverage())); memory.add(new org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock(data.getName(), data.getMemoryAverage())); } utilization.setCpu(cpu); utilization.setMemory(memory); }

public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getEventStatus(javax.sql.DataSource dataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO(dataSource); java.util.Map<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> data = dao.getEventStatusCount(); for (java.util.Map.Entry<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> entry : data.entrySet()) { switch (entry.getKey()) { case ALERT : result.setStatusCount(AuditLogSeverity.ALERT.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; case ERROR : result.setStatusCount(AuditLogSeverity.ERROR.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; case NORMAL : break; case WARNING : result.setStatusCount(AuditLogSeverity.WARNING.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; default : break; } } return result; }
public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getHostInventoryStatus() throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); try (java.sql.Connection con = engineDataSource.getConnection();java.sql.PreparedStatement cpuSummary = con.prepareStatement(hostProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostEngineDAO.HOST_INVENTORY));java.sql.ResultSet rs = cpuSummary.executeQuery()) { while (rs.next()) { processHostStatus(result, rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostEngineDAO.STATUS)); } } return result; }


public double getLast5MinutesStorageAverage() throws java.sql.SQLException { double result = 0; try (java.sql.Connection con = dwhDataSource.getConnection();java.sql.PreparedStatement last5minutesPs = con.prepareStatement(storageProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.LAST5_MIN_STORAGE_AVERAGE));java.sql.ResultSet last5minutesRs = last5minutesPs.executeQuery()) { while (last5minutesRs.next()) { result = last5minutesRs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.USED); } } return result; }
public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage> getClusterCpuAndMemoryAverage() throws java.sql.SQLException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage> result = new java.util.ArrayList<>(); try (java.sql.Connection con = dwhDataSource.getConnection();java.sql.PreparedStatement clusterResourcePS = con.prepareStatement(clusterProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.CLUSTER_LAST_24_AVERAGE));java.sql.ResultSet clusterResourceRS = clusterResourcePS.executeQuery()) { while (clusterResourceRS.next()) { result.add(new org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage(clusterResourceRS.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.NAME), clusterResourceRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.CPU_AVERAGE), clusterResourceRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.MEM_AVERAGE))); } } return result; }

public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getHostInventoryStatus(javax.sql.DataSource engineDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostEngineDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostEngineDAO(engineDataSource); return dao.getHostInventoryStatus(); }
public static void populateStorageUtilizationVms(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getStorageUtilizationVms(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(((usage.getUsed()) / 1024)); entity.setTotal(((usage.getTotal()) / 1024)); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend((((usage.getUsed()) / (usage.getTotal())) * 100), usage.getPreviousUsed())); utilization.addVm(entity); } }
public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getStorageInventoryStatus(javax.sql.DataSource engineDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainEngineDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainEngineDAO(engineDataSource); return dao.getStorageInventoryStatus(); }
public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getVmInventorySummary(javax.sql.DataSource engineDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.VmEngineDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.VmEngineDAO(engineDataSource); return dao.getVmInventoryStatus(); }
public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getClusterInventoryStatus(javax.sql.DataSource engineDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterEngineDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterEngineDAO(engineDataSource); return dao.getClusterInventorySummary(); }
public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getVmInventoryStatus() throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); try (java.sql.Connection con = engineDataSource.getConnection();java.sql.PreparedStatement vmStatusPS = con.prepareStatement(vmProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmEngineDAO.VM_INVENTORY));java.sql.ResultSet vmStatusRS = vmStatusPS.executeQuery()) { while (vmStatusRS.next()) { processVmStatus(result, vmStatusRS.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmEngineDAO.STATUS)); } } return result; }
public static void populateMemoryUtilizationHosts(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getMemoryUtilizationHosts(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(((usage.getUsed()) / 1024)); entity.setTotal(((usage.getTotal()) / 1024)); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addResource(entity); } }
private static void getTotalCpuMemCount(org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary cpuSummary, org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary memSummary, javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO(dwhDataSource); org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal total = dao.getTotalCpuMemCount(); cpuSummary.setPhysicalTotal(total.getCpuTotal()); memSummary.setPhysicalTotal(((total.getMemTotal()) / 1024)); }
public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> getStorageUtilizationVms() throws java.sql.SQLException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> result = new java.util.ArrayList<>(); try (java.sql.Connection con = dwhDataSource.getConnection();java.sql.PreparedStatement vmStorageUtilizationPS = con.prepareStatement(storageProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.VM_STORAGE_UTILIZATION));java.sql.ResultSet vmStorageUtilizationRS = vmStorageUtilizationPS.executeQuery()) { while (vmStorageUtilizationRS.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(vmStorageUtilizationRS.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.NAME)); usage.setUsed(((vmStorageUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.USED)) / 1024)); usage.setTotal(((vmStorageUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.TOTAL)) / 1024)); usage.setPreviousUsed((((vmStorageUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.PREVIOUS_USED)) / (vmStorageUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.PREVIOUS_TOTAL))) * 100)); result.add(usage); } } return result; }
private static void getVirtualStorageCount(org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary storageSummary, javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO(dwhDataSource); org.ovirt.engine.ui.frontend.server.dashboard.models.VmStorage storageCount = dao.getVirtualStorageCount(); storageSummary.setVirtualUsed(storageCount.getUsed()); storageSummary.setVirtualTotal(storageCount.getTotal()); }
private static java.lang.Double getTotalStorageCount(javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO(dwhDataSource); return (dao.getTotalStorageCount()) / 1024; }
private static java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode> getHourlyStorageHistory(org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary entity, javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode> history = new java.util.ArrayList<>(); org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage> usageList = dao.getHourlyStorageHistory(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage usage : usageList) { history.add(new org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode(usage.getEpoch(), ((usage.getStorageValue()) / 1024))); } return history; }
private static void getHourlyCpuMemUsage(org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary cpuSummary, org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary memSummary, javax.sql.DataSource dataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode> cpuHistory = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode> memHistory = new java.util.ArrayList<>(); org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO(dataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage> history = dao.getHourlyCpuMemUsage(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage item : history) { cpuHistory.add(new org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode(item.getEpoch(), item.getCpuValue())); memHistory.add(new org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode(item.getEpoch(), (((item.getMemValue()) * (memSummary.getTotal())) / 100))); } org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage last5minUsage = dao.getLast5MinCpuMemUsage(); cpuSummary.setUsed(last5minUsage.getCpuValue()); memSummary.setUsed((((last5minUsage.getMemValue()) * (memSummary.getTotal())) / 100)); cpuSummary.setHistory(cpuHistory); memSummary.setHistory(memHistory); }
public org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal getVirtualCpuMemCount() throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal result = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal(); try (java.sql.Connection con = dwhDataSource.getConnection();java.sql.PreparedStatement virtualCpuMemPS = con.prepareStatement(vmProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.VIRTUAL_CPU_MEMORY_COUNT));java.sql.ResultSet virtualCpuMemRS = virtualCpuMemPS.executeQuery()) { while (virtualCpuMemRS.next()) { result.setCpuTotal(virtualCpuMemRS.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.CPU_TOTAL_VMS)); result.setCpuUsed(virtualCpuMemRS.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.CPU_USED_VMS)); result.setMemTotal(((virtualCpuMemRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEM_TOTAL_VMS)) / 1024)); result.setMemUsed(((virtualCpuMemRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEM_USED_VMS)) / 1024)); } } return result; }
public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> getMemoryUtilizationVms() throws java.sql.SQLException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> result = new java.util.ArrayList<>(); try (java.sql.Connection con = dwhDataSource.getConnection();java.sql.PreparedStatement vmMemUtilizationPS = con.prepareStatement(vmProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEM_VM_UTILIZATION));java.sql.ResultSet vmMemUtilizationRS = vmMemUtilizationPS.executeQuery()) { while (vmMemUtilizationRS.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(vmMemUtilizationRS.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.NAME)); usage.setUsed((((vmMemUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEMORY_USAGE_PERCENT)) * (vmMemUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEMORY_SIZE))) / 100)); usage.setTotal(vmMemUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEMORY_SIZE)); usage.setPreviousUsed((((vmMemUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.PREVIOUS_MEMORY_PERCENT)) * (vmMemUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEMORY_SIZE))) / 100)); result.add(usage); } } return result; }

private static void getVirtualCpuMemCount(org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary cpuSummary, org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary memSummary, javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO(dwhDataSource); org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal resourcesTotal = dao.getVirtualCpuMemCount(); cpuSummary.setVirtualTotal(resourcesTotal.getCpuTotal()); cpuSummary.setVirtualUsed(resourcesTotal.getCpuUsed()); memSummary.setVirtualTotal(resourcesTotal.getMemTotal()); memSummary.setVirtualUsed(resourcesTotal.getMemUsed()); }

public org.ovirt.engine.ui.frontend.server.dashboard.models.VmStorage getVirtualStorageCount() throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.VmStorage result = new org.ovirt.engine.ui.frontend.server.dashboard.models.VmStorage(); try (java.sql.Connection con = dwhDataSource.getConnection();java.sql.PreparedStatement vmStoragePS = con.prepareStatement(vmProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.VIRTUAL_STORAGE_COUNT));java.sql.ResultSet vmStorageRS = vmStoragePS.executeQuery()) { while (vmStorageRS.next()) { result.setTotal(((vmStorageRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.TOTAL_VMS)) / 1024)); result.setUsed(((vmStorageRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.USED_VMS)) / 1024)); } } return result; }


public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getStorageInventoryStatus() throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); try (java.sql.Connection con = engineDataSource.getConnection();java.sql.PreparedStatement storageCountPS = con.prepareStatement(storageProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainEngineDAO.STORAGE_INVENTORY));java.sql.ResultSet storageCountRS = storageCountPS.executeQuery()) { while (storageCountRS.next()) { processStorageStatus(result, storageCountRS.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainEngineDAO.STATUS)); } } return result; }
public org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal getTotalCpuMemCount() throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal result = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal(); try (java.sql.Connection con = dwhDataSource.getConnection();java.sql.PreparedStatement totalPS = con.prepareStatement(hostProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.TOTAL_CPU_MEMORY_COUNT));java.sql.ResultSet totalRS = totalPS.executeQuery()) { while (totalRS.next()) { result.setCpuTotal(totalRS.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.CPU_TOTAL)); result.setMemTotal(totalRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEM_TOTAL)); } } return result; }



public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage> getHourlyCpuMemUsage() throws java.sql.SQLException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage> result = new java.util.ArrayList<>(); try (java.sql.Connection con = dwhDataSource.getConnection();java.sql.PreparedStatement resourceHistoryPS = con.prepareStatement(hostProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.HOURLY_CPU_MEM_HISTORY));java.sql.ResultSet resourceHistoryRS = resourceHistoryPS.executeQuery()) { while (resourceHistoryRS.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage resourceUsage = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage(); resourceUsage.setEpoch(resourceHistoryRS.getTimestamp(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.DATE).getTime()); resourceUsage.setCpuValue(resourceHistoryRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.CPU_USAGE)); resourceUsage.setMemValue(resourceHistoryRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEM_USAGE)); result.add(resourceUsage); } } return result; }
private static double getLast5MinutesStorageAverage(javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO(dwhDataSource); return (dao.getLast5MinutesStorageAverage()) / 1024; }

public static java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock> getStorage(javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock> nodes = new java.util.ArrayList<>(); org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO(dwhDataSource); for (org.ovirt.engine.ui.frontend.server.dashboard.models.StorageDomainAverage data : dao.getStorageAverage()) { nodes.add(new org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock(data.getName(), data.getValue())); } return nodes; }
public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getDcInventoryStatus() throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); try (java.sql.Connection con = engineDataSource.getConnection();java.sql.PreparedStatement dcStatusPS = con.prepareStatement(datacenterProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDAO.DC_INVENTORY));java.sql.ResultSet dcStatusRS = dcStatusPS.executeQuery()) { while (dcStatusRS.next()) { processDcStatus(result, dcStatusRS.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDAO.STATUS)); } } return result; }

public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> getMemoryUtilizationHosts() throws java.sql.SQLException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> result = new java.util.ArrayList<>(); try (java.sql.Connection con = dwhDataSource.getConnection();java.sql.PreparedStatement memUtilizationPS = con.prepareStatement(hostProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEM_HOST_UTILIZATION));java.sql.ResultSet memUtilizationRS = memUtilizationPS.executeQuery()) { while (memUtilizationRS.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(memUtilizationRS.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.NAME)); usage.setUsed((((memUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEMORY_USAGE_PERCENT)) * (memUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEMORY_SIZE))) / 100)); usage.setTotal(memUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEMORY_SIZE)); usage.setPreviousUsed((((memUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.PREVIOUS_MEMORY_PERCENT)) * (memUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEMORY_SIZE))) / 100)); result.add(usage); } } return result; }
public static void populateCpuUtilizationVms(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getCpuUtilizationVms(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(usage.getUsed()); entity.setTotal(usage.getTotal()); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addVm(entity); } }

public org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage getLast5MinCpuMemUsage() throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage result = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage(); try (java.sql.Connection con = dwhDataSource.getConnection();java.sql.PreparedStatement last5minAveragePS = con.prepareStatement(hostProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.LAST5_MIN_CPU_MEM_AVERAGE));java.sql.ResultSet last5minAverageRS = last5minAveragePS.executeQuery()) { while (last5minAverageRS.next()) { result.setCpuValue(last5minAverageRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.CPU_USAGE)); result.setMemValue(last5minAverageRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEM_USAGE)); } } return result; }
public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> getCpuUtilizationHosts() throws java.sql.SQLException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> result = new java.util.ArrayList<>(); try (java.sql.Connection con = dwhDataSource.getConnection();java.sql.PreparedStatement cpuUtilizationPS = con.prepareStatement(hostProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.CPU_HOST_UTILIZATION));java.sql.ResultSet cpuUtilizationRS = cpuUtilizationPS.executeQuery()) { while (cpuUtilizationRS.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(cpuUtilizationRS.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.NAME)); usage.setUsed(cpuUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.CPU_USAGE_PERCENT)); usage.setTotal(cpuUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.CORES_HOST)); usage.setPreviousUsed(cpuUtilizationRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.PREVIOUS_CPU_PERCENT)); result.add(usage); } } return result; }
public static void populateMemoryUtilizationVms(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getMemoryUtilizationVms(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(((usage.getUsed()) / 1024)); entity.setTotal(((usage.getTotal()) / 1024)); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addVm(entity); } }
public static void populateStorageUtilizationDomains(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getStorageDomainUtilization(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(((usage.getUsed()) / 1024)); entity.setTotal(((usage.getTotal()) / 1024)); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addResource(entity); } }
public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getClusterInventorySummary() throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); try (java.sql.Connection con = engineDataSource.getConnection();java.sql.PreparedStatement clusterCountPS = con.prepareStatement(clusterProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterEngineDAO.CLUSTER_INVENTORY));java.sql.ResultSet clusterCountRS = clusterCountPS.executeQuery()) { while (clusterCountRS.next()) { result.setTotalCount(clusterCountRS.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterEngineDAO.COUNT)); } } return result; }


@java.lang.SuppressWarnings("rawtypes") @java.lang.Override public java.util.concurrent.Future<java.util.Map<java.lang.String, java.lang.Object>> setupNetworks(java.util.Map networks, java.util.Map bonding, java.util.Map options, final boolean isPolicyReset) { final org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.setupNetworks").withParameter("networks", networks).withParameter("bondings", bonding).withParameter("options", options).build(); final org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.FutureCallable callable = new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.FutureCallable(() -> { if (isPolicyReset) { updateHeartbeatPolicy(client.getClientRetryPolicy().clone(), false); if (client.isClosed()) { waitUntilCheck(( client) -> client.isClosed(), "Waiting on losing connection to {}", "Connection lost for {}"); } waitUntilCheck(( client) -> !(client.isClosed()), "Waiting on opening connection for {}", "Done reconnecting for {}!"); } return new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withResponseKey("status"); }); java.util.concurrent.FutureTask<java.util.Map<java.lang.String, java.lang.Object>> future = new java.util.concurrent.FutureTask<java.util.Map<java.lang.String, java.lang.Object>>(callable) { @java.lang.Override public boolean isDone() { if (callable.isDone()) { if (isPolicyReset) { updateHeartbeatPolicy(client.getClientRetryPolicy(), true); } return true; } return false; } }; org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(future); return future; }

private java.util.List<org.ovirt.engine.core.compat.Guid> findVmViolatingPositiveAg(org.ovirt.engine.core.common.scheduling.AffinityGroup affinityGroup, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> vmToHost) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.compat.Guid>> hostCount = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid vm : affinityGroup.getEntityIds()) { org.ovirt.engine.core.compat.Guid host = vmToHost.get(vm); if (host == null) { continue; } if (hostCount.containsKey(host)) { hostCount.get(host).add(vm); } else { hostCount.put(host, new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>()); hostCount.get(host).add(vm); } } org.ovirt.engine.core.compat.Guid host = chooseCandidateHostForMigration(hostCount); if (host == null) { return null; } return hostCount.get(host); }

@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()) != null) { org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolDao().removeVmFromVmPool(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmId()); org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); } }






@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("srcHost", getSrcHost()).append("dstVdsId", getDstVdsId()).append("dstHost", getDstHost()).append("migrationMethod", getMigrationMethod()).append("tunnelMigration", isTunnelMigration()).append("migrationDowntime", getMigrationDowntime()).append("autoConverge", getAutoConverge()).append("migrateCompressed", getMigrateCompressed()).append("consoleAddress", getConsoleAddress()); }





















private org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> parseGraphicsAndDisplayPair(java.lang.String displayAndGraphicsString) { java.util.ArrayList<java.lang.String> splitted = trimElements(displayAndGraphicsString.split("/")); return (splitted.size()) == 2 ? new org.ovirt.engine.core.common.utils.Pair(splitted.get(0), splitted.get(1)) : null; }
@java.lang.Override public java.util.ArrayList<java.lang.String> getWatchDogModels(int osId, org.ovirt.engine.core.compat.Version version) { java.lang.String models = getValueByVersion(idToUnameLookup.get(osId), "devices.watchdog.models", version); return trimElements(models.split(",")); }
private java.util.ArrayList<java.lang.String> trimElements(java.lang.String... elements) { java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(elements.length); for (java.lang.String e : elements) { e = e.trim(); if ((e.length()) > 0) { list.add(e); } } return list; }
@java.lang.Override public java.util.ArrayList<java.lang.String> getNetworkDevices(int osId, org.ovirt.engine.core.compat.Version version) { java.lang.String devices = getValueByVersion(idToUnameLookup.get(osId), "devices.network", version); return trimElements(devices.split(",")); }
private static void addCdDetails(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getOsRepository(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getCompatibilityVersion()); if ("scsi".equals(cdInterface)) { struct.put(VdsProperties.Index, "0"); struct.put(VdsProperties.Address, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.createAddressForScsiDisk(0, 0)); } else if ("ide".equals(cdInterface)) { struct.put(VdsProperties.Index, "2"); } struct.put(VdsProperties.INTERFACE, cdInterface); struct.put(VdsProperties.ReadOnly, java.lang.Boolean.TRUE.toString()); struct.put(VdsProperties.Shareable, java.lang.Boolean.FALSE.toString()); }
private void addDevice(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String path) { boolean isPayload = (org.ovirt.engine.core.common.businessentities.VmPayload.isPayload(vmDevice.getSpecParams())) && (vmDevice.getDevice().equals(VmDeviceType.CDROM.getName())); java.util.Map<java.lang.String, java.lang.Object> specParams = ((vmDevice.getSpecParams()) == null) ? java.util.Collections.<java.lang.String, java.lang.Object>emptyMap() : vmDevice.getSpecParams(); if (path != null) { struct.put(VdsProperties.Path, (isPayload ? "" : path)); } if (isPayload) { java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getCompatibilityVersion()); if ("scsi".equals(cdInterface)) { struct.put(VdsProperties.Index, "1"); struct.put(VdsProperties.Address, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.createAddressForScsiDisk(0, 1)); } else if ("ide".equals(cdInterface)) { struct.put(VdsProperties.Index, "3"); } } struct.put(VdsProperties.SpecParams, specParams); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addBootOrder(vmDevice, struct); devices.add(struct); addToManagedDevices(vmDevice); }
@java.lang.Override public java.util.ArrayList<java.lang.String> getDiskInterfaces(int osId, org.ovirt.engine.core.compat.Version version) { java.lang.String devices = getValueByVersion(idToUnameLookup.get(osId), "devices.diskInterfaces", version); return trimElements(devices.split(",")); }

@java.lang.Override public java.util.Map<java.lang.String, java.lang.Object> call() throws java.lang.Exception { if (isPolicyReset) { updateHeartbeatPolicy(client.getClientRetryPolicy().clone(), false); if (client.isClosed()) { waitUntilCheck(new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.Predicate<org.ovirt.vdsm.jsonrpc.client.JsonRpcClient>() { @java.lang.Override public boolean test(org.ovirt.vdsm.jsonrpc.client.JsonRpcClient client) { return client.isClosed(); } }, "Waiting on losing connection to {}", "Connection lost for {}"); } waitUntilCheck(new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.Predicate<org.ovirt.vdsm.jsonrpc.client.JsonRpcClient>() { @java.lang.Override public boolean test(org.ovirt.vdsm.jsonrpc.client.JsonRpcClient client) { return !(client.isClosed()); } }, "Waiting on opening connection for {}", "Done reconnecting for {}!"); } return new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withResponseKey("status"); }
private void generatePathLocator() { buffer.addImport(((BASE_PACKAGE) + ".Service")); buffer.addLine("Service service(String path);"); }
private void statelessVmTreatment() { warnIfNotAllDisksPermitSnapshots(); if (isStatelessSnapshotExistsForVm()) { org.ovirt.engine.core.bll.RunVmCommand.log.errorFormat("VM {0} ({1}) already contains stateless snapshot, removing it", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); removeVmStatlessImages(); } else { org.ovirt.engine.core.bll.RunVmCommand.log.infoFormat("Creating stateless snapshot for VM {0} ({1})", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters createAllSnapshotsFromVmParameters = buildCreateSnapshotParameters(); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = org.ovirt.engine.core.bll.RunVmCommand.getBackend().runInternalAction(VdcActionType.CreateAllSnapshotsFromVm, createAllSnapshotsFromVmParameters, createContextForStatelessSnapshotCreation()); org.ovirt.engine.core.bll.RunVmCommand.setLock(null); setSucceeded(vdcReturnValue.getSucceeded()); if (vdcReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.RunVmCommand.getReturnValue().getVdsmTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList()); org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(org.ovirt.engine.core.bll.RunVmCommand.getVm()); } else { if (areDisksLocked(vdcReturnValue)) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL); } org.ovirt.engine.core.bll.RunVmCommand.getReturnValue().setFault(vdcReturnValue.getFault()); org.ovirt.engine.core.bll.RunVmCommand.log.errorFormat("Failed to create stateless snapshot for VM {0} ({1})", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); } } }
protected org.ovirt.engine.core.compat.Guid initVds() { org.ovirt.engine.core.compat.Guid selectedVdsId = (resume) ? org.ovirt.engine.core.bll.RunVmCommand.getVm().getRunOnVds() : org.ovirt.engine.core.bll.RunVmCommand.schedule(); initVds(selectedVdsId); return selectedVdsId; }




protected abstract org.ovirt.engine.sdk4.HttpClient createHttpClient() throws org.apache.http.ProtocolException;
@java.lang.Override protected org.ovirt.engine.sdk4.HttpClient createHttpClient() throws org.apache.http.ProtocolException { int port = getPort(); org.apache.http.config.Lookup<org.apache.http.auth.AuthSchemeProvider> authSchemeProvider = null; org.apache.http.client.CredentialsProvider credsProvider = new org.apache.http.impl.client.BasicCredentialsProvider(); org.apache.http.auth.AuthScope authScope = new org.apache.http.auth.AuthScope(getHost(), port, org.apache.http.auth.AuthScope.ANY_REALM, org.apache.http.auth.AuthScope.ANY_SCHEME); if (((user) != null) && ((user.length()) > 0)) { credsProvider.setCredentials(authScope, new org.apache.http.auth.UsernamePasswordCredentials(user, password)); } else if (kerberos) { authSchemeProvider = org.apache.http.config.RegistryBuilder.<org.apache.http.auth.AuthSchemeProvider>create().register(AuthSchemes.SPNEGO, new org.apache.http.impl.auth.SPNegoSchemeFactory(true)).build(); credsProvider.setCredentials(authScope, new org.apache.http.auth.Credentials() { @java.lang.Override public java.security.Principal getUserPrincipal() { return null; } @java.lang.Override public java.lang.String getPassword() { return null; } }); } org.apache.http.client.config.RequestConfig globalConfig = org.apache.http.client.config.RequestConfig.custom().setCookieSpec(CookieSpecs.IGNORE_COOKIES).setConnectTimeout(timeout).build(); org.apache.http.impl.client.HttpClientBuilder clientBuilder = org.apache.http.impl.client.HttpClientBuilder.create().setConnectionManager(new org.apache.http.impl.conn.BasicHttpClientConnectionManager(createConnectionSocketFactoryRegistry())).setDefaultRequestConfig(globalConfig).setDefaultCredentialsProvider(credsProvider).setDefaultAuthSchemeRegistry(authSchemeProvider); if (!(compress)) { clientBuilder.disableContentCompression(); } return new org.ovirt.engine.sdk4.internal.HttpClient45(clientBuilder.build()); }
private java.lang.String getProxyUri() { return (((org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.ImageProxyURL)) + ":") + (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ImageProxyPort))) + "/images"; }

@java.lang.Override protected void setActionMessageParameters() { switch (getParameters().getAction()) { case START : addCanDoActionMessage(VdcBllMessages.VAR__ACTION__START); break; default : break; } addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_BRICK); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (!(getGlusterVolume().isOnline())) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN); return false; } if (((getParameters().getExistingBrick()) == null) || ((getParameters().getNewBrick()) == null)) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED); return false; } if (!(updateBrickServerAndInterfaceName(getParameters().getExistingBrick(), true))) { return false; } if (!(updateBrickServerAndInterfaceName(getParameters().getNewBrick(), true))) { return false; } if (!(isValidVolumeBrick(getParameters().getExistingBrick()))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NOT_A_GLUSTER_VOLUME_BRICK); return false; } return true; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.ReplaceGlusterVolumeBrick, new org.ovirt.engine.core.common.vdscommands.gluster.ReplaceGlusterVolumeBrickActionVDSParameters(upServer.getId(), getGlusterVolumeName(), getParameters().getAction(), getParameters().getExistingBrick().getQualifiedName(), getParameters().getNewBrick().getQualifiedName(), getParameters().isForceAction())); if (getSucceeded()) { setSucceeded(returnValue.getSucceeded()); } else { handleVdsError(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, returnValue.getVdsError().getMessage()); return; } }

public static void addNetworkFiltersToNic(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.compat.Version clusterVersion) { if ((org.ovirt.engine.core.common.FeatureSupported.antiMacSpoofing(clusterVersion)) && (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableMACAntiSpoofingFilterRules))) { struct.put(VdsProperties.NW_FILTER, NetworkFilters.NO_MAC_SPOOFING.getFilterName()); } }
private void addNetworkInterfaceProperties(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VmNic vmInterface, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String nicModel, org.ovirt.engine.core.compat.Version clusterVersion) { struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); if (org.ovirt.engine.core.common.FeatureSupported.networkLinking(clusterVersion)) { struct.put(VdsProperties.LINK_ACTIVE, java.lang.String.valueOf(vmInterface.isLinked())); } org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); struct.put(VdsProperties.MAC_ADDR, vmInterface.getMacAddress()); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addBootOrder(vmDevice, struct); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); struct.put(VdsProperties.NIC_TYPE, nicModel); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addProfileDataToNic(struct, vm, vmDevice, vmInterface); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addNetworkFiltersToNic(struct, clusterVersion); }



@org.junit.Before public void setup() { validator = spy(new org.ovirt.engine.core.bll.validator.VnicProfileValidator(vmDao, vnicProfile)); doReturn(dbFacade).when(validator).getDbFacade(); when(dbFacade.getVnicProfileDao()).thenReturn(vnicProfileDao); when(dbFacade.getNetworkDao()).thenReturn(networkDao); when(dbFacade.getNetworkQosDao()).thenReturn(networkQosDao); when(dbFacade.getVmDao()).thenReturn(vmDao); when(vnicProfileDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vnicProfile); when(vnicProfileDao.getAllForNetwork(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vnicProfiles); }












@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (getPassthrough().getEntity()) { getPortMirroring().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().portMirroringNotChangedIfPassthrough()); getPortMirroring().setIsChangeable(false); getPortMirroring().setEntity(false); getNetworkQoS().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().networkQosNotChangedIfPassthrough()); getNetworkQoS().setIsChangeable(false); getNetworkQoS().setSelectedItem(NetworkQoSModel.EMPTY_QOS); } else { getPortMirroring().setIsChangeable(true); getNetworkQoS().setIsChangeable(true); } }
private void initPassthroughChangeListener() { getPassthrough().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (getPassthrough().getEntity()) { getPortMirroring().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().portMirroringNotChangedIfPassthrough()); getPortMirroring().setIsChangeable(false); getPortMirroring().setEntity(false); getNetworkQoS().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().networkQosNotChangedIfPassthrough()); getNetworkQoS().setIsChangeable(false); getNetworkQoS().setSelectedItem(NetworkQoSModel.EMPTY_QOS); } else { getPortMirroring().setIsChangeable(true); getNetworkQoS().setIsChangeable(true); } } }); }



@java.lang.Override protected void init() { disk = loadDisk(org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getParameters().getEntityInfo().getId()); }
protected boolean addVmImages() { if (!(vmDisksSource.getDiskTemplateMap().isEmpty())) { if ((org.ovirt.engine.core.bll.AddVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { log.error("Cannot add images. VM is not Down"); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IRS_IMAGE_STATUS_ILLEGAL); } org.ovirt.engine.core.bll.VmHandler.lockVm(org.ovirt.engine.core.bll.AddVmCommand.getVmId()); java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDisks = getImagesToCheckDestinationStorageDomains(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(templateDisks, true, false, true); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : diskImages) { org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalActionWithTasksContext(VdcActionType.CreateSnapshotFromTemplate, buildCreateSnapshotFromTemplateParameters(image)); if (!(result.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(result.getFault().getError()); } else { org.ovirt.engine.core.bll.AddVmCommand.getTaskIdList().addAll(result.getInternalVdsmTaskIdList()); org.ovirt.engine.core.common.businessentities.storage.DiskImage newImage = result.getActionReturnValue(); srcDiskIdToTargetDiskIdMapping.put(image.getId(), newImage.getId()); } } addVmCinderDisks(templateDisks); } return true; }



public void getMigrationPolicies(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object returnValue, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { if (returnValue == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.migration.MigrationPolicy>(); } return returnValue; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllMigrationPolicies, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }
@java.lang.Override public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem) { super.initialize(systemTreeSelectedItem); getModel().getIsSoundcardEnabled().setIsChangeable(true); getModel().getVmType().setIsChangeable(true); getModel().getVmId().setIsAvailable(true); loadDataCenters(); initPriority(0); getModel().getVmInitModel().init(null); instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.NewVmInstanceTypeManager(getModel()); }
static org.ovirt.engine.core.common.businessentities.network.BondMode parseBondMode(java.lang.String bondOptions) { return bondOptions == null ? null : org.ovirt.engine.core.common.businessentities.network.BondMode.getBondMode(org.ovirt.engine.core.common.businessentities.network.BondMode.findMode(bondOptions)); }
protected org.ovirt.engine.core.common.businessentities.storage.Disk getOldDisk() { if ((oldDisk) == null) { oldDisk = org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskDao().get(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getParameters().getDiskId()); } return oldDisk; }


private java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> getSafeHtmlStringMap(org.ovirt.engine.core.common.businessentities.VDS object) { org.ovirt.engine.core.common.businessentities.VDS host = getEntityObject(object); java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = new java.util.LinkedHashMap<>(); org.ovirt.engine.core.common.businessentities.ExternalStatus externalStatus = host.getExternalStatus(); if (host.isUpdateAvailable()) { imagesToText.put(getImageSafeHtml(resources.updateAvailableImage()), org.ovirt.engine.ui.webadmin.widget.table.column.HostAdditionalStatusColumn.constants.updateAvailable()); } if ((externalStatus != null) && ((host.getExternalStatus()) != (org.ovirt.engine.core.common.businessentities.ExternalStatus.Ok))) { com.google.gwt.resources.client.ImageResource statusImage = getStatusImage(externalStatus); if (statusImage != null) { imagesToText.put(getImageSafeHtml(statusImage), ((org.ovirt.engine.ui.webadmin.widget.table.column.HostAdditionalStatusColumn.constants.ExternalStatus()) + (externalStatus.name()))); } } return imagesToText; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Version.class, to = org.ovirt.engine.api.model.Version.class) public static org.ovirt.engine.api.model.Version map(org.ovirt.engine.core.compat.Version versionEngine, org.ovirt.engine.api.model.Version versionApi) { if (versionApi == null) { versionApi = new org.ovirt.engine.api.model.Version(); } versionApi.setMajor(versionEngine.getMajor()); versionApi.setMinor(versionEngine.getMinor()); versionApi.setBuild(versionEngine.getBuild()); versionApi.setRevision(versionEngine.getRevision()); return versionApi; }

@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DataCenter.class, to = org.ovirt.engine.core.common.businessentities.StoragePool.class) public static org.ovirt.engine.core.common.businessentities.StoragePool map(org.ovirt.engine.api.model.DataCenter model, org.ovirt.engine.core.common.businessentities.StoragePool template) { org.ovirt.engine.core.common.businessentities.StoragePool entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.StoragePool(); if (model.isSetId()) { entity.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.setName(model.getName()); } if (model.isSetDescription()) { entity.setdescription(model.getDescription()); } if (model.isSetComment()) { entity.setComment(model.getComment()); } if (model.isSetLocal()) { entity.setIsLocal(model.isLocal()); } if (model.isSetStorageFormat()) { entity.setStoragePoolFormatType(org.ovirt.engine.api.restapi.types.StorageFormatMapper.map(model.getStorageFormat(), null)); } if (((model.isSetVersion()) && ((model.getVersion().getMajor()) != null)) && ((model.getVersion().getMinor()) != null)) { entity.setCompatibilityVersion(new org.ovirt.engine.core.compat.Version(model.getVersion().getMajor(), model.getVersion().getMinor())); } if ((model.isSetMacPool()) && (model.getMacPool().isSetId())) { entity.setMacPoolId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getMacPool().getId())); } if (model.isSetQuotaMode()) { entity.setQuotaEnforcementType(org.ovirt.engine.api.restapi.types.DataCenterMapper.map(model.getQuotaMode())); } return entity; }



@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Provider<?>> getAllByType(org.ovirt.engine.core.common.businessentities.ProviderType providerType) { return getCallsHandler().executeReadList("GetAllFromProvidersByType", org.ovirt.engine.core.dao.provider.ProviderDaoImpl.ProviderRowMapper.INSTANCE, getCustomMapSqlParameterSource().addValue("provider_type", providerType.toString())); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.ProviderType providerType = org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getParameters().getProviderType(); if (providerType == null) { setReturnValue(org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getDbFacade().getProviderDao().getAll()); } else { setReturnValue(org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getDbFacade().getProviderDao().getAllByType(providerType)); } }

private void adjustRemoveExternalOptions(java.util.Set<org.ovirt.engine.core.compat.Guid> externalProviderIds) { if (externalProviderIds.isEmpty()) { return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllProviders, new org.ovirt.engine.core.common.queries.GetAllProvidersParameters(org.ovirt.engine.core.common.businessentities.ProviderType.EXTERNAL_NETWORK), createProviderReadOnlyCallback(externalProviderIds)); }

private java.util.Map<java.lang.String, java.lang.Object> buildVmGraphicsSpecParamsFromVm(java.util.Map<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.GraphicsInfo> infos) { java.util.Map<java.lang.String, java.lang.Object> specParamsFromVm = null; if ((infos != null) && (infos.containsKey(GraphicsType.SPICE))) { specParamsFromVm = new java.util.HashMap(); addVmSpiceOptions(infos, specParamsFromVm); } return specParamsFromVm; }
protected void addVmSpiceOptions(java.util.Map<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.GraphicsInfo> infos, java.util.Map<java.lang.String, java.lang.Object> params) { if ((infos != null) && (infos.containsKey(GraphicsType.SPICE))) { params.put(VdsProperties.spiceFileTransferEnable, java.lang.Boolean.toString(vm.isSpiceFileTransferEnabled())); params.put(VdsProperties.spiceCopyPasteEnable, java.lang.Boolean.toString(vm.isSpiceCopyPasteEnabled())); } }


@java.lang.Override public javax.ws.rs.core.Response install(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters(vds.getStaticData(), action.getRootPassword(), true); params = ((org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters) (getMapper(org.ovirt.engine.api.model.Action.class, org.ovirt.engine.core.common.action.VdsOperationActionParameters.class).map(action, params))); if (vds.isOvirtNode()) { params.setReinstallOrUpgrade(true); if (action.isSetImage()) { params.setoVirtIsoFile(action.getImage()); return doAction(VdcActionType.UpgradeOvirtNode, params, action); } } return doAction(VdcActionType.UpdateVds, params, action); }


@org.junit.Test public void testQueryWithHostId() { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(vdsId); vds.setVdsType(VDSType.oVirtNode); vds.setHostOs(org.ovirt.engine.core.bll.hostdeploy.GetoVirtISOsTest.AVAILABLE_OVIRT_ISO_VERSION); vds.setClusterCompatibilityVersion(org.ovirt.engine.core.bll.hostdeploy.GetoVirtISOsTest.EXISTING_CLUSTER_VERSION); when(vdsDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vds); when(getQueryParameters().getId()).thenReturn(vdsId); getQuery().setInternalExecution(true); getQuery().executeCommand(); org.ovirt.engine.core.bll.CommandAssertUtils.checkSucceeded(getQuery(), true); org.ovirt.engine.core.bll.hostdeploy.GetoVirtISOsTest.checkReturnValueEmpty(getQuery()); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VDSType getHostType() { return org.ovirt.engine.core.common.businessentities.VDSType.oVirtNode; }
@org.junit.Test public void testQueryClusterLevel() { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(vdsId); vds.setVdsType(VDSType.oVirtNode); vds.setHostOs(org.ovirt.engine.core.bll.hostdeploy.GetoVirtISOsTest.UNAVAILABLE_OVIRT_ISO_VERSION); vds.setClusterCompatibilityVersion(org.ovirt.engine.core.bll.hostdeploy.GetoVirtISOsTest.EXISTING_CLUSTER_VERSION); when(vdsDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vds); when(getQueryParameters().getId()).thenReturn(vdsId); getQuery().setInternalExecution(true); getQuery().executeCommand(); org.ovirt.engine.core.bll.CommandAssertUtils.checkSucceeded(getQuery(), true); org.ovirt.engine.core.bll.hostdeploy.GetoVirtISOsTest.checkReturnValueEmpty(getQuery()); }
@org.junit.Test public void testGetAllOfTypeWithUnrepresentedType() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = dao.getAllOfType(VDSType.oVirtNode); org.ovirt.engine.core.dao.VdsDaoTest.assertIncorrectGetResult(result); }
@org.junit.Test public void testGetAllOfTypesWithUnrepresentedTypes() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = dao.getAllOfTypes(new org.ovirt.engine.core.common.businessentities.VDSType[]{ org.ovirt.engine.core.common.businessentities.VDSType.oVirtNode }); org.ovirt.engine.core.dao.VdsDaoTest.assertIncorrectGetResult(result); }
public boolean isOvirtNode() { return (getVdsType()) == (VDSType.oVirtNode); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.VDSType.class, to = org.ovirt.engine.api.model.HostType.class) public static org.ovirt.engine.api.model.HostType map(org.ovirt.engine.core.common.businessentities.VDSType type, org.ovirt.engine.api.model.HostType template) { switch (type) { case VDS : return org.ovirt.engine.api.model.HostType.RHEL; case oVirtNode : return org.ovirt.engine.api.model.HostType.RHEV_H; default : return null; } }
public java.lang.Boolean call() throws java.lang.Exception { if (((java.lang.Boolean) (_deploy.getParser().cliEnvironmentGet(VdsmEnv.OVIRT_NODE)))) { _deploy.userVisibleLog(java.util.logging.Level.INFO, "Host is hypervisor"); setNode(); } return true; }
@org.junit.Test public void imageProvidedForOvirtNode() { when(host.getVdsType()).thenReturn(VDSType.oVirtNode); java.lang.String imageName = org.ovirt.engine.core.utils.RandomUtils.instance().nextString(20); assertThat(validator.imageProvidedForOvirtNode(imageName), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
private void setNode() { _isNode = true; _deploy.getVds().setVdsType(VDSType.oVirtNode); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsStaticDao().update(_deploy.getVds().getStaticData()); return null; }); }
private org.ovirt.engine.core.bll.host.UpdateAvailable create(org.ovirt.engine.core.common.businessentities.VDSType hostType) { for (org.ovirt.engine.core.bll.host.UpdateAvailable hostUpdater : hostUpdaters) { if (hostType == (hostUpdater.getHostType())) { return hostUpdater; } } org.ovirt.engine.core.bll.host.AvailableUpdatesFinder.log.error("Cannot instantiate host available strategy for unknown host type '{}'", hostType); throw new java.lang.RuntimeException("Cannot instantiate host available strategy for unknown host type"); }
org.ovirt.engine.core.common.businessentities.VDSType getHostType();
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VDSType getHostType() { return org.ovirt.engine.core.common.businessentities.VDSType.oVirtLegacyNode; }
public org.ovirt.engine.core.bll.ValidationResult updatesAvailable() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.NO_AVAILABLE_UPDATES_FOR_HOST).unless(((host.isOvirtLegacyNode()) || (host.isUpdateAvailable()))); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VDSType getHostType() { return org.ovirt.engine.core.common.businessentities.VDSType.VDS; }


@java.lang.Override protected void onPropertyChanged(PropertyChangedEventArgs e) { super.onPropertyChanged(e); if ((e.propertyName.equals("Disks")) || (e.propertyName.equals(DisksAllocationModel.VOLUME_TYPE))) { updateStorageDomainsAvailability(); updateQuotaAvailability(); } }
private void updateStorageDomainsAvailability() { if ((disks) == null) { return; } for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : disks) { diskModel.getSourceStorageDomain().setIsAvailable(isSourceStorageDomainAvailable); diskModel.getSourceStorageDomainName().setIsAvailable(isSourceStorageDomainNameAvailable); diskModel.getVolumeType().setIsAvailable(isVolumeTypeAvailable); diskModel.getVolumeType().setIsChangeable(isVolumeTypeChangable); diskModel.getAlias().setIsChangeable(isAliasChangable); } }

@java.lang.Override public void provisioning_SelectedItemChanged() { boolean provisioning = getModel().getProvisioning().getEntity(); getModel().getProvisioningThin_IsSelected().setEntity((!provisioning)); getModel().getProvisioningClone_IsSelected().setEntity(provisioning); getModel().getDisksAllocationModel().setIsVolumeTypeAvailable(true); getModel().getDisksAllocationModel().setIsVolumeTypeChangable(provisioning); getModel().getDisksAllocationModel().setIsAliasChangable(true); initStorageDomains(); }
public void enablePluginInvocation() { canInvokePlugins = true; com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { for (org.ovirt.engine.ui.webadmin.plugin.Plugin plugin : getPlugins()) { initPlugin(plugin); } } }); }
@java.lang.Override public void execute() { for (org.ovirt.engine.ui.webadmin.plugin.Plugin plugin : getPlugins()) { initPlugin(plugin); } }
private java.util.Map<java.lang.String, java.lang.Object> getQxlVideoDeviceSpecParams(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { java.util.Map<java.lang.String, java.lang.Object> specParams = new java.util.HashMap<>(); int heads = (vmBase.getSingleQxlPci()) ? vmBase.getNumOfMonitors() : 1; int vgamem = (org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoRAMSettings.BASE_RAM_SIZE) * heads; int vramMultiplier = getVramMultiplier(vmBase); int vram = (vramMultiplier == 0) ? org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoRAMSettings.DEFAULT_VRAM_SIZE : vramMultiplier * vgamem; specParams.put(VdsProperties.VIDEO_HEADS, java.lang.String.valueOf(heads)); specParams.put(VdsProperties.VIDEO_VGAMEM, java.lang.String.valueOf(vgamem)); specParams.put(VdsProperties.VIDEO_RAM, java.lang.String.valueOf(((org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoRAMSettings.RAM_MULTIPLIER) * vgamem))); specParams.put(VdsProperties.VIDEO_VRAM, java.lang.String.valueOf(vram)); return specParams; }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.Object> getVideoDeviceSpecParams(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { java.util.Map<java.lang.String, java.lang.Object> specParams = new java.util.HashMap<>(); boolean singleQxlPci = vmBase.getSingleQxlPci(); int numOfMonitors = vmBase.getNumOfMonitors(); int heads = (singleQxlPci) ? numOfMonitors : 1; specParams.put(VdsProperties.VIDEO_HEADS, java.lang.String.valueOf(heads)); specParams.put(VdsProperties.VIDEO_VRAM, java.lang.String.valueOf(org.ovirt.engine.core.bll.utils.VideoDeviceSettings.LegacyVideoRAMSettings.VRAM_SIZE)); if (singleQxlPci) { specParams.put(VdsProperties.VIDEO_RAM, java.lang.String.valueOf(((org.ovirt.engine.core.bll.utils.VideoDeviceSettings.LegacyVideoRAMSettings.BASE_RAM_SIZE) * heads))); } return specParams; }

private java.util.Map<java.lang.String, java.lang.Object> getVgaVideoDeviceSpecParams() { return java.util.Collections.singletonMap(VdsProperties.VIDEO_VRAM, java.lang.String.valueOf(org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoRAMSettings.BASE_RAM_SIZE)); }

public static java.util.Map<java.lang.String, java.lang.Object> getVideoDeviceSpecParams(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return VideoDeviceSettings.selectVideoRAMSettings(vmBase).getVideoDeviceSpecParams(vmBase); }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.Object> getVideoDeviceSpecParams(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { if ((vmBase.getDefaultDisplayType()) == (org.ovirt.engine.core.common.businessentities.DisplayType.qxl)) { return getQxlVideoDeviceSpecParams(vmBase); } else { return getVgaVideoDeviceSpecParams(); } }
public abstract java.util.Map<java.lang.String, java.lang.Object> getVideoDeviceSpecParams(org.ovirt.engine.core.common.businessentities.VmBase vmBase);
private boolean validateStorage() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> vmDisksList = getDisksListForChecks(); vmDisksList = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDisksDummiesForStorageAllocations(vmDisksList); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = new java.util.ArrayList(vmDisksList); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> memoryDisksList = null; if (org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().isSaveMemory()) { memoryDisksList = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm().getTotalMemorySizeInBytes(), MemoryUtils.METADATA_SIZE_IN_BYTES); if (Guid.Empty.equals(getStorageDomainIdForVmMemory(memoryDisksList))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_NO_SUITABLE_DOMAIN_FOUND); } allDisks.addAll(memoryDisksList); } org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator sdValidator = createMultipleStorageDomainsValidator(allDisks); if (((!(validate(sdValidator.allDomainsExistAndActive()))) || (!(validate(sdValidator.allDomainsWithinThresholds())))) || (!(validateCinder()))) { return false; } if (memoryDisksList == null) { return validate(sdValidator.allDomainsHaveSpaceForNewDisks(vmDisksList)); } return validate(sdValidator.allDomainsHaveSpaceForAllDisks(vmDisksList, memoryDisksList)); }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getMemoryVolumes() { int numOfSnapshots = snapshotsWithMemory.size(); long memorySize = numOfSnapshots * (org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm().getTotalMemorySizeInBytes()); long metadataSize = numOfSnapshots * (org.ovirt.engine.core.bll.memory.MemoryUtils.METADATA_SIZE_IN_BYTES); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> memoryDisksList = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies(memorySize, metadataSize); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> sdId = new java.util.ArrayList(java.util.Collections.singletonList(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getStorageDomainId())); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : memoryDisksList) { diskImage.setStorageIds(sdId); } return memoryDisksList; }
private org.ovirt.engine.core.common.businessentities.StorageDomain updateStorageDomainInMemoryVolumes(java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksList) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> memoryDisksList = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getTotalMemorySizeInBytes(), MemoryUtils.METADATA_SIZE_IN_BYTES); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.memory.MemoryStorageHandler.getInstance().findStorageDomainForMemory(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getStoragePoolId(), memoryDisksList, getVmDisksDummies(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm()); disksList.addAll(memoryDisksList); return storageDomain; }
public static org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); image.setSize(vm.getTotalMemorySizeInBytes()); image.setVolumeType(org.ovirt.engine.core.bll.memory.MemoryUtils.storageTypeToMemoryVolumeType(storageType)); image.setvolumeFormat(VolumeFormat.RAW); image.setDiskInterface(DiskInterface.VirtIO); return image; }
@java.lang.Override public org.ovirt.engine.core.compat.Guid getStorageDomainId() { if ((cachedStorageDomainId) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskDummiesForMemSize = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies(org.ovirt.engine.core.bll.HibernateVmCommand.getVm().getTotalMemorySizeInBytes(), MemoryUtils.METADATA_SIZE_IN_BYTES); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.memory.MemoryStorageHandler.getInstance().findStorageDomainForMemory(org.ovirt.engine.core.bll.HibernateVmCommand.getStoragePoolId(), diskDummiesForMemSize, org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.HibernateVmCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.HibernateVmCommand.getVmId()), false, false, false), org.ovirt.engine.core.bll.HibernateVmCommand.getVm()); if (storageDomain != null) { cachedStorageDomainId = storageDomain.getId(); } } return cachedStorageDomainId; }
protected org.codehaus.jackson.node.ObjectNode getUserInfoObject(org.ovirt.engine.core.common.businessentities.aaa.DbUser loggedInUser) { org.codehaus.jackson.node.ObjectNode obj = createObjectNode(); obj.put("id", loggedInUser.getId().toString()); obj.put("userName", loggedInUser.getLoginName()); obj.put("domain", loggedInUser.getDomain()); return obj; }
public <T extends org.ovirt.engine.ui.uicommonweb.restapi.HasForeignMenuData> T withSessionId(T consoleImpl) { consoleImpl.setSessionId(sessionId); return consoleImpl; }
protected org.codehaus.jackson.node.ObjectNode getEngineSessionTimeoutObject(java.lang.Integer engineSessionTimeout, java.lang.Integer userSessionHardLimit) { org.codehaus.jackson.node.ObjectNode obj = createObjectNode(); obj.put("sessionTimeout", java.lang.String.valueOf(engineSessionTimeout)); obj.put("sessionHardLimit", java.lang.String.valueOf(userSessionHardLimit)); return obj; }
public static void main(java.lang.String[] args) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url("https://engine40.example.com/ovirt-engine/api").user("admin@internal").password("redhat123").trustStoreFile("truststore.jks").build(); org.ovirt.engine.sdk4.services.StorageDomainsService sdsService = connection.systemService().storageDomainsService(); org.ovirt.engine.sdk4.types.StorageDomain sd = sdsService.list().search("name=mydata").send().storageDomains().get(0); org.ovirt.engine.sdk4.services.DataCentersService dcsService = connection.systemService().dataCentersService(); org.ovirt.engine.sdk4.types.DataCenter dc = dcsService.list().search("name=mydc").send().dataCenters().get(0); org.ovirt.engine.sdk4.services.DataCenterService dcService = dcsService.dataCenterService(dc.id()); org.ovirt.engine.sdk4.services.AttachedStorageDomainsService attachedSdsService = dcService.storageDomainsService(); attachedSdsService.add().storageDomain(storageDomain().id(sd.id())).send(); org.ovirt.engine.sdk4.services.StorageDomainService sdService = sdsService.storageDomainService(sd.id()); for (; ;) { java.lang.Thread.sleep((5 * 1000)); sd = sdService.get().send().storageDomain(); java.lang.String state = sd.status().state(); if ("active".equals(state)) { break; } } connection.close(); }
public static void main(java.lang.String[] args) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url("https://engine40.example.com/ovirt-engine/api").user("admin@internal").password("redhat123").trustStoreFile("truststore.jks").build(); org.ovirt.engine.sdk4.services.VmsService vmsService = connection.systemService().vmsService(); org.ovirt.engine.sdk4.types.Vm vm = vmsService.list().search("name=myvm").send().vms().get(0); org.ovirt.engine.sdk4.services.VmDisksService disksService = vmsService.vmService(vm.id()).disksService(); org.ovirt.engine.sdk4.types.Disk disk = disksService.add().disk(disk().name("mydisk").description("My disk").interface_(DiskInterface.VIRTIO).format(DiskFormat.COW).provisionedSize((1 * ((int) (java.lang.Math.pow(2, 20))))).storageDomains(storageDomain().name("myadata"))).send().disk(); org.ovirt.engine.sdk4.services.VmDiskService diskService = disksService.diskService(disk.id()); for (; ;) { java.lang.Thread.sleep((5 * 1000)); disk = diskService.get().send().disk(); java.lang.String state = disk.status().state(); if ("unattached".equals(state)) { break; } } connection.close(); }
public static void main(java.lang.String[] args) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url("https://engine40.example.com/ovirt-engine/api").user("admin@internal").password("redhat123").trustStoreFile("truststore.jks").build(); org.ovirt.engine.sdk4.services.StorageDomainsService sdsService = connection.systemService().storageDomainsService(); org.ovirt.engine.sdk4.types.StorageDomain sd = sdsService.list().search("name=myiso").send().storageDomains().get(0); org.ovirt.engine.sdk4.services.DataCentersService dcsService = connection.systemService().dataCentersService(); org.ovirt.engine.sdk4.types.DataCenter dc = dcsService.list().search("name=mydc").send().dataCenters().get(0); org.ovirt.engine.sdk4.services.DataCenterService dcService = dcsService.dataCenterService(dc.id()); org.ovirt.engine.sdk4.services.AttachedStorageDomainsService attachedSdsService = dcService.storageDomainsService(); attachedSdsService.add().storageDomain(storageDomain().id(sd.id())).send(); org.ovirt.engine.sdk4.services.StorageDomainService sdService = sdsService.storageDomainService(sd.id()); for (; ;) { java.lang.Thread.sleep((5 * 1000)); sd = sdService.get().send().storageDomain(); java.lang.String state = sd.status().state(); if ("active".equals(state)) { break; } } connection.close(); }
public static void main(java.lang.String[] args) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url("https://engine40.example.com/ovirt-engine/api").user("admin@internal").password("redhat123").trustStoreFile("truststore.jks").build(); org.ovirt.engine.sdk4.services.HostsService hostsService = connection.systemService().hostsService(); org.ovirt.engine.sdk4.types.Host host = hostsService.add().host(host().name("myhost").description("My host").address("node40.example.com").rootPassword("readhat123").cluster(cluster().name("mycluster"))).send().host(); org.ovirt.engine.sdk4.services.HostService hostService = hostsService.hostService(host.id()); for (; ;) { java.lang.Thread.sleep((5 * 1000)); host = hostService.get().send().host(); java.lang.String state = host.status().state(); if ("up".equals(state)) { break; } } connection.close(); }
public static void main(java.lang.String[] args) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url("https://engine40.example.com/ovirt-engine/api").user("admin@internal").password("redhat123").trustStoreFile("truststore.jks").build(); org.ovirt.engine.sdk4.services.VmsService vmsService = connection.systemService().vmsService(); org.ovirt.engine.sdk4.types.Vm vm = vmsService.list().search("name=myvm").send().vms().get(0); org.ovirt.engine.sdk4.services.VmService vmService = vmsService.vmService(vm.id()); vmService.stop().send(); for (; ;) { java.lang.Thread.sleep((5 * 1000)); vm = vmService.get().send().vm(); java.lang.String state = vm.status().state(); if ("down".equals(state)) { break; } } connection.close(); }
private boolean executeWithoutTransaction() { boolean functionReturnValue = false; boolean exceptionOccurred = true; try { logRunningCommand(); if (hasTaskHandlers()) { getCurrentTaskHandler().execute(); } else { executeCommand(); } functionReturnValue = getSucceeded(); exceptionOccurred = false; } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Command '{}' failed: {}", getClass().getName(), e.getMessage()); log.debug("Exception", e); processExceptionToClient(new org.ovirt.engine.core.common.errors.EngineFault(e, e.getVdsError().getCode())); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { if (_returnValue.getExecuteFailedMessages().isEmpty()) { processExceptionToClient(new org.ovirt.engine.core.common.errors.EngineFault(e, org.ovirt.engine.core.common.errors.EngineError.ENGINE)); } log.error("Command '{}' failed: {}", getClass().getName(), e.getMessage()); log.error("Exception", e); } catch (java.lang.RuntimeException e) { processExceptionToClient(new org.ovirt.engine.core.common.errors.EngineFault(e, org.ovirt.engine.core.common.errors.EngineError.ENGINE)); log.error("Command '{}' failed: {}", getClass().getName(), e.getMessage()); log.error("Exception", e); } finally { if (!exceptionOccurred) { setCommandExecuted(); } if (exceptionOccurred || (!(getSucceeded()))) { setSucceeded(false); compensate(); setCommandStatus(CommandStatus.FAILED); } else { if (((((getTaskType()) == (org.ovirt.engine.core.common.asynctasks.AsyncTaskType.notSupported)) && (getReturnValue().getVdsmTaskIdList().isEmpty())) && ((getCallback()) == null)) && ((commandStatus) == (org.ovirt.engine.core.compat.CommandStatus.ACTIVE))) { setCommandStatus(CommandStatus.ENDED_SUCCESSFULLY); } cleanUpCompensationData(); } } return functionReturnValue; }
private org.ovirt.engine.core.bll.context.CompensationContext createCompensationContext(org.ovirt.engine.core.compat.TransactionScopeOption transactionScopeOption, boolean forceCompensation) { if ((transactionScopeOption == (org.ovirt.engine.core.compat.TransactionScopeOption.Suppress)) && (!forceCompensation)) { return org.ovirt.engine.core.bll.context.NoOpCompensationContext.getInstance(); } return createDefaultCompensationContext(commandId); }
private org.ovirt.engine.core.common.action.ImagesContainterParametersBase getCinderDiskSnapshotParameter(org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk) { org.ovirt.engine.core.common.action.ImagesContainterParametersBase removeCinderSnapshotParams = new org.ovirt.engine.core.common.action.ImagesContainterParametersBase(cinderDisk.getImageId()); removeCinderSnapshotParams.setDestinationImageId(cinderDisk.getImageId()); removeCinderSnapshotParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); removeCinderSnapshotParams.setParentCommand(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllCinderSnapshotDisksCommand.getActionType()); removeCinderSnapshotParams.setParentParameters(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllCinderSnapshotDisksCommand.getParameters()); removeCinderSnapshotParams.setShouldBeEndedByParent(false); return removeCinderSnapshotParams; }
public org.ovirt.engine.core.common.action.CreateOvfVolumeForStorageDomainCommandParameters createCreateOvfVolumeForStorageDomainParams() { org.ovirt.engine.core.common.action.CreateOvfVolumeForStorageDomainCommandParameters parameters = new org.ovirt.engine.core.common.action.CreateOvfVolumeForStorageDomainCommandParameters(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getParameters().getStorageDomainId()); parameters.setSkipDomainChecks(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getParameters().isSkipDomainChecks()); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getParameters()); parameters.setShouldBeEndedByParent(false); return parameters; }

private org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters buildRemoveCinderSnapshotDiskParameters(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks) { org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters params = new org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters(); params.setCinderDisks(cinderDisks); params.setParentCommand(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getActionType()); params.setParentParameters(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters()); params.setSessionId(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getSessionId()); params.setInvokeEndActionOnParent(false); params.setShouldBeEndedByParent(false); return params; }
private java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> removeCinderDisks() { java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> failedRemoveCinderDisks = null; if (org.ovirt.engine.core.bll.RemoveVmCommand.getParameters().isRemoveDisks()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = getCinderDisks(); if (cinderDisks.isEmpty()) { return java.util.Collections.emptyList(); } org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters param = new org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters(org.ovirt.engine.core.bll.RemoveVmCommand.getVmId(), cinderDisks); param.setShouldBeEndedByParent(false); java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> future = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveAllVmCinderDisks, withRootCommandInfo(param), org.ovirt.engine.core.bll.RemoveVmCommand.cloneContextAndDetachFromParent()); try { failedRemoveCinderDisks = future.get().getActionReturnValue(); } catch (java.lang.InterruptedException | java.util.concurrent.ExecutionException e) { failedRemoveCinderDisks = cinderDisks; log.error("Exception", e); } } return failedRemoveCinderDisks; }
private org.ovirt.engine.core.common.action.ConvertVmParameters buildConvertVmParameters() { org.ovirt.engine.core.common.action.ConvertVmParameters parameters = new org.ovirt.engine.core.common.action.ConvertVmParameters(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()); parameters.setUrl(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getUrl()); parameters.setUsername(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getUsername()); parameters.setPassword(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getPassword()); parameters.setVmName(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmName()); parameters.setOriginType(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getOrigin()); parameters.setDisks(getDisks()); parameters.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStoragePoolId()); parameters.setStorageDomainId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStorageDomainId()); parameters.setProxyHostId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getProxyHostId()); parameters.setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getClusterId()); parameters.setVirtioIsoName(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getVirtioIsoName()); parameters.setShouldBeEndedByParent(false); return parameters; }
private org.ovirt.engine.core.common.action.VdcActionParametersBase buildExtendCinderDiskParameters(org.ovirt.engine.core.common.businessentities.storage.CinderDisk newCinderDisk) { org.ovirt.engine.core.common.action.UpdateVmDiskParameters parameters = new org.ovirt.engine.core.common.action.UpdateVmDiskParameters(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getVmId(), newCinderDisk.getId(), newCinderDisk); parameters.setParametersCurrentUser(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getParameters().getParametersCurrentUser()); parameters.setShouldBeEndedByParent(false); return parameters; }

public void handleChildCommands() { if ((getCallback()) != null) { java.util.List<org.ovirt.engine.core.compat.Guid> childCommands = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(getCommandId()); java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.LinkedList<>(); for (org.ovirt.engine.core.compat.Guid id : childCommands) { org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand(id); if (command.getParameters().getShouldBeEndedByParent()) { command.getParameters().setShouldBeEndedByParent(false); command.getParameters().setCommandType(command.getActionType()); parameters.add(command.getParameters()); } } getParameters().setImagesParameters(parameters); } }
public void startNextLiveMerge(int completedChildren) { if (completedChildren == 0) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImageSnapshotsStatus(getImageGroupId(), ImageStatus.LOCKED); } else { checkImageIdConsistency((completedChildren - 1)); } org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().get(completedChildren); org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.log.info("Starting child command {} of {}, image '{}'", (completedChildren + 1), org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().size(), imageId); org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters = buildRemoveSnapshotSingleDiskLiveParameters(imageId); parameters.setShouldBeEndedByParent(false); if ((org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getChildImageIds()) == null) { org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().setChildImageIds(java.util.Arrays.asList(new org.ovirt.engine.core.compat.Guid[org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().size()])); } org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getChildImageIds().set(completedChildren, parameters.getDestinationImageId()); persistCommand(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveSnapshotSingleDiskLive, parameters, org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.cloneContextAndDetachFromParent()); }
private org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters createProcessOvfUpdateForDomainParams() { org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters params = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getStoragePoolId(), org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getStorageDomainId()); params.setParentCommand(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getActionType()); params.setParentParameters(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getParameters()); params.setSkipDomainChecks(true); params.setShouldBeEndedByParent(false); return params; }
@java.lang.Override protected void executeCommand() { switch (getDisk().getDiskStorageType()) { case IMAGE : org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = runInternalActionWithTasksContext(VdcActionType.RemoveImage, buildRemoveImageParameters(getDiskImage())); if (vdcReturnValue.getSucceeded()) { incrementVmsGeneration(); org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.getReturnValue().getVdsmTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList()); org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.setSucceeded(true); } break; case LUN : removeLunDisk(); break; case CINDER : org.ovirt.engine.core.common.action.RemoveCinderDiskParameters params = new org.ovirt.engine.core.common.action.RemoveCinderDiskParameters(org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.getParameters().getDiskId()); params.setShouldBeEndedByParent(false); java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> future = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveCinderDisk, params, org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.cloneContextAndDetachFromParent()); try { setReturnValue(future.get()); setSucceeded(org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.getReturnValue().getSucceeded()); } catch (java.lang.InterruptedException | java.util.concurrent.ExecutionException e) { log.error("Error removing Cinder disk '{}': {}", getDiskImage().getDiskAlias(), e.getMessage()); log.debug("Exception", e); } break; } }
private org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters buildCreateSnapshotParametersForEndAction() { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters parameters = buildCreateSnapshotParameters(); parameters.setImagesParameters(org.ovirt.engine.core.bll.RunVmCommand.getParameters().getImagesParameters()); if (org.ovirt.engine.core.bll.RunVmCommand.getParameters().isUseCinderCommandCallback()) { parameters.setShouldBeEndedByParent(false); parameters.setCommandId(org.ovirt.engine.core.bll.RunVmCommand.getParametersForChildCommand().get(0).getCommandId()); } return parameters; }
private org.ovirt.engine.core.common.action.RestoreAllCinderSnapshotsParameters buildCinderChildCommandParameters(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisksToRestore, java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisksToRemove, java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderVolumesToRemove, org.ovirt.engine.core.compat.Guid removedSnapshotId) { org.ovirt.engine.core.common.action.RestoreAllCinderSnapshotsParameters restoreParams = new org.ovirt.engine.core.common.action.RestoreAllCinderSnapshotsParameters(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVmId(), cinderDisksToRestore, cinderDisksToRemove, cinderVolumesToRemove); restoreParams.setRemovedSnapshotId(removedSnapshotId); restoreParams.setSnapshot(getSnapshot()); restoreParams.setParentHasTasks((!(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getReturnValue().getVdsmTaskIdList().isEmpty()))); restoreParams.setParentCommand(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getActionType()); restoreParams.setParentParameters(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters()); restoreParams.setShouldBeEndedByParent(false); return withRootCommandInfo(restoreParams); }
private org.ovirt.engine.core.common.action.RemoveCinderDiskParameters buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk) { org.ovirt.engine.core.common.action.RemoveCinderDiskParameters removeDiskParams = new org.ovirt.engine.core.common.action.RemoveCinderDiskParameters(cinderDisk.getId()); removeDiskParams.setParentCommand(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getActionType()); removeDiskParams.setParentParameters(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getParameters()); removeDiskParams.setShouldBeLogged(false); removeDiskParams.setShouldBeEndedByParent(false); return removeDiskParams; }
private org.ovirt.engine.core.common.action.VdcActionParametersBase buildAddCinderDiskParameters() { org.ovirt.engine.core.common.action.AddDiskParameters parameters = new org.ovirt.engine.core.common.action.AddDiskParameters(); parameters.setDiskInfo(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getDiskInfo()); parameters.setPlugDiskToVm(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getPlugDiskToVm()); parameters.setVmId(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getVmId()); parameters.setStorageDomainId(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getStorageDomainId()); parameters.setQuotaId(getQuotaId()); parameters.setShouldBeEndedByParent(false); if ((org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getVm()) != null) { parameters.setVmSnapshotId(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getSnapshotDao().getId(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getVmId(), SnapshotType.ACTIVE)); } return parameters; }
private org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters buildRemoveSnapshotSingleDiskParameters(final org.ovirt.engine.core.common.businessentities.storage.DiskImage source, org.ovirt.engine.core.common.businessentities.storage.DiskImage dest) { org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters = new org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters(source.getImageId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVmId()); parameters.setDestinationImageId((dest != null ? dest.getImageId() : null)); parameters.setEntityInfo(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getParameters().getEntityInfo()); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getParameters()); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getActionType()); parameters.setCommandType(getSnapshotActionType()); parameters.setVdsId(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm().getRunOnVds()); parameters.setShouldBeEndedByParent((!(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm().isQualifiedForLiveSnapshotMerge()))); return parameters; }
private org.ovirt.engine.core.common.action.RemoveCinderDiskVolumeParameters createChildParams(org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDiskVolume) { org.ovirt.engine.core.common.action.RemoveCinderDiskVolumeParameters childParam = new org.ovirt.engine.core.common.action.RemoveCinderDiskVolumeParameters(cinderDiskVolume); childParam.setParentCommand(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderVolumeParentCommand.getActionType()); childParam.setParentParameters(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderVolumeParentCommand.getParameters()); childParam.setShouldBeEndedByParent(false); return childParam; }


private void endAction(org.ovirt.engine.core.bll.CommandBase<?> commandBase, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, boolean succeeded) { if (shouldExecuteEndMethod(commandBase)) { commandBase.endAction(); if ((commandBase.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.VdcActionType.Unknown)) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsInHierarchy(commandBase.getCommandId()); } org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(commandBase.getExecutionContext(), succeeded); } }



protected void addVmSpiceOptions(java.util.Map<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.GraphicsInfo> infos, java.util.Map<java.lang.String, java.lang.Object> params) { if ((infos != null) && (infos.containsKey(GraphicsType.SPICE))) { params.put(VdsProperties.spiceFileTransferEnable, java.lang.Boolean.toString(vm.isSpiceFileTransferEnabled())); params.put(VdsProperties.spiceCopyPasteEnable, java.lang.Boolean.toString(vm.isSpiceCopyPasteEnabled())); } }

@org.junit.Test public void testListAllContent() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations(null); java.util.List<java.lang.String> populates = new java.util.ArrayList<>(); populates.add("true"); expect(httpHeaders.getRequestHeader(BackendResource.POPULATE)).andReturn(populates).anyTimes(); setUpGetPayloadExpectations(3); setUpGetBallooningExpectations(3); setUpGetGraphicsExpectations(3); setUpGetConsoleExpectations(new int[]{ 0, 1, 2 }); setUpGetVmOvfExpectations(new int[]{ 0, 1, 2 }); setUpGetVirtioScsiExpectations(new int[]{ 0, 1, 2 }); setUpGetSoundcardExpectations(new int[]{ 0, 1, 2 }); setUpGetRngDeviceExpectations(new int[]{ 0, 1, 2 }); setUpGetCertuficateExpectations(3); setUpQueryExpectations(""); collection.setUriInfo(uriInfo); verifyCollection(getCollection()); }


@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> getVmDeviceByType(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type) { return getCallsHandler().executeReadList("GetVmDeviceByType", createEntityRowMapper(), getCustomMapSqlParameterSource().addValue("type", type.getValue())); }

private static void adjustDisplayDataInternal(org.ovirt.engine.api.restapi.resource.BackendResource backendResource, org.ovirt.engine.api.model.BaseResource res) { org.ovirt.engine.api.model.Display display = org.ovirt.engine.api.restapi.util.DisplayHelper.extractDisplayFromResource(res); if ((display != null) && (!(display.isSetType()))) { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsType> graphicsTypes = org.ovirt.engine.api.restapi.util.DisplayHelper.getGraphicsTypesForEntity(backendResource, new org.ovirt.engine.core.compat.Guid(res.getId())); if (graphicsTypes.contains(GraphicsType.SPICE)) { display.setType(DisplayType.SPICE.value()); } else if (graphicsTypes.contains(GraphicsType.VNC)) { display.setType(DisplayType.VNC.value()); } else { org.ovirt.engine.api.restapi.util.DisplayHelper.resetDisplay(res); } } }


private void testListAllConsoleAware(boolean allContent) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations(null); setUpGetGraphicsExpectations(3); if (allContent) { java.util.List<java.lang.String> populates = new java.util.ArrayList<>(); populates.add("true"); expect(httpHeaders.getRequestHeader(BackendResource.POPULATE)).andReturn(populates).anyTimes(); setUpGetPayloadExpectations(3); setUpGetBallooningExpectations(3); setUpGetConsoleExpectations(new int[]{ 0, 1, 2 }); setUpGetVmOvfExpectations(new int[]{ 0, 1, 2 }); setUpGetVirtioScsiExpectations(new int[]{ 0, 1, 2 }); setUpGetSoundcardExpectations(new int[]{ 0, 1, 2 }); setUpGetRngDeviceExpectations(new int[]{ 0, 1, 2 }); setUpGetCertuficateExpectations(3); } setUpQueryExpectations(""); collection.setUriInfo(uriInfo); verifyCollection(getCollection()); }

@java.lang.Override public org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { return super.createTask(taskId, asyncTaskCreationInfo, parentCommand); }




@java.lang.Override public void taskEndSuccessfully() { }
@java.lang.Override public void taskEndSuccessfully() { }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.bll.tasks.SPMAsyncTaskHandler> initTaskHandlers() { return java.util.Arrays.<org.ovirt.engine.core.bll.tasks.SPMAsyncTaskHandler>asList(new org.ovirt.engine.core.bll.storage.lsm.CreateImagePlaceholderTaskHandler(this), new org.ovirt.engine.core.bll.storage.lsm.VmReplicateDiskStartTaskHandler(this), new org.ovirt.engine.core.bll.storage.lsm.VmReplicateDiskFinishTaskHandler(this)); }

protected static boolean canAttachPrestartedVmToUser(org.ovirt.engine.core.compat.Guid vmId, java.util.List<java.lang.String> messages) { return (!(org.ovirt.engine.core.bll.VmPoolCommandBase.vmAssignedToUser(vmId, messages))) && (org.ovirt.engine.core.bll.VmPoolCommandBase.vmIsRunningStateless(vmId)); }
private org.ovirt.engine.core.compat.Guid getPrestartedVmToAttach(org.ovirt.engine.core.compat.Guid vmPoolId) { java.util.List<org.ovirt.engine.core.common.businessentities.VmPoolMap> vmPoolMaps = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPoolDao().getVmMapsInVmPoolByVmPoolIdAndStatus(vmPoolId, VMStatus.Up); if (vmPoolMaps != null) { for (org.ovirt.engine.core.common.businessentities.VmPoolMap map : vmPoolMaps) { if (canAttachPrestartedVmToUser(map.getVmId(), org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getReturnValue().getValidationMessages())) { return map.getVmId(); } } } return org.ovirt.engine.core.compat.Guid.Empty; }



@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, volumeId, serverId, brickDirectory, brickOrder, status, asyncTask); }
@java.lang.Override public org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBatchMapper() { return new org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>() { @java.lang.Override public org.springframework.jdbc.core.namedparam.MapSqlParameterSource map(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource paramValue = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource().addValue("volume_id", entity.getVolumeId()).addValue("server_id", entity.getServerId()).addValue("brick_dir", entity.getBrickDirectory()).addValue("status", entity.getStatus().name()).addValue("id", entity.getId().toString()).addValue("brick_order", entity.getBrickOrder()).addValue("network_id", entity.getNetworkId()).addValue("task_id", ((entity.getAsyncTask().getTaskId()) != null ? entity.getAsyncTask().getTaskId().toString() : "")); return paramValue; } }; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick.setId(getGuidDefaultEmpty(rs, "id")); brick.setVolumeId(getGuidDefaultEmpty(rs, "volume_id")); brick.setVolumeName(rs.getString("volume_name")); org.ovirt.engine.core.compat.Guid serverId = getGuidDefaultEmpty(rs, "server_id"); brick.setServerId(serverId); brick.setServerName(rs.getString("vds_name")); brick.setBrickDirectory(rs.getString("brick_dir")); brick.setBrickOrder(rs.getInt("brick_order")); brick.setStatus(org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.valueOf(rs.getString("status"))); brick.getAsyncTask().setTaskId(getGuid(rs, "task_id")); brick.setNetworkId(getGuid(rs, "network_id")); brick.setNetworkAddress(rs.getString("interface_address")); return brick; }

@java.lang.Override public org.springframework.jdbc.core.namedparam.MapSqlParameterSource map(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource paramValue = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource().addValue("volume_id", entity.getVolumeId()).addValue("server_id", entity.getServerId()).addValue("brick_dir", entity.getBrickDirectory()).addValue("status", entity.getStatus().name()).addValue("id", entity.getId().toString()).addValue("brick_order", entity.getBrickOrder()).addValue("network_id", entity.getNetworkId()).addValue("task_id", ((entity.getAsyncTask().getTaskId()) != null ? entity.getAsyncTask().getTaskId().toString() : "")); return paramValue; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity) (obj)); return ((((((java.util.Objects.equals(id, other.id)) && (java.util.Objects.equals(volumeId, other.volumeId))) && (java.util.Objects.equals(serverId, other.serverId))) && (java.util.Objects.equals(brickDirectory, other.brickDirectory))) && (java.util.Objects.equals(brickOrder, other.brickOrder))) && (java.util.Objects.equals(asyncTask, other.asyncTask))) && ((status) == (other.status)); }
public void copyFrom(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { setId(brick.getId()); setVolumeId(brick.getVolumeId()); setServerId(brick.getServerId()); setServerName(brick.getServerName()); setBrickDirectory(brick.getBrickDirectory()); setBrickOrder(brick.getBrickOrder()); setStatus(brick.getStatus()); }
protected org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters() { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters params = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getVmId(), "Auto-generated for Live Storage Migration"); params.setParentCommand(VdcActionType.LiveMigrateVmDisks); params.setSnapshotType(SnapshotType.REGULAR); params.setParentParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters()); params.setImagesParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getImagesParameters()); params.setTaskGroupSuccess(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getTaskGroupSuccess()); params.setDisks(getMovedDisks()); params.setDiskIdsToIgnoreInChecks(getMovedDiskIds()); params.setNeedsLocking(false); params.setEndProcedure(EndProcedure.COMMAND_MANAGED); return params; }
protected boolean validateImages() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesToValidate = getDiskImagesToValidate(); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(imagesToValidate); return (validate(diskImagesValidator.diskImagesNotLocked())) && ((org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm().isQualifiedForLiveSnapshotMerge()) || (validate(diskImagesValidator.diskImagesNotIllegal()))); }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_PLACEHOLDER_CREATION)) { updateStage(LiveDiskMigrateStage.VM_REPLICATE_DISK_START); replicateDiskStart(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_START); syncImageData(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END); return true; } if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END)) { updateStage(LiveDiskMigrateStage.VM_REPLICATE_DISK_FINISH); completeLiveMigration(); updateStage(LiveDiskMigrateStage.SOURCE_IMAGE_DELETION); org.ovirt.engine.core.bll.storage.lsm.LiveStorageMigrationHelper.removeImage(this, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getSourceStorageDomainId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getDestinationImageId(), AuditLogType.USER_MOVE_IMAGE_GROUP_FAILED_TO_DELETE_SRC_IMAGE); return false; } return false; }
@org.ovirt.api.metamodel.annotations.Service services.LabelsService labels();
public org.ovirt.engine.ui.webadmin.section.main.presenter.DynamicUrlContentTabProxy create(com.google.gwt.event.shared.GwtEvent.Type<com.gwtplatform.mvp.client.RequestTabsHandler> requestTabsEventType, com.google.gwt.event.shared.GwtEvent.Type<com.gwtplatform.mvp.client.ChangeTabHandler> changeTabEventType, com.google.gwt.event.shared.GwtEvent.Type<com.gwtplatform.mvp.client.proxy.RevealContentHandler<?>> slot, java.lang.String label, float priority, java.lang.String historyToken, boolean isMainTab, java.lang.String contentUrl, org.ovirt.engine.ui.common.widget.Align align) { return new org.ovirt.engine.ui.webadmin.section.main.presenter.DynamicUrlContentTabProxy(placeManager, eventBus, gatekeeper, requestTabsEventType, changeTabEventType, slot, viewProvider, label, priority, historyToken, isMainTab, contentUrl, align); }



public void setUsePatternFly(boolean usePatternFly) { getWidget().addStyleName(style.listBox()); if (usePatternFly) { container.addStyleName(Styles.FORM_CONTROL); container.addStyleName(style.container()); getWidget().addStyleName(style.listBoxPatternfly()); groupLabelContainer.addStyleName(style.labelContainer()); } else { container.addStyleName(style.container_legacy()); } }









@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, acpiEnabled, appList, bootSequence, clientIp, vncKeyboardLayout, consoleCurrentUserName, guestCurUserName, consoleUserId, guestOs, guestRequestedMemory, kvmEnable, lastVdsRunOn, disks, exitMessage, exitStatus, win2kHackEnabled, migratingToVds, pauseStatus, runOnVds, session, status, utcDiff, vmHost, vmIp, vmFQDN, lastStartTime, lastStopTime, vmPid, lastWatchdogEvent, lastWatchdogAction, runOnce, cpuName, guestAgentStatus, currentCd, stopReason, exitReason, emulatedMachine, graphicsInfos, guestMemoryFree, guestMemoryBuffered, guestMemoryCached, guestOsTimezoneName, guestOsTimezoneOffset, guestOsArch, guestOsCodename, guestOsDistribution, guestOsKernelVersion, guestOsVersion, guestOsType); }
















public static void copyMigrationOptions(org.ovirt.engine.api.model.MigrationOptions model, org.ovirt.engine.core.common.businessentities.HasMigrationOptions entity) { if (model.isSetAutoConverge()) { entity.setAutoConverge(org.ovirt.engine.api.restapi.types.MigrationOptionsMapper.mapFromInheritableBoolean(model.getAutoConverge())); } if (model.isSetCompressed()) { entity.setMigrateCompressed(org.ovirt.engine.api.restapi.types.MigrationOptionsMapper.mapFromInheritableBoolean(model.getCompressed())); } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.HasMigrationOptions.class, to = org.ovirt.engine.api.model.MigrationOptions.class) public static org.ovirt.engine.api.model.MigrationOptions map(org.ovirt.engine.core.common.businessentities.HasMigrationOptions entity, org.ovirt.engine.api.model.MigrationOptions template) { if (template == null) { template = new org.ovirt.engine.api.model.MigrationOptions(); } template.setAutoConverge(org.ovirt.engine.api.restapi.types.MigrationOptionsMapper.mapToInheritableBoolean(entity.getAutoConverge())); template.setCompressed(org.ovirt.engine.api.restapi.types.MigrationOptionsMapper.mapToInheritableBoolean(entity.getMigrateCompressed())); return template; }


java.lang.String vcenterContentStyle();
private static java.lang.Object cloneVDS(org.ovirt.engine.core.common.businessentities.VDS instance) { org.ovirt.engine.core.common.businessentities.VDS obj = new org.ovirt.engine.core.common.businessentities.VDS(); obj.setHostName(instance.getHostName()); obj.setSshKeyFingerprint(instance.getSshKeyFingerprint()); obj.setSshPort(instance.getSshPort()); obj.setSshUsername(instance.getSshUsername()); obj.setFenceAgents(org.ovirt.engine.ui.uicommonweb.Cloner.cloneAgents(instance.getFenceAgents())); obj.setDisablePowerManagementPolicy(instance.isDisablePowerManagementPolicy()); obj.setPmKdumpDetection(instance.isPmKdumpDetection()); obj.setPort(instance.getPort()); obj.setServerSslEnabled(instance.isServerSslEnabled()); obj.setClusterId(instance.getClusterId()); obj.setId(instance.getId()); obj.setVdsName(instance.getName()); obj.setVdsStrength(instance.getVdsStrength()); obj.setVdsType(instance.getVdsType()); obj.setUniqueId(instance.getUniqueId()); obj.setVdsSpmPriority(instance.getVdsSpmPriority()); obj.setProtocol(instance.getProtocol()); return obj; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, hostName, consoleAddress, name, otpValidity, pmEnabled, pmKdumpDetection, port, protocol, sshPort, sshUsername, serverSslEnabled, uniqueId, clusterId, vdsStrength, vdsType, disablePowerManagementPolicy, hostProviderId); }


@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.VdsStatic vds) { getCallsHandler().executeModification("UpdateVdsStatic", getInsertOrUpdateParams(vds)); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.VdsStatic vds) { org.ovirt.engine.core.compat.Guid id = vds.getId(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(id)) { id = org.ovirt.engine.core.compat.Guid.newGuid(); vds.setId(id); } new org.springframework.jdbc.core.simple.SimpleJdbcCall(getJdbcTemplate()).withProcedureName("InsertVdsStatic").execute(getInsertOrUpdateParams(vds)); }




public void initCache(org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel) { cacheConfigValues(new org.ovirt.engine.ui.frontend.AsyncQuery(loginModel, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { getDefaultConfigurationVersion(target); } })); initOsNames(); initOsDefaultIconIds(); initUniqueOsNames(); initLinuxOsTypes(); initWindowsOsTypes(); initDisplayTypes(); initBalloonSupportMap(); initNicHotplugSupportMap(); initDiskHotpluggableInterfacesMap(); initOsArchitecture(); initDefaultOSes(); initMigrationSupportMap(); initMemorySnapshotSupportMap(); initSuspendSupportMap(); initMemoryHotUnplugSupportMap(); initCustomPropertiesList(); initSoundDeviceSupportMap(); }












private static java.lang.String getRelativePath(java.lang.Class<?> clz, java.lang.Class<?> parent) { for (java.lang.reflect.Method method : parent.getMethods()) { if ((method.getName().startsWith("get")) && ((method.getReturnType()) == clz)) { javax.ws.rs.Path pathAnnotation = method.getAnnotation(javax.ws.rs.Path.class); return pathAnnotation.value(); } } return null; }

private static <R extends org.ovirt.engine.api.model.BaseResource> org.ovirt.engine.api.model.BaseResource getParentModel(R model, java.lang.Class<?> parentType) { for (org.ovirt.engine.api.model.BaseResource inline : org.ovirt.engine.api.restapi.util.LinkHelper.getInlineResources(model)) { if (parentType.isAssignableFrom(inline.getClass())) { return inline; } } return null; }




@java.lang.Override protected org.ovirt.engine.api.model.Disk postPopulate(org.ovirt.engine.api.model.Disk model) { model.setFormat(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskFormat.class)); model.setInterface(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskInterface.class)); model.setSgio(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.ScsiGenericIO.class)); model.setStatus(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskStatus.class)); model.setLunStorage(null); return model; }
@java.lang.Override protected org.ovirt.engine.api.model.DiskSnapshot postPopulate(org.ovirt.engine.api.model.DiskSnapshot model) { model.setFormat(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskFormat.class)); model.setInterface(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskInterface.class)); model.setSgio(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.ScsiGenericIO.class)); model.setStatus(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskStatus.class)); model.setLunStorage(null); return model; }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.DiskSnapshot model, org.ovirt.engine.api.model.DiskSnapshot transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.getInterface(), transform.getInterface()); assertEquals(model.isActive(), transform.isActive()); assertEquals(model.isReadOnly(), transform.isReadOnly()); assertEquals(model.getDescription(), transform.getDescription()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals("unexpected status", model.getStatus(), transform.getStatus()); assertEquals("unexpected sparse", model.isSparse(), transform.isSparse()); assertEquals("unexpected bootable", model.isBootable(), transform.isBootable()); assertEquals("unexpected propagate errors", model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals("unexpected wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals("unexpected shareable", model.isShareable(), transform.isShareable()); }
static void verifyModelSpecific(org.ovirt.engine.api.model.Disk model, int index) { assertEquals(GUIDS[index].toString(), model.getId()); assertFalse(model.isSetVm()); assertTrue(model.isSparse()); assertTrue((!(model.isBootable()))); assertTrue(model.isPropagateErrors()); assertEquals(model.getStorageDomain().getId(), org.ovirt.engine.api.restapi.resource.BackendStorageDomainDiskResourceTest.STORAGE_DOMAIN_ID.toString()); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.Disk model, org.ovirt.engine.api.model.Disk transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getInterface(), transform.getInterface()); assertEquals(model.isActive(), transform.isActive()); assertEquals("unexpected bootable", model.isBootable(), transform.isBootable()); assertEquals("unexpected propagate errors", model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals("unexpected wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals("unexpected shareable", model.isShareable(), transform.isShareable()); }
@java.lang.Override protected org.ovirt.engine.api.model.Disk postPopulate(org.ovirt.engine.api.model.Disk model) { model.setFormat(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskFormat.class)); model.setInterface(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskInterface.class)); model.setStatus(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskStatus.class)); model.setLunStorage(new org.ovirt.engine.api.model.HostStorage()); return model; }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.Disk model, org.ovirt.engine.api.model.Disk transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getImageId(), transform.getImageId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.getInterface(), transform.getInterface()); assertEquals(model.isActive(), transform.isActive()); assertEquals(model.isReadOnly(), transform.isReadOnly()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getLogicalName(), transform.getLogicalName()); assertEquals(model.getOpenstackVolumeType().getName(), transform.getOpenstackVolumeType().getName()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals("unexpected status", model.getStatus(), transform.getStatus()); assertEquals("unexpected sparse", model.isSparse(), transform.isSparse()); assertEquals("unexpected bootable", model.isBootable(), transform.isBootable()); assertEquals("unexpected propagate errors", model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals("unexpected wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals("unexpected shareable", model.isShareable(), transform.isShareable()); }
private void verifyModelSpecific(org.ovirt.engine.api.model.Disk model, int index) { assertEquals(GUIDS[index].toString(), model.getId()); assertTrue(model.isSparse()); assertTrue((!(model.isBootable()))); assertTrue(model.isPropagateErrors()); }
static org.ovirt.engine.api.model.Disk getModel() { org.ovirt.engine.api.model.Disk model = new org.ovirt.engine.api.model.Disk(); model.setFormat(DiskFormat.COW); model.setInterface(org.ovirt.engine.api.model.DiskInterface.VIRTIO); model.setSparse(true); model.setBootable(false); model.setShareable(false); model.setPropagateErrors(true); model.setStorageDomains(new org.ovirt.engine.api.model.StorageDomains()); model.getStorageDomains().getStorageDomains().add(new org.ovirt.engine.api.model.StorageDomain()); model.getStorageDomains().getStorageDomains().get(0).setId(GUIDS[2].toString()); model.setProvisionedSize(1000000000L); return model; }
private org.ovirt.engine.core.common.businessentities.storage.Disk findBoot(java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { if (disk.isBoot()) { return disk; } } return null; }
private void testResolveHostNetworkAddress(java.util.function.Function<org.ovirt.engine.core.bll.network.NetworkConfigurator, java.lang.String> function, java.lang.String networkName) { injectorRule.bind(org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtil.class, managementNetworkUtil); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); nic.setNetworkName(networkName); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.getInterfaces().add(nic); assertThat(function.apply(new org.ovirt.engine.core.bll.network.NetworkConfigurator(vds, null)), nullValue()); }
@org.junit.Test public void getIpv4AddressOfNetworkReturnsNullWhenThereIsNoNetworkOfGivenName() { java.lang.String networkName = "networkName"; testResolveHostNetworkAddress(( e) -> e.getIpv4AddressOfNetwork(networkName), networkName); }




@org.junit.Test public void getIpv6AddressOfNetwork() { java.lang.String networkName = "networkName"; testResolveHostNetworkAddress(( e) -> e.getIpv6AddressOfNetwork(networkName), networkName); }
private boolean checkIfDisksExist(java.lang.Iterable<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksList) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.compat.Guid>> alreadyRetrieved = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : disksList) { org.ovirt.engine.core.compat.Guid targetStorageDomainId = imageToDestinationDomainMap.get(disk.getId()); java.util.List<org.ovirt.engine.core.compat.Guid> imagesOnStorageDomain = alreadyRetrieved.get(targetStorageDomainId); if (imagesOnStorageDomain == null) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetImagesList, new org.ovirt.engine.core.common.vdscommands.GetImagesListVDSCommandParameters(targetStorageDomainId, org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getStoragePoolId())); if (returnValue.getSucceeded()) { imagesOnStorageDomain = ((java.util.List<org.ovirt.engine.core.compat.Guid>) (returnValue.getReturnValue())); alreadyRetrieved.put(targetStorageDomainId, imagesOnStorageDomain); } else { return failValidation(EngineMessage.ERROR_GET_IMAGE_LIST, java.lang.String.format("$sdName %1$s", getStorageDomain(targetStorageDomainId).getName())); } } if (imagesOnStorageDomain.contains(disk.getId())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_CONTAINS_DISK); } } return true; }

@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The VMs ${VmsName} already have a disk marked as boot.") java.lang.String ACTION_TYPE_FAILED_VMS_BOOT_IN_USE();
@java.lang.Override public void init(final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel model) { super.init(model); }


private void addStyles() { externalHostProviderEnabledEditor.addContentWidgetContainerStyleName(style.externalHostProviderEnabledEditorContent()); providerSearchFilterEditor.addContentWidgetContainerStyleName(style.searchFilter()); providerSearchFilterEditor.setLabelStyleName(style.emptyEditor()); providerSearchFilterLabel.addContentWidgetContainerStyleName(style.emptyEditor()); fetchSshFingerprint.addContentWidgetContainerStyleName(style.fingerprintEditor()); expanderContent.setStyleName(style.expanderContent()); publicKeyEditor.setCustomStyle(style.pkStyle()); tabPanel.addBarStyle(style.bar()); }
protected javax.ws.rs.core.Response add(org.ovirt.engine.api.model.VnicProfile vnicProfile) { validateParameters(vnicProfile); return performCreate(VdcActionType.AddVnicProfile, new org.ovirt.engine.core.common.action.AddVnicProfileParameters(map(vnicProfile)), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetVnicProfileById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }









private void setTicketUsingUpdateDevice() { java.util.Map<java.lang.String, java.lang.Object> devStruct = new java.util.HashMap<>(); devStruct.put("deviceType", "graphics"); devStruct.put("graphicsType", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getGraphicsType().name().toLowerCase()); devStruct.put("password", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getTicket()); devStruct.put("ttl", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getValidTime()); devStruct.put("existingConnAction", connectionAction); devStruct.put("disconnectAction", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getDisconnectAction()); devStruct.put("params", getUidParams()); status = org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getBroker().vmUpdateDevice(org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getVmId().toString(), devStruct); }

private void sendTicket() { final org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser(); final boolean sent = runVdsCommand(VDSCommandType.SetVmTicket, new org.ovirt.engine.core.common.vdscommands.SetVmTicketVDSCommandParameters(org.ovirt.engine.core.bll.SetVmTicketCommand.getVdsId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVmId(), ticket, org.ovirt.engine.core.bll.SetVmTicketCommand.getParameters().getValidTime(), user.getLoginName(), user.getId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getParameters().getGraphicsType(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getConsoleDisconnectAction())).getSucceeded(); if (sent) { org.ovirt.engine.core.bll.SetVmTicketCommand.setActionReturnValue(ticket); } org.ovirt.engine.core.bll.SetVmTicketCommand.setSucceeded(sent); }
private org.ovirt.engine.core.bll.context.CommandContext createContextForStatelessSnapshotCreation() { java.util.Map<java.lang.String, java.lang.String> values = getVmValuesForMsgResolving(); org.ovirt.engine.core.common.job.Step createSnapshotsStep = addSubStep(StepEnum.EXECUTING, StepEnum.CREATING_SNAPSHOTS, values); org.ovirt.engine.core.bll.job.ExecutionContext createSnapshotsCtx = new org.ovirt.engine.core.bll.job.ExecutionContext(); createSnapshotsCtx.setMonitored(true); createSnapshotsCtx.setStep(createSnapshotsStep); return org.ovirt.engine.core.bll.RunVmCommand.getContext().withExecutionContext(createSnapshotsCtx); }


@java.lang.Override protected void executeVdsBrokerCommand() { vmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ChangeDiskVDSCommand.getBroker().changeDisk(vmId.toString(), isoLocation); org.ovirt.engine.core.vdsbroker.vdsbroker.ChangeDiskVDSCommand.proceedProxyReturnValue(); setReturnValue(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVMDynamicData(vmReturn.vm, org.ovirt.engine.core.vdsbroker.vdsbroker.ChangeDiskVDSCommand.getVds()).getStatus()); }




public void loadVmsFromVmware() { clearProblem(); if (!(validateVmwareConfiguration())) { return; } org.ovirt.engine.core.compat.Guid proxyId = ((getProxyHosts().getSelectedItem()) != null) ? getProxyHosts().getSelectedItem().getId() : null; loadVMsFromExternalProvider(OriginType.VMWARE, getUrl(), getUsername().getEntity(), getPassword().getEntity(), proxyId); }
@java.lang.Override public javax.ws.rs.core.Response restore(org.ovirt.engine.api.model.Action action) { action.setAsync(false); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(parentId, guid); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { tryBackParams.setDisks(collection.mapDisks(action.getDisks())); } tryBackParams.setCorrelationId(org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESTORE_SNAPSHOT_CORRELATION_ID); javax.ws.rs.core.Response response = doAction(VdcActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action, PollingType.JOB); if ((response.getStatus()) == (Response.Status.OK.getStatusCode())) { org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters restoreParams = new org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters(parentId, org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT); restoreParams.setCorrelationId(org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESTORE_SNAPSHOT_CORRELATION_ID); javax.ws.rs.core.Response response2 = doAction(VdcActionType.RestoreAllSnapshots, restoreParams, action); if ((response2.getStatus()) != (Response.Status.OK.getStatusCode())) { return response2; } } return response; }
public void updateBootableFrom(java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> vmDisks) { getIsBootable().setEntity(true); getIsBootable().setIsChangeable(true); if (((getDisk()) == null) || (!(getDisk().isDiskSnapshot()))) { for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : vmDisks) { if ((disk.getDiskVmElementForVm(getVm().getId()).isBoot()) && (!(disk.equals(getDisk())))) { getIsBootable().setEntity(false); if (!(disk.isDiskSnapshot())) { getIsBootable().setChangeProhibitionReason(org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.onlyOneBootableDisk()); getIsBootable().setIsChangeable(false); break; } } } } }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue)); updateBootableFrom(disks); }
protected void updateBootableDiskAvailable() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmDiskList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue)); updateBootableFrom(disks); } }), getVm().getId()); }


@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.compat.Version)) { return false; } org.ovirt.engine.core.compat.Version other = ((org.ovirt.engine.core.compat.Version) (obj)); return ((((major) == (other.major)) && ((minor) == (other.minor))) && ((revision) == (other.revision))) && ((build) == (other.build)); }


java.lang.String CLUSTER_CANNOT_ADD_COMPATIBILITY_VERSION_WITH_LOWER_STORAGE_POOL();

java.lang.String CLUSTER_WARN_VM_DUE_TO_UNSUPPORTED_MEMORY_RESTORE();
@java.lang.Override public void idle() { if (((lastSendInterval)++) >= (sendIntervals)) { lastSendInterval = 0; java.util.Iterator<org.ovirt.engine.core.notifier.transport.smtp.Smtp.DispatchAttempt> iterator = sendQueue.iterator(); while (iterator.hasNext()) { org.ovirt.engine.core.notifier.transport.smtp.Smtp.DispatchAttempt attempt = iterator.next(); try { org.ovirt.engine.core.notifier.transport.smtp.EventMessageContent message = new org.ovirt.engine.core.notifier.transport.smtp.EventMessageContent(); message.prepareMessage(hostName, attempt.event, isBodyHtml); org.ovirt.engine.core.notifier.transport.smtp.Smtp.log.info("Send mail subject='{}' to='{}'", message.getMessageSubject(), attempt.address); org.ovirt.engine.core.notifier.transport.smtp.Smtp.log.debug("Send mail body='{}'", message.getMessageBody()); sendMail(attempt.address, message.getMessageSubject(), message.getMessageBody()); notifyObservers(org.ovirt.engine.core.notifier.dao.DispatchResult.success(attempt.event, attempt.address, EventNotificationMethod.SMTP)); iterator.remove(); } catch (java.lang.Exception ex) { (attempt.retries)++; if ((attempt.retries) >= (retries)) { notifyObservers(org.ovirt.engine.core.notifier.dao.DispatchResult.failure(attempt.event, attempt.address, EventNotificationMethod.SMTP, ex.getMessage())); iterator.remove(); } } } } }


public java.util.Map<java.lang.String, java.nio.ByteBuffer> unTar() throws java.io.IOException { java.util.Map<java.lang.String, java.nio.ByteBuffer> fileContent = new java.util.HashMap<>(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarEntry = null; tarEntry = tarInputStream.getNextTarEntry(); while (tarEntry != null) { byte[] content = new byte[((int) (tarEntry.getSize()))]; if ((tarInputStream.read(content)) == (-1)) { org.ovirt.engine.core.utils.archivers.tar.TarInMemoryExport.log.error("File '{}' could not be read.", tarEntry.getFile()); continue; } fileContent.put(tarEntry.getName(), java.nio.ByteBuffer.wrap(content)); tarEntry = tarInputStream.getNextTarEntry(); } return fileContent; }
private void mockHostValidator() { when(validator.nameNotEmpty()).thenReturn(ValidationResult.VALID); doReturn(ValidationResult.VALID).when(validator).nameLengthIsLegal(); doReturn(ValidationResult.VALID).when(validator).hostNameIsValid(); doReturn(ValidationResult.VALID).when(validator).nameNotUsed(); doReturn(ValidationResult.VALID).when(validator).hostNameNotUsed(); doReturn(ValidationResult.VALID).when(validator).portIsValid(); when(validator.sshUserNameNotEmpty()).thenReturn(ValidationResult.VALID); doReturn(ValidationResult.VALID).when(validator).validateSingleHostAttachedToLocalStorage(); doReturn(ValidationResult.VALID).when(validator).securityKeysExists(); doReturn(ValidationResult.VALID).when(validator).provisioningComputeResourceValid(any(java.lang.Boolean.class), any(org.ovirt.engine.core.common.businessentities.ExternalComputeResource.class)); doReturn(ValidationResult.VALID).when(validator).provisioningHostGroupValid(any(java.lang.Boolean.class), any(org.ovirt.engine.core.common.businessentities.ExternalHostGroup.class)); when(validator.passwordNotEmpty(any(java.lang.Boolean.class), any(org.ovirt.engine.core.common.action.VdsOperationActionParameters.AuthenticationMethod.class), any(java.lang.String.class))).thenReturn(ValidationResult.VALID); when(commandMock.getHostValidator()).thenReturn(validator); when(commandMock.validate(any(org.ovirt.engine.core.bll.ValidationResult.class))).thenCallRealMethod(); }


@org.junit.Test public void validateSingleHostAttachedToFewStorages() { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = mock(org.ovirt.engine.core.common.businessentities.StoragePool.class); when(dataCenter.isLocal()).thenReturn(true); when(storagePoolDao.getForVdsGroup(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(dataCenter); when(dbFacade.getStoragePoolDao()).thenReturn(storagePoolDao); when(hostStaticDao.getAllForVdsGroup(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.<org.ovirt.engine.core.common.businessentities.VdsStatic>singletonList(mock(org.ovirt.engine.core.common.businessentities.VdsStatic.class))); when(dbFacade.getVdsStaticDao()).thenReturn(hostStaticDao); validator = new org.ovirt.engine.core.bll.validator.HostValidator(dbFacade, host); assertThat(validator.validateSingleHostAttachedToLocalStorage(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.VDS_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE)); }
@org.junit.Test public void validateSingleHostAttachedToLocalStorage() { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = mock(org.ovirt.engine.core.common.businessentities.StoragePool.class); when(dataCenter.isLocal()).thenReturn(true); when(storagePoolDao.getForVdsGroup(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(dataCenter); when(dbFacade.getStoragePoolDao()).thenReturn(storagePoolDao); when(hostStaticDao.getAllForVdsGroup(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.<org.ovirt.engine.core.common.businessentities.VdsStatic>emptyList()); when(dbFacade.getVdsStaticDao()).thenReturn(hostStaticDao); validator = new org.ovirt.engine.core.bll.validator.HostValidator(dbFacade, host); assertThat(validator.validateSingleHostAttachedToLocalStorage(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
@org.junit.Before public void setup() { mockConfigRule.mockConfigValue(ConfigValues.MaxVdsNameLength, org.ovirt.engine.core.bll.validator.HostValidatorTest.HOST_NAME_SIZE); mockConfigRule.mockConfigValue(ConfigValues.EncryptHostCommunication, java.lang.Boolean.TRUE); validator = new org.ovirt.engine.core.bll.validator.HostValidator(dbFacade, host); }
@org.junit.Test public void hostAttachedToLocalStorageWithoutDataCenter() { when(storagePoolDao.getForVdsGroup(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); when(dbFacade.getStoragePoolDao()).thenReturn(storagePoolDao); validator = new org.ovirt.engine.core.bll.validator.HostValidator(dbFacade, host); assertThat(validator.validateSingleHostAttachedToLocalStorage(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }


private void importHostedEngineVm(java.util.Map<java.lang.String, java.lang.Object> vmStruct) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmsDataFromExternalProvider(vmStruct); if (vm != null) { vm.setImages(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildDiskImagesFromDevices(vmStruct, vm.getId())); vm.setInterfaces(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmNetworkInterfacesFromDevices(vmStruct)); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : vm.getImages()) { vm.getDiskMap().put(diskImage.getId(), diskImage); } vm.setClusterId(org.ovirt.engine.core.bll.AddUnmanagedVmsCommand.getClusterId()); vm.setRunOnVds(org.ovirt.engine.core.bll.AddUnmanagedVmsCommand.getVdsId()); importHostedEngineVm(vm); } }

@java.lang.Override public javax.ws.rs.core.Response install(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); validateEnums(org.ovirt.engine.api.model.Action.class, action); org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters(vds.getStaticData(), action.getRootPassword(), true); params = ((org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters) (getMapper(org.ovirt.engine.api.model.Action.class, org.ovirt.engine.core.common.action.VdsOperationActionParameters.class).map(action, ((org.ovirt.engine.core.common.action.VdsOperationActionParameters) (params))))); if (vds.isOvirtNode()) { params.setReinstallOrUpgrade(true); if (action.isSetImage()) { params.setoVirtIsoFile(action.getImage()); } } return doAction(VdcActionType.UpdateVds, params, action); }






@org.junit.Test public void testMacPoolGetByDataCenterIdExist() throws java.lang.Exception { final org.ovirt.engine.core.common.businessentities.MacPool macPool = dao.getByDataCenterId(FixturesTool.STORAGE_POOL_RHEL6_ISCSI_OTHER); assertThat(macPool, notNullValue()); assertThat(macPool.getId(), is(FixturesTool.NON_DEFAULT_MAC_POOL)); }
protected org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> createVmFromTemplateCommand(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.action.AddVmParameters param = new org.ovirt.engine.core.common.action.AddVmParameters(); param.setVm(vm); org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> concrete = new org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters>(param) { @java.lang.Override protected void initUser() { } @java.lang.Override protected void initTemplateDisks() { } @java.lang.Override protected void initStoragePoolId() { } @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmTemplate getVmTemplate() { return createVmTemplate(); } }; org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> result = spy(concrete); doReturn(true).when(result).checkNumberOfMonitors(); doReturn(createVmTemplate()).when(result).getVmTemplate(); doReturn(true).when(result).validateCustomProperties(any(org.ovirt.engine.core.common.businessentities.VmStatic.class), anyList()); mockDaos(result); mockBackend(result); org.ovirt.engine.core.bll.AddVmCommandTest.initCommandMethods(result); result.poolPerDc = this.macPoolPerDc; result.postConstruct(); return result; }
private org.ovirt.engine.core.bll.AddVmCommand<org.ovirt.engine.core.common.action.AddVmParameters> setupCanAddVmTests(final int domainSizeGB) { org.ovirt.engine.core.common.businessentities.VM vm = initializeMock(domainSizeGB); org.ovirt.engine.core.bll.AddVmCommand<org.ovirt.engine.core.common.action.AddVmParameters> cmd = createCommand(vm); cmd.poolPerDc = macPoolPerDc; org.ovirt.engine.core.bll.AddVmCommandTest.initCommandMethods(cmd); doReturn(createVmTemplate()).when(cmd).getVmTemplate(); doReturn(createStoragePool()).when(cmd).getStoragePool(); return cmd; }
@java.lang.Override public void rollback() { super.rollback(); poolPerDc.createPool(getOldMacPool()); }
@org.junit.Before @java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); injectorRule.bind(org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.class, mock(org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.class)); existingSnapshot = createSnapshot(existingSnapshotId); existingSnapshot.setVmConfiguration(org.ovirt.engine.core.bll.GetVmConfigurationBySnapshotQueryTest.EXISTING_VM_NAME); snapshotVmConfigurationHelper = spy(new org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper()); when(getQuery().getSnapshotVmConfigurationHelper()).thenReturn(snapshotVmConfigurationHelper); snapshotsManager = mock(org.ovirt.engine.core.bll.snapshots.SnapshotsManager.class); when(snapshotVmConfigurationHelper.getSnapshotManager()).thenReturn(snapshotsManager); setUpDaoMocks(); }
@java.lang.Override protected void executeCommand() { getMacPoolDao().remove(getMacPoolId()); poolPerDc.removePool(getMacPoolId()); getReturnValue().setSucceeded(true); }
@org.junit.Before public void setUp() throws java.lang.Exception { injectorRule.bind(org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.class, mock(org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.class)); existingSnapshot = createSnapshot(existingSnapshotId); existingVm = createVm(existingVmId); existingSnapshot.setVmConfiguration(org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelperTest.EXISTING_VM_NAME); existingDiskImage = createDiskImage(existingImageId, existingImageGroupId); snapshotVmConfigurationHelper = spy(new org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper()); snapshotsManager = mock(org.ovirt.engine.core.bll.snapshots.SnapshotsManager.class); when(snapshotVmConfigurationHelper.getSnapshotManager()).thenReturn(snapshotsManager); setUpDaoMocks(); }

@java.lang.Override protected void executeCommand() { getMacPoolDao().update(getMacPoolEntity()); poolPerDc.modifyPool(getMacPoolEntity()); setSucceeded(true); getReturnValue().setActionReturnValue(getMacPoolId()); }
@java.lang.Override public void rollback() { super.rollback(); poolPerDc.modifyPool(oldMacPool); }
@java.lang.Override public void rollback() { super.rollback(); poolPerDc.removePool(getMacPoolId()); }
@java.lang.Override protected void executeCommand() { getMacPoolEntity().setId(org.ovirt.engine.core.compat.Guid.newGuid()); getMacPoolDao().save(getMacPoolEntity()); addPermission(getCurrentUser().getId(), getMacPoolEntity().getId()); poolPerDc.createPool(getMacPoolEntity()); setSucceeded(true); getReturnValue().setActionReturnValue(getMacPoolId()); }
private void moveMacsOfUpdatedDataCenter(org.ovirt.engine.core.compat.Guid oldMacPoolId, org.ovirt.engine.core.compat.Guid newMacPoolId, java.util.List<java.lang.String> vmInterfaceMacs) { java.util.Objects.requireNonNull(vmInterfaceMacs); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy sourcePool = poolPerDc.getPoolById(oldMacPoolId); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy targetPool = poolPerDc.getPoolById(newMacPoolId); for (java.lang.String mac : vmInterfaceMacs) { sourcePool.freeMac(mac); targetPool.forceAddMac(mac); } }
private org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool(org.ovirt.engine.core.compat.Guid storagePoolId) { return poolPerDc.poolForDataCenter(storagePoolId); }
protected void synchronizeNics(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.context.CompensationContext compensationContext, org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(getMacPool(vm.getStoragePoolId())); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(vm.getVdsGroupId(), vm.getStoragePoolId(), vm.getVdsGroupCompatibilityVersion(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_SNAPSHOT_VM_INVALID_INTERFACES); vmInterfaceManager.removeAll(vm.getId()); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmInterface : vm.getInterfaces()) { vmInterface.setVmId(vm.getId()); if ((vmInterface.getId()) == null) { vmInterface.setId(org.ovirt.engine.core.compat.Guid.newGuid()); } vnicProfileHelper.updateNicWithVnicProfileForUser(vmInterface, user); vmInterfaceManager.add(vmInterface, compensationContext, true, vm.getOs(), vm.getVdsGroupCompatibilityVersion()); } vnicProfileHelper.auditInvalidInterfaces(vm.getName()); }
protected org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool() { return poolPerDc.poolForDataCenter(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getStoragePoolId()); }
protected org.ovirt.engine.core.bll.ValidationResult macAvailable() { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy macPool = poolPerDc.poolForDataCenter(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getStoragePoolId()); java.lang.Boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(macPool); if (allowDupMacs || (!(vmInterfaceManager.existsPluggedInterfaceWithSameMac(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic())))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.MacPool getByDataCenterId(org.ovirt.engine.core.compat.Guid dataCenterId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", dataCenterId); return getCallsHandler().executeRead("GetMacPoolByDataCenterId", new org.ovirt.engine.core.dao.MacPoolDaoImpl.MacPoolRowMapper(), parameterSource); }
protected void removeVmNetwork() { if ((getInterfaces()) != null) { for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : getInterfaces()) { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy macPool = poolPerDc.poolForDataCenter(getStoragePoolId()); macPool.freeMac(iface.getMacAddress()); } } }
@java.lang.Override protected void executeVmCommand() { this.setVmName(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getVmStaticDao().get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getVmId()).getName()); org.ovirt.engine.core.common.businessentities.network.VmNic iface = org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getVmNicDao().get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getInterfaceId()); if (iface != null) { interfaceName = iface.getName(); java.lang.String interType = org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(iface.getType()).getDescription(); if (interType != null) { org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.addCustomValue("InterfaceType", interType); } new org.ovirt.engine.core.bll.network.ExternalNetworkManager(iface).deallocateIfExternal(); poolPerDc.poolForDataCenter(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getStoragePoolId()).freeMac(iface.getMacAddress()); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { getVmNicDao().remove(getParameters().getInterfaceId()); getDbFacade().getVmNetworkStatisticsDao().remove(getParameters().getInterfaceId()); getDbFacade().getVmDeviceDao().remove(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getParameters().getInterfaceId(), getParameters().getVmId())); setSucceeded(true); return null; } }); }
@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.class, mock(org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.class)); vmId = org.ovirt.engine.core.compat.Guid.newGuid(); vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setId(vmId); when(vmDao.get(vmId)).thenReturn(vm); org.ovirt.engine.core.compat.Guid snapshotId = org.ovirt.engine.core.compat.Guid.newGuid(); snapshot = new org.ovirt.engine.core.common.businessentities.Snapshot(); snapshot.setId(snapshotId); snapshot.setVmId(vmId); when(snapshotDao.get(snapshotId)).thenReturn(snapshot); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters params = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vmId, snapshotId); cmd = spy(new org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand(params)); doNothing().when(cmd).updateVmDisksFromDb(); doReturn(snapshotDao).when(cmd).getSnapshotDao(); doReturn(vmDao).when(cmd).getVmDao(); }
protected void setUpCommand() { command = createCommand(); command.poolPerDc = macPoolPerDc; doReturn(true).when(command).areTemplateImagesInStorageReady(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(true).when(command).verifyAddVM(); doReturn(true).when(command).setAndValidateDiskProfiles(); doReturn(true).when(command).setAndValidateCpuProfile(); }
protected org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool() { return poolPerDc.poolForDataCenter(org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId()); }
@java.lang.Override protected void init() { if ((org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters()) == null) { return; } setEffectiveCompatibilityVersion(org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData(), this::getVdsGroup)); org.ovirt.engine.core.compat.Guid templateIdToUse = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().getVmtGuid(); if (org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().isUseLatestVersion()) { org.ovirt.engine.core.common.businessentities.VmTemplate latest = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplateDao().getTemplateWithLatestVersionInChain(templateIdToUse); if (latest != null) { if (!(templateIdToUse.equals(latest.getId()))) { org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().setDiskInfoDestinationMap(null); } setVmTemplate(latest); templateIdToUse = latest.getId(); org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().setVmtGuid(templateIdToUse); } } setVmTemplateId(templateIdToUse); initTemplate(); ensureDestinationImageMap(); nameForVmInPoolGenerator = new org.ovirt.engine.core.utils.NameForVmInPoolGenerator(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmPool().getName()); macPool = poolPerDc.poolForDataCenter(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getStoragePoolId()); }
@org.junit.Test public void testGetByDataCenterId() throws java.lang.Exception { final org.ovirt.engine.core.compat.Guid notExistingRecordGuid = org.ovirt.engine.core.compat.Guid.newGuid(); final org.ovirt.engine.core.common.businessentities.MacPool macPool = dao.getByDataCenterId(notExistingRecordGuid); assertThat(macPool, nullValue()); }
private static java.net.HttpURLConnection create(java.net.URL url) throws java.io.IOException, java.security.GeneralSecurityException { return new org.ovirt.engine.core.uutils.net.HttpURLConnectionBuilder(url).setHttpsProtocol(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_SERVICE_SSL_PROTOCOL")).setReadTimeout(0).setTrustManagerAlgorithm(javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()).setTrustStore(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_PKI_TRUST_STORE")).setTrustStorePassword(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStorePassword()).setTrustStoreType(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStoreType()).setURL(url).setVerifyChain(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getBoolean("ENGINE_SSO_SERVICE_SSL_VERIFY_CHAIN")).setVerifyHost(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getBoolean("ENGINE_SSO_SERVICE_SSL_VERIFY_HOST")).create(); }
@java.lang.Override protected boolean canDoAction() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.Permission p = org.ovirt.engine.core.bll.RemovePermissionCommand.getPermissionDao().get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getPermission().getId()); if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isLastSuperUserPermission(p.getRoleId())) { org.ovirt.engine.core.bll.RemovePermissionCommand.getReturnValue().getCanDoActionMessages().add(EngineMessage.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString()); returnValue = false; } else if ((p.getRoleType().equals(RoleType.ADMIN)) && (!(org.ovirt.engine.core.bll.RemovePermissionCommand.isSystemSuperUser()))) { addCanDoActionMessage(EngineMessage.PERMISSION_REMOVE_FAILED_ONLY_SYSTEM_SUPER_USER_CAN_REMOVE_ADMIN_ROLES); returnValue = false; } return returnValue; }
protected void updateCurrentCd(java.lang.String cdPath) { org.ovirt.engine.core.bll.VmHandler.updateCurrentCd(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm(), cdPath); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.Watchdog model, org.ovirt.engine.core.common.businessentities.VmWatchdog entity) { org.ovirt.engine.core.common.action.WatchdogParameters parameters = new org.ovirt.engine.core.common.action.WatchdogParameters(); parameters.setAction(org.ovirt.engine.api.restapi.types.WatchdogMapper.map(model.getAction())); parameters.setModel(org.ovirt.engine.api.restapi.types.WatchdogMapper.map(model.getModel())); parameters.setId(instanceTypeId); parameters.setVm(false); return parameters; }


@java.lang.Override protected void populateTabMap() { getTabNameMapping().put(TabName.GENERAL_TAB, this.generalTab); getTabNameMapping().put(TabName.CONSOLE_TAB, this.consoleTab); getTabNameMapping().put(TabName.CLUSTER_POLICY_TAB, this.clusterPolicyTab); getTabNameMapping().put(TabName.OPTIMIZATION_TAB, this.optimizationTab); getTabNameMapping().put(TabName.RESILIENCE_POLICY_TAB, this.resiliencePolicyTab); }
public boolean validate() { boolean generalTabValid = isGeneralTabValid(); getMacPoolModel().validate(); setValidTab(TabName.GENERAL_TAB, generalTabValid); boolean macPoolTabValid = getMacPoolModel().getIsValid(); setValidTab(TabName.MAC_POOL_TAB, macPoolTabValid); org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent.fire(getEventBus(), this); return generalTabValid && macPoolTabValid; }

@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getStoragePoolDao(); existingPool = dao.get(new org.ovirt.engine.core.compat.Guid("6d849ebf-755f-4552-ad09-9a090cda105d")); existingPool.setStatus(StoragePoolStatus.Up); vds = new org.ovirt.engine.core.compat.Guid("afce7a39-8e8c-4819-ba9c-796d316592e6"); vdsGroup = new org.ovirt.engine.core.compat.Guid("b399944a-81ab-4ec5-8266-e19ba7c3c9d1"); storageDomain = new org.ovirt.engine.core.compat.Guid("72e3a666-89e1-4005-a7ca-f7548004a9ab"); newPool = new org.ovirt.engine.core.common.businessentities.StoragePool(); newPool.setName("newPoolDude"); newPool.setMacPoolId(FixturesTool.DEFAULT_MAC_POOL_ID); newPool.setCompatibilityVersion(new org.ovirt.engine.core.compat.Version("3.0")); }



@java.lang.Override protected void gatherChangedVms(org.ovirt.engine.core.common.businessentities.VM dbVm, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData vdsmVm) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, vdsmVm)); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DataCenter.class, to = org.ovirt.engine.core.common.businessentities.StoragePool.class) public static org.ovirt.engine.core.common.businessentities.StoragePool map(org.ovirt.engine.api.model.DataCenter model, org.ovirt.engine.core.common.businessentities.StoragePool template) { org.ovirt.engine.core.common.businessentities.StoragePool entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.StoragePool(); if (model.isSetId()) { entity.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.setName(model.getName()); } if (model.isSetDescription()) { entity.setdescription(model.getDescription()); } if (model.isSetComment()) { entity.setComment(model.getComment()); } if (model.isSetLocal()) { entity.setIsLocal(model.isLocal()); } if (model.isSetStorageFormat()) { org.ovirt.engine.api.restapi.model.StorageFormat storageFormat = org.ovirt.engine.api.restapi.model.StorageFormat.fromValue(model.getStorageFormat()); if (storageFormat != null) { entity.setStoragePoolFormatType(org.ovirt.engine.api.restapi.types.StorageFormatMapper.map(storageFormat, null)); } } if (((model.isSetVersion()) && ((model.getVersion().getMajor()) != null)) && ((model.getVersion().getMinor()) != null)) { entity.setCompatibilityVersion(new org.ovirt.engine.core.compat.Version(model.getVersion().getMajor(), model.getVersion().getMinor())); } if ((model.isSetMacPool()) && (model.getMacPool().isSetId())) { entity.setMacPoolId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getMacPool().getId())); } if (model.isSetQuotaMode()) { entity.setQuotaEnforcementType(org.ovirt.engine.api.restapi.types.DataCenterMapper.map(org.ovirt.engine.api.model.QuotaModeType.fromValue(model.getQuotaMode()))); } return entity; }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.DataCenter model, org.ovirt.engine.api.model.DataCenter transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getComment(), transform.getComment()); assertEquals(model.isLocal(), transform.isLocal()); assertEquals(model.getStorageFormat(), transform.getStorageFormat()); assertEquals(model.getMacPool().getId(), transform.getMacPool().getId()); assertEquals(model.getQuotaMode(), transform.getQuotaMode()); }
private void dataCenterQueryResult(org.ovirt.engine.core.common.businessentities.StoragePool storagePool) { final java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(storagePool.getId()); final java.util.Set<org.ovirt.engine.core.compat.Guid> macPoolIds = clusters.stream().map(Cluster::getMacPoolId).collect(java.util.stream.Collectors.toSet()); storagePool.setMacPoolId(((macPoolIds.size()) > 1 ? null : macPoolIds.iterator().next())); }
private void initValues() { boolean newAttachment = ((networkAttachment) != null) && ((networkAttachment.getId()) == null); boolean syncedNetwork = (((networkAttachment) != null) && ((networkAttachment.getReportedConfigurations()) != null)) && (networkAttachment.getReportedConfigurations().isNetworkInSync()); boolean shouldBeSyncedNetwork = (!syncedNetwork) && (java.lang.Boolean.TRUE.equals(getIsToSync().getEntity())); if ((newAttachment || syncedNetwork) || shouldBeSyncedNetwork) { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNetworkAttachmentForModel(networkAttachment, networkQos, nic)); } else { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNic(nic)); } }

public static org.jboss.shrinkwrap.api.spec.JavaArchive createDeployment(java.lang.Class<?>[] classes) { final java.lang.Class<?>[] defaultClasses = new java.lang.Class<?>[]{ org.ovirt.engine.arquillian.database.DataSourceFactory.class, org.ovirt.engine.arquillian.database.TransactionRollbackRule.class, org.ovirt.engine.core.bll.scheduling.CommonTestMocks.class, org.ovirt.engine.core.di.Injector.class, org.ovirt.engine.core.bll.aaa.SessionDataContainer.class, org.ovirt.engine.core.dal.dbbroker.DbFacade.class }; final java.util.List<java.lang.Class<?>> classList = new java.util.ArrayList<>(); classList.addAll(java.util.Arrays.asList(defaultClasses)); if ((classes != null) && ((classes.length) > 0)) { classList.addAll(java.util.Arrays.asList(classes)); } org.jboss.shrinkwrap.api.spec.JavaArchive archive = org.jboss.shrinkwrap.api.ShrinkWrap.create(org.jboss.shrinkwrap.api.spec.JavaArchive.class).addPackages(true, org.ovirt.engine.core.dao.Dao.class.getPackage()).addPackage(org.ovirt.engine.core.bll.builder.AbstractBuilder.class.getPackage()).addPackage(org.ovirt.engine.arquillian.database.TransactionRollbackRule.class.getPackage()).addClasses(classList.toArray(new java.lang.Class<?>[classList.size()])).addAsManifestResource(EmptyAsset.INSTANCE, org.jboss.shrinkwrap.api.ArchivePaths.create("beans.xml")); return archive; }







private java.lang.String buildMetadataDictionaryForVm(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> AllVmImages = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(vm.getDiskList(), false, true, true); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : filteredDisks) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getAllImageSnapshots(diskImage.getImageId()); AllVmImages.addAll(images); } return ovfManager.exportVm(vm, AllVmImages, org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vm)); }
private java.lang.String buildMetadataDictionaryForVm(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> AllVmImages = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(vm.getDiskList(), false, true, true); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : filteredDisks) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getAllImageSnapshots(diskImage.getImageId()); AllVmImages.addAll(images); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : AllVmImages) { disk.setDiskVmElements(java.util.Collections.singletonList(diskImage.getDiskVmElementForVm(vm.getId()))); } } return ovfManager.exportVm(vm, AllVmImages, org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vm)); }


@java.lang.Override protected void onFetchVms() { logBuilder = new java.lang.StringBuilder(java.lang.String.format("Poll %s:", vdsManager.getVdsId())); super.onFetchVms(); logBuilder.append(java.lang.String.format("(%d VMs)", changedVms.size())); org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher.log.info(logBuilder.toString()); }

private org.ovirt.engine.core.common.businessentities.network.NetworkAttachment createAttachmentWhenAttachingTo(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface targetNic) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(targetNic, networkModel.getNetwork(), org.ovirt.engine.core.common.utils.NetworkCommonUtils.createDefaultIpConfiguration()); org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters netParams = networkModel.getSetupModel().getNetworkToLastDetachParams().get(networkModel.getName()); if (netParams != null) { applyOnAttachmentParamsFrom(netParams, networkAttachment); } else { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicToTakeParamsFrom = null; if (networkModel.hasVlan()) { nicToTakeParamsFrom = getPotentialVlanDevice(targetNic); } else { nicToTakeParamsFrom = targetNic; } if (nicToTakeParamsFrom != null) { applyOnAttachmentParamsFrom(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNic(nicToTakeParamsFrom), networkAttachment); } fixBootProtocolOfMgmtNetworkIfNeeded(networkAttachment); } return networkAttachment; }

@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtil.class, managementNetworkUtil); nic.setNetworkName(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NETWORK_NAME1); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.getInterfaces().add(nic); underTest = new org.ovirt.engine.core.bll.network.NetworkConfigurator(vds, org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.COMMAND_CONTEXT); }


















protected java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getOverUtilizedCPUHosts(java.util.Collection<org.ovirt.engine.core.common.businessentities.VDS> relevantHosts, final int highUtilization, final int cpuOverCommitDurationMinutes) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> overUtilizedHosts = org.ovirt.engine.core.utils.linq.LinqUtils.filter(relevantHosts, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.VDS>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.VDS p) { return (((((p.getUsageCpuPercent()) + (calcSpmCpuConsumption(p))) >= highUtilization) && ((p.getCpuOverCommitTimestamp()) != null)) && (((getTime().getTime()) - (p.getCpuOverCommitTimestamp().getTime())) >= (java.util.concurrent.TimeUnit.MINUTES.toMillis(cpuOverCommitDurationMinutes)))) && ((p.getVmCount()) > 0); } }); if ((overUtilizedHosts.size()) > 1) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getVdsGroupDao().get(overUtilizedHosts.get(0).getVdsGroupId()); java.util.Collections.sort(overUtilizedHosts, new org.apache.commons.collections.comparators.ReverseComparator(new org.ovirt.engine.core.bll.scheduling.utils.VdsCpuUsageComparator(((cluster != null) && (cluster.getCountThreadsAsCores()))))); } return overUtilizedHosts; }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getUnderUtilizedCPUHosts(java.util.Collection<org.ovirt.engine.core.common.businessentities.VDS> relevantHosts, final int lowUtilization, final int minVmCount, final int cpuOverCommitDurationMinutes) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> underUtilizedHosts = org.ovirt.engine.core.utils.linq.LinqUtils.filter(relevantHosts, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.VDS>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.VDS p) { return ((((p.getUsageCpuPercent()) + (calcSpmCpuConsumption(p))) < lowUtilization) && ((p.getVmCount()) >= minVmCount)) && (((p.getCpuOverCommitTimestamp()) == null) || (((getTime().getTime()) - (p.getCpuOverCommitTimestamp().getTime())) < (java.util.concurrent.TimeUnit.MINUTES.toMillis(cpuOverCommitDurationMinutes)))); } }); if ((underUtilizedHosts.size()) > 1) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getVdsGroupDao().get(underUtilizedHosts.get(0).getVdsGroupId()); java.util.Collections.sort(underUtilizedHosts, new org.ovirt.engine.core.bll.scheduling.utils.VdsCpuUsageComparator(((cluster != null) && (cluster.getCountThreadsAsCores())))); } return underUtilizedHosts; }

@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((balance) == null ? 0 : balance.hashCode()); result = (prime * result) + (defaultPolicy ? 1231 : 1237); result = (prime * result) + ((description) == null ? 0 : description.hashCode()); result = (prime * result) + ((filterPositionMap) == null ? 0 : filterPositionMap.hashCode()); result = (prime * result) + ((filters) == null ? 0 : filters.hashCode()); result = (prime * result) + ((functions) == null ? 0 : functions.hashCode()); result = (prime * result) + ((id) == null ? 0 : id.hashCode()); result = (prime * result) + (locked ? 1231 : 1237); result = (prime * result) + ((name) == null ? 0 : name.hashCode()); result = (prime * result) + ((parameterMap) == null ? 0 : parameterMap.hashCode()); return result; }

@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; if ((getClass()) != (obj.getClass())) return false; org.ovirt.engine.core.common.scheduling.ClusterPolicy other = ((org.ovirt.engine.core.common.scheduling.ClusterPolicy) (obj)); if ((balance) == null) { if ((other.balance) != null) return false; } else if (!(balance.equals(other.balance))) return false; if ((defaultPolicy) != (other.defaultPolicy)) return false; if ((description) == null) { if ((other.description) != null) return false; } else if (!(description.equals(other.description))) return false; if ((filterPositionMap) == null) { if ((other.filterPositionMap) != null) return false; } else if (!(filterPositionMap.equals(other.filterPositionMap))) return false; if ((filters) == null) { if ((other.filters) != null) return false; } else if (!(filters.equals(other.filters))) return false; if ((functions) == null) { if ((other.functions) != null) return false; } else if (!(functions.equals(other.functions))) return false; if ((id) == null) { if ((other.id) != null) return false; } else if (!(id.equals(other.id))) return false; if ((locked) != (other.locked)) return false; if ((name) == null) { if ((other.name) != null) return false; } else if (!(name.equals(other.name))) return false; if ((parameterMap) == null) { if ((other.parameterMap) != null) return false; } else if (!(parameterMap.equals(other.parameterMap))) return false; return true; }



private java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> runInternalFunctions(java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl, java.lang.Integer>> functions, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostCostTable = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl, java.lang.Integer> pair : functions) { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> scoreResult = pair.getFirst().score(hostList, vm, parameters); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer> result : scoreResult) { org.ovirt.engine.core.compat.Guid hostId = result.getFirst(); if ((hostCostTable.get(hostId)) == null) { hostCostTable.put(hostId, 0); } hostCostTable.put(hostId, ((hostCostTable.get(hostId)) + ((pair.getSecond()) * (result.getSecond())))); } } return hostCostTable; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, compatVersion, compatibilityVersion, cpuName, description, maxVdsMemoryOverCommit, countThreadsAsCores, migrateOnError, name, storagePoolId, storagePoolName, transparentHugepages, virtService, glusterService, glusterCliBasedSchedulingOn, tunnelMigration, emulatedMachine, trustedService, haReservation, clusterPolicyName, clusterPolicyProperties, requiredRngSources, enableKsm, enableBallooning, optimizationType, serialNumberPolicy, customSerialNumber, groupHostsAndVms, fencingPolicy, autoConverge, migrateCompressed, glusterTunedProfile, addtionalFeaturesSupported, maintenanceReasonRequired, ksmMergeAcrossNumaNodes, customMigrationNetworkBandwidth, migrationBandwidthLimitType); }
protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return tsb.append("id", getId()).append("name", getName()).append("vdsId", getVdsId()).append("networkName", getNetworkName()).append("ipv4BootProtocol", getIpv4BootProtocol()).append("ipv4Address", getIpv4Address()).append("ipv4Subnet", getIpv4Subnet()).append("ipv4Gateway", getIpv4Gateway()).append("ipv6BootProtocol", getIpv6BootProtocol()).append("ipv6Address", getIpv6Address()).append("ipv6Prefix", getIpv6Prefix()).append("ipv6Gateway", getIpv6Gateway()).append("mtu", getMtu()).append("bridged", isBridged()).append("type", getType()).append("networkImplementationDetails", getNetworkImplementationDetails()).append("qos", getQos()); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper = createIdParameterMapper(networkAttachment.getId()).addValue("network_id", networkAttachment.getNetworkId()).addValue("nic_id", networkAttachment.getNicId()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(networkAttachment.getProperties())); mapIpConfiguration(networkAttachment, mapper); return mapper; }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource createInterfaceParametersMapper(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { return getCustomMapSqlParameterSource().addValue("addr", nic.getIpv4Address()).addValue("ipv6_address", nic.getIpv6Address()).addValue("bond_name", nic.getBondName()).addValue("bond_type", nic.getBondType()).addValue("gateway", nic.getIpv4Gateway()).addValue("ipv6_gateway", nic.getIpv6Gateway()).addValue("id", nic.getId()).addValue("is_bond", nic.getBonded()).addValue("bond_opts", nic.getBondOptions()).addValue("mac_addr", nic.getMacAddress()).addValue("name", nic.getName()).addValue("network_name", nic.getNetworkName()).addValue("speed", nic.getSpeed()).addValue("subnet", nic.getIpv4Subnet()).addValue("ipv6_prefix", nic.getIpv6Prefix()).addValue("boot_protocol", nic.getIpv4BootProtocol()).addValue("ipv6_boot_protocol", nic.getIpv6BootProtocol()).addValue("type", nic.getType()).addValue("vds_id", nic.getVdsId()).addValue("vlan_id", nic.getVlanId()).addValue("base_interface", nic.getBaseInterface()).addValue("mtu", nic.getMtu()).addValue("bridged", nic.isBridged()).addValue("labels", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(nic.getLabels())); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", getId()).append("networkId", getNetworkId()).append("networkName", getNetworkName()).append("nicId", getNicId()).append("nicName", getNicName()).append("ipConfiguration", getIpConfiguration()).append("properties", getProperties()).append("overrideConfiguration", isOverrideConfiguration()).build(); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), ipv4Address, ipv6Address, bondName, bondOptions, bondType, bonded, ipv4BootProtocol, ipv6BootProtocol, networkName, bridged, ipv4Gateway, ipv6Gateway, mtu, ipv4Subnet, ipv6Prefix, vdsId, baseInterface, vlanId, qos, labels); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.network.NetworkAttachment mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment entity = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); entity.setId(getGuid(rs, "id")); entity.setNetworkId(getGuid(rs, "network_id")); entity.setNicId(getGuid(rs, "nic_id")); entity.setProperties(getCustomProperties(rs)); final org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); final java.lang.String bootProtocol = rs.getString("boot_protocol"); if (bootProtocol != null) { final org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = createIpv4Address(rs, bootProtocol); ipConfiguration.getIPv4Addresses().add(iPv4Address); } final java.lang.String v6BootProtocol = rs.getString("ipv6_boot_protocol"); if (v6BootProtocol != null) { final org.ovirt.engine.core.common.businessentities.network.IpV6Address ipV6Address = createIpV6Address(rs, v6BootProtocol); ipConfiguration.getIpV6Addresses().add(ipV6Address); } if ((bootProtocol != null) || (v6BootProtocol != null)) { entity.setIpConfiguration(ipConfiguration); } entity.setHostNetworkQos(hostNetworkQosDao.get(entity.getId())); return entity; }
private boolean isPrimaryAddressExist() { return ((networkDataCenterIpConfigurationDefinition) != null) && (networkDataCenterIpConfigurationDefinition.hasIpv4PrimaryAddressSet()); }
private org.ovirt.engine.core.common.businessentities.network.IPv4Address getPrimaryAddress() { return networkDataCenterIpConfigurationDefinition.getIpv4PrimaryAddress(); }
@org.junit.Test public void testReportConfigurationsOnHostWhenBootProtocolNotStatic() { initIpConfigurationBootProtocolAddress(NetworkBootProtocol.NONE, false); initIpConfigurationBootProtocolNetmask(NetworkBootProtocol.NONE, false); initIpConfigurationBootProtocolGateway(NetworkBootProtocol.NONE, false); org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface testedInstanceWithSameNonQosValues = createTestedInstanceWithSameNonQosValues(); java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> reportedConfigurationList = testedInstanceWithSameNonQosValues.reportConfigurationsOnHost().getReportedConfigurationList(); java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> expectedReportedConfigurations = createDefaultExpectedReportedConfigurations(); expectedReportedConfigurations.add(new org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurationType.BOOT_PROTOCOL, iface.getIpv4BootProtocol().name(), mockedIpConfiguration.getIpv4PrimaryAddress().getBootProtocol().name(), true)); assertThat(reportedConfigurationList.containsAll(expectedReportedConfigurations), is(true)); assertThat(reportedConfigurationList.size(), is(expectedReportedConfigurations.size())); }
public org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface createTestedInstance() { return new org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface(iface, network, networkQos, mockedIpConfiguration); }
org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface createNetworkInSyncWithVdsNetworkInterface(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.Network network) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos hostNetworkQos = effectiveHostNetworkQos.getQos(networkAttachment, network); return new org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface(nic, network, hostNetworkQos, (networkAttachment == null ? null : networkAttachment.getIpConfiguration())); }
private org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface build(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface, org.ovirt.engine.core.common.businessentities.network.Network network) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos hostNetworkQos = effectiveHostNetworkQos.getQos(networkAttachment, network); return new org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface(vdsNetworkInterface, network, hostNetworkQos, (networkAttachment == null ? null : networkAttachment.getIpConfiguration())); }
private void initIpConfiguration() { when(mockedIpConfiguration.hasIpv4PrimaryAddressSet()).thenReturn(true); when(mockedIpConfiguration.getIpv4PrimaryAddress()).thenReturn(mockedIPv4Address); }
@org.junit.Before public void setUp() throws java.lang.Exception { ifaceQos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos(); networkQos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos(); iface = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); iface.setBridged(true); network = new org.ovirt.engine.core.common.businessentities.network.Network(); iface.setQos(ifaceQos); }
@org.junit.Test public void testReportConfigurationsOnHostWhenBootProtocolNotStatic() { initIpConfigurationBootProtocolAddress(NetworkBootProtocol.NONE, false); initIpConfigurationBootProtocolNetmask(NetworkBootProtocol.NONE, false); initIpConfigurationBootProtocolGateway(NetworkBootProtocol.NONE, false); org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface testedInstanceWithSameNonQosValues = createTestedInstanceWithSameNonQosValues(); java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> reportedConfigurationList = testedInstanceWithSameNonQosValues.reportConfigurationsOnHost().getReportedConfigurationList(); java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> expectedReportedConfigurations = createDefaultExpectedReportedConfigurations(); org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = this.testedNetworkAttachment.getIpConfiguration().getIpv4PrimaryAddress(); expectedReportedConfigurations.add(new org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurationType.BOOT_PROTOCOL, iface.getIpv4BootProtocol().name(), primaryAddress.getBootProtocol().name(), true)); assertThat(reportedConfigurationList.containsAll(expectedReportedConfigurations), is(true)); assertThat(reportedConfigurationList.size(), is(expectedReportedConfigurations.size())); }


@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.AddClusterCommand.getCluster(); cluster.setArchitecture(org.ovirt.engine.core.bll.AddClusterCommand.getArchitecture()); org.ovirt.engine.core.bll.AddClusterCommand.checkMaxMemoryOverCommitValue(); cluster.setDetectEmulatedMachine(true); org.ovirt.engine.core.bll.AddClusterCommand.getClusterDao().save(cluster); org.ovirt.engine.core.bll.AddClusterCommand.alertIfFencingDisabled(); if ((org.ovirt.engine.core.bll.AddClusterCommand.getParameters().getCluster().getStoragePoolId()) != null) { attachManagementNetwork(); } addDefaultCpuProfile(); if (org.apache.commons.collections.CollectionUtils.isNotEmpty(cluster.getAddtionalFeaturesSupported())) { for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature : cluster.getAddtionalFeaturesSupported()) { feature.setClusterId(cluster.getId()); } clusterFeatureDao.addAllSupportedClusterFeature(cluster.getAddtionalFeaturesSupported()); } setActionReturnValue(cluster.getId()); org.ovirt.engine.core.bll.AddClusterCommand.setSucceeded(true); }







private void setDefaultSwitchTypeIfNeeded(org.ovirt.engine.core.common.businessentities.Cluster cluster) { if ((cluster.getRequiredSwitchTypeForCluster()) == null) { cluster.setRequiredSwitchTypeForCluster(org.ovirt.engine.core.common.network.SwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion())); } }
private void initSwitchType() { boolean version40OrNewer = version40OrNewer(); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.network.SwitchType> switchType = getSwitchType(); switchType.setItems(java.util.Arrays.asList(org.ovirt.engine.core.common.network.SwitchType.values())); switchType.setIsChangeable(version40OrNewer); switchType.setSelectedItem((version40OrNewer ? org.ovirt.engine.core.common.network.SwitchType.OVS : org.ovirt.engine.core.common.network.SwitchType.LEGACY)); }
protected org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession getSession(java.lang.String masterVolumeName, java.util.Map<java.lang.String, java.lang.Object> innerMap) { org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession geoRepSession = new org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession(); java.lang.String sessionKey = ((java.lang.String) (innerMap.get(org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc.SESSION_KEY))); java.lang.String[] sessSplit = sessionKey.split("([://]+)"); java.lang.String slaveNode = sessSplit[((sessSplit.length) - 2)]; if (slaveNode.contains("@")) { java.lang.String[] hostComponents = slaveNode.split("@"); slaveNode = hostComponents[((hostComponents.length) - 1)]; geoRepSession.setUserName(hostComponents[0]); } java.lang.String slaveVolume = ((java.lang.String) (innerMap.get(org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc.REMOTE_VOL_NAME))); geoRepSession.setSlaveHostName(slaveNode); geoRepSession.setSlaveVolumeName(slaveVolume); geoRepSession.setSessionKey(sessionKey); geoRepSession.setMasterVolumeName(masterVolumeName); return geoRepSession; }
private java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> runInternalFunctions(java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl, java.lang.Integer>> functions, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostCostTable = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl, java.lang.Integer> pair : functions) { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> scoreResult = pair.getFirst().score(hostList, vm, parameters); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer> result : scoreResult) { org.ovirt.engine.core.compat.Guid hostId = result.getFirst(); if ((hostCostTable.get(hostId)) == null) { hostCostTable.put(hostId, 0); } hostCostTable.put(hostId, ((hostCostTable.get(hostId)) + ((pair.getSecond()) * (result.getSecond())))); } } return hostCostTable; }
@java.lang.Override public void init(final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel model) { super.init(model); addDataCenterListener(); addImportSourceListener(); updateExportDomainLoadButtonEnabledState(); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = dataCenters.getSelectedItem(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenter.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(this, createGetStorageDomainsByStoragePoolIdCallback(dataCenter))); }
private void addDataCenterListener() { getModel().getDataCenters().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsChangable".equals(args.propertyName)) { final boolean enabled = getModel().getDataCenters().getIsChangable(); updateExportDomainLoadButtonEnabledState(); getView().getLoadVmsFromVmwareButton().setEnabled(enabled); getView().getLoadOvaButton().setEnabled(enabled); getView().getLoadXenButton().setEnabled(enabled); getView().getLoadKvmButton().setEnabled(enabled); } } }); }
@java.lang.Override public void updateAllDiskImageDynamicWithDiskIdByVmId(java.util.Collection<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic>> diskImageDynamicForVm) { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic>> sortedDisks = new java.util.ArrayList<>(); sortedDisks.addAll(diskImageDynamicForVm); java.util.Collections.sort(sortedDisks, new org.ovirt.engine.core.common.utils.PairFirstComparator(new org.ovirt.engine.core.common.utils.NaturalOrderComparator())); getCallsHandler().executeStoredProcAsBatch("Updatedisk_image_dynamic_by_disk_id_and_vm_id", sortedDisks, getBatchImageGroupMapper()); }
@java.lang.Override protected void endWithFailure() { setSucceeded(org.ovirt.engine.core.bll.Backend.getInstance().endAction(VdcActionType.RunVm, org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().getImagesParameters().get(0), org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.cloneContext().withoutExecutionContext().withoutLock()).getSucceeded()); if (!(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getSucceeded())) { log.warn("AttachUserToVmFromPoolAndRunCommand::EndWitFailure: endAction of RunVm Failed"); } detachUserFromVmFromPool(); }
@java.lang.Override protected void endSuccessfully() { if ((org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVm()) != null) { if (org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getSnapshotDao().exists(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVm().getId(), SnapshotType.STATELESS)) { setSucceeded(org.ovirt.engine.core.bll.Backend.getInstance().endAction(VdcActionType.RunVm, org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().getImagesParameters().get(0), org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.cloneContext().withoutLock().withoutExecutionContext()).getSucceeded()); if (!(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getSucceeded())) { log.warn("EndSuccessfully: endAction of RunVm failed, detaching user from Vm"); detachUserFromVmFromPool(); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getReturnValue().setEndActionTryAgain(false); } } else { log.warn("EndSuccessfully: No images were created for Vm, detaching user from Vm"); detachUserFromVmFromPool(); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getReturnValue().setEndActionTryAgain(false); } } else { org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.setCommandShouldBeLogged(false); log.warn("AttachUserToVmFromPoolAndRunCommand::EndSuccessfully: Vm is null - not performing full endAction"); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.setSucceeded(true); } }
public boolean attemptConnection() { boolean connected = false; try { for (int i = 0; i < (this.retryAttempts); i++) { long timeout = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SetupNetworksPollingTimeout); org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task = resourceManager.runFutureVdsCommand(FutureVDSCommandType.TimeBoundPoll, new org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters(vds.getId(), timeout, java.util.concurrent.TimeUnit.SECONDS)); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = task.get(timeout, java.util.concurrent.TimeUnit.SECONDS); connected = returnValue.getSucceeded(); if (connected) { break; } java.lang.Thread.sleep(this.connectionTimeout); } } catch (java.util.concurrent.TimeoutException | java.lang.InterruptedException | org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ignored) { } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.transport.ProtocolDetector.log.warn("Failed to connect to host", e.getMessage()); org.ovirt.engine.core.bll.transport.ProtocolDetector.log.debug("Exception", e); } return connected; }
public static void init() { java.lang.Class<?>[] inspectedClasses = new java.lang.Class<?>[]{ org.ovirt.engine.core.common.businessentities.VDS.class, org.ovirt.engine.core.common.businessentities.VdsStatic.class, org.ovirt.engine.core.common.businessentities.VdsDynamic.class }; org.ovirt.engine.core.bll.VdsHandler.updateVdsStatic = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.bll.VdsHandler.class, java.util.Arrays.asList(inspectedClasses)); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.EditableField, java.lang.reflect.Field> pair : extractAnnotatedFields(org.ovirt.engine.core.common.businessentities.EditableField.class, inspectedClasses)) { org.ovirt.engine.core.bll.VdsHandler.updateVdsStatic.addPermittedFields(pair.getSecond().getName()); } for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.EditableOnVdsStatus, java.lang.reflect.Field> pair : extractAnnotatedFields(org.ovirt.engine.core.common.businessentities.EditableOnVdsStatus.class, inspectedClasses)) { org.ovirt.engine.core.bll.VdsHandler.updateVdsStatic.addField(java.util.Arrays.asList(pair.getFirst().statuses()), pair.getSecond().getName()); } }
public static void init() { final java.lang.Class<?>[] inspectedClassNames = new java.lang.Class<?>[]{ org.ovirt.engine.core.common.businessentities.VmBase.class, org.ovirt.engine.core.common.businessentities.VmTemplate.class }; org.ovirt.engine.core.bll.VmTemplateHandler.updateVmTemplate = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.bll.VmTemplateHandler.class); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.EditableField, java.lang.reflect.Field> pair : org.ovirt.engine.core.common.backendinterfaces.BaseHandler.extractAnnotatedFields(org.ovirt.engine.core.common.businessentities.EditableField.class, inspectedClassNames)) { org.ovirt.engine.core.bll.VmTemplateHandler.updateVmTemplate.addPermittedFields(pair.getSecond().getName()); } for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.EditableOnTemplate, java.lang.reflect.Field> pair : org.ovirt.engine.core.common.backendinterfaces.BaseHandler.extractAnnotatedFields(org.ovirt.engine.core.common.businessentities.EditableOnTemplate.class, inspectedClassNames)) { org.ovirt.engine.core.bll.VmTemplateHandler.updateVmTemplate.addPermittedFields(pair.getSecond().getName()); } }

protected void postSaveAction(org.ovirt.engine.core.common.businessentities.network.Network network, boolean succeeded) { super.postSaveAction(network.getId(), succeeded); if (!succeeded) { return; } attachNetworkToClusters(network.getId()); org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providedBy = network.getProvidedBy(); if (((getExport().getEntity()) && (getCreateSubnet().getEntity())) && (providedBy != null)) { getSubnetModel().setExternalNetwork(providedBy); getSubnetModel().flush(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.AddSubnetToProvider, new org.ovirt.engine.core.common.action.AddExternalSubnetParameters(getSubnetModel().getSubnet(), providedBy.getProviderId(), providedBy.getExternalId())); } }

@java.lang.Override protected void executeSave() { org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback addNetworkCallback = new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result1) { org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = result1.getReturnValue(); boolean succeeded = false; if ((retVal != null) && (retVal.getSucceeded())) { succeeded = true; } postSaveAction((succeeded ? ((org.ovirt.engine.core.common.businessentities.network.Network) (retVal.getActionReturnValue())) : null), succeeded); } }; final org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(getSelectedDc().getId(), getNetwork()); parameters.setVnicProfileRequired(false); if (getExport().getEntity()) { org.ovirt.engine.core.common.businessentities.Provider externalProvider = getExternalProviders().getSelectedItem(); org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providerNetwork = new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(); providerNetwork.setProviderId(externalProvider.getId()); getNetwork().setProvidedBy(providerNetwork); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.AddNetworkOnProvider, parameters, addNetworkCallback, null); } else { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.AddNetwork, parameters, addNetworkCallback, null); } }






java.lang.String copyVmPermissions();


@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Disk disk) { org.ovirt.engine.api.model.DiskAttachment diskAttachment = new org.ovirt.engine.api.model.DiskAttachment(); diskAttachment.setInterface(DiskInterface.VIRTIO); diskAttachment.setBootable(false); diskAttachment.setDisk(disk); if (disk.isSetId()) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(disk.getId()); return getAttachmentsResource().attachDiskToVm(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAttachDiskResolver(diskId)); } else { return getAttachmentsResource().createDisk(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAddDiskResolver()); } }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.Disk incoming, org.ovirt.engine.core.common.businessentities.storage.Disk entity) { return new org.ovirt.engine.core.common.action.VmDiskOperationParameterBase(new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(entity.getId(), vmId), map(incoming, entity)); }
private void completeNetworkAttachment(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks) { org.ovirt.engine.core.compat.Guid networkId = networkAttachment.getNetworkId(); java.lang.String networkName = networkAttachment.getNetworkName(); if ((networkId == null) && (networkName == null)) { return; } if (networkName != null) { org.ovirt.engine.core.common.businessentities.network.Network network = getNetworkByName(networkName, clusterNetworks); if (network != null) { if (networkId == null) { networkAttachment.setNetworkId(network.getId()); } else { } } } else { org.ovirt.engine.core.common.businessentities.network.Network network = getNetworkById(networkId, clusterNetworks); networkAttachment.setNetworkName(network.getName()); } }
private org.ovirt.engine.api.extensions.ExtMap loginOnBehalf(org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser) { java.util.Map<java.lang.String, java.lang.Object> response = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.findPrincipalsByIds(org.ovirt.engine.core.bll.aaa.LoginOnBehalfCommand.getSessionDataContainer().getSsoAccessToken(org.ovirt.engine.core.bll.aaa.LoginOnBehalfCommand.getParameters().getSessionId()), dbUser.getDomain(), dbUser.getNamespace(), java.util.Arrays.asList(dbUser.getExternalId()), true, true); java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> principalRecords = java.util.Collections.emptyList(); if (response.containsKey("result")) { principalRecords = ((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (response.get("result"))); } if (principalRecords.isEmpty()) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PRINCIPAL_NOT_FOUND, java.lang.String.format(" user %s in domain '%s", dbUser.getLoginName(), dbUser.getDomain())); } return principalRecords.iterator().next(); }



public static <T> java.util.List<java.lang.String> validateInputs(java.util.List<java.lang.Class<?>> validationGroupList, T parameters) { java.util.List<java.lang.String> messages = java.util.Collections.emptyList(); java.util.Set<javax.validation.ConstraintViolation<T>> violations = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, validationGroupList.toArray(new java.lang.Class<?>[validationGroupList.size()])); if (!(violations.isEmpty())) { messages = new java.util.ArrayList(violations.size()); for (javax.validation.ConstraintViolation<T> constraintViolation : violations) { messages.add(constraintViolation.getMessage()); } } return messages; }



@java.lang.Override public org.ovirt.engine.core.common.businessentities.ErrataData getErrataForHost(java.lang.String hostName, org.ovirt.engine.core.common.queries.ErrataFilter errataFilter) { org.ovirt.engine.core.bll.host.provider.foreman.ContentHost contentHost = findContentHost(hostName); if (contentHost == null) { org.ovirt.engine.core.bll.host.provider.foreman.KatelloV21Provider.log.error("Failed to find host on provider '{}' by host name '{}' ", provider.getProvider().getName(), hostName); return org.ovirt.engine.core.common.businessentities.ErrataData.emptyData(); } if (errataFilter == null) { errataFilter = new org.ovirt.engine.core.common.queries.ErrataFilter(); errataFilter.setErrataTypes(java.util.EnumSet.allOf(Erratum.ErrataType.class)); } errataFilter.setPageSize(org.ovirt.engine.core.bll.host.provider.foreman.KatelloV21Provider.UNLIMITED_PAGE_SIZE); java.lang.String relativeUrl = org.ovirt.engine.core.bll.host.provider.foreman.FilteredErrataRelativeUrlBuilder.create(contentHost.getUuid(), errataFilter).build(); return runErrataListMethod(relativeUrl, hostName); }



public static org.ovirt.engine.core.common.businessentities.network.NetworkAttachment newNetworkAttachment(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface baseNic, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanDevice, org.ovirt.engine.core.compat.Guid networkAttachmentId, java.util.Set<java.lang.String> networksToSync, org.ovirt.engine.core.common.businessentities.network.HostNetworkQos overridingQos, java.util.Map<java.lang.String, java.lang.String> customProperties) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface targetNic = (vlanDevice == null) ? baseNic : vlanDevice; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); networkAttachment.setId(networkAttachmentId); networkAttachment.setNetworkId(network.getId()); networkAttachment.setNicId(baseNic.getId()); networkAttachment.setNicName(baseNic.getName()); networkAttachment.setOverrideConfiguration(networksToSync.contains(network.getName())); networkAttachment.setProperties(customProperties); networkAttachment.setHostNetworkQos(overridingQos); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.fillIpConfigurationData(networkAttachment, targetNic); return networkAttachment; }


private org.ovirt.engine.core.common.businessentities.VDS getAlternateUpServerInCluster(org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.compat.Guid vdsId) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getVdsDao().getAllForClusterWithStatus(clusterId, VDSStatus.Up); if (vdsList.isEmpty()) { return null; } for (org.ovirt.engine.core.common.businessentities.VDS vds : vdsList) { if (!(vdsId.equals(vds.getId()))) { return vds; } } return null; }
private void setNonOperational(org.ovirt.engine.core.common.businessentities.VDS server) { org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters nonOpParams = new org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters(server.getId(), org.ovirt.engine.core.common.businessentities.NonOperationalReason.GLUSTER_COMMAND_FAILED, java.util.Collections.singletonMap(GlusterConstants.COMMAND, "gluster peer status")); backend.runInternalAction(VdcActionType.SetNonOperationalVds, nonOpParams, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); }


private boolean validateVmwareConfiguration() { getvCenter().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(255), new org.ovirt.engine.ui.uicommonweb.validation.HostAddressValidation() }); getEsx().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(255), new org.ovirt.engine.ui.uicommonweb.validation.HostAddressValidation() }); getVmwareDatacenter().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); getUsername().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.NameAndOptionalDomainValidation() }); getPassword().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); return ((((getvCenter().getIsValid()) && (getEsx().getIsValid())) && (getVmwareDatacenter().getIsValid())) && (getUsername().getIsValid())) && (getPassword().getIsValid()); }
@java.lang.Override public java.util.ArrayList<org.ovirt.engine.core.compat.Guid> getTaskIdList() { return super.getTaskIdList(); }

@java.lang.Override public org.ovirt.engine.core.compat.Guid persistAsyncTaskPlaceHolder(java.lang.String taskKey) { return super.persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getActionType(), taskKey); }

@java.lang.Override public org.ovirt.engine.core.compat.Guid persistAsyncTaskPlaceHolder() { return super.persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getActionType()); }
@java.lang.Override public void taskEndSuccessfully() { super.endSuccessfully(); }
@java.lang.Override public org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { return super.createTask(taskId, asyncTaskCreationInfo, parentCommand); }
private void createNewDiskId() { org.ovirt.engine.core.compat.Guid newDiskId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getDiskInfo().setId(newDiskId); if (!(isFloatingDisk())) { org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getDiskVmElement().getId().setDeviceId(newDiskId); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.setSucceeded(true); }
public void connectStoragePool() { java.util.Map<java.lang.String, java.lang.String> storageDomains = null; storageDomains = org.ovirt.engine.core.vdsbroker.storage.StoragePoolDomainHelper.buildStoragePoolDomainsMap(ConnectStoragePoolVDSCommand.getParameters().getStorageDomains()); status = ConnectStoragePoolVDSCommand.getBroker().connectStoragePool(ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), ConnectStoragePoolVDSCommand.getParameters().getVds().getVdsSpmId(), ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), ConnectStoragePoolVDSCommand.getParameters().getMasterDomainId().toString(), ConnectStoragePoolVDSCommand.getParameters().getStoragePool().getMasterDomainVersion(), storageDomains); }




@org.junit.Before public void setUpDefaultEntities() { defaultCluster = clusterBuilder.persist(); defaultHost = vdsBuilder.cluster(defaultCluster).persist(); defaultVM = vmBuilder.host(defaultHost).up().persist(); }
@org.junit.Test public void testSnmpManagersParsing() { java.util.List<org.ovirt.engine.core.notifier.transport.snmp.Snmp.Host> expectedManagers = new java.util.ArrayList<>(); java.lang.StringBuilder snmpManagers = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> host : org.ovirt.engine.core.notifier.transport.snmp.ProfileTest.hosts) { expectedManagers.add(new org.ovirt.engine.core.notifier.transport.snmp.Snmp.Host(host.getFirst(), host.getSecond())); snmpManagers.append(host.getFirst()); if ((host.getSecond()) != null) { snmpManagers.append(":").append(host.getSecond()); } snmpManagers.append(" "); } org.ovirt.engine.core.notifier.transport.snmp.Snmp.Profile profile = new org.ovirt.engine.core.notifier.transport.snmp.Snmp.Profile(snmpManagers.toString(), "public", "1.3.6.1.4.1.2312.13.1.1"); for (int i = 0; i < (expectedManagers.size()); i++) { org.ovirt.engine.core.notifier.transport.snmp.Snmp.Host parsed = profile.hosts.get(i); org.ovirt.engine.core.notifier.transport.snmp.Snmp.Host expected = expectedManagers.get(i); org.junit.Assert.assertEquals(parsed.name, expected.name); org.junit.Assert.assertEquals(parsed.port, expected.port); } }



private static java.util.List<org.ovirt.engine.api.extensions.ExtMap> getPrincipalById(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, java.util.Map<java.lang.String, java.lang.Object> params) { java.util.List<org.ovirt.engine.api.extensions.ExtMap> users = new java.util.ArrayList<>(); final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension = ssoContext.getSsoExtensionsManager().getExtensionByName(((java.lang.String) (params.get(SsoConstants.HTTP_PARAM_DOMAIN)))); java.lang.String searchNamespace = ((java.lang.String) (params.get(SsoConstants.HTTP_PARAM_NAMESPACE))); for (java.lang.String namespace : org.apache.commons.lang.StringUtils.isEmpty(searchNamespace) ? org.ovirt.engine.core.sso.search.DirectorySearch.getNamespaces(ssoContext, ((java.lang.String) (params.get(SsoConstants.HTTP_PARAM_DOMAIN)))) : java.util.Arrays.asList(searchNamespace)) { users.addAll(org.ovirt.engine.core.sso.search.AuthzUtils.findPrincipalsByIds(extension, namespace, java.util.Arrays.asList(((java.lang.String) (params.get(SsoConstants.HTTP_PARAM_ID)))), ((boolean) (params.get(SsoConstants.HTTP_PARAM_GROUPS_RESOLVING))), ((boolean) (params.get(SsoConstants.HTTP_PARAM_GROUPS_RESOLVING_RECURSIVE))))); } return users; }
protected abstract void setDefaultInterface();



@java.lang.Override public void onColumnSort(com.google.gwt.user.cellview.client.ColumnSortEvent event) { com.google.gwt.user.cellview.client.Column<?, ?> column = event.getColumn(); if (column instanceof org.ovirt.engine.ui.common.widget.table.column.SortableColumn) { org.ovirt.engine.ui.common.widget.table.column.SortableColumn<T, ?> sortableColumn = ((org.ovirt.engine.ui.common.widget.table.column.SortableColumn<T, ?>) (column)); boolean sortApplied = false; if ((searchableModel != null) && (searchableModel.supportsServerSideSorting())) { if (searchableModel.isSearchValidForServerSideSorting()) { searchableModel.updateSortOptions(sortableColumn.getSortBy(), event.isSortAscending()); sortApplied = true; } else { searchableModel.clearSortOptions(); } } else { java.util.Comparator<? super T> comparator = sortableColumn.getComparator(); if (comparator != null) { sortedModel.setComparator(comparator, event.isSortAscending()); sortApplied = true; if (searchableModel == null) { sortedModel.setItems(sortedModel.getItems()); } } } com.google.gwt.user.cellview.client.ColumnSortList.ColumnSortInfo columnSortInfo = event.getColumnSortList().get(0); if (sortApplied) { pushColumnSort(columnSortInfo); } else { clearColumnSort(); } } }


@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { final java.util.List<org.ovirt.engine.core.common.businessentities.Label> allLabels = ((java.util.List<org.ovirt.engine.core.common.businessentities.Label>) (result)); if (getIsNew()) { labelList.setItems(allLabels); labelList.setSelectedItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Label>()); } else { org.ovirt.engine.ui.frontend.AsyncQuery getLabelsByVmIdQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getLabelsByVmIdQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.Label> vmLabelsList = ((java.util.List<org.ovirt.engine.core.common.businessentities.Label>) (returnValue)); labelList.setItems(allLabels); labelList.setSelectedItems(vmLabelsList); } }; org.ovirt.engine.core.compat.Guid vmId = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior) (getBehavior())).getVm().getId(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getLabelListByEntityId(getLabelsByVmIdQuery, vmId); } labelList.setIsChangeable(false); }
private void enableLoadBalancer() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableVdsLoadBalancing)) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Start scheduling to enable vds load balancer"); org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.class).scheduleAFixedDelayJob(this, "performLoadBalancing", new java.lang.Class[]{ }, new java.lang.Object[]{ }, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsLoadBalancingIntervalInMinutes), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsLoadBalancingIntervalInMinutes), java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Finished scheduling to enable vds load balancer"); } }
private void loadClusterPolicies() { policyMap.putAll(org.ovirt.engine.core.bll.scheduling.InternalClusterPolicies.getClusterPolicies()); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.scheduling.PolicyUnitType> internalTypes = new java.util.HashMap<>(); for (org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl unit : policyUnits.values()) { internalTypes.put(unit.getGuid(), unit.getType()); } java.util.List<org.ovirt.engine.core.common.scheduling.ClusterPolicy> allClusterPolicies = getClusterPolicyDao().getAll(java.util.Collections.unmodifiableMap(internalTypes)); final org.ovirt.engine.core.compat.Guid defaultSelectorGuid = org.ovirt.engine.core.bll.scheduling.InternalPolicyUnits.getGuid(org.ovirt.engine.core.bll.scheduling.policyunits.BasicWeightSelectorPolicyUnit.class); for (org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy : allClusterPolicies) { if ((clusterPolicy.getSelector()) == null) { clusterPolicy.setSelector(defaultSelectorGuid); } policyMap.put(clusterPolicy.getId(), clusterPolicy); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalActionWithTasksContext(VdcActionType.UpdateVmVersion, new org.ovirt.engine.core.common.action.UpdateVmVersionParameters(org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVmId()), org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getLock()); if ((!(result.getSucceeded())) && (!(result.isValid()))) { log.warn("Couldn't update VM '{}' ({}) version from it's template, continue with restoring stateless snapshot.", org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVmId()); org.ovirt.engine.core.bll.RestoreStatelessVmCommand.setSucceeded(restoreInitialState()); } else { setSucceeded(result.getSucceeded()); } }


@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((getType().getSelectedItem()) != (org.ovirt.engine.core.common.businessentities.ProviderType.VMWARE)) { return; } if ((getDataCenter().getSelectedItem()) == null) { getVmwarePropertiesModel().disableProxyHost(); } else { getVmwarePropertiesModel().getProxyHost().setIsChangeable(true); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByDataCenter(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((java.util.List<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); org.ovirt.engine.core.common.businessentities.VDS prevHost = getPreviousHost(hosts); hosts.add(0, null); getVmwarePropertiesModel().getProxyHost().setItems(hosts); getVmwarePropertiesModel().getProxyHost().setSelectedItem(prevHost); } }), getDataCenter().getSelectedItem().getId()); } }

protected void updateDatacentersForVmwareProvider() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterList(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = ((java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>) (returnValue)); org.ovirt.engine.core.common.businessentities.StoragePool prevDataCenter = getPreviousDataCenter(dataCenters); java.util.Collections.sort(dataCenters, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); dataCenters.add(0, null); getDataCenter().setItems(dataCenters); getDataCenter().setSelectedItem(prevDataCenter); if ((getDataCenter().getSelectedItem()) == null) { getVmwarePropertiesModel().disableProxyHost(); } } private org.ovirt.engine.core.common.businessentities.StoragePool getPreviousDataCenter(java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters) { org.ovirt.engine.core.compat.Guid previousDataCenterId = getVmwarePropertiesModel().getLastStoragePoolId(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : dataCenters) { if (dataCenter.getId().equals(previousDataCenterId)) { return dataCenter; } } return null; } })); }


@java.lang.Override public java.lang.String convertPrefixToNetmask(java.lang.String prefix) { int prefixAsInt = java.lang.Integer.parseInt(prefix); int mask = (prefixAsInt == 0) ? 0 : -1 ^ ((1 << (32 - prefixAsInt)) - 1); byte[] netmaskByteArray = new byte[]{ ((byte) (mask >>> 24)), ((byte) (mask >>> 16)), ((byte) (mask >>> 8)), ((byte) (mask)) }; java.lang.StringBuilder stringBuilder = new java.lang.StringBuilder(); for (int i = 0; i < (netmaskByteArray.length); i++) { int octet = 255 & (netmaskByteArray[i]); stringBuilder.append(".").append(octet); } return stringBuilder.substring(1); }



public void setClientPolicy(org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy policy) { this.policy = policy; this.validate(); if (isOpen()) { disconnect("Policy reset"); } }
@java.lang.Override public org.ovirt.engine.api.model.VmPool doPopulate(org.ovirt.engine.api.model.VmPool pool, org.ovirt.engine.core.common.businessentities.VmPool entity) { setRngDevice(pool); return pool; }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase runAction(org.ovirt.engine.core.bll.CommandBase<?> action, org.ovirt.engine.core.bll.job.ExecutionContext executionContext) { org.ovirt.engine.core.bll.job.ExecutionHandler.setExecutionContextForTasks(action.getContext(), executionContext, null); return runAction(action, true); }
private org.ovirt.engine.core.common.action.VdcReturnValueBase runActionImpl(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, boolean runAsInternal, org.ovirt.engine.core.bll.context.CommandContext context) { org.ovirt.engine.core.common.action.VdcReturnValueBase result; if (((!(actionType.isActionMonitored())) && (!(isActionExternal(actionType)))) && (((parameters.getJobId()) != null) || ((parameters.getStepId()) != null))) { result = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); result.getCanDoActionMessages().add(EngineMessage.ACTION_TYPE_NON_MONITORED.toString()); result.setCanDoAction(false); result.setSucceeded(false); } else { org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameters, context); result = runAction(command, runAsInternal); } return result; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().setVmTemplateId(org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getVmTemplateId()); org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().setSpeed(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().getType()).getSpeed()); org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getVmNicDao().save(org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.addInterface(org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getVmTemplateId(), org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().getId(), org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().isPlugged(), org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().isPassthrough()); org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.setSucceeded(true); }
protected void updateParametersVmFromInstanceType() { org.ovirt.engine.core.common.businessentities.InstanceType instanceType = getInstanceType(); org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVmStaticData(); if (instanceType != null) { vmStatic.setMemSizeMb(instanceType.getMemSizeMb()); vmStatic.setNumOfSockets(instanceType.getNumOfSockets()); vmStatic.setCpuPerSocket(instanceType.getCpuPerSocket()); vmStatic.setThreadsPerCpu(instanceType.getThreadsPerCpu()); vmStatic.setAutoStartup(instanceType.isAutoStartup()); if (org.ovirt.engine.core.common.FeatureSupported.isMigrationSupported(org.ovirt.engine.core.bll.VmManagementCommandBase.getCluster().getArchitecture(), getEffectiveCompatibilityVersion())) { vmStatic.setMigrationSupport(instanceType.getMigrationSupport()); } vmStatic.setNumOfIoThreads(instanceType.getNumOfIoThreads()); vmStatic.setMigrationDowntime(instanceType.getMigrationDowntime()); vmStatic.setPriority(instanceType.getPriority()); vmStatic.setTunnelMigration(instanceType.getTunnelMigration()); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = org.ovirt.engine.core.bll.utils.VmDeviceUtils.getMemoryBalloons(instanceType.getId()); vmStatic.setMinAllocatedMem(instanceType.getMinAllocatedMem()); if (vmDevices.isEmpty()) { org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().setBalloonEnabled(false); } else if (osRepository.isBalloonEnabled(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVmStaticData().getOsId(), getEffectiveCompatibilityVersion())) { org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().setBalloonEnabled(true); } vmStatic.setMigrationPolicyId(instanceType.getMigrationPolicyId()); } }
@java.lang.Override protected void perform() { java.lang.String iface = null; int index = 0; if (org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getCompatibilityVersion().greaterOrEquals(Version.v4_0)) { iface = org.ovirt.engine.core.bll.utils.VmDeviceUtils.getCdInterface(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm()); index = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdDeviceIndex(iface); } cdImagePath = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.cdPathWindowsToLinux(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getParameters().getCdImagePath(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getRunOnVds()); setActionReturnValue(runVdsCommand(VDSCommandType.ChangeDisk, new org.ovirt.engine.core.common.vdscommands.ChangeDiskVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVdsId(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getId(), iface, index, cdImagePath)).getReturnValue()); org.ovirt.engine.core.bll.VmHandler.updateCurrentCd(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVdsId(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getParameters().getCdImagePath()); org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.setSucceeded(true); }
protected org.ovirt.engine.core.bll.validator.storage.DiskValidator createDiskValidator(org.ovirt.engine.core.common.businessentities.storage.DiskImage disk) { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator(disk); }
@java.lang.Override protected void addVmInterfaces() { super.addVmInterfaces(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getInterfaces()) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addInterface(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId(), iface.getId(), iface.isPlugged(), false); } }
@java.lang.Override @org.junit.Before public void setUp() { super.setUp(); org.ovirt.engine.core.common.action.ImportRepoImageParameters importParameters = new org.ovirt.engine.core.common.action.ImportRepoImageParameters(); importParameters.setSourceRepoImageId(getRepoImageId()); importParameters.setSourceStorageDomainId(getRepoStorageDomainId()); importParameters.setStoragePoolId(getStoragePoolId()); importParameters.setStorageDomainId(getStorageDomainId()); cmd = spy(new org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand(importParameters, null)); doReturn(getStorageDomainDao()).when(cmd).getStorageDomainDao(); doReturn(getStoragePoolDao()).when(cmd).getStoragePoolDao(); doReturn(getProviderProxy()).when(cmd).getProviderProxy(); doReturn(true).when(cmd).validateSpaceRequirements(any(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)); }
@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.canRunActionOnNonManagedVm())) { return false; } if ((!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.isInternalExecution())) && (!(org.ovirt.engine.core.utils.ObjectIdentityChecker.canUpdateField(org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm(), "clusterId", org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm().getStatus())))) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } org.ovirt.engine.core.bll.ChangeVmClusterValidator validator = new org.ovirt.engine.core.bll.ChangeVmClusterValidator(this, org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getClusterId(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getVmCustomCompatibilityVersion()); return validator.validate(); }
protected boolean isBalloonEnabled(org.ovirt.engine.core.compat.Guid vmId) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasMemoryBalloon(vmId); }
protected boolean hasWatchdog(org.ovirt.engine.core.compat.Guid vmId) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasWatchdog(vmId); }
protected org.ovirt.engine.core.bll.validator.storage.DiskValidator getDiskValidator(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator(disk); }
private void addImportedDevices(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vm.getStaticData(); vmStatic.setImages(new java.util.ArrayList()); vmStatic.setInterfaces(new java.util.ArrayList()); org.ovirt.engine.core.bll.exportimport.ImportUtils.updateGraphicsDevices(vmStatic, org.ovirt.engine.core.bll.exportimport.ConvertVmCommand.getStoragePool().getCompatibilityVersion()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.addImportedDevices(vmStatic, false); saveDiskVmElements(vm); org.ovirt.engine.core.bll.exportimport.ConvertVmCommand.getVmDeviceDao().updateBootOrderInBatch(new java.util.ArrayList(vm.getManagedVmDeviceMap().values())); }
protected boolean isSoundDeviceEnabled(org.ovirt.engine.core.compat.Guid vmId) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasSoundDevice(vmId); }
protected final void endVmTemplateRelatedOps() { if ((org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmTemplate()) != null) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.setVmDevices(org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmTemplate()); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmTemplate(), true); incrementDbGeneration(); org.ovirt.engine.core.bll.VmTemplateHandler.unlockVmTemplate(org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmTemplateId()); } else { org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.setCommandShouldBeLogged(false); log.warn("MoveOrCopyTemplateCommand::EndMoveOrCopyCommand: VmTemplate is null, not performing full endAction"); } }
protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.VmHostDevice> getExistingVmHostDevicesByName() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> existingDevices = org.ovirt.engine.core.bll.hostdev.AbstractVmHostDevicesCommand.getVmDeviceDao().getVmDeviceByVmIdAndType(org.ovirt.engine.core.bll.hostdev.AbstractVmHostDevicesCommand.getVmId(), VmDeviceGeneralType.HOSTDEV); java.util.List<org.ovirt.engine.core.common.businessentities.VmHostDevice> result = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmDevice device : existingDevices) { result.add(new org.ovirt.engine.core.common.businessentities.VmHostDevice(device)); } return org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmDevicesByDevice(result); }
@java.lang.Override protected void executeCommand() { boolean success = true; org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { initImportClonedTemplateDisks(); addVmTemplateToDb(); updateOriginalTemplateNameOnDerivedVms(); addVmInterfaces(); getCompensationContext().stateChanged(); org.ovirt.engine.core.bll.VmHandler.addVmInitToDB(getVmTemplate()); return null; }); boolean doesVmTemplateContainImages = !(getImages().isEmpty()); if (doesVmTemplateContainImages && (!(getParameters().isImagesExistOnTargetStorageDomain()))) { moveOrCopyAllImageGroups(getVmTemplateId(), getImages()); } org.ovirt.engine.core.bll.utils.VmDeviceUtils.addImportedDevices(getVmTemplate(), getParameters().isImportAsNewEntity()); if ((!doesVmTemplateContainImages) || (getParameters().isImagesExistOnTargetStorageDomain())) { endMoveOrCopyCommand(); } checkTrustedService(); setSucceeded(success); }
protected void mockOsRepository() { injectorRule.bind(org.ovirt.engine.core.bll.CpuFlagsManagerHandler.class, cpuFlagsManagerHandler); org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); org.ovirt.engine.core.bll.VmHandler.init(); when(osRepository.isWindows(0)).thenReturn(true); when(osRepository.getMinimumRam(vm.getVmOsId(), org.ovirt.engine.core.compat.Version.getLast())).thenReturn(0); when(osRepository.getMaximumRam(vm.getVmOsId(), org.ovirt.engine.core.compat.Version.getLast())).thenReturn(100); when(osRepository.getArchitectureFromOS(14)).thenReturn(ArchitectureType.x86_64); }
private org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void> updateDevice() { return () -> { vmDevice.setIsPlugged(((getParameters().getAction()) == PlugAction.PLUG)); getVmDeviceDao().update(vmDevice); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateBootOrder(getVm().getId()); return null; }; }
@java.lang.Override protected void incrementDbGeneration() { if (org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getParameters().getTaskGroupSuccess()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>> metaDictionary = new java.util.HashMap<>(); org.ovirt.engine.core.bll.storage.ovfstore.OvfUpdateProcessHelper ovfUpdateProcessHelper = new org.ovirt.engine.core.bll.storage.ovfstore.OvfUpdateProcessHelper(); ovfUpdateProcessHelper.loadTemplateData(org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getVmTemplate()); org.ovirt.engine.core.bll.VmTemplateHandler.updateDisksFromDb(org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getVmTemplate()); ovfUpdateProcessHelper.buildMetadataDictionaryForTemplate(org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getVmTemplate(), metaDictionary); ovfUpdateProcessHelper.executeUpdateVmInSpmCommand(org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getVmTemplate().getStoragePoolId(), metaDictionary, org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getParameters().getStorageDomainId()); } }
protected boolean isVirtioScsiControllerAttached(org.ovirt.engine.core.compat.Guid vmId) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasVirtioScsiController(vmId); }
private void populateVmData(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(vm.getStaticData(), true); org.ovirt.engine.core.bll.utils.VmDeviceUtils.setVmDevices(vm.getStaticData()); }
private void addInterfaceDeviceToDb() { org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.bll.utils.VmDeviceUtils.addInterface(org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getParameters().getVmId(), org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getInterface().getId(), org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getInterface().isPlugged(), org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getInterface().isPassthrough()); org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getCompensationContext().snapshotNewEntity(vmDevice); }
private void processImages(final boolean useCopyImages) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmImagesAndSnapshots(); addMemoryImages(); updateSnapshotsFromExport(); if (useCopyImages) { moveOrCopyAllImageGroups(); } org.ovirt.engine.core.bll.utils.VmDeviceUtils.addImportedDevices(getVm().getStaticData(), getParameters().isImportAsNewEntity()); if (getParameters().isImportAsNewEntity()) { getParameters().setVm(getVm()); setVmId(getVm().getId()); } return null; }); }
@org.junit.Before public void initTest() { mockCpuFlagsManagerHandler(); mockOsRepository(); org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.dal.dbbroker.DbFacade.class, dbFacade); doReturn(deviceDao).when(dbFacade).getVmDeviceDao(); org.ovirt.engine.core.bll.utils.VmDeviceUtils.init(); }
protected boolean pciAndIdeWithinLimit(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> allInterfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements = org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getDiskVmElementDao().getAllForVm(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()); return checkPciAndIdeLimit(vm.getOs(), vm.getCompatibilityVersion(), vm.getNumOfMonitors(), allInterfaces, diskVmElements, org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasVirtioScsiController(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasWatchdog(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasMemoryBalloon(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasSoundDevice(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getReturnValue().getValidationMessages()); }
protected boolean updateVmInSpm() { org.ovirt.engine.core.bll.storage.ovfstore.OvfUpdateProcessHelper ovfHelper = new org.ovirt.engine.core.bll.storage.ovfstore.OvfUpdateProcessHelper(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>> metaDictionary = new java.util.HashMap<>(); ovfHelper.loadVmData(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm()); ovfHelper.buildMetadataDictionaryForVm(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm(), metaDictionary, ovfHelper.getVmImagesFromDb(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm())); return ovfHelper.executeUpdateVmInSpmCommand(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm().getStoragePoolId(), metaDictionary, org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getParameters().getStorageDomainId()); }

private boolean containsRunningHostedEngine(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { return storageDomain.getName().equals(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.HostedEngineStorageDomainName)); }
@org.junit.Test public void shouldNotElectInactiveHostedEngineDomain() { prepareStorageDomainForElection(StorageDomainStatus.Inactive, org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); assertEquals(null, cmd.electNewMaster(false, true, false)); }
@org.junit.Test public void shouldNotElectUnknownHostedEngineDomain() { prepareStorageDomainForElection(StorageDomainStatus.Unknown, org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); assertEquals(null, cmd.electNewMaster()); }
@org.junit.Test public void shouldNotElectActiveHostedEngineDomain() { prepareStorageDomainForElection(StorageDomainStatus.Active, org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); assertEquals(null, cmd.electNewMaster()); }
@javax.annotation.PostConstruct private void init() { java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> byName = dbFacade.getVmStaticDao().getAllByName(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.HostedEngineVmName)); if ((byName != null) && (!(byName.isEmpty()))) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = byName.get(0); hostedEngineVm = dbFacade.getVmDao().get(vmStatic.getId()); org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(hostedEngineVm); } sd = dbFacade.getStorageDomainStaticDao().getByName(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.HostedEngineStorageDomainName)); }
public static boolean isHostedEngineDomain(final org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { return org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.HostedEngineStorageDomainName).equals(storageDomain.getName()); }

private org.ovirt.engine.core.common.businessentities.StorageDomain getHEStorageDomain(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> searchResult = backend.runInternalQuery(VdcQueryType.Search, new org.ovirt.engine.core.common.queries.SearchParameters(("Storage: name=" + (org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.HostedEngineStorageDomainName))), org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain)).getReturnValue(); if ((searchResult != null) && (!(searchResult.isEmpty()))) { return searchResult.get(0); } else { org.ovirt.engine.core.common.action.StorageDomainManagementParameter importParams = new org.ovirt.engine.core.common.action.StorageDomainManagementParameter(); importParams.setVdsId(vm.getRunOnVds()); return backend.runInternalAction(VdcActionType.ImportHostedEngineStorageDomain, importParams).getActionReturnValue(); } }
@org.junit.Test public void shouldElectActiveDataDomain() { final org.ovirt.engine.core.common.businessentities.StorageDomain domain = prepareStorageDomainForElection(StorageDomainStatus.Active, "not he domain name"); assertEquals(domain, cmd.electNewMaster()); }
@java.lang.Override public void onNext(java.util.Map<java.lang.String, java.lang.Object> map) { try { vdsManager.refreshHost(); } finally { subscription.request(1); } }





public static void main(java.lang.String[] args) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url("https://engine40.example.com/ovirt-engine/api").user("admin@internal").password("redhat123").trustStoreFile("truststore.jks").build(); org.ovirt.engine.sdk4.services.VmsService vmsService = connection.systemService().vmsService(); org.ovirt.engine.sdk4.types.Vm vm = vmsService.list().search("name=myvm").send().vms().get(0); org.ovirt.engine.sdk4.types.Cluster cluster = connection.followLink(vm.cluster()); org.ovirt.engine.sdk4.types.Template template = connection.followLink(vm.template()); java.lang.System.out.printf("cluster: %s\n", cluster.name()); java.lang.System.out.printf("template: %s\n", template.name()); connection.close(); }
@java.lang.Override protected com.google.gwt.dom.client.Element getContainerElement(com.google.gwt.dom.client.Element parent) { return super.getContainerElement(parent).getFirstChildElement().getFirstChildElement().getFirstChildElement(); }




@org.junit.Test public void canRemoveBrickReduceReplicaMoreThanOne() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedReplicatedVolume(volumeId1, 12, 4); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksToRemove = new java.util.ArrayList<>(); bricksToRemove.add(volumeEntity.getBricks().get(0)); bricksToRemove.add(volumeEntity.getBricks().get(4)); bricksToRemove.add(volumeEntity.getBricks().get(8)); bricksToRemove.add(volumeEntity.getBricks().get(1)); bricksToRemove.add(volumeEntity.getBricks().get(5)); bricksToRemove.add(volumeEntity.getBricks().get(9)); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(bricksToRemove, volumeEntity, 2, false); assertFalse(validationResult.isValid()); assertTrue(((org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_MORE_THAN_ONE) == (validationResult.getMessage()))); }
@org.junit.Test public void canRemoveNonExistentBrick() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedVolume(volumeId1, 4); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksToRemove = new java.util.ArrayList<>(); bricksToRemove.addAll(getBricks(volumeEntity.getId(), 1)); bricksToRemove.get(0).setBrickDirectory("NewServer:/NewExport"); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(bricksToRemove, volumeEntity, 1, false); assertFalse(validationResult.isValid()); assertTrue(((org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_GLUSTER_BRICK_INVALID) == (validationResult.getMessage()))); }
@org.junit.Test public void canRemoveBrickEmptyList() { org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(java.util.Collections.emptyList(), getDistributedVolume(volumeId1, 1), 3, false); assertFalse(validationResult.isValid()); assertTrue(((org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED) == (validationResult.getMessage()))); }
@org.junit.Test public void canRemoveWithOutforceAndReduceReplicaCount() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedReplicatedVolume(volumeId1, 12, 4); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksToRemove = new java.util.ArrayList<>(); bricksToRemove.add(volumeEntity.getBricks().get(0)); bricksToRemove.add(volumeEntity.getBricks().get(4)); bricksToRemove.add(volumeEntity.getBricks().get(8)); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(bricksToRemove, volumeEntity, 3, false); assertFalse(validationResult.isValid()); assertTrue(((org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_WITH_DATA_MIGRATION) == (validationResult.getMessage()))); }
@org.junit.Test public void canRemoveBrickIfSomeBricksAreDown() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedVolume(volumeId1, 4); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksToRemove = new java.util.ArrayList<>(); bricksToRemove.add(volumeEntity.getBricks().get(1)); volumeEntity.getBricks().get(0).setStatus(GlusterStatus.DOWN); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(bricksToRemove, volumeEntity, 1, false); assertFalse(validationResult.isValid()); assertTrue(((org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_ONE_OR_MORE_BRICKS_ARE_DOWN) == (validationResult.getMessage()))); }
@org.junit.Test public void canRemoveIncreaseReplica() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedReplicatedVolume(volumeId1, 12, 4); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksToRemove = new java.util.ArrayList<>(); bricksToRemove.add(volumeEntity.getBricks().get(0)); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(bricksToRemove, volumeEntity, 5, false); assertFalse(validationResult.isValid()); assertTrue(((org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT) == (validationResult.getMessage()))); }
@org.junit.Test public void canRemoveLastBrick() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedVolume(volumeId1, 1); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(volumeEntity.getBricks(), volumeEntity, 1, false); assertFalse(validationResult.isValid()); assertTrue(((org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME) == (validationResult.getMessage()))); }
@java.lang.Override protected void executeVdsBrokerCommand() { vmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getBroker().list(); org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.proceedProxyReturnValue(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> returnVMs = new java.util.HashMap<>(); for (int idx = 0; idx < (vmListReturn.vmList.length); ++idx) { java.util.Map<java.lang.String, java.lang.Object> vm = vmListReturn.vmList[idx]; org.ovirt.engine.core.common.businessentities.VmDynamic dynamicData = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVMDynamicDataFromList(vm); org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData vmData = new org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData(dynamicData, org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getVdsmCallTimestamp(vm)); returnVMs.put(dynamicData.getId(), vmData); } setReturnValue(returnVMs); }
@java.lang.Override protected void executeVdsBrokerCommand() { vmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getBroker().list(); org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.proceedProxyReturnValue(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> returnVMs = new java.util.HashMap<>(); for (int idx = 0; idx < (vmListReturn.vmList.length); ++idx) { java.util.Map<java.lang.String, java.lang.Object> vm = vmListReturn.vmList[idx]; org.ovirt.engine.core.common.businessentities.VmDynamic dynamicData = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVMDynamicDataFromList(vm); org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData vmData = new org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getVdsmCallTimestamp(vm)).setVmDynamic(dynamicData); returnVMs.put(dynamicData.getId(), vmData); } setReturnValue(returnVMs); }



@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.isAddVmsSucceded() ? org.ovirt.engine.core.common.AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS : org.ovirt.engine.core.common.AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS_FAILED; }
@java.lang.Override protected org.ovirt.engine.core.compat.Guid getPoolId() { org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPoolDao().update(org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPool()); return org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPool().getVmPoolId(); }
private boolean isUpdateVmRequired(org.ovirt.engine.core.common.businessentities.VM poolVm) { org.ovirt.engine.core.compat.Guid currentTempVersion = null; boolean isCurrentLatest = false; if (poolVm.isNextRunConfigurationExists()) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue qRetNextRun = org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getBackend().runInternalQuery(VdcQueryType.GetVmNextRunConfiguration, new org.ovirt.engine.core.common.queries.IdQueryParameters(poolVm.getId())); if (qRetNextRun.getSucceeded()) { final org.ovirt.engine.core.common.businessentities.VM nextRunVm = qRetNextRun.getReturnValue(); if (nextRunVm != null) { currentTempVersion = nextRunVm.getVmtGuid(); isCurrentLatest = nextRunVm.isUseLatestVersion(); } } } else { currentTempVersion = poolVm.getVmtGuid(); isCurrentLatest = poolVm.isUseLatestVersion(); } boolean isLatestPropertyChanged = isCurrentLatest != (org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getParameters().getVmStaticData().isUseLatestVersion()); boolean isTemplateIdChanged = false; org.ovirt.engine.core.compat.Guid newPoolTemplateVersion = org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getParameters().getVmStaticData().getVmtGuid(); if (newPoolTemplateVersion != null) { isTemplateIdChanged = (!(newPoolTemplateVersion.equals(currentTempVersion))) && (!isCurrentLatest); } return isLatestPropertyChanged || isTemplateIdChanged; }
private void updatePoolVms(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsInPool) { boolean isUpdatedPoolLatest = org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getParameters().getVmStaticData().isUseLatestVersion(); if ((vmsInPool != null) && (!(vmsInPool.isEmpty()))) { boolean isUpdateNeeded = isUpdateVmRequired(vmsInPool.get(0)); if (isUpdateNeeded) { org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction(org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getParameters().getVmStaticData().getVmtGuid(), org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getCompensationContext()); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsInPool) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.getVmStaticData().setUseLatestVersion(isUpdatedPoolLatest); if (!isUpdatedPoolLatest) { updateParams.getVmStaticData().setVmtGuid(org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getParameters().getVmStaticData().getVmtGuid()); } org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalActionWithTasksContext(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getLock()); org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getTaskIdList().addAll(result.getInternalVdsmTaskIdList()); setSucceeded(((org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getSucceeded()) && (result.getSucceeded()))); } org.ovirt.engine.core.bll.VmTemplateHandler.unlockVmTemplate(org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getParameters().getVmStaticData().getVmtGuid()); } } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue currentVmsInPoolQuery = runInternalQuery(VdcQueryType.GetAllPoolVms, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPool().getVmPoolId())); java.util.List<org.ovirt.engine.core.common.businessentities.VM> poolVmsBeforeAdd = (currentVmsInPoolQuery.getSucceeded()) ? currentVmsInPoolQuery.<java.util.List<org.ovirt.engine.core.common.businessentities.VM>>getReturnValue() : null; super.executeCommand(); org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getCompensationContext().cleanupCompensationDataAfterSuccessfulCommand(); if (org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getSucceeded()) { updatePoolVms(poolVmsBeforeAdd); } vmPoolMonitor.triggerPoolMonitoringJob(); }


private boolean isMatch(org.ovirt.engine.api.model.DetailedLink link, javax.ws.rs.core.UriInfo uriInfo, java.lang.String httpMethod) { int baseUriLength = uriInfo.getBaseUri().getPath().length(); org.ovirt.engine.api.restapi.invocation.Current current = org.ovirt.engine.api.restapi.invocation.CurrentManager.get(); int charsToTruncate = ((current.getVersionSource()) == (org.ovirt.engine.api.restapi.invocation.VersionSource.URL)) ? 0 : (current.getVersion().length()) + 2; java.lang.String[] linkPathSegments = link.getHref().substring((baseUriLength - charsToTruncate)).split("/"); java.util.List<javax.ws.rs.core.PathSegment> uriPathSegments = uriInfo.getPathSegments(); return ((isMatchLength(linkPathSegments, uriPathSegments)) && (isMatchPath(linkPathSegments, uriPathSegments))) && (isMatchRel(link.getRel(), httpMethod)); }
private org.ovirt.engine.api.model.DetailedLink findUsage(org.ovirt.engine.api.model.Rsdl rsdl, javax.ws.rs.core.UriInfo uriInfo, java.lang.String httpMethod) { org.ovirt.engine.api.model.DetailedLink link = null; for (org.ovirt.engine.api.model.DetailedLink currentLink : rsdl.getLinks().getLinks()) { if (isMatch(currentLink, uriInfo, httpMethod)) { link = currentLink; break; } } assert link != null : "Corresponding link not found (this should not happen)"; return link; }














private org.ovirt.engine.api.model.Rsdl getRSDL(javax.ws.rs.core.Application application) throws java.io.IOException, java.lang.ClassNotFoundException { org.ovirt.engine.api.model.Rsdl rsdl = null; for (java.lang.Object obj : application.getSingletons()) { if (obj instanceof org.ovirt.engine.api.restapi.resource.BackendApiResource) { org.ovirt.engine.api.restapi.resource.BackendApiResource resource = ((org.ovirt.engine.api.restapi.resource.BackendApiResource) (obj)); rsdl = resource.getRSDL(); break; } } assert rsdl != null : "Resource that generates RSDL, BackendApiResource, not found (this should never happen)"; return rsdl; }









private boolean isMatchLength(java.lang.String[] linkPathSegments, java.util.List<javax.ws.rs.core.PathSegment> uriPathSegments) { return (linkPathSegments.length) == (uriPathSegments.size()); }


@java.lang.Override public org.ovirt.engine.api.model.DiskAttachment update(org.ovirt.engine.api.model.DiskAttachment attachment) { return performUpdate(attachment, new org.ovirt.engine.api.restapi.resource.BackendDiskAttachmentResource.AddDiskResolver(), VdcActionType.UpdateVmDisk, new org.ovirt.engine.api.restapi.resource.BackendDiskAttachmentResource.UpdateParametersProvider()); }


private boolean updateVms() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = org.ovirt.engine.core.bll.UpdateClusterCommand.getVmDao().getAllForCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getCluster().getId()); org.ovirt.engine.core.common.businessentities.Cluster oldCluster = org.ovirt.engine.core.bll.UpdateClusterCommand.getClusterDao().get(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()); for (org.ovirt.engine.core.common.businessentities.VM vm : vmList) { if ((!(vm.isExternalVm())) && (!(vm.isHostedEngine()))) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); if (!(java.util.Objects.equals(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getCluster().getCompatibilityVersion()))) { updateParams.setClusterLevelChangeToVersion(org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getCluster().getCompatibilityVersion()); } org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { org.ovirt.engine.core.bll.UpdateClusterCommand.getReturnValue().setFault(result.getFault()); return false; } } } return true; }


@org.junit.Test public void hasDomains() { when(sdDao.getAllForStoragePool(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.singletonList(new org.ovirt.engine.core.common.businessentities.StorageDomainStatic())); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_POOL_TYPE_WITH_DOMAINS); }

private void updateTimeoutLogableObject(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.AuditLogType logType) { int eventFloodRate = ((auditLogable.isExternal()) && ((auditLogable.getEventFloodInSec()) == 0)) ? 30 : logType.getEventFloodRate(); if (eventFloodRate > 0) { auditLogable.setEndTime(java.util.concurrent.TimeUnit.SECONDS.toMillis(eventFloodRate)); auditLogable.setTimeoutObjectId(composeObjectId(auditLogable, logType)); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAuditLogDao().remove(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.setSucceeded(true); }
private void compose(java.lang.StringBuilder builder, java.lang.String key, java.lang.String value) { final char DELIMITER = ','; final char NAME_VALUE_SEPARATOR = '='; if ((builder.length()) > 0) { builder.append(DELIMITER); } builder.append(key).append(NAME_VALUE_SEPARATOR).append(value); }
@java.lang.Override protected boolean validate() { macPool = org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getMacPool(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCluster()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_CAN_NOT_BE_EMPTY); } return true; }
public void appendCustomValue(final java.lang.String name, final java.lang.String value, final java.lang.String separator) { java.util.Objects.requireNonNull(separator, "It makes no sense having 'null' literal as separator"); final java.lang.String key = name.toLowerCase(); java.lang.String newValue = value; allocateCustomValues(); if (customValues.containsKey(key)) { newValue = java.lang.String.format("%1$s%2$s%3$s", customValues.get(key), separator, value); } customValues.put(name.toLowerCase(), newValue); }
@org.junit.Test(expected = java.lang.NullPointerException.class) public void appendCustomValueDoesntHandleNullKeys() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = null; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String sep = "_"; b.appendCustomValue(key, value, sep); final java.lang.String s = b.getCustomValue(key); assertEquals(value, s); }
@org.junit.Test(expected = java.lang.NullPointerException.class) public void appendCustomValueUsesNullSeparator() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String newVal = "bar"; final java.lang.String sep = null; b.addCustomValue(key, value); b.appendCustomValue(key, newVal, sep); }
@org.junit.Test public void appendCustomValue() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String sep = "_"; b.appendCustomValue(key, value, sep); final java.lang.String s = b.getCustomValue(key); assertEquals(value, s); }
@org.junit.Test public void appendCustomValueAppend() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String newVal = "bar"; final java.lang.String sep = "_"; b.addCustomValue(key, value); b.appendCustomValue(key, newVal, sep); final java.lang.String s = b.getCustomValue(key); assertEquals(((value + sep) + newVal), s); }
@org.junit.Test public void appendCustomValueAppendsWithNull() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = null; final java.lang.String newVal = "bar"; final java.lang.String sep = "_"; b.addCustomValue(key, value); b.appendCustomValue(key, newVal, sep); final java.lang.String s = b.getCustomValue(key); assertEquals(((value + sep) + newVal), s); }
@java.lang.Override protected void executeCommand() { boolean addedGroupThatAllowsViewingChildren = false; java.util.List<org.ovirt.engine.core.common.businessentities.ActionGroup> groups = org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getParameters().getActionGroups(); for (org.ovirt.engine.core.common.businessentities.ActionGroup group : groups) { addedGroupThatAllowsViewingChildren |= group.allowsViewingChildren(); org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRoleGroupMapDao().save(new org.ovirt.engine.core.common.businessentities.RoleGroupMap(group, org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getParameters().getRoleId())); appendCustomValue("ActionGroup", group.toString(), ", "); } if (addedGroupThatAllowsViewingChildren) { org.ovirt.engine.core.common.businessentities.Role role = org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRole(); if (!(role.allowsViewingChildren())) { role.setAllowsViewingChildren(true); org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRoleDao().update(role); } } org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.setSucceeded(true); }

protected boolean migrateAllVms(org.ovirt.engine.core.bll.job.ExecutionContext parentContext, boolean HAOnly) { boolean succeeded = true; for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (vm.isHostedEngine()) { if (!(canScheduleVm(vm))) { succeeded = false; appendCustomValue("failedVms", vm.getName(), ","); log.error("There is no host capable of running the hosted engine VM"); } continue; } if (((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) && ((!HAOnly) || (vm.isAutoStartup()))) { if (!(migrateVm(vm, parentContext))) { succeeded = false; appendCustomValue("failedVms", vm.getName(), ","); log.error("Failed to migrate VM '{}'", vm.getName()); } } } return succeeded; }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.DetachUserFromTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid userGuid : org.ovirt.engine.core.bll.DetachUserFromTagCommand.getUserList()) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().get(userGuid); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagUserByTagIdAndByuserId(org.ovirt.engine.core.bll.DetachUserFromTagCommand.getTagId(), userGuid)) != null) { if (user != null) { appendCustomValue("DetachUsersNames", user.getLoginName(), ", "); } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachUserFromTag(org.ovirt.engine.core.bll.DetachUserFromTagCommand.getTagId(), userGuid); noActionDone = false; org.ovirt.engine.core.bll.DetachUserFromTagCommand.setSucceeded(true); } } } }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.ActionGroup> groupsToDetach = org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand.getParameters().getActionGroups(); for (org.ovirt.engine.core.common.businessentities.ActionGroup group : groupsToDetach) { org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand.getRoleGroupMapDao().remove(group, org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand.getParameters().getRoleId()); appendCustomValue("ActionGroup", group.toString(), ", "); } org.ovirt.engine.core.common.businessentities.Role role = org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand.getRole(); if (role.allowsViewingChildren()) { boolean shouldAllowViewingChildren = false; java.util.List<org.ovirt.engine.core.common.businessentities.ActionGroup> groups = getActionGroupsByRoleId(role.getId()); for (org.ovirt.engine.core.common.businessentities.ActionGroup group : groups) { if (group.allowsViewingChildren()) { shouldAllowViewingChildren = true; break; } } if (!shouldAllowViewingChildren) { role.setAllowsViewingChildren(false); org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand.getRoleDao().update(role); } } org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.TagsVdsMap map; if ((org.ovirt.engine.core.bll.AttachVdsToTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid vdsId : org.ovirt.engine.core.bll.AttachVdsToTagCommand.getVdsList()) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vdsId); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVdsByTagIdAndByVdsId(org.ovirt.engine.core.bll.AttachVdsToTagCommand.getTagId(), vdsId)) == null) { if (vds != null) { appendCustomValue("VdsNames", vds.getName(), ", "); } map = new org.ovirt.engine.core.common.businessentities.TagsVdsMap(org.ovirt.engine.core.bll.AttachVdsToTagCommand.getTagId(), vdsId); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().attachVdsToTag(map); noActionDone = false; } else { if (vds != null) { appendCustomValue("VdsNamesExists", vds.getName(), ", "); } } } } org.ovirt.engine.core.bll.AttachVdsToTagCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.AttachVmsToTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid vmGuid : org.ovirt.engine.core.bll.AttachVmsToTagCommand.getVmsList()) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(vmGuid); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVmByTagIdAndByVmId(org.ovirt.engine.core.bll.AttachVmsToTagCommand.getTagId(), vmGuid)) == null) { if (vm != null) { appendCustomValue("VmsNames", vm.getName(), ", "); } org.ovirt.engine.core.common.businessentities.TagsVmMap map = new org.ovirt.engine.core.common.businessentities.TagsVmMap(org.ovirt.engine.core.bll.AttachVmsToTagCommand.getTagId(), vmGuid); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().attachVmToTag(map); noActionDone = false; } else { if (vm != null) { appendCustomValue("VmsNamesExists", vm.getName(), ", "); } } } } org.ovirt.engine.core.bll.AttachVmsToTagCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { for (org.ovirt.engine.core.compat.Guid templateGuid : org.ovirt.engine.core.bll.AttachTemplatesToTagCommand.getTemplatesList()) { org.ovirt.engine.core.common.businessentities.VmTemplate template = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().get(templateGuid); if (template != null) { if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagTemplateByTagIdAndByTemplateId(org.ovirt.engine.core.bll.AttachTemplatesToTagCommand.getTagId(), templateGuid)) == null) { appendCustomValue("TemplatesNames", template.getName(), ", "); org.ovirt.engine.core.common.businessentities.TagsTemplateMap map = new org.ovirt.engine.core.common.businessentities.TagsTemplateMap(org.ovirt.engine.core.bll.AttachTemplatesToTagCommand.getTagId(), templateGuid); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().attachTemplateToTag(map); noActionDone = false; } else { appendCustomValue("TemplatesNamesExists", template.getName(), ", "); } } } org.ovirt.engine.core.bll.AttachTemplatesToTagCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { for (org.ovirt.engine.core.compat.Guid templateGuid : org.ovirt.engine.core.bll.DetachTemplateFromTagCommand.getTemplatesList()) { if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagTemplateByTagIdAndByTemplateId(org.ovirt.engine.core.bll.DetachTemplateFromTagCommand.getTagId(), templateGuid)) != null) { org.ovirt.engine.core.common.businessentities.VmTemplate template = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().get(templateGuid); if (template != null) { appendCustomValue("TemplatesNames", template.getName(), ", "); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachTemplateFromTag(org.ovirt.engine.core.bll.DetachTemplateFromTagCommand.getTagId(), templateGuid); } } } org.ovirt.engine.core.bll.DetachTemplateFromTagCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { for (org.ovirt.engine.core.compat.Guid vmGuid : org.ovirt.engine.core.bll.DetachVmFromTagCommand.getVmsList()) { if (((org.ovirt.engine.core.bll.DetachVmFromTagCommand.getTagId()) != null) && ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVmByTagIdAndByVmId(org.ovirt.engine.core.bll.DetachVmFromTagCommand.getTagId(), vmGuid)) != null)) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(vmGuid); if (vm != null) { appendCustomValue("VmsNames", vm.getName(), ", "); } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachVmFromTag(org.ovirt.engine.core.bll.DetachVmFromTagCommand.getTagId(), vmGuid); org.ovirt.engine.core.bll.DetachVmFromTagCommand.setSucceeded(true); } } }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid groupGuid : org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getGroupList()) { org.ovirt.engine.core.common.businessentities.aaa.DbGroup group = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbGroupDao().get(groupGuid); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagUserGroupByGroupIdAndByTagId(org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getTagId(), groupGuid)) != null) { if (group != null) { appendCustomValue("DetachGroupsNames", group.getName(), ", "); } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachUserGroupFromTag(org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getTagId(), groupGuid); noActionDone = false; org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.setSucceeded(true); } } } }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.AttachUserGroupToTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid groupGuid : org.ovirt.engine.core.bll.AttachUserGroupToTagCommand.getGroupList()) { org.ovirt.engine.core.common.businessentities.aaa.DbGroup group = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbGroupDao().get(groupGuid); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagUserGroupByGroupIdAndByTagId(org.ovirt.engine.core.bll.AttachUserGroupToTagCommand.getTagId(), groupGuid)) == null) { org.ovirt.engine.core.common.businessentities.TagsUserGroupMap map = new org.ovirt.engine.core.common.businessentities.TagsUserGroupMap(groupGuid, org.ovirt.engine.core.bll.AttachUserGroupToTagCommand.getTagId()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().attachUserGroupToTag(map); noActionDone = false; if (group != null) { appendCustomValue("AttachGroupsNames", group.getName(), ", "); } } else { if (group != null) { appendCustomValue("AttachGroupsNamesExists", group.getName(), ", "); } } } org.ovirt.engine.core.bll.AttachUserGroupToTagCommand.setSucceeded(true); } }
@java.lang.Override protected void executeCommand() { for (org.ovirt.engine.core.compat.Guid vdsId : org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getVdsList()) { if (((org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getTagId()) != null) && ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVdsByTagIdAndByVdsId(org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getTagId(), vdsId)) != null)) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vdsId); if (vds != null) { appendCustomValue("VdsNames", vds.getName(), ", "); } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachVdsFromTag(org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getTagId(), vdsId); org.ovirt.engine.core.bll.DetachVdsFromTagCommand.setSucceeded(true); } } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.TagsUserMap map; if ((org.ovirt.engine.core.bll.AttachUserToTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid userGuid : org.ovirt.engine.core.bll.AttachUserToTagCommand.getUserList()) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().get(userGuid); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagUserByTagIdAndByuserId(org.ovirt.engine.core.bll.AttachUserToTagCommand.getTagId(), userGuid)) == null) { map = new org.ovirt.engine.core.common.businessentities.TagsUserMap(org.ovirt.engine.core.bll.AttachUserToTagCommand.getTagId(), userGuid); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().attachUserToTag(map); noActionDone = false; if (user != null) { appendCustomValue("AttachUsersNames", user.getLoginName(), ", "); } } else { if (user != null) { appendCustomValue("AttachUsersNamesExists", user.getLoginName(), ", "); } } } org.ovirt.engine.core.bll.AttachUserToTagCommand.setSucceeded(true); } }
private void assertFailsWith(org.ovirt.engine.core.bll.ValidationResult validationResult, org.ovirt.engine.core.common.errors.EngineMessage engineMessage) { assertThat(validationResult.isValid()).isFalse(); assertThat(validationResult.getMessage()).isEqualTo(engineMessage); }
private boolean checkPciAndIdeLimit(org.ovirt.engine.core.common.businessentities.network.VmNic oldIface, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces, org.ovirt.engine.core.compat.Version clusterCompatibilityVersion) { interfaces.remove(oldIface); interfaces.add(org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getParameters().getInterface()); return org.ovirt.engine.core.bll.VmCommand.checkPciAndIdeLimit(org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmTemplate().getOsId(), clusterCompatibilityVersion, org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmTemplate().getNumOfMonitors(), interfaces, org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getTemplateDiskVmElements(), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasVirtioScsiController(org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmTemplate().getId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasWatchdog(org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmTemplate().getId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasMemoryBalloon(org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmTemplate().getId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasSoundDevice(org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmTemplate().getId()), org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getReturnValue().getValidationMessages()); }
protected boolean pciAndIdeWithinLimit(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> allInterfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements = org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getDiskVmElementDao().getAllForVm(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()); return checkPciAndIdeLimit(vm.getOs(), vm.getCompatibilityVersion(), vm.getNumOfMonitors(), allInterfaces, diskVmElements, org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasVirtioScsiController(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasWatchdog(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasMemoryBalloon(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasSoundDevice(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getReturnValue().getValidationMessages()); }
private void assertFailsWith(java.lang.String errorMessage, org.ovirt.engine.core.bll.ValidationResult validationResult, org.ovirt.engine.core.common.errors.EngineMessage engineMessage) { assertThat(validationResult.isValid()).isFalse().as(errorMessage); assertThat(validationResult.getMessage()).isEqualTo(engineMessage).as(errorMessage); }
private void doTestValidModifiedBonds(org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond, org.ovirt.engine.core.bll.ValidationResult interfaceIsBondValidationResult, org.ovirt.engine.core.bll.ValidationResult expectedValidationResult, org.ovirt.engine.core.bll.ValidationResult slavesValidationValidationResult) { org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = spy(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(createOrUpdateBond)).addExistingInterfaces(((java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>) (null))).addExistingAttachments(((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>) (null))).addNetworks(((java.util.Collection<org.ovirt.engine.core.common.businessentities.network.Network>) (null))).build()); org.ovirt.engine.core.bll.validator.HostInterfaceValidator hostInterfaceValidatorMock = mock(org.ovirt.engine.core.bll.validator.HostInterfaceValidator.class); when(hostInterfaceValidatorMock.interfaceIsBondOrNull()).thenReturn(interfaceIsBondValidationResult); doReturn(hostInterfaceValidatorMock).when(validator).createHostInterfaceValidator(any(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.class)); doReturn(slavesValidationValidationResult).when(validator).validateModifiedBondSlaves(any(org.ovirt.engine.core.common.action.CreateOrUpdateBond.class)); if (expectedValidationResult.isValid()) { assertThat(validator.validNewOrModifiedBonds(), isValid()); } else { assertThat(validator.validNewOrModifiedBonds(), failsWith(expectedValidationResult.getMessage(), expectedValidationResult.getVariableReplacements())); } }
@org.junit.Test public void canRemoveBrickEmptyList() { org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(java.util.Collections.<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>emptyList(), getDistributedVolume(volumeId1, 1), 3, false); assertFalse(validationResult.isValid()); assertTrue(((org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED) == (validationResult.getMessage()))); }

private java.lang.Integer calcMaxVCpu() { java.lang.Integer maxSockets = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmSockets, vm.getCompatibilityVersion().getValue()); java.lang.Integer maxVCpus = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmCpus, vm.getCompatibilityVersion().getValue()); int threadsPerCore = vm.getThreadsPerCpu(); int cpuPerSocket = vm.getCpuPerSocket(); maxVCpus = (cpuPerSocket * threadsPerCore) * (java.lang.Math.min(maxSockets, (maxVCpus / (cpuPerSocket * threadsPerCore)))); return maxVCpus; }

private java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> getConnections() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connectionsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageServerConnections connection1 = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); connection1.setId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); org.ovirt.engine.core.common.businessentities.StorageServerConnections connection2 = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); connection2.setId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); org.ovirt.engine.core.common.businessentities.StorageServerConnections connection3 = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); connection3.setId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); connectionsList.add(connection1); connectionsList.add(connection2); connectionsList.add(connection3); return connectionsList; }
@java.lang.Override protected boolean validate() { final org.ovirt.engine.core.bll.validator.ClusterValidator validator = new org.ovirt.engine.core.bll.validator.ClusterValidator(org.ovirt.engine.core.bll.AddClusterCommand.getDbFacade(), org.ovirt.engine.core.bll.AddClusterCommand.getCluster(), org.ovirt.engine.core.bll.AddClusterCommand.getCpuFlagsManagerHandler()); return (((((((((((validate(validator.nameNotUsed())) && (validate(validator.cpuTypeSupportsVirtService()))) && (validate(validator.versionSupported()))) && (validate(validator.dataCenterVersionMismatch()))) && (validate(validator.dataCenterExists()))) && (validate(validator.localStoragePoolAttachedToSingleCluster()))) && (validate(validator.clusterServiceDefined()))) && (validate(validator.mixedClusterServicesSupported()))) && (validate(validator.attestationServerConfigured()))) && (validate(validator.migrationSupported(org.ovirt.engine.core.bll.AddClusterCommand.getArchitecture())))) && (org.ovirt.engine.core.bll.AddClusterCommand.validateClusterPolicy(null))) && (validateManagementNetwork()); }
@java.lang.Override protected void buildCloudInitVmPayload(java.util.Map<java.lang.String, byte[]> cloudInitContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setDeviceType(VmDeviceType.CDROM); vmPayload.setVolumeId(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.CLOUD_INIT_VOL_ID); for (java.util.Map.Entry<java.lang.String, byte[]> entry : cloudInitContent.entrySet()) { vmPayload.getFiles().put(entry.getKey(), new java.lang.String(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.BASE_64.encode(entry.getValue()), java.nio.charset.Charset.forName(CharEncoding.UTF_8))); } org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vm.getId()), org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null, null); java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addCdDetails(vmDevice, struct, vm); addDevice(struct, vmDevice, ""); }
@java.lang.Override protected void buildSysprepVmPayload(java.lang.String sysPrepContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setDeviceType(VmDeviceType.FLOPPY); vmPayload.getFiles().put(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getOsRepository().getSysprepFileName(vm.getOs(), vm.getCompatibilityVersion()), new java.lang.String(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.BASE_64.encode(sysPrepContent.getBytes()), java.nio.charset.Charset.forName(CharEncoding.UTF_8))); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vm.getId()), org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null, null); java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addFloppyDetails(vmDevice, struct); addDevice(struct, vmDevice, vm.getFloppyPath()); }
private void addNetworkInterfaceProperties(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VmNic vmInterface, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String nicModel) { struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); struct.put(VdsProperties.LINK_ACTIVE, java.lang.String.valueOf(vmInterface.isLinked())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); struct.put(VdsProperties.MAC_ADDR, vmInterface.getMacAddress()); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addBootOrder(vmDevice, struct); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); struct.put(VdsProperties.NIC_TYPE, nicModel); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addProfileDataToNic(struct, vm, vmDevice, vmInterface); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addNetworkFiltersToNic(struct, vmInterface); }
private void buildVmUsbControllers() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.USB.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map struct = new java.util.HashMap(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.setVdsPropertiesFromSpecParams(vmDevice.getSpecParams(), struct); struct.put(VdsProperties.SpecParams, new java.util.HashMap<java.lang.String, java.lang.Object>()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); java.lang.String model = ((java.lang.String) (struct.get(VdsProperties.Model))); if ((model != null) && (org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.isFirstMasterController(model))) { devices.add(0, struct); } else { devices.add(struct); } } }
private java.util.Map<java.lang.String, java.lang.Object> initNicStructure() { java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(); org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters().getNic(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters().getVmDevice(); org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters().getVm(); if (!(nic.isPassthrough())) { map.put(VdsProperties.Type, vmDevice.getType().getValue()); map.put(VdsProperties.Device, VmDeviceType.BRIDGE.getName()); map.put(VdsProperties.MAC_ADDR, nic.getMacAddress()); map.put(VdsProperties.LINK_ACTIVE, java.lang.String.valueOf(nic.isLinked())); addAddress(map, vmDevice.getAddress()); map.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); map.put(VdsProperties.NIC_TYPE, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.evaluateInterfaceType(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(nic.getType()), vm.getHasAgent())); map.put(VdsProperties.DeviceId, vmDevice.getId().getDeviceId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addProfileDataToNic(map, vm, vmDevice, nic); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addNetworkFiltersToNic(map, nic); } else { org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addNetworkVirtualFunctionProperties(map, nic, vmDevice, vmDevice.getHostDevice(), vm); } return map; }
private void addDevice(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String path) { boolean isPayload = (org.ovirt.engine.core.common.businessentities.VmPayload.isPayload(vmDevice.getSpecParams())) && (vmDevice.getDevice().equals(VmDeviceType.CDROM.getName())); java.util.Map<java.lang.String, java.lang.Object> specParams = ((vmDevice.getSpecParams()) == null) ? java.util.Collections.<java.lang.String, java.lang.Object>emptyMap() : vmDevice.getSpecParams(); if (path != null) { struct.put(VdsProperties.Path, (isPayload ? "" : path)); } if (isPayload) { java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getCompatibilityVersion(), org.ovirt.engine.core.common.businessentities.ChipsetType.fromMachineType(vm.getEmulatedMachine())); int index = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdPayloadDeviceIndex(cdInterface); struct.put(VdsProperties.Index, java.lang.Integer.toString(index)); if ("scsi".equals(cdInterface)) { struct.put(VdsProperties.Address, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.createAddressForScsiDisk(0, index)); } } struct.put(VdsProperties.SpecParams, specParams); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addBootOrder(vmDevice, struct); devices.add(struct); addToManagedDevices(vmDevice); }
protected java.util.Map<java.lang.String, java.lang.Object> initDeviceStructure() { java.util.Map<java.lang.String, java.lang.Object> deviceStruct = new java.util.HashMap<>(); deviceStruct.put(VdsProperties.DeviceType, getParameters().getVmDevice().getType().getValue()); deviceStruct.put(VdsProperties.Alias, getParameters().getVmDevice().getAlias()); org.ovirt.engine.core.common.businessentities.network.VmNic nic = getParameters().getNic(); deviceStruct.put(VdsProperties.LINK_ACTIVE, java.lang.String.valueOf(nic.isLinked())); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = getParameters().getVmDevice(); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addProfileDataToNic(deviceStruct, getParameters().getVm(), vmDevice, nic); return deviceStruct; }
private java.util.Map<java.lang.String, java.lang.String> getAddressMapForScsiDisk(java.lang.String address, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, int controllerIndex, boolean reserveFirstAddress) { java.util.Map<java.lang.String, java.lang.String> addressMap; int availableUnit = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getAvailableUnitForScsiDisk(vmDeviceUnitMap, reserveFirstAddress); if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { addressMap = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(address); int unit = java.lang.Integer.parseInt(addressMap.get(VdsProperties.Unit)); if (vmDeviceUnitMap.containsValue(unit)) { addressMap = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.createAddressForScsiDisk(controllerIndex, availableUnit); } } else { addressMap = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.createAddressForScsiDisk(controllerIndex, availableUnit); } updateVmDeviceAddress(addressMap.toString(), vmDevice); return addressMap; }


private void buildVmUsbControllers() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = dbFacade.getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.USB.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map struct = new java.util.HashMap(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); vmInfoStatelessBuilder.setVdsPropertiesFromSpecParams(vmDevice.getSpecParams(), struct); struct.put(VdsProperties.SpecParams, new java.util.HashMap<java.lang.String, java.lang.Object>()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); java.lang.String model = ((java.lang.String) (struct.get(VdsProperties.Model))); if ((model != null) && (vmInfoStatelessBuilder.isFirstMasterController(model))) { devices.add(0, struct); } else { devices.add(struct); } } }
public org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder createVmInfoBuilder(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.compat.Guid vdsId, java.util.Map createInfo) { return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder(vm, vdsId, createInfo, dbFacade, vmInfoStatelessBuilder); }
public org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder createVmInfoBuilder(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.compat.Guid vdsId, java.util.Map createInfo) { return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder(vm, vdsId, createInfo, vdsNumaNodeDao, vmDeviceDao, vmNumaNodeDao, vmInfoBuildHelper); }
@java.lang.Override protected void buildCloudInitVmPayload(java.util.Map<java.lang.String, byte[]> cloudInitContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setDeviceType(VmDeviceType.CDROM); vmPayload.setVolumeId(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.CLOUD_INIT_VOL_ID); for (java.util.Map.Entry<java.lang.String, byte[]> entry : cloudInitContent.entrySet()) { vmPayload.getFiles().put(entry.getKey(), new java.lang.String(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.BASE_64.encode(entry.getValue()), java.nio.charset.Charset.forName(CharEncoding.UTF_8))); } org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vm.getId()), org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null, null); java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); vmInfoBuildHelper.addCdDetails(vmDevice, struct, vm); addDevice(struct, vmDevice, ""); }
@java.lang.Override protected void buildVmHostDevices() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdAndType(vm.getId(), VmDeviceGeneralType.HOSTDEV); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceType.HOST_DEVICE.getName()); struct.put(VdsProperties.Device, vmDevice.getDevice()); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, vmDevice.getId().getDeviceId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); devices.add(struct); } }
private void buildVmUsbControllers() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.USB.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map struct = new java.util.HashMap(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); vmInfoBuildHelper.setVdsPropertiesFromSpecParams(vmDevice.getSpecParams(), struct); struct.put(VdsProperties.SpecParams, new java.util.HashMap<java.lang.String, java.lang.Object>()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); java.lang.String model = ((java.lang.String) (struct.get(VdsProperties.Model))); if ((model != null) && (vmInfoBuildHelper.isFirstMasterController(model))) { devices.add(0, struct); } else { devices.add(struct); } } }
@java.lang.Override protected void buildUnmanagedDevices() { java.util.Map<java.lang.String, java.lang.String> customMap = (createInfo.containsKey(VdsProperties.Custom)) ? ((java.util.Map<java.lang.String, java.lang.String>) (createInfo.get(VdsProperties.Custom))) : new java.util.HashMap<>(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getUnmanagedDevicesByVmId(vm.getId()); if (!(vmDevices.isEmpty())) { java.lang.StringBuilder id = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map struct = new java.util.HashMap(); id.append(VdsProperties.Device); id.append("_"); id.append(vmDevice.getDeviceId()); if (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isInWhiteList(vmDevice.getType(), vmDevice.getDevice())) { struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); devices.add(struct); } else { customMap.put(id.toString(), vmDevice.toString()); } } } createInfo.put(VdsProperties.Custom, customMap); createInfo.put(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.DEVICES, devices); }
protected void buildVmNumaProperties() { addNumaSetting(); }
private void buildVmDevicesFromDb(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType generalType, boolean addAddress, java.util.Map<java.lang.String, java.lang.Object> extraSpecParams) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdAndType(vm.getId(), generalType); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map struct = new java.util.HashMap(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); java.util.Map<java.lang.String, java.lang.Object> specParams = vmDevice.getSpecParams(); if (extraSpecParams != null) { specParams.putAll(extraSpecParams); } struct.put(VdsProperties.SpecParams, specParams); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); if (addAddress) { org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); } devices.add(struct); } }
@java.lang.Override protected void buildVmVideoCards() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmVideoDevices = vmDeviceDao.getVmDeviceByVmIdAndType(vm.getId(), VmDeviceGeneralType.VIDEO); for (org.ovirt.engine.core.common.businessentities.VmDevice vmVideoDevice : vmVideoDevices) { if (!(vmVideoDevice.getIsManaged())) { continue; } java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, vmVideoDevice.getType().getValue()); struct.put(VdsProperties.Device, vmVideoDevice.getDevice()); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmVideoDevice, struct); struct.put(VdsProperties.SpecParams, vmVideoDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmVideoDevice.getId().getDeviceId())); addToManagedDevices(vmVideoDevice); devices.add(struct); } }
@java.lang.Override protected void buildSysprepVmPayload(java.lang.String sysPrepContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setDeviceType(VmDeviceType.FLOPPY); vmPayload.getFiles().put(vmInfoBuildHelper.getOsRepository().getSysprepFileName(vm.getOs(), vm.getCompatibilityVersion()), new java.lang.String(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.BASE_64.encode(sysPrepContent.getBytes()), java.nio.charset.Charset.forName(CharEncoding.UTF_8))); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vm.getId()), org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null, null); java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); vmInfoBuildHelper.addFloppyDetails(vmDevice, struct); addDevice(struct, vmDevice, vm.getFloppyPath()); }
private void addMemBalloonDevice(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); java.util.Map<java.lang.String, java.lang.Object> specParams = vmDevice.getSpecParams(); if (specParams == null) { specParams = new java.util.HashMap<>(); vmDevice.setSpecParams(specParams); } specParams.put(VdsProperties.Model, VdsProperties.Virtio); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); addDevice(struct, vmDevice, null); }

protected void buildVmRngDevice() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.RNG, VmDeviceType.VIRTIO.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceGeneralType.RNG.getValue()); struct.put(VdsProperties.Device, VmDeviceType.VIRTIO.getName()); struct.put(VdsProperties.Model, VdsProperties.Virtio); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); addDevice(struct, vmDevice, null); } }
@java.lang.Override protected void buildVmVirtioScsi() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.VIRTIOSCSI.getName()); java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskInterface, java.lang.Integer> controllerIndexMap = org.ovirt.engine.core.utils.archstrategy.ArchStrategyFactory.getStrategy(vm.getClusterArch()).run(new org.ovirt.engine.core.vdsbroker.architecture.GetControllerIndices()).returnValue(); int virtioScsiIndex = controllerIndexMap.get(DiskInterface.VirtIO_SCSI); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceGeneralType.CONTROLLER.getValue()); struct.put(VdsProperties.Device, VdsProperties.Scsi); struct.put(VdsProperties.Model, VdsProperties.VirtioScsi); struct.put(VdsProperties.Index, java.lang.Integer.toString(virtioScsiIndex)); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); virtioScsiIndex++; addDevice(struct, vmDevice, null); } }
public void addProfileDataToNic(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.common.businessentities.network.VmNic nic) { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = null; org.ovirt.engine.core.common.businessentities.network.Network network = null; java.lang.String networkName = ""; java.util.List<org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilderBase.VnicProfileProperties> unsupportedFeatures = new java.util.ArrayList<>(); if ((nic.getVnicProfileId()) != null) { vnicProfile = vnicProfileDao.get(nic.getVnicProfileId()); if (vnicProfile != null) { network = networkDao.get(vnicProfile.getNetworkId()); networkName = network.getName(); VmInfoBuilder.log.debug("VNIC '{}' is using profile '{}' on network '{}'", nic.getName(), vnicProfile, networkName); addQosForDevice(struct, vnicProfile); } } struct.put(VdsProperties.NETWORK, networkName); addPortMirroringToVmInterface(struct, vnicProfile, network); addCustomPropertiesForDevice(struct, vm, vmDevice, vm.getCompatibilityVersion(), getVnicCustomProperties(vnicProfile)); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.reportUnsupportedVnicProfileFeatures(vm, nic, vnicProfile, unsupportedFeatures); }

public boolean isFirstMasterController(java.lang.String model) { return model.equalsIgnoreCase(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuildHelper.FIRST_MASTER_MODEL); }
@java.lang.Override protected void buildVmVirtioSerial() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.VIRTIOSERIAL.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceGeneralType.CONTROLLER.getValue()); struct.put(VdsProperties.Device, VdsProperties.VirtioSerial); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); addDevice(struct, vmDevice, null); } }
private void buildVmUsbSlots() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.REDIR, VmDeviceType.SPICEVMC.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map struct = new java.util.HashMap(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); struct.put(VdsProperties.Bus, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.USB_BUS); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); devices.add(struct); } }
private void addNetworkInterfaceProperties(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VmNic vmInterface, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String nicModel) { struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); struct.put(VdsProperties.LINK_ACTIVE, java.lang.String.valueOf(vmInterface.isLinked())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); struct.put(VdsProperties.MAC_ADDR, vmInterface.getMacAddress()); vmInfoBuildHelper.addBootOrder(vmDevice, struct); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); struct.put(VdsProperties.NIC_TYPE, nicModel); vmInfoBuildHelper.addProfileDataToNic(struct, vm, vmDevice, vmInterface); vmInfoBuildHelper.addNetworkFiltersToNic(struct, vmInterface); }

@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithFailover(VDSCommandType.CreateVolumeContainer, new org.ovirt.engine.core.common.vdscommands.CreateVolumeVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getStorageJobId(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getSize(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getInitialSize(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getImageId(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getSrcImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getSrcImageId(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVolumeFormat(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getDescription()), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getStoragePoolId(), this); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.setSucceeded(true); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(HasEntity.entityChangedEventDefinition)) { if (((sender == (getImageSourceLocalEnabled())) || (sender == (getImagePath()))) || (sender == (getImageUri()))) { recalculateImageDerivedFields(); } } }


private java.util.List<org.ovirt.engine.core.common.businessentities.VM> searchVmsFromDb() { org.ovirt.engine.core.aaa.QueryData data = initQueryData(true); if (data == null) { return java.util.Collections.emptyList(); } java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getVmDao().getAllUsingQuery(data.getQuery()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(vm); org.ovirt.engine.core.bll.VmHandler.updateVmLock(vm); org.ovirt.engine.core.bll.VmHandler.updateOperationProgress(vm); } return vms; }
private org.ovirt.engine.core.common.queries.SearchParameters getSearchParameters(org.ovirt.engine.core.common.interfaces.SearchType searchType, java.lang.String constraint) { org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters(constraint, searchType); boolean caseSensitive = org.ovirt.engine.api.common.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource.CASE_SENSITIVE_CONSTRAINT_PARAMETER, true, false); int from = org.ovirt.engine.api.common.util.ParametersHelper.getIntegerParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource.FROM_CONSTRAINT_PARAMETER, (-1), (-1)); int max = org.ovirt.engine.api.common.util.ParametersHelper.getIntegerParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.MAX, (-1), (-1)); searchParams.setCaseSensitive(caseSensitive); if (from != (-1)) { searchParams.setSearchFrom(from); } if (max != (-1)) { searchParams.setMaxCount(max); } return searchParams; }


@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid qosId = getQosId(); org.ovirt.engine.core.common.businessentities.network.HostNetworkQos oldQos = getQosDao().get(qosId); org.ovirt.engine.core.common.businessentities.network.HostNetworkQos newQos = getQos(); super.executeCommand(); if (networkUpdateRequired(oldQos, newQos)) { applyNetworkChangesToHosts(); } }
void detachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().remove(alertPanel); }

@org.ovirt.engine.ui.common.Template("<i>Replace '&lthostname&gt' with the hostname of the Xen hypervisor in the libvirt URI. <br />" + (("Only SSH transport is allowed for Xen import and the connection has to be without password. <br /> <br />" + "To disable SSH host key verification add 'no_verify' parameter to the URI, ") + "i.e.: xen+ssh://root@xen.example.com?no_verify=1</i>")) com.google.gwt.safehtml.shared.SafeHtml xenUriInfo();


protected java.util.List<? extends java.util.Comparator<org.ovirt.engine.core.common.businessentities.StorageDomain>> getStorageDomainComparators(java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> vmDisks) { return java.util.Arrays.asList(new org.ovirt.engine.core.bll.memory.sdcomparators.StorageDomainNumberOfVmDisksComparator(vmDisks), new org.ovirt.engine.core.bll.memory.sdcomparators.StorageTypeSharedComparator(), new org.ovirt.engine.core.bll.memory.sdcomparators.StorageTypeFileComparator(), new org.ovirt.engine.core.bll.memory.sdcomparators.StorageDomainAvailableDiskSizeComparator()); }
@org.junit.experimental.theories.Theory public void testCompare(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { storageDomain1.setStorageType(storageType); for (org.ovirt.engine.core.common.businessentities.storage.StorageType storageType2 : org.ovirt.engine.core.common.businessentities.storage.StorageType.values()) { storageDomain2.setStorageType(storageType2); int compareTypes = java.lang.Boolean.compare(storageType.isFileDomain(), storageType2.isFileDomain()); int comparatorReturnValue = comparator.compare(storageDomain1, storageDomain2); assertEquals((compareTypes < 0), (comparatorReturnValue < 0)); assertEquals((compareTypes == 0), (comparatorReturnValue == 0)); assertEquals((compareTypes > 0), (comparatorReturnValue > 0)); } }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain, org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain2) { return java.lang.Boolean.compare(storageDomain.isShared(), storageDomain2.isShared()); }
protected java.util.List<? extends java.util.Comparator<org.ovirt.engine.core.common.businessentities.StorageDomain>> getStorageDomainComparators(java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> vmDisks) { return java.util.Arrays.asList(new org.ovirt.engine.core.bll.memory.sdcomparators.StorageDomainNumberOfVmDisksComparator(vmDisks), new org.ovirt.engine.core.bll.memory.sdcomparators.StorageTypeLocalLastComparator(), new org.ovirt.engine.core.bll.memory.sdcomparators.StorageTypeBlockLastComparator(), new org.ovirt.engine.core.bll.memory.sdcomparators.StorageDomainAvailableDiskSizeComparator()); }


public void init(java.util.Map<java.lang.String, java.lang.String> paramMap) { constantDelay = org.ovirt.vdsmfake.Utils.getLong(paramMap.get("constantDelay")); randomDelay = org.ovirt.vdsmfake.Utils.getLong(paramMap.get("randomDelay")); networkLoad = org.ovirt.vdsmfake.Utils.splitString(paramMap.get("networkLoad")); cpuLoadList = org.ovirt.vdsmfake.Utils.splitString(paramMap.get("cpuLoad")); memLoad = org.ovirt.vdsmfake.Utils.splitString(paramMap.get("memLoad")); storageDelay = org.ovirt.vdsmfake.Utils.splitString(paramMap.get("storageDelay")); networkBridgeName = paramMap.get("networkBridgeName"); cacheDir = paramMap.get("cacheDir"); logDir = ((paramMap.get("logDir")) + "/") + (java.lang.System.currentTimeMillis()); forwardVdsmServer = paramMap.get("forwardVdsmServer"); vdsmPort = paramMap.get("vdsmPort"); vmConfAndStatsConstants = paramMap.get("vmConfAndStatsConstants"); vmConfAndStatsUpdateIntervals = paramMap.get("vmConfAndStatsUpdateIntervals"); jsonHandlersThreadsPool = java.lang.Integer.valueOf(paramMap.get("jsonHandlersThreadsPool")); final java.lang.String notLoggedMethods = paramMap.get("notLoggedMethods"); if ((notLoggedMethods != null) && ((notLoggedMethods.trim().length()) > 0)) { final java.lang.String[] methodNames = notLoggedMethods.split(","); for (java.lang.String methodName : methodNames) { notLoggedMethodSet.add(methodName.trim()); } } makeDir(cacheDir); makeDir(logDir); if (isProxyActive()) { targetServerUrl = (((getForwardVdsmServer()) + ":") + (getVdsmPort())) + "/"; } }
@java.lang.Override public void onTabAccessibleChange(org.ovirt.engine.ui.common.widget.tab.TabAccessibleChangeEvent event) { getView().recalculateSize(); getView().showScrollButtons(); }

@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.userportal.section.main.presenter.tab.extended.vm.ExtendedVmSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.userportal.uicommon.model.UserPortalDetailModelProvider<org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel, org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.userportal.section.main.presenter.tab.extended.vm.SubTabExtendedVmGuestInfoPresenter.constants.extendedVirtualMachineGuestInfoSubTabLabel(), 11, modelProvider); }
private void updateProperties() { org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); setClientIp(vm.getClientIp()); setConsoleUserName((!(org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(vm.getClientIp())) ? vm.getConsoleCurentUserName() : null)); setGuestUserName(vm.getGuestCurentUserName()); setGuestOs(vm.getGuestOs()); setGuestOsArch(vm.getGuestOsArch()); setGuestOsCodename(vm.getGuestOsCodename()); setGuestOsDistribution(vm.getGuestOsDistribution()); setGuestOsKernelVersion(vm.getGuestOsKernelVersion()); setGuestOsType(vm.getGuestOsType()); setGuestOsVersion(vm.getGuestOsVersion()); setGuestOsTimezoneName(vm.getGuestOsTimezoneName()); setGuestOsTimezoneOffset(vm.getGuestOsTimezoneOffset()); setGuestOsNamedVersion(); java.lang.String hours = com.google.gwt.i18n.client.NumberFormat.getFormat("00").format(((guestOsTimezoneOffset) / 60.0)); java.lang.String minutes = com.google.gwt.i18n.client.NumberFormat.getFormat("00").format(((guestOsTimezoneOffset) % 60)); if ((guestOsTimezoneOffset) >= 0) { guestOsTimezone = org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel.messages.positiveTimezoneOffset(guestOsTimezoneName, hours, minutes); } else { guestOsTimezone = org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel.messages.negativeTimezoneOffset(guestOsTimezoneName, hours, minutes); } }
org.ovirt.engine.ui.userportal.uicommon.model.UserPortalDetailModelProvider<org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel, org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel> getVmGuestInfoModelProvider();
@java.lang.Override protected void doEdit(org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel model) { driver.edit(model); }
private void setDetailList() { vmGeneralModel.setIsAvailable(false); vmSnapshotListModel.setIsAvailable(false); vmMonitorModel.setIsAvailable(false); vmDiskListModel.setIsAvailable(false); vmInterfaceListModel.setIsAvailable(false); poolGeneralModel.setIsAvailable(false); poolDiskListModel.setIsAvailable(false); poolInterfaceListModel.setIsAvailable(false); permissionListModel.setIsAvailable(true); vmEventListModel.setIsAvailable(true); vmAppListModel.setIsAvailable(true); vmGuestInfoModel.setIsAvailable(true); vmGuestContainerListModel.setIsAvailable(true); java.util.List<org.ovirt.engine.ui.uicommonweb.models.HasEntity<?>> list = new java.util.ArrayList<>(); list.add(vmGeneralModel); list.add(poolGeneralModel); list.add(vmInterfaceListModel); list.add(poolInterfaceListModel); list.add(vmDiskListModel); list.add(poolDiskListModel); list.add(vmSnapshotListModel); list.add(permissionListModel); list.add(vmEventListModel); list.add(vmAppListModel); list.add(vmMonitorModel); list.add(vmGuestInfoModel); list.add(vmGuestContainerListModel); setDetailModels(((java.util.List) (list))); }
@java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return (source != null) && (!((java.lang.Boolean) (source))); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = ((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (returnValue)); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(dataCenter.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } } localDataCenters.removeAll(localDataCenterWithCluster); model.updateOptionsRequiredAddDataCenter((!(localDataCenters.isEmpty()))); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = ((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (returnValue)); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(dataCenter.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } } localDataCenters.removeAll(localDataCenterWithCluster); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { filteredDataCenters.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(dataCenter)); } displayAddDataCenter(filteredDataCenters); }
public void updateAll() { final org.ovirt.engine.core.compat.Guid selectedInstanceTypeId = getSelectedInstanceTypeId(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllInstanceTypes, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue res = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if ((res == null) || (!(res.getSucceeded()))) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.InstanceType> instanceTypes = new java.util.ArrayList<>(); if (!(getModel().isCreateInstanceOnly())) { instanceTypes.add(CustomInstanceType.INSTANCE); } for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : ((java.lang.Iterable<org.ovirt.engine.core.common.businessentities.InstanceType>) (res.getReturnValue()))) { instanceTypes.add(instanceType); } getModel().getInstanceTypes().setItems(instanceTypes); for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : instanceTypes) { if ((instanceType instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) && (selectedInstanceTypeId == null)) { getModel().getInstanceTypes().setSelectedItem(CustomInstanceType.INSTANCE); break; } if (((instanceType.getId()) == null) || (selectedInstanceTypeId == null)) { continue; } if (instanceType.getId().equals(selectedInstanceTypeId)) { getModel().getInstanceTypes().setSelectedItem(instanceType); break; } } if ((getModel().getInstanceTypes().getSelectedItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) { getModel().getAttachedToInstanceType().setEntity(false); } updateFields(); } })); }
@java.lang.Override public void onSuccess(java.lang.Object modelFromCallback, java.lang.Object returnValue) { deactivate(); org.ovirt.engine.core.common.businessentities.DisplayType displayProtocol = displayTypes.iterator().next(); if (displayTypes.contains(vmBase.getDefaultDisplayType())) { displayProtocol = vmBase.getDefaultDisplayType(); } maybeSetSelectedItem(model.getDisplayType(), displayProtocol); java.util.Set<org.ovirt.engine.core.common.businessentities.GraphicsType> graphicsTypes = new java.util.HashSet<>(); java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> graphicsDevices = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); for (org.ovirt.engine.core.common.businessentities.GraphicsDevice graphicsDevice : graphicsDevices) { graphicsTypes.add(graphicsDevice.getGraphicsType()); } org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.GraphicsTypes selected = UnitVmModel.GraphicsTypes.fromGraphicsTypes(graphicsTypes); if ((selected != null) && (getModel().getGraphicsType().getItems().contains(selected))) { maybeSetSelectedItem(getModel().getGraphicsType(), selected); } maybeSetSelectedItem(model.getNumOfMonitors(), vmBase.getNumOfMonitors()); maybeSetSelectedItem(model.getUsbPolicy(), vmBase.getUsbPolicy()); maybeSetEntity(model.getIsSmartcardEnabled(), vmBase.isSmartcardEnabled()); maybeSetSingleQxlPci(vmBase); activate(); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { deactivate(); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (target)); org.ovirt.engine.core.common.queries.VdcQueryReturnValue val = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); @java.lang.SuppressWarnings("unchecked") java.util.Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = val.getReturnValue(); if ((watchdogs.size()) == 0) { model.getWatchdogAction().setSelectedItem(model.getWatchdogAction().getItems().iterator().next()); model.getWatchdogModel().setSelectedItem(model.getWatchdogModel().getItems().iterator().next()); } for (org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog : watchdogs) { if (watchdogAvailable(watchdog.getModel())) { model.getWatchdogAction().setSelectedItem(((watchdog.getAction()) == null ? null : watchdog.getAction())); model.getWatchdogModel().setSelectedItem(((watchdog.getModel()) == null ? null : watchdog.getModel())); } } activate(); if (continueWithNext) { updateBalloon(vmBase, true); } }
public void updateNetworkInterfacesByTemplate(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { org.ovirt.engine.core.common.queries.VdcQueryType queryType = (vmBase instanceof org.ovirt.engine.core.common.businessentities.VmTemplate) ? org.ovirt.engine.core.common.queries.VdcQueryType.GetTemplateInterfacesByTemplateId : org.ovirt.engine.core.common.queries.VdcQueryType.GetVmInterfacesByVmId; org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object parentModel, java.lang.Object returnValue) { if (returnValue == null) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); updateNetworkInterfaces(getNetworkProfileBehavior(), nics); } }); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(queryType, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBase.getId()), query); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnObj) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnObj)); java.lang.String msg; if (returnValue == null) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().testFailedUnknownErrorMsg(); } else { org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result = returnValue.getReturnValue(); if ((result.getStatus()) == (FenceOperationResult.Status.SUCCESS)) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().testSuccessfulWithPowerStatus(((result.getPowerStatus()) == (org.ovirt.engine.core.common.businessentities.pm.PowerStatus.ON) ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().powerOn() : org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().powerOff())); } else { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().testFailedWithErrorMsg(result.getMessage()); } } setMessage(msg); getTestCommand().setIsExecutionAllowed(true); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.ClusterPolicy> list = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.ClusterPolicyComparator()); setItems(list); }
@java.lang.Override public void onSuccess(java.lang.Object parentModel, java.lang.Object returnValue) { if (returnValue == null) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); updateNetworkInterfaces(getNetworkProfileBehavior(), nics); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel) (clusterGuideModel.getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>) (returnValue)); model.getDataCenter().setItems(dataCenters); if ((getEntity().getStoragePoolId()) != null) { model.getDataCenter().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(dataCenters, new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate<>(clusterGuideModel.getEntity().getStoragePoolId()))); } model.getDataCenter().setIsChangeable(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnConfirmPMHost", clusterGuideModel); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", clusterGuideModel); model.getCommands().add(tempVar2); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.AbstractErrataListModel errataListModel = ((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataListModel) (model)); org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValueObject = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if (returnValueObject.getSucceeded()) { org.ovirt.engine.core.common.businessentities.ErrataData errataData = returnValueObject.getReturnValue(); unfilteredResultList = errataData.getErrata(); setItems(filter(unfilteredResultList)); } else { errataListModel.setMessage((((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataListModel.constants.katelloProblemRetrievingErrata()) + " ") + (returnValueObject.getExceptionMessage()))); } }
private void runQuery(org.ovirt.engine.core.compat.Guid guid) { org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.setHandleFailure(true); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.AbstractErrataListModel errataListModel = ((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataListModel) (model)); org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValueObject = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if (returnValueObject.getSucceeded()) { org.ovirt.engine.core.common.businessentities.ErrataData errataData = returnValueObject.getReturnValue(); unfilteredResultList = errataData.getErrata(); setItems(filter(unfilteredResultList)); } else { errataListModel.setMessage((((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataListModel.constants.katelloProblemRetrievingErrata()) + " ") + (returnValueObject.getExceptionMessage()))); } } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(getQueryType(), new org.ovirt.engine.core.common.queries.GetErrataCountsParameters(guid), _asyncQuery); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); org.ovirt.engine.core.common.businessentities.StoragePool storagePool = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); model.setDataCenterVersion(storagePool.getCompatibilityVersion()); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); clusterGuideModel.allHosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); clusterGuideModel.updateOptionsNonLocalFS(); }
@java.lang.Override protected void syncSearch() { super.syncSearch(); if (getIsQueryFirstTime()) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllPolicyUnits, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyListModel clusterPolicyListModel = ((org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyListModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> list = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); clusterPolicyListModel.setPolicyUnits(list); clusterPolicyListModel.fetchClusterPolicies(); if ((policyUnitModel) != null) { policyUnitModel.getPolicyUnits().setItems(sort(policyUnits)); } } })); } else { fetchClusterPolicies(); } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { deactivate(); getModel().getIsSoundcardEnabled().setEntity(((java.lang.Boolean) (returnValue))); activate(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetConsoleDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBase.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { deactivate(); java.util.List<java.lang.String> consoleDevices = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); getModel().getIsConsoleDeviceEnabled().setEntity((!(consoleDevices.isEmpty()))); activate(); postDoUpdateManagedFieldsFrom(vmBase); } })); }
private void updateWatchdog(final org.ovirt.engine.core.common.businessentities.VmBase vmBase, final boolean continueWithNext) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getWatchdogByVmId(new org.ovirt.engine.ui.frontend.AsyncQuery(this.getModel(), new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { deactivate(); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (target)); org.ovirt.engine.core.common.queries.VdcQueryReturnValue val = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); @java.lang.SuppressWarnings("unchecked") java.util.Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = val.getReturnValue(); if ((watchdogs.size()) == 0) { model.getWatchdogAction().setSelectedItem(model.getWatchdogAction().getItems().iterator().next()); model.getWatchdogModel().setSelectedItem(model.getWatchdogModel().getItems().iterator().next()); } for (org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog : watchdogs) { if (watchdogAvailable(watchdog.getModel())) { model.getWatchdogAction().setSelectedItem(((watchdog.getAction()) == null ? null : watchdog.getAction())); model.getWatchdogModel().setSelectedItem(((watchdog.getModel()) == null ? null : watchdog.getModel())); } } activate(); if (continueWithNext) { updateBalloon(vmBase, true); } } }), vmBase.getId()); }
protected void updateRngDevice(final org.ovirt.engine.core.common.businessentities.VmBase vmBase) { if ((model.getIsRngEnabled().getIsChangable()) && (model.getIsRngEnabled().getIsAvailable())) { if (!(isNextRunConfigurationExists())) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetRngDevice, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBase.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { deactivate(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); getModel().setRngDevice(rngDevice); } activate(); updateVirtioScsi(vmBase); } })); } else { deactivate(); org.ovirt.engine.core.common.businessentities.VmDevice rngDevice = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.findVmDeviceByGeneralType(vmBase.getManagedDeviceMap(), VmDeviceGeneralType.RNG); getModel().getIsRngEnabled().setEntity((rngDevice != null)); if (rngDevice != null) { getModel().setRngDevice(new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevice)); } activate(); updateVirtioScsi(vmBase); } } else { updateVirtioScsi(vmBase); } }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); boolean isMultiHostDC = dataCenter.isLocal(); if (isMultiHostDC) { model.setMultiSelection(false); } setWindow(model); model.getCluster().setItems(clusters); model.getCluster().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(clusters)); model.getCluster().setIsAvailable(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSelectHost", this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.getCommands().add(tempVar2); }
private void addDataCenter() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel guideModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> allDataCenters = ((java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>) (returnValue)); java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.StoragePool>> filteredDataCenters = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : allDataCenters) { if ((guideModel.getEntity().getCompatibilityVersion().compareTo(dataCenter.getCompatibilityVersion())) >= 0) { if (dataCenter.isLocal()) { localDataCenters.add(dataCenter); } else { filteredDataCenters.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(dataCenter)); } } } if (localDataCenters.isEmpty()) { displayAddDataCenter(filteredDataCenters); } else { verifyLocalDataCenterNoCluster(filteredDataCenters, localDataCenters); } } })); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); clusterGuideModel.localStorageHost = ((org.ovirt.engine.core.common.businessentities.VDS) (returnValue)); clusterGuideModel.updateOptionsLocalFS(); }
@java.lang.Override public void onSuccess(java.lang.Object parentModel, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> profiles = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>) (returnValue)); java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType> vnicInstanceTypes = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = (argNics == null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>() : argNics; for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic : nics) { final org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType vnicInstanceType = new org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType(nic); vnicInstanceType.setItems(profiles); behavior.initSelectedProfile(vnicInstanceType, vnicInstanceType.getNetworkInterface()); vnicInstanceTypes.add(vnicInstanceType); } getModel().getNicsWithLogicalNetworks().getVnicProfiles().setItems(profiles); getModel().getNicsWithLogicalNetworks().setItems(vnicInstanceTypes); getModel().getNicsWithLogicalNetworks().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(vnicInstanceTypes)); }
@java.lang.Override public java.lang.Object convert(java.lang.Object returnValue, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>) (asyncQuery.getModel())); this.clusterNetworks = clusterNetworks; java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> vnicProfiles = new java.util.ArrayList<>(); vnicProfiles.add(VnicProfileView.EMPTY); if (returnValue == null) { return vnicProfiles; } for (org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile : ((java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>) (returnValue))) { org.ovirt.engine.core.common.businessentities.network.Network network = findNetworkById(vnicProfile.getNetworkId()); if ((network != null) && (network.isVmNetwork())) { vnicProfiles.add(vnicProfile); } } java.util.Collections.sort(vnicProfiles, new org.ovirt.engine.ui.uicommonweb.Linq.VnicProfileViewComparator()); return vnicProfiles; }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel<java.lang.Void> clusterListModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel<java.lang.Void>) (target)); org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (clusterListModel.getWindow())); model.setEntity(returnValue); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", clusterListModel); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().configureLaterTitle()); tempVar.setIsDefault(true); tempVar.setIsCancel(true); model.getCommands().add(tempVar); }
protected void updateBalloon(final org.ovirt.engine.core.common.businessentities.VmBase vmBase, final boolean continueWithNext) { if ((model.getMemoryBalloonDeviceEnabled().getIsChangable()) && (model.getMemoryBalloonDeviceEnabled().getIsAvailable())) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.IsBalloonEnabled, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBase.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object parenModel, java.lang.Object returnValue) { deactivate(); getModel().getMemoryBalloonDeviceEnabled().setEntity(((java.lang.Boolean) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); activate(); if (continueWithNext) { updateRngDevice(vmBase); } } })); } else if (continueWithNext) { updateRngDevice(vmBase); } }
private void onSelectedHookSourceChanged() { org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook> selectedItem = getHookSources().getSelectedItem(); if (selectedItem == null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook selectedServer = selectedItem.getEntity(); getServerHooksList().setSelectedItem(selectedServer); if ((selectedServer.getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStatus.MISSING)) { getContentModel().getContent().setEntity(null); getContentModel().getStatus().setEntity(null); getContentModel().getMd5Checksum().setEntity(null); return; } getContentModel().getStatus().setEntity(selectedServer.getStatus()); getContentModel().getMd5Checksum().setEntity(selectedServer.getChecksum()); if ((selectedServer.getContentType()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterHookContentType.TEXT)) { startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getGlusterHookContent(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.lang.String content = ((java.lang.String) (returnValue)); getContentModel().getContent().setEntity(content); stopProgress(); } }), getGlusterHookEntity().getId(), selectedServer.getServerId()); } else { getContentModel().getContent().setEntity(null); } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.lang.String content = ((java.lang.String) (returnValue)); getContentModel().getContent().setEntity(content); stopProgress(); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.lang.Boolean connectAutomatically = java.lang.Boolean.TRUE; org.ovirt.engine.core.common.businessentities.UserProfile profile = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); if (profile != null) { setUserProfile(profile); connectAutomatically = profile.isUserPortalVmLoginAutomatically(); ((org.ovirt.engine.ui.uicommonweb.models.EditOptionsModel) (model)).getPublicKey().setEntity(profile.getSshPublicKey()); } ((org.ovirt.engine.ui.uicommonweb.models.EditOptionsModel) (model)).getEnableConnectAutomatically().setEntity(connectAutomatically); }
private void onEdit() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.EditOptionsModel model = new org.ovirt.engine.ui.uicommonweb.models.EditOptionsModel(); model.setTitle(org.ovirt.engine.ui.uicommonweb.models.OptionsModel.constants.editOptionsTitle()); model.setHashName("edit_options"); setWindow(model); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand(org.ovirt.engine.ui.uicommonweb.models.OptionsModel.constants.ok(), this); model.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand(org.ovirt.engine.ui.uicommonweb.models.OptionsModel.constants.cancel(), this); model.getCommands().add(cancelCommand); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getUserProfile(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.lang.Boolean connectAutomatically = java.lang.Boolean.TRUE; org.ovirt.engine.core.common.businessentities.UserProfile profile = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); if (profile != null) { setUserProfile(profile); connectAutomatically = profile.isUserPortalVmLoginAutomatically(); ((org.ovirt.engine.ui.uicommonweb.models.EditOptionsModel) (model)).getPublicKey().setEntity(profile.getSshPublicKey()); } ((org.ovirt.engine.ui.uicommonweb.models.EditOptionsModel) (model)).getEnableConnectAutomatically().setEntity(connectAutomatically); } })); }
@java.lang.Override public void onSuccess(java.lang.Object model1, java.lang.Object result) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>) (result)); if ((volumes.size()) > 0) { clusterModel.getEnableGlusterService().setIsChangeable(false); if (!isVirtGlusterAllowed) { clusterModel.getEnableOvirtService().setIsChangeable(false); } } }
public void init() { startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmListByClusterName(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> vmList = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>) (returnValue)); java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityGroup().getEntityIds(); getVmsSelectionModel().init(vmList, (vmIds != null ? vmIds : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); stopProgress(); } }), clusterName); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> vmList = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>) (returnValue)); java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityGroup().getEntityIds(); getVmsSelectionModel().init(vmList, (vmIds != null ? vmIds : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); stopProgress(); }
public void guide() { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newClusterGuideMeTitle()); model.setHelpTag(HelpTag.new_cluster___guide_me); model.setHashName("new_cluster_-_guide_me"); if ((getGuideContext()) == null) { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.getSelectedItem(); setGuideContext(cluster.getId()); } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel<java.lang.Void> clusterListModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel<java.lang.Void>) (target)); org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (clusterListModel.getWindow())); model.setEntity(returnValue); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", clusterListModel); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().configureLaterTitle()); tempVar.setIsDefault(true); tempVar.setIsCancel(true); model.getCommands().add(tempVar); } }), ((org.ovirt.engine.core.compat.Guid) (getGuideContext()))); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel<java.lang.Void> model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel<java.lang.Void>) (target)); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = null; if (returnValue instanceof java.util.List) { hosts = ((java.util.List<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); } else if ((returnValue instanceof org.ovirt.engine.core.common.queries.VdcQueryReturnValue) && ((((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()) instanceof java.util.List)) { hosts = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); } boolean foundNRHosts = false; if (hosts != null) { for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if ((org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive) == (host.getStatus())) { foundNRHosts = true; break; } } } java.lang.String existingMsg = ((confirmModel.getMessage()) == null) ? "" : confirmModel.getMessage(); if (foundNRHosts) { confirmModel.setMessage((existingMsg + (constants.youAreAboutChangeClusterCompatibilityVersionNonResponsiveHostsMsg()))); } else { confirmModel.setMessage((existingMsg + (constants.youAreAboutChangeClusterCompatibilityVersionMsg()))); } model.stopProgress(); }
protected void updateDataCenterVersion() { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); org.ovirt.engine.core.common.businessentities.StoragePool storagePool = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); model.setDataCenterVersion(storagePool.getCompatibilityVersion()); } }); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterById(query, getEntity().getStoragePoolId()); }
@java.lang.Override protected void updateInternal() { super.updateInternal(); if (!((getContainer().isNewStorage()) || (getContainer().isStorageActive()))) { return; } org.ovirt.engine.core.common.businessentities.VDS host = getContainer().getHost().getSelectedItem(); if (host == null) { proposeDiscover(); return; } final java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>> prevSelected = org.ovirt.engine.ui.uicommonweb.Linq.findSelectedItems(((java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>>) (getSelectedItem()))); clearItems(); initializeItems(null, null); final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel model = this; java.lang.Object target = ((getWidgetModel()) != null) ? getWidgetModel() : getContainer(); org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(target, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue response = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if (response.getSucceeded()) { model.applyData(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (response.getReturnValue())), false, prevSelected); model.setGetLUNsFailure(""); } else { model.setGetLUNsFailure(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().couldNotRetrieveLUNsLunsFailure()); } } }, true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetDeviceList, new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(host.getId(), getType(), false, null), asyncQuery); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue response = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if (response.getSucceeded()) { model.applyData(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (response.getReturnValue())), false, prevSelected); model.setGetLUNsFailure(""); } else { model.setGetLUNsFailure(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().couldNotRetrieveLUNsLunsFailure()); } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue response = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if ((response == null) || (!(response.getSucceeded()))) { hasAdminSystemPermission = false; updateConfigureLocalStorageCommandAvailability1(); } else { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Permission> permissions = response.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.Permission permission : permissions) { if (((permission.getObjectType()) == (org.ovirt.engine.core.common.VdcObjectType.System)) && ((permission.getRoleType()) == (org.ovirt.engine.core.common.businessentities.RoleType.ADMIN))) { hasAdminSystemPermission = true; break; } } updateConfigureLocalStorageCommandAvailability1(); } }
public void updateConfigureLocalStorageCommandAvailability() { if ((hasAdminSystemPermission) == null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoggedInUser(); if (dbUser == null) { hasAdminSystemPermission = false; updateConfigureLocalStorageCommandAvailability1(); return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetPermissionsByAdElementId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dbUser.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue response = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if ((response == null) || (!(response.getSucceeded()))) { hasAdminSystemPermission = false; updateConfigureLocalStorageCommandAvailability1(); } else { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Permission> permissions = response.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.Permission permission : permissions) { if (((permission.getObjectType()) == (org.ovirt.engine.core.common.VdcObjectType.System)) && ((permission.getRoleType()) == (org.ovirt.engine.core.common.businessentities.RoleType.ADMIN))) { hasAdminSystemPermission = true; break; } } updateConfigureLocalStorageCommandAvailability1(); } } }, true)); } else { updateConfigureLocalStorageCommandAvailability1(); } }
private void updateOptionsNonLocalFSData() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); clusterGuideModel.hosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); clusterGuideModel.updateOptionsNonLocalFS(); } }), getEntity().getName()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); clusterGuideModel.allHosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); clusterGuideModel.updateOptionsNonLocalFS(); } })); if (getEntity().supportsGlusterService()) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isAnyHostUpInCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); isAnyHostUpInCluster = ((java.lang.Boolean) (returnValue)); clusterGuideModel.updateOptionsNonLocalFS(); } }), getEntity().getName()); } }
@java.lang.Override public void onSuccess(java.lang.Object model1, java.lang.Object ReturnValue1) { org.ovirt.engine.ui.uicommonweb.models.pools.PoolGeneralModel poolGeneralModel1 = ((org.ovirt.engine.ui.uicommonweb.models.pools.PoolGeneralModel) (model1)); java.lang.String defaultHost = ""; java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue1)).getReturnValue(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (poolGeneralModel1.getvm().getDedicatedVmForVdsList().contains(host.getId())) { if (defaultHost.isEmpty()) { defaultHost = host.getName(); } else { defaultHost += ", " + (host.getName()); } } } poolGeneralModel1.setDefaultHost(defaultHost); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyListModel clusterPolicyListModel = ((org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyListModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> list = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); clusterPolicyListModel.setPolicyUnits(list); clusterPolicyListModel.fetchClusterPolicies(); if ((policyUnitModel) != null) { policyUnitModel.getPolicyUnits().setItems(sort(policyUnits)); } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { stopProgress(); org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel errataCountModel = ((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel) (model)); org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValueObject = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); org.ovirt.engine.core.common.businessentities.ErrataCounts resultEntity = returnValueObject.getReturnValue(); errataCountModel.setMessage(null); if ((resultEntity != null) && (returnValueObject.getSucceeded())) { errataCountModel.setErrataCounts(resultEntity); } else { errataCountModel.setMessage((((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel.constants.katelloProblemRetrievingErrata()) + " ") + (returnValueObject.getExceptionMessage()))); } }
private void fetchClusterPolicies() { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.ClusterPolicy> list = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.ClusterPolicyComparator()); setItems(list); } }); org.ovirt.engine.core.common.queries.VdcQueryParametersBase parametersBase = new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(); parametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetClusterPolicies, parametersBase, asyncQuery); setIsQueryFirstTime(false); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>) (returnValue)); final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters = new java.util.ArrayList<>(); boolean enableButton = false; for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : dataCenters) { if ((model.getEntity().getCompatibilityVersion().compareTo(dataCenter.getCompatibilityVersion())) >= 0) { if (dataCenter.isLocal()) { localDataCenters.add(dataCenter); } else { enableButton = true; break; } } } if (enableButton || (localDataCenters.isEmpty())) { model.updateOptionsRequiredAddDataCenter(enableButton); } else { model.updateOptionsRequiredAddDataCenter(localDataCenters); } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue res = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if ((res == null) || (!(res.getSucceeded()))) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.InstanceType> instanceTypes = new java.util.ArrayList<>(); if (!(getModel().isCreateInstanceOnly())) { instanceTypes.add(CustomInstanceType.INSTANCE); } for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : ((java.lang.Iterable<org.ovirt.engine.core.common.businessentities.InstanceType>) (res.getReturnValue()))) { instanceTypes.add(instanceType); } getModel().getInstanceTypes().setItems(instanceTypes); for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : instanceTypes) { if ((instanceType instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) && (selectedInstanceTypeId == null)) { getModel().getInstanceTypes().setSelectedItem(CustomInstanceType.INSTANCE); break; } if (((instanceType.getId()) == null) || (selectedInstanceTypeId == null)) { continue; } if (instanceType.getId().equals(selectedInstanceTypeId)) { getModel().getInstanceTypes().setSelectedItem(instanceType); break; } } if ((getModel().getInstanceTypes().getSelectedItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) { getModel().getAttachedToInstanceType().setEntity(false); } updateFields(); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { final org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if (!(queryReturnValue.getSucceeded())) { final org.ovirt.engine.ui.uicommonweb.ErrorPopupManager popupManager = ((org.ovirt.engine.ui.uicommonweb.ErrorPopupManager) (org.ovirt.engine.ui.uicommonweb.TypeResolver.getInstance().resolve(org.ovirt.engine.ui.uicommonweb.ErrorPopupManager.class))); popupManager.show(queryReturnValue.getExceptionMessage()); return; } onRealSuccessCallback.onSuccess(model, returnValue); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getUserProfile(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.UserProfile profile = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); java.lang.Boolean connectAutomatically = (profile == null) ? java.lang.Boolean.TRUE : profile.isUserPortalVmLoginAutomatically(); if (connectAutomatically) { handleConnectAutomatically(); } } })); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.UserProfile profile = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); java.lang.Boolean connectAutomatically = (profile == null) ? java.lang.Boolean.TRUE : profile.isUserPortalVmLoginAutomatically(); if (connectAutomatically) { handleConnectAutomatically(); } }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { spice.getOptions().setWanDisableEffects(((java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects>) (returnValue))); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { spice.getOptions().setWanColorDepth(((org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth) (returnValue))); }
private void updateWanColorDepthOptions(final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getWANColorDepth(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { spice.getOptions().setWanColorDepth(((org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth) (returnValue))); } })); }
private void updateWANDisableEffects(final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getWANDisableEffects(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { spice.getOptions().setWanDisableEffects(((java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects>) (returnValue))); } })); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabHostView view = ((org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabHostView) (target)); view.maxSpmPriority = ((java.lang.Integer) (returnValue)); InitSpmPriorities1(); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel clusterModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.scheduling.ClusterPolicy> list = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); clusterModel.getClusterPolicy().setItems(list); org.ovirt.engine.core.common.scheduling.ClusterPolicy defaultClusterPolicy = null; org.ovirt.engine.core.common.scheduling.ClusterPolicy selectedClusterPolicy = null; for (org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy : list) { if (((clusterModel.getIsEdit()) && ((getEntity()) != null)) && (clusterPolicy.getId().equals(getEntity().getClusterPolicyId()))) { selectedClusterPolicy = clusterPolicy; } if (clusterPolicy.isDefaultPolicy()) { defaultClusterPolicy = clusterPolicy; } } if (selectedClusterPolicy != null) { clusterModel.getClusterPolicy().setSelectedItem(selectedClusterPolicy); } else { clusterModel.getClusterPolicy().setSelectedItem(defaultClusterPolicy); } clusterPolicyChanged(); }
private void loadCurrentClusterManagementNetwork() { final org.ovirt.engine.ui.frontend.AsyncQuery getManagementNetworkQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { final org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel clusterModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel) (model)); final org.ovirt.engine.core.common.businessentities.network.Network managementNetwork = ((org.ovirt.engine.core.common.businessentities.network.Network) (returnValue)); clusterModel.getManagementNetwork().setSelectedItem(managementNetwork); } }); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getManagementNetwork(getManagementNetworkQuery, getEntity().getId()); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); isAnyHostUpInCluster = ((java.lang.Boolean) (returnValue)); clusterGuideModel.updateOptionsNonLocalFS(); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { final org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel clusterModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel) (model)); final org.ovirt.engine.core.common.businessentities.network.Network managementNetwork = ((org.ovirt.engine.core.common.businessentities.network.Network) (returnValue)); clusterModel.getManagementNetwork().setSelectedItem(managementNetwork); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { final org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel clusterModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel) (model)); if ((clusterModel.getDataCenter().getSelectedItem()) == null) { return; } final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> dcNetworks = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>) (returnValue)); clusterModel.getManagementNetwork().setItems(dcNetworks); if (defaultManagementNetworkCache.containsKey(dataCenterId)) { final org.ovirt.engine.core.common.businessentities.network.Network defaultManagementNetwork = defaultManagementNetworkCache.get(dataCenterId); setSelectedDefaultManagementNetwork(clusterModel, defaultManagementNetwork); } else { final org.ovirt.engine.ui.frontend.AsyncQuery getDefaultManagementNetworkQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(clusterModel, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { final org.ovirt.engine.core.common.businessentities.network.Network defaultManagementNetwork = ((org.ovirt.engine.core.common.businessentities.network.Network) (returnValue)); defaultManagementNetworkCache.put(dataCenterId, defaultManagementNetwork); setSelectedDefaultManagementNetwork(clusterModel, defaultManagementNetwork); } }); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDefaultManagementNetwork(getDefaultManagementNetworkQuery, dataCenterId); } }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); clusterGuideModel.hosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); clusterGuideModel.updateOptionsNonLocalFS(); }
private void updateOptionsLocalFSData() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getLocalStorageHost(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); clusterGuideModel.localStorageHost = ((org.ovirt.engine.core.common.businessentities.VDS) (returnValue)); clusterGuideModel.updateOptionsLocalFS(); } }), dataCenter.getName()); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> policyUnits = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); policyUnitMap = new java.util.LinkedHashMap(); for (org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit : policyUnits) { policyUnitMap.put(policyUnit.getId(), policyUnit); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetClusterPolicies, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel clusterModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.scheduling.ClusterPolicy> list = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); clusterModel.getClusterPolicy().setItems(list); org.ovirt.engine.core.common.scheduling.ClusterPolicy defaultClusterPolicy = null; org.ovirt.engine.core.common.scheduling.ClusterPolicy selectedClusterPolicy = null; for (org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy : list) { if (((clusterModel.getIsEdit()) && ((getEntity()) != null)) && (clusterPolicy.getId().equals(getEntity().getClusterPolicyId()))) { selectedClusterPolicy = clusterPolicy; } if (clusterPolicy.isDefaultPolicy()) { defaultClusterPolicy = clusterPolicy; } } if (selectedClusterPolicy != null) { clusterModel.getClusterPolicy().setSelectedItem(selectedClusterPolicy); } else { clusterModel.getClusterPolicy().setSelectedItem(defaultClusterPolicy); } clusterPolicyChanged(); } })); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { final org.ovirt.engine.core.common.businessentities.network.Network defaultManagementNetwork = ((org.ovirt.engine.core.common.businessentities.network.Network) (returnValue)); defaultManagementNetworkCache.put(dataCenterId, defaultManagementNetwork); setSelectedDefaultManagementNetwork(clusterModel, defaultManagementNetwork); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { setAllowClusterWithVirtGlusterEnabled(((java.lang.Boolean) (returnValue))); }
private void InitSpmPriorities1() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDefaultSpmPriority(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabHostView view = ((org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabHostView) (target)); view.defaultSpmPriority = ((java.lang.Integer) (returnValue)); InitSpmPriorities2(); } })); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabHostView view = ((org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabHostView) (target)); view.defaultSpmPriority = ((java.lang.Integer) (returnValue)); InitSpmPriorities2(); }
private void InitSpmPriorities() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getMaxSpmPriority(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabHostView view = ((org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabHostView) (target)); view.maxSpmPriority = ((java.lang.Integer) (returnValue)); InitSpmPriorities1(); } })); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); model.dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); if (((model.dataCenter) == null) || (!(model.dataCenter.isLocal()))) { model.updateOptionsNonLocalFSData(); } else { model.updateOptionsLocalFSData(); } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { setIsConnecting(false); org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel = ((org.ovirt.engine.ui.uicommonweb.models.LoginModel) (model)); if (ReturnValue == null) { loginModel.setMessages(java.util.Arrays.asList(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().couldNotConnectToOvirtEngineServiceMsg())); return; } if (!(loggingInAutomatically)) { loginModel.getUserName().setIsChangeable(true); loginModel.getPassword().setIsChangeable(true); loginModel.getProfile().setIsChangeable(true); } java.util.List<java.lang.String> domains = ((java.util.List<java.lang.String>) (ReturnValue)); java.util.Collections.sort(domains); loginModel.getProfile().setItems(domains); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel bookmarkListModel = ((org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel) (model)); java.util.List<org.ovirt.engine.core.common.businessentities.Bookmark> resultList = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue(); if (resultList != null) { java.util.Collections.sort(resultList, org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel.COMPARATOR); } setIsBookmarkInitiated(true); bookmarkListModel.setItems(resultList); setIsBookmarkInitiated(false); }
@java.lang.Override protected void syncSearch() { super.syncSearch(); org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel bookmarkListModel = ((org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel) (model)); java.util.List<org.ovirt.engine.core.common.businessentities.Bookmark> resultList = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue(); if (resultList != null) { java.util.Collections.sort(resultList, org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel.COMPARATOR); } setIsBookmarkInitiated(true); bookmarkListModel.setItems(resultList); setIsBookmarkInitiated(false); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllBookmarks, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), _asyncQuery); }
@java.lang.Override protected void syncSearch() { super.syncSearch(); org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { setItems(((java.util.Collection) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); } }); org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters(getEntity().getId()); params.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAttachedClustersByClusterPolicyId, params, asyncQuery); setIsQueryFirstTime(false); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmGeneralModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmGeneralModel) (target)); org.ovirt.engine.core.common.businessentities.VM localVm = model.getEntity(); if (localVm == null) { return; } java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); if ((localVm.getDedicatedVmForVdsList().size()) > 0) { java.lang.String defaultHost = ""; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (localVm.getDedicatedVmForVdsList().contains(host.getId())) { if (defaultHost.isEmpty()) { defaultHost = host.getName(); } else { defaultHost += ", " + (host.getName()); } } } model.setDefaultHost(defaultHost); } }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object result) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (result)).getReturnValue(); if (dbUser != null) { setCreatedByUser(getUserName(dbUser)); } }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel vmSnapshotListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (target)); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (vmSnapshotListModel.getWindow())); org.ovirt.engine.ui.uicommonweb.models.vms.CloneVmFromSnapshotModelBehavior behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.CloneVmFromSnapshotModelBehavior) (model.getBehavior())); org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (returnValue)); behavior.setVm(vm); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cloneVmFromSnapshotTitle()); model.setHelpTag(HelpTag.clone_vm_from_snapshot); model.setHashName("clone_vm_from_snapshot"); model.setCustomPropertiesKeysList(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getCustomPropertiesList()); model.initialize(vmSnapshotListModel.getSystemTreeSelectedItem()); org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand switchModeCommand = new org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand(); switchModeCommand.init(model); model.getCommands().add(switchModeCommand); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnCloneVM", vmSnapshotListModel); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", vmSnapshotListModel); model.getCommands().add(tempVar2); vmSnapshotListModel.stopProgress(); }
private void onNewInstanceType() { if (!(((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())).validateInstanceTypePart())) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isTemplateNameUnique(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { boolean isNameUnique = ((java.lang.Boolean) (returnValue)); if (isNameUnique) { postInstanceTypeNameUniqueCheck(); } else { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel VmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())); VmModel.getInvalidityReasons().clear(); VmModel.getName().getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason()); VmModel.getName().setIsValid(false); VmModel.setIsValid(false); } } }), ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())).getName().getEntity(), null); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { boolean isNameUnique = ((java.lang.Boolean) (returnValue)); if (isNameUnique) { postInstanceTypeNameUniqueCheck(); } else { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel VmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())); VmModel.getInvalidityReasons().clear(); VmModel.getName().getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason()); VmModel.getName().setIsValid(false); VmModel.setIsValid(false); } }
@java.lang.Override public void onSuccess(java.lang.Object parentModel, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsAttachedToInstanceType = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); if ((vmsAttachedToInstanceType == null) || ((vmsAttachedToInstanceType.size()) == 0)) { window.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeInstanceTypeTitle()); window.setItems(java.util.Arrays.asList(getSelectedItem().getName())); } else { java.util.List<java.lang.String> attachedVmsNames = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsAttachedToInstanceType) { attachedVmsNames.add(vm.getName()); } java.util.Collections.sort(attachedVmsNames); window.setItems(attachedVmsNames); window.getLatch().setIsAvailable(true); window.getLatch().setIsChangeable(true); window.setNote(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().vmsAttachedToInstanceTypeNote()); window.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().vmsAttachedToInstanceTypeWarningMessage()); } window.stopProgress(); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); getModel().setRngDevice(rngDevice); } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { getModel().getIsSoundcardEnabled().setEntity(((java.lang.Boolean) (returnValue))); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); getModel().setRngDevice(rngDevice); } }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (target)); @java.lang.SuppressWarnings("unchecked") java.util.Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); for (org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog : watchdogs) { model.getWatchdogAction().setSelectedItem(watchdog.getAction()); model.getWatchdogModel().setSelectedItem(watchdog.getModel()); } }
protected void initSoundCard(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isSoundcardEnabled(new org.ovirt.engine.ui.frontend.AsyncQuery(getModel(), new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { getModel().getIsSoundcardEnabled().setEntity(((java.lang.Boolean) (returnValue))); } }), id); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel guideModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> allDataCenters = ((java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>) (returnValue)); java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.StoragePool>> filteredDataCenters = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : allDataCenters) { if ((guideModel.getEntity().getCompatibilityVersion().compareTo(dataCenter.getCompatibilityVersion())) >= 0) { if (dataCenter.isLocal()) { localDataCenters.add(dataCenter); } else { filteredDataCenters.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(dataCenter)); } } } if (localDataCenters.isEmpty()) { displayAddDataCenter(filteredDataCenters); } else { verifyLocalDataCenterNoCluster(filteredDataCenters, localDataCenters); } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> graphicsDevices = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); java.util.Set<org.ovirt.engine.core.common.businessentities.GraphicsType> graphicsTypesCollection = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.GraphicsDevice graphicsDevice : graphicsDevices) { graphicsTypesCollection.add(graphicsDevice.getGraphicsType()); } initDisplayTypes(entity.getDefaultDisplayType(), UnitVmModel.GraphicsTypes.fromGraphicsTypes(graphicsTypesCollection)); doBuild(); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (target)); @java.lang.SuppressWarnings("unchecked") Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); for (org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog : watchdogs) { model.getWatchdogAction().setSelectedItem(watchdog.getAction()); model.getWatchdogModel().setSelectedItem(watchdog.getModel()); } }
protected void updateOptionsRequiredAddDataCenter(final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = ((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (returnValue)); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(dataCenter.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } } localDataCenters.removeAll(localDataCenterWithCluster); model.updateOptionsRequiredAddDataCenter((!(localDataCenters.isEmpty()))); } })); }
public void getClusterById(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid id) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetClusterById, new org.ovirt.engine.core.common.queries.IdQueryParameters(id), aQuery); }
public void runQuery(org.ovirt.engine.core.compat.Guid guid) { startProgress("getCount"); org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.setHandleFailure(true); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { stopProgress(); org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel errataCountModel = ((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel) (model)); org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValueObject = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); org.ovirt.engine.core.common.businessentities.ErrataCounts resultEntity = returnValueObject.getReturnValue(); errataCountModel.setMessage(null); if ((resultEntity != null) && (returnValueObject.getSucceeded())) { errataCountModel.setErrataCounts(resultEntity); } else { errataCountModel.setMessage((((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel.constants.katelloProblemRetrievingErrata()) + " ") + (returnValueObject.getExceptionMessage()))); } } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(getQueryType(), new org.ovirt.engine.core.common.queries.GetErrataCountsParameters(guid), _asyncQuery); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue1) { clusterSnapshotConfigModel.getClusters().setItems(((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (returnValue)), ((org.ovirt.engine.core.common.businessentities.Cluster) (returnValue1))); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel tagListModel = ((org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel) (target)); org.ovirt.engine.ui.uicommonweb.models.tags.TagModel rootTag = tagListModel.tagToModel(((org.ovirt.engine.core.common.businessentities.Tags) (returnValue))); rootTag.getName().setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().rootTag()); rootTag.setType(TagModelType.Root); rootTag.setIsChangeable(false); tagListModel.setItems(new java.util.ArrayList(java.util.Arrays.asList(new org.ovirt.engine.ui.uicommonweb.models.tags.TagModel[]{ rootTag }))); }
public void getHostListByStatus(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.common.businessentities.VDSStatus status, boolean doRefresh) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> list = org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.VDS>cast(((java.lang.Iterable) (source))); return list; } return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>(); } }; org.ovirt.engine.core.common.queries.SearchParameters searchParameters = new org.ovirt.engine.core.common.queries.SearchParameters(("Host: " + (status == null ? "" : "status=" + (status.name()))), org.ovirt.engine.core.common.interfaces.SearchType.VDS); searchParameters.setMaxCount(9999); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, (doRefresh ? searchParameters : searchParameters.withoutRefresh()), aQuery); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { deactivate(); java.util.List<java.lang.String> consoleDevices = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); getModel().getIsConsoleDeviceEnabled().setEntity((!(consoleDevices.isEmpty()))); activate(); postDoUpdateManagedFieldsFrom(vmBase); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { migrationPolicies = ((java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy>) (returnValue)); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { onShowBrickAdvancedDetails(volumeEntity); }
@java.lang.Override public java.lang.Object convert(java.lang.Object returnValue, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { if (returnValue == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.migration.MigrationPolicy>(); } java.util.Collections.sort(((java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy>) (returnValue)), new java.util.Comparator<org.ovirt.engine.core.common.migration.MigrationPolicy>() { @java.lang.Override public int compare(org.ovirt.engine.core.common.migration.MigrationPolicy m1, org.ovirt.engine.core.common.migration.MigrationPolicy m2) { if (NoMigrationPolicy.ID.equals(m1.getId())) { return -1; } return m1.getName().compareTo(m2.getName()); } }); return returnValue; }
public void getVnicProfilesByDcId(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid dcId) { if ((aQuery.converterCallback) == null) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>(); } return source; } }; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVnicProfilesByDataCenterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dcId), aQuery); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel innerGeneralModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel) (model)); java.util.Map<java.lang.String, java.lang.String> serverMap = ((java.util.Map<java.lang.String, java.lang.String>) (result)); if (!(serverMap.isEmpty())) { innerGeneralModel.setHasNewGlusterHostsAlert(true); innerGeneralModel.setHasAnyAlert(true); } else { setHasNewGlusterHostsAlert(false); setHasAnyAlert(false); } }
public void getClustersHavingHosts(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> list = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>) (source)); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return list; } return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllClustersHavingHosts, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.gluster.GlusterClusterService swiftService = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterClusterService) (returnValue)); if (swiftService != null) { setGlusterSwiftStatus(swiftService.getStatus()); } else { setGlusterSwiftStatus(GlusterServiceStatus.UNKNOWN); } }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { boolean isConsistent = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); setConsoleAddressPartiallyOverridden((!isConsistent)); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { setNumberOfVms(((java.lang.Integer) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); }
private void updateProperties() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getEntity(); setName(cluster.getName()); setDescription(cluster.getDescription()); setCpuType(cluster.getCpuName()); setDataCenterName(cluster.getStoragePoolName()); setMemoryOverCommit(cluster.getMaxVdsMemoryOverCommit()); setCpuThreads(cluster.getCountThreadsAsCores()); setResiliencePolicy(cluster.getMigrateOnError()); setEmulatedMachine(cluster.getEmulatedMachine()); setCompatibilityVersion(cluster.getCompatibilityVersion().getValue()); generateClusterType(cluster.supportsGlusterService(), cluster.supportsVirtService()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getNumberOfVmsInCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { setNumberOfVms(((java.lang.Integer) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); } }), cluster.getId()); }
private void updateConsoleAddressPartiallyOverridden(org.ovirt.engine.core.common.businessentities.Cluster cluster) { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { boolean isConsistent = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); setConsoleAddressPartiallyOverridden((!isConsistent)); } }); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.IsDisplayAddressConsistentInCluster, new org.ovirt.engine.core.common.queries.IdQueryParameters(cluster.getId()), query); }
private void updateAlerts() { if (getEntity().supportsGlusterService()) { org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel innerGeneralModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel) (model)); java.util.Map<java.lang.String, java.lang.String> serverMap = ((java.util.Map<java.lang.String, java.lang.String>) (result)); if (!(serverMap.isEmpty())) { innerGeneralModel.setHasNewGlusterHostsAlert(true); innerGeneralModel.setHasAnyAlert(true); } else { setHasNewGlusterHostsAlert(false); setHasAnyAlert(false); } } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getGlusterHostsNewlyAdded(_asyncQuery, getEntity().getId(), false); } else { setHasNewGlusterHostsAlert(false); setHasAnyAlert(false); } }
private void verifyLocalDataCenterNoCluster(final java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.StoragePool>> filteredDataCenters, final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = ((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (returnValue)); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(dataCenter.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } } localDataCenters.removeAll(localDataCenterWithCluster); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { filteredDataCenters.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(dataCenter)); } displayAddDataCenter(filteredDataCenters); } })); }
public void getClusterListByService(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, final boolean supportsVirtService, final boolean supportsGlusterService) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> list = getClusterByServiceList(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>) (source)), supportsVirtService, supportsGlusterService); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return list; } return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllClusters, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }
public void getClusterList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid dataCenterId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> list = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>) (source)); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return list; } return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetClustersByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId), aQuery); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ManageGlusterSwiftModel innerGlusterSwiftModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ManageGlusterSwiftModel) (model)); java.util.List<org.ovirt.engine.ui.uicommonweb.models.clusters.GlusterSwiftServiceModel> serviceList = getGroupedGlusterSwiftServices(((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService>) (returnValue))); innerGlusterSwiftModel.getHostServicesList().setItems(serviceList); innerGlusterSwiftModel.stopProgress(); org.ovirt.engine.ui.uicommonweb.UICommand command = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnManageGlusterSwift", this); innerGlusterSwiftModel.getCommands().add(command); command = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()); command.setIsCancel(true); innerGlusterSwiftModel.getCommands().add(command); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { deactivate(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); getModel().setRngDevice(rngDevice); } activate(); updateVirtioScsi(vmBase); }
private void showBrickAdvancedDetails() { final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getEntity(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { onShowBrickAdvancedDetails(volumeEntity); } }), volumeEntity.getClusterId()); }
public void getWANColorDepth(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.fromInt(((java.lang.Integer) (source))) : org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.depth16; } }; getConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.WANColorDepth, getDefaultConfigurationVersion()), aQuery); }
public void getVmListByClusterName(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, java.lang.String clusterName) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.VM>cast(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.IVdcQueryable>) (source))); return vms; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, new org.ovirt.engine.core.common.queries.SearchParameters(("Vms: cluster=" + clusterName), org.ovirt.engine.core.common.interfaces.SearchType.VM), aQuery); }
public void isVirtioScsiEnabledForVm(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid vmId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { return !(((java.util.List<?>) (source)).isEmpty()); } return false; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVirtioScsiControllers, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmId), aQuery); }
public void isTemplateNameUnique(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, java.lang.String templateName, org.ovirt.engine.core.compat.Guid datacenterId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return (source != null) && (!((java.lang.Boolean) (source))); } }; org.ovirt.engine.core.common.queries.NameQueryParameters params = new org.ovirt.engine.core.common.queries.NameQueryParameters(templateName); params.setDatacenterId(datacenterId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.IsVmTemlateWithSameNameExist, params, aQuery); }
public void initCache(org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel) { cacheConfigValues(new org.ovirt.engine.ui.frontend.AsyncQuery(loginModel, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { getDefaultConfigurationVersion(target); } })); initOsNames(); initOsDefaultIconIds(); initUniqueOsNames(); initLinuxOsTypes(); initWindowsOsTypes(); initDisplayTypes(); initBalloonSupportMap(); initNicHotplugSupportMap(); initDiskHotpluggableInterfacesMap(); initOsArchitecture(); initDefaultOSes(); initMigrationSupportMap(); initMemorySnapshotSupportMap(); initSuspendSupportMap(); initMemoryHotUnplugSupportMap(); initCustomPropertiesList(); initSoundDeviceSupportMap(); initMigrationPolicies(); initCpuMap(); }
public void getWANDisableEffects(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects>(); } java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects> res = new java.util.ArrayList<>(); java.lang.String fromDb = ((java.lang.String) (source)); for (java.lang.String value : fromDb.split(",")) { if (value == null) { continue; } java.lang.String trimmedValue = value.trim(); if ("".equals(trimmedValue)) { continue; } res.add(org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects.fromString(trimmedValue)); } return res; } }; getConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.WANDisableEffects, getDefaultConfigurationVersion()), aQuery); }
@java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { org.ovirt.engine.core.common.businessentities.Tags tag = ((org.ovirt.engine.core.common.businessentities.Tags) (source)); org.ovirt.engine.core.common.businessentities.Tags root = new org.ovirt.engine.core.common.businessentities.Tags(tag.getDescription(), tag.getParentId(), tag.getIsReadonly(), tag.getTagId(), tag.getTagName()); if ((tag.getChildren()) != null) { fillTagsRecursive(root, tag.getChildren()); } return root; } return new org.ovirt.engine.core.common.businessentities.Tags(); }
public void getSpiceUsbAutoShare(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return (source == null) || ((java.lang.Boolean) (source)); } }; getConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.SpiceUsbAutoShare, getDefaultConfigurationVersion()), aQuery); }
public void isAnyHostUpInCluster(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, java.lang.String clusterName) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if ((source != null) && (!(((java.util.List<?>) (source)).isEmpty()))) { return true; } return false; } }; getUpHostListByCluster(aQuery, clusterName, 1); }
public void getAAAProfilesEntriesList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.Collection<org.ovirt.engine.core.aaa.ProfileEntry>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.aaa.ProfileEntry>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAAAProfileList, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }
public void getRootTag(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { org.ovirt.engine.core.common.businessentities.Tags tag = ((org.ovirt.engine.core.common.businessentities.Tags) (source)); org.ovirt.engine.core.common.businessentities.Tags root = new org.ovirt.engine.core.common.businessentities.Tags(tag.getDescription(), tag.getParentId(), tag.getIsReadonly(), tag.getTagId(), tag.getTagName()); if ((tag.getChildren()) != null) { fillTagsRecursive(root, tag.getChildren()); } return root; } return new org.ovirt.engine.core.common.businessentities.Tags(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetRootTag, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }
public void getClusterNetworkList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid clusterId) { if ((aQuery.converterCallback) == null) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>(); } return source; } }; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworksByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), aQuery); }
@java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> list = getClusterByServiceList(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>) (source)), supportsVirtService, supportsGlusterService); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return list; } return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>(); }
public void getDataCenterByClusterServiceList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, boolean supportsVirtService, boolean supportsGlusterService) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>(); } final java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> storagePoolList = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>) (source)); java.util.Collections.sort(storagePoolList, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return source; } }; final org.ovirt.engine.core.common.queries.GetStoragePoolsByClusterServiceParameters parameters = new org.ovirt.engine.core.common.queries.GetStoragePoolsByClusterServiceParameters(); parameters.setSupportsVirtService(supportsVirtService); parameters.setSupportsGlusterService(supportsGlusterService); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByClusterService, parameters, aQuery); }
public void getGlusterSwiftServerServices(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid clusterId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? source : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServerServicesByClusterId, new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters(clusterId, org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT), aQuery); }
public void getGlusterHooks(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid clusterId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? source : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHooks, new org.ovirt.engine.core.common.queries.gluster.GlusterParameters(clusterId), aQuery); }
public void getAAANamespaces(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>) (source)) : new java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAvailableNamespaces, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }
public void getDataCenterById(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid dataCenterId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolById, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId).withoutRefresh(), aQuery); }
public void getRoleList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Role>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Role>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllRoles, new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters(), aQuery); }
private void getDefaultConfigurationVersion(java.lang.Object target) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(target, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { if (returnValue != null) { _defaultConfigurationVersion = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel = ((org.ovirt.engine.ui.uicommonweb.models.LoginModel) (model)); loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); } }); callback.setHandleFailure(true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetDefaultConfigurationVersion, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), callback); }
@java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects>(); } java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects> res = new java.util.ArrayList<>(); java.lang.String fromDb = ((java.lang.String) (source)); for (java.lang.String value : fromDb.split(",")) { if (value == null) { continue; } java.lang.String trimmedValue = value.trim(); if ("".equals(trimmedValue)) { continue; } res.add(org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects.fromString(trimmedValue)); } return res; }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); boolean succeeded = true; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (!(host.getClusterId().equals(hostClusterIdMap.get(host.getId())))) { succeeded = false; } } if (!succeeded) { guideModel.getWindow().stopProgress(); guideModel.cancel(); errorPopupManager.show(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hostChangeClusterTimeOut()); } else { activateHostsAfterClusterChange(guideModel, searchStr, activateVdsParameterList); } }
public void getDataCenterList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, boolean doRefresh) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>(); } return source; } }; org.ovirt.engine.core.common.queries.SearchParameters params = new org.ovirt.engine.core.common.queries.SearchParameters("DataCenter: sortby name", org.ovirt.engine.core.common.interfaces.SearchType.StoragePool); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, (doRefresh ? params : params.withoutRefresh()), aQuery); }
public void getGlusterHostsNewlyAdded(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid clusterId, boolean isFingerprintRequired) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAddedGlusterServers, new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); boolean succeeded = true; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if ((host.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { succeeded = false; } } guideModel.getWindow().stopProgress(); guideModel.cancel(); if (succeeded) { guideModel.postAction(); } else { errorPopupManager.show(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hostActivationTimeOut()); } }
public void getConfigurationValueBoolean(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.common.queries.ConfigurationValues configVal) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Boolean) (source)).booleanValue() : true; } }; getConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(configVal, getDefaultConfigurationVersion()), aQuery); }
@java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.fromInt(((java.lang.Integer) (source))) : org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.depth16; }
public void getGlusterHook(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid hookId, boolean includeServerHooks) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookById, new org.ovirt.engine.core.common.queries.gluster.GlusterHookQueryParameters(hookId, includeServerHooks), aQuery); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { spice.getOptions().setFullScreen(((java.lang.Boolean) (returnValue))); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { spice.getOptions().setUsbAutoShare(((java.lang.Boolean) (returnValue))); }
private void updateSpiceFullScreenDefault(final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigurationValueBoolean(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { spice.getOptions().setFullScreen(((java.lang.Boolean) (returnValue))); } }), spiceFullScreenConfigKey()); }
private void updateSpiceUsbAutoShare(final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getSpiceUsbAutoShare(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { spice.getOptions().setUsbAutoShare(((java.lang.Boolean) (returnValue))); } })); }
protected void checkVdsActivateSucceeded(final org.ovirt.engine.ui.uicommonweb.models.GuideModel guideModel, final java.lang.String searchStr) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, new org.ovirt.engine.core.common.queries.SearchParameters(searchStr, org.ovirt.engine.core.common.interfaces.SearchType.VDS), new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); boolean succeeded = true; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if ((host.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { succeeded = false; } } guideModel.getWindow().stopProgress(); guideModel.cancel(); if (succeeded) { guideModel.postAction(); } else { errorPopupManager.show(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hostActivationTimeOut()); } } })); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<java.lang.String> images = ((java.util.List<java.lang.String>) (returnValue)); final java.lang.String lastSelectedIso = getIsoImage().getSelectedItem(); getIsoImage().setItems(images); if (getIsoImage().getIsChangable()) { if ((lastSelectedIso != null) && (images.contains(lastSelectedIso))) { getIsoImage().setSelectedItem(lastSelectedIso); } else { getIsoImage().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(images)); } } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity> glusterHooks = ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity>) (returnValue)); setItems(glusterHooks); }
@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getGlusterHooks(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity> glusterHooks = ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity>) (returnValue)); setItems(glusterHooks); } }), getEntity().getId()); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.lang.String content = ((java.lang.String) (returnValue)); org.ovirt.engine.ui.uicommonweb.models.clusters.GlusterHookContentModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.GlusterHookContentModel) (model)); localModel.getContent().setEntity(content); if (content == null) { localModel.getContent().setIsAvailable(false); localModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentErrorGlusterHook()); } else if ((content.length()) == 0) { localModel.getContent().setIsAvailable(false); localModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentEmptyGlusterHook()); } localModel.stopProgress(); }
private void viewHook() { if ((getWindow()) != null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hookEntity = getSelectedItem(); if (hookEntity == null) { return; } org.ovirt.engine.ui.uicommonweb.models.clusters.GlusterHookContentModel contentModel = new org.ovirt.engine.ui.uicommonweb.models.clusters.GlusterHookContentModel(); contentModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentGlusterHookTitle()); contentModel.setHelpTag(HelpTag.view_gluster_hook); contentModel.setHashName("view_gluster_hook"); setWindow(contentModel); contentModel.startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getGlusterHookContent(new org.ovirt.engine.ui.frontend.AsyncQuery(contentModel, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.lang.String content = ((java.lang.String) (returnValue)); org.ovirt.engine.ui.uicommonweb.models.clusters.GlusterHookContentModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.GlusterHookContentModel) (model)); localModel.getContent().setEntity(content); if (content == null) { localModel.getContent().setIsAvailable(false); localModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentErrorGlusterHook()); } else if ((content.length()) == 0) { localModel.getContent().setIsAvailable(false); localModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentEmptyGlusterHook()); } localModel.stopProgress(); } }), hookEntity.getId(), null); org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()); command.setIsCancel(true); contentModel.getCommands().add(command); }
public void setDel(org.ovirt.engine.ui.frontend.INewAsyncCallback asyncCallback) { this.asyncCallback = asyncCallback; }
public org.ovirt.engine.ui.frontend.INewAsyncCallback getDel() { return asyncCallback; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { volumeSnapshotConfigModel.getClusterName().setEntity(((org.ovirt.engine.core.common.businessentities.Cluster) (returnValue)).getName()); }
@java.lang.Override public void onSuccess(java.lang.Object model, final java.lang.Object returnValue) { if ((getSystemTreeSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.Cluster selectedCluster = ((org.ovirt.engine.core.common.businessentities.Cluster) (getSystemTreeSelectedItem().getEntity())); clusterSnapshotConfigModel.getClusters().setItems(((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (returnValue)), selectedCluster); } else { if ((getSelectedItems()) != null) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getSelectedItems().get(0); if (volumeEntity != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue1) { clusterSnapshotConfigModel.getClusters().setItems(((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (returnValue)), ((org.ovirt.engine.core.common.businessentities.Cluster) (returnValue1))); } }), volumeEntity.getClusterId()); } } else { clusterSnapshotConfigModel.getClusters().setItems(((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (returnValue))); } } }
public void updateIsoList(boolean forceRefresh) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getIrsImageList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<java.lang.String> images = ((java.util.List<java.lang.String>) (returnValue)); final java.lang.String lastSelectedIso = getIsoImage().getSelectedItem(); getIsoImage().setItems(images); if (getIsoImage().getIsChangable()) { if ((lastSelectedIso != null) && (images.contains(lastSelectedIso))) { getIsoImage().setSelectedItem(lastSelectedIso); } else { getIsoImage().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(images)); } } } }), vm.getStoragePoolId(), forceRefresh); }
@java.lang.Override public void onSuccess(java.lang.Object outerObject, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog> newEvents = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog> currentEvents = ((java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog>) (getItems())); if (isDisplayEventsOnly()) { newEvents = new java.util.ArrayList(org.ovirt.engine.ui.uicommonweb.Linq.filterAudidLogsByExcludingSeverity(newEvents, AuditLogSeverity.ALERT)); } if (((!(newEvents.isEmpty())) && (currentEvents != null)) && ((currentEvents.isEmpty()) || (!(currentEvents.get(0).equals(newEvents.get(0)))))) { org.ovirt.engine.ui.frontend.communication.RefreshActiveModelEvent.fire(this, false); } this.setItems(newEvents); this.setLastEvent(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(newEvents)); }
private void discoverTargets() { if (!(validateDiscoverTargetFields())) { return; } org.ovirt.engine.core.common.businessentities.VDS host = getContainer().getHost().getSelectedItem(); org.ovirt.engine.core.common.businessentities.StorageServerConnections tempVar = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); tempVar.setConnection(getAddress().getEntity().trim()); tempVar.setPort(getPort().getEntity().trim()); tempVar.setStorageType(StorageType.ISCSI); tempVar.setUserName((getUseUserAuth().getEntity() ? getUserName().getEntity() : "")); tempVar.setPassword((getUseUserAuth().getEntity() ? getPassword().getEntity() : "")); org.ovirt.engine.core.common.queries.DiscoverSendTargetsQueryParameters parameters = new org.ovirt.engine.core.common.queries.DiscoverSendTargetsQueryParameters(host.getId(), tempVar); setMessage(null); final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase model = this; java.lang.Object target = ((getWidgetModel()) != null) ? getWidgetModel() : getContainer(); org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(target, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object result = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); model.postDiscoverTargetsInternal((result != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>) (result)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>())); } }, true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.DiscoverSendTargets, parameters, asyncQuery); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { if (returnValue != null) { _defaultConfigurationVersion = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel = ((org.ovirt.engine.ui.uicommonweb.models.LoginModel) (model)); loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { populateRoles(((java.util.List<org.ovirt.engine.core.common.businessentities.Role>) (result))); }
public void getLocalStorageHost(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, java.lang.String dataCenterName) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { for (org.ovirt.engine.core.common.businessentities.IVdcQueryable item : ((java.util.List<org.ovirt.engine.core.common.businessentities.IVdcQueryable>) (source))) { return item; } } return null; } }; org.ovirt.engine.core.common.queries.SearchParameters sp = new org.ovirt.engine.core.common.queries.SearchParameters(("hosts: datacenter=" + dataCenterName), org.ovirt.engine.core.common.interfaces.SearchType.VDS); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, sp, aQuery); }
public void getUserProfile(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetUserProfile, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { namespacesMap = ((java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>) (result)); populateProfiles(getProfileEntries()); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { setProfileEntries(((java.util.List<org.ovirt.engine.core.aaa.ProfileEntry>) (result))); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getAAANamespaces(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { namespacesMap = ((java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>) (result)); populateProfiles(getProfileEntries()); } })); }
private void doVolumeSearch() { org.ovirt.engine.ui.frontend.AsyncQuery volumeQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); volumeQuery.setModel(this); volumeQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { final org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel systemTreeModel = ((org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel) (model)); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>) (result)); systemTreeModel.setVolumeMap(new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>>()); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume : volumes) { org.ovirt.engine.core.compat.Guid key = volume.getClusterId(); if (!(systemTreeModel.getVolumeMap().containsKey(key))) { systemTreeModel.getVolumeMap().put(key, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>()); } java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> list = systemTreeModel.getVolumeMap().get(key); list.add(volume); } } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVolumeList(volumeQuery, null, false); }
private void doDataCenterSearch() { final org.ovirt.engine.ui.frontend.AsyncQuery dcQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); dcQuery.setModel(this); dcQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { final org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel systemTreeModel = ((org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel) (model)); systemTreeModel.setDataCenters(((java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>) (result))); doNetworksSearch(); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterList(dcQuery, false); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel systemTreeModel = ((org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel) (model)); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((java.util.List<org.ovirt.engine.core.common.businessentities.VDS>) (result)); systemTreeModel.setHostMap(new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>>()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { org.ovirt.engine.core.compat.Guid key = host.getClusterId(); if (!(systemTreeModel.getHostMap().containsKey(key))) { systemTreeModel.getHostMap().put(key, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> list = systemTreeModel.getHostMap().get(key); list.add(host); } }
private void doHostSearch() { org.ovirt.engine.ui.frontend.AsyncQuery hostQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); hostQuery.setModel(this); hostQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel systemTreeModel = ((org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel) (model)); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((java.util.List<org.ovirt.engine.core.common.businessentities.VDS>) (result)); systemTreeModel.setHostMap(new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>>()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { org.ovirt.engine.core.compat.Guid key = host.getClusterId(); if (!(systemTreeModel.getHostMap().containsKey(key))) { systemTreeModel.getHostMap().put(key, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> list = systemTreeModel.getHostMap().get(key); list.add(host); } } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostList(hostQuery, false); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { final org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel systemTreeModel = ((org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel) (model)); systemTreeModel.setDataCenters(((java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>) (result))); doNetworksSearch(); }
private void doClusterSearch() { org.ovirt.engine.ui.frontend.AsyncQuery clusterQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); clusterQuery.setModel(this); clusterQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel systemTreeModel = ((org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel) (model)); java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = ((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (result)); systemTreeModel.setClusterMap(new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>>()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if ((cluster.getStoragePoolId()) != null) { org.ovirt.engine.core.compat.Guid key = cluster.getStoragePoolId(); if (!(systemTreeModel.getClusterMap().containsKey(key))) { systemTreeModel.getClusterMap().put(key, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>()); } java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> list = systemTreeModel.getClusterMap().get(key); list.add(cluster); } } } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterList(clusterQuery, false); }
@java.lang.Override protected void syncSearch() { super.syncSearch(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getRootTag(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel tagListModel = ((org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel) (target)); org.ovirt.engine.ui.uicommonweb.models.tags.TagModel rootTag = tagListModel.tagToModel(((org.ovirt.engine.core.common.businessentities.Tags) (returnValue))); rootTag.getName().setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().rootTag()); rootTag.setType(TagModelType.Root); rootTag.setIsChangeable(false); tagListModel.setItems(new java.util.ArrayList(java.util.Arrays.asList(new org.ovirt.engine.ui.uicommonweb.models.tags.TagModel[]{ rootTag }))); } })); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object result = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); model.postDiscoverTargetsInternal((result != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>) (result)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>())); }
public void getGlusterHookContent(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid hookId, org.ovirt.engine.core.compat.Guid serverId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? source : ""; } }; org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters(hookId); parameters.setGlusterServerId(serverId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookContent, parameters, aQuery); }
public void isSoundcardEnabled(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid vmId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { return !(((java.util.List<?>) (source)).isEmpty()); } return false; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetSoundDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmId), aQuery); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { final org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel systemTreeModel = ((org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel) (model)); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>) (result)); systemTreeModel.setVolumeMap(new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>>()); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume : volumes) { org.ovirt.engine.core.compat.Guid key = volume.getClusterId(); if (!(systemTreeModel.getVolumeMap().containsKey(key))) { systemTreeModel.getVolumeMap().put(key, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>()); } java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> list = systemTreeModel.getVolumeMap().get(key); list.add(volume); } }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel systemTreeModel = ((org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel) (model)); java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = ((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (result)); systemTreeModel.setClusterMap(new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>>()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if ((cluster.getStoragePoolId()) != null) { org.ovirt.engine.core.compat.Guid key = cluster.getStoragePoolId(); if (!(systemTreeModel.getClusterMap().containsKey(key))) { systemTreeModel.getClusterMap().put(key, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>()); } java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> list = systemTreeModel.getClusterMap().get(key); list.add(cluster); } } }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { getDefaultConfigurationVersion(target); }
public void getAllowClusterWithVirtGlusterEnabled(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? source : java.lang.Boolean.TRUE; } }; getConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.AllowClusterWithVirtGlusterEnabled, getDefaultConfigurationVersion()), aQuery); }
private void initMigrationPolicies() { org.ovirt.engine.ui.frontend.AsyncQuery aQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { migrationPolicies = ((java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy>) (returnValue)); } }); aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object returnValue, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { if (returnValue == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.migration.MigrationPolicy>(); } java.util.Collections.sort(((java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy>) (returnValue)), new java.util.Comparator<org.ovirt.engine.core.common.migration.MigrationPolicy>() { @java.lang.Override public int compare(org.ovirt.engine.core.common.migration.MigrationPolicy m1, org.ovirt.engine.core.common.migration.MigrationPolicy m2) { if (NoMigrationPolicy.ID.equals(m1.getId())) { return -1; } return m1.getName().compareTo(m2.getName()); } }); return returnValue; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllMigrationPolicies, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }
public void selectHost() { final java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> clusters = new java.util.ArrayList<>(); clusters.add(getEntity()); final org.ovirt.engine.ui.uicommonweb.models.hosts.MoveHost model = new org.ovirt.engine.ui.uicommonweb.models.hosts.MoveHost(); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().selectHostTitle()); model.setHelpTag(HelpTag.select_host); model.setHashName("select_host"); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); boolean isMultiHostDC = dataCenter.isLocal(); if (isMultiHostDC) { model.setMultiSelection(false); } setWindow(model); model.getCluster().setItems(clusters); model.getCluster().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(clusters)); model.getCluster().setIsAvailable(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSelectHost", org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel.this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel.this); model.getCommands().add(tempVar2); } }), getEntity().getStoragePoolId()); }
@java.lang.Override public void onSuccess(java.lang.Object parenModel, java.lang.Object returnValue) { deactivate(); getModel().getMemoryBalloonDeviceEnabled().setEntity(((java.lang.Boolean) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); activate(); if (continueWithNext) { updateRngDevice(vmBase); } }

public static org.ovirt.engine.api.v3.types.V3VM addDisksLink(org.ovirt.engine.api.v3.types.V3VM vm) { if (vm == null) { return null; } org.ovirt.engine.api.restapi.invocation.Current current = org.ovirt.engine.api.restapi.invocation.CurrentManager.get(); java.lang.StringBuilder buffer = new java.lang.StringBuilder(); buffer.append(current.getPrefix()); if ((current.getVersionSource()) == (org.ovirt.engine.api.restapi.invocation.VersionSource.URL)) { buffer.append("/v"); buffer.append(current.getVersion()); } buffer.append(current.getPath()); if (!(current.getPath().contains(vm.getId()))) { buffer.append(vm.getId()); } buffer.append("/disks"); java.lang.String href = buffer.toString(); org.ovirt.engine.api.v3.types.V3Link link = new org.ovirt.engine.api.v3.types.V3Link(); link.setRel("disks"); link.setHref(href); vm.getLinks().add(link); return vm; }

public static org.ovirt.engine.api.v3.types.V3Template addDisksLink(org.ovirt.engine.api.v3.types.V3Template template) { if (template == null) { return null; } org.ovirt.engine.api.restapi.invocation.Current current = org.ovirt.engine.api.restapi.invocation.CurrentManager.get(); java.lang.StringBuilder buffer = new java.lang.StringBuilder(); buffer.append(current.getPrefix()); if ((current.getVersionSource()) == (org.ovirt.engine.api.restapi.invocation.VersionSource.URL)) { buffer.append("/v"); buffer.append(current.getVersion()); } buffer.append(current.getPath()); if (!(current.getPath().contains(template.getId()))) { buffer.append("/"); buffer.append(template.getId()); } buffer.append("/disks"); java.lang.String href = buffer.toString(); org.ovirt.engine.api.v3.types.V3Link link = new org.ovirt.engine.api.v3.types.V3Link(); link.setRel("disks"); link.setHref(href); template.getLinks().add(link); return template; }
protected boolean isDataOperationsBySpm(org.ovirt.engine.core.common.businessentities.StoragePool storagePool) { return !(org.ovirt.engine.core.common.FeatureSupported.dataOperationsByHSM(storagePool.getCompatibilityVersion())); }
@java.lang.Override protected void executeIrsBrokerCommand() { imageInfoReturn = org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.getIrsProxy().getVolumeInfo(org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.getParameters().getImageGroupId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.getParameters().getImageId().toString()); org.ovirt.engine.core.common.businessentities.storage.DiskImage di = null; try { proceedProxyReturnValue(); di = buildImageEntity(imageInfoReturn.getInfo()); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.printReturnValue(); } finally { org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.getVDSReturnValue().setSucceeded((di != null)); setReturnValue(di); } }
public void init() { org.ovirt.engine.ui.uicommonweb.ICommandTarget target = ((org.ovirt.engine.ui.uicommonweb.ICommandTarget) (getEntity())); org.ovirt.engine.ui.uicommonweb.UICommand actionCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("OnExecute", this); actionCommand.setTitle(constants.ok()); actionCommand.setIsDefault(true); getCommands().add(actionCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", target); cancelCommand.setTitle(constants.cancel()); cancelCommand.setIsCancel(true); getCommands().add(cancelCommand); }
protected void unlockVm() { org.ovirt.engine.core.bll.VmCommand.setVm(null); if ((org.ovirt.engine.core.bll.VmCommand.getVm()) != null) { if ((org.ovirt.engine.core.bll.VmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked)) { org.ovirt.engine.core.bll.VmHandler.unlockVm(org.ovirt.engine.core.bll.VmCommand.getVm(), org.ovirt.engine.core.bll.VmCommand.getCompensationContext()); } } else { setLoggingForCommand(); log.warn("VmCommand::EndVmCommand: Vm is null - not performing endAction on Vm"); } }
public void postUpdateHost(java.util.Collection<org.ovirt.engine.core.common.businessentities.VDS> hosts) { hosts = org.ovirt.engine.ui.uicommonweb.Linq.where(hosts, new org.ovirt.engine.ui.uicommonweb.Linq.HostStatusPredicate(org.ovirt.engine.core.common.businessentities.VDSStatus.Up)); org.ovirt.engine.core.common.businessentities.VDS oldSelectedItem = getHost().getSelectedItem(); org.ovirt.engine.core.common.businessentities.VDS selectedItem = null; if (((getStorage()) != null) && ((getStorage().getStatus()) != (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Maintenance))) { org.ovirt.engine.core.common.businessentities.VDS spm = getSPM(hosts); hosts = (spm != null) ? java.util.Collections.singletonList(spm) : java.util.Collections.<org.ovirt.engine.core.common.businessentities.VDS>emptyList(); } if (oldSelectedItem != null) { selectedItem = org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(hosts, new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate<>(oldSelectedItem.getId())); } if (selectedItem == null) { org.ovirt.engine.core.common.businessentities.VDS spm = getSPM(hosts); selectedItem = (spm == null) ? org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(hosts) : spm; } getHost().setItems(hosts, selectedItem); }
protected void storageType_SelectedItemChanged() { updateCurrentStorageItem(); if ((getCurrentStorageItem()) != null) { updateFormat(); updateHost(); } updateWipeAfterDelete(); }
public org.ovirt.engine.core.common.businessentities.storage.VolumeType getTemplateVolumeType(org.ovirt.engine.core.common.businessentities.storage.VolumeFormat volumeFormat, org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { switch (volumeFormat) { case COW : return org.ovirt.engine.core.common.businessentities.storage.VolumeType.Sparse; case RAW : default : return storageType.isFileDomain() ? org.ovirt.engine.core.common.businessentities.storage.VolumeType.Sparse : org.ovirt.engine.core.common.businessentities.storage.VolumeType.Preallocated; } }
private void updateImageToDestinationDomainMap() { if ((disks) == null) { return; } for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : disks) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = diskModel.getStorageDomain().getSelectedItem(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskModel.getDisk())); diskImage.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(storageDomain.getId()))); diskImage.setDiskAlias(diskModel.getAlias().getEntity()); org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile = diskModel.getDiskProfile().getSelectedItem(); diskImage.setDiskProfileId((diskProfile != null ? diskProfile.getId() : null)); if ((diskModel.getQuota().getSelectedItem()) != null) { diskImage.setQuotaId(diskModel.getQuota().getSelectedItem().getId()); } if (diskModel.getVolumeFormat().getIsAvailable()) { org.ovirt.engine.core.common.businessentities.storage.VolumeFormat volumeFormat = diskModel.getVolumeFormat().getSelectedItem(); diskImage.setVolumeFormat(volumeFormat); diskImage.setVolumeType(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getTemplateVolumeType(volumeFormat, storageDomain.getStorageType())); } else if (diskModel.getVolumeType().getIsAvailable()) { org.ovirt.engine.core.common.businessentities.storage.VolumeType volumeType = diskModel.getVolumeType().getSelectedItem(); diskImage.setVolumeType(volumeType); diskImage.setVolumeFormat(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDiskVolumeFormat(volumeType, storageDomain.getStorageType())); } imageToDestinationDomainMap.put(diskImage.getId(), diskImage); } }
public boolean flush() { if (validate()) { diskModel.flush(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDiskModel().getDisk())); diskImage.setVolumeFormat(getVolumeFormat().getSelectedItem()); diskImage.setActualSizeInBytes(getImageSize()); diskImage.setVolumeType(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getTemplateVolumeType(getVolumeFormat().getSelectedItem(), getDiskModel().getStorageDomain().getSelectedItem().getStorageType())); return true; } else { setIsValid(false); } return false; }

java.lang.String AFFINITY_GROUP_NAME_TOO_LONG();

@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { importGlusterExplanationLabel.setVisible(((object.getEnableGlusterService().getEntity()) && (object.getIsNew()))); }

@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { refreshAdditionalClusterFeaturesList(); if ((!(getAllowClusterWithVirtGlusterEnabled())) && (getEnableGlusterService().getEntity())) { getEnableOvirtService().setEntity(java.lang.Boolean.FALSE); } if (((!isEdit) && ((getEnableGlusterService().getEntity()) != null)) && (getEnableGlusterService().getEntity())) { getIsImportGlusterConfiguration().setIsAvailable(true); getGlusterHostAddress().setIsAvailable(true); getGlusterHostFingerprint().setIsAvailable(true); getGlusterHostPassword().setIsAvailable(true); } else { getIsImportGlusterConfiguration().setIsAvailable(false); getIsImportGlusterConfiguration().setEntity(false); getGlusterHostAddress().setIsAvailable(false); getGlusterHostFingerprint().setIsAvailable(false); getGlusterHostPassword().setIsAvailable(false); } if (((getEnableGlusterService().getEntity()) != null) && (getEnableGlusterService().getEntity())) { getEnableTrustedService().setEntity(false); getEnableTrustedService().setIsChangeable(false); } else { if (((getEnableOvirtService().getEntity()) != null) && (getEnableOvirtService().getEntity())) { getEnableTrustedService().setIsChangeable(true); } else { getEnableTrustedService().setIsChangeable(false); } } getGlusterTunedProfile().setIsAvailable(getEnableGlusterService().getEntity()); if (getEnableGlusterService().getEntity()) { initTunedProfiles(); } }
public static org.ovirt.engine.sdk4.ConnectionBuilder connection() { java.lang.Class<? extends org.ovirt.engine.sdk4.ConnectionBuilder> clazz = null; try { clazz = ((java.lang.Class<org.ovirt.engine.sdk4.ConnectionBuilder>) (java.lang.Class.forName("org.ovirt.engine.sdk4.internal.ConnectionBuilder45"))); } catch (java.lang.ClassNotFoundException ex) { try { clazz = ((java.lang.Class<org.ovirt.engine.sdk4.ConnectionBuilder>) (java.lang.Class.forName("org.ovirt.engine.sdk4.internal.ConnectionBuilder42"))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.Error("No connection implementation found", e); } } try { return clazz.newInstance(); } catch (java.lang.Exception e) { throw new java.lang.Error("Failed to initialize connection implementation", e); } }
boolean validatePluginAction(java.lang.String pluginName) { org.ovirt.engine.ui.webadmin.plugin.Plugin plugin = getPlugin(pluginName); return (plugin != null) && ((plugin.isInState(PluginState.INITIALIZING)) || (plugin.isInState(PluginState.IN_USE))); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.StoragePool pool) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("description", pool.getdescription()).addValue("free_text_comment", pool.getComment()).addValue("id", pool.getId()).addValue("name", pool.getName()).addValue("is_local", pool.isLocal()).addValue("status", pool.getStatus()).addValue("master_domain_version", pool.getMasterDomainVersion()).addValue("spm_vds_id", pool.getSpmVdsId()).addValue("quota_enforcement_type", pool.getQuotaEnforcementType()).addValue("compatibility_version", pool.getCompatibilityVersion()); getCallsHandler().executeModification("Insertstorage_pool", parameterSource); }




private org.ovirt.engine.core.common.businessentities.Quota getQuotaMetaDataFromResultSet(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.Quota entity = new org.ovirt.engine.core.common.businessentities.Quota(); entity.setId(getGuidDefaultEmpty(rs, "quota_id")); entity.setStoragePoolId(getGuidDefaultEmpty(rs, "storage_pool_id")); entity.setStoragePoolName(rs.getString("storage_pool_name")); entity.setQuotaName(((java.lang.String) (rs.getObject("quota_name")))); entity.setDescription(((java.lang.String) (rs.getObject("description")))); entity.setThresholdClusterPercentage(((java.lang.Integer) (rs.getObject("threshold_cluster_percentage")))); entity.setThresholdStoragePercentage(((java.lang.Integer) (rs.getObject("threshold_storage_percentage")))); entity.setGraceClusterPercentage(((java.lang.Integer) (rs.getObject("grace_cluster_percentage")))); entity.setGraceStoragePercentage(((java.lang.Integer) (rs.getObject("grace_storage_percentage")))); entity.setQuotaEnforcementType(org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type"))); return entity; }
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.StoragePool pool) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("description", pool.getdescription()).addValue("free_text_comment", pool.getComment()).addValue("id", pool.getId()).addValue("name", pool.getName()).addValue("status", pool.getStatus()).addValue("is_local", pool.isLocal()).addValue("storage_pool_format_type", pool.getStoragePoolFormatType()).addValue("master_domain_version", pool.getMasterDomainVersion()).addValue("spm_vds_id", pool.getSpmVdsId()).addValue("compatibility_version", pool.getCompatibilityVersion()).addValue("quota_enforcement_type", pool.getQuotaEnforcementType().getValue()); getCallsHandler().executeModification("Updatestorage_pool", parameterSource); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.StoragePool mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.StoragePool entity = new org.ovirt.engine.core.common.businessentities.StoragePool(); entity.setdescription(rs.getString("description")); entity.setComment(rs.getString("free_text_comment")); entity.setId(getGuidDefaultEmpty(rs, "id")); entity.setName(rs.getString("name")); entity.setIsLocal(rs.getBoolean("is_local")); entity.setStatus(org.ovirt.engine.core.common.businessentities.StoragePoolStatus.forValue(rs.getInt("status"))); entity.setMasterDomainVersion(rs.getInt("master_domain_version")); entity.setSpmVdsId(getGuid(rs, "spm_vds_id")); entity.setCompatibilityVersion(new org.ovirt.engine.core.compat.Version(rs.getString("compatibility_version"))); entity.setQuotaEnforcementType(org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type"))); entity.setStoragePoolFormatType(org.ovirt.engine.core.common.businessentities.StorageFormatType.forValue(rs.getString("storage_pool_format_type"))); return entity; }
@java.lang.Override public void onSuccess(java.lang.Object returnValue) { final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool a : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>) (returnValue))) { if ((a.getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Up)) { dataCenters.add(a); } } if (dataCenters.isEmpty()) { getDataCenters().setIsChangeable(false); getImportSources().setIsChangeable(false); setError(constants.notAvailableWithNoUpDC()); stopProgress(); return; } java.util.Collections.sort(dataCenters, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); this.dataCenters.setItems(dataCenters); }
public void getVolumeList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>> aQuery, java.lang.String clusterName, boolean doRefresh) { if (((org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.getUiMode().getValue()) & (ApplicationMode.GlusterOnly.getValue())) == 0) { aQuery.asyncCallback.onSuccess(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>()); return; } aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter(); org.ovirt.engine.core.common.queries.SearchParameters searchParameters; searchParameters = (clusterName == null) ? new org.ovirt.engine.core.common.queries.SearchParameters("Volumes:", org.ovirt.engine.core.common.interfaces.SearchType.GlusterVolume) : new org.ovirt.engine.core.common.queries.SearchParameters(("Volumes: cluster.name=" + clusterName), org.ovirt.engine.core.common.interfaces.SearchType.GlusterVolume); searchParameters.setMaxCount(9999); if (!doRefresh) { searchParameters.withoutRefresh(); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery); }
public void getMaxSpmPriority(AsyncQuery<java.lang.Integer> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter(0); aQuery.asyncCallback.onSuccess(10); }
public <T> void getConfigFromCache(org.ovirt.engine.core.common.queries.GetConfigurationValueParameters parameters, AsyncQuery<T> aQuery) { final org.ovirt.engine.core.compat.KeyValuePairCompat<org.ovirt.engine.core.common.queries.ConfigurationValues, java.lang.String> config_key = new org.ovirt.engine.core.compat.KeyValuePairCompat(parameters.getConfigValue(), parameters.getVersion()); T returnValue = null; if (cachedConfigValues.containsKey(config_key)) { returnValue = ((T) (cachedConfigValues.get(config_key))); } else if (cachedConfigValuesPreConvert.containsKey(config_key)) { returnValue = ((T) (cachedConfigValuesPreConvert.get(config_key))); if ((aQuery.converterCallback) != null) { returnValue = aQuery.converterCallback.convert(returnValue); } if (returnValue != null) { cachedConfigValues.put(config_key, returnValue); } } aQuery.asyncCallback.onSuccess(returnValue); }
public void getDefaultSpmPriority(AsyncQuery<java.lang.Integer> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter(0); aQuery.asyncCallback.onSuccess(5); }



private org.ovirt.engine.core.common.action.VdcActionParametersBase getAddParameters(org.ovirt.engine.api.model.DiskAttachment attachment, org.ovirt.engine.core.common.businessentities.storage.Disk entity, org.ovirt.engine.api.model.Disk disk) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = map(attachment); dve.getId().setVmId(vmId); org.ovirt.engine.core.common.action.AddDiskParameters parameters = new org.ovirt.engine.core.common.action.AddDiskParameters(dve, entity); org.ovirt.engine.core.compat.Guid storageDomainId = getStorageDomainId(disk); if (storageDomainId != null) { parameters.setStorageDomainId(storageDomainId); } if (attachment.isSetActive()) { parameters.setPlugDiskToVm(attachment.isActive()); } if ((disk.isSetLunStorage()) && (disk.getLunStorage().isSetHost())) { parameters.setVdsId(getHostId(disk.getLunStorage().getHost())); } return parameters; }
protected javax.ws.rs.core.Response attachDiskToVm(org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource resource, org.ovirt.engine.api.model.DiskAttachment attachment, org.ovirt.engine.api.restapi.resource.IResolver entityResolver) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(attachment.getDisk().getId()); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = map(attachment); dve.getId().setVmId(vmId); dve.getId().setDeviceId(diskId); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve); org.ovirt.engine.api.model.Disk disk = attachment.getDisk(); boolean isDiskActive = false; if (attachment.isSetActive()) { isDiskActive = org.apache.commons.lang.BooleanUtils.toBoolean(attachment.isActive()); } params.setPlugUnPlug(isDiskActive); boolean isDiskReadOnly = false; if (disk.isSetReadOnly()) { isDiskReadOnly = org.apache.commons.lang.BooleanUtils.toBoolean(disk.isReadOnly()); } params.setReadOnly(isDiskReadOnly); if (disk.isSetSnapshot()) { validateParameters(disk, "snapshot.id"); params.setSnapshotId(asGuid(disk.getSnapshot().getId())); } return resource.performCreate(VdcActionType.AttachDiskToVm, params, entityResolver); }
@java.lang.Override protected void selectedItemsChanged() { super.selectedItemsChanged(); updateActionAvailability(); }
public void syncSearch(org.ovirt.engine.core.common.queries.VdcQueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase) { org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { setItems(((java.util.Collection<T>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue()))); } }; vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, vdcQueryParametersBase, _asyncQuery); setIsQueryFirstTime(false); }
protected void createJob(org.ovirt.engine.core.common.action.VdcActionType actionType, boolean isExternal) { org.ovirt.engine.core.common.job.Job job = org.ovirt.engine.core.bll.job.ExecutionHandler.createJob(actionType, this); job.setDescription(org.ovirt.engine.core.bll.AddJobCommand.getParameters().getDescription()); job.setAutoCleared(org.ovirt.engine.core.bll.AddJobCommand.getParameters().isAutoCleared()); org.ovirt.engine.core.compat.Guid id = job.getId(); job.setExternal(isExternal); org.ovirt.engine.core.bll.job.JobRepositoryFactory.getJobRepository().saveJob(job); if ((getJobDao().get(id)) != null) { setActionReturnValue(id); org.ovirt.engine.core.bll.AddJobCommand.setSucceeded(true); } else { org.ovirt.engine.core.bll.AddJobCommand.setSucceeded(false); } }
public static org.ovirt.engine.core.common.action.VdcReturnValueBase evaluateCorrelationId(org.ovirt.engine.core.common.action.VdcActionParametersBase parameters) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = null; java.lang.String correlationId = parameters.getCorrelationId(); if (org.apache.commons.lang.StringUtils.isEmpty(correlationId)) { correlationId = org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId(); if (org.apache.commons.lang.StringUtils.isEmpty(correlationId)) { correlationId = org.ovirt.engine.core.utils.log.LoggedUtils.getObjectId(parameters); } parameters.setCorrelationId(correlationId); } else { java.util.List<java.lang.String> messages = org.ovirt.engine.core.common.utils.ValidationUtils.validateInputs(org.ovirt.engine.core.bll.job.ExecutionHandler.validationGroups, parameters); if (!(messages.isEmpty())) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnErrorValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnErrorValue.setValid(false); returnErrorValue.getValidationMessages().addAll(messages); return returnErrorValue; } } return returnValue; }



@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (getOkCommand().equals(command)) { onUpload(); } }
public void onUpload() { if (flush()) { if ((getProgress()) != null) { return; } if (!(isResumeUpload)) { initiateNewUpload(); } else { initiateResumeUpload(); } } }
public boolean flush() { if (validate()) { diskModel.flush(); ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDiskModel().getDisk())).setVolumeFormat(getVolumeFormat().getSelectedItem()); ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDiskModel().getDisk())).setActualSizeInBytes(getImageSize()); return true; } else { setIsValid(false); } return false; }
private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus pollStorageJob(org.ovirt.engine.core.compat.Guid jobId) { return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.done; }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return pairOf(null, createVmInternalData()); }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return pairOf(createDbVm(), null); }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createHAThatShutdownAbnormally() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); pair.getFirst().setAutoStartup(true); setPairStatuses(pair, VMStatus.Up, VMStatus.Down); pair.getSecond().getVmDynamic().setExitStatus(VmExitStatus.Error); return pair; }
private void addClientIpChanged(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair) { pair.getFirst().setClientIp("1.1.1.1"); pair.getSecond().getVmDynamic().setClientIp("2.2.2.2"); }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createStatusChangedToUp(); }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createHANotRunningAndUknown() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), null); pair.getFirst().setAutoStartup(true); pair.getFirst().setStatus(VMStatus.Unknown); return pair; }
private void addWatchDogEvents(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair) { pair.getFirst().getDynamicData().setLastWatchdogEvent(java.lang.Long.MIN_VALUE); pair.getSecond().getVmDynamic().setLastWatchdogEvent(java.lang.Long.MAX_VALUE); }
private void setDstHost(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair) { pair.getFirst().setMigratingToVds(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs.DST_HOST_ID); }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createPair() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), createVmInternalData()); addWatchDogEvents(pair); addClientIpChanged(pair); return pair; }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createStatusChangedToDown() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.Up, VMStatus.Down); pair.getSecond().getVmDynamic().setExitStatus(VmExitStatus.Normal); return pair; }
@org.junit.experimental.theories.Theory public void updateRepository_HA_VM_DOWN(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))); assumeTrue(data.dbVm().isAutoStartup()); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); vmAnalyzer.analyze(); assertEquals(data.dbVm().getDynamicData(), vmAnalyzer.getVmDynamicToSave()); assertNotNull(vmAnalyzer.getVmStatisticsToSave()); assertFalse(vmAnalyzer.isRerun()); assertTrue(vmAnalyzer.isAutoVmToRun()); assertNull(data.dbVm().getMigratingToVds()); }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createMigrationDone() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.MigratingFrom, VMStatus.Down); pair.getSecond().getVmDynamic().setExitStatus(VmExitStatus.Normal); setDstHost(pair); return pair; }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createMigratingFrom(); }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), createVmInternalData()); pair.getSecond().getVmDynamic().setStatus(VMStatus.Up); pair.getSecond().getVmDynamic().setRunOnVds(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs.DST_HOST_ID); return pair; }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createMigrationDone(); }
org.ovirt.engine.core.common.businessentities.VM dbVm() { return pair.getFirst(); }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createHAThatShutdownAbnormally(); }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createStatusChangedToUp() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.Down, VMStatus.Up); return pair; }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createStatusChangedToDown(); }
abstract org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build();
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createMigrationFailed() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.MigratingFrom, VMStatus.Up); setDstHost(pair); return pair; }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createMigratingFrom() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.MigratingFrom, VMStatus.MigratingFrom); setDstHost(pair); return pair; }
private void stubCalls(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { when(resourceManager.runVdsCommand(eq(VDSCommandType.List), any(org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase.class))).thenReturn(getVdsReturnValue(data.vdsmVm())); if ((data.dbVm()) != null) { when(vmDao.getAllRunningByVds(VmTestPairs.SRC_HOST_ID)).thenReturn(java.util.Collections.singletonMap(data.dbVm().getId(), data.dbVm())); } if ((data.vdsmVm()) != null) { when(resourceManager.runVdsCommand(eq(VDSCommandType.GetVmStats), any(org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase.class))).thenReturn(getStatsReturnValue(data.vdsmVm())); } }
@org.junit.experimental.theories.Theory public void updateRepository_MIGRATION_FROM_TO_UP(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))); vmAnalyzer.analyze(); verify(resourceManager, times(1)).removeVmFromDownVms(VmTestPairs.SRC_HOST_ID, data.vdsmVm().getVmDynamic().getId()); assertEquals(data.dbVm().getDynamicData(), vmAnalyzer.getVmDynamicToSave()); assertEquals(VmTestPairs.SRC_HOST_ID, data.dbVm().getRunOnVds()); assertTrue(vmAnalyzer.isRerun()); assertNull(data.dbVm().getMigratingToVds()); }
@org.junit.experimental.theories.Theory public void updateRepository_MIGRATION_FROM(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, true); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); verify(resourceManager, never()).internalSetVmStatus(data.dbVm().getDynamicData(), VMStatus.MigratingTo); }
@org.junit.experimental.theories.Theory public void proceedDownVmsNormalExistReason(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); assumeTrue(((data.vdsmVm().getVmDynamic().getExitStatus()) == (org.ovirt.engine.core.common.businessentities.VmExitStatus.Normal))); vmAnalyzer.analyze(); verify(auditLogDirector, atLeastOnce()).log(loggableCaptor.capture(), logTypeCaptor.capture()); verify(resourceManager).removeAsyncRunningVm(data.dbVm().getId()); verify(vmAnalyzer).runVdsCommand(vdsCommandTypeCaptor.capture(), vdsParamsCaptor.capture()); assertEquals(data.dbVm().getDynamicData(), vmAnalyzer.getVmDynamicToSave()); assertTrue(logTypeCaptor.getAllValues().contains(AuditLogType.VM_DOWN)); assertEquals(VDSCommandType.Destroy, vdsCommandTypeCaptor.getValue()); assertEquals(vdsParamsCaptor.getValue().getClass(), org.ovirt.engine.core.common.vdscommands.DestroyVmVDSCommandParameters.class); }
@org.junit.experimental.theories.Theory public void proceedDownVmsErrorExitReason(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); assumeTrue(((data.vdsmVm().getVmDynamic().getExitStatus()) != (org.ovirt.engine.core.common.businessentities.VmExitStatus.Normal))); vmAnalyzer.analyze(); verify(auditLogDirector, atLeastOnce()).log(loggableCaptor.capture(), logTypeCaptor.capture()); assertEquals(data.dbVm().getDynamicData(), vmAnalyzer.getVmDynamicToSave()); }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createMigratingTo(); }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createMigratingTo() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.MigratingFrom, VMStatus.MigratingTo); setDstHost(pair); return pair; }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createMigrationFailed(); }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), createVmInternalData()); pair.getSecond().getVmDynamic().setStatus(VMStatus.MigratingTo); pair.getSecond().getVmDynamic().setRunOnVds(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs.DST_HOST_ID); return pair; }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createHANotRunningAndUknown(); }
org.ovirt.engine.core.common.businessentities.VM createDbVm() { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setDynamicData(new org.ovirt.engine.core.common.businessentities.VmDynamic()); vm.setId(id); vm.setName(name()); vm.setRunOnVds(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs.SRC_HOST_ID); return vm; }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pairOf(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vit) { return new org.ovirt.engine.core.common.utils.Pair(vm, vit); }
@org.junit.experimental.theories.Theory public void proceedDownVmsNormalExistReason_MIGRATION_HANDOVER(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); assumeTrue(((data.vdsmVm().getVmDynamic().getExitStatus()) == (org.ovirt.engine.core.common.businessentities.VmExitStatus.Normal))); vmAnalyzer.analyze(); verify(resourceManager, never()).removeAsyncRunningVm(data.dbVm().getId()); verify(vmAnalyzer).runVdsCommand(vdsCommandTypeCaptor.capture(), vdsParamsCaptor.capture()); assertEquals(data.dbVm().getDynamicData(), vmAnalyzer.getVmDynamicToSave()); assertEquals(VDSCommandType.Destroy, vdsCommandTypeCaptor.getValue()); assertEquals(org.ovirt.engine.core.common.vdscommands.DestroyVmVDSCommandParameters.class, vdsParamsCaptor.getValue().getClass()); }
private void afterMigrationFrom(org.ovirt.engine.core.common.businessentities.VmDynamic runningVm, org.ovirt.engine.core.common.businessentities.VM vmToUpdate) { org.ovirt.engine.core.common.businessentities.VMStatus oldVmStatus = vmToUpdate.getStatus(); org.ovirt.engine.core.common.businessentities.VMStatus currentVmStatus = runningVm.getStatus(); if (((oldVmStatus == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) && (currentVmStatus != (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))) && (currentVmStatus.isRunning())) { rerun = true; org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer.log.info("Adding VM '{}'({}) to re-run list", vmToUpdate.getId(), vmToUpdate.getName()); vmToUpdate.setMigratingToVds(null); vmToUpdate.setMigrationProgressPercent(0); } }
@org.junit.experimental.theories.Theory public void updateRepository_MIGRATION_FROM_TO_DOWN(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, true); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); verify(resourceManager, times(1)).internalSetVmStatus(data.dbVm(), VMStatus.MigratingTo); assertEquals(data.dbVm().getDynamicData(), vmAnalyzer.getVmDynamicToSave()); assertEquals(VmTestPairs.DST_HOST_ID, data.dbVm().getRunOnVds()); }
private void setPairStatuses(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair, org.ovirt.engine.core.common.businessentities.VMStatus dbStatus, org.ovirt.engine.core.common.businessentities.VMStatus vdsmStatus) { pair.getFirst().setStatus(dbStatus); pair.getSecond().getVmDynamic().setStatus(vdsmStatus); }
private void loadVMsFromExternalProvider(final org.ovirt.engine.core.common.businessentities.OriginType type, java.lang.String uri, java.lang.String username, java.lang.String password, org.ovirt.engine.core.compat.Guid proxyId) { startProgress(); org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { if (returnValue instanceof org.ovirt.engine.core.common.queries.VdcQueryReturnValue) { setError(messages.providerFailure()); stopProgress(); } else { java.util.List<org.ovirt.engine.core.common.businessentities.VM> remoteVms = ((java.util.List<org.ovirt.engine.core.common.businessentities.VM>) (returnValue)); java.util.List<org.ovirt.engine.core.common.businessentities.VM> remoteDownVms = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : remoteVms) { if (vm.isDown()) { remoteDownVms.add(vm); } } if ((remoteVms.size()) != (remoteDownVms.size())) { setWarning(constants.runningVmsWereFilteredOnImportVm()); } updateVms(remoteDownVms); } } }); query.setHandleFailure(true); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmsFromExternalServer(query, getDataCenters().getSelectedItem().getId(), proxyId, uri, username, password, type); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getExternalVmList(java.lang.String uri, java.lang.String username, java.lang.String password) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.getExternalVMs").withParameter("uri", uri).withParameter("username", username).withParameter("password", password).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("vmList").withResponseType(java.lang.Object[].class); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc(response); }
private void onConfigureVmsToImport() { final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel importVmsModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel) (org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getWindow())); if (importVmsModel == null) { return; } if (!(importVmsModel.validateArchitectures())) { return; } final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel model = importVmsModel.getSpecificImportModel(); org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.setWindow(null); setWindow(model); }
public void getVmsFromExternalServer(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.compat.Guid vdsId, java.lang.String url, java.lang.String username, java.lang.String password, org.ovirt.engine.core.common.businessentities.OriginType originType) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>(); } return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVmsFromExternalProvider, new org.ovirt.engine.core.common.queries.GetVmsFromExternalProviderQueryParameters(url, username, password, originType, vdsId, dataCenterId), aQuery); }

private org.ovirt.engine.core.common.vdscommands.GetVmsFromExternalProviderParameters buildGetRemoteVmsInfoParameters() { return new org.ovirt.engine.core.common.vdscommands.GetVmsFromExternalProviderParameters(getProxyHostId(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getUrl(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getUsername(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getPassword(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getOriginType()); }
private void logFailureToGetVms() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("URL", org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getUrl()); auditLogDirector.log(logable, AuditLogType.IMPORTEXPORT_GET_EXTERNAL_VMS_INFO_FAILED); }






@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("url", url).append("username", username).append("originType", originType); }






@java.lang.Override protected void executeVdsBrokerCommand() { vmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFromExternalProviderVDSCommand.getBroker().getExternalVmList(org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFromExternalProviderVDSCommand.getParameters().getUrl(), org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFromExternalProviderVDSCommand.getParameters().getUsername(), org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFromExternalProviderVDSCommand.getParameters().getPassword()); org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFromExternalProviderVDSCommand.proceedProxyReturnValue(); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<>(); for (java.util.Map<java.lang.String, java.lang.Object> map : vmListReturn.vmList) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmsDataFromExternalProvider(map); if (vm != null) { vm.setOrigin(org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFromExternalProviderVDSCommand.getParameters().getOriginType()); vms.add(vm); } } setReturnValue(vms); }

private void clearAsyncTasksWithOutVdsmId() { if (!(getReturnValue().getTaskPlaceHolderIdList().isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { for (org.ovirt.engine.core.compat.Guid asyncTaskId : getReturnValue().getTaskPlaceHolderIdList()) { org.ovirt.engine.core.common.businessentities.AsyncTask task = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getAsyncTaskFromDb(asyncTaskId); if ((task != null) && (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(task.getVdsmTaskId()))) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeTaskFromDbByTaskId(task.getTaskId()); } } return null; }); } }
public org.ovirt.engine.core.common.action.VdcReturnValueBase executeAction() { getSessionDataContainer().updateSessionLastActiveTime(getParameters().getSessionId()); determineExecutionReason(); actionState = CommandActionState.EXECUTE; java.lang.String tempVar = getDescription(); getReturnValue().setDescription((tempVar != null ? tempVar : getReturnValue().getDescription())); setActionMessageParameters(); org.ovirt.engine.core.common.job.Step validatingStep = null; boolean actionAllowed; boolean isExternal = ((this.getParameters().getJobId()) != null) || ((this.getParameters().getStepId()) != null); if (!isExternal) { validatingStep = org.ovirt.engine.core.bll.job.ExecutionHandler.addStep(getExecutionContext(), StepEnum.VALIDATING, null); } try { if (parentHasCallback()) { persistCommand(getParameters().getParentCommand()); } actionAllowed = (getReturnValue().isValid()) || (internalValidate()); if (!isExternal) { org.ovirt.engine.core.bll.job.ExecutionHandler.endStep(getExecutionContext(), validatingStep, actionAllowed); } if (actionAllowed) { execute(); } else { getReturnValue().setValid(false); } } finally { updateCommandIfNeeded(); freeLockExecute(); clearAsyncTasksWithOutVdsmId(); } return getReturnValue(); }
private void updateTaskStatuses(java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus>> poolsAllTasksMap) { for (org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task : _tasks.values()) { if (task.getShouldPoll()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus> asyncTasksForPoolMap = poolsAllTasksMap.get(task.getStoragePoolID()); if (asyncTasksForPoolMap != null) { org.ovirt.engine.core.common.businessentities.AsyncTaskStatus cachedAsyncTaskStatus = asyncTasksForPoolMap.get(task.getVdsmTaskId()); task.updateTask(cachedAsyncTaskStatus); } } } }


@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmPool mapRow(final java.sql.ResultSet rs, final int rowNum) throws java.sql.SQLException { final org.ovirt.engine.core.common.businessentities.VmPool entity = new org.ovirt.engine.core.common.businessentities.VmPool(); entity.setVmPoolDescription(rs.getString("vm_pool_description")); entity.setVmPoolId(getGuidDefaultEmpty(rs, "vm_pool_id")); entity.setComment(rs.getString("vm_pool_comment")); entity.setName(rs.getString("vm_pool_name")); entity.setVmPoolType(org.ovirt.engine.core.common.businessentities.VmPoolType.forValue(rs.getInt("vm_pool_type"))); entity.setStateful(rs.getBoolean("stateful")); entity.setParameters(rs.getString("parameters")); entity.setPrestartedVms(rs.getInt("prestarted_vms")); entity.setClusterId(getGuidDefaultEmpty(rs, "cluster_id")); entity.setClusterName(rs.getString("cluster_name")); entity.setMaxAssignedVmsPerUser(rs.getInt("max_assigned_vms_per_user")); entity.setSpiceProxy(rs.getString("spice_proxy")); entity.setBeingDestroyed(rs.getBoolean("is_being_destroyed")); return entity; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmPool mapRow(final java.sql.ResultSet rs, final int rowNum) throws java.sql.SQLException { final org.ovirt.engine.core.common.businessentities.VmPool entity = new org.ovirt.engine.core.common.businessentities.VmPool(); entity.setVmPoolDescription(rs.getString("vm_pool_description")); entity.setVmPoolId(getGuidDefaultEmpty(rs, "vm_pool_id")); entity.setComment(rs.getString("vm_pool_comment")); entity.setName(rs.getString("vm_pool_name")); entity.setVmPoolType(org.ovirt.engine.core.common.businessentities.VmPoolType.forValue(rs.getInt("vm_pool_type"))); entity.setStateful(rs.getBoolean("stateful")); entity.setParameters(rs.getString("parameters")); entity.setPrestartedVms(rs.getInt("prestarted_vms")); entity.setClusterId(getGuidDefaultEmpty(rs, "cluster_id")); entity.setClusterName(rs.getString("cluster_name")); entity.setAssignedVmsCount(rs.getInt("assigned_vm_count")); entity.setRunningVmsCount(rs.getInt("vm_running_count")); entity.setMaxAssignedVmsPerUser(rs.getInt("max_assigned_vms_per_user")); entity.setSpiceProxy(rs.getString("spice_proxy")); entity.setBeingDestroyed(rs.getBoolean("is_being_destroyed")); return entity; }

@java.lang.Override public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem) { super.initialize(systemTreeSelectedItem); if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(pool.getVmPoolSpiceProxy()))) { getModel().getSpiceProxyEnabled().setEntity(true); getModel().getSpiceProxy().setEntity(pool.getVmPoolSpiceProxy()); getModel().getSpiceProxy().setIsChangeable(true); } instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.ExistingPoolInstanceTypeManager(getModel(), pool); instanceTypeManager.setAlwaysEnabledFieldUpdate(true); getModel().getCustomProperties().setIsChangeable(false); getModel().getCustomPropertySheet().setIsChangeable(false); }
@java.lang.Override public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem) { super.initialize(systemTreeSelectedItem); getModel().getVmType().setIsChangeable(true); getModel().getPoolStateful().setIsChangeable(true); templateValidate(); instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.NewPoolInstanceTypeManager(getModel()); getModel().getVmInitModel().init(null); }
private void initEditors() { pmTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.StringRenderer<java.lang.String>()); pmEncryptOptionsEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor(org.ovirt.engine.ui.common.widget.Align.RIGHT); pmEncryptOptionsEditor.setUsePatternFly(true); pmSecureEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor(org.ovirt.engine.ui.common.widget.Align.RIGHT); pmSecureEditor.setUsePatternFly(true); }
@javax.annotation.PostConstruct private void handleUnmanagedCommands() { java.util.List<org.ovirt.engine.core.common.businessentities.AsyncTask> asyncTasks = asyncTaskDao.getAll(); java.util.Set<org.ovirt.engine.core.compat.Guid> asyncTaskManagerManagedCommands = asyncTasks.stream().filter(( x) -> (x.getVdsmTaskId()) != null).map(( x) -> x.getRootCommandId()).collect(java.util.stream.Collectors.toSet()); asyncTaskManagerManagedCommands.addAll(asyncTasks.stream().filter(( x) -> (x.getVdsmTaskId()) != null).map(( x) -> x.getCommandId()).collect(java.util.stream.Collectors.toSet())); getCommands(false).stream().filter(( x) -> !(x.isCallbackEnabled())).filter(( x) -> (x.getCommandStatus()) == CommandStatus.ACTIVE).filter(( x) -> !(asyncTaskManagerManagedCommands.contains(x.getId()))).forEach(( x) -> commandsCache.updateCommandStatus(x.getId(), CommandStatus.ENDED_WITH_FAILURE)); getCommands(false).stream().filter(( x) -> x.isCallbackEnabled()).filter(( x) -> !(x.isCallbackNotified())).filter(( x) -> x.getCommandStatus().isDuringExecution()).filter(( x) -> !(asyncTaskManagerManagedCommands.contains(x.getId()))).forEach(( x) -> retrieveCommand(x.getId()).reacquireLocks()); }

@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.webadmin.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> valueUpdater) { org.ovirt.engine.ui.frontend.utils.GlusterVolumeUtils.VolumeStatus status = org.ovirt.engine.ui.frontend.utils.GlusterVolumeUtils.getVolumeStatus(volume); if (((BrowserEvents.CLICK.equals(event.getType())) && ((onClickCommand) != null)) && ((status == (org.ovirt.engine.ui.frontend.utils.GlusterVolumeUtils.VolumeStatus.ALL_BRICKS_DOWN)) || (status == (org.ovirt.engine.ui.frontend.utils.GlusterVolumeUtils.VolumeStatus.SOME_BRICKS_DOWN)))) { onClickCommand.execute(); } }

private void endAction(org.ovirt.engine.core.bll.CommandBase<?> commandBase, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, boolean succeeded) { if (shouldExecuteEndMethod(commandBase)) { commandBase.getReturnValue().setSucceeded(false); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = commandBase.endAction(); if ((!(returnVal.getSucceeded())) && (shouldRepeatEndMethodsOnFail(returnVal))) { if (shouldRepeatEndMethodsOnFail(returnVal)) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.ENGINE, java.lang.String.format(("Command %1$s id: '%2$s' endAction() " + "didn't complete successfully"), commandBase.getActionType(), commandBase.getCommandId())); } else { log.warn(("Command '{}' id: '{}' end method execution failed, as the command isn't marked for " + "endAction() retries silently ignoring"), commandBase.getActionType(), commandBase.getCommandId()); } } if ((commandBase.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.VdcActionType.Unknown)) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsInHierarchy(commandBase.getCommandId()); } org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(commandBase.getExecutionContext(), succeeded); } }
private org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntity(org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates) { return org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.updateEntity(updates, org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); }
public void addCluster() { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model = new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel(); model.init(false); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newClusterTitle()); model.setHelpTag(HelpTag.new_cluster); model.setHashName("new_cluster"); model.setIsNew(true); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = new java.util.ArrayList<>(); dataCenters.add(getEntity()); model.getDataCenter().setItems(dataCenters, getEntity()); model.getDataCenter().setIsChangeable(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnAddCluster", this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.getCommands().add(tempVar2); }


private void mockQuotaDao() { when(quotaDao.getById(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(mockGeneralStorageQuota()); java.util.List<org.ovirt.engine.core.common.businessentities.Quota> quotaList = new java.util.ArrayList<>(); quotaList.add(new org.ovirt.engine.core.common.businessentities.Quota()); quotaList.add(new org.ovirt.engine.core.common.businessentities.Quota()); when(quotaDao.getQuotaByStoragePoolGuid(storagePoolUUID)).thenReturn(quotaList); when(quotaDao.isQuotaInUse(any(org.ovirt.engine.core.common.businessentities.Quota.class))).thenReturn(false); }


private org.ovirt.engine.core.bll.RemoveQuotaCommand createCommand() { org.ovirt.engine.core.common.action.QuotaCRUDParameters param = new org.ovirt.engine.core.common.action.QuotaCRUDParameters(); param.setQuotaId(generalGuidQuota); command = spy(new org.ovirt.engine.core.bll.RemoveQuotaCommand(param, null)); doReturn(storagePoolDao).when(command).getStoragePoolDao(); doReturn(quotaDao).when(command).getQuotaDao(); doReturn(vmDao).when(command).getVmDao(); doReturn(quotaManager).when(command).getQuotaManager(); return command; }
private org.ovirt.engine.core.common.businessentities.StoragePool mockStoragePool() { org.ovirt.engine.core.common.businessentities.StoragePool storagePool = new org.ovirt.engine.core.common.businessentities.StoragePool(); storagePool.setId(storagePoolUUID); storagePool.setQuotaEnforcementType(QuotaEnforcementTypeEnum.DISABLED); return storagePool; }
public boolean consume(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters) throws org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.AuditLogType, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase> auditLogPair = new org.ovirt.engine.core.common.utils.Pair(); auditLogPair.setSecond(parameters.getAuditLogable()); org.ovirt.engine.core.common.businessentities.StoragePool storagePool = parameters.getAuditLogable().getStoragePool(); if (storagePool == null) { throw new org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException("Null storage pool passed to QuotaManager"); } lock.writeLock().lock(); try { if (!(storagePoolQuotaMap.containsKey(storagePool.getId()))) { storagePoolQuotaMap.put(storagePool.getId(), new java.util.HashMap()); } } finally { lock.writeLock().unlock(); } lock.readLock().lock(); try { synchronized(storagePoolQuotaMap.get(storagePool.getId())) { return (validateAndCompleteParameters(parameters, auditLogPair)) && (((parameters.getStoragePool().getQuotaEnforcementType()) == (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED)) || (internalConsumeAndReleaseHandler(parameters, auditLogPair))); } } finally { lock.readLock().unlock(); getQuotaManagerAuditLogger().auditLog(auditLogPair.getFirst(), auditLogPair.getSecond()); } }
private boolean validateAndCompleteParameters(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.AuditLogType, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase> auditLogPair) throws org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException { if ((org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType())) { return true; } boolean hardEnforcement = (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType()); for (org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter param : parameters.getParameters()) { boolean validQuotaId = checkAndFetchQuota(parameters, param, auditLogPair); boolean validCluster = true; boolean validStorageDomain = true; if (validQuotaId) { if (param instanceof org.ovirt.engine.core.bll.quota.QuotaClusterConsumptionParameter) { validCluster = checkClusterMatchQuota(parameters, param); } if (param instanceof org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) { validStorageDomain = checkStoragePoolMatchQuota(parameters, param); } } if (((!validQuotaId) || (!validCluster)) || (!validStorageDomain)) { if (hardEnforcement) { return false; } else { parameters.getValidationMessages().clear(); if ((org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType())) { auditLogPair.setFirst(null); } } } } parameters.getParameters().removeAll(corruptedParameters); corruptedParameters.clear(); return true; }
private boolean checkStoragePoolMatchQuota(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters, org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter param) { org.ovirt.engine.core.common.businessentities.Quota quota = param.getQuota(); org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter paramStorage = ((org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) (param)); if ((paramStorage.getStorageDomainId()) == null) { parameters.getValidationMessages().add(EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID.toString()); log.error("Quota storage parameters from command '{}' are missing storage domain id", parameters.getAuditLogable().getClass().getName()); return false; } boolean storageDomainInQuota = false; if ((quota.getGlobalQuotaStorage()) != null) { storageDomainInQuota = true; } else { for (org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage : quota.getQuotaStorages()) { if (quotaStorage.getStorageId().equals(paramStorage.getStorageDomainId())) { storageDomainInQuota = true; break; } } } if (!storageDomainInQuota) { parameters.getValidationMessages().add(EngineMessage.ACTION_TYPE_FAILED_NO_QUOTA_SET_FOR_DOMAIN.toString()); log.error("Quota storage parameters from command '{}'. Storage domain does not match quota", parameters.getAuditLogable().getClass().getName()); return false; } return true; }
@java.lang.Override protected boolean validate() { if (((getParameters()) == null) || ((getParameters().getQuotaId()) == null)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } org.ovirt.engine.core.common.businessentities.Quota quota = getQuota(); if (quota == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } if ((!(QuotaEnforcementTypeEnum.DISABLED.equals(quota.getQuotaEnforcementType()))) && (getQuotaDao().isQuotaInUse(quota))) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_IN_USE_BY_VM_OR_DISK); return false; } return true; }
private org.ovirt.engine.core.common.businessentities.Quota fetchQuotaFromCache(org.ovirt.engine.core.compat.Guid quotaId, org.ovirt.engine.core.compat.Guid storagePoolId) throws org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException { org.ovirt.engine.core.common.businessentities.Quota quota; java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.Quota> quotaMap = storagePoolQuotaMap.get(storagePoolId); quota = quotaMap.get(quotaId); if (quota == null) { quota = getQuotaDao().getById(quotaId); if (quota != null) { if (storagePoolId.equals(quota.getStoragePoolId())) { quotaMap.put(quotaId, quota); } else { throw new org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException(java.lang.String.format("Quota %s does not match storage pool %s", quotaId.toString(), storagePoolId.toString())); } } } return quota; }

@org.junit.Before public void setUp() { setUpQuota(); params = new org.ovirt.engine.core.common.action.QuotaCRUDParameters(quota); command = spy(new org.ovirt.engine.core.bll.UpdateQuotaCommand(params, null)); doReturn(quotaDao).when(command).getQuotaDao(); doNothing().when(command).removeQuotaFromCache(); doNothing().when(command).afterUpdate(); }
private void setUpQuota() { quota = new org.ovirt.engine.core.common.businessentities.Quota(); quota.setId(org.ovirt.engine.core.compat.Guid.newGuid()); int numQutoaClusters = org.ovirt.engine.core.utils.RandomUtils.instance().nextInt(10); java.util.List<org.ovirt.engine.core.common.businessentities.QuotaCluster> quotaClusters = new java.util.ArrayList<>(numQutoaClusters); for (int i = 0; i < numQutoaClusters; ++i) { quotaClusters.add(new org.ovirt.engine.core.common.businessentities.QuotaCluster()); } quota.setQuotaClusters(quotaClusters); int numQutoaStorages = org.ovirt.engine.core.utils.RandomUtils.instance().nextInt(10); java.util.List<org.ovirt.engine.core.common.businessentities.QuotaStorage> quotaStorages = new java.util.ArrayList<>(numQutoaStorages); for (int i = 0; i < numQutoaClusters; ++i) { quotaStorages.add(new org.ovirt.engine.core.common.businessentities.QuotaStorage()); } quota.setQuotaStorages(quotaStorages); }
private boolean checkClusterMatchQuota(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters, org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter param) { org.ovirt.engine.core.common.businessentities.Quota quota = param.getQuota(); org.ovirt.engine.core.bll.quota.QuotaClusterConsumptionParameter paramVds = ((org.ovirt.engine.core.bll.quota.QuotaClusterConsumptionParameter) (param)); if ((paramVds.getClusterId()) == null) { parameters.getValidationMessages().add(EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID.toString()); log.error("Quota Vds parameters from command '{}' are missing vds group id", parameters.getAuditLogable().getClass().getName()); return false; } boolean clusterInQuota = false; if ((quota.getGlobalQuotaCluster()) != null) { clusterInQuota = true; } else { for (org.ovirt.engine.core.common.businessentities.QuotaCluster cluster : quota.getQuotaClusters()) { if (cluster.getClusterId().equals(paramVds.getClusterId())) { clusterInQuota = true; break; } } } if (!clusterInQuota) { parameters.getValidationMessages().add(EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID.toString()); log.error("Quota Vds parameters from command '{}'. Vds group does not match quota", parameters.getAuditLogable().getClass().getName()); return false; } return true; }
@java.lang.Override protected boolean validate() { if (!(checkQuotaValidationCommon(getParameters().getQuota(), getReturnValue().getValidationMessages()))) { return false; } else if ((getParameters().getQuota().getId()) == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID); return false; } else if ((getQuotaDao().getById(getParameters().getQuota().getId())) == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } return true; }

@java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.bll.ValidationResult validateNotRemovingUsedNetworkByVms() { java.util.Collection<java.lang.String> removedNetworks = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : removedNetworkAttachments) { removedNetworks.add(existingNetworkRelatedToAttachment(removedAttachment).getName()); } final java.util.List<java.lang.String> vmsNames = getVmInterfaceManager().findActiveVmsUsingNetworks(host.getId(), removedNetworks); final java.util.List<java.lang.String> removedNetworksList = new java.util.ArrayList<>(removedNetworks); org.ovirt.engine.core.bll.validator.network.DetachNetworkUsedByVmValidator detachNetworkUsedByVmValidator = new org.ovirt.engine.core.bll.validator.network.DetachNetworkUsedByVmValidator(vmsNames, removedNetworksList); return detachNetworkUsedByVmValidator.validate(); }
public static java.util.Collection<java.lang.String> replaceWith(java.lang.String propertyName, java.util.Collection<?> items, java.lang.String separator, int maxNumberOfPrintedItems) { org.apache.commons.lang.Validate.isTrue((maxNumberOfPrintedItems >= 1)); org.apache.commons.lang.Validate.isTrue(org.apache.commons.lang.StringUtils.isNotEmpty(separator)); int maxNumOfItems = java.lang.Math.min(maxNumberOfPrintedItems, items.size()); java.util.List<java.lang.String> printedItems = new java.util.ArrayList<>(maxNumOfItems); for (java.lang.Object item : items) { if ((--maxNumOfItems) < 0) { break; } printedItems.add(java.lang.String.format("\t%s", java.lang.String.valueOf(item))); } if ((items.size()) > maxNumberOfPrintedItems) { printedItems.add("\t..."); } java.util.ArrayList<java.lang.String> replacements = new java.util.ArrayList<>(); replacements.add(org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(propertyName, org.apache.commons.lang.StringUtils.join(printedItems, separator))); replacements.add(org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString((propertyName + (org.ovirt.engine.core.utils.ReplacementUtils.COUNTER_SUFFIX)), items.size())); return replacements; }


@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("managePrestartedVmsInAllVmPools") public void managePrestartedVmsInAllVmPools() { getAllVmPools().stream().filter(( pool) -> (pool.getPrestartedVms()) > 0).forEach(this::managePrestartedVmsInPool); }
private void prestartVms(org.ovirt.engine.core.common.businessentities.VmPool vmPool, int numOfVmsToPrestart) { java.util.List<org.ovirt.engine.core.common.businessentities.VmPoolMap> vmPoolMaps = vmPoolDao.getVmMapsInVmPoolByVmPoolIdAndStatus(vmPool.getVmPoolId(), VMStatus.Down); int failedAttempts = 0; int prestartedVmsCounter = 0; final int maxFailedAttempts = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VmPoolMonitorMaxAttempts); java.util.Map<java.lang.String, java.util.Set<org.ovirt.engine.core.compat.Guid>> failureReasonsForVms = new java.util.HashMap<>(); if ((vmPoolMaps != null) && ((vmPoolMaps.size()) > 0)) { for (org.ovirt.engine.core.common.businessentities.VmPoolMap map : vmPoolMaps) { if ((failedAttempts < maxFailedAttempts) && (prestartedVmsCounter < numOfVmsToPrestart)) { java.util.List<java.lang.String> messages = new java.util.ArrayList<>(); if (prestartVm(map.getVmId(), (!(vmPool.isStateful())), vmPool.getName(), messages)) { prestartedVmsCounter++; failedAttempts = 0; } else { failedAttempts++; collectVmPrestartFailureReasons(map.getVmId(), failureReasonsForVms, messages); } } else { break; } } logResultOfPrestartVms(prestartedVmsCounter, numOfVmsToPrestart, vmPool.getVmPoolId(), failureReasonsForVms); } else { org.ovirt.engine.core.bll.VmPoolMonitor.log.info("No VMs available for prestarting"); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.VmPool> getAllVmPools() { return vmPoolDao.getAll(); }

private boolean prestartVm(org.ovirt.engine.core.compat.Guid vmGuid, boolean runAsStateless, java.lang.String poolName, java.util.List<java.lang.String> messages) { if (org.ovirt.engine.core.bll.VmPoolCommandBase.canAttachNonPrestartedVmToUser(vmGuid, messages)) { org.ovirt.engine.core.common.businessentities.VmStatic vmToPrestart = vmStaticDao.get(vmGuid); return runVmFromPool(vmToPrestart, runAsStateless, poolName); } return false; }

private static boolean canRemoveVmPool(org.ovirt.engine.core.compat.Guid vmPoolId) { return (getListOfVmsInPool(vmPoolId).size()) == 0; }


@java.lang.Override protected void executeCommand() { initPoolUser(); boolean isPrestartedVm = false; org.ovirt.engine.core.compat.Guid vmToAttach; org.ovirt.engine.core.utils.lock.EngineLock vmLock; synchronized(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand._lockObject) { while (true) { vmToAttach = getPrestartedVmToAttach(); if (!(Guid.Empty.equals(vmToAttach))) { isPrestartedVm = true; } else { vmToAttach = getNonPrestartedVmToAttach(); } if (Guid.Empty.equals(vmToAttach)) { log.info("No free Vms in pool '{}'. Cannot allocate for user '{}'", org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPoolId(), getAdUserId()); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.NO_FREE_VM_IN_POOL); } vmLock = createEngineLockForRunVm(vmToAttach); if (acquireLock(vmLock)) { break; } else { lockedVms.add(vmToAttach); } } org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.VM, vmToAttach)); setVmId(vmToAttach); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = attachUserToVm(vmToAttach); if (!(vdcReturnValue.getSucceeded())) { log.info("Failed to give user '{}' permission to Vm '{}'", getAdUserId(), vmToAttach); setActionReturnValue(vdcReturnValue); releaseLock(vmLock); return; } else { log.info("Succeeded giving user '{}' permission to Vm '{}'", getAdUserId(), vmToAttach); } } if (!isPrestartedVm) { setVm(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmDao().get(vmToAttach)); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = runVm(vmToAttach, vmLock); setSucceeded(vdcReturnValue.getSucceeded()); setActionReturnValue(vmToAttach); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getReturnValue().getVdsmTaskIdList().addAll(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getReturnValue().getInternalVdsmTaskIdList()); } else { setActionReturnValue(vmToAttach); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.setSucceeded(true); releaseLock(vmLock); } }

private org.ovirt.engine.core.common.action.VdcReturnValueBase runVm(org.ovirt.engine.core.compat.Guid vmToAttach, org.ovirt.engine.core.utils.lock.EngineLock vmLock) { org.ovirt.engine.core.common.action.RunVmParams runVmParams = new org.ovirt.engine.core.common.action.RunVmParams(vmToAttach); runVmParams.setSessionId(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().getSessionId()); runVmParams.setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.VM, vmToAttach)); runVmParams.setParentCommand(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getActionType()); runVmParams.setParentParameters(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters()); runVmParams.setEndProcedure(EndProcedure.COMMAND_MANAGED); runVmParams.setRunAsStateless((!(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPool().isStateful()))); org.ovirt.engine.core.bll.job.ExecutionContext runVmContext = createRunVmContext(); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = runInternalAction(VdcActionType.RunVm, runVmParams, org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.cloneContext().withExecutionContext(runVmContext).withLock(vmLock).withCompensationContext(null)); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList()); return vdcReturnValue; }

@java.lang.Override protected boolean validate() { boolean returnValue = true; synchronized(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand._lockObject) { if (Guid.Empty.equals(getVmToAttach())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_NO_AVAILABLE_POOL_VMS); returnValue = false; } } if (returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsForUser = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmDao().getAllForUser(getAdUserId()); int vmCount = 0; for (org.ovirt.engine.core.common.businessentities.VM vm : vmsForUser) { if (((vm.getVmPoolId()) != null) && (org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPoolId().equals(vm.getVmPoolId()))) { vmCount++; } } int limit = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPool().getMaxAssignedVmsPerUser(); if (vmCount >= limit) { addValidationMessage(EngineMessage.VM_POOL_CANNOT_ATTACH_TO_MORE_VMS_FROM_POOL); returnValue = false; } } if (!returnValue) { setActionMessageParameters(); } return returnValue; }
@java.lang.Override public void handleRequest(io.undertow.server.HttpServerExchange exchange) throws java.lang.Exception { if (!(exchange.getRequestHeaders().getFirst("Authorization").equals(("Bearer " + (org.ovirt.engine.sdk4.ServerTest.TOKEN))))) { exchange.setStatusCode(401); exchange.getResponseSender().send(""); } else { java.lang.Thread.sleep(delay); exchange.setStatusCode(code); exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/xml"); exchange.getResponseSender().send(body); } }
protected void setXmlResponse(java.lang.String path, final int code, final java.lang.String body, final int delay) { io.undertow.server.HttpHandler xmlResponseHandler = new io.undertow.server.HttpHandler() { @java.lang.Override public void handleRequest(io.undertow.server.HttpServerExchange exchange) throws java.lang.Exception { if (!(exchange.getRequestHeaders().getFirst("Authorization").equals(("Bearer " + (org.ovirt.engine.sdk4.ServerTest.TOKEN))))) { exchange.setStatusCode(401); exchange.getResponseSender().send(""); } else { java.lang.Thread.sleep(delay); exchange.setStatusCode(code); exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/xml"); exchange.getResponseSender().send(body); } } }; testHandler().addPrefixPath((((testPrefix()) + "/api/") + path), xmlResponseHandler); }
private void generateAddHttpPost(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter parameter = method.parameters().filter(( x) -> (x.isIn()) && (x.isOut())).findFirst().orElse(null); org.ovirt.api.metamodel.concepts.Name methodName = method.getName(); org.ovirt.api.metamodel.concepts.Type parameterType = parameter.getType(); org.ovirt.api.metamodel.concepts.Name parameterName = parameter.getName(); java.lang.String arg = rubyNames.getMemberStyleName(parameterName); java.lang.String doc = method.getDoc(); if (doc == null) { doc = java.lang.String.format("Adds a new `%1$s`.", arg); } buffer.addComment(); buffer.addComment(doc); buffer.addComment(); buffer.addComment("@param %1$s [%2$s]", arg, yardDoc.getType(parameterType)); buffer.addComment(); buffer.addComment("@return [%1$s]", yardDoc.getType(parameterType)); buffer.addComment(); buffer.addLine("def %1$s(%2$s, opts = {})", rubyNames.getMemberStyleName(methodName), arg); generateConvertLiteral(parameterType, arg); buffer.addLine("request = Request.new(:method => :POST, :path => @path)"); generateWriteRequestBody(parameter, arg); buffer.addLine("response = @connection.send(request)"); buffer.addLine("case response.code"); buffer.addLine("when 201, 202"); generateReturnResponseBody(parameter); buffer.addLine("else"); buffer.addLine("check_fault(response)"); buffer.addLine("end"); buffer.addLine("end"); buffer.addLine(); }
private void generateHttpGet(org.ovirt.api.metamodel.concepts.Method method) { java.util.List<org.ovirt.api.metamodel.concepts.Parameter> inParameters = method.parameters().filter(Parameter::isIn).sorted().collect(java.util.stream.Collectors.toList()); java.util.List<org.ovirt.api.metamodel.concepts.Parameter> outParameters = method.parameters().filter(Parameter::isOut).sorted().collect(java.util.stream.Collectors.toList()); org.ovirt.api.metamodel.concepts.Parameter mainParameter = outParameters.stream().findFirst().orElse(null); buffer.addComment(); java.lang.String doc = method.getDoc(); if (doc == null) { doc = "Returns the representation of the object managed by this service."; } buffer.addComment(doc); buffer.addComment(); buffer.addComment("@param opts [Hash] Additional options."); buffer.addComment(); if (!(inParameters.isEmpty())) { inParameters.forEach(( parameter) -> { generateParameterDocumentation(parameter); buffer.addComment(); }); } buffer.addComment("@return [%1$s]", yardDoc.getType(mainParameter.getType())); buffer.addComment(); org.ovirt.api.metamodel.concepts.Name methodName = method.getName(); buffer.addLine("def %1$s(opts = {})", rubyNames.getMemberStyleName(methodName)); buffer.addLine("query = {}"); inParameters.forEach(this::generateUrlParameter); buffer.addLine("request = Request.new(:method => :GET, :path => @path, :query => query)"); buffer.addLine("response = @connection.send(request)"); buffer.addLine("case response.code"); buffer.addLine("when 200"); generateReturnResponseBody(mainParameter); buffer.addLine("else"); buffer.addLine("check_fault(response)"); buffer.addLine("end"); buffer.addLine("end"); buffer.addLine(); }
private void generateHttpDelete(org.ovirt.api.metamodel.concepts.Method method) { java.util.List<org.ovirt.api.metamodel.concepts.Parameter> inParameters = method.parameters().filter(Parameter::isIn).sorted().collect(java.util.stream.Collectors.toList()); org.ovirt.api.metamodel.concepts.Name name = method.getName(); java.lang.String doc = method.getDoc(); if (doc == null) { doc = "Deletes the object managed by this service."; } buffer.addComment(); buffer.addComment(doc); buffer.addComment(); buffer.addComment("@param opts [Hash] Additional options."); buffer.addComment(); if (!(inParameters.isEmpty())) { inParameters.forEach(( parameter) -> { generateParameterDocumentation(parameter); buffer.addComment(); }); } buffer.addLine("def %1$s(opts = {})", rubyNames.getMemberStyleName(name)); buffer.addLine("query = {}"); inParameters.forEach(this::generateUrlParameter); buffer.addLine("request = Request.new(:method => :DELETE, :path => @path, :query => query)"); buffer.addLine("response = @connection.send(request)"); buffer.addLine("unless response.code == 200"); buffer.addLine("check_fault(response)"); buffer.addLine("end"); buffer.addLine("end"); buffer.addLine(); }

@java.lang.Override public int hashCode() { return java.util.Objects.hash(correlationId, description, endTime, externalSystem, id, jobId, parentStepId, startTime, status, stepNumber, stepType, steps, external); }




protected final void execute() { setCommandStatus(CommandStatus.ACTIVE); getReturnValue().setValid(true); getReturnValue().setIsSyncronious(true); if (shouldPersistCommand()) { persistCommandIfNeeded(); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.persistCommandAssociatedEntities(getCommandId(), getSubjectEntities()); } if ((!(hasTaskHandlers())) || ((getExecutionIndex()) == 0)) { org.ovirt.engine.core.bll.job.ExecutionHandler.addStep(getExecutionContext(), StepEnum.EXECUTING, null); } if ((getCommandStep()) != null) { org.ovirt.engine.core.common.job.Step taskStep = org.ovirt.engine.core.bll.job.ExecutionHandler.addTaskStep(getExecutionContext(), getCommandStep(), null); if (taskStep != null) { getExecutionContext().setStep(taskStep); persistCommandIfNeeded(); } } try { handleTransactivity(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(scope, this); } catch (javax.ejb.TransactionRolledbackLocalException e) { log.info("Transaction was aborted in '{}'", this.getClass().getName()); compensate(); } finally { try { if (getCommandShouldBeLogged()) { logCommand(); } if (getSucceeded()) { if (getCommandShouldBeLogged()) { logRenamedEntity(); } startPollingAsyncTasks(); } } finally { if ((noAsyncOperations()) && (!(org.ovirt.engine.core.bll.job.ExecutionHandler.checkIfJobHasTasks(getExecutionContext())))) { org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(getExecutionContext(), getSucceeded()); } } } }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.job.Step)) { return false; } org.ovirt.engine.core.common.job.Step other = ((org.ovirt.engine.core.common.job.Step) (obj)); return ((((((((((((java.util.Objects.equals(correlationId, other.correlationId)) && (java.util.Objects.equals(description, other.description))) && (java.util.Objects.equals(endTime, other.endTime))) && (java.util.Objects.equals(externalSystem, other.externalSystem))) && (java.util.Objects.equals(id, other.id))) && (java.util.Objects.equals(jobId, other.jobId))) && (java.util.Objects.equals(parentStepId, other.parentStepId))) && (java.util.Objects.equals(startTime, other.startTime))) && ((status) == (other.status))) && ((stepNumber) == (other.stepNumber))) && ((stepType) == (other.stepType))) && (java.util.Objects.equals(steps, other.steps))) && ((external) == (other.external)); }


@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { final boolean versionChanged = !(java.util.Objects.equals(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion())); if (!versionChanged) { return null; } final org.ovirt.engine.core.bll.LockMessage lockMessage = new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_BEING_UPDATED).with("clusterName", oldCluster.getName()); vmsLockedForUpdate = org.ovirt.engine.core.bll.UpdateClusterCommand.getVmStaticDao().getAllByCluster(oldGroup.getId()).stream().filter(( vm) -> ((vm.getOrigin()) != OriginType.EXTERNAL) && (!(vm.isHostedEngine()))).filter(( vm) -> (vm.getCustomCompatibilityVersion()) == null).collect(java.util.stream.Collectors.toList()); return vmsLockedForUpdate.stream().collect(java.util.stream.Collectors.toMap(( vm) -> vm.getId().toString(), ( vm) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, lockMessage))); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { final boolean versionChanged = !(java.util.Objects.equals(oldGroup.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion())); if (!versionChanged) { return null; } final java.lang.String lockMessage = (EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_BEING_UPDATED.name()) + (org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("clusterName", oldGroup.getName())); vmsLockedForUpdate = org.ovirt.engine.core.bll.UpdateClusterCommand.getVmStaticDao().getAllByCluster(oldGroup.getId()).stream().filter(( vm) -> ((vm.getOrigin()) != OriginType.EXTERNAL) && (!(vm.isHostedEngine()))).filter(( vm) -> (vm.getCustomCompatibilityVersion()) == null).collect(java.util.stream.Collectors.toList()); return vmsLockedForUpdate.stream().collect(java.util.stream.Collectors.toMap(( vm) -> vm.getId().toString(), ( vm) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, lockMessage))); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (((getParameters().getBricks()) == null) || ((getParameters().getBricks().size()) == 0)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED); return false; } if (getGlusterVolume().getVolumeType().isReplicatedType()) { if ((getParameters().getReplicaCount()) > ((getGlusterVolume().getReplicaCount()) + 1)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT_MORE_THAN_ONE); } else if ((getParameters().getReplicaCount()) < (getGlusterVolume().getReplicaCount())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT); } } if (getGlusterVolume().getVolumeType().isStripedType()) { if ((getParameters().getStripeCount()) > ((getGlusterVolume().getStripeCount()) + 1)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_STRIPE_COUNT_MORE_THAN_ONE); } else if ((getParameters().getStripeCount()) < (getGlusterVolume().getStripeCount())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_STRIPE_COUNT); } } if (getGlusterVolume().getVolumeType().isDispersedType()) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_ADD_BRICK_TO_DISPERSE_VOLUME_NOT_SUPPORTED); return false; } return (updateBrickServerAndInterfaceNames(getParameters().getBricks(), true)) && (validateDuplicateBricks(getParameters().getBricks())); }





@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { if (((org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getActionState()) == (org.ovirt.engine.core.bll.CommandActionState.EXECUTE)) && (!(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getSucceeded()))) { return org.ovirt.engine.core.common.AuditLogType.UPDATE_OVF_FOR_STORAGE_DOMAIN_FAILED; } return super.getAuditLogTypeValue(); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getNewDomainCommand())) { newDomain(); } else if (command == (getImportDomainCommand())) { importDomain(); } else if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getDestroyCommand())) { destroy(); } else if ("OnSave".equals(command.getName())) { onSave(); } else if ("Cancel".equals(command.getName())) { cancel(); } else if ("CancelConfirm".equals(command.getName())) { cancelConfirm(); } else if ("CancelImportConfirm".equals(command.getName())) { cancelImportConfirm(); } else if ("OnImport".equals(command.getName())) { onImport(); } else if ("OnImportFile".equals(command.getName())) { if (((getConfirmWindow()) != null) && (!(((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())).validate()))) { return; } cancelConfirm(); getExistingStorageDomainList(); } else if ("OnImportSan".equals(command.getName())) { if (((getConfirmWindow()) != null) && (!(((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())).validate()))) { return; } cancelConfirm(); onImportSanDomainApprove(); } else if ("OnRemove".equals(command.getName())) { onRemove(); } else if ("OnDestroy".equals(command.getName())) { onDestroy(); } else if ("OnSaveSanStorage".equals(command.getName())) { onSaveSanStorage(); } }

private org.ovirt.engine.core.compat.Guid getQuotaId() { return AddVmCommand.getParameters().getVmStaticData().getQuotaId(); }

protected org.ovirt.engine.core.compat.Guid getQuotaId() { if (((getNewDisk()) != null) && (isInternalManagedDisk())) { return ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getNewDisk())).getQuotaId(); } return null; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> getQuotaVdsConsumptionParameters() { return java.util.Arrays.<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter>asList(new org.ovirt.engine.core.bll.quota.QuotaSanityParameter(getQuotaId(), null)); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> getQuotaVdsConsumptionParameters() { java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> list = new java.util.ArrayList<>(); list.add(new org.ovirt.engine.core.bll.quota.QuotaSanityParameter(getQuotaId(), null)); return list; }

private org.ovirt.engine.core.compat.Guid getQuotaId() { if (((org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getDiskInfo()) != null) && (org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getDiskInfo().getDiskStorageType().isInternal())) { org.ovirt.engine.core.compat.Guid quotaId = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getDiskInfo())).getQuotaId(); if (!(Guid.Empty.equals(quotaId))) { return quotaId; } } return null; }
private static org.ovirt.engine.api.model.OperatingSystem mapOperatingSystem(org.ovirt.engine.core.common.businessentities.VDS entity) { final org.ovirt.engine.api.model.OperatingSystem model = new org.ovirt.engine.api.model.OperatingSystem(); final java.lang.String hostOs = entity.getHostOs(); if ((hostOs != null) && ((hostOs.trim().length()) != 0)) { java.lang.String[] hostOsInfo = hostOs.split(org.ovirt.engine.api.restapi.types.HostMapper.HOST_OS_DELEIMITER); org.ovirt.engine.api.model.Version version = new org.ovirt.engine.api.model.Version(); version.setMajor(org.ovirt.engine.api.restapi.types.HostMapper.getIntegerValue(hostOsInfo, 1)); version.setMinor(org.ovirt.engine.api.restapi.types.HostMapper.getIntegerValue(hostOsInfo, 2)); version.setFullVersion(org.ovirt.engine.api.restapi.types.HostMapper.getFullHostOsVersion(hostOsInfo)); model.setType(hostOsInfo[0]); model.setVersion(version); } model.setCustomKernelCmdline(java.util.Objects.toString(entity.getCurrentKernelCmdline(), "")); model.setReportedKernelCmdline(entity.getKernelArgs()); return model; }
@org.junit.Test public void testHostOs() { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(Guid.Empty); vds.setHostOs("Fedora - 17 - 1"); org.ovirt.engine.api.model.Host host = org.ovirt.engine.api.restapi.types.HostMapper.map(vds, ((org.ovirt.engine.api.model.Host) (null))); assertNotNull(host.getOs()); assertTrue(host.getOs().isSetVersion()); assertEquals(host.getOs().getType(), "Fedora"); assertEquals(host.getOs().getVersion().getFullVersion(), "17 - 1"); assertEquals(java.lang.Long.valueOf(host.getOs().getVersion().getMajor()), java.lang.Long.valueOf(17)); assertEquals(java.lang.Long.valueOf(host.getOs().getVersion().getMinor()), java.lang.Long.valueOf(1)); }
public static org.ovirt.engine.core.utils.OS fromPackageVersionString(java.lang.String packageVersionString) { if (packageVersionString == null) { return new org.ovirt.engine.core.utils.OS(); } java.lang.String[] os = packageVersionString.split(" - ", 3); if ((os.length) < 2) { return new org.ovirt.engine.core.utils.OS(); } final java.lang.String name = os[0].trim(); final java.util.regex.Matcher versionMatcher = org.ovirt.engine.core.utils.OS.versionPattern.matcher(os[1].trim()); final org.ovirt.engine.core.compat.Version version; if (versionMatcher.find()) { version = new org.ovirt.engine.core.compat.Version(versionMatcher.group()); } else if (((os.length) == 3) && (os[2].contains("el6"))) { version = new org.ovirt.engine.core.compat.Version(6, (-1)); } else if (((os.length) == 3) && (os[2].contains("el7"))) { version = new org.ovirt.engine.core.compat.Version(7, (-1)); } else { version = new org.ovirt.engine.core.compat.Version(); } return new org.ovirt.engine.core.utils.OS(name, version); }
@org.junit.runners.Parameterized.Parameters public static java.util.Collection<java.lang.Object[]> namesParams() { return java.util.Arrays.asList(new java.lang.Object[][]{ new java.lang.Object[]{ "RHEL - 7.2 - 9.el7", 7, 2, -1, -1 }, new java.lang.Object[]{ "RHEL - 7 - 1.1503.el7.centos.2.8", 7, -1, -1, -1 }, new java.lang.Object[]{ "oVirt Node - 3.6 - 0.999.201608161021.el7.centos", 3, 6, -1, -1 }, new java.lang.Object[]{ "RHEV Hypervisor - 7.2 - 20160711.0.el7ev", 7, 2, -1, -1 } }); }

private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> runExternalFilters(java.util.ArrayList<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl> filters, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, java.util.List<java.lang.String> messages, java.lang.String correlationId, org.ovirt.engine.core.bll.scheduling.SchedulingManager.SchedulingResult result) { java.util.List<org.ovirt.engine.core.compat.Guid> filteredIDs = null; if (filters != null) { java.util.List<java.lang.String> filterNames = new java.util.ArrayList<>(); for (org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl filter : filters) { filterNames.add(filter.getPolicyUnit().getName()); } java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hostList) { hostIDs.add(host.getId()); } filteredIDs = org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerFactory.getInstance().runFilters(filterNames, hostIDs, vm.getId(), parameters); if (filteredIDs != null) { logFilterActions(hostList, new java.util.HashSet(filteredIDs), EngineMessage.VAR__FILTERTYPE__EXTERNAL, java.util.Arrays.toString(filterNames.toArray()), result, correlationId); } } return intersectHosts(hostList, filteredIDs); }
private org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> externalRunBalance(org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnit, org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { hostIDs.add(vds.getId()); } return org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerFactory.getInstance().runBalance(policyUnit.getPolicyUnit().getName(), hostIDs, cluster.getClusterPolicyProperties()); }
public boolean discover() { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult discoveryResult = org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerFactory.getInstance().runDiscover(); boolean dbUpdated = false; if (discoveryResult != null) { updateDB(discoveryResult); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.info("PolicyUnits updated"); dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); markAllExternalPoliciesAsDisabled(); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Discovery returned empty result, disabled external policy units"); } return dbUpdated; }
@javax.annotation.PostConstruct public void init() { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Initializing Scheduling manager"); initializePendingResourceManager(); loadPolicyUnits(); loadClusterPolicies(); loadExternalScheduler(); enableLoadBalancer(); enableHaReservationCheck(); org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Initialized Scheduling manager"); }
private static org.ovirt.engine.api.model.OperatingSystem getHostOs(java.lang.String hostOs) { if ((hostOs == null) || ((hostOs.trim().length()) == 0)) { return null; } java.lang.String[] hostOsInfo = hostOs.split(org.ovirt.engine.api.restapi.types.HostMapper.HOST_OS_DELEIMITER); org.ovirt.engine.api.model.Version version = new org.ovirt.engine.api.model.Version(); version.setMajor(org.ovirt.engine.api.restapi.types.HostMapper.getIntegerValue(hostOsInfo, 1)); version.setMinor(org.ovirt.engine.api.restapi.types.HostMapper.getIntegerValue(hostOsInfo, 2)); version.setFullVersion(org.ovirt.engine.api.restapi.types.HostMapper.getFullHostOsVersion(hostOsInfo)); org.ovirt.engine.api.model.OperatingSystem os = new org.ovirt.engine.api.model.OperatingSystem(); os.setType(hostOsInfo[0]); os.setVersion(version); return os; }
private boolean isRemoveAutoGeneratedSnapshotRequired() { return ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getStage()) != (org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters.LiveMigrateStage.CREATE_SNAPSHOT)) && ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getStage()) != (org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters.LiveMigrateStage.AUTO_GENERATED_SNAPSHOT_REMOVE_END)); }















@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { if (org.ovirt.engine.core.bll.ShutdownVmCommand.shouldSkipCommandExecutionCached()) { return org.ovirt.engine.core.bll.ShutdownVmCommand.logCommandExecutionSkipped("Shutdown VM"); } if (org.ovirt.engine.core.bll.ShutdownVmCommand.getSuspendedVm()) { return org.ovirt.engine.core.bll.ShutdownVmCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_STOP_SUSPENDED_VM : org.ovirt.engine.core.common.AuditLogType.USER_STOP_SUSPENDED_VM_FAILED; } else { return org.ovirt.engine.core.bll.ShutdownVmCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_INITIATED_SHUTDOWN_VM : org.ovirt.engine.core.common.AuditLogType.USER_FAILED_SHUTDOWN_VM; } }
protected int getMaxVolumeChain() { return org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator.maxImagesInChain; }
protected void refreshLunsInfo(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) { for (org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromVgInfo : lunsFromVgInfo) { org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDB = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getLunDao().get(lunFromVgInfo.getLUNId()); if (lunFromDB == null) { org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getLunDao().save(lunFromVgInfo); log.info("New LUN discovered, ID '{}'", lunFromVgInfo.getLUNId()); } else if ((lunFromDB.getDeviceSize()) != (lunFromVgInfo.getDeviceSize())) { org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getLunDao().update(lunFromVgInfo); log.info("Updated LUN device size - ID '{}', previous size {}, new size {}.", lunFromVgInfo.getLUNId(), lunFromDB.getDeviceSize(), lunFromVgInfo.getDeviceSize()); } for (org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : lunFromVgInfo.getLunConnections()) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connectionFromDb = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageServerConnectionDao().getForIqn(connection.getIqn()); if (connectionFromDb == null) { continue; } org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap lunConnection = new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap(lunFromVgInfo.getLUNId(), connectionFromDb.getId()); if ((getStorageServerConnectionLunMapDao().get(lunConnection.getId())) == null) { getStorageServerConnectionLunMapDao().save(lunConnection); } } } for (org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDb : lunsFromDb) { if ((!(isDummyLun(lunFromDb))) && (!(containsLun(lunsFromVgInfo, lunFromDb)))) { org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getLunDao().remove(lunFromDb.getLUNId()); log.info("Removed LUN ID '{}'", lunFromDb.getLUNId()); } } }


private void saveVmStatistics(java.util.List<org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer> vmAnalyzers) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmStatistics> vmIdToStatistics = vmAnalyzers.stream().filter(( analyzer) -> (analyzer.getVmStatisticsToSave()) != null).collect(java.util.stream.Collectors.toMap(VmAnalyzer::getVmId, VmAnalyzer::getVmStatisticsToSave)); vmStatisticsDao.updateAllInBatch(vmIdToStatistics.values()); vmIdToStatistics.forEach(( vmId, stats) -> resourceManager.getVmManager(vmId).setStatistics(stats)); }
protected void addVmToDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmStatistics(); addVmInterfaces(); getCompensationContext().stateChanged(); return null; }); }
@org.junit.experimental.theories.Theory public void updateRepository_HA_VM_DOWN(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))); assumeTrue(data.dbVm().isAutoStartup()); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); vmAnalyzer.analyze(); assertEquals(data.dbVm().getDynamicData(), vmAnalyzer.getVmDynamicToSave()); assertNotNull(vmAnalyzer.getVmStatisticsToSave()); assertFalse(vmAnalyzer.isRerun()); assertTrue(vmAnalyzer.isAutoVmToRun()); assertNull(data.dbVm().getMigratingToVds()); }
private void createHostedEngineVm(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic(); vmStatic.setId(id); vmStatic.setClusterId(FixturesTool.CLUSTER_RHEL6_ISCSI); vmStatic.setName("HostedEngine"); vmStatic.setOrigin(OriginType.HOSTED_ENGINE); getDbFacade().getVmStaticDao().save(vmStatic); org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(); vmDynamic.setId(id); getDbFacade().getVmDynamicDao().save(vmDynamic); org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics = new org.ovirt.engine.core.common.businessentities.VmStatistics(); vmStatistics.setId(id); getDbFacade().getVmStatisticsDao().save(vmStatistics); }
@java.lang.Override protected void executeVmCommand() { org.ovirt.engine.core.bll.VmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Failed to add VM. The reasons are: {}", java.lang.String.join(",", errorMessages)); return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } }
public void update(org.ovirt.engine.core.common.businessentities.VmStatistics statistics) { vmStatisticsDao.update(statistics); setStatistics(statistics); }
@java.lang.Override protected void endWithFailure() { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.setVm(null); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm()) != null) { removeVmSnapshots(); endActionOnAllImageGroups(); removeVmNetworkInterfaces(); org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVmDynamicDao().remove(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVmId()); org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVmStatisticsDao().remove(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVmId()); org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVmStaticDao().remove(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVmId()); org.ovirt.engine.core.bll.exportimport.ImportVmCommand.setSucceeded(true); } else { setVm(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm()); org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getReturnValue().setEndActionTryAgain(false); } }
@java.lang.Override protected org.ovirt.engine.core.common.businessentities.VM doPersist() { vmStaticDao.save(object.getStaticData()); vmDynamicDao.save(object.getDynamicData()); vmStatisticsDao.save(object.getStatisticsData()); return vmDao.get(object.getId()); }

public void addVds(org.ovirt.engine.core.common.businessentities.VDS vds, boolean isInternal) { org.ovirt.engine.core.vdsbroker.VdsManager vdsManager = new org.ovirt.engine.core.vdsbroker.VdsManager(vds, auditLogDirector, this, dbFacade, monitoringStrategyFactory); if (isInternal) { org.ovirt.engine.core.common.businessentities.VDSStatus status = vds.getStatus(); switch (vds.getStatus()) { case Error : status = org.ovirt.engine.core.common.businessentities.VDSStatus.Up; break; case Reboot : case NonResponsive : case Connecting : case Installing : status = org.ovirt.engine.core.common.businessentities.VDSStatus.Unassigned; break; } if (status != (vds.getStatus())) { vdsManager.setStatus(status, vds); vdsManager.updateStatisticsData(vds.getStatisticsData()); } vds.setPendingVcpusCount(0); vdsManager.updateDynamicData(vds.getDynamicData()); } vdsManager.scheduleJobs(); vdsManagersDict.put(vds.getId(), vdsManager); org.ovirt.engine.core.vdsbroker.ResourceManager.log.info("VDS '{}' was added to the Resource Manager", vds.getId()); }


private java.lang.String formProfileUrl(java.lang.String clusterId, java.lang.String volumeId, boolean isBrickProfileSelected) { java.lang.String apiMatrixParam = (!isBrickProfileSelected) ? ";nfsStatistics=true" : ""; return org.ovirt.engine.core.compat.StringFormat.format("/ovirt-engine/api/clusters/%s/glustervolumes/%s/profilestatistics%s?accept=application/pdf", clusterId, volumeId, apiMatrixParam); }
@org.junit.Test public void updateStatusOfImagesByImageGroupId() { org.ovirt.engine.core.common.businessentities.storage.Image image = dao.get(org.ovirt.engine.core.dao.ImageDaoTest.EXISTING_IMAGE_ID); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = dbFacade.getDiskImageDao().getAllSnapshotsForImageGroup(image.getDiskId()); assertFalse(((snapshots.size()) == 1)); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : snapshots) { assertFalse(((org.ovirt.engine.core.common.businessentities.storage.ImageStatus.LOCKED) == (diskImage.getImageStatus()))); } dao.updateStatusOfImagesByImageGroupId(image.getDiskId(), ImageStatus.LOCKED); snapshots = dbFacade.getDiskImageDao().getAllSnapshotsForImageGroup(image.getDiskId()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : snapshots) { assertEquals(ImageStatus.LOCKED, diskImage.getImageStatus()); } }
@org.junit.Test public void testUpdateQuota() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.Quota quotaGeneralToSpecific = dao.getById(FixturesTool.QUOTA_GENERAL); java.lang.String quotaName = "New Temporary name"; java.util.List<org.ovirt.engine.core.common.businessentities.QuotaCluster> quotaClusterList = org.ovirt.engine.core.dao.QuotaDaoTest.getQuotaCluster(org.ovirt.engine.core.dao.QuotaDaoTest.getSpecificQuotaCluster(quotaGeneralToSpecific.getId())); java.lang.Long newStorageLimit = 2345L; assertEquals(quotaName.equals(quotaGeneralToSpecific.getQuotaName()), false); assertEquals(((quotaClusterList.size()) == (quotaGeneralToSpecific.getQuotaClusters().size())), false); assertEquals(quotaGeneralToSpecific.getGlobalQuotaStorage().getStorageSizeGB().equals(newStorageLimit), false); quotaGeneralToSpecific.setQuotaName(quotaName); quotaGeneralToSpecific.getGlobalQuotaStorage().setStorageSizeGB(newStorageLimit); quotaGeneralToSpecific.setQuotaClusters(quotaClusterList); dao.update(quotaGeneralToSpecific); quotaGeneralToSpecific = dao.getById(FixturesTool.QUOTA_GENERAL); assertEquals(quotaName.equals(quotaGeneralToSpecific.getQuotaName()), true); assertEquals(((quotaClusterList.size()) == (quotaGeneralToSpecific.getQuotaClusters().size())), true); assertEquals(quotaGeneralToSpecific.getGlobalQuotaStorage().getStorageSizeGB().equals(newStorageLimit), true); }
@org.junit.Test public void testGetByClusterIdAndServiceType() { org.ovirt.engine.core.common.businessentities.gluster.GlusterClusterService service = dao.getByClusterIdAndServiceType(org.ovirt.engine.core.dao.gluster.GlusterClusterServiceDaoTest.CLUSTER_ID, ServiceType.GLUSTER); assertNotNull(service); assertTrue(((service.getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus.RUNNING))); }
@org.junit.Test public void updateOvfUpdatedInfoWithRelevantExceptStatus() { org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo ovfInfo = dao.get(getExistingEntityId()); ovfInfo.setStatus(StorageDomainOvfInfoStatus.DISABLED); dao.update(ovfInfo); org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo ovfInfo1 = dao.getAllForDomain(FixturesTool.STORAGE_DOAMIN_NFS2_2).get(0); assertFalse("domain shouldn't be ovf updated prior to test", ((ovfInfo1.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.UPDATED))); dao.updateOvfUpdatedInfo(java.util.Arrays.asList(ovfInfo.getStorageDomainId(), ovfInfo1.getStorageDomainId()), StorageDomainOvfInfoStatus.UPDATED, StorageDomainOvfInfoStatus.DISABLED); ovfInfo = dao.get(ovfInfo.getOvfDiskId()); ovfInfo1 = dao.get(ovfInfo1.getOvfDiskId()); assertTrue(((ovfInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.DISABLED))); assertTrue(((ovfInfo1.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.UPDATED))); }
@org.junit.Test public void updateOvfUpdatedInfoFewDomains() { org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo ovfInfo = dao.get(getExistingEntityId()); org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo ovfInfo1 = dao.getAllForDomain(FixturesTool.STORAGE_DOAMIN_NFS2_2).get(0); assertFalse("domain shouldn't be ovf updated prior to test", ((ovfInfo1.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.UPDATED))); assertFalse("domain shouldn't be ovf updated prior to test", ((ovfInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.UPDATED))); dao.updateOvfUpdatedInfo(java.util.Arrays.asList(ovfInfo.getStorageDomainId(), ovfInfo1.getStorageDomainId()), StorageDomainOvfInfoStatus.UPDATED, StorageDomainOvfInfoStatus.DISABLED); ovfInfo = dao.get(ovfInfo.getOvfDiskId()); ovfInfo1 = dao.get(ovfInfo1.getOvfDiskId()); assertTrue(((ovfInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.UPDATED))); assertTrue(((ovfInfo1.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.UPDATED))); }
@org.junit.Test public void testGetCapacityInfo() throws java.text.ParseException { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = dao.getById(org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.EXISTING_VOL_DIST_ID); assertNotNull("volume capacity info is not available", volume.getAdvancedDetails()); assertTrue(((volume.getAdvancedDetails().getCapacityInfo().getTotalSize()) == 100000)); assertTrue(((volume.getAdvancedDetails().getCapacityInfo().getUsedSize()) == 60000)); assertTrue(((volume.getAdvancedDetails().getCapacityInfo().getFreeSize()) == 40000)); assertTrue(EXPECTED_DATE_FORMAT.parse(volume.getAdvancedDetails().getUpdatedAt().toString()).equals(EXPECTED_DATE_FORMAT.parse("2014-01-21 18:12:33"))); }
@org.junit.Test public void testUpdateAsyncTaskId() { assertNotNull(existingDistVol.getAsyncTask()); assertNull(existingDistVol.getAsyncTask().getTaskId()); dao.updateVolumeTask(existingDistVol.getId(), org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.REBALANCING_VOLUME_TASKID); org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = dao.getAllWithQuery((("select * from gluster_volumes_view where id = '" + (existingDistVol.getId())) + "'")).get(0); assertNotNull((("Volume : " + (existingDistVol.getId())) + " doesn't exists"), volume); assertTrue("Task ID is not getting updated", volume.getAsyncTask().getTaskId().equals(org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.REBALANCING_VOLUME_TASKID)); assertTrue("Invalid Task status", ((org.ovirt.engine.core.common.job.JobExecutionStatus.STARTED) == (volume.getAsyncTask().getStatus()))); assertTrue("Invalid Task type", ((org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REBALANCE) == (volume.getAsyncTask().getType()))); }
@org.junit.Test public void testSetDetectEmulatedMachine() { boolean preUpdate = existingCluster.isDetectEmulatedMachine(); boolean updateValue = false; assertNotSame(preUpdate, updateValue); dao.setEmulatedMachine(existingCluster.getId(), existingCluster.getEmulatedMachine(), updateValue); assertEquals(updateValue, dao.get(existingCluster.getId()).isDetectEmulatedMachine()); }
@org.junit.Test public void testGetVolumesByStatusAndTypes() { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = dao.getVolumesByStatusAndTypes(org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.CLUSTER_ID, GlusterStatus.UP, java.util.Collections.singletonList(GlusterVolumeType.DISTRIBUTE)); assertTrue((volumes != null)); assertTrue(volumes.contains(existingDistVol)); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume : volumes) { assertTrue(((volume.getVolumeType()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType.DISTRIBUTE))); } }
@org.junit.Test public void getStepsByExternalId() { java.util.List<org.ovirt.engine.core.common.job.Step> steps = dao.getStepsByExternalId(org.ovirt.engine.core.dao.StepDaoTest.IN_PROGRESS_REBALANCING_GLUSTER_VOLUME_TASK_ID); assertEquals("Verify Rebalancing Gluster Volume Job has steps", org.ovirt.engine.core.dao.StepDaoTest.TOTAL_STEPS_OF_REBALANCING_GLUSTER_VOLUME, steps.size()); org.ovirt.engine.core.common.job.Step step = steps.get(0); assertTrue("Verify the Step Type status", ((org.ovirt.engine.core.common.job.StepEnum.REBALANCING_VOLUME) == (step.getStepType()))); assertTrue("Verify the Step status", ((org.ovirt.engine.core.common.job.JobExecutionStatus.STARTED) == (step.getStatus()))); assertEquals("Invalid Step", org.ovirt.engine.core.dao.StepDaoTest.REBALANCING_GLUSTER_VOLUME_STEP_ID, step.getId()); }
@org.junit.Test public void testNfsOptions() { newServerConnection.setNfsVersion(NfsVersion.V4); newServerConnection.setNfsRetrans(((short) (5))); dao.save(newServerConnection); org.ovirt.engine.core.common.businessentities.StorageServerConnections result = dao.get(newServerConnection.getId()); assertEquals(result.getNfsVersion(), NfsVersion.V4); assertTrue(((result.getNfsRetrans()) == 5)); assertNull(result.getNfsTimeo()); result = dao.get(existingNfsAutoConnection.getId()); assertEquals(result.getNfsVersion(), NfsVersion.AUTO); assertTrue(((result.getNfsRetrans()) == 7)); assertTrue(((result.getNfsTimeo()) == 42)); result = dao.get(existingConnection.getId()); assertNull(result.getNfsVersion()); assertNull(result.getNfsRetrans()); assertNull(result.getNfsTimeo()); }
public boolean discover() { boolean dbUpdated = false; for (org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBroker broker : externalBrokers) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult discoveryResult = broker.runDiscover(); if (discoveryResult != null) { updateDB(broker, discoveryResult); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.info("PolicyUnits updated for broker {}", broker.getId()); dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Discovery returned empty result when talking to broker {} disabling its units", broker.getId()); java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit> failingPolicyUnits = policyUnitDao.getAll().stream().filter(( unit) -> broker.getId().equals(unit.getBroker())).collect(java.util.stream.Collectors.toList()); markExternalPoliciesAsDisabled(failingPolicyUnits); dbUpdated = true; } } return dbUpdated; }
private void sortFilters(java.util.ArrayList<org.ovirt.engine.core.compat.Guid> filters, final java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> filterPositionMap) { if (filterPositionMap == null) { return; } java.util.Collections.sort(filters, new java.util.Comparator<org.ovirt.engine.core.compat.Guid>() { @java.lang.Override public int compare(org.ovirt.engine.core.compat.Guid filter1, org.ovirt.engine.core.compat.Guid filter2) { java.lang.Integer position1 = getPosition(filterPositionMap.get(filter1)); java.lang.Integer position2 = getPosition(filterPositionMap.get(filter2)); return position1 - position2; } private java.lang.Integer getPosition(java.lang.Integer position) { if (position == null) { position = 0; } return position; } }); }
private void sendToDb(org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBroker broker, org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryUnit discovery, @com.sun.istack.internal.Nullable org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit, org.ovirt.engine.core.common.scheduling.PolicyUnitType type) { org.ovirt.engine.core.common.scheduling.PolicyUnit policy = createFromDiscoveryUnit(discovery, type); if ((policyUnit != null) && ((policyUnit.getBroker()) != null)) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Policy unit {} already reported by broker {}", policyUnit.getName(), broker.getId()); } policy.setBroker(broker.getId()); if ((policyUnit != null) && ((policyUnit.getId()) != null)) { policy.setId(policyUnit.getId()); policyUnitDao.update(policy); } else { policy.setId(org.ovirt.engine.core.compat.Guid.newGuid()); policyUnitDao.save(policy); } }
@java.lang.Override public int compare(org.ovirt.engine.core.compat.Guid filter1, org.ovirt.engine.core.compat.Guid filter2) { java.lang.Integer position1 = getPosition(filterPositionMap.get(filter1)); java.lang.Integer position2 = getPosition(filterPositionMap.get(filter2)); return position1 - position2; }
private org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> externalRunBalance(org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnit, org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { hostIDs.add(vds.getId()); } for (org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBroker broker : externalBrokers) { org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> balanceResult = broker.runBalance(policyUnit.getPolicyUnit().getName(), hostIDs, cluster.getClusterPolicyProperties()); if (balanceResult != null) { return balanceResult; } } org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.warn("External scheduler returned empty balancing result."); return null; }
private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> runExternalFilters(java.util.ArrayList<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl> filters, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, java.util.List<java.lang.String> messages, java.lang.String correlationId, org.ovirt.engine.core.bll.scheduling.SchedulingManager.SchedulingResult result) { if (filters != null) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hostList) { hostIDs.add(host.getId()); } for (final org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBroker broker : externalBrokers) { java.util.List<java.lang.String> filterNames = filters.stream().filter(( f) -> f.getPolicyUnit().getBroker().equals(broker.getId())).map(( f) -> f.getPolicyUnit().getName()).collect(java.util.stream.Collectors.toList()); java.util.List<org.ovirt.engine.core.compat.Guid> filteredIDs = broker.runFilters(filterNames, hostIDs, vm.getId(), parameters); if (filteredIDs != null) { logFilterActions(hostList, new java.util.HashSet(filteredIDs), EngineMessage.VAR__FILTERTYPE__EXTERNAL, java.util.Arrays.toString(filterNames.toArray()), result, correlationId); hostList = intersectHosts(hostList, filteredIDs); } } } return hostList; }



public static org.ovirt.engine.core.bll.ValidationResult setAndValidateCpuProfileForUser(org.ovirt.engine.core.common.businessentities.VmBase vmBase, org.ovirt.engine.core.compat.Guid userId) { if ((vmBase.getCpuProfileId()) == null) { return org.ovirt.engine.core.bll.profiles.CpuProfileHelper.assignFirstCpuProfile(vmBase, userId); } java.util.Optional<org.ovirt.engine.core.common.businessentities.profiles.CpuProfile> authorizedCpuProfile = org.ovirt.engine.core.bll.profiles.CpuProfileHelper.getCpuProfileDao().getAllForCluster(vmBase.getClusterId(), userId, true, ActionGroup.ASSIGN_CPU_PROFILE).stream().filter(( cp) -> cp.getId().equals(vmBase.getCpuProfileId())).findFirst(); if (authorizedCpuProfile.isPresent()) { vmBase.setCpuProfileId(authorizedCpuProfile.get().getId()); return org.ovirt.engine.core.bll.ValidationResult.VALID; } org.ovirt.engine.core.common.businessentities.profiles.CpuProfile chosenCpuProfile = org.ovirt.engine.core.bll.profiles.CpuProfileHelper.getCpuProfileDao().get(vmBase.getCpuProfileId()); if (chosenCpuProfile == null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_NO_CPU_PROFILE_WITH_THAT_ID, java.lang.String.format("$cpuProfileId %s", vmBase.getCpuProfileId())); } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_NO_PERMISSION_TO_ASSIGN_CPU_PROFILE, java.lang.String.format("$cpuProfileId %s", vmBase.getCpuProfileId()), java.lang.String.format("$cpuProfileName %s", chosenCpuProfile.getName())); }
public static org.ovirt.engine.core.bll.ValidationResult setAndValidateCpuProfile(org.ovirt.engine.core.common.businessentities.VmBase vmBase, org.ovirt.engine.core.compat.Guid userId) { if ((vmBase.getCpuProfileId()) == null) { return org.ovirt.engine.core.bll.profiles.CpuProfileHelper.assignFirstCpuProfile(vmBase, userId); } org.ovirt.engine.core.bll.profiles.CpuProfileValidator validator = new org.ovirt.engine.core.bll.profiles.CpuProfileValidator(vmBase.getCpuProfileId()); org.ovirt.engine.core.bll.ValidationResult result = validator.isParentEntityValid(vmBase.getClusterId()); if (!(result.isValid())) { return result; } if (!(org.ovirt.engine.core.bll.profiles.CpuProfileHelper.checkPermissions(vmBase.getCpuProfileId(), userId))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_NO_PERMISSION_TO_ASSIGN_CPU_PROFILE, java.lang.String.format("$cpuProfileId %s", vmBase.getCpuProfileId()), java.lang.String.format("$cpuProfileName %s", validator.getProfile().getName())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public static org.ovirt.engine.core.bll.ValidationResult setAndValidateCpuProfile(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { if ((vmBase.getCpuProfileId()) == null) { return org.ovirt.engine.core.bll.profiles.CpuProfileHelper.assignFirstCpuProfile(vmBase, null); } else { return new org.ovirt.engine.core.bll.profiles.CpuProfileValidator(vmBase.getCpuProfileId()).isParentEntityValid(vmBase.getClusterId()); } }
private static boolean checkPermissions(org.ovirt.engine.core.compat.Guid cpuProfileId, org.ovirt.engine.core.compat.Guid userId) { return (userId == null) || ((org.ovirt.engine.core.bll.profiles.CpuProfileHelper.getPermissionDao().getEntityPermissions(userId, ActionGroup.ASSIGN_CPU_PROFILE, cpuProfileId, VdcObjectType.CpuProfile)) != null); }


private static org.ovirt.engine.core.dao.PermissionDao getPermissionDao() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getPermissionDao(); }



@java.lang.Override public java.lang.String getMessage() { return (super.getMessage()) + (java.lang.String.format(" (Failed with error %1$s and code %2$s)", privateVdsError.getCode(), privateVdsError.getCode().getValue())); }
@org.junit.Test public void lunsMatch() { org.ovirt.engine.core.common.businessentities.storage.LUNs lun = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun.setLUNId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); lun.setPhysicalVolumeId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = java.util.Arrays.asList(lun, lun); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = java.util.Arrays.asList(lun, lun); boolean isMatch = command.getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb).isEmpty(); assertTrue(isMatch); }


@org.junit.Test public void lunsMismatchDeviceSize() { org.ovirt.engine.core.compat.Guid pvID = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.compat.Guid lunID = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromVG = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lunFromVG.setLUNId(lunID.toString()); lunFromVG.setPhysicalVolumeId(pvID.toString()); lunFromVG.setDeviceSize(20); org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDB = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lunFromDB.setLUNId(lunID.toString()); lunFromDB.setPhysicalVolumeId(pvID.toString()); lunFromDB.setDeviceSize(10); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = java.util.Collections.singletonList(lunFromVG); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = java.util.Collections.singletonList(lunFromDB); assertFalse(command.getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb).isEmpty()); }

@org.junit.Test public void lunsMismatchWrongId() { org.ovirt.engine.core.compat.Guid pvID = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromVG = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lunFromVG.setLUNId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); lunFromVG.setPhysicalVolumeId(pvID.toString()); org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDB = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lunFromDB.setLUNId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); lunFromDB.setPhysicalVolumeId(pvID.toString()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = java.util.Collections.singletonList(lunFromVG); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = java.util.Collections.singletonList(lunFromDB); boolean isMatch = command.getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb).isEmpty(); assertFalse(isMatch); }

public void updateHostStatusAfterSuccessfulUpgrade() { org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicHostData = hostDao.get(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVdsId()); dynamicHostData.setUpdateAvailable(false); hostDao.update(dynamicHostData); if ((org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getVdsType()) == (org.ovirt.engine.core.common.businessentities.VDSType.VDS)) { org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.reestablishConnectionIfNeeded(); if ((org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getParameters().getInitialStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance)) { setVdsStatus(VDSStatus.Maintenance); } else { setVdsStatus(VDSStatus.Initializing); } } }
private void updateStaticFields(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { name = vmStatic.getName(); origin = vmStatic.getOrigin(); autoStart = vmStatic.isAutoStartup(); memSizeMb = vmStatic.getMemSizeMb(); minAllocatedMem = vmStatic.getMinAllocatedMem(); numOfCpus = vmStatic.getNumOfCpus(); }
private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.RemoveGlusterHook), argThat(anyHookVDS()))).thenReturn(vdsReturnValue); }
private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); doNothing().when(cmd).endStepJobAborted(any(java.lang.String.class)); doNothing().when(cmd).releaseVolumeLock(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } else { vdsReturnValue.setReturnValue(new org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity()); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.StopRemoveGlusterVolumeBricks), argThat(anyGlusterVolumeVDS()))).thenReturn(vdsReturnValue); }
@java.lang.SuppressWarnings("unchecked") private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); doNothing().when(cmd).endStepJobCommitted(); doNothing().when(cmd).releaseVolumeLock(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.CommitRemoveGlusterVolumeBricks), argThat(anyGlusterVolumeVDS()))).thenReturn(vdsReturnValue); }
private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); doNothing().when(cmd).startSubStep(); doReturn(asyncTaskToBeReturned).when(cmd).handleTaskReturn(asyncTaskToBeReturned); doNothing().when(cmd).updateBricksWithTaskID(asyncTaskToBeReturned); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setReturnValue(asyncTaskToBeReturned); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.StartRemoveGlusterVolumeBricks), argThat(anyGlusterVolumeRemoveBricksVDSParameters()))).thenReturn(vdsReturnValue); }
private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.job.JobExecutionStatus rebalanceStopStatus, boolean isRebalancegTaskCompleted, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); doReturn("TestVDS").when(cmd).getClusterName(); doReturn("TestVolume").when(cmd).getGlusterVolumeName(); doNothing().when(cmd).endStepJob(argThat(jobExecutionStatus(rebalanceStopStatus)), argThat(anyMap()), booleanThat(booleanMatcher(isRebalancegTaskCompleted))); doNothing().when(cmd).releaseVolumeLock(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity rebalanceStatusEntity = new org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity(); rebalanceStatusEntity.getStatusSummary().setStatus(rebalanceStopStatus); vdsReturnValue.setReturnValue(rebalanceStatusEntity); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.StopRebalanceGlusterVolume), argThat(anyHookVDS()))).thenReturn(vdsReturnValue); }
@org.junit.runners.Parameterized.Parameters public static java.util.Collection<java.lang.Object[]> ipAddressParams() { return java.util.Arrays.asList(new java.lang.Object[][]{ new java.lang.Object[]{ new java.util.HashSet<java.lang.String>(), true }, new java.lang.Object[]{ null, true }, new java.lang.Object[]{ new java.util.HashSet<>(java.util.Arrays.asList("abc")), true }, new java.lang.Object[]{ new java.util.HashSet<>(java.util.Arrays.asList("abc", "xyz")), true }, new java.lang.Object[]{ new java.util.HashSet<>(java.util.Arrays.asList("abc-_sc")), true }, new java.lang.Object[]{ new java.util.HashSet<>(java.util.Arrays.asList("")), false }, new java.lang.Object[]{ new java.util.HashSet<>(java.util.Arrays.asList(" ")), false }, new java.lang.Object[]{ new java.util.HashSet<>(java.util.Arrays.asList("abc*")), false }, new java.lang.Object[]{ new java.util.HashSet<>(java.util.Arrays.asList("aaa", "abc*")), false } }); }
private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.UpdateGlusterHook), argThat(anyHookVDS()))).thenReturn(vdsReturnValue); }
private void mockDiskImageDao() { when(diskImageDao.getSnapshotById(org.mockito.Matchers.<org.ovirt.engine.core.compat.Guid>any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.CommonVmPoolCommandTestAbstract.getDiskImageList().get(0)); }
@org.junit.Test public void testGetAvailableValues() { setSomeValue("Anakin"); java.util.Map<java.lang.String, java.lang.String> values = new java.util.HashMap<>(); java.util.Set<java.lang.String> properties = new java.util.HashSet<>(java.util.Arrays.asList("somevalue")); org.ovirt.engine.core.compat.backendcompat.TypeCompat.getPropertyValues(this, properties, values); assertFalse(properties.isEmpty()); assertEquals("Standard", "Anakin", values.get("somevalue")); }
private void mockGetImagesList() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); returnValue.setReturnValue(new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>()); when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.GetImagesList), org.mockito.Matchers.<org.ovirt.engine.core.common.vdscommands.VDSParametersBase>any(org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class))).thenReturn(returnValue); }
@org.junit.Test public void executeCommand() { cmd = spy(createTestCommand(volumeWithRebalanceTask)); prepareMocks(cmd); mockBackend(true, JobExecutionStatus.ABORTED, false, null); assertTrue(cmd.validate()); cmd.executeCommand(); verify(cmd).endStepJob(argThat(jobExecutionStatus(JobExecutionStatus.ABORTED)), argThat(anyMap()), booleanThat(booleanMatcher(false))); verify(cmd).releaseVolumeLock(); assertEquals(AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP, cmd.getAuditLogTypeValue()); }
@org.junit.Test public void doParse_handledFieldTypeRecursion() throws com.google.gwt.core.ext.UnableToCompleteException { java.util.Set<? extends com.google.gwt.core.ext.typeinfo.JClassType> ownerTypeParentFieldTypeSubField1TypeFlattenedSupertypeHierarchy = new java.util.HashSet(java.util.Arrays.asList(ownerTypeParentFieldTypeSubField1Type)); doReturn(ownerTypeParentFieldTypeSubField1TypeFlattenedSupertypeHierarchy).when(ownerTypeParentFieldTypeSubField1Type).getFlattenedSupertypeHierarchy(); when(ownerTypeParentFieldTypeSubField1Type.getFields()).thenReturn(new com.google.gwt.core.ext.typeinfo.JField[]{ ownerTypeParentField }); stubFieldIdAnnotation(ownerTypeParentField, "", false); tested.doParse(ownerType, new java.util.ArrayList<com.google.gwt.core.ext.typeinfo.JClassType>(), ".", "IdPrefix"); java.util.List<org.ovirt.engine.ui.common.binding.ElementIdStatement> expected = java.util.Arrays.asList(getExpectedStatement("ownerTypeParentField", "IdPrefix_ownerTypeParentField"), getExpectedStatement("ownerTypeField1", "IdPrefix_ownerTypeField1"), getExpectedStatement("ownerTypeField2", "IdPrefix_ownerTypeField2")); assertThat(tested.statements.size(), is(equalTo(expected.size()))); assertThat(tested.statements.containsAll(expected), is(equalTo(true))); }
@org.junit.Test public void testGetBaseNicVerifyDelegation() throws java.lang.Exception { org.ovirt.engine.core.vdsbroker.CalculateBaseNic spy = spy(calculateBaseNic); spy.getBaseNic(baseNic); verify(spy).getBaseNic(org.mockito.Matchers.<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>any(), org.mockito.Matchers.<java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>>any()); }
@org.junit.Test(expected = com.google.gwt.core.ext.UnableToCompleteException.class) public void doParse_unhandledFieldTypeRecursion() throws com.google.gwt.core.ext.UnableToCompleteException { java.util.Set<? extends com.google.gwt.core.ext.typeinfo.JClassType> ownerTypeParentFieldTypeSubField1TypeFlattenedSupertypeHierarchy = new java.util.HashSet(java.util.Arrays.asList(ownerTypeParentFieldTypeSubField1Type)); doReturn(ownerTypeParentFieldTypeSubField1TypeFlattenedSupertypeHierarchy).when(ownerTypeParentFieldTypeSubField1Type).getFlattenedSupertypeHierarchy(); when(ownerTypeParentFieldTypeSubField1Type.getFields()).thenReturn(new com.google.gwt.core.ext.typeinfo.JField[]{ ownerTypeParentField }); tested.doParse(ownerType, new java.util.ArrayList<com.google.gwt.core.ext.typeinfo.JClassType>(), ".", "IdPrefix"); }
private void setupDedicatedHostForVmAndTemplate(boolean setDefaultHostForTemplate) { org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.compat.Guid.newGuid(); vm.setDedicatedVmForVdsList(java.util.Arrays.asList(hostId)); org.ovirt.engine.core.common.action.AddVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.AddVmTemplateParameters(); org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic(); vmStatic.setDedicatedVmForVdsList((setDefaultHostForTemplate ? java.util.Arrays.asList(hostId) : new java.util.ArrayList())); parameters.setMasterVm(vmStatic); parameters.setTemplateType(VmEntityType.TEMPLATE); doReturn(parameters).when(cmd).getParameters(); }
private void mockForReadContent(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { when(hooksDao.getGlusterServerHook(org.ovirt.engine.core.bll.gluster.HOOK_ID, org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommandTest.SERVER_ID)).thenReturn(getGlusterServerHook(0, GlusterHookStatus.ENABLED)); mockBackend(succeeded, errorCode); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setReturnValue(org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommandTest.CONTENT); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.GetGlusterHookContent), argThat(anyHookVDS()))).thenReturn(vdsReturnValue); }
@org.junit.Test public void executeCommandWithRebalanceCompleteInNode() { cmd = spy(createTestCommand(volumeWithRebalanceTask)); prepareMocks(cmd); mockBackend(true, JobExecutionStatus.FINISHED, true, null); assertTrue(cmd.validate()); cmd.executeCommand(); verify(cmd).endStepJob(argThat(jobExecutionStatus(JobExecutionStatus.FINISHED)), argThat(anyMap()), booleanThat(booleanMatcher(true))); verify(cmd).releaseVolumeLock(); assertEquals(AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP, cmd.getAuditLogTypeValue()); }
private void mockJobSubjectEntityDao(org.ovirt.engine.core.compat.Guid jobId) { when(jobSubjectEntityDao.getJobSubjectEntityByJobId(eq(jobId))).thenReturn(org.ovirt.engine.core.bll.job.JobRepositoryTest.JOB_SUBJECT_ENTITIES_MAP); when(jobSubjectEntityDao.getJobIdByEntityId(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Arrays.<org.ovirt.engine.core.compat.Guid>asList(jobId)); }
public void testCannotUpdateOSNotSupportVirtioScsi() { prepareVmToPassValidate(); group.setCompatibilityVersion(Version.v4_0); when(command.isVirtioScsiEnabledForVm(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(true); when(osRepository.getDiskInterfaces(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(new java.util.ArrayList(java.util.Arrays.asList("VirtIO"))); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI); }
@org.junit.Test public void testGetBaseNicVerifyDelegation() throws java.lang.Exception { org.ovirt.engine.core.vdsbroker.CalculateBaseNic spy = org.mockito.Mockito.spy(calculateBaseNic); spy.getBaseNic(baseNic); verify(spy).getBaseNic(org.mockito.Matchers.<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>any(), org.mockito.Matchers.<java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>>any()); }
@org.junit.Test public void validateFailsIHostDoesNotExists() { when(vdsDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommandTest.createParameters(); org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommand<org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters> command = createCommand(param); org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommandTest.assertFailsWithValidateMessage(command, EngineMessage.ACTION_TYPE_FAILED_HOST_NOT_EXIST); }
@org.junit.Test public void validateFailsIHostDoesNotExists() { when(vdsDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.createParameters(); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand<org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters> command = createCommand(param); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.assertFailsWithValidateMessage(command, EngineMessage.ACTION_TYPE_FAILED_HOST_NOT_EXIST); }
@org.junit.Test public void validateFailsIsoVersionNotCompatible() { mockVdsWithOsVersion(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.INVALID_OVIRT_VERSION); org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.createParameters(); param.setoVirtIsoFile(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.VALID_VERSION_OVIRT_ISO_FILENAME); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand<org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters> command = createCommand(param); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.assertFailsWithValidateMessage(command, EngineMessage.VDS_CANNOT_UPGRADE_BETWEEN_MAJOR_VERSION); }
@org.junit.Test public void validateFailsMissingIsoFile() { mockVdsWithOsVersion(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.VALID_OVIRT_VERSION); org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.createParameters(); param.setoVirtIsoFile(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.INVALID_VERSION_OVIRT_ISO_FILENAME); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand<org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters> command = createCommand(param); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.assertFailsWithValidateMessage(command, EngineMessage.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE); }
@org.junit.Test public void validateFailsNullParameterForIsoFile() { mockVdsWithOsVersion(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.VALID_OVIRT_VERSION); org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.createParameters(); param.setoVirtIsoFile(null); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand<org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters> command = createCommand(param); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.assertFailsWithValidateMessage(command, EngineMessage.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE); }
@java.lang.Override public void invoke(org.ovirt.engine.api.extensions.ExtMap context, java.util.Map<java.lang.String, java.lang.Object> args) { java.util.Properties templates = org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.loadPropertiesFromJar("entity-templates.properties"); java.lang.String providedTemplate = null; if (context.containsKey(ContextKeys.SHOW_TEMPLATE)) { providedTemplate = templates.get(context.get(ContextKeys.SHOW_TEMPLATE)).toString(); } @java.lang.SuppressWarnings("unchecked") java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> results = context.get(ContextKeys.SEARCH_RESULT, java.util.Collection.class, java.util.Collections.emptyList()); for (org.ovirt.engine.api.extensions.ExtMap result : results) { java.lang.String out = (providedTemplate == null) ? result.containsKey(Authz.PrincipalRecord.ID) ? templates.get("user").toString() : templates.get("group").toString() : providedTemplate; for (java.util.Map.Entry<org.ovirt.engine.api.extensions.ExtKey, java.lang.Object> entry : result.entrySet()) { java.util.regex.Matcher m = java.util.regex.Pattern.compile(java.lang.String.format("@%s@", entry.getKey().getUuid().getUuid())).matcher(out); out = m.replaceAll(java.util.regex.Matcher.quoteReplacement(formatValue(entry))); } org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.addContextMessage(context, false, out); } context.put(ContextKeys.EXIT_STATUS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.SUCCESS); }
private boolean runQuery(java.io.PrintWriter out) { boolean fReturn = false; org.ovirt.engine.core.bll.interfaces.BackendInternal backend = null; try { backend = org.ovirt.engine.core.utils.ejb.EjbUtils.findBean(BeanType.BACKEND, BeanProxyType.LOCAL); org.ovirt.engine.core.services.HealthStatus.log.debug("Calling CheckDBConnection query"); org.ovirt.engine.core.common.queries.VdcQueryParametersBase params = new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(); org.ovirt.engine.core.common.queries.VdcQueryReturnValue v = backend.runInternalQuery(VdcQueryType.CheckDBConnection, params); if (v != null) { fReturn = v.getSucceeded(); out.print((fReturn ? "DB Up!" : "DB Down!")); } else { org.ovirt.engine.core.services.HealthStatus.log.error("Got NULL from backend.RunQuery!"); } } catch (java.lang.Throwable t) { java.lang.String msg = "Unable to contact Database!"; if (backend == null) { msg = "Unable to contact Backend!"; } out.print(msg); org.ovirt.engine.core.services.HealthStatus.log.error(msg, t); fReturn = false; } return fReturn; }

@java.lang.Override protected void executeVdsBrokerCommand() { vmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getBroker().list(); org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.proceedProxyReturnValue(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> returnVMs = new java.util.HashMap<>(); for (int idx = 0; idx < (vmListReturn.vmList.length); ++idx) { java.util.Map<java.lang.String, java.lang.Object> vm = vmListReturn.vmList[idx]; org.ovirt.engine.core.compat.Guid vmId = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getVmId(vm); org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm = new org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm(vmId, org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getVdsmCallTimestamp(vm)).setVmDynamic(org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.buildVMDynamicDataFromList(vm)); returnVMs.put(vmId, vdsmVm); } setReturnValue(returnVMs); }
private org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm createVdsmVm(org.ovirt.engine.core.common.businessentities.VmDynamic dbVmDyanmic, java.util.Map<java.lang.String, java.lang.Object> xmlRpcStruct, java.lang.Double notifyTime) { org.ovirt.engine.core.compat.Guid vmId = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getVmId(xmlRpcStruct); org.ovirt.engine.core.common.businessentities.VmDynamic clonedVmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(dbVmDyanmic); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(clonedVmDynamic, xmlRpcStruct, vdsManager.getCopyVds()); return new org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm(vmId, notifyTime).setVmDynamic(clonedVmDynamic); }
private boolean canRemoveVmImageDisk() { if (!(listVms.isEmpty())) { org.ovirt.engine.core.compat.Guid storagePoolId = listVms.get(0).getStoragePoolId(); org.ovirt.engine.core.common.businessentities.StoragePool sp = org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.getStoragePoolDao().get(storagePoolId); if (!(validate(new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator(sp).isUp()))) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskList = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(java.util.Collections.singletonList(getDisk()), true, false, true); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(diskList); if (!(validate(diskImagesValidator.diskImagesNotLocked()))) { return false; } } org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator(); for (org.ovirt.engine.core.common.businessentities.VM vm : listVms) { if ((!(validate(snapshotsValidator.vmNotDuringSnapshot(vm.getId())))) || (!(validate(snapshotsValidator.vmNotInPreview(vm.getId()))))) { return false; } } return true; }
public static java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getPluggedActiveImagesForVm(org.ovirt.engine.core.compat.Guid vmId) { return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(vmId, true), true, false, true); }
@java.lang.Override protected void chooseDisksSourceDomains() { diskInfoSourceMap = new java.util.HashMap(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDiskImages = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(getImagesToCheckDestinationStorageDomains(), true, false, false); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : templateDiskImages) { org.ovirt.engine.core.compat.Guid diskId = disk.getId(); java.util.Set<org.ovirt.engine.core.compat.Guid> validDomainsForDisk = validDisksDomains.get(diskId); org.ovirt.engine.core.compat.Guid destinationDomain = retrieveDestinationDomainForDisk(diskId); if (validDomainsForDisk.contains(destinationDomain)) { diskInfoSourceMap.put(diskId, destinationDomain); } else { diskInfoSourceMap.put(diskId, validDomainsForDisk.iterator().next()); } } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDiskImages = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getVmTemplate().getDiskTemplateMap().values(), true, false, false); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage dit : templateDiskImages) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = diskInfoDestinationMap.get(dit.getId()); if (!(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.checkImageConfiguration(destStorages.get(diskImage.getStorageIds().get(0)).getStorageStaticData(), diskImage, org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getReturnValue().getValidationMessages()))) { return false; } } return true; }
@java.lang.Override protected boolean verifySourceDomains() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> poolDomainsMap = org.ovirt.engine.core.common.businessentities.Entities.businessEntitiesById(org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getPoolDomains()); java.util.EnumSet<org.ovirt.engine.core.common.businessentities.StorageDomainStatus> validDomainStatuses = java.util.EnumSet.of(StorageDomainStatus.Active); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDiskImages = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(getImagesToCheckDestinationStorageDomains(), true, false, false); validDisksDomains = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.findDomainsInApplicableStatusForDisks(templateDiskImages, poolDomainsMap, validDomainStatuses); return validate(new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(templateDiskImages).diskImagesOnAnyApplicableDomains(validDisksDomains, poolDomainsMap, EngineMessage.ACTION_TYPE_FAILED_NO_VALID_DOMAINS_STATUS_FOR_TEMPLATE_DISKS, validDomainStatuses)); }
protected void moveOrCopyAllImageGroups() { moveOrCopyAllImageGroups(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getId(), org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap().values(), false, false, true)); copyAllMemoryImages(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getId()); }
public static void filterImageDisksForVM(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(vm.getDiskMap().values(), false, false, true); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> filteredCinderDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(vm.getDiskMap().values()); filteredDisks.addAll(filteredCinderDisks); @java.lang.SuppressWarnings("unchecked") java.util.Collection<? extends org.ovirt.engine.core.common.businessentities.storage.Disk> vmDisksToRemove = org.apache.commons.collections.CollectionUtils.subtract(vm.getDiskMap().values(), filteredDisks); vm.clearDisks(); org.ovirt.engine.core.bll.VmHandler.updateDisksForVm(vm, filteredDisks); for (org.ovirt.engine.core.common.businessentities.storage.Disk diskToRemove : vmDisksToRemove) { vm.getManagedVmDeviceMap().remove(diskToRemove.getId()); } }
@java.lang.Override protected java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAdjustedDiskImagesFromConfiguration() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue vdcReturnValue = runInternalQuery(VdcQueryType.GetAllDisksByVmId, new org.ovirt.engine.core.common.queries.IdQueryParameters(oldVmId)); java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> loadedImages = ((vdcReturnValue.getReturnValue()) != null) ? ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk>) (vdcReturnValue.getReturnValue())) : new java.util.ArrayList<>(); if ((diskImagesFromConfiguration) == null) { diskImagesFromConfiguration = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(loadedImages, false, true, true); diskImagesFromConfiguration.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(loadedImages, true)); } return diskImagesFromConfiguration; }
public org.ovirt.engine.core.bll.ValidationResult vmNotHavingDeviceSnapshotsAttachedToOtherVms(boolean onlyPlugged) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> vmDisks = getDbFacade().getDiskDao().getAllForVm(vm.getId()); org.ovirt.engine.core.bll.ValidationResult result = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(vmDisks, true, false, true)).diskImagesSnapshotsNotAttachedToOtherVms(onlyPlugged); if (result != (org.ovirt.engine.core.bll.ValidationResult.VALID)) { return result; } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters buildLiveSnapshotParameters(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> pluggedDisksForVm = org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm().getId(), true); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredPluggedDisksForVm = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(pluggedDisksForVm, false, true, true); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredPluggedDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.imagesIntersection(filteredPluggedDisksForVm, getDisksList()); org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm().getId(), filteredPluggedDisks); if (isMemorySnapshotSupported()) { parameters.setMemoryVolume(snapshot.getMemoryVolume()); } parameters.setVmFrozen(shouldFreezeOrThawVm()); return parameters; }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImages(java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { if ((cachedImagesDisks) == null) { cachedImagesDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(disks, true, true, true); } return cachedImagesDisks; }
protected boolean setAndValidateDiskProfiles() { if (((diskInfoDestinationMap) != null) && (!(diskInfoDestinationMap.isEmpty()))) { java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskImage, org.ovirt.engine.core.compat.Guid> map = new java.util.HashMap<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(diskInfoDestinationMap.values(), true, false, true); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages) { map.put(diskImage, diskImage.getStorageIds().get(0)); } return validate(org.ovirt.engine.core.bll.profiles.DiskProfileHelper.setAndValidateDiskProfiles(map, org.ovirt.engine.core.bll.AddVmCommand.getCurrentUser())); } return true; }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImagesToValidate() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(disks, true, false, true); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(disks); allDisks.addAll(cinderDisks); return allDisks; }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImagesToValidate() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getDiskDao().getAllForVm(getSourceVmFromDb().getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(disks, true, false, true); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(disks, true); allDisks.addAll(cinderDisks); return allDisks; }
protected boolean checkImagesStatus() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksToCheck = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getVmId()), true, false, true); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(disksToCheck); return (validate(diskImagesValidator.diskImagesNotLocked())) && (validate(diskImagesValidator.diskImagesHaveNotExceededMaxNumberOfVolumesInImageChain())); }
protected boolean performImagesChecks() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImagesToCheck = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(getImagesList(), true, false, true); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(diskImagesToCheck); return validate(diskImagesValidator.diskImagesNotLocked()); }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksBasedOnImage() { if ((disksImages) == null) { disksImages = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm().getDiskMap().values(), true, false, true); } return disksImages; }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) { imagesToPreview = ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks()) != null) ? org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks() : org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getDbFacade().getDiskImageDao().getAllSnapshotsForVmSnapshot(getDstSnapshot().getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(imagesToPreview, true, true, false); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }
protected java.lang.String generateVmConfiguration(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices) { if (((vm.getInterfaces()) == null) || (vm.getInterfaces().isEmpty())) { vm.setInterfaces(getVmNetworkInterfaceDao().getAllForVm(vm.getId())); } if (org.apache.commons.lang.StringUtils.isEmpty(vm.getVmtName())) { org.ovirt.engine.core.common.businessentities.VmTemplate t = getVmTemplateDao().get(vm.getVmtGuid()); vm.setVmtName(t.getName()); } if (vmDevices == null) { vmDeviceUtils.setVmDevices(vm.getStaticData()); } else { vm.getStaticData().setManagedDeviceMap(vmDevices); } if (disks == null) { disks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(getDiskDao().getAllForVm(vm.getId()), false, true, true); disks.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getCinderLeafImages(getDiskDao().getAllForVm(vm.getId()), false)); } populateDisksWithVmData(disks, vm.getId()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : disks) { image.setStorageIds(null); } return new org.ovirt.engine.core.utils.ovf.OvfManager().exportVm(vm, new java.util.ArrayList(disks), org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vm)); }
private java.lang.String buildMetadataDictionaryForVm(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allVmImages = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(vm.getDiskList(), false, true, true); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : filteredDisks) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getAllImageSnapshots(diskImage.getImageId()); images.stream().forEach(( d) -> d.setDiskVmElements(java.util.Collections.singletonList(diskImage.getDiskVmElementForVm(vm.getId())))); allVmImages.addAll(images); } return ovfManager.exportVm(vm, allVmImages, org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vm)); }
protected org.ovirt.engine.core.bll.ValidationResult isImagesExceededVolumesInImageChain() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allImageDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(getDiskDao().getAllForVm(vm.getId()), false, true, false); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidatorForChain = createDiskImageValidator(allImageDisks); return diskImagesValidatorForChain.diskImagesHaveNotExceededMaxNumberOfVolumesInImageChain(); }
protected org.ovirt.engine.core.bll.ValidationResult hasSpaceForSnapshots() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(vm.getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(disks, false, true, false); java.util.Set<org.ovirt.engine.core.compat.Guid> sdIds = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getAllStorageIdsForImageIds(allDisks); org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator msdValidator = getStorageDomainsValidator(sdIds); org.ovirt.engine.core.bll.ValidationResult retVal = msdValidator.allDomainsWithinThresholds(); if (retVal == (org.ovirt.engine.core.bll.ValidationResult.VALID)) { return msdValidator.allDomainsHaveSpaceForNewDisks(allDisks); } return retVal; }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmImageDisks() { if ((cachedVmImageDisks) == null) { cachedVmImageDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(getVmDisks(), true, false, false); cachedVmImageDisks.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(getVmDisks(), true)); } return cachedVmImageDisks; }
protected boolean validateSpaceRequirements() { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.fillImagesBySnapshots(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksList = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm().getDiskMap().values(), true, false, true); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksListForStorageChecks = createDiskDummiesForSpaceValidations(disksList); org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator multipleSdValidator = getStorageDomainsValidator(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm().getStoragePoolId(), getStorageGuidSet()); return (validate(multipleSdValidator.allDomainsWithinThresholds())) && (validate(multipleSdValidator.allDomainsHaveSpaceForClonedDisks(disksListForStorageChecks))); }
protected void addVmTemplateImages(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> srcDeviceIdToTargetDeviceIdMapping) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(images, true, false, true); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages) { addVmTemplateImage(srcDeviceIdToTargetDeviceIdMapping, diskImage); } }
protected boolean addVmImages() { if (!(vmDisksSource.getDiskTemplateMap().isEmpty())) { if ((org.ovirt.engine.core.bll.AddVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { log.error("Cannot add images. VM is not Down"); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IRS_IMAGE_STATUS_ILLEGAL); } lockVM(); java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDisks = getImagesToCheckDestinationStorageDomains(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(templateDisks, true, false, true); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : diskImages) { org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalActionWithTasksContext(getDiskCreationCommandType(), buildDiskCreationParameters(image)); if (!(result.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(result.getFault().getError()); } else { org.ovirt.engine.core.bll.AddVmCommand.getTaskIdList().addAll(result.getInternalVdsmTaskIdList()); org.ovirt.engine.core.common.businessentities.storage.DiskImage newImage = result.getActionReturnValue(); srcDiskIdToTargetDiskIdMapping.put(image.getId(), newImage.getId()); } } addVmCinderDisks(templateDisks); } return true; }
private void removeDiskImages() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(getVm().getDiskMap().values(), true, false, true); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images) { image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); image.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); } removeVmImages(images); }
@java.lang.Override protected java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAdjustedDiskImagesFromConfiguration() { if ((diskImagesFromConfiguration) == null) { diskImagesFromConfiguration = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(vmFromConfiguration.getDiskMap().values(), false, true, true); diskImagesFromConfiguration.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(vmFromConfiguration.getDiskMap().values(), true)); adjustDisksImageConfiguration(diskImagesFromConfiguration); } return diskImagesFromConfiguration; }
@java.lang.Override protected void executeCommand() { if (org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplate().isBaseTemplate()) { shiftBaseTemplateToSuccessor(); } java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> templateImages = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId()); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(templateImages); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(templateImages, false, false, true); org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId(), org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getCompensationContext()); if ((!(diskImages.isEmpty())) || (!(cinderDisks.isEmpty()))) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { if ((!(diskImages.isEmpty())) && (removeVmTemplateImages())) { org.ovirt.engine.core.bll.VmHandler.removeVmInitFromDB(getVmTemplate()); setSucceeded(true); } if (!(cinderDisks.isEmpty())) { removeCinderDisks(cinderDisks); setSucceeded(true); } return null; }); } if (org.ovirt.engine.core.bll.RemoveVmTemplateCommand.noAsyncOperations()) { handleEndAction(); } }
public java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmImagesFromDb(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allVmImages = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(vm.getDiskList(), false, true, true); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : filteredDisks) { allVmImages.addAll(getAllImageSnapshots(diskImage)); } for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : allVmImages) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskVmElementDao().get(new org.ovirt.engine.core.common.businessentities.VmDeviceId(disk.getId(), vm.getId())); disk.setDiskVmElements(java.util.Collections.singletonList(dve)); } return allVmImages; }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmDisksFromDB() { if ((cachedDisksFromDb) == null) { cachedDisksFromDb = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVm().getDiskMap().values(), false, true, true); cachedDisksFromDb.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVm().getDiskMap().values(), true)); } return cachedDisksFromDb; }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImageTemplates() { if ((imageTemplates) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> allImages = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId()); imageTemplates = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(allImages, false, false, true); imageTemplates.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(allImages, true)); } return imageTemplates; }
private void buildVmGraphicsDevicesFromDb(java.util.Map<java.lang.String, java.lang.Object> extraSpecParams) { buildVmDevicesFromDb(VmDeviceGeneralType.GRAPHICS, false, extraSpecParams); java.lang.String legacyDisplay = deriveDisplayTypeLegacy(); if (legacyDisplay != null) { createInfo.put(VdsProperties.display, legacyDisplay); } }

public org.ovirt.engine.core.bll.CommandMultiAsyncTasks getCommandMultiAsyncTasks() { org.ovirt.engine.core.bll.CommandMultiAsyncTasks entityInfo = null; synchronized(org.ovirt.engine.core.bll.tasks.CommandAsyncTask._lockObject) { entityInfo = org.ovirt.engine.core.bll.tasks.CommandAsyncTask._multiTasksByCommandIds.get(getCommandId()); } return entityInfo; }
private void handleEndActionRuntimeException(org.ovirt.engine.core.bll.CommandMultiAsyncTasks commandInfo, org.ovirt.engine.core.common.businessentities.AsyncTask dbAsyncTask) { try { org.ovirt.engine.core.common.action.VdcActionType actionType = getParameters().getDbAsyncTask().getActionType(); org.ovirt.engine.core.bll.tasks.CommandAsyncTask.log.info(("CommandAsyncTask::HandleEndActionResult: endAction for action type '{}' threw an" + " unrecoverable RuntimeException the task will be cleared."), actionType); commandInfo.clearTaskByVdsmTaskId(dbAsyncTask.getVdsmTaskId()); removeTaskFromDB(); if (commandInfo.getAllCleared()) { org.ovirt.engine.core.bll.tasks.CommandAsyncTask.log.info(("CommandAsyncTask::HandleEndActionRuntimeException: Removing CommandMultiAsyncTasks" + " object for entity '{}'"), commandInfo.getCommandId()); synchronized(org.ovirt.engine.core.bll.tasks.CommandAsyncTask._lockObject) { org.ovirt.engine.core.bll.tasks.CommandAsyncTask._multiTasksByCommandIds.remove(commandInfo.getCommandId()); } } } catch (java.lang.RuntimeException ex) { org.ovirt.engine.core.bll.tasks.CommandAsyncTask.log.error("CommandAsyncTask::HandleEndActionResult [within thread]: an exception has been thrown", ex); } }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("availableUpdates") public void availableUpdates() { if (((cachedVds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) && ((cachedVds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.NonOperational))) { org.ovirt.engine.core.vdsbroker.VdsManager.log.warn("Check for available updates is skipped for host '{}' due to unsupported host status '{}' ", cachedVds.getName(), cachedVds.getStatus()); return; } boolean updateAvailable; try { updateAvailable = resourceManager.isUpdateAvailable(cachedVds); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.VdsManager.log.error("Failed to check if updates are available for host '{}'", cachedVds.getName()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLog = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLog.setVds(cachedVds); auditLog.addCustomValue("Message", org.apache.commons.lang.StringUtils.defaultString(e.getMessage(), e.getCause().toString())); auditLogDirector.log(auditLog, AuditLogType.HOST_AVAILABLE_UPDATES_FAILED); return; } synchronized(getLockObj()) { if (updateAvailable != (cachedVds.isUpdateAvailable())) { cachedVds.getDynamicData().setUpdateAvailable(updateAvailable); vdsDynamicDao.updateUpdateAvailable(cachedVds.getId(), updateAvailable); } } }
public void syncSearch(org.ovirt.engine.core.common.queries.VdcQueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase) { vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, vdcQueryParametersBase, new SetItemsAsyncQuery()); setIsQueryFirstTime(false); }
public void documentModel(org.ovirt.api.metamodel.concepts.Model model) { docBuffer.addLine("= Model"); docBuffer.addLine(); docBuffer.addLine(":leveloffset: 1"); model.documents().sorted().forEach(this::addDocument); docBuffer.addLine(":leveloffset: 0"); docBuffer.addId("requests"); docBuffer.addLine("== Requests"); docBuffer.addLine(); docBuffer.addLine("This section enumerates all the requests that are available in the API."); docBuffer.addLine(); model.points().sorted(java.util.Comparator.comparing(this::getSortKey)).forEach(this::documentRequest); docBuffer.addLine(); docBuffer.addId("services"); docBuffer.addLine("== Services"); docBuffer.addLine(); docBuffer.addLine("This section enumerates all the services that are available in the API."); docBuffer.addLine(); docBuffer.addLine(); model.services().sorted().forEach(this::documentService); docBuffer.addId("types"); docBuffer.addLine("== Types"); docBuffer.addLine(); docBuffer.addLine("This section enumerates all the data types that are available in the API."); docBuffer.addLine(); model.types().sorted().forEach(this::documentType); }
public org.ovirt.engine.core.bll.ValidationResult isStorageFormatCompatibleWithDomain() { org.ovirt.engine.core.common.businessentities.StorageFormatType storageFormat = storageDomain.getStorageFormat(); org.ovirt.engine.core.common.businessentities.storage.StorageType storageType = storageDomain.getStorageType(); org.ovirt.engine.core.common.businessentities.StorageDomainType storageDomainFunction = storageDomain.getStorageDomainType(); boolean validationSucceeded = true; if (storageFormat == (org.ovirt.engine.core.common.businessentities.StorageFormatType.V2)) { if (!((storageDomainFunction.isDataDomain()) && (storageType.isBlockDomain()))) { validationSucceeded = false; } } if (storageFormat == (org.ovirt.engine.core.common.businessentities.StorageFormatType.V3)) { if (!(storageDomainFunction.isDataDomain())) { validationSucceeded = false; } } return validationSucceeded ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_FORMAT_ILLEGAL_HOST, java.lang.String.format("$storageFormat %1$s", storageDomain.getStorageFormat())); }
private static void setRngSupportedSourcesToVds(org.ovirt.engine.core.common.businessentities.VDS vds, java.util.Map<java.lang.String, java.lang.Object> xmlRpcStruct) { vds.getSupportedRngSources().clear(); java.lang.String rngSourcesFromStruct = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignStringValueFromArray(xmlRpcStruct, VdsProperties.rngSources); if (rngSourcesFromStruct != null) { vds.getSupportedRngSources().addAll(org.ovirt.engine.core.common.businessentities.VmRngDevice.csvToSourcesSet(rngSourcesFromStruct.toUpperCase())); } }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(vmDynamic, vmGuestAgentInterfaces, vmStatistics, lunsMap, interfaceStatistics, vNumaNodeStatisticsList); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm)) { return false; } org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm other = ((org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm) (obj)); return (((((java.util.Objects.equals(vmDynamic, other.vmDynamic)) && (java.util.Objects.equals(vmGuestAgentInterfaces, other.vmGuestAgentInterfaces))) && (java.util.Objects.equals(vmStatistics, other.vmStatistics))) && (java.util.Objects.equals(vNumaNodeStatisticsList, other.vNumaNodeStatisticsList))) && (java.util.Objects.equals(lunsMap, other.lunsMap))) && (java.util.Objects.equals(interfaceStatistics, other.interfaceStatistics)); }
private void initHandlers() { tagsHandler = org.ovirt.engine.core.bll.HandlersFactory.createTagsHandler(); org.ovirt.engine.core.searchbackend.BaseConditionFieldAutoCompleter.tagsHandler = tagsHandler; org.ovirt.engine.core.bll.VmHandler.init(); org.ovirt.engine.core.bll.VdsHandler.init(); org.ovirt.engine.core.bll.VmTemplateHandler.init(); org.ovirt.engine.core.bll.Backend.log.info("Completed initializing handlers"); }


@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { java.lang.String scope = java.lang.String.format("ovirt-app-admin ovirt-app-portal ovirt-ext=auth:sequence-priority=%s", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty(authSequencePriorityPropertyName)); request.getSession(true).setAttribute("app_url", request.getParameter("app_url")); java.lang.String redirectUri = java.lang.String.format("%s://%s:%s%s", request.getScheme(), org.ovirt.engine.core.aaa.filters.FiltersHelper.getRedirectUriServerName(request.getServerName()), request.getServerPort(), postActionUrl); response.sendRedirect(new org.ovirt.engine.core.uutils.net.URLBuilder(org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineSsoUrl(request), "/oauth/authorize").addParameter("client_id", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_CLIENT_ID")).addParameter("response_type", "code").addParameter("engine_url", org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineUrl(request)).addParameter("redirect_uri", redirectUri).addParameter("scope", scope).build()); }
protected void closeChannel() { try { if ((this.channel) != null) { this.channel.close(); } } catch (java.io.IOException e) { } finally { this.channel = null; } }


public java.util.Map activateStorageDomain(java.lang.String sdUUID, java.lang.String spUUID) { try { log.info("Activating storage domain, spUUID: {} sdUUID: {}", new java.lang.Object[]{ spUUID, sdUUID }); final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = dataCenter.getStorageDomainMap().get(sdUUID); if (storageDomain != null) { storageDomain.setDomainStatus(StorageDomain.DomainStatus.ACTIVE); updateStorageDomain(storageDomain); } return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }

public static org.ovirt.engine.core.common.action.VdcReturnValueBase canDoAction(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, org.ovirt.engine.core.bll.job.ExecutionContext executionContext, boolean isInternal) { org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.tasks.CommandHelper.buildCommand(actionType, parameters, executionContext, CommandStatus.NOT_STARTED); command.setInternalExecution(isInternal); return command.validateOnly(); }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.tasks.CommandHelper.canDoAction(VdcActionType.AddDisk, getAddDiskParameters(), org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand.getContext().clone().getExecutionContext(), true); org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand.getReturnValue().setValidationMessages(returnValue.getValidationMessages()); return returnValue.isValid(); }
@java.lang.Override public void invoke(org.ovirt.engine.api.extensions.ExtMap context, java.util.Map<java.lang.String, java.lang.Object> args) { context.mput(Schema.InvokeKeys.MODIFICATION_TYPE, Sql.ModificationTypes.INSERT); context.put(Schema.InvokeKeys.ENTITY_KEYS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.getGroupKeys(args, context.get(ContextKeys.POSITIONAL, java.lang.String.class))); if (!(context.containsKey(ContextKeys.EXIT_STATUS))) { org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.commands.get("_schema-modify").invoke(context); context.put(ContextKeys.EXIT_STATUS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.SUCCESS); } }
public void onMaintenance() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getConfirmWindow())); if ((model.getProgress()) != null) { return; } java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<>(); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> vdss = new java.util.ArrayList<>(); for (java.lang.Object item : org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VDS vds = ((org.ovirt.engine.core.common.businessentities.VDS) (item)); vdss.add(vds.getId()); } list.add(new org.ovirt.engine.core.common.action.MaintenanceNumberOfVdssParameters(vdss, false, model.getReason().getEntity(), model.getForce().getEntity())); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.MaintenanceNumberOfVdss, list, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancelConfirm(); } }, model); }


private static org.ovirt.engine.core.dao.PermissionDao getPermissionDao() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getPermissionDao(); }


private static void addToAuditLogErrorMessage(java.lang.String problematicRepoFilesList) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("imageDomains", problematicRepoFilesList); org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.auditLogDirector.log(logable, AuditLogType.REFRESH_REPOSITORY_IMAGE_LIST_FAILED); }
private boolean refreshRepos(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType) { boolean refreshResult; java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> tempProblematicRepoFileList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(storageDomainId); if ((storageDomain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) { refreshResult = refreshIsoDomain(storageDomainId, tempProblematicRepoFileList, imageType); } else if (((storageDomain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Image)) && ((storageDomain.getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLANCE))) { refreshResult = refreshImageDomain(storageDomain, imageType); } else { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.log.error("Unable to refresh the storage domain '{}', Storage Domain Type '{}' not supported", storageDomainId, storageDomain.getStorageDomainType()); return false; } org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.handleErrorLog(tempProblematicRepoFileList); if (refreshResult) { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.addToAuditLogSuccessMessage(storageDomain.getStorageName(), imageType.name()); } return refreshResult; }
private static java.util.concurrent.locks.Lock getSyncObject(org.ovirt.engine.core.compat.Guid domainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType) { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.ImageFileType> domainPerFileType = new org.ovirt.engine.core.common.utils.Pair(domainId, imageType); org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.syncDomainForFileTypeMap.putIfAbsent(domainPerFileType, new java.util.concurrent.locks.ReentrantLock()); return org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.syncDomainForFileTypeMap.get(domainPerFileType); }
private static boolean handleErrorLog(java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> problematicFileListForHandleError) { boolean hasProblematic = false; if ((problematicFileListForHandleError != null) && (!(problematicFileListForHandleError.isEmpty()))) { java.lang.StringBuilder problematicStorages = new java.lang.StringBuilder(); java.lang.StringBuilder problematicIsoDomainsForAuditLog = new java.lang.StringBuilder(); java.util.Set<java.lang.String> storageDomainNames = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.storage.RepoImage repoMap : problematicFileListForHandleError) { problematicStorages.append(org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.buildDetailedProblematicMapMsg(repoMap)); storageDomainNames.add(org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.buildDetailedAuditLogMessage(repoMap)); } for (java.lang.String domainName : storageDomainNames) { problematicIsoDomainsForAuditLog.append(" ").append(domainName); } hasProblematic = true; org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.log.error("The following storage domains had a problem retrieving data from VDSM: {}", problematicStorages); org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.addToAuditLogErrorMessage(problematicIsoDomainsForAuditLog.toString()); } return hasProblematic; }
private boolean refreshVdsmFileList(org.ovirt.engine.core.compat.Guid repoStoragePoolId, org.ovirt.engine.core.compat.Guid repoStorageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> fileStats, org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.FileListRefreshed fileListRefreshed) { if (repoStorageDomainId == null) { return false; } boolean vdsmRefreshOk = fileStats != null; org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.log.debug("The refresh process from VDSM, for {}, {}.", imageFileType, succeededOrFailed(vdsmRefreshOk)); if (!vdsmRefreshOk) { return false; } boolean refreshSucceeded = org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.refreshIsoFileListMetaData(repoStorageDomainId, repoStorageDom, fileStats, imageFileType); if (refreshSucceeded && (fileListRefreshed != null)) { fileListRefreshed.onFileListRefreshed(repoStoragePoolId, fileStats.keySet()); } return refreshSucceeded; }
private static void addToAuditLogSuccessMessage(java.lang.String IsoDomain, java.lang.String imageType) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("imageDomains", java.lang.String.format("%s (%s file type)", IsoDomain, imageType)); org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.auditLogDirector.log(logable, AuditLogType.REFRESH_REPOSITORY_IMAGE_LIST_SUCCEEDED); }
private void mockIsoDomainListSyncronizer() { doReturn(isoDomainListSyncronizer).when(command).getIsoDomainListSyncronizer(); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("fetchIsoDomains") public synchronized void fetchIsoDomains() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> repofileList = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getRepoFileMetaDataDao().getAllRepoFilesForAllStoragePools(StorageDomainType.ISO, StoragePoolStatus.Up, StorageDomainStatus.Active, VDSStatus.Up); resetProblematicList(); java.util.List<java.util.concurrent.Callable<java.lang.Void>> tasks = new java.util.ArrayList<>(); for (final org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage : repofileList) { if (shouldRefreshIsoDomain(repoImage.getLastRefreshed())) { tasks.add(() -> { updateCachedIsoFileListFromVdsm(repoImage); return null; }); } else { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.log.debug(("Automatic refresh process for '{}' file type in storage domain id '{}' was not performed" + " since refresh time out did not passed yet."), repoImage.getFileType(), repoImage.getRepoDomainId()); } } org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.invokeAll(tasks); org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.handleErrorLog(new java.util.ArrayList(problematicRepoFileList)); }
private void setJobStatusExpectations(org.ovirt.engine.core.compat.Guid jobId, org.ovirt.engine.core.common.job.JobExecutionStatus jobStatus, org.ovirt.engine.core.common.queries.VdcQueryReturnValue monitorResult, org.ovirt.engine.core.common.action.VdcReturnValueBase result) { expect(result.getJobId()).andReturn(jobId).anyTimes(); if (jobId != null) { org.ovirt.engine.core.common.job.Job jobMock = control.createMock(org.ovirt.engine.core.common.job.Job.class); expect(jobMock.getStatus()).andReturn(jobStatus); expect(monitorResult.getReturnValue()).andReturn(jobMock).anyTimes(); expect(backend.runQuery(eq(VdcQueryType.GetJobByJobId), eqQueryParams(org.ovirt.engine.core.common.queries.IdQueryParameters.class, addSession("Id"), addSession(jobId)))).andReturn(monitorResult); } }
@org.junit.After public void tearDown() { java.util.Locale.setDefault(locale); control.verify(); org.ovirt.engine.api.restapi.invocation.CurrentManager.remove(); }
protected <E> void setUpGetEntityExpectations(org.ovirt.engine.core.common.queries.VdcQueryType query, java.lang.Class<? extends org.ovirt.engine.core.common.queries.VdcQueryParametersBase> clz, java.lang.String[] names, java.lang.Object[] values, E entity) throws java.lang.Exception { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = control.createMock(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); expect(backend.runQuery(eq(query), eqQueryParams(clz, addSession(names), addSession(values)))).andReturn(queryResult); expect(queryResult.getSucceeded()).andReturn(true).anyTimes(); expect(queryResult.getReturnValue()).andReturn(entity).anyTimes(); }
protected void setUpQueryExpectations(java.lang.String query, java.lang.Object failure) throws java.lang.Exception { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = control.createMock(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); org.ovirt.engine.core.common.queries.SearchParameters params = new org.ovirt.engine.core.common.queries.SearchParameters(((prefix) + query), searchType); expect(queryResult.getSucceeded()).andReturn((failure == null)).anyTimes(); if (failure == null) { java.util.List<Q> entities = new java.util.ArrayList<>(); for (int i = 0; i < (NAMES.length); i++) { entities.add(org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResourceTest.getEntity(i)); } expect(queryResult.getReturnValue()).andReturn(entities).anyTimes(); } else { if (failure instanceof java.lang.String) { expect(queryResult.getExceptionString()).andReturn(((java.lang.String) (failure))).anyTimes(); org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResourceTest.setUpL10nExpectations(((java.lang.String) (failure))); } else if (failure instanceof java.lang.Exception) { expect(queryResult.getExceptionString()).andThrow(((java.lang.Exception) (failure))).anyTimes(); } } expect(backend.runQuery(eq(VdcQueryType.Search), eqSearchParams(params))).andReturn(queryResult); control.replay(); }
protected <E> void setUpGetEntityExpectations(java.lang.String query, org.ovirt.engine.core.common.interfaces.SearchType type, E entity) throws java.lang.Exception { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = control.createMock(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); org.ovirt.engine.core.common.queries.SearchParameters params = new org.ovirt.engine.core.common.queries.SearchParameters(query, type); expect(backend.runQuery(eq(VdcQueryType.Search), eqSearchParams(params))).andReturn(queryResult); expect(queryResult.getSucceeded()).andReturn(true).anyTimes(); java.util.List<E> entities = new java.util.ArrayList<>(); entities.add(entity); expect(queryResult.getReturnValue()).andReturn(entities).anyTimes(); }
protected void setUpL10nExpectations(java.util.ArrayList<java.lang.String> errors) { org.ovirt.engine.core.common.interfaces.ErrorTranslator errorTranslator = control.createMock(org.ovirt.engine.core.common.interfaces.ErrorTranslator.class); if (!(locales.isEmpty())) { expect(errorTranslator.translateErrorText(eq(errors), eq(locales.get(0)))).andReturn(mockl10n(errors)).anyTimes(); } else { expect(errorTranslator.translateErrorText(eq(errors))).andReturn(mockl10n(errors)).anyTimes(); } expect(backend.getErrorsTranslator()).andReturn(errorTranslator); }
protected void setUpEntityQueryExpectations(org.ovirt.engine.core.common.queries.VdcQueryType query, java.lang.Class<? extends org.ovirt.engine.core.common.queries.VdcQueryParametersBase> queryClass, java.lang.String[] queryNames, java.lang.Object[] queryValues, java.lang.Object queryReturn, java.lang.Object failure) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = control.createMock(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); expect(queryResult.getSucceeded()).andReturn((failure == null)).anyTimes(); if (failure == null) { expect(queryResult.getReturnValue()).andReturn(queryReturn).anyTimes(); } else { if (failure instanceof java.lang.String) { expect(queryResult.getExceptionString()).andReturn(((java.lang.String) (failure))).anyTimes(); setUpL10nExpectations(((java.lang.String) (failure))); } else if (failure instanceof java.lang.Exception) { expect(queryResult.getExceptionString()).andThrow(((java.lang.Exception) (failure))).anyTimes(); } } if (queryClass == (org.ovirt.engine.core.common.queries.GetPermissionsForObjectParameters.class)) { expect(backend.runQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))).andReturn(queryResult).anyTimes(); } else { expect(backend.runQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))).andReturn(queryResult); } }
@org.junit.Test public void storageDomainWithId() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); b.setStorageDomainId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID); b.setStoragePoolId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID); final org.ovirt.engine.core.common.businessentities.StorageDomain s = b.getStorageDomain(); assertEquals(b.STORAGE_DOMAIN, s); }
@org.junit.Test public void storageDomainWithNullId() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); b.setStorageDomainId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2); final org.ovirt.engine.core.common.businessentities.StorageDomain s = b.getStorageDomain(); assertEquals(b.STORAGE_DOMAIN, s); }



protected void handleStepsOnEnd() { if (((getCommandStep()) != null) && ((getExecutionContext().getStep()) != null)) { executionHandler.endTaskStep(getExecutionContext().getStep().getId(), (isEndSuccessfully() ? org.ovirt.engine.core.common.job.JobExecutionStatus.FINISHED : org.ovirt.engine.core.common.job.JobExecutionStatus.FAILED)); } if ((!(hasTaskHandlers())) || ((getExecutionIndex()) == ((getTaskHandlers().size()) - 1))) { executionHandler.startFinalizingStep(getExecutionContext()); } }
public static void checkForceShow(final com.google.gwt.dom.client.NativeEvent event) { com.google.gwt.user.client.Timer timer = new com.google.gwt.user.client.Timer() { @java.lang.Override public void run() { java.lang.String[] pos = org.ovirt.engine.ui.common.utils.JqueryUtils.getMousePosition().split(","); int x = java.lang.Integer.parseInt(pos[0]); int y = java.lang.Integer.parseInt(pos[1]); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.logger.finer(("checking for force show. any tooltip visible? " + (org.ovirt.engine.ui.common.utils.JqueryUtils.anyTooltipVisible()))); if (!(org.ovirt.engine.ui.common.utils.JqueryUtils.anyTooltipVisible())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.logger.finer("force showing closed tooltip"); org.ovirt.engine.ui.common.utils.JqueryUtils.fireMouseEnter(x, y); } } }; timer.schedule(50); }
public static void addTooltipsEvents(java.util.Set<java.lang.String> set) { set.add(BrowserEvents.MOUSEOVER); set.add(BrowserEvents.MOUSEOUT); set.add(BrowserEvents.MOUSEDOWN); }
public static boolean isTooltipConfigured(com.google.gwt.dom.client.Element parent) { return org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip.isTooltipConfigured(parent.getId()); }
public static void updateTooltipContent(com.google.gwt.safehtml.shared.SafeHtml newContent, com.google.gwt.dom.client.Element element) { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip toolTip = org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip.getTooltip(element.getId()); toolTip.setContent(newContent); toolTip.reconfigure(); }
public static org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip addTooltipToElement(com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.Element element, org.gwtbootstrap3.client.ui.constants.Placement placement) { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip tooltip = new org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip(element); tooltip.setContent(tooltipContent); tooltip.setPlacement(placement); tooltip.reconfigure(); java.lang.String cellId = element.getId(); if ((cellId == null) || (cellId.isEmpty())) { cellId = com.google.gwt.user.client.DOM.createUniqueId(); element.setId(cellId); } org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipDetails details = new org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipDetails(); details.setTooltip(tooltip); details.setInnerHTML(element.getInnerHTML()); org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip.getRegistry().put(cellId, details); return tooltip; }
public static void reapAllTooltips() { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip.reapAll(); }
public static void handleTooltipEvent(com.google.gwt.dom.client.Element parent, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event) { if (BrowserEvents.MOUSEOVER.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.configureTooltip(parent, tooltipContent, event); } if (BrowserEvents.MOUSEOUT.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.reapAllTooltips(); } if (BrowserEvents.MOUSEDOWN.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.hideAllTooltips(); } }
public static void configureTooltip(final com.google.gwt.dom.client.Element parent, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, final com.google.gwt.dom.client.NativeEvent event) { if ((tooltipContent == null) || (tooltipContent.asString().trim().isEmpty())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.logger.finer("null or empty tooltip content"); } else if (org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.isTooltipConfigured(parent)) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.logger.finer("tooltip already configured"); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.checkForceShow(event); } else { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.logger.finer("tooltip not configured yet -- adding"); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltipContent, parent); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.logger.finer("firing native event to jquery tooltip"); event.stopPropagation(); event.preventDefault(); com.google.gwt.dom.client.Node node = parent.getChild(0); if (node instanceof com.google.gwt.dom.client.Element) { com.google.gwt.dom.client.Element e = ((com.google.gwt.dom.client.Element) (node)); com.google.gwt.dom.client.NativeEvent newEvent = com.google.gwt.dom.client.Document.get().createMouseOverEvent(0, event.getScreenX(), event.getScreenY(), event.getClientX(), event.getClientY(), event.getCtrlKey(), event.getAltKey(), event.getShiftKey(), event.getMetaKey(), event.getButton(), e); e.dispatchEvent(newEvent); } } }
public void toggle() { call(widget.getElement(), org.ovirt.engine.ui.common.widget.tooltip.Tooltip.TOGGLE); }
public void hide() { call(widget.getElement(), org.ovirt.engine.ui.common.widget.tooltip.Tooltip.HIDE); }
@java.lang.Override public void cleanup() { driver.cleanup(); }
public void destroy() { call(widget.getElement(), org.ovirt.engine.ui.common.widget.tooltip.Tooltip.DESTROY); if ((clickHandler) != null) { clickHandler.removeHandler(); clickHandler = null; } }
@java.lang.Override public void setWidget(final com.google.gwt.user.client.ui.Widget w) { if (w == (widget)) { return; } if (w != null) { w.removeFromParent(); } if ((widget) != null) { remove(widget); } widget = w; if ((widget) == null) { return; } bindJavaScriptEvents(widget.getElement()); widget.addAttachHandler(new com.google.gwt.event.logical.shared.AttachEvent.Handler() { @java.lang.Override public void onAttachOrDetach(final com.google.gwt.event.logical.shared.AttachEvent event) { reconfigure(); } }); }
public void show() { call(widget.getElement(), org.ovirt.engine.ui.common.widget.tooltip.Tooltip.SHOW); }
public static void hideAllTooltips() { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip.hideAll(); }
@java.lang.Override public void cleanup() { driver.cleanup(); }
public void reconfigure() { destroy(); clickHandler = com.google.gwt.user.client.ui.RootPanel.get().addDomHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { org.ovirt.engine.ui.common.widget.tooltip.Tooltip.this.hide(); } }, com.google.gwt.event.dom.client.ClickEvent.getType()); java.lang.String template = null; if ((alternateTemplate) == null) { template = org.ovirt.engine.ui.common.widget.tooltip.Tooltip.DEFAULT_TEMPLATE.replace("{0}", getTooltipClassNames()); template = template.replace("{1}", getTooltipArrowClassNames()); template = template.replace("{2}", getTooltipInnerClassNames()); } else { template = alternateTemplate; } if (((container) != null) && ((selector) != null)) { tooltip(widget.getElement(), isAnimated, isHTML, placement.getCssName(), selector, title, trigger.getCssName(), showDelayMs, hideDelayMs, container, template); } else if ((container) != null) { tooltip(widget.getElement(), isAnimated, isHTML, placement.getCssName(), title, trigger.getCssName(), showDelayMs, hideDelayMs, container, template); } else if ((selector) != null) { tooltip(widget.getElement(), isAnimated, isHTML, placement.getCssName(), selector, title, trigger.getCssName(), showDelayMs, hideDelayMs, template); } else { tooltip(widget.getElement(), isAnimated, isHTML, placement.getCssName(), title, trigger.getCssName(), showDelayMs, hideDelayMs, template); } }


public static java.util.Map<java.lang.String, java.lang.Object> getSessionStatues(java.util.Set<java.lang.String> entries) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.search(null, null, "session-status", org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.publicAuthzSearchScope); }

public void generate(org.ovirt.api.metamodel.concepts.Model model) { model.types().filter(org.ovirt.api.metamodel.concepts.StructType.class::isInstance).map(org.ovirt.api.metamodel.concepts.StructType.class::cast).forEach(this::generateStructSupportClasses); model.types().filter(org.ovirt.api.metamodel.concepts.EnumType.class::isInstance).map(org.ovirt.api.metamodel.concepts.EnumType.class::cast).forEach(this::generateEnumSupportClasses); }

private void updateTaskStatuses(java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus>> poolsAllTasksMap) { for (org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task : _tasks.values()) { if (task.getShouldPoll()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus> asyncTasksForPoolMap = poolsAllTasksMap.get(task.getStoragePoolID()); if (asyncTasksForPoolMap != null) { org.ovirt.engine.core.common.businessentities.AsyncTaskStatus cachedAsyncTaskStatus = asyncTasksForPoolMap.get(task.getVdsmTaskId()); task.updateTask(cachedAsyncTaskStatus); } } } }







public native void removeItem(com.google.gwt.user.cellview.client.Column<T, ?> column);
public native void addItem(com.google.gwt.user.cellview.client.Column<T, ?> column);
private static org.ovirt.engine.api.model.NetworkStatus mapNetworkStatus(org.ovirt.engine.core.common.businessentities.network.NetworkStatus status) { switch (status) { case NON_OPERATIONAL : return org.ovirt.engine.api.model.NetworkStatus.NON_OPERATIONAL; case OPERATIONAL : return org.ovirt.engine.api.model.NetworkStatus.OPERATIONAL; default : return null; } }
@java.lang.Override protected void perform() { final org.ovirt.engine.core.common.businessentities.aaa.DbUser currentUser = org.ovirt.engine.core.bll.VmLogonCommand.getCurrentUser(); final java.lang.String password = sessionDataContainer.getPassword(org.ovirt.engine.core.bll.VmLogonCommand.getParameters().getSessionId()); final java.lang.String domainController = (currentUser != null) ? currentUser.getDomain() : ""; final boolean sentToVM = runVdsCommand(VDSCommandType.VmLogon, new org.ovirt.engine.core.common.vdscommands.VmLogonVDSCommandParameters(org.ovirt.engine.core.bll.VmLogonCommand.getVdsId(), org.ovirt.engine.core.bll.VmLogonCommand.getVm().getId(), domainController, org.ovirt.engine.core.bll.VmLogonCommand.getUserName(), password)).getSucceeded(); org.ovirt.engine.core.bll.VmLogonCommand.setSucceeded(sentToVM); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.aaa.IsPasswordDelegationPossibleQuery.getQueryReturnValue().setReturnValue(((sessionDataContainer.getPassword(org.ovirt.engine.core.bll.aaa.IsPasswordDelegationPossibleQuery.getParameters().getSessionId())) != null)); org.ovirt.engine.core.bll.aaa.IsPasswordDelegationPossibleQuery.getQueryReturnValue().setSucceeded(true); }
public static java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> buildStorageToDiskMap(java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskInfoDestinationMap) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> storageToDisksMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : images) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = diskInfoDestinationMap.get(disk.getId()); org.ovirt.engine.core.compat.Guid storageDomainId = diskImage.getStorageIds().get(0); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskList = storageToDisksMap.get(storageDomainId); if (diskList == null) { diskList = new java.util.ArrayList(); storageToDisksMap.put(storageDomainId, diskList); } diskList.add(disk); } return storageToDisksMap; }
private void createCommand() { org.ovirt.engine.core.bll.AddClusterCommand addClusterCommandInstance = new org.ovirt.engine.core.bll.AddClusterCommand(parameters, commandContext); addClusterCommandInstance.cpuFlagsManagerHandler = cpuFlagsManagerHandler; addClusterCommandInstance.networkClusterDao = networkClusterDao; addClusterCommandInstance.macPoolDao = macPoolDao; addClusterCommand = spy(addClusterCommandInstance); doReturn(org.ovirt.engine.core.bll.AddClusterCommandTest.ARCHITECTURE_TYPE).when(addClusterCommand).getArchitecture(); doReturn(backend).when(addClusterCommand).getBackend(); doReturn(clusterDao).when(addClusterCommand).getClusterDao(); doReturn(managementNetwork).when(addClusterCommand).getManagementNetwork(); when(macPoolDao.getDefaultPool()).thenReturn(new org.ovirt.engine.core.common.businessentities.MacPool()); }
@org.junit.Before public void setUp() { createCluster(); createParameters(); injectMocks(); createCommandContext(); createCommand(); mockBackend(); }
@java.lang.Override protected java.lang.String composeMessage() { return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().asciiOrNoneValidationMsg(); }

public static <E extends java.lang.Enum<E>> E valueOf(java.lang.Class<E> c, java.lang.String name, boolean ignorecase) { if (!ignorecase) { { return java.lang.Enum.<E>valueOf(c, name); } } E[] universe = c.getEnumConstants(); if (universe == null) { throw new java.lang.IllegalArgumentException((name + " is not an enum type")); } java.util.Map<java.lang.String, E> map = org.ovirt.engine.core.common.utils.EnumUtils.cacheEnumValuesInCapitalLetters.get(c); if (map == null) { map = new java.util.HashMap<>((2 * (universe.length))); for (E e : universe) { map.put(e.name().toUpperCase(), e); } org.ovirt.engine.core.common.utils.EnumUtils.cacheEnumValuesInCapitalLetters.put(c, map); } E result = map.get(name.toUpperCase()); if (result == null) { throw new java.lang.IllegalArgumentException(((("No enum const " + (c.getName())) + ".") + name)); } return result; }

protected void mockCpuFlagsManagerHandler() { injectorRule.bind(org.ovirt.engine.core.bll.CpuFlagsManagerHandler.class, cpuFlagsManagerHandler); when(cpuFlagsManagerHandler.getCpuId(anyString(), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(org.ovirt.engine.core.bll.AddVmCommandTest.CPU_ID); }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> createDiskSnapshot(org.ovirt.engine.core.compat.Guid diskId, int numOfImages) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksList = new java.util.ArrayList<>(); for (int i = 0; i < numOfImages; ++i) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); diskImage.setActive(false); diskImage.setId(diskId); diskImage.setImageId(org.ovirt.engine.core.compat.Guid.newGuid()); diskImage.setParentId(org.ovirt.engine.core.compat.Guid.newGuid()); diskImage.setImageStatus(ImageStatus.OK); disksList.add(diskImage); } return disksList; }
@org.junit.Before public void setUp() { sdId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdStatic = createStorageDomain(); spId = org.ovirt.engine.core.compat.Guid.newGuid(); sd = new org.ovirt.engine.core.common.businessentities.StorageDomain(); sd.setStorageStaticData(sdStatic); sd.setStatus(StorageDomainStatus.Active); sd.setStoragePoolId(spId); org.ovirt.engine.core.common.businessentities.StoragePool sp = new org.ovirt.engine.core.common.businessentities.StoragePool(); sp.setId(spId); sp.setStatus(StoragePoolStatus.Up); sp.setIsLocal(false); sp.setCompatibilityVersion(Version.v3_6); cmd = spy(new org.ovirt.engine.core.bll.storage.domain.RefreshLunsSizeCommand(new org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters(sdId, new java.util.ArrayList(java.util.Arrays.asList("1", "2"))), null)); doReturn(sd).when(cmd).getStorageDomain(); doReturn(sp).when(cmd).getStoragePool(); doReturn(sdsDao).when(cmd).getStorageDomainStaticDao(); when(sdsDao.get(sdId)).thenReturn(sdStatic); doReturn(lunsDao).when(cmd).getLunDao(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUNId("1"); lun1.setStorageDomainId(sdId); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUNId("2"); lun2.setStorageDomainId(sdId); when(lunsDao.getAll()).thenReturn(java.util.Arrays.asList(lun1, lun2)); }
@org.junit.Before public void setup() { map = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(); cmd = spy(new org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainCommand(params, org.ovirt.engine.core.bll.context.CommandContext.createContext(params.getSessionId()))); cmd.init(); doReturn(storagePoolDao).when(cmd).getStoragePoolDao(); doReturn(storageDomainDao).when(cmd).getStorageDomainDao(); doReturn(eventQueue).when(cmd).getEventQueue(); }
@java.lang.Override @org.junit.Before public void setUp() { super.setUp(); vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(VMStatus.Down); when(vmDao.getVmsListForDisk(getDiskImageId(), java.lang.Boolean.FALSE)).thenReturn(java.util.Collections.singletonList(vm)); org.ovirt.engine.core.common.action.ExportRepoImageParameters exportParameters = new org.ovirt.engine.core.common.action.ExportRepoImageParameters(getDiskImageGroupId(), getRepoStorageDomainId()); cmd = spy(new org.ovirt.engine.core.bll.storage.repoimage.ExportRepoImageCommand(exportParameters, null)); doReturn(vmDao).when(cmd).getVmDao(); doReturn(getStorageDomainDao()).when(cmd).getStorageDomainDao(); doReturn(getStoragePoolDao()).when(cmd).getStoragePoolDao(); doReturn(getDiskDao()).when(cmd).getDiskDao(); doReturn(getProviderProxy()).when(cmd).getProviderProxy(); }
@java.lang.Override @org.junit.Before public void setUp() { super.setUp(); injectorRule.bind(org.ovirt.engine.core.bll.utils.VmDeviceUtils.class, vmDeviceUtils); org.ovirt.engine.core.common.action.ImportRepoImageParameters importParameters = new org.ovirt.engine.core.common.action.ImportRepoImageParameters(); importParameters.setSourceRepoImageId(getRepoImageId()); importParameters.setSourceStorageDomainId(getRepoStorageDomainId()); importParameters.setStoragePoolId(getStoragePoolId()); importParameters.setStorageDomainId(getStorageDomainId()); cmd = spy(new org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand(importParameters, null)); doReturn(getStorageDomainDao()).when(cmd).getStorageDomainDao(); doReturn(getStoragePoolDao()).when(cmd).getStoragePoolDao(); doReturn(getProviderProxy()).when(cmd).getProviderProxy(); doReturn(true).when(cmd).validateSpaceRequirements(any(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)); }
private static org.ovirt.engine.api.model.IpVersion getIpVersion(org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment) { if (!((ipAddressAssignment.isSetIp()) && (ipAddressAssignment.getIp().isSetVersion()))) { return null; } return ipAddressAssignment.getIp().getVersion(); }
java.util.Map getNetworkStatsMap(org.ovirt.vdsmfake.domain.VM vm) { java.util.List<org.ovirt.vdsmfake.domain.Device> nicDevices = vm.getDevicesByType(Device.DeviceType.NIC); java.lang.String macAddress = vm.getMacAddress(); if (macAddress.equals(VM.NONE_STRING)) { log.debug("no mac address for vm {}", vm.getId()); return map(); } java.util.Map resultMap = map(); int count = 0; for (org.ovirt.vdsmfake.domain.Device device : nicDevices) { java.util.Map netStats = map(); java.lang.String dName = "vnet" + (java.lang.Integer.valueOf(count)); netStats.put("txErrors", "0"); netStats.put("state", "unknown"); netStats.put("macAddr", vm.getMacAddress()); netStats.put("name", dName); netStats.put("txDropped", "0"); netStats.put("txRate", "7.0"); netStats.put("rxErrors", "0"); netStats.put("rxRate", "7.0"); netStats.put("rxDropped", "0"); netStats.put("speed", "999"); resultMap.put(dName, netStats); ++count; } return resultMap; }
java.util.List getNetworkInterfaces(org.ovirt.vdsmfake.domain.VM vm) { java.util.Map resultMap = map(); java.util.List net = new java.util.ArrayList(); java.util.List<org.ovirt.vdsmfake.domain.Device> nicDevices = vm.getDevicesByType(Device.DeviceType.NIC); for (org.ovirt.vdsmfake.domain.Device device : nicDevices) { java.util.List templist = new java.util.ArrayList(); java.util.List templist2 = new java.util.ArrayList(); templist.add("fe80::21a:4aff:fe62:8900"); resultMap.put("inet6", templist); resultMap.put("hw", device.getMacAddr()); templist2.add(vm.getIp()); resultMap.put("inet", templist2); resultMap.put("name", "eth0"); net.add(resultMap); } log.debug("network list is {}", net.toString()); return net; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.AddClusterCommand.getCluster(); cluster.setArchitecture(org.ovirt.engine.core.bll.AddClusterCommand.getArchitecture()); org.ovirt.engine.core.bll.AddClusterCommand.setDefaultSwitchTypeIfNeeded(); org.ovirt.engine.core.bll.AddClusterCommand.checkMaxMemoryOverCommitValue(); cluster.setDetectEmulatedMachine(true); cluster.setMacPoolId(calculateMacPoolIdToUse()); org.ovirt.engine.core.bll.AddClusterCommand.getClusterDao().save(cluster); org.ovirt.engine.core.bll.AddClusterCommand.alertIfFencingDisabled(); if ((org.ovirt.engine.core.bll.AddClusterCommand.getParameters().getCluster().getStoragePoolId()) != null) { attachManagementNetwork(); } addDefaultCpuProfile(); if (org.apache.commons.collections.CollectionUtils.isNotEmpty(cluster.getAddtionalFeaturesSupported())) { for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature : cluster.getAddtionalFeaturesSupported()) { feature.setClusterId(cluster.getId()); } clusterFeatureDao.addAllSupportedClusterFeature(cluster.getAddtionalFeaturesSupported()); } setActionReturnValue(cluster.getId()); org.ovirt.engine.core.bll.AddClusterCommand.setSucceeded(true); }
@java.lang.Override @org.junit.Before public void setUp() { super.setUp(); vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(VMStatus.Down); when(vmDao.getVmsListForDisk(getDiskImageId(), java.lang.Boolean.FALSE)).thenReturn(java.util.Collections.singletonList(vm)); doReturn(vmDao).when(cmd).getVmDao(); doReturn(getProviderProxy()).when(cmd).getProviderProxy(); }
protected void updateSnapshotVmConfiguration() { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().get(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getExecutionIndex()); org.ovirt.engine.core.common.businessentities.Snapshot snapshot = org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getSnapshotDao().get(getSnapshotId()); org.ovirt.engine.core.common.businessentities.Snapshot snapshotWithoutImage = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.prepareSnapshotConfigWithoutImageSingleImage(snapshot, imageId); org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getSnapshotDao().update(snapshotWithoutImage); }
private org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters buildRemoveSnapshotSingleDiskLiveParameters(org.ovirt.engine.core.compat.Guid imageId) { org.ovirt.engine.core.common.businessentities.storage.DiskImage dest = org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getDiskImageDao().getAllSnapshotsForParent(imageId).get(0); org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters = new org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters(imageId, org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getVmId()); parameters.setDestinationImageId(dest.getImageId()); parameters.setEntityInfo(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getEntityInfo()); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters()); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getActionType()); parameters.setCommandType(VdcActionType.RemoveSnapshotSingleDiskLive); parameters.setVdsId(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getVm().getRunOnVds()); parameters.setSessionId(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getSessionId()); return parameters; }
@java.lang.Override protected void executeVmCommand() { if (!(isOperationPerformedOnDiskSnapshot())) { org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getVmStaticDao().incrementDbGeneration(org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getVm().getId()); } final org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = createVmDevice(); org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getVmDeviceDao().save(vmDevice); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement diskVmElement = org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getDiskVmElement(); diskVmElement.getId().setDeviceId(disk.getId()); diskVmElementDao.save(diskVmElement); disk.setDiskVmElements(java.util.Collections.singletonList(diskVmElement)); java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> imageList = new java.util.ArrayList<>(); imageList.add(disk); org.ovirt.engine.core.bll.VmHandler.updateDisksForVm(org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getVm(), imageList); if (!(isOperationPerformedOnDiskSnapshot())) { if (disk.isAllowSnapshot()) { updateDiskVmSnapshotId(); } } updateBootOrderInVmDevice(); if ((org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getParameters().isPlugUnPlug()) && ((org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { performPlugCommand(VDSCommandType.HotPlugDisk, disk, vmDevice); } org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.setSucceeded(true); }
@java.lang.Override protected void executeVmCommand() { if (diskShouldBeUnPlugged()) { performPlugCommand(VDSCommandType.HotUnPlugDisk, disk, vmDevice); } org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.getVmDeviceDao().remove(vmDevice.getId()); diskVmElementDao.remove(vmDevice.getId()); if ((!(disk.isDiskSnapshot())) && (disk.getDiskStorageType().isInternal())) { imageDao.updateImageVmSnapshotId(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)).getImageId(), null); } org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.getVm()); org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.getVmDeviceUtils().updateBootOrder(org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.getVm().getId()); org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.getVmStaticDao().incrementDbGeneration(org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.getVm().getId()); org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.setSucceeded(true); }
protected void endVmCommand() { if ((org.ovirt.engine.core.bll.VmCommand.getVm()) != null) { org.ovirt.engine.core.bll.VmCommand.getVmStaticDao().incrementDbGeneration(org.ovirt.engine.core.bll.VmCommand.getVm().getId()); } endActionOnDisks(); unlockVm(); org.ovirt.engine.core.bll.VmCommand.setSucceeded(true); }
@java.lang.Override protected void executeVmCommand() { if (org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommand.getVm().getStatus().isUpOrPaused()) { org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommand.updateDisksFromDb(); performPlugCommand(getPlugAction(), getDisk(), oldVmDevice); } updateDeviceProperties(); if (getDiskVmElement().isBoot()) { updateBootOrder(); } org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommand.getVmStaticDao().incrementDbGeneration(org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommand.getVm().getId()); org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommand.setSucceeded(true); }
@java.lang.Override protected void executeVmCommand() { super.executeVmCommand(); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.setVm(null); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVm().setVmtGuid(VmTemplateHandler.BLANK_VM_TEMPLATE_ID); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVmStaticDao().update(org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVm().getStaticData()); }
protected void removeVmStatic(boolean removePermissions) { org.ovirt.engine.core.bll.VmCommand.getVmStaticDao().remove(org.ovirt.engine.core.bll.VmCommand.getVmId(), removePermissions); }
protected boolean validateNoDuplicateVm() { org.ovirt.engine.core.common.businessentities.VmStatic duplicateVm = org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getVmStaticDao().get(getVm().getId()); return duplicateVm == null ? true : failValidation(EngineMessage.VM_CANNOT_IMPORT_VM_EXISTS, java.lang.String.format("$VmName %1$s", duplicateVm.getName())); }
@java.lang.Override protected void executeVmCommand() { this.setVmName(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getVmStaticDao().get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getVmId()).getName()); org.ovirt.engine.core.common.businessentities.network.VmNic iface = org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getVmNicDao().get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getInterfaceId()); if (iface != null) { interfaceName = iface.getName(); java.lang.String interType = org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(iface.getType()).getDescription(); if (interType != null) { org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.addCustomValue("InterfaceType", interType); } new org.ovirt.engine.core.bll.network.ExternalNetworkManager(iface).deallocateIfExternal(); org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getMacPool().freeMac(iface.getMacAddress()); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.bll.network.vm.vmStaticDao.incrementDbGeneration(getParameters().getVmId()); getVmNicDao().remove(getParameters().getInterfaceId()); getDbFacade().getVmNetworkStatisticsDao().remove(getParameters().getInterfaceId()); getDbFacade().getVmDeviceDao().remove(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getParameters().getInterfaceId(), getParameters().getVmId())); setSucceeded(true); return null; }); }
@java.lang.Override protected void endSuccessfully() { org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVmStaticDao().incrementDbGeneration(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getId()); org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.endActionOnDisks(); if ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm()) != null) { org.ovirt.engine.core.bll.VmHandler.unlockVm(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm(), org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getCompensationContext()); restoreVmConfigFromSnapshot(); } else { org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.setCommandShouldBeLogged(false); log.warn("VmCommand::EndVmCommand: Vm is null - not performing endAction on Vm"); } org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.setSucceeded(true); }
private void incrementVmGeneration() { org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVmStaticDao().incrementDbGeneration(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm().getId()); }
@java.lang.Override public void onPowerringUp() { decreasePendingVm(org.ovirt.engine.core.bll.RunVmCommand.getVmStaticDao().get(org.ovirt.engine.core.bll.RunVmCommand.getVmId())); }
protected void addVmStatic() { logImportEvents(); getVm().getStaticData().setId(getVmId()); getVm().getStaticData().setCreationDate(new java.util.Date()); getVm().getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getClusterId()); getVm().getStaticData().setMinAllocatedMem(computeMinAllocatedMem()); getVm().getStaticData().setQuotaId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getQuotaId()); if (!(org.ovirt.engine.core.bll.VmHandler.validateDedicatedVdsExistOnSameCluster(getVm().getStaticData(), null))) { getVm().setDedicatedVmForVdsList(java.util.Collections.emptyList()); } if (((getVm().getOriginalTemplateGuid()) != null) && (!(VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getVm().getOriginalTemplateGuid())))) { org.ovirt.engine.core.common.businessentities.VmTemplate originalTemplate = org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getVmTemplateDao().get(getVm().getOriginalTemplateGuid()); if (originalTemplate != null) { getVm().getStaticData().setOriginalTemplateName(originalTemplate.getName()); } } if (org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getCopyCollapse()) { getVm().setVmtGuid(VmTemplateHandler.BLANK_VM_TEMPLATE_ID); } org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getVmStaticDao().save(getVm().getStaticData()); org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCompensationContext().snapshotNewEntity(getVm().getStaticData()); }
protected void addVmStatic() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData(); if ((vmStatic.getOrigin()) == null) { vmStatic.setOrigin(org.ovirt.engine.core.common.businessentities.OriginType.valueOf(org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.OriginType))); } vmStatic.setId(org.ovirt.engine.core.bll.AddVmCommand.getVmId()); vmStatic.setQuotaId(getQuotaId()); vmStatic.setCreationDate(new java.util.Date()); vmStatic.setCreatedByUserId(org.ovirt.engine.core.bll.AddVmCommand.getUserId()); setIconIds(vmStatic); org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils.getInstance().separateCustomPropertiesToUserAndPredefined(org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion(), vmStatic); updateOriginalTemplate(vmStatic); org.ovirt.engine.core.bll.AddVmCommand.getVmStaticDao().save(vmStatic); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(vmStatic); }
private void createCommand() { doReturn(org.ovirt.engine.core.bll.AddClusterCommandTest.ARCHITECTURE_TYPE).when(addClusterCommand).getArchitecture(); doReturn(backend).when(addClusterCommand).getBackend(); doReturn(clusterDao).when(addClusterCommand).getClusterDao(); doReturn(managementNetwork).when(addClusterCommand).getManagementNetwork(); when(macPoolDao.getDefaultPool()).thenReturn(new org.ovirt.engine.core.common.businessentities.MacPool()); }
@org.junit.Test public void validateWrongStorage() { org.ovirt.engine.core.common.businessentities.StorageDomainStatic nfsStatic = createStorageDomain(); nfsStatic.setStorageType(StorageType.NFS); org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain(); sd.setStorageStaticData(nfsStatic); sd.setStatus(StorageDomainStatus.Active); sd.setStoragePoolId(spId); doReturn(sd).when(cmd).getStorageDomain(); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }
@org.junit.Test public void validateNoDomain() { doReturn(null).when(cmd).getStorageDomain(); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); }
@org.junit.Before public void setUp() { sdId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdStatic = createStorageDomain(); spId = org.ovirt.engine.core.compat.Guid.newGuid(); sd = new org.ovirt.engine.core.common.businessentities.StorageDomain(); sd.setStorageStaticData(sdStatic); sd.setStatus(StorageDomainStatus.Active); sd.setStoragePoolId(spId); org.ovirt.engine.core.common.businessentities.StoragePool sp = new org.ovirt.engine.core.common.businessentities.StoragePool(); sp.setId(spId); sp.setStatus(StoragePoolStatus.Up); sp.setIsLocal(false); sp.setCompatibilityVersion(Version.v3_6); doReturn(sd).when(cmd).getStorageDomain(); doReturn(sp).when(cmd).getStoragePool(); when(sdsDao.get(sdId)).thenReturn(sdStatic); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUNId("1"); lun1.setStorageDomainId(sdId); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUNId("2"); lun2.setStorageDomainId(sdId); when(lunsDao.getAll()).thenReturn(java.util.Arrays.asList(lun1, lun2)); }
@java.lang.Override protected void executeVDSCommand() { try { org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxyData proxyData = org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getCurrentIrsProxyData(); proxyData.clearPoolTimers(); proxyData.clearCache(); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.log.error("Could not change timers for pool '{}': {}", org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getParameters().getStoragePoolId(), e.getMessage()); org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.log.debug("Exception", e); } org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getVDSReturnValue().setSucceeded(true); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("performLoadBalancing") public void performLoadBalancing() { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.debug("Load Balancer timer entered."); java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = getClusterDao().getAll(); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { org.ovirt.engine.core.common.scheduling.ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId()); org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnit = policyUnits.get(policy.getBalance()); java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> balanceResult = java.util.Optional.empty(); if (policyUnit.getPolicyUnit().isEnabled()) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = getVdsDao().getAllForClusterWithoutMigrating(cluster.getId()); if (policyUnit.getPolicyUnit().isInternal()) { balanceResult = internalRunBalance(policyUnit, cluster, hosts); } else if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.ExternalSchedulerEnabled)) { balanceResult = externalRunBalance(policyUnit, cluster, hosts); } } if ((balanceResult.isPresent()) && (balanceResult.get().isValid())) { migrationHandler.migrateVM(balanceResult.get().getCandidateHosts(), balanceResult.get().getVmToMigrate()); } } }
protected boolean migrateVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.job.ExecutionContext parentContext) { return runInternalAction(VdcActionType.InternalMigrateVm, new org.ovirt.engine.core.common.action.InternalMigrateVmParameters(vm.getId(), org.ovirt.engine.core.bll.MaintenanceVdsCommand.getActionType()), createMigrateVmContext(parentContext, vm)).getSucceeded(); }
private java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> createMigrateVmToServerParametersList(java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> vmsToMigrate, final org.ovirt.engine.core.common.businessentities.VDS vds) { return vmsToMigrate.stream().map(( vm) -> { org.ovirt.engine.core.common.action.MigrateVmToServerParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmToServerParameters(false, vm.getId(), vds.getId()); parameters.setShouldBeLogged(false); return parameters; }).collect(java.util.stream.Collectors.toList()); }
@java.lang.Override public void migrateVM(java.util.List<org.ovirt.engine.core.compat.Guid> initialHosts, org.ovirt.engine.core.compat.Guid vmToMigrate) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters(false, vmToMigrate); parameters.setInitialHosts(new java.util.ArrayList(initialHosts)); backendInternal.runInternalAction(VdcActionType.MigrateVm, parameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); }
@java.lang.Override public javax.ws.rs.core.Response migrate(org.ovirt.engine.api.model.Action action) { boolean forceMigration = (action.isSetForce()) ? action.isForce() : false; if (!(action.isSetHost())) { return doAction(VdcActionType.MigrateVm, new org.ovirt.engine.core.common.action.MigrateVmParameters(forceMigration, guid, getTargetClusterId(action)), action); } else { return doAction(VdcActionType.MigrateVmToServer, new org.ovirt.engine.core.common.action.MigrateVmToServerParameters(forceMigration, guid, getHostId(action), getTargetClusterId(action)), action); } }
void migrateVM(java.util.List<org.ovirt.engine.core.compat.Guid> initialHosts, org.ovirt.engine.core.compat.Guid vmToMigrate);
@java.lang.Override public int hashCode() { return java.util.Objects.hash(getVmId(), forceMigrationForNonMigratableVm, targetClusterId); }
protected void migrateVM(final org.ovirt.engine.core.common.businessentities.VM vmToMigrate) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters(false, vmToMigrate.getId()); backend.runInternalAction(VdcActionType.MigrateVm, parameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.MigrateVmParameters)) { return false; } org.ovirt.engine.core.common.action.MigrateVmParameters other = ((org.ovirt.engine.core.common.action.MigrateVmParameters) (obj)); return ((java.util.Objects.equals(getVmId(), other.getVmId())) && ((forceMigrationForNonMigratableVm) == (other.forceMigrationForNonMigratableVm))) && (java.util.Objects.equals(targetClusterId, other.targetClusterId)); }
protected boolean migrateVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.job.ExecutionContext parentContext) { org.ovirt.engine.core.common.action.InternalMigrateVmParameters parameters = new org.ovirt.engine.core.common.action.InternalMigrateVmParameters(vm.getId(), org.ovirt.engine.core.bll.MaintenanceVdsCommand.getActionType()); parameters.setMigrationReason(new org.ovirt.engine.core.common.migration.MigrationReason(MigrationReason.Type.HOST_IN_MAINTENANCE)); return runInternalAction(VdcActionType.InternalMigrateVm, parameters, createMigrateVmContext(parentContext, vm)).getSucceeded(); }






private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.utils.GuidUtils.getGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper snapshotVmConfigurationHelper = new org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper(); org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createMemoryDisk(vm, org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getStorageDomainStaticDao().get(guids.get(0)).getStorageType()); memoryDisk.setId(guids.get(2)); memoryDisk.setImageId(guids.get(3)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); return memoryDisk; }


public org.ovirt.engine.core.common.businessentities.VmRngDevice generateRngDevice() { org.ovirt.engine.core.common.businessentities.VmRngDevice dev = new org.ovirt.engine.core.common.businessentities.VmRngDevice(); dev.setBytes(rngBytes.getEntity()); dev.setPeriod(rngPeriod.getEntity()); dev.setSource((java.lang.Boolean.TRUE.equals(rngSourceRandom.getEntity()) ? VmRngDevice.Source.RANDOM : VmRngDevice.Source.HWRNG)); return dev; }
public static final boolean checkKeyFingerprint(java.lang.String expected, final java.security.PublicKey key, java.lang.StringBuilder actual) throws java.lang.Exception { java.lang.String digest = expected.split(":", 2)[0]; try { if ((digest.length()) == 2) { java.lang.Integer.parseInt(digest, 16); digest = org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.MD5; expected = (digest + ":") + expected; } } catch (java.lang.NumberFormatException e) { } if (!(digest.startsWith("MD"))) { digest = digest.replaceFirst("([0-9])", "-$1"); } java.lang.String fingerprint = org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.getKeyFingerprint(key, digest); boolean result; if (org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.MD5.equals(digest)) { result = expected.equalsIgnoreCase(fingerprint); } else { result = expected.equals(fingerprint); } if (actual != null) { actual.setLength(0); actual.append(fingerprint); } return result; }





@org.junit.Test public void testBlockUseHostCpuWithPPCArch() { mockConfig(); org.ovirt.engine.core.bll.AddVmCommand<org.ovirt.engine.core.common.action.AddVmParameters> cmd = setupCanAddPpcTest(); cmd.setEffectiveCompatibilityVersion(Version.v4_0); doReturn(java.util.Collections.emptyList()).when(cmd).getImagesToCheckDestinationStorageDomains(); org.ovirt.engine.core.common.businessentities.Cluster cluster = createPpcCluster(); when(clusterDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(cluster); doReturn(true).when(cmd).areParametersLegal(java.util.Collections.emptyList()); doReturn(true).when(cmd).validateAddVmCommand(); doReturn(true).when(cmd).isVmNameValidLength(any(org.ovirt.engine.core.common.businessentities.VM.class)); when(osRepository.getArchitectureFromOS(any(java.lang.Integer.class))).thenReturn(ArchitectureType.ppc64); cmd.getParameters().getVm().setClusterArch(ArchitectureType.ppc64); cmd.getParameters().getVm().setUseHostCpuFlags(true); cmd.getParameters().getVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST); cmd.getParameters().getVm().setClusterId(cluster.getId()); cmd.getParameters().getVm().setVmOs(OsType.Other.ordinal()); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.USE_HOST_CPU_REQUESTED_ON_UNSUPPORTED_ARCH); }
@org.junit.Test public void create10GBVmWith11GbAvailableAndA5GbBuffer() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.AddVmCommandTest.createVm(); org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> cmd = createVmFromTemplateCommand(vm); mockStorageDomainDaoGetForStoragePool(); mockClusterDaoReturnCluster(); mockVmTemplateDaoReturnVmTemplate(); org.ovirt.engine.core.bll.AddVmCommandTest.mockVerifyAddVM(cmd); mockConfig(); mockMaxPciSlots(); mockOsRepository(); mockOsRepositoryGraphics(0, Version.v4_0, new org.ovirt.engine.core.common.utils.Pair(org.ovirt.engine.core.common.businessentities.GraphicsType.SPICE, org.ovirt.engine.core.common.businessentities.DisplayType.qxl)); mockGraphicsDevices(vm.getId()); mockStorageDomainDaoGetAllStoragesForPool(org.ovirt.engine.core.bll.AddVmCommandTest.AVAILABLE_SPACE_GB); mockUninterestingMethods(cmd); mockGetAllSnapshots(cmd); doReturn(createStoragePool()).when(cmd).getStoragePool(); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN); }
protected static void refreshVdcOptionCache(org.ovirt.engine.core.dal.dbbroker.DbFacade db) { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.clear(); java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list = db.getVdcOptionDao().getAll(); list.forEach(org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils::updateOption); }
static java.lang.String detail(java.lang.Throwable t) { java.lang.String detail = null; if (org.ovirt.engine.api.restapi.resource.BaseBackendResource.log.isDebugEnabled()) { java.io.StringWriter sw = new java.io.StringWriter(); t.printStackTrace(new java.io.PrintWriter(sw, true)); detail = sw.toString(); } else { detail = t.getMessage(); } return detail; }



@java.lang.Override protected void executeCommand() { log.info("Creating ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getParameters().getUploadSize()); imageTransferDao.save(entity); log.info("Creating {} image", getUploadType()); createImage(); setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.setSucceeded(true); }





private org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntityPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase) { org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); updates.setPhase(phase); return updateEntity(updates); }
public void onFailed() { updateEntityPhase(ImageTransferPhase.FINISHED_FAILURE); log.debug("Removing ImageUpload id {}", org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); imageTransferDao.remove(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.endWithFailure(); log.error("Failed to upload {} (command id '{}')", getUploadDescription(), org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); }




@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.tasks.CommandHelper.canDoAction(VdcActionType.AddDisk, getAddDiskParameters(), org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand.getContext().clone().getExecutionContext(), true); org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand.getReturnValue().setValidationMessages(returnValue.getValidationMessages()); return returnValue.isValid(); }

public void onSucceeded() { updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); log.debug("Removing ImageUpload id {}", org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); imageTransferDao.remove(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.endSuccessfully(); log.info("Successfully uploaded {} (command id '{}')", getUploadDescription(), org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); }
protected java.lang.String getUploadDescription() { return java.lang.String.format("%s '%s' (id '%s')", getUploadType(), getImageAlias(), getImageIdNullSafe()); }
private org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntity(org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates) { return imageTransferUpdater.updateEntity(updates, org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); }
private boolean stopImageTransferSession(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity) { if ((entity.getImagedTicketId()) == null) { log.warn("Failed to stop image transfer session. Ticket does not exist for image '{}'", entity.getDiskId()); return false; } org.ovirt.engine.core.compat.Guid resourceId = entity.getImagedTicketId(); org.ovirt.engine.core.common.vdscommands.RemoveImageTicketVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.RemoveImageTicketVDSCommandParameters(entity.getVdsId(), resourceId); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsRetVal; try { vdsRetVal = org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getBackend().getResourceManager().runVdsCommand(VDSCommandType.RemoveImageTicket, parameters); } catch (java.lang.RuntimeException e) { log.error("Failed to stop image transfer session for ticket '{}': {}", resourceId.toString(), e); return false; } if (!(vdsRetVal.getSucceeded())) { log.warn("Failed to stop image transfer session for ticket '{}'", resourceId.toString()); return false; } log.info("Successfully stopped image transfer session for ticket '{}'", resourceId.toString()); org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(); updates.setClearResourceId(true); updateEntity(updates); return true; }






@java.lang.Override protected boolean validate() { if (!(validateDiskImage())) { return false; } if (!(validate(new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.repoimage.ExportRepoImageCommand.getStorageDomain()).isDomainExistAndActive()))) { return false; } if (!(getDiskImage().getParentId().equals(Guid.Empty))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED); } for (org.ovirt.engine.core.common.businessentities.VM vm : org.ovirt.engine.core.bll.storage.repoimage.ExportRepoImageCommand.getVmDao().getVmsListForDisk(getDiskImage().getId(), false)) { if ((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_IS_RUNNING); } } org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(java.util.Arrays.asList(getDiskImage())); if ((!(validate(diskImagesValidator.diskImagesNotIllegal()))) || (!(validate(diskImagesValidator.diskImagesNotLocked())))) { return false; } return true; }
protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntity(org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates, boolean clearResourceId) { return imageTransferUpdater.updateEntity(updates, org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId(), clearResourceId); }
public void proceedCommandExecution(org.ovirt.engine.core.compat.Guid childCmdId) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = imageTransferDao.get(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); if ((entity == null) || ((entity.getPhase()) == null)) { log.error(("Image Upload status entity corrupt or missing from database" + " for image transfer command '{}'"), org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); setCommandStatus(CommandStatus.FAILED); return; } if ((entity.getDiskId()) != null) { org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.setImage(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getDiskDao().get(entity.getDiskId())))); } long ts = (java.lang.System.currentTimeMillis()) / 1000; if (pauseUploadIfNecessary(entity, ts)) { return; } executeStateHandler(entity, ts, childCmdId); }



@org.junit.Test public void canDisableVirtioScsiFail() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(disk.getId(), vm.getId()); dve.setDiskInterface(DiskInterface.VirtIO_SCSI); disk.setDiskVmElements(java.util.Collections.singletonList(dve)); assertThat(validator.canDisableVirtioScsi(java.util.Collections.singletonList(disk)), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.CANNOT_DISABLE_VIRTIO_SCSI_PLUGGED_DISKS)); }
public static void addDiskAttachmentDetails(java.lang.String vmId, java.util.List<org.ovirt.engine.api.v3.types.V3Disk> disks) { if (vmId != null) { org.ovirt.engine.api.resource.SystemResource systemResource = org.ovirt.engine.api.restapi.resource.BackendApiResource.getInstance(); org.ovirt.engine.api.resource.VmsResource vmsResource = systemResource.getVmsResource(); org.ovirt.engine.api.resource.VmResource vmResource = vmsResource.getVmResource(vmId); org.ovirt.engine.api.resource.DiskAttachmentsResource attachmentsResource = vmResource.getDiskAttachmentsResource(); for (org.ovirt.engine.api.v3.types.V3Disk disk : disks) { java.lang.String diskId = disk.getId(); if (diskId != null) { org.ovirt.engine.api.resource.DiskAttachmentResource attachmentResource = attachmentsResource.getAttachmentResource(diskId); try { org.ovirt.engine.api.model.DiskAttachment attachment = attachmentResource.get(); if (attachment.isSetBootable()) { disk.setBootable(attachment.isBootable()); } if (attachment.isSetInterface()) { disk.setInterface(attachment.getInterface().toString().toLowerCase()); } if (attachment.isSetLogicalName()) { disk.setLogicalName(attachment.getLogicalName()); } if (attachment.isSetActive()) { disk.setActive(attachment.isActive()); } } catch (javax.ws.rs.WebApplicationException exception) { } } } } }
@org.junit.Test public void testIsUsingScsiReservationValidWhenSgioIsFiltered() { setupForLun(); org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk(ScsiGenericIO.FILTERED, true); assertThat(lunValidator.isUsingScsiReservationValid(org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(), lunDisk1), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_SGIO_IS_FILTERED)); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DiskAttachment.class, to = org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class) public static org.ovirt.engine.core.common.businessentities.storage.DiskVmElement map(org.ovirt.engine.api.model.DiskAttachment model, org.ovirt.engine.core.common.businessentities.storage.DiskVmElement template) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(); if (model.isSetId()) { entity.setId(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId()), null)); } else { entity.setId(new org.ovirt.engine.core.common.businessentities.VmDeviceId()); } if (model.isSetBootable()) { entity.setBoot(model.isBootable()); } if (model.isSetInterface()) { entity.setDiskInterface(org.ovirt.engine.api.restapi.types.DiskMapper.mapInterface(model.getInterface())); } return entity; }

@org.junit.Test public void testIsUsingScsiReservationValidWhenAddingFloatingDisk() { setupForLun(); org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk(ScsiGenericIO.UNFILTERED, true); assertThat(lunValidator.isUsingScsiReservationValid(null, lunDisk1), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_SCSI_RESERVATION_NOT_VALID_FOR_FLOATING_DISK)); }
@org.junit.Test public void testIscsiLunCanBeAdded() { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createISCSILunDisk(); command.getParameters().setDiskInfo(disk); assertTrue("checkIfLunDiskCanBeAdded() failed for valid iscsi lun", command.checkIfLunDiskCanBeAdded(spyDiskValidator(disk))); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class, to = org.ovirt.engine.api.model.DiskAttachment.class) public static org.ovirt.engine.api.model.DiskAttachment map(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement entity, org.ovirt.engine.api.model.DiskAttachment template) { org.ovirt.engine.api.model.DiskAttachment model = (template != null) ? template : new org.ovirt.engine.api.model.DiskAttachment(); org.ovirt.engine.core.compat.Guid vmId = entity.getVmId(); if (vmId != null) { org.ovirt.engine.api.model.Vm vm = new org.ovirt.engine.api.model.Vm(); vm.setId(vmId.toString()); model.setVm(vm); } org.ovirt.engine.core.compat.Guid diskId = entity.getDiskId(); if (diskId != null) { org.ovirt.engine.api.model.Disk disk = new org.ovirt.engine.api.model.Disk(); disk.setId(diskId.toString()); model.setDisk(disk); } model.setId(entity.getDiskId().toString()); model.setBootable(entity.isBoot()); model.setInterface(org.ovirt.engine.api.restapi.types.DiskMapper.mapInterface(entity.getDiskInterface())); model.setActive(entity.isPlugged()); model.setLogicalName(entity.getLogicalName()); return model; }

@org.junit.Test public void testIsUsingScsiReservationValidWhenSgioIsUnFiltered() { setupForLun(); org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk(ScsiGenericIO.UNFILTERED, true); assertThat(lunValidator.isUsingScsiReservationValid(org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(), lunDisk1), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
private static org.ovirt.engine.core.common.action.AddDiskParameters createParameters() { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(null, org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.vmId); dve.setDiskInterface(DiskInterface.IDE); return new org.ovirt.engine.core.common.action.AddDiskParameters(dve, image); }


private void move() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = ((java.util.ArrayList) (getSelectedItems())); if (disks == null) { return; } if ((getWindow()) != null) { return; } org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.models.vms.MoveDiskModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.MoveDiskModel(); setWindow(model); if (vm.isRunningAndQualifyForDisksMigration()) { model.setWarningAvailable(true); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().liveStorageMigrationWarning()); } model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().moveDisksTitle()); model.setHelpTag(HelpTag.move_disk); model.setHashName("move_disk"); model.setIsSourceStorageDomainNameAvailable(true); model.setEntity(this); model.init(disks); model.startProgress(); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.UserProfile existingProfile = org.ovirt.engine.core.bll.AddUserProfileCommand.getUserProfile(); if (existingProfile != null) { executeCommandUpdateSSHPublicKey(existingProfile); } else { org.ovirt.engine.core.common.businessentities.UserProfile profile = org.ovirt.engine.core.bll.AddUserProfileCommand.getParameters().getUserProfile(); profile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); profile.setUserId(org.ovirt.engine.core.bll.AddUserProfileCommand.getUserId()); if (!(org.apache.commons.lang.StringUtils.isEmpty(profile.getSshPublicKey()))) { profile.setSshPublicKeyId(org.ovirt.engine.core.compat.Guid.newGuid()); } userProfileDao.save(profile); org.ovirt.engine.core.bll.AddUserProfileCommand.setSucceeded(true); } }
private java.lang.String getConstraint() { java.lang.StringBuilder buffer = new java.lang.StringBuilder(); buffer.append("Providers: type="); buffer.append(ProviderType.OPENSTACK_NETWORK.name()); java.lang.String query = org.ovirt.engine.api.common.util.QueryHelper.getConstraint(httpHeaders, uriInfo, null, modelType, false); if (org.apache.commons.lang.StringUtils.isNotBlank(query)) { buffer.append(" AND ("); buffer.append(query); buffer.append(")"); } return buffer.toString(); }
private java.util.List<org.ovirt.engine.core.common.businessentities.Provider> getBackendCollection() { if (isFiltered()) { return getBackendCollection(VdcQueryType.GetAllProviders, new org.ovirt.engine.core.common.queries.GetAllProvidersParameters(org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK)); } else { return getBackendCollection(SearchType.Provider, getConstraint()); } }
private void applyNextRunConfiguration() { org.ovirt.engine.core.common.businessentities.Snapshot runSnap = snapshotDao.get(org.ovirt.engine.core.bll.ProcessDownVmCommand.getVmId(), SnapshotType.NEXT_RUN); if (runSnap != null) { snapshotDao.remove(runSnap.getId()); java.util.Date originalCreationDate = org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm().getVmCreationDate(); snapshotsManager.updateVmFromConfiguration(org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm(), runSnap.getVmConfiguration()); org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm().setVmCreationDate(originalCreationDate); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, createUpdateVmParameters()); if (((result.getActionReturnValue()) != null) && (result.getActionReturnValue().equals(VdcActionType.UpdateVmVersion))) { templateVersionChanged = true; } } }
private com.google.gwt.safehtml.shared.SafeHtml createBondTooltipMessage(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel, org.ovirt.engine.core.common.businessentities.network.InterfaceStatus interfaceStatus) { org.ovirt.engine.core.common.businessentities.network.Bond bond = ((org.ovirt.engine.core.common.businessentities.network.Bond) (lineModel.getInterface())); java.lang.StringBuilder bondProperties = new java.lang.StringBuilder(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondStatus(interfaceStatus.toString())); boolean isBond4 = BondMode.BOND4.equals(org.ovirt.engine.core.common.businessentities.network.BondMode.parseBondMode(bond.getBondOptions())); if ((InterfaceStatus.UP.equals(interfaceStatus)) && isBond4) { bondProperties.append("\n").append(createActiveBondTooltipMessage(bond, lineModel)); } return new com.google.gwt.safehtml.shared.SafeHtmlBuilder().appendEscapedLines(bondProperties.toString()).toSafeHtml(); }
private void filter() { java.lang.String[] ids = this.getParsedId(); this.filteredId = new java.util.ArrayList<>(); for (java.lang.String id : ids) { if (!(org.ovirt.vdsm.jsonrpc.client.events.ALL.equals(id))) { this.filteredId.add(id); } } }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.GetVmsRunningOnOrMigratingToVdsQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.GetVmsRunningOnOrMigratingToVdsQuery.getDbFacade().getVmDao().getAllRunningOnOrMigratingToVds(org.ovirt.engine.core.bll.GetVmsRunningOnOrMigratingToVdsQuery.getParameters().getId())); }

private static java.lang.String readFile(java.lang.String path) throws java.io.IOException { byte[] encoded = java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(path)); return new java.lang.String(encoded, java.nio.charset.Charset.forName("UTF-8")); }
public synchronized void updateDataCenter(org.ovirt.vdsmfake.domain.DataCenter dataCenter) { if (!(dataCenterMap.containsKey(dataCenter.getId()))) { dataCenterMap.put(dataCenter.getId(), dataCenter); } storeObject(dataCenter); org.ovirt.vdsmfake.domain.VdsmManager.log.info("Data center {} stored", dataCenter.getId()); }
public synchronized org.ovirt.vdsmfake.domain.DataCenter getDataCenterById(java.lang.String id) { org.ovirt.vdsmfake.domain.DataCenter dataCenter = null; if (dataCenterMap.containsKey(id)) { return dataCenterMap.get(id); } dataCenter = ((org.ovirt.vdsmfake.domain.DataCenter) (loadObject(org.ovirt.vdsmfake.domain.DataCenter.class, id))); if (dataCenter == null) { dataCenter = new org.ovirt.vdsmfake.domain.DataCenter(); dataCenter.setId(id); } else { org.ovirt.vdsmfake.domain.VdsmManager.log.info("Data center restored from file, id: {}", id); } dataCenterMap.put(id, dataCenter); return dataCenter; }
public static void store(org.ovirt.vdsmfake.domain.BaseObject baseObject, java.io.File f) { java.io.ObjectOutputStream oos = null; try { oos = new java.io.ObjectOutputStream(new java.io.FileOutputStream(f)); oos.writeObject(baseObject); } catch (java.lang.Exception e) { org.ovirt.vdsmfake.PersistUtils.log.error("Cannot save object", e); throw new java.lang.RuntimeException("Cannot save object", e); } finally { org.apache.commons.io.IOUtils.closeQuietly(oos); baseObject.setLastUpdate(f.lastModified()); } }
@org.junit.Before public void setUp() throws java.lang.Exception { when(mockUser.getId()).thenReturn(org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQueryTest.USER_ID); when(mockNetworkPredicate.test(mockExternalNetwork)).thenReturn(false); when(mockNetworkPredicate.test(mockManagementNetworkCandidate)).thenReturn(true); when(mockNetworkDao.getAllForDataCenter(org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQueryTest.DC_ID, org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQueryTest.USER_ID, true)).thenReturn(dcNetworks); final org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQueryTest.DC_ID); params.setFiltered(true); underTest = new org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQueryTest.TestGetManagementNetworkCandidatesQuery(params); }
@java.lang.Override protected void executeQueryCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> allDcNetworks = getNetworkDao().getAllForDataCenter(org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQuery.getParameters().getId(), org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQuery.getUserID(), org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQuery.getParameters().isFiltered()); final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> managementNetworkCandidates = allDcNetworks.stream().filter(getManagementNetworkCandidatePredicate()).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQuery.getQueryReturnValue().setReturnValue(managementNetworkCandidates); }
public static <T extends java.lang.Object> T get(java.lang.Class<T> clazz) { return org.ovirt.engine.core.di.Injector.injector.instanceOf(clazz); }

public <T> void bind(java.lang.Class<T> pureClsType, T instance) { overrideInjector(mockedInjector); when(mockedInjector.instanceOf(pureClsType)).thenReturn(instance); }


@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getStorageDomainStaticDao(); dynamicDao = dbFacade.getStorageDomainDynamicDao(); diskImageDao = dbFacade.getDiskImageDao(); imageDao = dbFacade.getImageDao(); existingDomain = dao.get(new org.ovirt.engine.core.compat.Guid("72e3a666-89e1-4005-a7ca-f7548004a9ab")); newStaticDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); newStaticDomain.setStorageName("NewStorageDomain"); newStaticDomain.setStorage("fDMzhE-wx3s-zo3q-Qcxd-T0li-yoYU-QvVePl"); newStaticDomain.setStorageFormat(StorageFormatType.V1); newStaticDomain.setWipeAfterDelete(true); newStaticDomain.setWarningLowSpaceIndicator(3); newStaticDomain.setCriticalSpaceActionBlocker(9); }

@org.junit.Test public void testUpdate() { existingDomain.setStorageName("UpdatedName"); existingDomain.setWipeAfterDelete(true); existingDomain.setWarningLowSpaceIndicator(4); existingDomain.setCriticalSpaceActionBlocker(8); dao.update(existingDomain); org.ovirt.engine.core.common.businessentities.StorageDomainStatic after = dao.get(existingDomain.getId()); assertEquals(after, existingDomain); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.StorageDomainStatic)) { return false; } org.ovirt.engine.core.common.businessentities.StorageDomainStatic other = ((org.ovirt.engine.core.common.businessentities.StorageDomainStatic) (obj)); return ((((((((((((java.util.Objects.equals(id, other.id)) && ((autoRecoverable) == (other.autoRecoverable))) && (java.util.Objects.equals(connection, other.connection))) && (java.util.Objects.equals(name, other.name))) && (java.util.Objects.equals(storage, other.storage))) && ((storageFormat) == (other.storageFormat))) && ((storagePoolType) == (other.storagePoolType))) && ((storageType) == (other.storageType))) && ((sanState) == (other.sanState))) && (java.util.Objects.equals(wipeAfterDelete, other.wipeAfterDelete))) && (java.util.Objects.equals(description, other.description))) && (java.util.Objects.equals(warningLowSpaceIndicator, other.warningLowSpaceIndicator))) && (java.util.Objects.equals(criticalSpaceActionBlocker, other.criticalSpaceActionBlocker)); }


@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, autoRecoverable, connection, name, storage, storageFormat, storagePoolType, storageType, description, sanState, wipeAfterDelete, warningLowSpaceIndicator, criticalSpaceActionBlocker); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain) { return getCustomMapSqlParameterSource().addValue("id", domain.getId()).addValue("storage", domain.getStorage()).addValue("storage_name", domain.getStorageName()).addValue("storage_description", domain.getDescription()).addValue("storage_comment", domain.getComment()).addValue("storage_type", domain.getStorageType()).addValue("storage_domain_type", domain.getStorageDomainType()).addValue("storage_domain_format_type", domain.getStorageFormat()).addValue("last_time_used_as_master", domain.getLastTimeUsedAsMaster()).addValue("wipe_after_delete", domain.getWipeAfterDelete()).addValue("warning_low_space_indicator", domain.getWarningLowSpaceIndicator()).addValue("critical_space_action_blocker", domain.getCriticalSpaceActionBlocker()); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain) { return getCustomMapSqlParameterSource().addValue("id", domain.getId()).addValue("storage", domain.getStorage()).addValue("storage_name", domain.getStorageName()).addValue("storage_description", domain.getDescription()).addValue("storage_comment", domain.getComment()).addValue("storage_type", domain.getStorageType()).addValue("storage_domain_type", domain.getStorageDomainType()).addValue("storage_domain_format_type", domain.getStorageFormat()).addValue("last_time_used_as_master", domain.getLastTimeUsedAsMaster()).addValue("wipe_after_delete", domain.getWipeAfterDelete()).addValue("metadata_device", domain.getMetadataDevice()).addValue("warning_low_space_indicator", domain.getWarningLowSpaceIndicator()).addValue("critical_space_action_blocker", domain.getCriticalSpaceActionBlocker()); }



public static org.ovirt.engine.ui.frontend.server.dashboard.Inventory fakeInventory(java.util.Random random) { org.ovirt.engine.ui.frontend.server.dashboard.Inventory result = new org.ovirt.engine.ui.frontend.server.dashboard.Inventory(); result.setCluster(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); result.getCluster().setTotalCount(25); result.setDc(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.createFakeValuesUpDownError(result.getDc(), 22, random); result.setHost(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.createFakeValuesUpDownError(result.getHost(), 125, random); result.setStorage(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.createFakeValuesUpDownError(result.getStorage(), 10, random); result.setVm(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.createFakeValuesUpDownError(result.getVm(), 253, random); result.setEvent(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.createFakeValuesAlertErrorWarning(result.getEvent(), 169, random); return result; }
private org.ovirt.engine.ui.frontend.server.dashboard.Inventory lookupInventory() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.Inventory inventory = new org.ovirt.engine.ui.frontend.server.dashboard.Inventory(); inventory.setDc(org.ovirt.engine.ui.frontend.server.dashboard.InventoryHelper.getDcInventoryStatus(engineDataSource)); inventory.setCluster(org.ovirt.engine.ui.frontend.server.dashboard.InventoryHelper.getClusterInventoryStatus(engineDataSource)); inventory.setHost(org.ovirt.engine.ui.frontend.server.dashboard.InventoryHelper.getHostInventoryStatus(engineDataSource)); inventory.setStorage(org.ovirt.engine.ui.frontend.server.dashboard.InventoryHelper.getStorageInventoryStatus(engineDataSource)); inventory.setVm(org.ovirt.engine.ui.frontend.server.dashboard.InventoryHelper.getVmInventorySummary(engineDataSource)); inventory.setEvent(org.ovirt.engine.ui.frontend.server.dashboard.EventHelper.getEventStatus(engineDataSource)); return inventory; }




private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus pollEntityIfSupported(org.ovirt.engine.core.bll.CommandBase<?> cmd) { if (!(cmd instanceof org.ovirt.engine.core.bll.storage.EntityPollingCommand)) { log.error("Command {} id: '{}': entity polling isn't supported, will retry to poll the job soon", cmd.getActionType(), cmd.getCommandId()); return null; } try { return ((org.ovirt.engine.core.bll.storage.EntityPollingCommand) (cmd)).poll(); } catch (java.lang.Exception e) { log.error("Command {} id: '{}': failed to poll the command entity", cmd.getActionType(), cmd.getCommandId()); } return null; }
@java.lang.Override public java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> runMultipleActions(org.ovirt.engine.core.common.action.VdcActionType actionType, java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> multipleParams, boolean isRunOnlyIfAllValidationPass, boolean isWaitForResult) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug("Server: RunMultipleAction invoked! [amount of actions: {}]", multipleParams.size()); for (org.ovirt.engine.core.common.action.VdcActionParametersBase params : multipleParams) { params.setSessionId(getEngineSessionId()); } java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> returnValues = getBackend().runMultipleActions(actionType, multipleParams, isRunOnlyIfAllValidationPass, isWaitForResult); return returnValues; }
@java.lang.Override public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runPublicQuery(org.ovirt.engine.core.common.queries.VdcQueryType queryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase params) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug("Server: runPublicQuery invoked! '{}'", queryType); debugQuery(queryType, params); return getBackend().runPublicQuery(queryType, params); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase runAction(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase params) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug("Server: RunAction invoked!"); debugAction(actionType, params); params.setSessionId(getEngineSessionId()); if (noBackend) { org.ovirt.engine.core.common.action.VdcReturnValueBase rValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); rValue.setSucceeded(true); return rValue; } return getBackend().runAction(actionType, params); }
private void setCorrelationId(org.ovirt.engine.core.common.action.VdcActionParametersBase params) { if ((httpHeaders) == null) { return; } java.util.List<java.lang.String> correlationIds = httpHeaders.getRequestHeader(org.ovirt.engine.api.restapi.resource.BackendResource.CORRELATION_ID); if ((correlationIds != null) && ((correlationIds.size()) > 0)) { params.setCorrelationId(correlationIds.get(0)); } }
@java.lang.Override protected void executeCommand() { if (getParameters().getRefresh()) { getSessionDataContainer().updateSessionLastActiveTime(getParameters().getSessionId()); } if (validatePermissions()) { if (validateInputs()) { try { returnValue.setSucceeded(true); executeQueryCommand(); } catch (java.lang.RuntimeException ex) { returnValue.setSucceeded(false); java.lang.Throwable th = (ex instanceof org.ovirt.engine.core.common.errors.EngineException) ? ex : ex.getCause(); if (th instanceof org.ovirt.engine.core.common.errors.EngineException) { org.ovirt.engine.core.common.errors.EngineException vdcExc = ((org.ovirt.engine.core.common.errors.EngineException) (th)); if ((vdcExc.getErrorCode()) != null) { returnValue.setExceptionString(vdcExc.getErrorCode().toString()); } else { returnValue.setExceptionString(vdcExc.getMessage()); } log.error("Query '{}' failed: {}", getClass().getSimpleName(), vdcExc.getMessage()); log.error("Exception", vdcExc); } else { returnValue.setExceptionString(ex.getMessage()); log.error("Query '{}' failed: {}", getClass().getSimpleName(), ex.getMessage()); log.error("Exception", ex); } } } else { log.error("Query execution failed due to invalid inputs: {}", returnValue.getExceptionString()); } } else { java.lang.String errMessage = "Query execution failed due to insufficient permissions."; log.error(errMessage); returnValue.setExceptionString(errMessage); } }
@java.lang.Override public java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> runMultipleQueries(java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryType> queryTypeList, java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryParametersBase> queryParamsList) { int size = (queryTypeList == null) ? 0 : queryTypeList.size(); org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug("Server: RunMultipleQuery invoked! [amount of queries: {}]", size); java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> ret = new java.util.ArrayList<>(); if ((queryTypeList == null) || (queryParamsList == null)) { } else if ((queryTypeList.size()) != (queryParamsList.size())) { } else { for (int i = 0; i < (queryTypeList.size()); i++) { debugQuery(queryTypeList.get(i), queryParamsList.get(i)); ret.add(runQuery(queryTypeList.get(i), queryParamsList.get(i))); } } for (org.ovirt.engine.core.common.queries.VdcQueryReturnValue vqrv : ret) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug("VdcQueryReturnValue '{}'", vqrv); } org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug("Server: RunMultipleQuery result [amount of queries: {}]", ret.size()); return ret; }
@java.lang.Override public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runQuery(org.ovirt.engine.core.common.queries.VdcQueryType search, org.ovirt.engine.core.common.queries.VdcQueryParametersBase searchParameters) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug("Server: RunQuery invoked!"); debugQuery(search, searchParameters); searchParameters.setSessionId(getEngineSessionId()); return getBackend().runQuery(search, searchParameters); }





@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name", "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), getClusterId(action)); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(VdcActionType.ImportVm, params, action); }







@org.junit.Test public void testOtherFieldsNotValidatedInImport() { org.ovirt.engine.core.common.action.ImportVmParameters parameters = createParameters(); java.lang.String tooLongString = org.ovirt.engine.core.utils.RandomUtils.instance().nextPropertyString(((org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.GENERAL_MAX_SIZE) + 1)); parameters.getVm().setUserDefinedProperties(tooLongString); parameters.setImportAsNewEntity(true); org.ovirt.engine.core.bll.exportimport.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> command = new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(parameters, poolPerCluster, externalVmMacsFinder); command.init(); java.util.Set<javax.validation.ConstraintViolation<org.ovirt.engine.core.common.action.ImportVmParameters>> validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, command.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertTrue(validate.isEmpty()); parameters.getVm().setUserDefinedProperties(tooLongString); parameters.setImportAsNewEntity(false); command = new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(parameters, poolPerCluster, externalVmMacsFinder); command.init(); validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, command.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertTrue(validate.isEmpty()); }


@org.junit.Test public void testAliasGenerationByAddVmImagesAndSnapshotsWithCollapse() { org.ovirt.engine.core.common.action.ImportVmParameters params = createParameters(); params.setCopyCollapse(true); org.ovirt.engine.core.bll.exportimport.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> cmd = spy(new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(params, poolPerCluster, externalVmMacsFinder)); cmd.init(); org.ovirt.engine.core.common.businessentities.storage.DiskImage collapsedDisk = params.getVm().getImages().get(1); doNothing().when(cmd).saveImage(collapsedDisk); doNothing().when(cmd).saveBaseDisk(collapsedDisk); doNothing().when(cmd).saveDiskImageDynamic(collapsedDisk); doNothing().when(cmd).saveDiskVmElement(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class)); doReturn(new org.ovirt.engine.core.common.businessentities.Snapshot()).when(cmd).addActiveSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); cmd.addVmImagesAndSnapshots(); assertEquals("Disk alias not generated", "testVm_Disk1", collapsedDisk.getDiskAlias()); }
@org.junit.Test public void testManagedDeviceSyncWithNewDiskId() { ImportVmParameters parameters = createParameters(); org.ovirt.engine.core.bll.exportimport.ImportVmCommand<ImportVmParameters> command = new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(parameters, poolPerCluster, externalVmMacsFinder); command.init(); java.util.List<DiskImage> diskList = new java.util.ArrayList<>(); DiskImage diskImage = new DiskImage(); diskImage.setStorageIds(new java.util.ArrayList()); DiskImage diskImage2 = new DiskImage(); diskImage2.setStorageIds(new java.util.ArrayList()); diskList.add(diskImage); diskList.add(diskImage2); DiskImage disk = command.getActiveVolumeDisk(diskList); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDevice> managedDevices = new java.util.HashMap<>(); managedDevices.put(disk.getId(), new org.ovirt.engine.core.common.businessentities.VmDevice()); org.ovirt.engine.core.compat.Guid beforeOldDiskId = disk.getId(); command.generateNewDiskId(diskList, disk); command.updateManagedDeviceMap(disk, managedDevices); org.ovirt.engine.core.compat.Guid oldDiskId = command.newDiskIdForDisk.get(disk.getId()).getId(); assertEquals("The old disk id should be similar to the value at the newDiskIdForDisk.", beforeOldDiskId, oldDiskId); assertNotNull("The manged device should return the disk device by the new key", managedDevices.get(disk.getId())); assertNull("The manged device should not return the disk device by the old key", managedDevices.get(beforeOldDiskId)); }
@org.junit.Test public void testCDANoCollapseNoSnapshots() { final org.ovirt.engine.core.common.businessentities.VM v = createVmWithNoSnapshots(); v.setName("testVm"); org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(v, org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid()); params.setCopyCollapse(false); org.ovirt.engine.core.bll.exportimport.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> cmd = spy(new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(params, poolPerCluster, externalVmMacsFinder)); cmd.init(); org.ovirt.engine.core.common.businessentities.storage.DiskImage activeDisk = params.getVm().getImages().get(0); doNothing().when(cmd).saveImage(activeDisk); doNothing().when(cmd).saveDiskImageDynamic(activeDisk); doNothing().when(cmd).saveBaseDisk(activeDisk); doNothing().when(cmd).saveDiskVmElement(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class)); doReturn(new org.ovirt.engine.core.common.businessentities.Snapshot()).when(cmd).addActiveSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); cmd.addVmImagesAndSnapshots(); assertEquals("Disk alias not generated", "testVm_Disk1", activeDisk.getDiskAlias()); }

@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.bll.utils.VmDeviceUtils.class, vmDeviceUtils); org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); final int osId = 0; java.util.Map<java.lang.Integer, java.util.Map<org.ovirt.engine.core.compat.Version, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.DisplayType>>>> displayTypeMap = new java.util.HashMap<>(); displayTypeMap.put(osId, new java.util.HashMap()); displayTypeMap.get(osId).put(null, java.util.Collections.singletonList(new org.ovirt.engine.core.common.utils.Pair(org.ovirt.engine.core.common.businessentities.GraphicsType.SPICE, org.ovirt.engine.core.common.businessentities.DisplayType.qxl))); when(osRepository.getGraphicsAndDisplays()).thenReturn(displayTypeMap); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } macPool = getMacPool(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> domainsMap = new java.util.HashMap<>(); if (!(validateBeforeCloneVm(domainsMap))) { return false; } if (org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().isImportAsNewEntity()) { initImportClonedVm(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getInterfaces().size()) > (macPool.getAvailableMacsCount())) { return failValidation(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateBallonDevice())) { return false; } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateSoundDevice())) { return false; } return validateAfterCloneVm(domainsMap); }
private void checkVmName(boolean isImportAsNewEntity, java.lang.String name) { org.ovirt.engine.core.common.action.ImportVmParameters parameters = createParameters(); parameters.getVm().setName(name); parameters.setImportAsNewEntity(isImportAsNewEntity); org.ovirt.engine.core.bll.exportimport.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> command = new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(parameters, poolPerCluster, externalVmMacsFinder); command.init(); java.util.Set<javax.validation.ConstraintViolation<org.ovirt.engine.core.common.action.ImportVmParameters>> validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, command.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertEquals(validate.isEmpty(), (!isImportAsNewEntity)); }
@org.junit.Test public void testAliasGenerationByAddVmImagesAndSnapshotsWithoutCollapse() { org.ovirt.engine.core.common.action.ImportVmParameters params = createParameters(); params.setCopyCollapse(false); org.ovirt.engine.core.bll.exportimport.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> cmd = spy(new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(params, poolPerCluster, externalVmMacsFinder)); cmd.init(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : params.getVm().getImages()) { doNothing().when(cmd).saveImage(image); doNothing().when(cmd).saveSnapshotIfNotExists(any(org.ovirt.engine.core.compat.Guid.class), eq(image)); doNothing().when(cmd).saveDiskImageDynamic(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImage activeDisk = params.getVm().getImages().get(1); doNothing().when(cmd).updateImage(activeDisk); doNothing().when(cmd).saveBaseDisk(activeDisk); doNothing().when(cmd).updateActiveSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); doNothing().when(cmd).saveDiskVmElement(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class)); cmd.addVmImagesAndSnapshots(); assertEquals("Disk alias not generated", "testVm_Disk1", activeDisk.getDiskAlias()); }
private void validateVnicProfileMapping(org.ovirt.engine.api.model.VnicProfileMapping mapping) { if (!(mapping.isSetSourceNetworkName())) { badRequest("vNic profile mapping is missing source network name."); } if (!(mapping.isSetSourceNetworkProfileName())) { badRequest("vNic profile mapping is missing source network profile name."); } if (!(mapping.isSetTargetVnicProfile())) { badRequest("vNic profile mapping is missing target vNic profile."); } if (!(mapping.getTargetVnicProfile().isSetId())) { badRequest("vNic profile mapping is missing target vNic profile id."); } asGuid(mapping.getTargetVnicProfile().getId()); }

private org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping mapSingleMappingEntry(org.ovirt.engine.api.model.VnicProfileMapping model) { return new org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping(model.getSourceNetworkName(), model.getSourceNetworkProfileName(), org.ovirt.engine.core.compat.Guid.createGuidFromString(model.getTargetVnicProfile().getId())); }










public void updateNetworkInfo(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic, java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> externalVnicProfileMappings) { org.ovirt.engine.core.common.businessentities.network.VnicProfile targetVnicProfile = targetVnicProfileFinder.findTargetVnicProfile(vnic.getNetworkName(), vnic.getVnicProfileName(), externalVnicProfileMappings); if (targetVnicProfile != null) { vnic.setVnicProfileId(targetVnicProfile.getId()); vnic.setNetworkName(getVnicProfileNetworkName(targetVnicProfile.getNetworkId())); vnic.setVnicProfileName(targetVnicProfile.getName()); } }
@org.junit.Test public void testUpdateNetworkInfo() { when(mockTargetVnicProfileFinder.findTargetVnicProfile(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME, externalVnicProfileMappings)).thenReturn(vnicProfile); when(mockNetworkDao.get(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_ID)).thenReturn(targetNetwork); underTest.updateNetworkInfo(mockVmNetworkInterface, externalVnicProfileMappings); verify(mockTargetVnicProfileFinder).findTargetVnicProfile(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME, externalVnicProfileMappings); verify(mockVmNetworkInterface).setVnicProfileId(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_ID); verify(mockVmNetworkInterface).setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME); verify(mockVmNetworkInterface).setNetworkName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_NAME); }
@org.junit.Before public void setUp() { externalVnicProfileMappings = new java.util.ArrayList(); vnicProfile = new org.ovirt.engine.core.common.businessentities.network.VnicProfile(); vnicProfile.setId(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_ID); vnicProfile.setName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME); vnicProfile.setNetworkId(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_ID); targetNetwork = new org.ovirt.engine.core.common.businessentities.network.Network(); targetNetwork.setName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_NAME); when(mockVmNetworkInterface.getNetworkName()).thenReturn(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME); when(mockVmNetworkInterface.getVnicProfileName()).thenReturn(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME); }

@java.lang.Override protected java.util.Map<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.GraphicsInfo> extractGraphicsInofs(org.ovirt.engine.core.common.businessentities.VmTemplate vm) { return new java.util.HashMap<>(); }
@javax.ws.rs.GET @javax.ws.rs.Produces({ org.ovirt.engine.api.resource.ApiMediaType.APPLICATION_X_VIRT_VIEWER }) public javax.ws.rs.core.Response generateDescriptor() { org.ovirt.engine.core.common.businessentities.GraphicsType graphicsType = asGraphicsType(); org.ovirt.engine.core.common.console.ConsoleOptions consoleOptions = new org.ovirt.engine.core.common.console.ConsoleOptions(graphicsType); consoleOptions.setVmId(getGuid()); org.ovirt.engine.core.common.queries.VdcQueryReturnValue configuredOptionsReturnValue = runQuery(VdcQueryType.ConfigureConsoleOptions, new org.ovirt.engine.core.common.queries.ConfigureConsoleOptionsParams(consoleOptions, true)); if (!(configuredOptionsReturnValue.getSucceeded())) { return handleConfigureConsoleError(configuredOptionsReturnValue); } org.ovirt.engine.core.common.queries.VdcQueryReturnValue consoleDescriptorReturnValue = runQuery(VdcQueryType.GetConsoleDescriptorFile, new org.ovirt.engine.core.common.queries.ConsoleOptionsParams(configuredOptionsReturnValue.getReturnValue())); javax.ws.rs.core.Response.ResponseBuilder builder; if ((consoleDescriptorReturnValue.getSucceeded()) && ((consoleDescriptorReturnValue.getReturnValue()) != null)) { builder = javax.ws.rs.core.Response.ok(((java.lang.String) (consoleDescriptorReturnValue.getReturnValue())).getBytes(java.nio.charset.StandardCharsets.UTF_8), ApiMediaType.APPLICATION_X_VIRT_VIEWER); } else { builder = javax.ws.rs.core.Response.noContent(); } return builder.build(); }
@java.lang.Override protected org.ovirt.engine.api.model.InstanceType loadEntity() { return getEntity(org.ovirt.engine.api.model.InstanceType.class, VdcQueryType.GetInstanceType, new org.ovirt.engine.core.common.queries.GetVmTemplateParameters(getGuid()), getGuid().toString(), true); }

